{"map":"{\"version\":3,\"sources\":[\"webpack/universalModuleDefinition\",\"webpack/bootstrap\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_root.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_checkGlobal.js\",\"C:\\\\Users\\\\xpb\\\\AppData\\\\Roaming\\\\nvm\\\\v9.9.0\\\\node_global\\\\node_modules\\\\webpack\\\\buildin\\\\harmony-module.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\constant.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isBuffer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getPrototype.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isHostObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isObjectLike.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isPlainObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\config.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\ckeditorerror.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\spy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\eventinfo.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\uid.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\priorities.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\emittermixin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\mix.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_listCacheClear.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\eq.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_assocIndexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_listCacheDelete.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_listCacheGet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_listCacheHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_listCacheSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_ListCache.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stackClear.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stackDelete.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stackGet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stackHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isFunction.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_toSource.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isNative.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getNative.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_nativeCreate.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hashClear.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hashDelete.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hashGet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hashHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hashSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Hash.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Map.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapCacheClear.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isKeyable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getMapData.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapCacheDelete.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapCacheGet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapCacheHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapCacheSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_MapCache.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stackSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Stack.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayEach.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_assignValue.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_copyObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseKeys.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseTimes.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseProperty.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getLength.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isLength.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isArrayLike.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isArrayLikeObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isArguments.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isString.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_indexKeys.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isPrototype.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\keys.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseAssign.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneBuffer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_copyArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getSymbols.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_copySymbols.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayPush.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseGetAllKeys.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getAllKeys.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_DataView.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Promise.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Set.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_WeakMap.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getTag.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_initCloneArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Uint8Array.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneArrayBuffer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneDataView.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_addMapEntry.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayReduce.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_mapToArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneMap.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneRegExp.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_addSetEntry.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_setToArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Symbol.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneSymbol.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cloneTypedArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_initCloneByTag.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseCreate.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_initCloneObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseClone.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\clone.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\node.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\text.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\textproxy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\objecttomap.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\isiterable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\matcher.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\element.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\containerelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isIterateeCall.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_apply.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isSymbol.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toNumber.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toFinite.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toInteger.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\rest.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_createAssigner.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_Reflect.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_iteratorToArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseKeysIn.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\keysIn.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\assignIn.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\observablemixin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\editableelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\rooteditableelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\treewalker.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\comparearrays.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\position.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\range.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\count.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\selection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\collection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\document.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\attributeelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\emptyelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\env.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\keyboard.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\uielement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\documentfragment.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\writer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\filler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\diff.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\insertat.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\remove.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\istext.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\renderer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\global.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\indexof.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\getancestors.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\domconverter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\getcommonancestor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\isnode.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\iswindow.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\emittermixin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\observer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_setCacheAdd.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_setCacheHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_SetCache.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arraySome.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_equalArrays.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_equalByTag.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_equalObjects.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isTypedArray.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIsEqualDeep.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIsEqual.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isEqualWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\mutationobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\domeventdata.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\domeventobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\keyobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\now.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\debounce.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\fakeselectionobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\log.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\selectionobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\focusobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\compositionobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\isrange.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isElement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\getborderwidths.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\rect.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\scroll.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\view.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\tomap.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\node.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\text.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\textproxy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\nodelist.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\element.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\treewalker.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\last.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\position.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\range.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\mapper.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\modelconsumable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\downcastdispatcher.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\selection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\liverange.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\documentselection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\cloneDeep.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\downcast-converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\controller\\\\editingcontroller.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\upcast-selection-converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\downcast-selection-converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\plugincollection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\commandcollection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\translation-service.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\locale.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\viewconsumable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\schema.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\upcastdispatcher.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\upcast-converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\controller\\\\datacontroller.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\conversion\\\\conversion.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\operation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\documentfragment.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\isEqual.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\attributeoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\moveoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\reinsertoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\removeoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\insertoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\markeroperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\nooperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\renameoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\rootattributeoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\operationfactory.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\deltafactory.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\delta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\attributedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\splitdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\mergedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\movedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\removedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\renamedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\wrapdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\unwrapdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\insertdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\weakinsertdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\transform.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseSlice.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\chunk.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\compact.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isFlattenable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseFlatten.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\concat.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_indexOfNaN.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIndexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayIncludes.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayIncludesWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayMap.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseUnary.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_cacheHas.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseDifference.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\difference.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIsMatch.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isStrictComparable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseToPairs.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_setToPairs.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_createToPairs.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toPairs.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_getMatchData.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_matchesStrictComparable.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseMatches.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\memoize.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseToString.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toString.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_stringToPath.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_castPath.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_isKey.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_toKey.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseGet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\get.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseHasIn.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_hasPath.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\hasIn.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseMatchesProperty.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\identity.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_basePropertyDeep.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\property.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIteratee.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\differenceBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\differenceWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\drop.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\dropRight.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseWhile.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\dropRightWhile.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\dropWhile.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseClamp.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\toLength.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseFill.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\fill.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseFindIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\findIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\findLastIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\head.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\flatten.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\flattenDeep.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\flattenDepth.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\fromPairs.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\indexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\initial.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIntersection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_castArrayLikeObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\intersection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\intersectionBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\intersectionWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\join.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\lastIndexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseNth.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\nth.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseIndexOfWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_basePullAll.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\pullAll.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\pull.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\pullAllBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\pullAllWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseAt.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_parent.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_basePullAt.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_compareAscending.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\pullAt.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\remove.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\reverse.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\slice.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseSortedIndexBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseSortedIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedIndexBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedIndexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedLastIndex.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedLastIndexBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedLastIndexOf.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseSortedUniq.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedUniq.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\sortedUniqBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\tail.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\take.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\takeRight.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\takeRightWhile.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\takeWhile.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\noop.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_createSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseUniq.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\union.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\unionBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\unionWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\uniq.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\uniqBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\uniqWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_arrayFilter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\unzip.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\unzipWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\without.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseXor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\xor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\xorBy.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\xorWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\zip.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseZipObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\zipObject.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\_baseSet.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\zipObjectDeep.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\zipWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\array.default.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\transform.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\markerdelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\basic-transformations.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\batch.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\delta\\\\rootattributedelta.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\operation\\\\detachoperation.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\rootelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\writer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\differ.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\history.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\unicode.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\document.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\markercollection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\liveposition.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\utils\\\\insertcontent.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\utils\\\\deletecontent.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\utils\\\\modifyselection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\utils\\\\getselectedcontent.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\model\\\\model.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\keystrokehandler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\editingkeystrokehandler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\editor\\\\editor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\editor\\\\utils\\\\dataapimixin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\editor\\\\utils\\\\elementapimixin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\setdatainelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\dataprocessor\\\\basichtmlwriter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\dataprocessor\\\\htmldataprocessor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\componentfactory.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\focustracker.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-editor-classic\\\\src\\\\classiceditorui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\toolbar\\\\normalizetoolbarconfig.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\toolbar\\\\enabletoolbarkeyboardfocus.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\viewcollection.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\lib\\\\lodash\\\\cloneDeepWith.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\template.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\view.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\editorui\\\\editoruiview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\label\\\\labelview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\editorui\\\\boxed\\\\boxededitoruiview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\editableui\\\\editableuiview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\editableui\\\\inline\\\\inlineeditableuiview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\tounit.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\panel\\\\sticky\\\\stickypanelview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\focuscycler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\toolbar\\\\toolbarseparatorview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\toolbar\\\\toolbarview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\bindings\\\\preventdefault.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-editor-classic\\\\src\\\\classiceditoruiview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\elementreplacer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-editor-classic\\\\src\\\\classiceditor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\editor\\\\utils\\\\attachtoform.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\getdatafromelement.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\plugin.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\datatransfer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\clipboardobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\utils\\\\viewtoplaintext.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\clipboard.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\utils\\\\plaintexttohtml.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-clipboard\\\\src\\\\utils\\\\normalizeclipboarddata.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-core\\\\src\\\\command.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-enter\\\\src\\\\entercommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-enter\\\\src\\\\enterobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-enter\\\\src\\\\enter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\changebuffer.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\inputcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\input.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\difftochanges.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\deletecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\deleteobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\delete.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-typing\\\\src\\\\typing.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\basecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\undocommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\redocommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\undoediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\icon\\\\iconview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\tooltip\\\\tooltipview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\button\\\\buttonview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\undoui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-undo\\\\src\\\\undo.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-upload\\\\src\\\\filereader.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-upload\\\\src\\\\filerepository.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-adapter-ckfinder\\\\src\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-adapter-ckfinder\\\\src\\\\uploadadapter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-autoformat\\\\src\\\\blockautoformatediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-autoformat\\\\src\\\\inlineautoformatediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\attributecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\bold\\\\boldediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\bold\\\\boldui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\italic\\\\italicediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\italic\\\\italicui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\first.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-block-quote\\\\src\\\\blockquotecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-block-quote\\\\src\\\\blockquoteediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-block-quote\\\\src\\\\blockquoteui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor-cloudservices-core\\\\src\\\\uploadgateway\\\\fileuploader.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor-cloudservices-core\\\\src\\\\token\\\\token.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-cloudservices\\\\src\\\\cloudservices.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-easy-image\\\\src\\\\cloudservicesuploadadapter.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\image\\\\converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor-cloudservices-core\\\\src\\\\uploadgateway\\\\uploadgateway.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-widget\\\\src\\\\highlightstack.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-widget\\\\src\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\image\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\image\\\\imageediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\mouseobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-widget\\\\src\\\\widget.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetextalternative\\\\imagetextalternativecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetextalternative\\\\imagetextalternativeediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\bindings\\\\clickoutsidehandler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\labeledinput\\\\labeledinputview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\inputtext\\\\inputtextview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\bindings\\\\submithandler.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetextalternative\\\\ui\\\\textalternativeformview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\position.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-utils\\\\src\\\\dom\\\\getpositionedancestor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\panel\\\\balloon\\\\balloonpanelview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\panel\\\\balloon\\\\contextualballoon.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\image\\\\ui\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetextalternative\\\\imagetextalternativeui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetextalternative.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\image.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-upload\\\\src\\\\ui\\\\filedialogbuttonview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload\\\\imageuploadui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload\\\\imageuploadprogress.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload\\\\imageuploadcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\notification\\\\notification.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload\\\\imageuploadediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imageupload.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-paragraph\\\\src\\\\paragraphcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-paragraph\\\\src\\\\paragraph.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-heading\\\\src\\\\headingcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-heading\\\\src\\\\headingediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\model.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\dropdown\\\\dropdownpanelview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\dropdown\\\\dropdownview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\dropdown\\\\button\\\\dropdownbuttonview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\list\\\\listview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\list\\\\listitemview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-ui\\\\src\\\\dropdown\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-heading\\\\src\\\\headingui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\placeholder.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagecaption\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagecaption\\\\imagecaptionediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle\\\\imagestylecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle\\\\converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle\\\\imagestyleediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle\\\\imagestyleui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagetoolbar.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\findlinkrange.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\linkcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\unlinkcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\utils\\\\bindtwostepcarettoattribute.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\linkediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-engine\\\\src\\\\view\\\\observer\\\\clickobserver.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\ui\\\\linkformview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\ui\\\\linkactionsview.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\linkui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\listcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\indentcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\converters.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\listediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\listui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontcommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontfamily\\\\fontfamilycommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontfamily\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontfamily\\\\fontfamilyediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontfamily\\\\fontfamilyui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontfamily.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontsize\\\\fontsizecommand.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontsize\\\\utils.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontsize\\\\fontsizeediting.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontsize\\\\fontsizeui.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\fontsize.js\",\"F:\\\\website\\\\qingxiao\\\\app\\\\src\\\\ckeditor.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-essentials\\\\src\\\\essentials.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-autoformat\\\\src\\\\autoformat.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\bold.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-basic-styles\\\\src\\\\italic.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-block-quote\\\\src\\\\blockquote.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-easy-image\\\\src\\\\easyimage.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-heading\\\\src\\\\heading.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagecaption.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-image\\\\src\\\\imagestyle.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-link\\\\src\\\\link.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-list\\\\src\\\\list.js\",\"F:\\\\website\\\\qingxiao\\\\node_modules\\\\@ckeditor\\\\ckeditor5-font\\\\src\\\\font.js\",\"C:\\\\Users\\\\xpb\\\\AppData\\\\Roaming\\\\nvm\\\\v9.9.0\\\\node_global\\\\node_modules\\\\webpack\\\\buildin\\\\global.js\"],\"names\":[\"root\",\"factory\",\"exports\",\"module\",\"define\",\"amd\",\"window\",\"installedModules\",\"__webpack_require__\",\"moduleId\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"configurable\",\"enumerable\",\"get\",\"r\",\"value\",\"n\",\"__esModule\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"objectTypes\",\"function\",\"freeExports\",\"nodeType\",\"undefined\",\"freeModule\",\"freeGlobal\",\"_checkGlobal__WEBPACK_IMPORTED_MODULE_0__\",\"global\",\"freeSelf\",\"self\",\"freeWindow\",\"thisGlobal\",\"Function\",\"__webpack_exports__\",\"originalModule\",\"webpackPolyfill\",\"create\",\"children\",\"Buffer\",\"_root__WEBPACK_IMPORTED_MODULE_1__\",\"isBuffer\",\"_constant__WEBPACK_IMPORTED_MODULE_0__\",\"nativeGetPrototype\",\"getPrototypeOf\",\"_getPrototype\",\"_isHostObject\",\"result\",\"toString\",\"e\",\"lodash_isObjectLike\",\"isPlainObject_objectTag\",\"isPlainObject_objectProto\",\"isPlainObject_funcToString\",\"isPlainObject_hasOwnProperty\",\"isPlainObject_objectCtorString\",\"isPlainObject_objectToString\",\"lodash_isPlainObject\",\"proto\",\"Ctor\",\"constructor\",\"config_Config\",\"[object Object]\",\"configurations\",\"defaultConfigurations\",\"this\",\"_config\",\"_setObjectToTarget\",\"_setToTarget\",\"_getFromSource\",\"target\",\"isDefine\",\"parts\",\"split\",\"pop\",\"part\",\"source\",\"configuration\",\"keys\",\"forEach\",\"key\",\"DOCUMENTATION_URL\",\"CKEditorError\",\"Error\",\"message\",\"data\",\"attachLinkToDocumentation\",\"JSON\",\"stringify\",\"super\",\"error\",\"matchedErrorName\",\"match\",\"src_spy\",\"spy\",\"called\",\"eventinfo_EventInfo\",\"path\",\"stop\",\"off\",\"uid\",\"uuid\",\"Math\",\"floor\",\"random\",\"substring\",\"src_priorities\",\"priority\",\"normal\",\"highest\",\"high\",\"low\",\"lowest\",\"emittermixin_listeningTo\",\"Symbol\",\"emittermixin_emitterId\",\"event\",\"callback\",\"options\",\"listenTo\",\"args\",\"stopListening\",\"emitter\",\"emitterInfo\",\"eventCallbacks\",\"emitters\",\"emittermixin_getEmitterId\",\"emittermixin_setEmitterId\",\"emitterId\",\"callbacks\",\"push\",\"eventName\",\"events\",\"emittermixin_getEvents\",\"childEventName\",\"newEventNodes\",\"childEvents\",\"substr\",\"lastIndexOf\",\"node\",\"slice\",\"emittermixin_createEventNamespace\",\"lists\",\"emittermixin_getCallbacksListsForNamespace\",\"callbackDefinition\",\"added\",\"length\",\"splice\",\"emittermixin_removeCallback\",\"eventOrInfo\",\"eventInfo\",\"emittermixin_getCallbacksForEvent\",\"_events\",\"indexOf\",\"callbackArgs\",\"Array\",\"from\",\"apply\",\"_delegations\",\"destinations\",\"passAllDestinations\",\"emittermixin_fireDelegatedEvents\",\"return\",\"to\",\"nameOrFunction\",\"Map\",\"set\",\"delete\",\"clear\",\"id\",\"eventNode\",\"callbacksLists\",\"childCallbacksLists\",\"concat\",\"fireArgs\",\"delegatedInfo\",\"fire\",\"mix\",\"baseClass\",\"mixins\",\"mixin\",\"getOwnPropertyNames\",\"getOwnPropertySymbols\",\"sourceDescriptor\",\"getOwnPropertyDescriptor\",\"_listCacheClear\",\"__data__\",\"lodash_eq\",\"other\",\"_assocIndexOf\",\"array\",\"_listCacheDelete_splice\",\"_listCacheDelete\",\"index\",\"_listCacheGet\",\"_listCacheHas\",\"_listCacheSet\",\"_ListCache_ListCache\",\"entries\",\"entry\",\"has\",\"_ListCache\",\"_stackClear\",\"_stackDelete\",\"_stackGet\",\"_stackHas\",\"lodash_isObject\",\"type\",\"isFunction_funcTag\",\"isFunction_genTag\",\"isFunction_objectToString\",\"lodash_isFunction\",\"tag\",\"_toSource_funcToString\",\"_toSource\",\"func\",\"isNative_reIsHostCtor\",\"isNative_objectProto\",\"isNative_funcToString\",\"isNative_hasOwnProperty\",\"isNative_reIsNative\",\"RegExp\",\"replace\",\"lodash_isNative\",\"test\",\"_getNative\",\"_nativeCreate\",\"_hashClear\",\"_hashDelete\",\"_hashGet_HASH_UNDEFINED\",\"_hashGet_hasOwnProperty\",\"_hashGet\",\"_hashHas_hasOwnProperty\",\"_hashHas\",\"_hashSet_HASH_UNDEFINED\",\"_hashSet\",\"_Hash_Hash\",\"_Hash\",\"_Map\",\"_root\",\"_mapCacheClear\",\"hash\",\"map\",\"string\",\"_isKeyable\",\"_getMapData\",\"_mapCacheDelete\",\"_mapCacheGet\",\"_mapCacheHas\",\"_mapCacheSet\",\"_MapCache_MapCache\",\"_MapCache\",\"_stackSet_LARGE_ARRAY_SIZE\",\"_stackSet\",\"cache\",\"_Stack_Stack\",\"_Stack\",\"_arrayEach\",\"iteratee\",\"_assignValue_hasOwnProperty\",\"_assignValue\",\"objValue\",\"_copyObject\",\"props\",\"customizer\",\"newValue\",\"_baseHas_hasOwnProperty\",\"_baseHas\",\"nativeKeys\",\"_baseKeys\",\"_baseTimes\",\"_baseProperty\",\"_getLength\",\"MAX_SAFE_INTEGER\",\"lodash_isLength\",\"lodash_isArrayLike\",\"lodash_isArrayLikeObject\",\"isArguments_argsTag\",\"isArguments_objectProto\",\"isArguments_hasOwnProperty\",\"isArguments_objectToString\",\"isArguments_propertyIsEnumerable\",\"propertyIsEnumerable\",\"lodash_isArguments\",\"lodash_isArray\",\"isArray\",\"isString_stringTag\",\"isString_objectToString\",\"lodash_isString\",\"_indexKeys\",\"String\",\"_isIndex_MAX_SAFE_INTEGER\",\"reIsUint\",\"_isIndex\",\"_isPrototype_objectProto\",\"_isPrototype\",\"lodash_keys\",\"isProto\",\"indexes\",\"skipIndexes\",\"_baseAssign\",\"_cloneBuffer\",\"buffer\",\"isDeep\",\"copy\",\"_copyArray\",\"getSymbols\",\"_getSymbols\",\"_copySymbols\",\"_arrayPush\",\"values\",\"offset\",\"_baseGetAllKeys\",\"keysFunc\",\"symbolsFunc\",\"_getAllKeys\",\"_DataView\",\"_Promise\",\"_Set\",\"_WeakMap\",\"_getTag_objectToString\",\"_getTag_dataViewCtorString\",\"_getTag_mapCtorString\",\"_getTag_promiseCtorString\",\"_getTag_setCtorString\",\"_getTag_weakMapCtorString\",\"_getTag_getTag\",\"ArrayBuffer\",\"resolve\",\"ctorString\",\"_getTag\",\"_initCloneArray_hasOwnProperty\",\"_initCloneArray\",\"input\",\"_Uint8Array\",\"Uint8Array\",\"_cloneArrayBuffer\",\"arrayBuffer\",\"byteLength\",\"_cloneDataView\",\"dataView\",\"byteOffset\",\"_addMapEntry\",\"pair\",\"_arrayReduce\",\"accumulator\",\"initAccum\",\"_mapToArray\",\"size\",\"_cloneMap\",\"cloneFunc\",\"reFlags\",\"_cloneRegExp\",\"regexp\",\"exec\",\"lastIndex\",\"_addSetEntry\",\"add\",\"_setToArray\",\"_cloneSet\",\"_Symbol\",\"_cloneSymbol_symbolProto\",\"_cloneSymbol_symbolValueOf\",\"valueOf\",\"_cloneSymbol\",\"symbol\",\"_cloneTypedArray\",\"typedArray\",\"_initCloneByTag_boolTag\",\"_initCloneByTag_dateTag\",\"_initCloneByTag_mapTag\",\"_initCloneByTag_numberTag\",\"_initCloneByTag_regexpTag\",\"_initCloneByTag_setTag\",\"_initCloneByTag_stringTag\",\"_initCloneByTag_symbolTag\",\"_initCloneByTag_arrayBufferTag\",\"_initCloneByTag_dataViewTag\",\"_initCloneByTag_float32Tag\",\"_initCloneByTag_float64Tag\",\"_initCloneByTag_int8Tag\",\"_initCloneByTag_int16Tag\",\"_initCloneByTag_int32Tag\",\"_initCloneByTag_uint8Tag\",\"_initCloneByTag_uint8ClampedTag\",\"_initCloneByTag_uint16Tag\",\"_initCloneByTag_uint32Tag\",\"_initCloneByTag\",\"_baseCreate_objectCreate\",\"_baseCreate\",\"_initCloneObject\",\"_baseClone_argsTag\",\"_baseClone_funcTag\",\"_baseClone_genTag\",\"_baseClone_objectTag\",\"_baseClone_cloneableTags\",\"_baseClone\",\"_baseClone_baseClone\",\"isFull\",\"stack\",\"isArr\",\"isFunc\",\"stacked\",\"subValue\",\"lodash_clone\",\"node_Node\",\"parent\",\"pos\",\"getChildIndex\",\"nextSibling\",\"getChild\",\"previousSibling\",\"document\",\"includeSelf\",\"parentFirst\",\"ancestors\",\"ancestorsA\",\"getAncestors\",\"ancestorsB\",\"_removeChildren\",\"_fireChange\",\"json\",\"emittermixin\",\"text_Text\",\"_textData\",\"_data\",\"otherNode\",\"textproxy_TextProxy\",\"textNode\",\"offsetInText\",\"offsetSize\",\"isPartial\",\"objectToMap\",\"obj\",\"isIterable\",\"iterator\",\"Matcher\",\"pattern\",\"_patterns\",\"item\",\"class\",\"element\",\"singleElement\",\"isElementMatching\",\"results\",\"matchName\",\"attribute\",\"patterns\",\"hasAttribute\",\"getAttribute\",\"matchAttributes\",\"classes\",\"getClassNames\",\"hasClass\",\"matchClasses\",\"style\",\"hasStyle\",\"getStyle\",\"matchStyles\",\"element_Element\",\"attrs\",\"_attrs\",\"element_parseAttributes\",\"_children\",\"_insertChildren\",\"_classes\",\"Set\",\"classString\",\"element_parseClasses\",\"_styles\",\"element_parseInlineStyles\",\"_customProperties\",\"childCount\",\"isEmpty\",\"join\",\"styleString\",\"otherElement\",\"className\",\"matcher\",\"sort\",\"styles\",\"attributes\",\"deep\",\"childrenClone\",\"child\",\"getChildren\",\"_clone\",\"cloned\",\"getFillerOffset\",\"items\",\"count\",\"nodes\",\"element_normalize\",\"_remove\",\"howMany\",\"stylesMap\",\"stylesString\",\"quoteType\",\"propertyNameStart\",\"propertyValueStart\",\"propertyName\",\"charAt\",\"char\",\"propertyValue\",\"trim\",\"classesSet\",\"classesString\",\"classArray\",\"containerelement_ContainerElement\",\"containerelement_getFillerOffset\",\"is\",\"_isIterateeCall\",\"_apply\",\"thisArg\",\"isSymbol_symbolTag\",\"isSymbol_objectToString\",\"lodash_isSymbol\",\"toNumber_NAN\",\"toNumber_reTrim\",\"toNumber_reIsBadHex\",\"toNumber_reIsBinary\",\"toNumber_reIsOctal\",\"toNumber_freeParseInt\",\"parseInt\",\"lodash_toNumber\",\"isBinary\",\"toFinite_INFINITY\",\"toFinite_MAX_INTEGER\",\"lodash_toFinite\",\"lodash_toInteger\",\"remainder\",\"rest_FUNC_ERROR_TEXT\",\"rest_nativeMax\",\"max\",\"lodash_rest\",\"start\",\"TypeError\",\"arguments\",\"otherArgs\",\"_createAssigner\",\"assigner\",\"sources\",\"guard\",\"_Reflect\",\"Reflect\",\"_iteratorToArray\",\"next\",\"done\",\"_baseKeysIn_objectProto\",\"_baseKeysIn_enumerate\",\"enumerate\",\"_baseKeysIn_propertyIsEnumerable\",\"_baseKeysIn_baseKeysIn\",\"_baseKeysIn\",\"keysIn_hasOwnProperty\",\"lodash_keysIn\",\"propsLength\",\"assignIn_nonEnumShadows\",\"lodash_assignIn\",\"observablemixin_observablePropertiesSymbol\",\"observablemixin_boundObservablesSymbol\",\"observablemixin_boundPropertiesSymbol\",\"observablemixin_ObservableMixin\",\"observablemixin_initObservable\",\"properties\",\"oldValue\",\"bindProperties\",\"observablemixin_isStringArray\",\"boundProperties\",\"bindings\",\"a\",\"binding\",\"observablemixin_bindTo\",\"toMany\",\"observablemixin_bindToMany\",\"_observable\",\"_bindProperties\",\"_to\",\"_bindings\",\"unbindProperties\",\"boundObservables\",\"toObservable\",\"toProperty\",\"toProperties\",\"toPropertyBindings\",\"boundObservable\",\"methodName\",\"originalMethod\",\"on\",\"evt\",\"observablemixin\",\"observable\",\"parsedArgs\",\"parsed\",\"lastObservable\",\"observablemixin_parseBindToArgs\",\"bindingsKeys\",\"numberOfBindings\",\"observablemixin_updateBoundObservableProperty\",\"chain\",\"toPropertyName\",\"bindingsToObservable\",\"observablemixin_updateBoundObservables\",\"observablemixin_updateBindToBound\",\"observables\",\"observableAndAttributePairs\",\"observablemixin_getBindingTargets\",\"arr\",\"every\",\"editableelement_documentSymbol\",\"editableelement_EditableElement\",\"getCustomProperty\",\"_document\",\"_setCustomProperty\",\"bind\",\"isFocused\",\"selection\",\"editableElement\",\"rooteditableelement_rootNameSymbol\",\"rooteditableelement_RootEditableElement\",\"rootName\",\"_name\",\"treewalker_TreeWalker\",\"boundaries\",\"startPosition\",\"direction\",\"position\",\"position_Position\",\"createFromPosition\",\"singleCharacters\",\"shallow\",\"ignoreElementEnd\",\"_boundaryStartParent\",\"_boundaryEndParent\",\"end\",\"skip\",\"prevPosition\",\"_next\",\"_previous\",\"previousPosition\",\"isAtEnd\",\"createAfter\",\"_formatReturnValue\",\"charactersCount\",\"textLength\",\"textProxy\",\"isAtStart\",\"createBefore\",\"startOffset\",\"nextPosition\",\"isEqual\",\"compareArrays\",\"b\",\"minLen\",\"min\",\"nodeAfter\",\"nodeBefore\",\"endOffset\",\"editable\",\"shift\",\"shifted\",\"treeWalker\",\"otherPosition\",\"compareWith\",\"otherPath\",\"commonAncestorIndex\",\"commonAncestor\",\"nextAncestor1\",\"nextAncestor2\",\"itemOrPosition\",\"range_Range\",\"isCollapsed\",\"isFlat\",\"getLastMatchingPosition\",\"range_enlargeTrimSkip\",\"isAfter\",\"nodeAfterStart\",\"nodeBeforeEnd\",\"otherRange\",\"isBefore\",\"loose\",\"containsStart\",\"containsPosition\",\"containsEnd\",\"ranges\",\"isIntersecting\",\"createFromRange\",\"commonRangeStart\",\"commonRangeEnd\",\"getCommonAncestor\",\"startElement\",\"endElement\",\"range\",\"getShiftedBy\",\"createFromParentsAndOffsets\",\"createFromPositionAndShift\",\"createAt\",\"count_count\",\"_\",\"selection_Selection\",\"selectable\",\"placeOrOffset\",\"_ranges\",\"_lastRangeBackward\",\"_isFake\",\"_fakeSelectionLabel\",\"_setTo\",\"isFake\",\"fakeSelectionLabel\",\"anchor\",\"focus\",\"rangeCount\",\"isBackward\",\"first\",\"last\",\"firstRange\",\"getFirstRange\",\"lastRange\",\"getLastRange\",\"otherSelection\",\"thisRange\",\"found\",\"numOfRangesA\",\"getRanges\",\"rangeA\",\"getTrimmed\",\"rangeB\",\"_setRanges\",\"_setFakeOptions\",\"fake\",\"label\",\"backward\",\"createIn\",\"createOn\",\"createCollapsedAt\",\"newRanges\",\"isLastBackward\",\"_addRange\",\"newFocus\",\"_pushRange\",\"storedRange\",\"addedRange\",\"intersectingRange\",\"collection_Collection\",\"_items\",\"_itemMap\",\"_idProperty\",\"idProperty\",\"_bindToExternalToInternalMap\",\"WeakMap\",\"_bindToInternalToExternalMap\",\"_skippedIndexesFromExternal\",\"itemId\",\"idOrIndex\",\"idOrItem\",\"subject\",\"itemDoesNotExist\",\"externalItem\",\"ctx\",\"find\",\"filter\",\"_bindToCollection\",\"remove\",\"externalCollection\",\"as\",\"Class\",\"_setUpBindToBinding\",\"using\",\"callbackOrProperty\",\"addItem\",\"isExternalBoundToThis\",\"externalItemBound\",\"finalIndex\",\"skipped\",\"getIndex\",\"reduce\",\"document_Document\",\"roots\",\"_postFixers\",\"postFixer\",\"writer\",\"wasFixed\",\"attributeelement_DEFAULT_PRIORITY\",\"attributeelement_AttributeElement\",\"_priority\",\"attributeelement_getFillerOffset\",\"isSimilar\",\"attributeelement_nonUiChildrenCount\",\"DEFAULT_PRIORITY\",\"emptyelement_EmptyElement\",\"emptyelement_getFillerOffset\",\"src_env\",\"isMac\",\"userAgent\",\"navigator\",\"toLowerCase\",\"keyboard_macGlyphsToModifiers\",\"⌘\",\"⇧\",\"⌥\",\"keyboard_modifiersToMacGlyphs\",\"ctrl\",\"alt\",\"keyboard_keyCodes\",\"keyCodes\",\"arrowleft\",\"arrowup\",\"arrowright\",\"arrowdown\",\"backspace\",\"enter\",\"space\",\"esc\",\"tab\",\"cmd\",\"code\",\"letter\",\"fromCharCode\",\"keyboard_generateKnownKeyCodes\",\"keyboard_getCode\",\"keyCode\",\"altKey\",\"ctrlKey\",\"shiftKey\",\"keyboard_parseKeystroke\",\"keystroke\",\"keyboard_splitKeystrokeText\",\"sum\",\"uielement_UIElement\",\"uielement_getFillerOffset\",\"domDocument\",\"toDomElement\",\"domElement\",\"createElement\",\"getAttributeKeys\",\"setAttribute\",\"uielement_injectUiElementHandling\",\"view\",\"domConverter\",\"domSelection\",\"domTarget\",\"ownerDocument\",\"defaultView\",\"getSelection\",\"domSelectionCollapsed\",\"getRangeAt\",\"collapsed\",\"domParent\",\"focusNode\",\"domOffset\",\"focusOffset\",\"viewPosition\",\"domPositionToView\",\"jumpedOverAnyUiElement\",\"nextViewPosition\",\"newDomPosition\",\"viewPositionToDom\",\"collapse\",\"extend\",\"uielement_jumpOverUiElement\",\"documentfragment_DocumentFragment\",\"documentfragment_normalize\",\"writer_Writer\",\"_setFocus\",\"attributeElement\",\"renderFunction\",\"uiElement\",\"render\",\"_setAttribute\",\"_removeAttribute\",\"_addClass\",\"_removeClass\",\"_setStyle\",\"_removeStyle\",\"_removeCustomProperty\",\"positionOrRange\",\"writer_breakAttributes\",\"writer_breakAttributesRange\",\"newElement\",\"insert\",\"sourceRange\",\"targetPosition\",\"move\",\"positionOffset\",\"positionParent\",\"mergeAttributes\",\"writer_mergeTextNodes\",\"_appendChildren\",\"prev\",\"lastChild\",\"newPosition\",\"writer_validateNodesToInsert\",\"writer_validNodesToInsert\",\"some\",\"validNode\",\"container\",\"writer_getParentContainer\",\"insertionPosition\",\"endPosition\",\"writer_validateRangeContainer\",\"breakStart\",\"breakEnd\",\"parentContainer\",\"removed\",\"mergePosition\",\"walker\",\"getWalker\",\"current\",\"rangeToRemove\",\"parentElement\",\"ancestor\",\"countBefore\",\"_wrapPosition\",\"viewSelection\",\"getFirstPosition\",\"setSelection\",\"_wrapRange\",\"_unwrapAttributeElement\",\"newRange\",\"_unwrapChildren\",\"viewElement\",\"newName\",\"getAttributes\",\"wrapPositions\",\"isText\",\"isAttribute\",\"isUI\",\"writer_shouldABeOutsideB\",\"newAttribute\",\"_wrapChildren\",\"offsetChange\",\"unwrapPositions\",\"unwrapped\",\"writer_rangeSpansOnAllChildren\",\"_wrapAttributeElement\",\"unwrappedRange\",\"writer_movePositionToTextNode\",\"writer_breakTextNode\",\"fakePosition\",\"createAttributeElement\",\"Number\",\"POSITIVE_INFINITY\",\"wrapRange\",\"wrap\",\"wrapper\",\"toWrap\",\"getStyleNames\",\"setStyle\",\"addClass\",\"toUnwrap\",\"removeAttribute\",\"removeClass\",\"removeStyle\",\"writer_isContainerOrFragment\",\"forceSplitText\",\"rangeStart\",\"rangeEnd\",\"offsetAfter\",\"clonedNode\",\"nodesToMove\",\"getIdentity\",\"textToMove\",\"t1\",\"t2\",\"nodeBeforeLength\",\"startContainer\",\"endContainer\",\"filler_BR_FILLER\",\"fillerBr\",\"dataset\",\"ckeFiller\",\"filler_NBSP_FILLER\",\"createTextNode\",\"filler_INLINE_FILLER_LENGTH\",\"filler_INLINE_FILLER\",\"filler_startsWithFiller\",\"domNode\",\"Text\",\"filler_isInlineFiller\",\"domText\",\"filler_getDataWithoutFiller\",\"filler_templateBlockFillers\",\"filler_isBlockFiller\",\"blockFiller\",\"templateBlockFiller\",\"isEqualNode\",\"filler_jumpOverInlineFiller\",\"diff_diff\",\"cmp\",\"_insert\",\"_delete\",\"tmp\",\"delta\",\"es\",\"fp\",\"snake\",\"k\",\"y1\",\"y2\",\"dir\",\"y\",\"x\",\"insertat_insertAt\",\"nodeToInsert\",\"insertBefore\",\"childNodes\",\"remove_remove\",\"parentNode\",\"removeChild\",\"istext_isText\",\"renderer_Renderer\",\"domDocuments\",\"markedAttributes\",\"markedChildren\",\"markedTexts\",\"_inlineFiller\",\"_fakeSelectionContainer\",\"mapViewToDom\",\"inlineFillerPosition\",\"_isSelectionInInlineFiller\",\"_removeInlineFiller\",\"_getInlineFillerPosition\",\"_needsInlineFillerAtSelection\",\"_updateText\",\"_updateAttrs\",\"_updateChildren\",\"fillerDomPosition\",\"_addInlineFiller\",\"_updateSelection\",\"_updateFocus\",\"domParentOrArray\",\"nodeAfterFiller\",\"fillerNode\",\"firstPos\",\"selectionPosition\",\"domFillerNode\",\"selectionParent\",\"selectionOffset\",\"findAncestor\",\"renderer_isEditable\",\"viewText\",\"findCorrespondingDomText\",\"newDomText\",\"viewToDom\",\"actualText\",\"expectedText\",\"filler\",\"domAttrKeys\",\"attr\",\"viewAttrKeys\",\"actualDomChildren\",\"expectedDomChildren\",\"viewChildrenToDom\",\"actions\",\"actualDomChild\",\"expectedDomChild\",\"nodesToUnbind\",\"action\",\"unbindDomElement\",\"_removeDomSelection\",\"_removeFakeSelection\",\"domRoot\",\"_updateFakeSelection\",\"_updateDomSelection\",\"assign\",\"top\",\"left\",\"width\",\"appendChild\",\"firstChild\",\"domRange\",\"createRange\",\"removeAllRanges\",\"selectNodeContents\",\"addRange\",\"bindFakeSelection\",\"_domSelectionNeedsUpdate\",\"isDomSelectionCorrect\",\"oldViewSelection\",\"domSelectionToView\",\"doc\",\"activeDomElement\",\"activeElement\",\"mapDomToView\",\"indexof_indexOf\",\"Node\",\"DOCUMENT_NODE\",\"unshift\",\"domconverter_DomConverter\",\"preElements\",\"blockElements\",\"_domToViewMapping\",\"_viewToDomMapping\",\"_fakeSelectionMapping\",\"domFragment\",\"viewFragment\",\"viewNode\",\"textData\",\"_processDataFromViewText\",\"createDocumentFragment\",\"bindDocumentFragments\",\"bindElements\",\"withChildren\",\"fillerPositionOffset\",\"childView\",\"viewRange\",\"domStart\",\"domEnd\",\"setStart\",\"setEnd\",\"viewParent\",\"domBefore\",\"domAfter\",\"getParentUIElement\",\"_processDataFromDomText\",\"isComment\",\"isDocumentFragment\",\"viewName\",\"keepOriginalCase\",\"tagName\",\"domChildrenToView\",\"domChild\",\"viewChild\",\"domToView\",\"fakeSelectionToView\",\"isDomSelectionBackward\",\"viewRanges\",\"domRangeToView\",\"viewStart\",\"viewEnd\",\"findCorrespondingViewText\",\"viewBefore\",\"domElementOrDocumentFragment\",\"isElement\",\"documentFragmentOrElement\",\"viewEditable\",\"domEditable\",\"scrollX\",\"scrollY\",\"scrollPositions\",\"domconverter_forEachDomNodeAncestor\",\"scrollLeft\",\"scrollTop\",\"scrollTo\",\"ELEMENT_NODE\",\"DOCUMENT_FRAGMENT_NODE\",\"COMMENT_NODE\",\"anchorNode\",\"anchorOffset\",\"detach\",\"_isDomSelectionPositionCorrect\",\"includes\",\"prevNode\",\"_getTouchingViewTextNode\",\"_nodeEndsWithSpace\",\"domconverter_hasDomParentOfType\",\"_getTouchingDomTextNode\",\"nextNode\",\"getNext\",\"topmostParent\",\"createTreeWalker\",\"NodeFilter\",\"SHOW_TEXT\",\"currentNode\",\"touchingNode\",\"lca\",\"nodeA\",\"nodeB\",\"getcommonancestor_getCommonAncestor\",\"types\",\"boundaryParent\",\"parents\",\"isNode\",\"Document\",\"isWindow\",\"dom_emittermixin\",\"rest\",\"proxy\",\"_getProxyEmitter\",\"emittermixin_ProxyEmitter\",\"attach\",\"listeningEmitter\",\"listenedToEmitterId\",\"emittermixin_getNodeUID\",\"_domNode\",\"_domListeners\",\"domListener\",\"_createDomListener\",\"useCapture\",\"addEventListener\",\"removeListener\",\"domEvt\",\"removeEventListener\",\"observer_Observer\",\"isEnabled\",\"disable\",\"_setCacheAdd_HASH_UNDEFINED\",\"_setCacheAdd\",\"_setCacheHas\",\"_SetCache_SetCache\",\"_SetCache\",\"_arraySome\",\"predicate\",\"_equalArrays_UNORDERED_COMPARE_FLAG\",\"_equalArrays_PARTIAL_COMPARE_FLAG\",\"_equalArrays\",\"equalFunc\",\"bitmask\",\"arrLength\",\"othLength\",\"seen\",\"arrValue\",\"othValue\",\"compared\",\"othIndex\",\"_equalByTag_UNORDERED_COMPARE_FLAG\",\"_equalByTag_PARTIAL_COMPARE_FLAG\",\"_equalByTag_boolTag\",\"_equalByTag_dateTag\",\"_equalByTag_errorTag\",\"_equalByTag_mapTag\",\"_equalByTag_numberTag\",\"_equalByTag_regexpTag\",\"_equalByTag_setTag\",\"_equalByTag_stringTag\",\"_equalByTag_symbolTag\",\"_equalByTag_arrayBufferTag\",\"_equalByTag_dataViewTag\",\"_equalByTag_symbolProto\",\"_equalByTag_symbolValueOf\",\"_equalByTag\",\"convert\",\"_equalObjects_PARTIAL_COMPARE_FLAG\",\"_equalObjects\",\"objProps\",\"objLength\",\"skipCtor\",\"objCtor\",\"othCtor\",\"isTypedArray_typedArrayTags\",\"isTypedArray_objectToString\",\"lodash_isTypedArray\",\"_baseIsEqualDeep_PARTIAL_COMPARE_FLAG\",\"_baseIsEqualDeep_argsTag\",\"_baseIsEqualDeep_arrayTag\",\"_baseIsEqualDeep_objectTag\",\"_baseIsEqualDeep_hasOwnProperty\",\"_baseIsEqualDeep\",\"objIsArr\",\"othIsArr\",\"objTag\",\"othTag\",\"objIsObj\",\"othIsObj\",\"isSameTag\",\"objIsWrapped\",\"othIsWrapped\",\"objUnwrapped\",\"othUnwrapped\",\"_baseIsEqual\",\"_baseIsEqual_baseIsEqual\",\"lodash_isEqualWith\",\"mutationobserver_MutationObserver\",\"childList\",\"characterData\",\"characterDataOldValue\",\"subtree\",\"renderer\",\"_renderer\",\"_domElements\",\"_mutationObserver\",\"MutationObserver\",\"_onMutations\",\"takeRecords\",\"observe\",\"enable\",\"disconnect\",\"destroy\",\"domMutations\",\"mutatedTexts\",\"mutatedElements\",\"mutation\",\"_isBogusBrMutation\",\"text\",\"oldText\",\"newText\",\"viewMutations\",\"mutatedText\",\"markToSync\",\"viewChildren\",\"newViewChildren\",\"sameNodes\",\"oldChildren\",\"newChildren\",\"viewSelectionAnchor\",\"viewSelectionFocus\",\"child1\",\"child2\",\"addedNode\",\"removedNodes\",\"addedNodes\",\"domeventdata_DomEventData\",\"domEvent\",\"additionalData\",\"preventDefault\",\"stopPropagation\",\"domeventobserver_DomEventObserver\",\"domEventType\",\"onDomEvent\",\"eventType\",\"keyobserver_KeyObserver\",\"metaKey\",\"lodash_now\",\"Date\",\"now\",\"debounce_FUNC_ERROR_TEXT\",\"debounce_nativeMax\",\"debounce_nativeMin\",\"lodash_debounce\",\"wait\",\"lastArgs\",\"lastThis\",\"maxWait\",\"timerId\",\"lastCallTime\",\"lastInvokeTime\",\"leading\",\"maxing\",\"trailing\",\"invokeFunc\",\"time\",\"shouldInvoke\",\"timeSinceLastCall\",\"timerExpired\",\"trailingEdge\",\"setTimeout\",\"remainingWait\",\"clearTimeout\",\"debounced\",\"isInvoking\",\"leadingEdge\",\"cancel\",\"flush\",\"fakeselectionobserver_FakeSelectionObserver\",\"_fireSelectionChangeDoneDebounced\",\"_handleSelectionMove\",\"newSelection\",\"getLastPosition\",\"oldSelection\",\"src_log\",\"console\",\"warn\",\"selectionobserver_SelectionObserver\",\"mutationObserver\",\"getObserver\",\"_documents\",\"WeakSet\",\"_clearInfiniteLoopInterval\",\"setInterval\",\"_clearInfiniteLoop\",\"_loopbackCounter\",\"_handleSelectionChange\",\"clearInterval\",\"isReadOnly\",\"newViewSelection\",\"focusobserver_FocusObserver\",\"_renderTimeoutId\",\"selectedEditable\",\"compositionobserver_CompositionObserver\",\"isComposing\",\"isRange\",\"lodash_isElement\",\"getBorderWidths\",\"getComputedStyle\",\"borderTopWidth\",\"right\",\"borderRightWidth\",\"bottom\",\"borderBottomWidth\",\"borderLeftWidth\",\"rect_Rect\",\"isSourceRange\",\"_source\",\"writable\",\"sourceNode\",\"body\",\"contains\",\"rect_copyRectProperties\",\"getDomRangeRects\",\"getBoundingClientRect\",\"innerWidth\",\"innerHeight\",\"height\",\"anotherRect\",\"rect\",\"getIntersection\",\"getArea\",\"visibleRect\",\"clone\",\"rect_isBody\",\"commonAncestorContainer\",\"parentRect\",\"intersectionRect\",\"prop\",\"rect_rectProperties\",\"intersectRect\",\"scrollBarWidth\",\"scrollBarHeight\",\"documentElement\",\"clientWidth\",\"clientHeight\",\"borderWidths\",\"offsetWidth\",\"offsetHeight\",\"moveBy\",\"rects\",\"clientRects\",\"getClientRects\",\"elementOrRange\",\"scroll_scrollViewportToShowTarget\",\"viewportOffset\",\"targetWindow\",\"scroll_getWindow\",\"currentWindow\",\"currentFrame\",\"firstAncestorToScroll\",\"scroll_scrollAncestorsToShowRect\",\"scroll_getParentElement\",\"scroll_getRectRelativeToWindow\",\"targetRect\",\"scroll_scrollWindowToShowRect\",\"frameElement\",\"targetShiftedDownRect\",\"targetShiftedUpRect\",\"viewportRect\",\"excludeScrollbarsAndBorders\",\"scroll_isAbove\",\"scroll_isBelow\",\"scroll_isLeftOf\",\"scroll_isRightOf\",\"getRect\",\"parentWindow\",\"firstRect\",\"secondRect\",\"relativeWindow\",\"frame\",\"frameRect\",\"scrollViewportToShowTarget\",\"scrollAncestorsToShowTarget\",\"view_View\",\"domRoots\",\"_observers\",\"_ongoingChange\",\"_renderingInProgress\",\"_postFixersInProgress\",\"_writer\",\"addObserver\",\"_render\",\"viewRoot\",\"getRoot\",\"observer\",\"Observer\",\"viewRangeToDom\",\"_callPostFixers\",\"change\",\"disableObservers\",\"enableObservers\",\"tomap_toMap\",\"model_node_Node\",\"getChildStartOffset\",\"model_text_Text\",\"toJSON\",\"model_textproxy_TextProxy\",\"getPath\",\"nodelist_NodeList\",\"_nodes\",\"_insertNodes\",\"maxOffset\",\"getNodeIndex\",\"getNodeStartOffset\",\"totalOffset\",\"indexStart\",\"model_element_Element\",\"getNode\",\"offsetToIndex\",\"relativePath\",\"model_element_normalize\",\"_removeNodes\",\"fromJSON\",\"model_treewalker_TreeWalker\",\"model_position_Position\",\"_visitedParent\",\"prevVisitedParent\",\"treewalker_formatReturnValue\",\"offsetInTextNode\",\"lodash_last\",\"newOffset\",\"diffAt\",\"leftParent\",\"deletePosition\",\"transformed\",\"getParentPath\",\"insertPosition\",\"sourcePosition\",\"sticky\",\"_getTransformedByDeletion\",\"_getCombined\",\"_getTransformedByInsertion\",\"combined\",\"createFromParentAndOffset\",\"graveyard\",\"model_range_Range\",\"getCommonPath\",\"posParent\",\"supportedTypes\",\"operation\",\"operations\",\"_getTransformedByDocumentChange\",\"deltas\",\"getTransformedByDelta\",\"j\",\"containsRange\",\"deltaType\",\"_getTransformedByMove\",\"spread\",\"isSticky\",\"insertBeforeStart\",\"insertBeforeEnd\",\"newPos\",\"moveRange\",\"differenceSet\",\"getDifference\",\"difference\",\"common\",\"ref\",\"refIndex\",\"mapper_Mapper\",\"_modelToViewMapping\",\"_viewToModelMapping\",\"_viewToModelLengthCallbacks\",\"viewContainer\",\"modelPosition\",\"_findPositionIn\",\"viewBlock\",\"modelParent\",\"modelOffset\",\"_toModelOffset\",\"modelElement\",\"toModelElement\",\"toViewElement\",\"toModelPosition\",\"modelRange\",\"toViewPosition\",\"mapper\",\"isPhantom\",\"viewElementName\",\"lengthCallback\",\"viewOffset\",\"getModelLength\",\"len\",\"expectedOffset\",\"lastLength\",\"_moveViewPositionToTextNode\",\"modelconsumable_ModelConsumable\",\"_consumable\",\"_textProxyRegistry\",\"modelconsumable_normalizeConsumableType\",\"_getSymbolForTextProxy\",\"itemConsumables\",\"startMap\",\"endMap\",\"_addSymbolForTextProxy\",\"downcastdispatcher_DowncastDispatcher\",\"conversionApi\",\"dispatcher\",\"differ\",\"getChanges\",\"convertInsert\",\"convertRemove\",\"convertAttribute\",\"attributeKey\",\"attributeOldValue\",\"attributeNewValue\",\"getMarkersToAdd\",\"convertMarkerAdd\",\"consumable\",\"_createInsertConsumable\",\"_testAndFire\",\"_clearConversionApi\",\"_createConsumableForRange\",\"markers\",\"markersAtSelection\",\"getMarkersAtPosition\",\"_createSelectionConsumable\",\"marker\",\"markerRange\",\"getRange\",\"downcastdispatcher_shouldMarkerChangeBeConverted\",\"markerName\",\"getItems\",\"reverse\",\"containsItem\",\"model_selection_Selection\",\"setTo\",\"anyNewRange\",\"oldRange\",\"_removeAllRanges\",\"directChange\",\"_popRange\",\"attributeKeys\",\"visited\",\"startBlock\",\"selection_getParentBlock\",\"selection_isUnvisitedBlockContainer\",\"endBlock\",\"isTouching\",\"limitStartPosition\",\"limitEndPosition\",\"_checkRange\",\"model\",\"schema\",\"isBlock\",\"block\",\"liverange_LiveRange\",\"isDocumentOperation\",\"changeType\",\"batch\",\"targetRange\",\"getMovedRangeStart\",\"updated\",\"createFromRanges\",\"boundariesChanged\",\"rangeExpanded\",\"rangeShrunk\",\"contentChanged\",\"documentselection_storePrefix\",\"documentselection_DocumentSelection\",\"_selection\",\"documentselection_LiveSelection\",\"delegate\",\"hasOwnRange\",\"isGravityOverridden\",\"getSelectedBlocks\",\"getSelectedElement\",\"containsEntireContent\",\"setFocus\",\"_getStoredAttributes\",\"customRestore\",\"overrideGravity\",\"restoreGravity\",\"startsWith\",\"_model\",\"_attributePriority\",\"_fixGraveyardRangesData\",\"_hasChangedRange\",\"_overriddenGravityCounter\",\"_validateSelectionRange\",\"_updateAttributes\",\"changeParent\",\"isNoLongerEmpty\",\"enqueueChange\",\"storedAttributes\",\"documentselection_clearAttributesStoredInElement\",\"liveRange\",\"_fixGraveyardSelection\",\"_getDefaultRange\",\"optionsOrPlaceOrOffset\",\"_refreshAttributes\",\"_prepareRange\",\"clearAll\",\"newAttributes\",\"_getSurroundingAttributes\",\"oldAttributes\",\"_setAttributesTo\",\"changed\",\"newKey\",\"oldKey\",\"documentselection_getAttrsIfCharacter\",\"isObject\",\"removedRangeStart\",\"positionCandidate\",\"selectionRange\",\"getNearestSelectionRange\",\"lodash_cloneDeep\",\"downcast_converters_downcastElementToElement\",\"config\",\"downcast_converters_normalizeToElementConfig\",\"elementCreator\",\"consume\",\"downcast_converters_downcastAttributeToElement\",\"modelKey\",\"modelValue\",\"downcast_converters_getFromAttributeCreator\",\"oldViewElement\",\"newViewElement\",\"viewWriter\",\"toViewRange\",\"unwrap\",\"downcast_converters_wrap\",\"downcast_converters_downcastAttributeToAttribute\",\"downcast_converters_normalizeToAttributeConfig\",\"attributeCreator\",\"oldAttribute\",\"downcast_converters_downcastMarkerToHighlight\",\"highlightDescriptor\",\"descriptor\",\"downcast_converters_prepareDescriptor\",\"downcast_converters_createViewElementFromHighlightDescriptor\",\"downcast_converters_highlightElement\",\"descendant\",\"viewHighlightElement\",\"downcast_converters_removeHighlight\",\"viewElementType\",\"modelData\",\"viewElementDefinition\",\"createContainerElement\",\"createUIElement\",\"downcast_converters_createViewElementFromDefinition\",\"modelAttributeValue\",\"downcast_converters_HighlightAttributeElement\",\"editingcontroller_EditingController\",\"downcastDispatcher\",\"convertChanges\",\"convertSelection\",\"modelSelection\",\"toModelRange\",\"upcast_selection_converters_convertSelectionChange\",\"createText\",\"modelEnd\",\"unbindViewElement\",\"brokenPosition\",\"breakAttributes\",\"removedMarkers\",\"editingcontroller_operationAffectsMarker\",\"convertMarkerRemove\",\"bufferMarkerChange\",\"bindTo\",\"editingcontroller_positionAffectsRange\",\"plugincollection_PluginCollection\",\"editor\",\"availablePlugins\",\"_editor\",\"_availablePlugins\",\"_plugins\",\"PluginConstructor\",\"pluginName\",\"plugins\",\"removePlugins\",\"that\",\"loading\",\"loaded\",\"pluginConstructors\",\"mapToAvailableConstructors\",\"removePluginConstructors\",\"missingPlugins\",\"pluginNameOrConstructor\",\"getPluginConstructor\",\"getMissingPluginNames\",\"errorMsg\",\"Promise\",\"reject\",\"all\",\"loadPlugin\",\"then\",\"requires\",\"RequiredPluginConstructorOrName\",\"RequiredPluginConstructor\",\"plugin\",\"requiredBy\",\"_add\",\"instantiatePlugin\",\"catch\",\"err\",\"PluginConstructorOrName\",\"promises\",\"pluginInstance\",\"plugin1\",\"plugin2\",\"commandcollection_CommandCollection\",\"_commands\",\"commandName\",\"command\",\"execute\",\"commands\",\"dictionaries\",\"translate\",\"lang\",\"translationKey\",\"numberOfLanguages\",\"hasTranslation\",\"CKEDITOR_TRANSLATIONS\",\"translations\",\"locale_Locale\",\"language\",\"t\",\"_t\",\"str\",\"translatedString\",\"viewconsumable_ViewConsumable\",\"_consumables\",\"consumables\",\"elementConsumables\",\"viewconsumable_ViewElementConsumables\",\"revert\",\"instance\",\"consumablesFromElement\",\"createFrom\",\"_canConsumeName\",\"_test\",\"_consume\",\"_revert\",\"schema_Schema\",\"_sourceDefinitions\",\"decorate\",\"schema_SchemaContext\",\"getDefinition\",\"itemName\",\"definition\",\"_clearCache\",\"_compiledDefinitions\",\"_compile\",\"getDefinitions\",\"def\",\"isLimit\",\"context\",\"_checkContextMatch\",\"attributeName\",\"allowAttributes\",\"positionOrBaseElement\",\"elementToMerge\",\"checkMerge\",\"checkChild\",\"childDef\",\"retValue\",\"rangeCommonAncestor\",\"checkAttribute\",\"validRanges\",\"backwardWalker\",\"forwardWalker\",\"forward\",\"step\",\"schema_combineWalkers\",\"removeDisallowedAttributes\",\"compiledDefinitions\",\"sourceRules\",\"itemNames\",\"schema_compileBaseItemRule\",\"schema_compileAllowContentOf\",\"schema_compileAllowWhere\",\"schema_compileAllowAttributesOf\",\"schema_compileInheritPropertiesFrom\",\"schema_cleanUpAllowIn\",\"schema_cleanUpAllowAttributes\",\"contextItemIndex\",\"contextItem\",\"getItem\",\"allowIn\",\"parentRule\",\"schema_mapContextItem\",\"query\",\"getNames\",\"endsWith\",\"sourceItemRules\",\"itemRule\",\"allowContentOf\",\"allowWhere\",\"allowAttributesOf\",\"inheritTypesFrom\",\"sourceItemRule\",\"typeNames\",\"schema_copyTypes\",\"schema_copyProperty\",\"inheritFrom\",\"inheritAllFrom\",\"schema_makeInheritAllWork\",\"allowContentOfItemName\",\"schema_getAllowedChildren\",\"allowedItem\",\"allowWhereItemName\",\"allowedIn\",\"allowAttributeOfItem\",\"inheritAttributes\",\"inheritPropertiesOfItem\",\"existingItems\",\"itemToCheck\",\"ctxItem\",\"upcastdispatcher_UpcastDispatcher\",\"_removeIfEmpty\",\"_modelCursor\",\"convertItem\",\"_convertItem\",\"convertChildren\",\"_convertChildren\",\"splitToAllowedParent\",\"_splitToAllowedParent\",\"viewItem\",\"contextDefinition\",\"append\",\"upcastdispatcher_createContextTree\",\"store\",\"documentFragment\",\"_removeEmptyElements\",\"modelItem\",\"markerElements\",\"markerElement\",\"currentPosition\",\"upcastdispatcher_extractMarkersFromModelFragment\",\"modelCursor\",\"nextModelCursor\",\"allowedParent\",\"findAllowedParent\",\"splitResult\",\"getPositions\",\"cursorParent\",\"upcast_converters_upcastElementToElement\",\"converter\",\"childrenResult\",\"upcast_converters_prepareToElementConverter\",\"elementName\",\"upcast_converters_getViewElementNameFromConfig\",\"upcast_converters_upcastElementToAttribute\",\"upcast_converters_normalizeModelAttributeConfig\",\"upcast_converters_prepareToAttributeConverter\",\"upcast_converters_upcastAttributeToAttribute\",\"viewKey\",\"normalized\",\"upcast_converters_normalizeViewAttributeKeyValueConfig\",\"viewAttributeKeyToCopy\",\"defaultModelValue\",\"consumeName\",\"modelAttribute\",\"upcast_converters_setAttributeOn\",\"datacontroller_DataController\",\"dataProcessor\",\"processor\",\"upcastDispatcher\",\"modelElementOrFragment\",\"viewDocumentFragment\",\"toView\",\"toData\",\"elementRange\",\"intersection\",\"datacontroller_getMarkersRelativeToElement\",\"clearBindings\",\"version\",\"modelRoot\",\"parse\",\"removeSelectionAttribute\",\"toModel\",\"viewElementOrFragment\",\"conversion_Conversion\",\"_dispatchersGroups\",\"groupName\",\"dispatchers\",\"_getDispatchers\",\"conversionHelper\",\"conversion_addToDispatchers\",\"for\",\"conversion_getAllUpcastDefinitions\",\"conversion_getUpcastDefinition\",\"upcastAlso\",\"upcastAlsoItem\",\"operation_Operation\",\"baseVersion\",\"__className\",\"model_documentfragment_DocumentFragment\",\"model_documentfragment_normalize\",\"utils_insert\",\"utils_normalizeNodes\",\"utils_splitNodeAtPosition\",\"utils_mergeNodesAtIndex\",\"utils_remove\",\"utils_haveSameAttributes\",\"mergedNode\",\"offsetDiff\",\"firstPart\",\"secondPart\",\"iteratorA\",\"iteratorB\",\"lodash_isEqual\",\"attributeoperation_AttributeOperation\",\"utils_setAttribute\",\"moveoperation_MoveOperation\",\"op\",\"newTargetPosition\",\"sourceElement\",\"targetElement\",\"sourceOffset\",\"targetOffset\",\"utils_move\",\"reinsertoperation_ReinsertOperation\",\"removeoperation_RemoveOperation\",\"_validate\",\"insertoperation_InsertOperation\",\"gyPosition\",\"originalNodes\",\"markeroperation_MarkerOperation\",\"_markers\",\"nooperation_NoOperation\",\"renameoperation_RenameOperation\",\"oldName\",\"rootattributeoperation_RootAttributeOperation\",\"operationfactory_operations\",\"operationfactory_OperationFactory\",\"deltafactory_deserializers\",\"deltafactory_DeltaFactory\",\"addOperation\",\"Delta\",\"delta_Delta\",\"_reverseDeltaClass\",\"getReversed\",\"register\",\"attributedelta_AttributeDelta\",\"_range\",\"splitdelta_SplitDelta\",\"_moveOperation\",\"_cloneOperation\",\"mergedelta_MergeDelta\",\"_removeOperation\",\"movedelta_MoveDelta\",\"removedelta_RemoveDelta\",\"renamedelta_RenameDelta\",\"wrapdelta_WrapDelta\",\"moveOp\",\"_insertOperation\",\"unwrapdelta_UnwrapDelta\",\"insertdelta_InsertDelta\",\"weakinsertdelta_WeakInsertDelta\",\"isStrong\",\"group\",\"algorithm\",\"transform_ot\",\"InsertOperation\",\"AttributeOperation\",\"RootAttributeOperation\",\"RenameOperation\",\"MarkerOperation\",\"MoveOperation\",\"transform_doNotUpdate\",\"transform_updateBaseVersions\",\"forceNotSticky\",\"transform_joinRanges\",\"oldRanges\",\"includeB\",\"transform_moveTargetIntoMovedRange\",\"bTargetsToA\",\"transform_makeMoveOperationsFromRanges\",\"aCompB\",\"forceWeakRemove\",\"shouldSpread\",\"transform_makeMoveOperation\",\"OperationClass\",\"_baseSlice\",\"chunk_nativeCeil\",\"ceil\",\"chunk_nativeMax\",\"lodash_chunk\",\"resIndex\",\"lodash_compact\",\"_isFlattenable\",\"_baseFlatten\",\"_baseFlatten_baseFlatten\",\"depth\",\"isStrict\",\"lodash_concat\",\"_indexOfNaN\",\"fromIndex\",\"fromRight\",\"_baseIndexOf\",\"_arrayIncludes\",\"_arrayIncludesWith\",\"comparator\",\"_arrayMap\",\"_baseUnary\",\"_cacheHas\",\"_baseDifference_LARGE_ARRAY_SIZE\",\"_baseDifference\",\"isCommon\",\"valuesLength\",\"outer\",\"computed\",\"valuesIndex\",\"lodash_difference\",\"_baseIsMatch_UNORDERED_COMPARE_FLAG\",\"_baseIsMatch_PARTIAL_COMPARE_FLAG\",\"_baseIsMatch\",\"matchData\",\"noCustomizer\",\"srcValue\",\"_isStrictComparable\",\"_baseToPairs\",\"_setToPairs\",\"_createToPairs_mapTag\",\"_createToPairs_setTag\",\"lodash_toPairs\",\"_createToPairs\",\"_getMatchData\",\"_matchesStrictComparable\",\"_baseMatches\",\"memoize_FUNC_ERROR_TEXT\",\"memoize_memoize\",\"resolver\",\"memoized\",\"Cache\",\"lodash_memoize\",\"_baseToString_INFINITY\",\"_baseToString_symbolProto\",\"_baseToString_symbolToString\",\"_baseToString\",\"lodash_toString\",\"_stringToPath_rePropName\",\"_stringToPath_reEscapeChar\",\"_stringToPath\",\"number\",\"quote\",\"_castPath\",\"_isKey_reIsDeepProp\",\"_isKey_reIsPlainProp\",\"_isKey\",\"_toKey_INFINITY\",\"_toKey\",\"_baseGet\",\"lodash_get\",\"defaultValue\",\"_baseHasIn\",\"_hasPath\",\"hasFunc\",\"lodash_hasIn\",\"_baseMatchesProperty_UNORDERED_COMPARE_FLAG\",\"_baseMatchesProperty_PARTIAL_COMPARE_FLAG\",\"_baseMatchesProperty\",\"lodash_identity\",\"_basePropertyDeep\",\"lodash_property\",\"_baseIteratee\",\"lodash_differenceBy\",\"lodash_differenceWith\",\"lodash_drop\",\"lodash_dropRight\",\"_baseWhile\",\"isDrop\",\"lodash_dropRightWhile\",\"lodash_dropWhile\",\"_baseClamp\",\"lower\",\"upper\",\"toLength_MAX_ARRAY_LENGTH\",\"lodash_toLength\",\"_baseFill\",\"lodash_fill\",\"_baseFindIndex\",\"lodash_findIndex\",\"lodash_findLastIndex\",\"lodash_head\",\"lodash_flatten\",\"flattenDeep_INFINITY\",\"lodash_flattenDeep\",\"lodash_flattenDepth\",\"lodash_fromPairs\",\"pairs\",\"indexOf_nativeMax\",\"lodash_indexOf\",\"lodash_initial\",\"_baseIntersection_nativeMin\",\"_baseIntersection\",\"arrays\",\"caches\",\"maxLength\",\"Infinity\",\"_castArrayLikeObject\",\"lodash_intersection\",\"mapped\",\"lodash_intersectionBy\",\"lodash_intersectionWith\",\"nativeJoin\",\"lodash_join\",\"separator\",\"lastIndexOf_nativeMax\",\"lastIndexOf_nativeMin\",\"lodash_lastIndexOf\",\"_baseNth\",\"lodash_nth\",\"_baseIndexOfWith\",\"_basePullAll_splice\",\"_basePullAll\",\"lodash_pullAll\",\"lodash_pull\",\"lodash_pullAllBy\",\"lodash_pullAllWith\",\"_baseAt\",\"paths\",\"isNil\",\"_parent\",\"_basePullAt_splice\",\"_basePullAt\",\"previous\",\"_compareAscending\",\"valIsDefined\",\"valIsNull\",\"valIsReflexive\",\"valIsSymbol\",\"othIsDefined\",\"othIsNull\",\"othIsReflexive\",\"othIsSymbol\",\"lodash_pullAt\",\"lodash_remove\",\"nativeReverse\",\"lodash_reverse\",\"lodash_slice\",\"_baseSortedIndexBy_MAX_ARRAY_INDEX\",\"_baseSortedIndexBy_MAX_ARRAY_LENGTH\",\"_baseSortedIndexBy_nativeFloor\",\"_baseSortedIndexBy_nativeMin\",\"_baseSortedIndexBy\",\"retHighest\",\"valIsNaN\",\"valIsUndefined\",\"mid\",\"setLow\",\"_baseSortedIndex_HALF_MAX_ARRAY_LENGTH\",\"_baseSortedIndex_MAX_ARRAY_LENGTH\",\"_baseSortedIndex\",\"lodash_sortedIndex\",\"lodash_sortedIndexBy\",\"lodash_sortedIndexOf\",\"lodash_sortedLastIndex\",\"lodash_sortedLastIndexBy\",\"lodash_sortedLastIndexOf\",\"_baseSortedUniq\",\"lodash_sortedUniq\",\"lodash_sortedUniqBy\",\"lodash_tail\",\"lodash_take\",\"lodash_takeRight\",\"lodash_takeRightWhile\",\"lodash_takeWhile\",\"lodash_noop\",\"_createSet\",\"_baseUniq_LARGE_ARRAY_SIZE\",\"_baseUniq\",\"seenIndex\",\"lodash_union\",\"lodash_unionBy\",\"lodash_unionWith\",\"lodash_uniq\",\"lodash_uniqBy\",\"lodash_uniqWith\",\"_arrayFilter\",\"unzip_nativeMax\",\"lodash_unzip\",\"lodash_unzipWith\",\"lodash_without\",\"_baseXor\",\"lodash_xor\",\"lodash_xorBy\",\"lodash_xorWith\",\"lodash_zip\",\"_baseZipObject\",\"assignFunc\",\"valsLength\",\"lodash_zipObject\",\"_baseSet\",\"nested\",\"lodash_zipObjectDeep\",\"zipWith_zipWith\",\"array_default\",\"chunk\",\"compact\",\"differenceBy\",\"differenceWith\",\"drop\",\"dropRight\",\"dropRightWhile\",\"dropWhile\",\"fill\",\"findIndex\",\"findLastIndex\",\"flatten\",\"flattenDeep\",\"flattenDepth\",\"fromPairs\",\"head\",\"initial\",\"intersectionBy\",\"intersectionWith\",\"nth\",\"pull\",\"pullAll\",\"pullAllBy\",\"pullAllWith\",\"pullAt\",\"sortedIndex\",\"sortedIndexBy\",\"sortedIndexOf\",\"sortedLastIndex\",\"sortedLastIndexBy\",\"sortedLastIndexOf\",\"sortedUniq\",\"sortedUniqBy\",\"tail\",\"take\",\"takeRight\",\"takeRightWhile\",\"takeWhile\",\"union\",\"unionBy\",\"unionWith\",\"uniq\",\"uniqBy\",\"uniqWith\",\"unzip\",\"unzipWith\",\"without\",\"xor\",\"xorBy\",\"xorWith\",\"zip\",\"zipObject\",\"zipObjectDeep\",\"zipWith\",\"transform_specialCases\",\"delta_transform_transform\",\"getTransformationCase\",\"defaultTransform\",\"transform_updateBaseVersion\",\"byOps\",\"newByOps\",\"opA\",\"ops\",\"opB\",\"operation_transform\",\"reverseContext\",\"updatedOpB\",\"transform_getNormalizedDeltas\",\"DeltaClass\",\"attributeOperationIndex\",\"A\",\"B\",\"casesA\",\"cases\",\"caseClass\",\"deltasA\",\"deltasB\",\"transformedDeltasA\",\"transformedDeltasB\",\"useAdditionalContext\",\"contextAB\",\"wasAffected\",\"originalDelta\",\"undoMode\",\"deltaA\",\"deltaB\",\"transform_setContext\",\"resultAB\",\"transform\",\"resultBA\",\"transform_updateContext\",\"deltaBA\",\"opsDiffA\",\"transform_getOpsCount\",\"opsDiffB\",\"transform_padWithNoOps\",\"delta_transform\",\"lastDelta\",\"noDelta\",\"transform_isOperationAffected\",\"transform_setWasAffected\",\"history\",\"isUndoingDelta\",\"undoneDelta\",\"getUndoneDelta\",\"aWasAffectedBy\",\"affected\",\"transform_setInsertBeforeContext\",\"originalB\",\"isUndoneDelta\",\"transform_setForceWeakRemove\",\"transform_setForceNotSticky\",\"cmpResult\",\"oldDelta\",\"newDeltas\",\"markerdelta_MarkerDelta\",\"basic_transformations_addTransformationCase\",\"addTransformationCase\",\"basic_transformations_defaultTransform\",\"basic_transformations_transformMarkerDelta\",\"transformedDelta\",\"transformedOp\",\"basic_transformations_getComplementaryAttrDelta\",\"weakInsertDelta\",\"attributeDelta\",\"complementaryAttrDelta\",\"val\",\"lastOffset\",\"offsetSum\",\"nodeAttrVal\",\"attrOperation\",\"basic_transformations_noDelta\",\"splitPosition\",\"additionalAttributeDelta\",\"operateInSameParent\",\"mergeInsideMoveRange\",\"pathA\",\"pathB\",\"aRange\",\"bRange\",\"diff\",\"newHowMany\",\"newContext\",\"sameRoot\",\"splitInsideWrapRange\",\"splitNodePos\",\"insertPos\",\"sourcePos\",\"targetPos\",\"additionalRenameDelta\",\"Batch\",\"rootattributedelta_RootAttributeDelta\",\"detachoperation_DetachOperation\",\"rootelement_RootElement\",\"_doc\",\"model_writer_Writer\",\"_assertWriterUsedCorrectly\",\"writer_isSameTree\",\"addDelta\",\"applyOperation\",\"rangeRootPosition\",\"setMarker\",\"usingOperation\",\"itemOrRange\",\"writer_setAttributeOnRange\",\"writer_setAttributeOnItem\",\"removeAttributesFromItem\",\"addRemoveDelta\",\"writer_applyRemoveOperation\",\"getMinimalFlatRanges\",\"flat\",\"positionAfter\",\"positionBefore\",\"moveVersion\",\"renameOperation\",\"limitElement\",\"firstSplitElement\",\"firstCopyElement\",\"splitElement\",\"insertVersion\",\"elementOrString\",\"markerOrNameOrRange\",\"rangeOrOptions\",\"currentMarker\",\"managedUsingOperations\",\"writer_applyMarkerOperation\",\"_set\",\"currentRange\",\"markerOrName\",\"keyOrObjectOrIterable\",\"_setSelectionAttribute\",\"keyOrIterableOfKeys\",\"_removeSelectionAttribute\",\"_overrideGravity\",\"_restoreGravity\",\"storeKey\",\"_getStoreAttributeKey\",\"_currentWriter\",\"valueBefore\",\"valueAfter\",\"lastSplitPosition\",\"previousValue\",\"isRootChanged\",\"graveyardPosition\",\"rootA\",\"rootB\",\"differ_Differ\",\"_changesInElement\",\"_elementSnapshots\",\"_changedMarkers\",\"_changeCount\",\"_cachedChanges\",\"_cachedChangesWithGraveyard\",\"_isInInsertedElement\",\"_markInsert\",\"_markAttribute\",\"sourceParentInserted\",\"targetParentInserted\",\"_markRemove\",\"buffered\",\"includeChangesInGraveyard\",\"diffSet\",\"changes\",\"snapshotChildren\",\"elementChildren\",\"differ_getChildrenSnapshot\",\"differ_generateActionsFromChanges\",\"_getInsertDiff\",\"_getRemoveDiff\",\"elementAttributes\",\"snapshotAttributes\",\"_getAttributesDiff\",\"changeCount\",\"prevDiff\",\"thisDiff\",\"isConsecutiveTextRemove\",\"isConsecutiveTextAdd\",\"isConsecutiveAttributeChange\",\"differ_changesInGraveyardFilter\",\"changeItem\",\"_markChange\",\"_removeAllNestedChanges\",\"_makeSnapshot\",\"_getChangesForElement\",\"_handleChange\",\"inc\",\"nodesToHandle\",\"old\",\"incEnd\",\"oldEnd\",\"intersectionLength\",\"howManyAfter\",\"attributePart\",\"diffs\",\"snapshot\",\"oldChildrenLength\",\"oldChildrenHandled\",\"repeat\",\"posInGy\",\"rangeInGy\",\"history_History\",\"_deltas\",\"_historyPoints\",\"_undoPairs\",\"_undoneDeltas\",\"_getIndex\",\"undoingDelta\",\"nextBaseVersion\",\"isInsideSurrogatePair\",\"character\",\"isLowSurrogateHalf\",\"isInsideCombinedSymbol\",\"document_graveyardName\",\"model_document_Document\",\"createRoot\",\"bufferOperation\",\"hasSelectionChanged\",\"reset\",\"defaultRoot\",\"_getDefaultRoot\",\"document_validateTextNodePosition\",\"rangeBoundary\",\"markercollection_MarkerCollection\",\"markercollection_Marker\",\"oldMarker\",\"hasChanged\",\"_attachLiveRange\",\"_managedUsingOperations\",\"_destroyMarker\",\"prefix\",\"_detachLiveRange\",\"_liveRange\",\"stopDelegating\",\"liveposition_LivePosition\",\"stickiness\",\"originalRange\",\"gotMoved\",\"oldPosition\",\"insertcontent_Insertion\",\"canMergeWith\",\"_filterAttributesOf\",\"parentContext\",\"_handleNode\",\"isFirst\",\"isLast\",\"nodeToSelect\",\"_handleObject\",\"_checkAndSplitToAllowedPosition\",\"_mergeSiblingsOf\",\"_handleDisallowedNode\",\"_tryAutoparagraphing\",\"handleNodes\",\"livePos\",\"mergeLeft\",\"_canMergeLeft\",\"mergeRight\",\"_canMergeRight\",\"mergePosLeft\",\"mergePosRight\",\"merge\",\"paragraph\",\"_getAllowedIn\",\"tempPos\",\"deletecontent_deleteContent\",\"doNotResetEntireContent\",\"getLimitElement\",\"deletecontent_shouldEntireContentBeReplacedWithParagraph\",\"deletecontent_insertParagraph\",\"deletecontent_replaceEntireContentWithParagraph\",\"selRange\",\"startPos\",\"endPos\",\"leaveUnmerged\",\"deletecontent_mergeBranches\",\"startParent\",\"endParent\",\"leftPos\",\"rightPos\",\"rangeToCheck\",\"deletecontent_checkCanBeMerged\",\"parentToRemove\",\"isTextAllowed\",\"isParagraphAllowed\",\"deletecontent_shouldAutoparagraph\",\"modifyselection_wordBoundaryCharacters\",\"modifyselection_modifySelection\",\"isForward\",\"unit\",\"searchEnd\",\"modifyselection_getSearchRange\",\"modifyselection_tryExtendingTo\",\"setSelectionFocus\",\"modifyselection_isAtWordBoundary\",\"modifyselection_isAtNodeBoundary\",\"boundaryChar\",\"modifyselection_getCorrectWordBreakPosition\",\"modifyselection_getCorrectPosition\",\"offsetToCheck\",\"getselectedcontent_removeRangeContent\",\"parentsToCheck\",\"itemRange\",\"parentToCheck\",\"removeRange\",\"model_Model\",\"_pendingChanges\",\"_runPendingChanges\",\"batchOrType\",\"_execute\",\"useContext\",\"transformDeltaSets\",\"content\",\"deleteContent\",\"insertion\",\"nodesToInsert\",\"getSelectionRange\",\"insertcontent_insertContent\",\"frag\",\"commonPath\",\"commonParent\",\"getNodeByPath\",\"flatSubtreeRange\",\"appendText\",\"leftExcessRange\",\"getselectedcontent_getSelectedContent\",\"rangeOrElement\",\"ret\",\"currentBatch\",\"callbackReturnValue\",\"keystrokehandler_KeystrokeHandler\",\"_listener\",\"keyEvtData\",\"editingkeystrokehandler_EditingKeystrokeHandler\",\"evtData\",\"editor_Editor\",\"build\",\"locale\",\"editing\",\"conversion\",\"keystrokes\",\"load\",\"loadPlugins\",\"loadedPlugins\",\"initPlugins\",\"method\",\"promise\",\"dataapimixin\",\"elementapimixin\",\"el\",\"HTMLTextAreaElement\",\"innerHTML\",\"BasicHtmlWriter\",\"fragment\",\"implementation\",\"createHTMLDocument\",\"htmldataprocessor_HtmlDataProcessor\",\"_domParser\",\"DOMParser\",\"_domConverter\",\"_htmlWriter\",\"getHtml\",\"_toDom\",\"parseFromString\",\"componentfactory_ComponentFactory\",\"_components\",\"originalName\",\"componentfactory_getNormalized\",\"focustracker_FocusTracker\",\"focusedElement\",\"_elements\",\"_nextEventLoopTimeout\",\"_focus\",\"_blur\",\"classiceditorui_ClassicEditorUI\",\"componentFactory\",\"focusTracker\",\"_toolbarConfig\",\"stickyPanel\",\"limiterElement\",\"viewportTopOffset\",\"editingRoot\",\"toolbar\",\"fillFromConfig\",\"origin\",\"originKeystrokeHandler\",\"originFocusTracker\",\"beforeFocus\",\"afterBlur\",\"enableToolbarKeyboardFocus\",\"viewcollection_ViewCollection\",\"isRendered\",\"_parentElement\",\"elementOrDocFragment\",\"dest\",\"evtName\",\"lodash_cloneDeepWith\",\"template_xhtmlNs\",\"template_Template\",\"template_normalize\",\"template_clone\",\"_isRendered\",\"_revertData\",\"_renderNode\",\"intoFragment\",\"isApplying\",\"revertData\",\"_revertTemplateFromNode\",\"search\",\"template_isView\",\"template_isTemplate\",\"eventNameOrFunctionOrAttribute\",\"template_TemplateToBinding\",\"eventNameOrFunction\",\"if\",\"valueIfTrue\",\"template_TemplateIfBinding\",\"template\",\"template_extendTemplate\",\"template_extendObjectValueArray\",\"eventListeners\",\"childIndex\",\"isInvalid\",\"_renderText\",\"_renderElement\",\"createElementNS\",\"ns\",\"_renderAttributes\",\"_renderElementChildren\",\"_setUpListeners\",\"textContent\",\"template_hasTemplateBinding\",\"_bindToObservable\",\"updater\",\"template_getTextUpdater\",\"attrName\",\"attrValue\",\"domAttrValue\",\"attrNs\",\"valueToBind\",\"template_shouldExtend\",\"template_getAttributeUpdater\",\"_renderStyleAttribute\",\"template_isFalsy\",\"template_arrayValueReducer\",\"setAttributeNS\",\"styleName\",\"styleValue\",\"template_getStyleUpdater\",\"template_isViewCollection\",\"setParent\",\"childRevertData\",\"revertBindings\",\"schemaItem\",\"domEvtName\",\"domSelector\",\"activateDomEventListener\",\"template_syncValueSchemaValue\",\"templateBinding\",\"activateAttributeListener\",\"revertBinding\",\"template_TemplateBinding\",\"matches\",\"getValue\",\"template_getValueSchemaValue\",\"removeAttributeNS\",\"template_normalizePlainTextDefinition\",\"template_normalizeTextDefinition\",\"listeners\",\"template_arrayify\",\"template_normalizeListeners\",\"template_normalizeAttributes\",\"cur\",\"ext\",\"src_view_View\",\"_viewCollections\",\"_unboundChildren\",\"createCollection\",\"collection\",\"bindTemplate\",\"_bindTemplate\",\"registerChildren\",\"getViews\",\"editoruiview_EditorUIView\",\"_renderBodyCollection\",\"_bodyCollectionContainer\",\"bodyElement\",\"labelview_LabelView\",\"setTemplate\",\"boxededitoruiview_BoxedEditorUIView\",\"ariaLabelUid\",\"main\",\"_voiceLabelView\",\"_createVoiceLabel\",\"role\",\"aria-labelledby\",\"voiceLabel\",\"extendTemplate\",\"editableuiview_EditableUIView\",\"contenteditable\",\"externalElement\",\"inlineeditableuiview_InlineEditableUIView\",\"aria-label\",\"toUnit\",\"stickypanelview_toPx\",\"stickypanelview_StickyPanelView\",\"_contentPanelPlaceholder\",\"display\",\"_panelRect\",\"_contentPanel\",\"_hasViewportTopOffset\",\"_isStickyToTheLimiter\",\"limiterBottomOffset\",\"marginLeft\",\"_checkIfShouldBeSticky\",\"panelRect\",\"limiterRect\",\"_limiterRect\",\"isActive\",\"_marginLeft\",\"focuscycler_FocusCycler\",\"keystrokeHandler\",\"focusables\",\"focuscycler_isFocusable\",\"_getFocusableItem\",\"viewIndex\",\"focused\",\"collectionLength\",\"toolbarseparatorview_ToolbarSeparatorView\",\"toolbarview_ToolbarView\",\"_focusCycler\",\"focusPrevious\",\"focusNext\",\"mousedown\",\"focusFirst\",\"focusLast\",\"classiceditoruiview_ClassicEditorUIView\",\"ElementReplacer\",\"_replacedElements\",\"classiceditor_ClassicEditor\",\"_elementReplacer\",\"ui\",\"updateElement\",\"form\",\"originalSubmit\",\"onSubmit\",\"submit\",\"attachtoform_attachToForm\",\"restore\",\"init\",\"attachDomRoot\",\"plugin_Plugin\",\"DataTransfer\",\"nativeDataTransfer\",\"files\",\"kind\",\"getAsFile\",\"getFiles\",\"_native\",\"getData\",\"setData\",\"clipboardobserver_ClipboardObserver\",\"viewDocument\",\"handleInput\",\"targetRanges\",\"dropRange\",\"dataTransfer\",\"clipboardData\",\"domDoc\",\"clientX\",\"clientY\",\"caretRangeFromPoint\",\"rangeParent\",\"rangeOffset\",\"clipboardobserver_getDropViewRange\",\"smallPaddingElements\",\"clipboard_Clipboard\",\"modelDocument\",\"onCopyCut\",\"getSelectedContent\",\"_htmlDataProcessor\",\"fullMatch\",\"spaces\",\"scrollToTheSelection\",\"dataController\",\"modelFragment\",\"insertContent\",\"viewToPlainText\",\"childText\",\"command_Command\",\"forceDisable\",\"refresh\",\"entercommand_EnterCommand\",\"isSelectionEmpty\",\"entercommand_splitBlock\",\"isContainedWithinOneElement\",\"entercommand_enterBlock\",\"splitPos\",\"oldElement\",\"enterobserver_EnterObserver\",\"once\",\"enter_Enter\",\"changebuffer_ChangeBuffer\",\"limit\",\"isLocked\",\"_changeCallback\",\"_batch\",\"_reset\",\"_selectionChangeCallback\",\"ignoreLock\",\"inputcommand_InputCommand\",\"undoStepSize\",\"_buffer\",\"textInsertions\",\"resultRange\",\"isCollapsedRange\",\"lock\",\"insertText\",\"unlock\",\"input_Input\",\"editingView\",\"inputCommand\",\"_handleKeydown\",\"mutations\",\"_handleMutations\",\"keyData\",\"input_safeKeycodes\",\"input_isSafeKeystroke\",\"input_MutationHandler\",\"handle\",\"input_getSingleTextNodeChange\",\"input_containerChildrenMutated\",\"_handleContainerChildrenMutations\",\"_handleTextMutation\",\"_handleTextNodeInsertion\",\"mutationsCommonAncestor\",\"input_getMutationsContainer\",\"domMutationCommonAncestor\",\"freshDomConverter\",\"modelFromCurrentDom\",\"currentModel\",\"modelFromDomChildren\",\"currentModelChildren\",\"input_hasOnlyTextNodes\",\"diffResult\",\"firstChangeAt\",\"insertions\",\"deletions\",\"input_calculateChanges\",\"modelSelectionRange\",\"viewPos\",\"modelPos\",\"insertedText\",\"input_compareChildNodes\",\"oldChild\",\"newChild\",\"output\",\"lastOperation\",\"pushLast\",\"isContinuationOf\",\"expected\",\"diffToChanges\",\"lastChangeAt\",\"deletecommand_DeleteCommand\",\"modifySelection\",\"_shouldEntireContentBeReplacedWithParagraph\",\"sequence\",\"_replaceEntireContentWithParagraph\",\"limitElementFirstChild\",\"deleteobserver_DeleteObserver\",\"deleteData\",\"hasWordModifier\",\"delete_Delete\",\"typing_Typing\",\"basecommand_BaseCommand\",\"_stack\",\"_createdBatches\",\"docSelection\",\"selectionRanges\",\"transformedRange\",\"basecommand_transformSelectionRange\",\"batchToUndo\",\"undoingBatch\",\"deltasToUndo\",\"deltaToUndo\",\"historyDeltas\",\"getDeltas\",\"reversedDeltas\",\"transformDeltas\",\"setDeltaAsUndone\",\"basecommand_transformRangesByDeltas\",\"undocommand_UndoCommand\",\"batchIndex\",\"_undo\",\"_restoreSelection\",\"redocommand_RedoCommand\",\"undoediting_UndoEditing\",\"_batchRegistry\",\"_undoCommand\",\"_redoCommand\",\"addBatch\",\"clearStack\",\"undoneBatch\",\"iconview_IconView\",\"viewBox\",\"_updateXMLContent\",\"_colorFillPaths\",\"svg\",\"querySelector\",\"fillColor\",\"querySelectorAll\",\"tooltipview_TooltipView\",\"buttonview_ButtonView\",\"tooltipView\",\"_createTooltipView\",\"labelView\",\"_createLabelView\",\"iconView\",\"_getTooltipString\",\"tabindex\",\"click\",\"icon\",\"tooltip\",\"keyboard_getEnvKeystrokeText\",\"undoui_UndoUI\",\"_addButton\",\"undo_default\",\"redo_default\",\"Icon\",\"undo_Undo\",\"filereader_FileReader\",\"reader\",\"FileReader\",\"_reader\",\"onprogress\",\"file\",\"total\",\"onload\",\"onerror\",\"onabort\",\"readAsDataURL\",\"abort\",\"filerepository_FileRepository\",\"loaders\",\"uploaded\",\"loader\",\"createUploadAdapter\",\"filerepository_FileLoader\",\"_adapter\",\"aggregatedUploaded\",\"aggregatedTotal\",\"uploadTotal\",\"fileOrLoader\",\"getLoader\",\"_destroy\",\"adapter\",\"status\",\"read\",\"upload\",\"uploadResponse\",\"TOKEN_COOKIE_NAME\",\"TOKEN_LENGTH\",\"tokenCharset\",\"getCsrfToken\",\"token\",\"cookie\",\"decodeURIComponent\",\"getCookie\",\"randValues\",\"crypto\",\"getRandomValues\",\"toUpperCase\",\"generateToken\",\"encodeURIComponent\",\"uploadadapter_UploadAdapter\",\"url\",\"_initRequest\",\"_initListeners\",\"_sendRequest\",\"xhr\",\"XMLHttpRequest\",\"open\",\"responseType\",\"genericError\",\"response\",\"default\",\"lengthComputable\",\"FormData\",\"send\",\"blockautoformatediting_BlockAutoformatEditing\",\"callbackOrCommand\",\"inlineautoformatediting_InlineAutoformatEditing\",\"testRegexpOrCallback\",\"attributeOrCallback\",\"regExp\",\"testCallback\",\"formatCallback\",\"format\",\"1\",\"leftDel\",\"2\",\"3\",\"rightDel\",\"delStart\",\"delEnd\",\"testOutput\",\"rangesToFormat\",\"inlineautoformatediting_testOutputToRanges\",\"rangesToRemove\",\"getValidRanges\",\"attributecommand_AttributeCommand\",\"checkAttributeInSelection\",\"forceValue\",\"setSelectionAttribute\",\"boldediting_BOLD\",\"boldediting_BoldEditing\",\"attributeToElement\",\"font-weight\",\"boldui_BOLD\",\"boldui_BoldUI\",\"bold_default\",\"italicediting_ITALIC\",\"italicediting_ItalicEditing\",\"font-style\",\"italicui_ITALIC\",\"italicui_ItalicUI\",\"italic_default\",\"first_first\",\"iterable\",\"iteratorItem\",\"blockquotecommand_BlockQuoteCommand\",\"_getValue\",\"_checkEnabled\",\"blocks\",\"_removeQuote\",\"blockquotecommand_findQuote\",\"blocksToQuote\",\"blockquotecommand_checkCanBeQuoted\",\"_applyQuote\",\"firstBlock\",\"blockquotecommand_getRangesOfBlockGroups\",\"groupRange\",\"quotesToMerge\",\"currentQuote\",\"nextQuote\",\"elementOrPosition\",\"nextBlock\",\"isBQAllowed\",\"isBlockAllowedInBQ\",\"blockquoteediting_BlockQuoteEditing\",\"addChildCheck\",\"elementToElement\",\"blockquoteui_BlockQuoteUI\",\"buttonView\",\"quote_default\",\"fileuploader_BASE64_HEADER_REG_EXP\",\"fileuploader_FileUploader\",\"fileOrData\",\"apiAddress\",\"fileuploader_isBase64\",\"base64\",\"sliceSize\",\"contentType\",\"base64Data\",\"atob\",\"byteArrays\",\"byteNumbers\",\"charCodeAt\",\"Blob\",\"fileuploader_base64ToBlob\",\"_token\",\"_apiAddress\",\"_prepareRequest\",\"_attachXHRListeners\",\"setRequestHeader\",\"onError\",\"statusCode\",\"xhrResponse\",\"formData\",\"fileuploader\",\"token_DEFAULT_OPTIONS\",\"refreshInterval\",\"autoRefresh\",\"token_Token\",\"tokenUrl\",\"initValue\",\"_tokenUrl\",\"_options\",\"_startRefreshing\",\"_refreshToken\",\"_refreshInterval\",\"token_token\",\"cloudservices_CloudServices\",\"optionName\",\"Token\",\"cloudservicesuploadadapter_CloudServicesUploadAdapter\",\"cloudServices\",\"uploadUrl\",\"_uploadGateway\",\"_UploadGateway\",\"cloudservicesuploadadapter_Adapter\",\"uploadGateway\",\"fileUploader\",\"converters_modelToViewAttributeConverter\",\"img\",\"highlightstack_HighlightStack\",\"oldTop\",\"_insertDescriptor\",\"newTop\",\"highlightstack_compareDescriptors\",\"oldDescriptor\",\"newDescriptor\",\"_removeDescriptor\",\"highlightstack_shouldABeBeforeB\",\"highlightstack_classesToString\",\"utils_widgetSymbol\",\"utils_labelSymbol\",\"utils_WIDGET_CLASS_NAME\",\"utils_WIDGET_SELECTED_CLASS_NAME\",\"utils_isWidget\",\"utils_toWidget\",\"setCustomProperty\",\"utils_getFillerOffset\",\"labelOrCreator\",\"utils_setLabel\",\"utils_setHighlightHandling\",\"normalizeToArray\",\"utils_getLabel\",\"labelCreator\",\"utils_imageSymbol\",\"utils_isImageWidgetSelected\",\"utils_isImageWidget\",\"utils_isImage\",\"imageediting_ImageEditing\",\"imageediting_createImageViewElement\",\"altText\",\"srcset\",\"converters_srcsetAttributeConverter\",\"src\",\"viewImage\",\"modelWriter\",\"conversionResult\",\"modelImage\",\"converters_viewFigureToModel\",\"emptyElement\",\"createEmptyElement\",\"figure\",\"mouseobserver_MouseObserver\",\"widget_selectAllKeystrokeCode\",\"widget_Widget\",\"_previouslySelected\",\"_clearPreviouslySelectedWidgets\",\"selectedElement\",\"_onMousedown\",\"_onKeydown\",\"_handleDelete\",\"domEventData\",\"widget_isInsideNestedEditable\",\"_setSelectionOverElement\",\"wasHandled\",\"widget_isArrowKeyCode\",\"widget_isSelectAllKeyCode\",\"_selectAllNestedEditableContent\",\"_selectAllContent\",\"_handleArrowKeys\",\"objectElement\",\"_getObjectElementNextToSelection\",\"previousNode\",\"nodeToRemove\",\"objectElement2\",\"documentSelection\",\"widgetParent\",\"probe\",\"widget\",\"imagetextalternativecommand_ImageTextAlternativeCommand\",\"imageElement\",\"imagetextalternativeediting_ImageTextAlternativeEditing\",\"clickOutsideHandler\",\"activator\",\"contextElements\",\"contextElement\",\"labeledinputview_LabeledInputView\",\"InputView\",\"inputView\",\"_createInputView\",\"select\",\"inputtextview_InputTextView\",\"placeholder\",\"readonly\",\"setValue\",\"submitHandler\",\"textalternativeformview_TextAlternativeFormView\",\"labeledInput\",\"_createLabeledInputView\",\"saveButtonView\",\"_createButton\",\"check_default\",\"cancelButtonView\",\"cancel_default\",\"_focusables\",\"v\",\"button\",\"position_getOptimalPosition\",\"positions\",\"limiter\",\"fitInViewport\",\"positionedElementAncestor\",\"getpositionedancestor_getPositionedAncestor\",\"elementRect\",\"bestPosition\",\"getVisible\",\"bestPositionRect\",\"bestPositionName\",\"maxLimiterIntersectArea\",\"maxViewportIntersectArea\",\"elementRectArea\",\"positionName\",\"positionRect\",\"position_getPosition\",\"limiterIntersectArea\",\"viewportIntersectArea\",\"limiterViewportIntersectRect\",\"getIntersectionArea\",\"setBestPosition\",\"position_getBestPosition\",\"position_getAbsoluteRectCoordinates\",\"ancestorPosition\",\"ancestorBorderWidths\",\"moveTo\",\"balloonpanelview_toPx\",\"balloonpanelview_defaultLimiterElement\",\"balloonpanelview_BalloonPanelView\",\"isVisible\",\"show\",\"defaultPositions\",\"positionOptions\",\"southArrowNorth\",\"southArrowNorthWest\",\"southArrowNorthEast\",\"northArrowSouth\",\"northArrowSouthWest\",\"northArrowSouthEast\",\"unpin\",\"_pinWhenIsVisibleCallback\",\"_startPinning\",\"_stopPinning\",\"hide\",\"attachTo\",\"balloonpanelview_getDomElement\",\"scrollTarget\",\"isWithinScrollTarget\",\"isLimiterWithinScrollTarget\",\"balloonpanelview_getNorthTop\",\"balloonRect\",\"arrowVerticalOffset\",\"balloonpanelview_getSouthTop\",\"arrowHorizontalOffset\",\"northWestArrowSouth\",\"northWestArrowSouthWest\",\"northWestArrowSouthEast\",\"northEastArrowSouth\",\"northEastArrowSouthEast\",\"northEastArrowSouthWest\",\"southWestArrowNorth\",\"southWestArrowNorthWest\",\"southWestArrowNorthEast\",\"southEastArrowNorth\",\"southEastArrowNorthEast\",\"southEastArrowNorthWest\",\"contextualballoon_ContextualBalloon\",\"positionLimiter\",\"visibleView\",\"hasView\",\"_show\",\"pin\",\"_getBalloonPosition\",\"balloonClassName\",\"utils_repositionContextualBalloon\",\"balloon\",\"utils_getBalloonPositionData\",\"updatePosition\",\"imagetextalternativeui_ImageTextAlternativeUI\",\"_createForm\",\"low_vision_default\",\"_showForm\",\"_balloon\",\"_form\",\"_hideForm\",\"_isVisible\",\"focusEditable\",\"imagetextalternative_ImageTextAlternative\",\"image_Image\",\"filedialogbuttonview_FileDialogButtonView\",\"_fileInputView\",\"filedialogbuttonview_FileInputView\",\"accept\",\"multiple\",\"utils_isImageType\",\"utils_findOptimalInsertionPosition\",\"imageuploadui_ImageUploadUI\",\"acceptedType\",\"allowMultipleFiles\",\"icons_image_default\",\"insertAt\",\"imageuploadprogress_ImageUploadProgress\",\"image_placeholder_default\",\"uploadStatusChange\",\"uploadId\",\"fileRepository\",\"viewFigure\",\"viewImg\",\"progressBar\",\"imageuploadprogress_progressBarSymbol\",\"imageuploadprogress_createProgressBar\",\"imageFigure\",\"imageuploadprogress_getProgressBar\",\"imageuploadcommand_ImageUploadCommand\",\"createLoader\",\"insertAtSelection\",\"notification_Notification\",\"alert\",\"_showNotification\",\"namespace\",\"title\",\"imageuploadediting_ImageUploadEditing\",\"targetModelSelection\",\"isInGraveyard\",\"_load\",\"notification\",\"clean\",\"destroyLoader\",\"setAttributes\",\"uploadStatus\",\"maxWidth\",\"srcsetAttribute\",\"isNaN\",\"msg\",\"showWarning\",\"imageupload_ImageUpload\",\"paragraphcommand_ParagraphCommand\",\"paragraphcommand_checkCanBecomeParagraph\",\"rename\",\"paragraph_Paragraph\",\"paragraphLikeElements\",\"paragraph_isParagraphable\",\"paragraph_wrapInParagraph\",\"registerPostFixer\",\"_autoparagraphEmptyRoots\",\"getRootNames\",\"insertElement\",\"headingcommand_HeadingCommand\",\"modelElements\",\"heading\",\"headingcommand_checkCanBecomeHeading\",\"headingediting_defaultModelElement\",\"headingediting_HeadingEditing\",\"option\",\"enterCommand\",\"src_model_Model\",\"dropdownpanelview_DropdownPanelView\",\"selectstart\",\"dropdownview_DropdownView\",\"panelView\",\"isOpen\",\"closeDropdown\",\"dropdownbuttonview_DropdownButtonView\",\"arrowView\",\"_createArrowView\",\"dropdown_arrow_default\",\"listview_ListView\",\"listitemview_ListItemView\",\"onKeystrokePress\",\"utils_createDropdown\",\"ButtonClass\",\"dropdownView\",\"utils_closeDropdownOnBlur\",\"utils_closeDropdownOnExecute\",\"utils_focusDropdownContentsOnArrows\",\"utils_addDefaultBehavior\",\"utils_addListToDropdown\",\"listView\",\"itemModel\",\"headingui_HeadingUI\",\"_getLocalizedOptions\",\"defaultTitle\",\"dropdownTooltip\",\"titles\",\"dropdownItems\",\"headingCommand\",\"paragraphCommand\",\"commandValue\",\"isOn\",\"withText\",\"areEnabled\",\"para\",\"whichModel\",\"localizedTitles\",\"Paragraph\",\"Heading 1\",\"Heading 2\",\"Heading 3\",\"documentPlaceholders\",\"attachPlaceholder\",\"placeholderText\",\"checkFunction\",\"placeholders\",\"info\",\"updateSinglePlaceholder\",\"updateAllPlaceholders\",\"isEmptyish\",\"utils_captionSymbol\",\"utils_getCaptionFromImage\",\"imageModelElement\",\"utils_matchImageCaption\",\"imagecaptionediting_ImageCaptionEditing\",\"_insertMissingModelCaptionElement\",\"imagecaptionediting_captionModelToView\",\"createCaptionForEditing\",\"createEditableElement\",\"utils_captionElementCreator\",\"_fixCaptionVisibility\",\"_updateCaptionVisibility\",\"lastCaption\",\"_lastSelectedCaption\",\"viewCaption\",\"modelCaption\",\"imagecaptionediting_getParentCaption\",\"imagecaptionediting_showCaption\",\"imagecaptionediting_hideCaptionIfEmpty\",\"viewModified\",\"nodeFinder\",\"appendElement\",\"captionElement\",\"imagecaptionediting_insertViewCaptionAndBind\",\"caption\",\"imagestylecommand_ImageStyleCommand\",\"_defaultStyle\",\"isDefault\",\"attributeValue\",\"converters_getStyleByName\",\"utils_defaultStyles\",\"full\",\"object_full_width_default\",\"side\",\"object_right_default\",\"alignLeft\",\"object_left_default\",\"alignCenter\",\"object_center_default\",\"alignRight\",\"utils_defaultIcons\",\"center\",\"utils_normalizeImageStyles\",\"configuredStyles\",\"utils_normalizeStyle\",\"defaultStyle\",\"extendedStyle\",\"imagestyleediting_ImageStyleEditing\",\"modelToViewConverter\",\"newStyle\",\"oldStyle\",\"converters_modelToViewStyleAttribute\",\"filteredStyles\",\"viewFigureElement\",\"modelImageElement\",\"converters_viewToModelStyleAttribute\",\"imagestyleui_ImageStyleUI\",\"localizedDefaultStylesTitles\",\"Full size image\",\"Side image\",\"Left aligned image\",\"Centered image\",\"Right aligned image\",\"translatedStyles\",\"imagestyleui_translateStyles\",\"componentName\",\"imagetoolbar_balloonClassName\",\"findlinkrange_findLinkRange\",\"findlinkrange_findBound\",\"lookBack\",\"lastNode\",\"linkcommand_LinkCommand\",\"href\",\"linkRange\",\"unlinkcommand_UnlinkCommand\",\"rangesToUnlink\",\"linkElementSymbol\",\"createLinkElement\",\"linkElement\",\"bindtwostepcarettoattribute_isAtAttributeBoundary\",\"isAttrInNext\",\"isAttrInPrev\",\"linkediting_LinkEditing\",\"arrowRightPressed\",\"arrowLeftPressed\",\"overrideSelectionGravity\",\"restoreSelectionGravity\",\"counter\",\"bindtwostepcarettoattribute_bindTwoStepCaretToAttribute\",\"_setupLinkHighlight\",\"removeMarker\",\"clickobserver_ClickObserver\",\"linkformview_LinkFormView\",\"urlInputView\",\"_createUrlInput\",\"linkactionsview_LinkActionsView\",\"previewButtonView\",\"_createPreviewButton\",\"unlinkButtonView\",\"unlink_default\",\"editButtonView\",\"pencil_default\",\"linkui_linkKeystroke\",\"linkui_LinkUI\",\"actionsView\",\"_createActionsView\",\"formView\",\"_createFormView\",\"_createToolbarLinkButton\",\"_enableUserBalloonInteractions\",\"linkCommand\",\"unlinkCommand\",\"_addFormView\",\"_hideUI\",\"_removeFormView\",\"_showUI\",\"icons_link_default\",\"_getSelectedLinkElement\",\"_areActionsVisible\",\"_isUIVisible\",\"_getBalloonPositionData\",\"_isFormInPanel\",\"_isUIInPanel\",\"_addActionsView\",\"_startUpdatingUIOnViewRender\",\"prevSelectedLink\",\"prevSelectionParent\",\"getSelectionParent\",\"selectedLink\",\"_areActionsInPanel\",\"targetLink\",\"linkui_findLinkElementAncestor\",\"startLink\",\"endLink\",\"listcommand_ListCommand\",\"listcommand_checkCanBecomeListItem\",\"turnOff\",\"currentIndent\",\"indent\",\"newIndent\",\"lowestIndent\",\"listcommand_fixType\",\"listItem\",\"startingItem\",\"indentcommand_IndentCommand\",\"indentDirection\",\"_indentBy\",\"itemsToChange\",\"lastItem\",\"src_utils_getFillerOffset\",\"hasOnlyLists\",\"converters_modelViewInsertion\",\"converters_injectViewList\",\"listType\",\"createViewListItemElement\",\"viewList\",\"converters_generateLiInUl\",\"converters_modelViewRemove\",\"breakContainer\",\"viewListPrev\",\"converters_mergeViewLists\",\"converters_hoistNestedLists\",\"converters_modelViewChangeType\",\"listName\",\"converters_modelViewChangeIndent\",\"converters_modelViewSplitOnInsert\",\"removeStart\",\"removeEnd\",\"previousList\",\"mergePos\",\"converters_modelViewMergeAfter\",\"viewItemPrev\",\"viewItemNext\",\"converters_viewModelConverter\",\"conversionStore\",\"converters_cleanList\",\"converters_cleanListItem\",\"foundList\",\"firstNode\",\"setTextData\",\"converters_modelToViewPosition\",\"topmostViewList\",\"converters_viewToModelPosition\",\"modelNode\",\"modelLength\",\"converters_modelIndentPasteFixer\",\"refItem\",\"indentChange\",\"converters_getSiblingListItem\",\"modelItemOrPosition\",\"sameIndent\",\"smallerIndent\",\"itemIndent\",\"firstList\",\"secondList\",\"mergeContainers\",\"injectedItem\",\"injectedList\",\"prevItem\",\"converters_positionAfterUiElements\",\"prevView\",\"breakPosition\",\"nextViewList\",\"lastSubChild\",\"modelChild\",\"nextIndent\",\"modelRemoveStartPosition\",\"viewRemoveStartPosition\",\"viewRemovedItem\",\"prevModelItem\",\"prevIndent\",\"prevViewList\",\"listediting_ListEditing\",\"itemToListHead\",\"applied\",\"_addListToFix\",\"listHead\",\"_fixListIndents\",\"_fixListTypes\",\"maxIndent\",\"fixBy\",\"typesStack\",\"converters_modelChangePostFixer\",\"registerViewToModelLength\",\"listediting_getViewListItemLength\",\"firstPosition\",\"getCommandExecuter\",\"listui_ListUI\",\"numberedlist_default\",\"bulletedlist_default\",\"fontcommand_FontCommand\",\"fontfamilycommand_FontFamilyCommand\",\"normalizeOptions\",\"configuredOptions\",\"getOptionDefinition\",\"fontDefinition\",\"fontNames\",\"firstFontName\",\"cssFontNames\",\"normalizeFontNameForCSS\",\"font-family\",\"generateFontPreset\",\"fontName\",\"buildDefinition\",\"modelAttributeKey\",\"fontfamilyediting_FONT_FAMILY\",\"fontfamilyediting_FontFamilyEditing\",\"fontfamilyui_FontFamilyUI\",\"commandParam\",\"fontfamilyui_prepareListOptions\",\"font_family_default\",\"fontfamily_FontFamily\",\"fontsizecommand_FontSizeCommand\",\"utils_normalizeOptions\",\"utils_getOptionDefinition\",\"namedPresets\",\"tiny\",\"small\",\"big\",\"huge\",\"sizePreset\",\"parseFloat\",\"font-size\",\"fontsizeediting_FONT_SIZE\",\"fontsizeediting_FontSizeEditing\",\"fontsizeui_FontSizeUI\",\"fontsizeui_prepareListOptions\",\"font_size_default\",\"Default\",\"Tiny\",\"Small\",\"Big\",\"Huge\",\"fontsize_FontSize\",\"ckeditor_ClassicEditor\",\"_addListAutoformats\",\"_addBasicStylesAutoformats\",\"_addHeadingAutoformats\",\"_addBlockQuoteAutoformats\",\"level\",\"balloonToolbar\",\"toolbarConfig\",\"_toolbar\",\"_checkIsVisible\",\"_showToolbar\",\"_hideToolbar\",\"image\",\"g\",\"eval\"],\"mappings\":\"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,QAAAA,OAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,cAAAD,IAEAD,EAAA,cAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,EAAAA,EAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA2CA,OAtCAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACAkB,OAAAC,eAAAnB,EAAA,cAAiDwB,OAAA,KAIjDlB,EAAAmB,EAAA,SAAAxB,GACA,IAAAe,EAAAf,GAAAA,EAAAyB,WACA,WAA2B,OAAAzB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDtB,EAAAyB,EAAA,GAIAzB,EAAAA,EAAA0B,EAAA,6DChEAC,GACAC,UAAA,EACAP,QAAA,GAIAQ,EAAAF,SAAAjC,UAAAA,UAAAA,QAAAoC,SACApC,aACAqC,EAGAC,EAAAL,SAAAhC,IAAAA,IAAAA,EAAAmC,SACAnC,OACAoC,EAGAE,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAiB,GAAAG,GAAA,iBAAAG,GAAAA,GAGAC,EAAAxB,OAAAsB,EAAA,EAAAtB,CAAAe,SAAAU,OAAAA,MAGAC,EAAA1B,OAAAsB,EAAA,EAAAtB,CAAAe,SAAA7B,SAAAA,QAGAyC,EAAA3B,OAAAsB,EAAA,EAAAtB,CAAAe,OAAA,SAAAI,GAQAvC,EAAAyC,GACAK,KAAAC,GAAAA,EAAAzC,SAAAwC,GACAF,GAAAG,GAAAC,SAAA,cAAAA,GAEAC,EAAA,EAAA,2DC7BAA,EAAA,EAJA,SAAAvB,GACA,OAAAA,GAAAA,EAAAN,SAAAA,OAAAM,EAAA,6jGCRAvB,EAAAD,QAAA,SAAAgD,GACA,IAAAA,EAAAC,gBAAA,CACA,IAAAhD,EAAAiB,OAAAgC,OAAAF,GAEA/C,EAAAkD,WAAAlD,EAAAkD,aACAjC,OAAAC,eAAAlB,EAAA,UACAoB,YAAA,EACAC,IAAA,WACA,OAAArB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAoB,YAAA,EACAC,IAAA,WACA,OAAArB,EAAAO,KAGAU,OAAAC,eAAAlB,EAAA,WACAoB,YAAA,IAEApB,EAAAgD,gBAAA,EAEA,OAAAhD,yqWCCA8C,EAAA,EANA,SAAAvB,GACA,OAAA,WACA,OAAAA,kECfAS,GACAC,UAAA,EACAP,QAAA,GAIAQ,EAAAF,SAAAjC,UAAAA,UAAAA,QAAAoC,SACApC,aACAqC,EAGAC,EAAAL,SAAAhC,IAAAA,IAAAA,EAAAmC,SACAnC,OACAoC,EAQAe,GALAd,GAAAA,EAAAtC,UAAAmC,EACAA,OACAE,GAGAgB,EAAA,EAAAD,YAAAf,EAmBAiB,EAAAF,EAAA,SAAA5B,GACA,OAAAA,aAAA4B,GADAlC,OAAAqC,EAAA,EAAArC,EAAA,GAIA6B,EAAA,EAAA,4DC/CA,IAAAS,EAAAtC,OAAAuC,eAaA,IAAAC,EAJA,SAAAlC,GACA,OAAAgC,EAAAtC,OAAAM,KCQA,IAAAmC,EAZA,SAAAnC,GAGA,IAAAoC,GAAA,EACA,GAAA,MAAApC,GAAA,mBAAAA,EAAAqC,SACA,IACAD,KAAApC,EAAA,IACK,MAAAsC,IAEL,OAAAF,GCYA,IAAAG,EAJA,SAAAvC,GACA,QAAAA,GAAA,iBAAAA,GCpBAwC,EAAA,kBAGAC,EAAA/C,OAAAW,UAGAqC,EAAApB,SAAAjB,UAAAgC,SAGAM,EAAAF,EAAAnC,eAGAsC,EAAAF,EAAAvD,KAAAO,QAOAmD,EAAAJ,EAAAJ,SA6CA,IAAAS,EAdA,SAAA9C,GACA,IAAAuC,EAAAvC,IACA6C,EAAA1D,KAAAa,IAAAwC,GAAAL,EAAAnC,GACA,OAAA,EAEA,IAAA+C,EAAAb,EAAAlC,GACA,GAAA,OAAA+C,EACA,OAAA,EAEA,IAAAC,EAAAL,EAAAxD,KAAA4D,EAAA,gBAAAA,EAAAE,YACA,MAAA,mBAAAD,GACAA,aAAAA,GAAAN,EAAAvD,KAAA6D,IAAAJ;;;;SCpDAM,EAOAC,YAAAC,EAAAC,GAOAC,KAAAC,WAGAF,GACAC,KAAA5E,OAAA2E,GAIAD,GACAE,KAAAE,mBAAAF,KAAAC,QAAAH,GAyCAD,IAAA5D,EAAAS,GACAsD,KAAAG,aAAAH,KAAAC,QAAAhE,EAAAS,GAcAmD,OAAA5D,EAAAS,GAGAsD,KAAAG,aAAAH,KAAAC,QAAAhE,EAAAS,GAFA,GAiBAmD,IAAA5D,GACA,OAAA+D,KAAAI,eAAAJ,KAAAC,QAAAhE,GAaA4D,aAAAQ,EAAApE,EAAAS,EAAA4D,GAAA,GAEA,GAAAd,EAAAvD,GAGA,YAFA+D,KAAAE,mBAAAG,EAAApE,EAAAqE,GAMA,MAAAC,EAAAtE,EAAAuE,MAAA,KAGAvE,EAAAsE,EAAAE,MAGA,IAAA,MAAAC,KAAAH,EAEAf,EAAAa,EAAAK,MACAL,EAAAK,OAIAL,EAAAA,EAAAK,GAIA,GAAAlB,EAAA9C,GAWA,OATA8C,EAAAa,EAAApE,MACAoE,EAAApE,OAGAoE,EAAAA,EAAApE,QAGA+D,KAAAE,mBAAAG,EAAA3D,EAAA4D,GAMAA,QAAA,IAAAD,EAAApE,KAIAoE,EAAApE,GAAAS,GAWAmD,eAAAc,EAAA1E,GAEA,MAAAsE,EAAAtE,EAAAuE,MAAA,KAGAvE,EAAAsE,EAAAE,MAGA,IAAA,MAAAC,KAAAH,EAAA,CACA,IAAAf,EAAAmB,EAAAD,IAAA,CACAC,EAAA,KACA,MAIAA,EAAAA,EAAAD,GAIA,OAAAC,EAAAA,EAAA1E,QAAAsB,EAWAsC,mBAAAQ,EAAAO,EAAAN,GACAlE,OAAAyE,KAAAD,GAAAE,QAAAC,IACAf,KAAAG,aAAAE,EAAAU,EAAAH,EAAAG,GAAAT;;;;GCzMA,MAAAU,EACA,6FAYAC,UAAAC,MAaArB,YAAAsB,EAAAC,GACAD,EAAAE,EAAAF,GAEAC,IACAD,GAAA,IAAAG,KAAAC,UAAAH,IAGAI,MAAAL,GAKAnB,KAAA/D,KAAA,gBAOA+D,KAAAoB,KAAAA,EASAvB,uBAAA4B,GACA,OAAAA,aAAAR,GAUA,SAAAI,EAAAF,GACA,MAAAO,EAAAP,EAAAQ,MAAA,aAEA,OAAAD,EAIAP,iBAAiCH,WAA6BU,EAAA,OAH9DP;;;;GCzDA,IAAAS,EANA,WACA,OAAA,SAAAC,IACAA,EAAAC,QAAA;;;;SCLAC,EAKAlC,YAAAc,EAAA1E,GAOA+D,KAAAW,OAAAA,EAQAX,KAAA/D,KAAAA,EAQA+D,KAAAgC,QASAhC,KAAAiC,KAAAL,IAOA5B,KAAAkC,IAAAN;;;;GC5CA,SAAAO,IACA,IAAAC,EAAA,IAEA,IAAA,IAAA1G,EAAA,EAAiBA,EAAA,EAAOA,IACxB0G,GAAAC,KAAAC,MAAA,OAAA,EAAAD,KAAAE,WAAAxD,SAAA,IAAAyD,UAAA,GAGA,OAAAJ;;;;GCqBA,IAAAK,GAfA5C,IAAA6C,GACA,MAAA,iBAAAA,EACA1C,KAAA0C,IAAA1C,KAAA2C,OAEAD,GAIAE,QAAA,IACAC,KAAA,IACAF,OAAA,EACAG,KAAA,IACAC,QAAA;;;;GC3BA,MAAAC,EAAAC,OAAA,eACAC,EAAAD,OAAA,oBAYApD,GAAAsD,EAAAC,EAAAC,MACArD,KAAAsD,SAAAtD,KAAAmD,EAAAC,EAAAC,IAMAxD,KAAAsD,EAAAC,EAAAC,GAUArD,KAAAsD,SAAAtD,KAAAmD,EATA,SAAAA,KAAAI,GAEAJ,EAAAjB,MAGAkB,EAAAvH,KAAAmE,KAAAmD,KAAAI,IAIAF,IAMAxD,IAAAsD,EAAAC,GACApD,KAAAwD,cAAAxD,KAAAmD,EAAAC,IAMAvD,SAAA4D,EAAAN,EAAAC,EAAAC,MACA,IAAAK,EAAAC,EAgBA3D,KAAAgD,KACAhD,KAAAgD,OAGA,MAAAY,EAAA5D,KAAAgD,GAEAa,EAAAJ,IACAK,EAAAL,GAGA,MAAAM,EAAAF,EAAAJ,IAEAC,EAAAE,EAAAG,MACAL,EAAAE,EAAAG,IACAN,QAAAA,EACAO,gBAIAL,EAAAD,EAAAM,UAAAb,MACAQ,EAAAD,EAAAM,UAAAb,OAGAQ,EAAAM,KAAAb,GAiYA,SAAAzC,EAAAuD,GACA,MAAAC,EAAAC,EAAAzD,GAGA,GAAAwD,EAAAD,GAEA,OASA,IAAAjI,EAAAiI,EAEAG,EAAA,KAGA,MAAAC,KAKA,KAAA,KAAArI,IACAkI,EAAAlI,IAQAkI,EAAAlI,IA5CA+H,aACAO,gBA6CAD,EAAAL,KAAAE,EAAAlI,IAGAoI,GACAF,EAAAlI,GAAAsI,YAAAN,KAAAI,GAGAA,EAAApI,EAEAA,EAAAA,EAAAuI,OAAA,EAAAvI,EAAAwI,YAAA,MAGA,GAAA,KAAAxI,EAAA,CAKA,IAAA,MAAAyI,KAAAJ,EACAI,EAAAV,UAAAG,EAAAlI,GAAA+H,UAAAW,QAIAR,EAAAlI,GAAAsI,YAAAN,KAAAI,IAxbAO,CAAAnB,EAAAN,GACA,MAAA0B,EAAAC,EAAArB,EAAAN,GACAT,EAAAD,EAAAjG,IAAA6G,EAAAX,UAEAqC,GACA3B,SAAAA,EACAV,SAAAA,GAIA,IAAA,MAAAsB,KAAAa,EAAA,CAEA,IAAAG,GAAA,EAEA,IAAA,IAAAtJ,EAAA,EAAmBA,EAAAsI,EAAAiB,OAAsBvJ,IACzC,GAAAsI,EAAAtI,GAAAgH,SAAAA,EAAA,CACAsB,EAAAkB,OAAAxJ,EAAA,EAAAqJ,GACAC,GAAA,EAEA,MAKAA,GACAhB,EAAAC,KAAAc,KAQAlF,cAAA4D,EAAAN,EAAAC,GACA,MAAAQ,EAAA5D,KAAAgD,GACA,IAAAe,EAAAN,GAAAI,EAAAJ,GACA,MAAAC,EAAAE,GAAAG,GAAAH,EAAAG,GACAJ,EAAAD,GAAAP,GAAAO,EAAAM,UAAAb,GAGA,MAAAS,GAAAH,IAAAC,GAAAP,IAAAQ,GAKA,GAAAP,EACA+B,EAAA1B,EAAAN,EAAAC,QAGA,GAAAO,EAAA,CACA,KAAAP,EAAAO,EAAAlD,OACA0E,EAAA1B,EAAAN,EAAAC,UAGAM,EAAAM,UAAAb,QAGA,GAAAO,EAAA,CACA,IAAAP,KAAAO,EAAAM,UACAhE,KAAAwD,cAAAC,EAAAN,UAEAS,EAAAG,OAGA,CACA,IAAAA,KAAAH,EACA5D,KAAAwD,cAAAI,EAAAG,GAAAN,gBAEAzD,KAAAgD,KAOAnD,KAAAuF,KAAA7B,GACA,MAAA8B,EAAAD,aAAArD,EAAAqD,EAAA,IAAArD,EAAA/B,KAAAoF,GACAjC,EAAAkC,EAAApJ,KACA,IAAA+H,EAsYA,SAAAsB,EAAA3E,EAAAuD,GACA,IAAAf,EAEA,IAAAxC,EAAA4E,WAAApC,EAAAxC,EAAA4E,QAAArB,MAAAf,EAAAa,UAAAiB,OAGA,OAAAf,EAAAsB,QAAA,MAAA,EAEAF,EAAA3E,EAAAuD,EAAAM,OAAA,EAAAN,EAAAO,YAAA,OAGA,KAIA,OAAAtB,EAAAa,UArZAsB,CAAAtF,KAAAmD,GAMA,GAHAkC,EAAArD,KAAAiC,KAAAjE,MAGAgE,EAAA,CAEA,MAAAyB,GAAAJ,KAAA9B,GAOAS,EAAA0B,MAAAC,KAAA3B,GAEA,IAAA,IAAAtI,EAAA,EAAmBA,EAAAsI,EAAAiB,SACnBjB,EAAAtI,GAAA0H,SAAAwC,MAAA5F,KAAAyF,GAGAJ,EAAAnD,IAAAJ,gBAEAuD,EAAAnD,IAAAJ,OAEAqD,EAAAnF,KAAAmD,EAAAa,EAAAtI,GAAA0H,YAIAiC,EAAApD,KAAAH,QAZyCpG,MAmBzC,GAAAsE,KAAA6F,aAAA,CACA,MAAAC,EAAA9F,KAAA6F,aAAArJ,IAAA2G,GACA4C,EAAA/F,KAAA6F,aAAArJ,IAAA,KAEAsJ,GACAE,EAAAF,EAAAT,EAAA9B,GAGAwC,GACAC,EAAAD,EAAAV,EAAA9B,GAIA,OAAA8B,EAAAY,QAMApG,YAAAsE,GACA,OACA+B,GAAA,CAAAzC,EAAA0C,KACAnG,KAAA6F,eACA7F,KAAA6F,aAAA,IAAAO,KAGA,IAAA,MAAAlC,KAAAC,EAAA,CACA,MAAA2B,EAAA9F,KAAA6F,aAAArJ,IAAA0H,GAEA4B,EAGAA,EAAAO,IAAA5C,EAAA0C,GAFAnG,KAAA6F,aAAAQ,IAAAnC,EAAA,IAAAkC,MAAA3C,EAAA0C,UAYAtG,eAAAsD,EAAAM,GACA,GAAAzD,KAAA6F,aAIA,GAAA1C,EAEG,GAAAM,EAEA,CACH,MAAAqC,EAAA9F,KAAA6F,aAAArJ,IAAA2G,GAEA2C,GACAA,EAAAQ,OAAA7C,QALAzD,KAAA6F,aAAAS,OAAAnD,QAFAnD,KAAA6F,aAAAU,UAkLA,SAAAzC,EAAAL,EAAA+C,GACA/C,EAAAP,KACAO,EAAAP,GAAAsD,GAAArE,KAUA,SAAA0B,EAAAJ,GACA,OAAAA,EAAAP,GAMA,SAAAkB,EAAAzD,GAOA,OANAA,EAAA4E,SACAnJ,OAAAC,eAAAsE,EAAA,WACAjE,WAIAiE,EAAA4E,QAiFA,SAAAT,EAAAnE,EAAAuD,GACA,MAAAuC,EAAArC,EAAAzD,GAAAuD,GAEA,IAAAuC,EACA,SAGA,IAAAC,GAAAD,EAAAzC,WAEA,IAAA,IAAAtI,EAAA,EAAiBA,EAAA+K,EAAAlC,YAAAU,OAAkCvJ,IAAA,CACnD,MAAAiL,EAAA7B,EAAAnE,EAAA8F,EAAAlC,YAAA7I,IAEAgL,EAAAA,EAAAE,OAAAD,GAGA,OAAAD,EA8BA,SAAAV,EAAAF,EAAAT,EAAAwB,GACA,IAAA,IAAApD,EAAAxH,KAAA6J,EAAA,CACA7J,EAEG,mBAAAA,IACHA,EAAAA,EAAAoJ,EAAApJ,OAFAA,EAAAoJ,EAAApJ,KAKA,MAAA6K,EAAA,IAAA/E,EAAAsD,EAAA1E,OAAA1E,GAEA6K,EAAA9E,SAAAqD,EAAArD,MAEAyB,EAAAsD,KAAAD,KAAAD,IASA,SAAA1B,EAAA1B,EAAAN,EAAAC,GACA,MAAAyB,EAAAC,EAAArB,EAAAN,GAEA,IAAA,MAAAa,KAAAa,EACA,IAAA,IAAAnJ,EAAA,EAAkBA,EAAAsI,EAAAiB,OAAsBvJ,IACxCsI,EAAAtI,GAAA0H,UAAAA,IAEAY,EAAAkB,OAAAxJ,EAAA,GACAA;;;;GC5kBA,SAAAsL,EAAAC,KAAAC,GACAA,EAAApG,QAAAqG,IACA/K,OAAAgL,oBAAAD,GAAAP,OAAAxK,OAAAiL,sBAAAF,IACArG,QAAAC,IACA,GAAAA,KAAAkG,EAAAlK,UACA,OAGA,MAAAuK,EAAAlL,OAAAmL,yBAAAJ,EAAApG,GACAuG,EAAA/K,YAAA,EAEAH,OAAAC,eAAA4K,EAAAlK,UAAAgE,EAAAuG,OChCA,IAAAE,EAJA,WACAxH,KAAAyH,aC4BA,IAAAC,EAJA,SAAAhL,EAAAiL,GACA,OAAAjL,IAAAiL,GAAAjL,GAAAA,GAAAiL,GAAAA,GCbA,IAAAC,EAVA,SAAAC,EAAA9G,GAEA,IADA,IAAAkE,EAAA4C,EAAA5C,OACAA,KACA,GAAAyC,EAAAG,EAAA5C,GAAA,GAAAlE,GACA,OAAAkE,EAGA,OAAA,GCXA6C,EAHApC,MAAA3I,UAGAmI,OA2BA,IAAA6C,EAhBA,SAAAhH,GACA,IAAAK,EAAApB,KAAAyH,SACAO,EAAAJ,EAAAxG,EAAAL,GAEA,QAAAiH,EAAA,IAIAA,GADA5G,EAAA6D,OAAA,EAEA7D,EAAAX,MAEAqH,EAAAjM,KAAAuF,EAAA4G,EAAA,GAEA,KCZA,IAAAC,EAPA,SAAAlH,GACA,IAAAK,EAAApB,KAAAyH,SACAO,EAAAJ,EAAAxG,EAAAL,GAEA,OAAAiH,EAAA,OAAAzK,EAAA6D,EAAA4G,GAAA,ICAA,IAAAE,EAJA,SAAAnH,GACA,OAAA6G,EAAA5H,KAAAyH,SAAA1G,IAAA,GCYA,IAAAoH,EAZA,SAAApH,EAAArE,GACA,IAAA0E,EAAApB,KAAAyH,SACAO,EAAAJ,EAAAxG,EAAAL,GAOA,OALAiH,EAAA,EACA5G,EAAA6C,MAAAlD,EAAArE,IAEA0E,EAAA4G,GAAA,GAAAtL,EAEAsD,MCRA,SAAAoI,EAAAC,GACA,IAAAL,GAAA,EACA/C,EAAAoD,EAAAA,EAAApD,OAAA,EAGA,IADAjF,KAAAuG,UACAyB,EAAA/C,GAAA,CACA,IAAAqD,EAAAD,EAAAL,GACAhI,KAAAqG,IAAAiC,EAAA,GAAAA,EAAA,KAKAF,EAAArL,UAAAwJ,MAAAiB,EACAY,EAAArL,UAAA,OAAAgL,EACAK,EAAArL,UAAAP,IAAAyL,EACAG,EAAArL,UAAAwL,IAAAL,EACAE,EAAArL,UAAAsJ,IAAA8B,EAEA,IAAAK,EAAA,EClBA,IAAAC,EAJA,WACAzI,KAAAyH,SAAA,IAAAe,GCGA,IAAAE,EAJA,SAAA3H,GACA,OAAAf,KAAAyH,SAAA,OAAA1G,ICGA,IAAA4H,EAJA,SAAA5H,GACA,OAAAf,KAAAyH,SAAAjL,IAAAuE,ICGA,IAAA6H,EAJA,SAAA7H,GACA,OAAAf,KAAAyH,SAAAc,IAAAxH,ICoBA,IAAA8H,EALA,SAAAnM,GACA,IAAAoM,SAAApM,EACA,QAAAA,IAAA,UAAAoM,GAAA,YAAAA,ICxBAC,EAAA,oBACAC,EAAA,6BAUAC,EAPA7M,OAAAW,UAOAgC,SA4BA,IAAAmK,EARA,SAAAxM,GAIA,IAAAyM,EAAAN,EAAAnM,GAAAuM,EAAApN,KAAAa,GAAA,GACA,OAAAyM,GAAAJ,GAAAI,GAAAH,GCtCAI,EAAApL,SAAAjB,UAAAgC,SAqBA,IAAAsK,EAZA,SAAAC,GACA,GAAA,MAAAA,EAAA,CACA,IACA,OAAAF,EAAAvN,KAAAyN,GACK,MAAAtK,IACL,IACA,OAAAsK,EAAA,GACK,MAAAtK,KAEL,MAAA,ICPAuK,EAAA,8BAGAC,GAAApN,OAAAW,UAGA0M,GAAAzL,SAAAjB,UAAAgC,SAGA2K,GAAAF,GAAAxM,eAGA2M,GAAAC,OAAA,IACAH,GAAA5N,KAAA6N,IAAAG,QAhBA,sBAgBA,QACAA,QAAA,yDAAA,SAAA,KA6BA,IAAAC,GARA,SAAApN,GACA,QAAAmM,EAAAnM,KAGAwM,EAAAxM,IAAAmC,EAAAnC,GAAAiN,GAAAJ,GACAQ,KAAAV,EAAA3M,KCrCA,IAAAsN,GALA,SAAAnN,EAAAkE,GACA,IAAArE,EAAAG,EAAAkE,GACA,OAAA+I,GAAApN,GAAAA,OAAAa,GCPA0M,GAFAD,GAAA5N,OAAA,UCUA,IAAA8N,GAJA,WACAlK,KAAAyH,SAAAwC,GAAAA,GAAA,UCIA,IAAAE,GAJA,SAAApJ,GACA,OAAAf,KAAAuI,IAAAxH,WAAAf,KAAAyH,SAAA1G,ICRAqJ,GAAA,4BAMAC,GAHAjO,OAAAW,UAGAC,eAoBA,IAAAsN,GATA,SAAAvJ,GACA,IAAAK,EAAApB,KAAAyH,SACA,GAAAwC,GAAA,CACA,IAAAnL,EAAAsC,EAAAL,GACA,OAAAjC,IAAAsL,QAAA7M,EAAAuB,EAEA,OAAAuL,GAAAxO,KAAAuF,EAAAL,GAAAK,EAAAL,QAAAxD,GCpBAgN,GAHAnO,OAAAW,UAGAC,eAgBA,IAAAwN,GALA,SAAAzJ,GACA,IAAAK,EAAApB,KAAAyH,SACA,OAAAwC,QAAA1M,IAAA6D,EAAAL,GAAAwJ,GAAA1O,KAAAuF,EAAAL,IChBA0J,GAAA,4BAkBA,IAAAC,GANA,SAAA3J,EAAArE,GAGA,OAFAsD,KAAAyH,SACA1G,GAAAkJ,SAAA1M,IAAAb,EAAA+N,GAAA/N,EACAsD,MCLA,SAAA2K,GAAAtC,GACA,IAAAL,GAAA,EACA/C,EAAAoD,EAAAA,EAAApD,OAAA,EAGA,IADAjF,KAAAuG,UACAyB,EAAA/C,GAAA,CACA,IAAAqD,EAAAD,EAAAL,GACAhI,KAAAqG,IAAAiC,EAAA,GAAAA,EAAA,KAKAqC,GAAA5N,UAAAwJ,MAAA2D,GACAS,GAAA5N,UAAA,OAAAoN,GACAQ,GAAA5N,UAAAP,IAAA8N,GACAK,GAAA5N,UAAAwL,IAAAiC,GACAG,GAAA5N,UAAAsJ,IAAAqE,GAEA,IAAAE,GAAA,WCzBAC,GAFAb,GAAAc,GAAA,EAAA,OCeA,IAAAC,GARA,WACA/K,KAAAyH,UACAuD,KAAA,IAAAJ,GACAK,IAAA,IAAAJ,IAAArC,GACA0C,OAAA,IAAAN,KCDA,IAAAO,GAPA,SAAAzO,GACA,IAAAoM,SAAApM,EACA,MAAA,UAAAoM,GAAA,UAAAA,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAApM,EACA,OAAAA,GCMA,IAAA0O,GAPA,SAAAH,EAAAlK,GACA,IAAAK,EAAA6J,EAAAxD,SACA,OAAA0D,GAAApK,GACAK,EAAA,iBAAAL,EAAA,SAAA,QACAK,EAAA6J,KCCA,IAAAI,GAJA,SAAAtK,GACA,OAAAqK,GAAApL,KAAAe,GAAA,OAAAA,ICGA,IAAAuK,GAJA,SAAAvK,GACA,OAAAqK,GAAApL,KAAAe,GAAAvE,IAAAuE,ICGA,IAAAwK,GAJA,SAAAxK,GACA,OAAAqK,GAAApL,KAAAe,GAAAwH,IAAAxH,ICKA,IAAAyK,GALA,SAAAzK,EAAArE,GAEA,OADA0O,GAAApL,KAAAe,GAAAsF,IAAAtF,EAAArE,GACAsD,MCDA,SAAAyL,GAAApD,GACA,IAAAL,GAAA,EACA/C,EAAAoD,EAAAA,EAAApD,OAAA,EAGA,IADAjF,KAAAuG,UACAyB,EAAA/C,GAAA,CACA,IAAAqD,EAAAD,EAAAL,GACAhI,KAAAqG,IAAAiC,EAAA,GAAAA,EAAA,KAKAmD,GAAA1O,UAAAwJ,MAAAwE,GACAU,GAAA1O,UAAA,OAAAsO,GACAI,GAAA1O,UAAAP,IAAA8O,GACAG,GAAA1O,UAAAwL,IAAAgD,GACAE,GAAA1O,UAAAsJ,IAAAmF,GAEA,IAAAE,GAAA,GC3BAC,GAAA,IAqBA,IAAAC,GATA,SAAA7K,EAAArE,GACA,IAAAmP,EAAA7L,KAAAyH,SAKA,OAJAoE,aAAArD,GAAAqD,EAAApE,SAAAxC,QAAA0G,KACAE,EAAA7L,KAAAyH,SAAA,IAAAiE,GAAAG,EAAApE,WAEAoE,EAAAxF,IAAAtF,EAAArE,GACAsD,MCRA,SAAA8L,GAAAzD,GACArI,KAAAyH,SAAA,IAAAe,EAAAH,GAIAyD,GAAA/O,UAAAwJ,MAAAkC,EACAqD,GAAA/O,UAAA,OAAA2L,EACAoD,GAAA/O,UAAAP,IAAAmM,EACAmD,GAAA/O,UAAAwL,IAAAK,EACAkD,GAAA/O,UAAAsJ,IAAAuF,GAEA,IAAAG,GAAA,GCJA,IAAAC,GAZA,SAAAnE,EAAAoE,GAIA,IAHA,IAAAjE,GAAA,EACA/C,EAAA4C,EAAA5C,SAEA+C,EAAA/C,IACA,IAAAgH,EAAApE,EAAAG,GAAAA,EAAAH,KAIA,OAAAA,GCZAqE,GAHA9P,OAAAW,UAGAC,eAoBA,IAAAmP,GARA,SAAAtP,EAAAkE,EAAArE,GACA,IAAA0P,EAAAvP,EAAAkE,GACAmL,GAAArQ,KAAAgB,EAAAkE,IAAA2G,EAAA0E,EAAA1P,UACAa,IAAAb,GAAAqE,KAAAlE,KACAA,EAAAkE,GAAArE,ICQA,IAAA2P,GAlBA,SAAA1L,EAAA2L,EAAAzP,EAAA0P,GACA1P,IAAAA,MAKA,IAHA,IAAAmL,GAAA,EACA/C,EAAAqH,EAAArH,SAEA+C,EAAA/C,GAAA,CACA,IAAAlE,EAAAuL,EAAAtE,GAEAwE,EAAAD,EACAA,EAAA1P,EAAAkE,GAAAJ,EAAAI,GAAAA,EAAAlE,EAAA8D,GACAA,EAAAI,GAEAoL,GAAAtP,EAAAkE,EAAAyL,GAEA,OAAA3P,GCrBA4P,GAHArQ,OAAAW,UAGAC,eAkBA,IAAA0P,GARA,SAAA7P,EAAAkE,GAIA,OAAA0L,GAAA5Q,KAAAgB,EAAAkE,IACA,iBAAAlE,GAAAkE,KAAAlE,GAAA,OAAA+B,EAAA/B,ICpBA8P,GAAAvQ,OAAAyE,KAcA,IAAA+L,GAJA,SAAA/P,GACA,OAAA8P,GAAAvQ,OAAAS,KCOA,IAAAgQ,GAVA,SAAAlQ,EAAAsP,GAIA,IAHA,IAAAjE,GAAA,EACAlJ,EAAA4G,MAAA/I,KAEAqL,EAAArL,GACAmC,EAAAkJ,GAAAiE,EAAAjE,GAEA,OAAAlJ,GCHA,IAAAgO,GANA,SAAA/L,GACA,OAAA,SAAAlE,GACA,OAAA,MAAAA,OAAAU,EAAAV,EAAAkE,KCMAgM,GAFAD,GAAA,UCZAE,GAAA,iBAkCA,IAAAC,GALA,SAAAvQ,GACA,MAAA,iBAAAA,GACAA,GAAA,GAAAA,EAAA,GAAA,GAAAA,GAAAsQ,ICCA,IAAAE,GAJA,SAAAxQ,GACA,OAAA,MAAAA,GAAAuQ,GAAAF,GAAArQ,MAAAwM,EAAAxM,ICEA,IAAAyQ,GAJA,SAAAzQ,GACA,OAAAuC,EAAAvC,IAAAwQ,GAAAxQ,IC1BA0Q,GAAA,qBAGAC,GAAAjR,OAAAW,UAGAuQ,GAAAD,GAAArQ,eAOAuQ,GAAAF,GAAAtO,SAGAyO,GAAAH,GAAAI,qBA0BA,IAAAC,GANA,SAAAhR,GAEA,OAAAyQ,GAAAzQ,IAAA4Q,GAAAzR,KAAAa,EAAA,aACA8Q,GAAA3R,KAAAa,EAAA,WAAA6Q,GAAA1R,KAAAa,IAAA0Q,KCfAO,GAFAjI,MAAAkI,QCrBAC,GAAA,kBAUAC,GAPA1R,OAAAW,UAOAgC,SAyBA,IAAAgP,GALA,SAAArR,GACA,MAAA,iBAAAA,IACAiR,GAAAjR,IAAAuC,EAAAvC,IAAAoR,GAAAjS,KAAAa,IAAAmR,ICbA,IAAAG,GATA,SAAAnR,GACA,IAAAoI,EAAApI,EAAAA,EAAAoI,YAAA1H,EACA,OAAA0P,GAAAhI,KACA0I,GAAA9Q,IAAAkR,GAAAlR,IAAA6Q,GAAA7Q,IACAgQ,GAAA5H,EAAAgJ,QAEA,MCnBAC,GAAA,iBAGAC,GAAA,mBAiBA,IAAAC,GAPA,SAAA1R,EAAAuI,GAEA,SADAA,EAAA,MAAAA,EAAAiJ,GAAAjJ,KAEA,iBAAAvI,GAAAyR,GAAApE,KAAArN,KACAA,GAAA,GAAAA,EAAA,GAAA,GAAAA,EAAAuI,GCjBAoJ,GAAAjS,OAAAW,UAgBA,IAAAuR,GAPA,SAAA5R,GACA,IAAAgD,EAAAhD,GAAAA,EAAAiD,YAGA,OAAAjD,KAFA,mBAAAgD,GAAAA,EAAA3C,WAAAsR,KC2CA,IAAAE,GApBA,SAAA1R,GACA,IAAA2R,EAAAF,GAAAzR,GACA,IAAA2R,IAAAtB,GAAArQ,GACA,OAAA+P,GAAA/P,GAEA,IAAA4R,EAAAT,GAAAnR,GACA6R,IAAAD,EACA3P,EAAA2P,MACAxJ,EAAAnG,EAAAmG,OAEA,IAAA,IAAAlE,KAAAlE,GACA6P,GAAA7P,EAAAkE,IACA2N,IAAA,UAAA3N,GAAAqN,GAAArN,EAAAkE,KACAuJ,GAAA,eAAAzN,GACAjC,EAAAmF,KAAAlD,GAGA,OAAAjC,GCpCA,IAAA6P,GAJA,SAAA9R,EAAA8D,GACA,OAAA9D,GAAAwP,GAAA1L,EAAA4N,GAAA5N,GAAA9D,ICIA,IAAA+R,GATA,SAAAC,EAAAC,GACA,GAAAA,EACA,OAAAD,EAAAlK,QAEA,IAAA7F,EAAA,IAAA+P,EAAAlP,YAAAkP,EAAA5J,QAEA,OADA4J,EAAAE,KAAAjQ,GACAA,GCKA,IAAAkQ,GAXA,SAAArO,EAAAkH,GACA,IAAAG,GAAA,EACA/C,EAAAtE,EAAAsE,OAGA,IADA4C,IAAAA,EAAAnC,MAAAT,MACA+C,EAAA/C,GACA4C,EAAAG,GAAArH,EAAAqH,GAEA,OAAAH,GCfAR,GAAAjL,OAAAiL,sBASA,SAAA4H,GAAApS,GAGA,OAAAwK,GAAAjL,OAAAS,IAIAwK,KACA4H,GAAA,WACA,WAIA,IAAAC,GAAA,GCRA,IAAAC,GAJA,SAAAxO,EAAA9D,GACA,OAAAwP,GAAA1L,EAAAuO,GAAAvO,GAAA9D,ICOA,IAAAuS,GAXA,SAAAvH,EAAAwH,GAKA,IAJA,IAAArH,GAAA,EACA/C,EAAAoK,EAAApK,OACAqK,EAAAzH,EAAA5C,SAEA+C,EAAA/C,GACA4C,EAAAyH,EAAAtH,GAAAqH,EAAArH,GAEA,OAAAH,GCGA,IAAA0H,GALA,SAAA1S,EAAA2S,EAAAC,GACA,IAAA3Q,EAAA0Q,EAAA3S,GACA,OAAA8Q,GAAA9Q,GAAAiC,EAAAsQ,GAAAtQ,EAAA2Q,EAAA5S,KCDA,IAAA6S,GAJA,SAAA7S,GACA,OAAA0S,GAAA1S,EAAA0R,GAAAW,KCNAS,GAFA3F,GAAAc,GAAA,EAAA,YCEA8E,GAFA5F,GAAAc,GAAA,EAAA,WCEA+E,GAFA7F,GAAAc,GAAA,EAAA,OCEAgF,GAFA9F,GAAAc,GAAA,EAAA,WCoBAiF,GAPA3T,OAAAW,UAOAgC,SAGAiR,GAAA3G,EAAAsG,IACAM,GAAA5G,EAAAwB,IACAqF,GAAA7G,EAAAuG,IACAO,GAAA9G,EAAAwG,IACAO,GAAA/G,EAAAyG,IASA,SAAAO,GAAA3T,GACA,OAAAqT,GAAAlU,KAAAa,IAKAiT,IAhCA,qBAgCAU,GAAA,IAAAV,GAAA,IAAAW,YAAA,MACAzF,IAvCA,gBAuCAwF,GAAA,IAAAxF,KACA+E,IAtCA,oBAsCAS,GAAAT,GAAAW,YACAV,IAtCA,gBAsCAQ,GAAA,IAAAR,KACAC,IAtCA,oBAsCAO,GAAA,IAAAP,OACAO,GAAA,SAAA3T,GACA,IAAAoC,EAAAiR,GAAAlU,KAAAa,GACAgD,EA5CA,mBA4CAZ,EAAApC,EAAAiD,iBAAApC,EACAiT,EAAA9Q,EAAA2J,EAAA3J,QAAAnC,EAEA,GAAAiT,EACA,OAAAA,GACA,KAAAR,GAAA,MA5CA,oBA6CA,KAAAC,GAAA,MAnDA,eAoDA,KAAAC,GAAA,MAlDA,mBAmDA,KAAAC,GAAA,MAlDA,eAmDA,KAAAC,GAAA,MAlDA,mBAqDA,OAAAtR,IAIA,IAAA2R,GAAA,GCjEAC,GAHAtU,OAAAW,UAGAC,eAqBA,IAAA2T,GAZA,SAAA9I,GACA,IAAA5C,EAAA4C,EAAA5C,OACAnG,EAAA+I,EAAAlI,YAAAsF,GAOA,OAJAA,GAAA,iBAAA4C,EAAA,IAAA6I,GAAA7U,KAAAgM,EAAA,WACA/I,EAAAkJ,MAAAH,EAAAG,MACAlJ,EAAA8R,MAAA/I,EAAA+I,OAEA9R,GCjBA+R,GAFA/F,GAAA,EAAAgG,WCYA,IAAAC,GANA,SAAAC,GACA,IAAAlS,EAAA,IAAAkS,EAAArR,YAAAqR,EAAAC,YAEA,OADA,IAAAJ,GAAA/R,GAAAuH,IAAA,IAAAwK,GAAAG,IACAlS,GCGA,IAAAoS,GALA,SAAAC,EAAArC,GACA,IAAAD,EAAAC,EAAAiC,GAAAI,EAAAtC,QAAAsC,EAAAtC,OACA,OAAA,IAAAsC,EAAAxR,YAAAkP,EAAAsC,EAAAC,WAAAD,EAAAF,aCEA,IAAAI,GANA,SAAApG,EAAAqG,GAGA,OADArG,EAAA5E,IAAAiL,EAAA,GAAAA,EAAA,IACArG,GCcA,IAAAsG,GAbA,SAAA1J,EAAAoE,EAAAuF,EAAAC,GACA,IAAAzJ,GAAA,EACA/C,EAAA4C,EAAA5C,OAKA,IAHAwM,GAAAxM,IACAuM,EAAA3J,IAAAG,MAEAA,EAAA/C,GACAuM,EAAAvF,EAAAuF,EAAA3J,EAAAG,GAAAA,EAAAH,GAEA,OAAA2J,GCLA,IAAAE,GAVA,SAAAzG,GACA,IAAAjD,GAAA,EACAlJ,EAAA4G,MAAAuF,EAAA0G,MAKA,OAHA1G,EAAAnK,QAAA,SAAApE,EAAAqE,GACAjC,IAAAkJ,IAAAjH,EAAArE,KAEAoC,GCIA,IAAA8S,GALA,SAAA3G,EAAA6D,EAAA+C,GACA,IAAAhK,EAAAiH,EAAA+C,EAAAH,GAAAzG,IAAA,GAAAyG,GAAAzG,GACA,OAAAsG,GAAA1J,EAAAwJ,GAAA,IAAApG,EAAAtL,cCdAmS,GAAA,OAeA,IAAAC,GANA,SAAAC,GACA,IAAAlT,EAAA,IAAAkT,EAAArS,YAAAqS,EAAArR,OAAAmR,GAAAG,KAAAD,IAEA,OADAlT,EAAAoT,UAAAF,EAAAE,UACApT,GCAA,IAAAqT,GALA,SAAA9L,EAAA3J,GAEA,OADA2J,EAAA+L,IAAA1V,GACA2J,GCOA,IAAAgM,GAVA,SAAAhM,GACA,IAAA2B,GAAA,EACAlJ,EAAA4G,MAAAW,EAAAsL,MAKA,OAHAtL,EAAAvF,QAAA,SAAApE,GACAoC,IAAAkJ,GAAAtL,IAEAoC,GCIA,IAAAwT,GALA,SAAAjM,EAAAyI,EAAA+C,GACA,IAAAhK,EAAAiH,EAAA+C,EAAAQ,GAAAhM,IAAA,GAAAgM,GAAAhM,GACA,OAAAkL,GAAA1J,EAAAsK,GAAA,IAAA9L,EAAA1G,cCVA4S,GAFAzH,GAAA,EAAA7H,OCAAuP,GAAAD,GAAAA,GAAAxV,eAAAQ,EACAkV,GAAAD,GAAAA,GAAAE,aAAAnV,EAaA,IAAAoV,GAJA,SAAAC,GACA,OAAAH,GAAArW,OAAAqW,GAAA5W,KAAA+W,QCCA,IAAAC,GALA,SAAAC,EAAAhE,GACA,IAAAD,EAAAC,EAAAiC,GAAA+B,EAAAjE,QAAAiE,EAAAjE,OACA,OAAA,IAAAiE,EAAAnT,YAAAkP,EAAAiE,EAAA1B,WAAA0B,EAAA7N,SCHA8N,GAAA,mBACAC,GAAA,gBACAC,GAAA,eACAC,GAAA,kBACAC,GAAA,kBACAC,GAAA,eACAC,GAAA,kBACAC,GAAA,kBAEAC,GAAA,uBACAC,GAAA,oBACAC,GAAA,wBACAC,GAAA,wBACAC,GAAA,qBACAC,GAAA,sBACAC,GAAA,sBACAC,GAAA,sBACAC,GAAA,6BACAC,GAAA,uBACAC,GAAA,uBAmDA,IAAAC,GApCA,SAAArX,EAAAsM,EAAA0I,EAAA/C,GACA,IAAApP,EAAA7C,EAAA8C,YACA,OAAAwJ,GACA,KAAAoK,GACA,OAAAxC,GAAAlU,GAEA,KAAAkW,GACA,KAAAC,GACA,OAAA,IAAAtT,GAAA7C,GAEA,KAAA2W,GACA,OAAAtC,GAAArU,EAAAiS,GAEA,KAAA2E,GAAA,KAAAC,GACA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,GACA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,GAAA,KAAAC,GACA,OAAApB,GAAAhW,EAAAiS,GAEA,KAAAmE,GACA,OAAArB,GAAA/U,EAAAiS,EAAA+C,GAEA,KAAAqB,GACA,KAAAG,GACA,OAAA,IAAA3T,EAAA7C,GAEA,KAAAsW,GACA,OAAApB,GAAAlV,GAEA,KAAAuW,GACA,OAAAd,GAAAzV,EAAAiS,EAAA+C,GAEA,KAAAyB,GACA,OAAAX,GAAA9V,KCxEAsX,GAAA/X,OAAAgC,OAcA,IAAAgW,GAJA,SAAA3U,GACA,OAAAoJ,EAAApJ,GAAA0U,GAAA1U,OCGA,IAAA4U,GANA,SAAAxX,GACA,MAAA,mBAAAA,EAAA8C,aAAA2O,GAAAzR,MACAuX,GAAAxV,EAAA/B,cCMAyX,GAAA,qBAKAC,GAAA,oBACAC,GAAA,6BAGAC,GAAA,kBAoBAC,MACAA,GAAAJ,IAAAI,GA7BA,kBA8BAA,GAfA,wBAeAA,GAdA,qBAeAA,GA9BA,oBA8BAA,GA7BA,iBA8BAA,GAfA,yBAeAA,GAdA,yBAeAA,GAdA,sBAcAA,GAbA,uBAcAA,GAbA,uBAaAA,GA5BA,gBA6BAA,GA5BA,mBA4BAA,GAAAD,IACAC,GA3BA,mBA2BAA,GA1BA,gBA2BAA,GA1BA,mBA0BAA,GAzBA,mBA0BAA,GAhBA,uBAgBAA,GAfA,8BAgBAA,GAfA,wBAeAA,GAdA,yBAcA,EACAA,GArCA,kBAqCAA,GAAAH,IACAG,GA5BA,qBA4BA,EA6EA,IAAAC,GA7DA,SAAAC,EAAAlY,EAAAoS,EAAA+F,EAAAtI,EAAAxL,EAAAlE,EAAAiY,GACA,IAAAhW,EAIA,GAHAyN,IACAzN,EAAAjC,EAAA0P,EAAA7P,EAAAqE,EAAAlE,EAAAiY,GAAAvI,EAAA7P,SAEAa,IAAAuB,EACA,OAAAA,EAEA,IAAA+J,EAAAnM,GACA,OAAAA,EAEA,IAAAqY,EAAApH,GAAAjR,GACA,GAAAqY,GAEA,GADAjW,EAAA6R,GAAAjU,IACAoS,EACA,OAAAE,GAAAtS,EAAAoC,OAEG,CACH,IAAAqK,EAAAsH,GAAA/T,GACAsY,EAAA7L,GAAAoL,IAAApL,GAAAqL,GAEA,GAAApY,OAAAoC,GAAA,EAAApC,CAAAM,GACA,OAAAkS,GAAAlS,EAAAoS,GAEA,GAAA3F,GAAAsL,IAAAtL,GAAAmL,IAAAU,IAAAnY,EAAA,CACA,GAAAgC,EAAAnC,GACA,OAAAG,EAAAH,KAGA,GADAoC,EAAAuV,GAAAW,KAA0CtY,IAC1CoS,EACA,OAAAK,GAAAzS,EAAAiS,GAAA7P,EAAApC,QAEK,CACL,IAAAgY,GAAAvL,GACA,OAAAtM,EAAAH,KAEAoC,EAAAoV,GAAAxX,EAAAyM,EAAAyL,EAAA9F,IAIAgG,IAAAA,EAAA,IAAA/I,IACA,IAAAkJ,EAAAH,EAAAtY,IAAAE,GACA,GAAAuY,EACA,OAAAA,EAIA,GAFAH,EAAAzO,IAAA3J,EAAAoC,IAEAiW,EACA,IAAAzI,EAAAuI,EAAAnF,GAAAhT,GAAA6R,GAAA7R,GAUA,OAPAsP,GAAAM,GAAA5P,EAAA,SAAAwY,EAAAnU,GACAuL,IAEA4I,EAAAxY,EADAqE,EAAAmU,IAGA/I,GAAArN,EAAAiC,EAAA6T,EAAAM,EAAApG,EAAA+F,EAAAtI,EAAAxL,EAAArE,EAAAoY,MAEAhW,GCvGA,IAAAqW,GAJA,SAAAzY,GACA,OAAAiY,GAAAjY,GAAA,GAAA;;;;SCVA0Y,GAMAvV,cAOAG,KAAAqV,OAAA,KAYArN,YACA,IAAAsN,EAEA,IAAAtV,KAAAqV,OACA,OAAA,KAIA,IAAA,IAAAC,EAAAtV,KAAAqV,OAAAE,cAAAvV,OAMA,MAAA,IAAAiB,EAAA,gFAGA,OAAAqU,EASAE,kBACA,MAAAxN,EAAAhI,KAAAgI,MAEA,OAAA,OAAAA,GAAAhI,KAAAqV,OAAAI,SAAAzN,EAAA,IAAA,KASA0N,sBACA,MAAA1N,EAAAhI,KAAAgI,MAEA,OAAA,OAAAA,GAAAhI,KAAAqV,OAAAI,SAAAzN,EAAA,IAAA,KASAhN,WACA,IAAAA,EAAAgF,KAEA,KAAAhF,EAAAqa,QACAra,EAAAA,EAAAqa,OAGA,OAAAra,EAUA2a,eAEA,OAAA3V,KAAAqV,kBAAAD,GACApV,KAAAqV,OAAAM,SAEA,KAaA9V,aAAAwD,GAA0BuS,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAAT,EAAAhS,EAAAuS,YAAA5V,KAAAA,KAAAqV,OAEA,KAAAA,GACAS,EAAAzS,EAAAwS,YAAA,OAAA,WAAAR,GACAA,EAAAA,EAAAA,OAGA,OAAAS,EAaAjW,kBAAA6E,EAAArB,MACA,MAAA0S,EAAA/V,KAAAgW,aAAA3S,GACA4S,EAAAvR,EAAAsR,aAAA3S,GAEA,IAAA3H,EAAA,EAEA,KAAAqa,EAAAra,IAAAua,EAAAva,IAAAqa,EAAAra,IACAA,IAGA,OAAA,IAAAA,EAAA,KAAAqa,EAAAra,EAAA,GAQAmE,UACAG,KAAAqV,OAAAa,gBAAAlW,KAAAgI,OAQAnI,YAAAiJ,EAAApE,GACA1E,KAAA+G,KAAA,UAAA+B,EAAApE,GAEA1E,KAAAqV,QACArV,KAAAqV,OAAAc,YAAArN,EAAApE,GASA7E,SACA,MAAAuW,EAAAjB,GAAAnV,MAKA,cAFAoW,EAAAf,OAEAe,GAqEApP,EAAAoO,GAAAiB;;;;;MC1PAC,WAAAlB,GAUAvV,YAAAuB,GACAI,QAUAxB,KAAAuW,UAAAnV,EAMAvB,GAAAiJ,GACA,MAAA,QAAAA,EAQA1H,WACA,OAAApB,KAAAuW,UAiBAC,YACA,OAAAxW,KAAAoB,KAUAoV,UAAApV,GACApB,KAAAmW,YAAA,OAAAnW,MAEAA,KAAAuW,UAAAnV,EAUAvB,UAAA4W,GACA,OAAAA,aAAAH,KAIAtW,OAAAyW,GAAAzW,KAAAoB,OAAAqV,EAAArV,MASAvB,SACA,OAAA,IAAAyW,GAAAtW,KAAAoB;;;;SC9EAsV,GAWA7W,YAAA8W,EAAAC,EAAA3R,GASA,GAFAjF,KAAA2W,SAAAA,EAEAC,EAAA,GAAAA,EAAAD,EAAAvV,KAAA6D,OAMA,MAAA,IAAAhE,EAAA,6EAGA,GAAAgE,EAAA,GAAA2R,EAAA3R,EAAA0R,EAAAvV,KAAA6D,OAMA,MAAA,IAAAhE,EAAA,iEASAjB,KAAAoB,KAAAuV,EAAAvV,KAAAoB,UAAAoU,EAAAA,EAAA3R,GAQAjF,KAAA4W,aAAAA,EAMAC,iBACA,OAAA7W,KAAAoB,KAAA6D,OAcA6R,gBACA,OAAA9W,KAAAoB,KAAA6D,SAAAjF,KAAA2W,SAAAvV,KAAA6D,OASAoQ,aACA,OAAArV,KAAA2W,SAAAtB,OASAra,WACA,OAAAgF,KAAA2W,SAAA3b,KAUA2a,eACA,OAAA3V,KAAA2W,SAAAhB,SAWA9V,GAAAiJ,GACA,MAAA,aAAAA,EAYAjJ,aAAAwD,GAA0BuS,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAAT,EAAAhS,EAAAuS,YAAA5V,KAAA2W,SAAA3W,KAAAqV,OAEA,KAAA,OAAAA,GACAS,EAAAzS,EAAAwS,YAAA,OAAA,WAAAR,GACAA,EAAAA,EAAAA,OAGA,OAAAS;;;;GCvJA,SAAAiB,GAAAC,GACA,MAAA/L,EAAA,IAAA7E,IAEA,IAAA,MAAArF,KAAAiW,EACA/L,EAAA5E,IAAAtF,EAAAiW,EAAAjW,IAGA,OAAAkK;;;;GCVA,SAAAgM,GAAAva,GACA,SAAAA,IAAAA,EAAAuG,OAAAiU;;;;SCHAC,GAOAtX,eAAAuX,GAKApX,KAAAqX,aAEArX,KAAAoS,OAAAgF,GAwCAvX,OAAAuX,GACA,IAAA,IAAAE,KAAAF,GAEA,iBAAAE,GAAAA,aAAA1N,UACA0N,GAAYrb,KAAAqb,IAIZA,EAAAC,QAAA,iBAAAD,EAAAC,OAAAD,EAAAC,iBAAA3N,UACA0N,EAAAC,OAAAD,EAAAC,QAGAvX,KAAAqX,UAAApT,KAAAqT,GAiCAzX,SAAA2X,GACA,IAAA,MAAAC,KAAAD,EACA,IAAA,MAAAJ,KAAApX,KAAAqX,UAAA,CACA,MAAA1V,EAAA+V,GAAAD,EAAAL,GAEA,GAAAzV,EACA,OACA6V,QAAAC,EACAL,QAAAA,EACAzV,MAAAA,GAMA,OAAA,KAaA9B,YAAA2X,GACA,MAAAG,KAEA,IAAA,MAAAF,KAAAD,EACA,IAAA,MAAAJ,KAAApX,KAAAqX,UAAA,CACA,MAAA1V,EAAA+V,GAAAD,EAAAL,GAEAzV,GACAgW,EAAA1T,MACAuT,QAAAC,EACAL,QAAAA,EACAzV,MAAAA,IAMA,OAAAgW,EAAA1S,OAAA,EAAA0S,EAAA,KASA9X,iBACA,GAAA,IAAAG,KAAAqX,UAAApS,OACA,OAAA,KAGA,MAAAmS,EAAApX,KAAAqX,UAAA,GACApb,EAAAmb,EAAAnb,KAEA,MAAA,mBAAAmb,IAAAnb,GAAAA,aAAA2N,OAAA,KAAA3N,GAUA,SAAAyb,GAAAF,EAAAJ,GAEA,GAAA,mBAAAA,EACA,OAAAA,EAAAI,GAGA,MAAA7V,KAEA,OAAAyV,EAAAnb,OACA0F,EAAA1F,KA0CA,SAAAmb,EAAAnb,GAEA,GAAAmb,aAAAxN,OACA,OAAAwN,EAAArN,KAAA9N,GAGA,OAAAmb,IAAAnb,EAhDA2b,CAAAR,EAAAnb,KAAAub,EAAAvb,OAEA0F,EAAA1F,MACA,KAKAmb,EAAAS,YACAlW,EAAAkW,UAgDA,SAAAC,EAAAN,GACA,MAAA7V,KAEA,IAAA,MAAA1F,KAAA6b,EAAA,CACA,MAAAV,EAAAU,EAAA7b,GAEA,IAAAub,EAAAO,aAAA9b,GAiBA,OAAA,KAjBA,CACA,MAAA4b,EAAAL,EAAAQ,aAAA/b,GAEA,IAAA,IAAAmb,EACAzV,EAAAsC,KAAAhI,QACI,GAAAmb,aAAAxN,OAAA,CACJ,IAAAwN,EAAArN,KAAA8N,GAGA,OAAA,KAFAlW,EAAAsC,KAAAhI,OAII,CAAA,GAAA4b,IAAAT,EAGJ,OAAA,KAFAzV,EAAAsC,KAAAhI,KASA,OAAA0F,EA3EAsW,CAAAb,EAAAS,UAAAL,IAEA7V,EAAAkW,WACA,OAKAT,EAAAG,QACA5V,EAAA4V,MA0EA,SAAAO,EAAAN,GACA,MAAA7V,KAEA,IAAA,MAAAyV,KAAAU,EACA,GAAAV,aAAAxN,OAAA,CACA,MAAAsO,EAAAV,EAAAW,gBAEA,IAAA,MAAAlc,KAAAic,EACAd,EAAArN,KAAA9N,IACA0F,EAAAsC,KAAAhI,GAIA,GAAA,IAAA0F,EAAAsD,OACA,OAAA,SAEG,CAAA,IAAAuS,EAAAY,SAAAhB,GAGH,OAAA,KAFAzV,EAAAsC,KAAAmT,GAMA,OAAAzV,EAjGA0W,CAAAjB,EAAAG,MAAAC,IAEA7V,EAAA4V,YAMAH,EAAAkB,QACA3W,EAAA2W,MAiGA,SAAAR,EAAAN,GACA,MAAA7V,KAEA,IAAA,MAAA1F,KAAA6b,EAAA,CACA,MAAAV,EAAAU,EAAA7b,GAEA,IAAAub,EAAAe,SAAAtc,GAeA,OAAA,KAfA,CACA,MAAAqc,EAAAd,EAAAgB,SAAAvc,GAEA,GAAAmb,aAAAxN,OAAA,CACA,IAAAwN,EAAArN,KAAAuO,GAGA,OAAA,KAFA3W,EAAAsC,KAAAhI,OAII,CAAA,GAAAqc,IAAAlB,EAGJ,OAAA,KAFAzV,EAAAsC,KAAAhI,KASA,OAAA0F;;;;GA1HA8W,CAAArB,EAAAkB,MAAAd,IAEA7V,EAAA2W,SAKA3W,SCrMA+W,WAAAtD,GAuBAvV,YAAA5D,EAAA0c,EAAAta,GAuCA,GAtCAmD,QAQAxB,KAAA/D,KAAAA,EAQA+D,KAAA4Y,OAorBA,SAAAD,GAEAA,EADAnZ,EAAAmZ,GACA5B,GAAA4B,GAEA,IAAAvS,IAAAuS,GAGA,IAAA,MAAA5X,EAAArE,KAAAic,EACA,OAAAjc,EACAic,EAAArS,OAAAvF,GACG,iBAAArE,GACHic,EAAAtS,IAAAtF,EAAAkN,OAAAvR,IAIA,OAAAic,EAnsBAE,CAAAF,GAQA3Y,KAAA8Y,aAEAza,GACA2B,KAAA+Y,gBAAA,EAAA1a,GASA2B,KAAAgZ,SAAA,IAAAC,IAEAjZ,KAAA4Y,OAAArQ,IAAA,SAAA,CAEA,MAAA2Q,EAAAlZ,KAAA4Y,OAAApc,IAAA,SACA2c,GAAAnZ,KAAAgZ,SAAAE,GACAlZ,KAAA4Y,OAAAtS,OAAA,SASAtG,KAAAoZ,QAAA,IAAAhT,IAEApG,KAAA4Y,OAAArQ,IAAA,WAEA8Q,GAAArZ,KAAAoZ,QAAApZ,KAAA4Y,OAAApc,IAAA,UACAwD,KAAA4Y,OAAAtS,OAAA,UAUAtG,KAAAsZ,kBAAA,IAAAlT,IASAmT,iBACA,OAAAvZ,KAAA8Y,UAAA7T,OASAuU,cACA,OAAA,IAAAxZ,KAAA8Y,UAAA7T,OAYApF,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,WAAA6M,GAAA7M,GAAA+D,KAAA/D,KAFA,WAAA6M,GAAAA,GAAA9I,KAAA/D,KAYA4D,SAAAmI,GACA,OAAAhI,KAAA8Y,UAAA9Q,GASAnI,cAAA6E,GACA,OAAA1E,KAAA8Y,UAAAtT,QAAAd,GAQA7E,cACA,OAAAG,KAAA8Y,UAAA7V,OAAAiU,YAQArX,oBACAG,KAAAgZ,SAAArH,KAAA,SACA,SAGA3R,KAAAoZ,QAAAzH,KAAA,SACA,SAKA,IAAA,MAAA5Q,KAAAf,KAAA4Y,OAAA/X,aACAE,EAYAlB,uBACAG,KAAA4Y,OAAAvQ,UAEArI,KAAAgZ,SAAArH,KAAA,UACA,QAAA3R,KAAAgY,aAAA,WAGAhY,KAAAoZ,QAAAzH,KAAA,UACA,QAAA3R,KAAAgY,aAAA,WAUAnY,aAAAkB,GACA,GAAA,SAAAA,EACA,OAAAf,KAAAgZ,SAAArH,KAAA,MACA3R,KAAAgZ,UAAAS,KAAA,UAGA,EAGA,GAAA,SAAA1Y,EAcA,OAAAf,KAAA4Y,OAAApc,IAAAuE,GAbA,GAAAf,KAAAoZ,QAAAzH,KAAA,EAAA,CACA,IAAA+H,EAAA,GAEA,IAAA,MAAA5c,EAAAJ,KAAAsD,KAAAoZ,QACAM,MAAuB5c,KAAcJ,KAGrC,OAAAgd,GAeA7Z,aAAAkB,GACA,MAAA,SAAAA,EACAf,KAAAgZ,SAAArH,KAAA,EAGA,SAAA5Q,EACAf,KAAAoZ,QAAAzH,KAAA,EAGA3R,KAAA4Y,OAAArQ,IAAAxH,GAWAlB,UAAA8Z,GACA,KAAAA,aAAAjB,IACA,OAAA,EAIA,GAAA1Y,OAAA2Z,EACA,OAAA,EAIA,GAAA3Z,KAAA/D,MAAA0d,EAAA1d,KACA,OAAA,EAIA,GAAA+D,KAAA4Y,OAAAjH,OAAAgI,EAAAf,OAAAjH,MAAA3R,KAAAgZ,SAAArH,OAAAgI,EAAAX,SAAArH,MACA3R,KAAAoZ,QAAAzH,OAAAgI,EAAAP,QAAAzH,KACA,OAAA,EAIA,IAAA,MAAA5Q,EAAArE,KAAAsD,KAAA4Y,OACA,IAAAe,EAAAf,OAAArQ,IAAAxH,IAAA4Y,EAAAf,OAAApc,IAAAuE,KAAArE,EACA,OAAA,EAKA,IAAA,MAAAkd,KAAA5Z,KAAAgZ,SACA,IAAAW,EAAAX,SAAAzQ,IAAAqR,GACA,OAAA,EAKA,IAAA,MAAA9c,EAAAJ,KAAAsD,KAAAoZ,QACA,IAAAO,EAAAP,QAAA7Q,IAAAzL,IAAA6c,EAAAP,QAAA5c,IAAAM,KAAAJ,EACA,OAAA,EAIA,OAAA,EAYAmD,YAAA+Z,GACA,IAAA,MAAA3d,KAAA2d,EACA,IAAA5Z,KAAAgZ,SAAAzQ,IAAAtM,GACA,OAAA,EAIA,OAAA,EAQA4D,gBACA,OAAAG,KAAAgZ,SAAAnY,OAUAhB,SAAA/C,GACA,OAAAkD,KAAAoZ,QAAA5c,IAAAM,GAQA+C,gBACA,OAAAG,KAAAoZ,QAAAvY,OAYAhB,YAAA/C,GACA,IAAA,MAAAb,KAAAa,EACA,IAAAkD,KAAAoZ,QAAA7Q,IAAAtM,GACA,OAAA,EAIA,OAAA,EAYA4D,gBAAAiY,GACA,MAAA+B,EAAA,IAAA1C,MAAAW,GACA,IAAAzC,EAAArV,KAAAqV,OAEA,KAAAA,GAAA,CACA,GAAAwE,EAAAlY,MAAA0T,GACA,OAAAA,EAGAA,EAAAA,EAAAA,OAGA,OAAA,KASAxV,kBAAAkB,GACA,OAAAf,KAAAsZ,kBAAA9c,IAAAuE,GASAlB,6BACAG,KAAAsZ,kBAAAjR,UA0BAxI,cACA,MAAAqY,EAAAxS,MAAAC,KAAA3F,KAAAgZ,UAAAc,OAAAL,KAAA,KACAM,EAAArU,MAAAC,KAAA3F,KAAAoZ,SAAAnO,IAAAvP,MAAyDA,EAAA,MAAYA,EAAA,MAASoe,OAAAL,KAAA,KAC9EO,EAAAtU,MAAAC,KAAA3F,KAAA4Y,QAAA3N,IAAAvP,MAA4DA,EAAA,OAAaA,EAAA,OAASoe,OAAAL,KAAA,KAElF,OAAAzZ,KAAA/D,MACA,IAAAic,EAAA,cAAqCA,OACrC,IAAA6B,EAAA,cAAoCA,OACpC,IAAAC,EAAA,OAAiCA,KAWjCna,OAAAoa,GAAA,GACA,MAAAC,KAEA,GAAAD,EACA,IAAA,MAAAE,KAAAna,KAAAoa,cACAF,EAAAjW,KAAAkW,EAAAE,OAAAJ,IAKA,MAAAK,EAAA,IAAAta,KAAAL,YAAAK,KAAA/D,KAAA+D,KAAA4Y,OAAAsB,GAeA,OAXAI,EAAAtB,SAAA,IAAAC,IAAAjZ,KAAAgZ,UACAsB,EAAAlB,QAAA,IAAAhT,IAAApG,KAAAoZ,SAGAkB,EAAAhB,kBAAA,IAAAlT,IAAApG,KAAAsZ,mBAKAgB,EAAAC,gBAAAva,KAAAua,gBAEAD,EAaAza,gBAAA2a,GACA,OAAAxa,KAAA+Y,gBAAA/Y,KAAAuZ,WAAAiB,GAcA3a,gBAAAmI,EAAAwS,GACAxa,KAAAmW,YAAA,WAAAnW,MACA,IAAAya,EAAA,EAEA,MAAAC,EAwUA,SAAAA,GAEA,GAAA,iBAAAA,EACA,OAAA,IAAApE,GAAAoE,IAGAzD,GAAAyD,KACAA,GAAAA,IAIA,OAAAhV,MAAAC,KAAA+U,GACAzP,IAAAvG,GACA,iBAAAA,EACA,IAAA4R,GAAA5R,GAGAA,aAAAgS,GACA,IAAAJ,GAAA5R,EAAAtD,MAGAsD;;;;GA7VAiW,CAAAH,GAEA,IAAA,MAAA9V,KAAAgW,EAEA,OAAAhW,EAAA2Q,QACA3Q,EAAAkW,UAGAlW,EAAA2Q,OAAArV,KAEAA,KAAA8Y,UAAA5T,OAAA8C,EAAA,EAAAtD,GACAsD,IACAyS,IAGA,OAAAA,EAYA5a,gBAAAmI,EAAA6S,EAAA,GACA7a,KAAAmW,YAAA,WAAAnW,MAEA,IAAA,IAAAtE,EAAAsM,EAAsBtM,EAAAsM,EAAA6S,EAAqBnf,IAC3CsE,KAAA8Y,UAAApd,GAAA2Z,OAAA,KAGA,OAAArV,KAAA8Y,UAAA5T,OAAA8C,EAAA6S,GAYAhb,cAAAkB,EAAArE,GACAA,EAAAuR,OAAAvR,GAEAsD,KAAAmW,YAAA,aAAAnW,MAEA,SAAAe,EACAoY,GAAAnZ,KAAAgZ,SAAAtc,GACG,SAAAqE,EACHsY,GAAArZ,KAAAoZ,QAAA1c,GAEAsD,KAAA4Y,OAAAvS,IAAAtF,EAAArE,GAaAmD,iBAAAkB,GAIA,OAHAf,KAAAmW,YAAA,aAAAnW,MAGA,SAAAe,EACAf,KAAAgZ,SAAArH,KAAA,IACA3R,KAAAgZ,SAAAzS,SAEA,GAOA,SAAAxF,EACAf,KAAAoZ,QAAAzH,KAAA,IACA3R,KAAAoZ,QAAA7S,SAEA,GAOAvG,KAAA4Y,OAAAtS,OAAAvF,GAcAlB,UAAA+Z,GACA5Z,KAAAmW,YAAA,aAAAnW,OAEA4Z,EAAAlU,MAAAkI,QAAAgM,GAAAA,GAAAA,IACA9Y,QAAA7E,GAAA+D,KAAAgZ,SAAA5G,IAAAnW,IAaA4D,aAAA+Z,GACA5Z,KAAAmW,YAAA,aAAAnW,OAEA4Z,EAAAlU,MAAAkI,QAAAgM,GAAAA,GAAAA,IACA9Y,QAAA7E,GAAA+D,KAAAgZ,SAAA1S,OAAArK,IAkBA4D,UAAA/C,EAAAJ,GAGA,GAFAsD,KAAAmW,YAAA,aAAAnW,MAEAR,EAAA1C,GAAA,CACA,MAAA+D,EAAAzE,OAAAyE,KAAA/D,GAEA,IAAA,MAAAiE,KAAAF,EACAb,KAAAoZ,QAAA/S,IAAAtF,EAAAjE,EAAAiE,SAGAf,KAAAoZ,QAAA/S,IAAAvJ,EAAAJ,GAeAmD,aAAA/C,GACAkD,KAAAmW,YAAA,aAAAnW,OAEAlD,EAAA4I,MAAAkI,QAAA9Q,GAAAA,GAAAA,IACAgE,QAAA7E,GAAA+D,KAAAoZ,QAAA9S,OAAArK,IAYA4D,mBAAAkB,EAAArE,GACAsD,KAAAsZ,kBAAAjT,IAAAtF,EAAArE,GAWAmD,sBAAAkB,GACA,OAAAf,KAAAsZ,kBAAAhT,OAAAvF,IAwCA,SAAAsY,GAAAyB,EAAAC,GAEA,IAAAC,EAAA,KACAC,EAAA,EACAC,EAAA,EACAC,EAAA,KAKA,GAHAL,EAAAvU,QAGA,KAAAwU,EAAA,CAKA,KAAAA,EAAAK,OAAAL,EAAA9V,OAAA,KACA8V,GAAA,KAIA,IAAA,IAAArf,EAAA,EAAiBA,EAAAqf,EAAA9V,OAAyBvJ,IAAA,CAC1C,MAAA2f,EAAAN,EAAAK,OAAA1f,GAEA,GAAA,OAAAsf,EAEA,OAAAK,GACA,IAAA,IAGAF,IAGAA,EAAAJ,EAAAvW,OAAAyW,EAAAvf,EAAAuf,GAEAC,EAAAxf,EAAA,GAGA,MAEA,IAAA,IACA,IAAA,IAEAsf,EAAAK,EAEA,MAGA,IAAA,IAGA,MAAAC,EAAAP,EAAAvW,OAAA0W,EAAAxf,EAAAwf,GAEAC,GAEAL,EAAAzU,IAAA8U,EAAAI,OAAAD,EAAAC,QAGAJ,EAAA,KAGAF,EAAAvf,EAAA,OAIG2f,IAAAL,IAEHA,EAAA,QAUA,SAAA7B,GAAAqC,EAAAC,GACA,MAAAC,EAAAD,EAAAjb,MAAA,OACAgb,EAAAjV,QACAmV,EAAA5a,QAAA7E,GAAAuf,EAAApJ,IAAAnW,UClzBA0f,WAAAjD,GAQA7Y,YAAA5D,EAAA0c,EAAAta,GACAmD,MAAAvF,EAAA0c,EAAAta,GAQA2B,KAAAua,gBAAAqB,GAMA/b,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,oBAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,oBAAA6M,GAAAtH,MAAAqa,GAAA/S,IAUA,SAAA8S,KACA,IAAA,MAAAzB,KAAAna,KAAAoa,cAEA,IAAAD,EAAA0B,GAAA,aACA,OAAA,KAKA,OAAA7b,KAAAuZ,WC7DA,IAAAuC,GAdA,SAAApf,EAAAsL,EAAAnL,GACA,IAAAgM,EAAAhM,GACA,OAAA,EAEA,IAAAiM,SAAAd,EACA,SAAA,UAAAc,EACAoE,GAAArQ,IAAAuR,GAAApG,EAAAnL,EAAAoI,QACA,UAAA6D,GAAAd,KAAAnL,IAEA6K,EAAA7K,EAAAmL,GAAAtL,ICHA,IAAAqf,GAXA,SAAAzS,EAAA0S,EAAAzY,GAEA,OADAA,EAAA0B,QAEA,KAAA,EAAA,OAAAqE,EAAAzN,KAAAmgB,GACA,KAAA,EAAA,OAAA1S,EAAAzN,KAAAmgB,EAAAzY,EAAA,IACA,KAAA,EAAA,OAAA+F,EAAAzN,KAAAmgB,EAAAzY,EAAA,GAAAA,EAAA,IACA,KAAA,EAAA,OAAA+F,EAAAzN,KAAAmgB,EAAAzY,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,OAAA+F,EAAA1D,MAAAoW,EAAAzY,ICfA0Y,GAAA,kBAUAC,GAPA9f,OAAAW,UAOAgC,SAyBA,IAAAod,GALA,SAAAzf,GACA,MAAA,iBAAAA,GACAuC,EAAAvC,IAAAwf,GAAArgB,KAAAa,IAAAuf,IC9BAG,GAAA,IAGAC,GAAA,aAGAC,GAAA,qBAGAC,GAAA,aAGAC,GAAA,cAGAC,GAAAC,SA8CA,IAAAC,GArBA,SAAAjgB,GACA,GAAA,iBAAAA,EACA,OAAAA,EAEA,GAAAyf,GAAAzf,GACA,OAAA0f,GAEA,GAAAvT,EAAAnM,GAAA,CACA,IAAAiL,EAAAuB,EAAAxM,EAAAgW,SAAAhW,EAAAgW,UAAAhW,EACAA,EAAAmM,EAAAlB,GAAAA,EAAA,GAAAA,EAEA,GAAA,iBAAAjL,EACA,OAAA,IAAAA,EAAAA,GAAAA,EAEAA,EAAAA,EAAAmN,QAAAwS,GAAA,IACA,IAAAO,EAAAL,GAAAxS,KAAArN,GACA,OAAAkgB,GAAAJ,GAAAzS,KAAArN,GACA+f,GAAA/f,EAAAiI,MAAA,GAAAiY,EAAA,EAAA,GACAN,GAAAvS,KAAArN,GAAA0f,IAAA1f,GC5DAmgB,GAAA,EAAA,EACAC,GAAA,uBAqCA,IAAAC,GAZA,SAAArgB,GACA,OAAAA,GAGAA,EAAAigB,GAAAjgB,MACAmgB,IAAAngB,KAAAmgB,IACAngB,EAAA,GAAA,EAAA,GACAogB,GAEApgB,GAAAA,EAAAA,EAAA,EAPA,IAAAA,EAAAA,EAAA,GCIA,IAAAsgB,GAPA,SAAAtgB,GACA,IAAAoC,EAAAie,GAAArgB,GACAugB,EAAAne,EAAA,EAEA,OAAAA,GAAAA,EAAAme,EAAAne,EAAAme,EAAAne,EAAA,GC5BAoe,GAAA,sBAGAC,GAAA9a,KAAA+a,IAwDA,IAAAC,GA7BA,SAAA/T,EAAAgU,GACA,GAAA,mBAAAhU,EACA,MAAA,IAAAiU,UAAAL,IAGA,OADAI,EAAAH,QAAA5f,IAAA+f,EAAAhU,EAAArE,OAAA,EAAA+X,GAAAM,GAAA,GACA,WAMA,IALA,IAAA/Z,EAAAia,UACAxV,GAAA,EACA/C,EAAAkY,GAAA5Z,EAAA0B,OAAAqY,EAAA,GACAzV,EAAAnC,MAAAT,KAEA+C,EAAA/C,GACA4C,EAAAG,GAAAzE,EAAA+Z,EAAAtV,GAEA,OAAAsV,GACA,KAAA,EAAA,OAAAhU,EAAAzN,KAAAmE,KAAA6H,GACA,KAAA,EAAA,OAAAyB,EAAAzN,KAAAmE,KAAAuD,EAAA,GAAAsE,GACA,KAAA,EAAA,OAAAyB,EAAAzN,KAAAmE,KAAAuD,EAAA,GAAAA,EAAA,GAAAsE,GAEA,IAAA4V,EAAA/X,MAAA4X,EAAA,GAEA,IADAtV,GAAA,IACAA,EAAAsV,GACAG,EAAAzV,GAAAzE,EAAAyE,GAGA,OADAyV,EAAAH,GAAAzV,EACAkU,GAAAzS,EAAAtJ,KAAAyd,KCvBA,IAAAC,GA1BA,SAAAC,GACA,OAAAN,GAAA,SAAAxgB,EAAA+gB,GACA,IAAA5V,GAAA,EACA/C,EAAA2Y,EAAA3Y,OACAsH,EAAAtH,EAAA,EAAA2Y,EAAA3Y,EAAA,QAAA1H,EACAsgB,EAAA5Y,EAAA,EAAA2Y,EAAA,QAAArgB,EAWA,IATAgP,EAAAoR,EAAA1Y,OAAA,GAAA,mBAAAsH,GACAtH,IAAAsH,QACAhP,EAEAsgB,GAAA/B,GAAA8B,EAAA,GAAAA,EAAA,GAAAC,KACAtR,EAAAtH,EAAA,OAAA1H,EAAAgP,EACAtH,EAAA,GAEApI,EAAAT,OAAAS,KACAmL,EAAA/C,GAAA,CACA,IAAAtE,EAAAid,EAAA5V,GACArH,GACAgd,EAAA9gB,EAAA8D,EAAAqH,EAAAuE,GAGA,OAAA1P,KC3BAihB,GAFAhT,GAAA,EAAAiT,QCcA,IAAAC,GAVA,SAAA9G,GAIA,IAHA,IAAA9V,EACAtC,OAEAsC,EAAA8V,EAAA+G,QAAAC,MACApf,EAAAmF,KAAA7C,EAAA1E,OAEA,OAAAoC,GCVAqf,GAAA/hB,OAAAW,UAGAqhB,GAAAN,GAAAA,GAAAO,eAAA9gB,EACA+gB,GAAAH,GAAA1Q,qBAUA,SAAA8Q,GAAA1hB,GACAA,EAAA,MAAAA,EAAAA,EAAAT,OAAAS,GAEA,IAAAiC,KACA,IAAA,IAAAiC,KAAAlE,EACAiC,EAAAmF,KAAAlD,GAEA,OAAAjC,EAIAsf,KAAAE,GAAAziB,MAA6C6W,QAAA,GAAe,aAC5D6L,GAAA,SAAA1hB,GACA,OAAAmhB,GAAAI,GAAAvhB,MAIA,IAAA2hB,GAAA,GC1BAC,GAHAriB,OAAAW,UAGAC,eA6CA,IAAA0hB,GApBA,SAAA7hB,GAUA,IATA,IAAAmL,GAAA,EACAwG,EAAAF,GAAAzR,GACAyP,EAAAkS,GAAA3hB,GACA8hB,EAAArS,EAAArH,OACAwJ,EAAAT,GAAAnR,GACA6R,IAAAD,EACA3P,EAAA2P,MACAxJ,EAAAnG,EAAAmG,SAEA+C,EAAA2W,GAAA,CACA,IAAA5d,EAAAuL,EAAAtE,GACA0G,IAAA,UAAA3N,GAAAqN,GAAArN,EAAAkE,KACA,eAAAlE,IAAAyN,IAAAiQ,GAAA5iB,KAAAgB,EAAAkE,KACAjC,EAAAmF,KAAAlD,GAGA,OAAAjC,GCrCA8f,IANAxiB,OAAAW,UAGA0Q,qBAGA5R,MAAiD6W,QAAA,GAAe,WA2ChEmM,GAVAnB,GAAA,SAAA7gB,EAAA8D,GACA,GAAAie,IAAAtQ,GAAA3N,IAAAuM,GAAAvM,GACA0L,GAAA1L,EAAA+d,GAAA/d,GAAA9D,QAGA,IAAA,IAAAkE,KAAAJ,EACAwL,GAAAtP,EAAAkE,EAAAJ,EAAAI;;;;;ACvCA,MAAA+d,GAAA7b,OAAA,wBACA8b,GAAA9b,OAAA,oBACA+b,GAAA/b,OAAA,mBAUAgc,IAIApf,IAAA5D,EAAAS,GAEA,GAAAmM,EAAA5M,GAKA,YAJAG,OAAAyE,KAAA5E,GAAA6E,QAAAhE,IACAkD,KAAAqG,IAAAvJ,EAAAb,EAAAa,KACIkD,MAKJkf,GAAAlf,MAEA,MAAAmf,EAAAnf,KAAA8e,IAEA,GAAA7iB,KAAA+D,OAAAmf,EAAA5W,IAAAtM,GAgBA,MAAA,IAAAgF,EAAA,yEAGA7E,OAAAC,eAAA2D,KAAA/D,GACAM,YAAA,EACAD,cAAA,EAEAE,IAAA,IACA2iB,EAAA3iB,IAAAP,GAGA4D,IAAAnD,GACA,MAAA0iB,EAAAD,EAAA3iB,IAAAP,GAIAmjB,IAAA1iB,GAAAyiB,EAAA5W,IAAAtM,KACAkjB,EAAA9Y,IAAApK,EAAAS,GACAsD,KAAA+G,KAAA,UAAA9K,EAAAA,EAAAS,EAAA0iB,OAKApf,KAAA/D,GAAAS,GAMAmD,QAAAwf,GACA,IAAAA,EAAApa,SAAAqa,GAAAD,GAMA,MAAA,IAAApe,EAAA,qEAGA,GAAA,IAAAgY,IAAAoG,GAAA1N,OAAA0N,EAAApa,OAMA,MAAA,IAAAhE,EAAA,oEAGAie,GAAAlf,MAEA,MAAAuf,EAAAvf,KAAAgf,IAEAK,EAAAve,QAAAqa,IACA,GAAAoE,EAAAhX,IAAA4S,GAMA,MAAA,IAAAla,EAAA,2EAIA,MAAAue,EAAA,IAAApZ,IAsBA,OAhBAiZ,EAAAve,QAAA2e,IACA,MAAAC,GAAoB5iB,SAAA2iB,EAAAvZ,OAEpBqZ,EAAAlZ,IAAAoZ,EAAAC,GACAF,EAAAnZ,IAAAoZ,EAAAC,MAaAxZ,GAAAyZ,GACAC,OAAAC,GAEAC,YAAA9f,KACA+f,gBAAAV,EACAW,OACAC,UAAAT,IAOA3f,UAAAqgB,GAEA,KAAApB,MAAA9e,MACA,OAGA,MAAAuf,EAAAvf,KAAAgf,IACAmB,EAAAngB,KAAA+e,IAEA,GAAAmB,EAAAjb,OAAA,CACA,IAAAqa,GAAAY,GAMA,MAAA,IAAAjf,EAAA,mEAGAif,EAAApf,QAAAqa,IACA,MAAAuE,EAAAH,EAAA/iB,IAAA2e,GAGA,IAAAuE,EACA,OAGA,IAAAU,EAAAC,EAAAC,EAAAC,EAEAb,EAAAxZ,GAAApF,QAAAoF,IAEAka,EAAAla,EAAA,GACAma,EAAAna,EAAA,GACAoa,EAAAH,EAAA3jB,IAAA4jB,IACAG,EAAAD,EAAAD,IAEA/Z,OAAAoZ,GAEAa,EAAA5O,aACA2O,EAAAD,GAGAjkB,OAAAyE,KAAAyf,GAAArb,SACAkb,EAAA7Z,OAAA8Z,GACApgB,KAAAwD,cAAA4c,EAAA,aAIAb,EAAAjZ,OAAA6U,UAGAgF,EAAArf,QAAA,CAAA0e,EAAAgB,KACAxgB,KAAAwD,cAAAgd,EAAA,YAGAL,EAAA5Z,QACAgZ,EAAAhZ,SAOA1G,SAAA4gB,GACA,MAAAC,EAAA1gB,KAAAygB,GAEA,IAAAC,EAQA,MAAA,IAAAzf,EACA,mFACKpE,OAAAmD,KAAAygB,WAAAA,IAILzgB,KAAA2gB,GAAAF,EAAA,CAAAG,EAAArd,KACAqd,EAAA3a,OAAAya,EAAA9a,MAAA5F,KAAAuD,KAGAvD,KAAAygB,GAAA,YAAAld,GACA,OAAAvD,KAAA+G,KAAA0Z,EAAAld,MAKAsb,GAAAI,GAAA5I,GAEA,IAAAwK,GAAA,GAMA,SAAA3B,GAAA4B,GAEAhC,MAAAgC,IAQA1kB,OAAAC,eAAAykB,EAAAhC,IACApiB,MAAA,IAAA0J,MAgDAhK,OAAAC,eAAAykB,EAAA/B,IACAriB,MAAA,IAAA0J,MA+BAhK,OAAAC,eAAAykB,EAAA9B,IACAtiB,MAAA,IAAA0J,OAQA,SAAAuZ,MAAApc,GACA,MAAAwd,EA4HA,YAAAxd,GAEA,IAAAA,EAAA0B,OAMA,MAAA,IAAAhE,EAAA,sEAGA,MAAA+f,GAAiB9a,OACjB,IAAA+a,EAEA,mBAAA1d,EAAAA,EAAA0B,OAAA,KACA+b,EAAA5d,SAAAG,EAAA9C,OAcA,OAXA8C,EAAAzC,QAAA2e,IACA,GAAA,iBAAAA,EACAwB,EAAA9B,WAAAlb,KAAAwb,OACG,CAAA,GAAA,iBAAAA,EAIH,MAAA,IAAAxe,EAAA,sEAHAggB,GAAqBH,WAAArB,EAAAN,eACrB6B,EAAA9a,GAAAjC,KAAAgd,MAMAD,EAzJAE,IAAA3d,GACA4d,EAAAzb,MAAAC,KAAA3F,KAAAigB,UAAApf,QACAugB,EAAAD,EAAAlc,OAGA,IAAA8b,EAAA3d,UAAA2d,EAAA7a,GAAAjB,OAAA,EAMA,MAAA,IAAAhE,EAAA,6FAIA,GAAAmgB,EAAA,GAAAL,EAAA3d,SAMA,MAAA,IAAAnC,EAAA,yGAwPA,IAAA6f;;;;GArPAC,EAAA7a,GAAApF,QAAAoF,IAEA,GAAAA,EAAAiZ,WAAAla,QAAAiB,EAAAiZ,WAAAla,SAAAmc,EAMA,MAAA,IAAAngB,EAAA,8EAKAiF,EAAAiZ,WAAAla,SACAiB,EAAAiZ,WAAAnf,KAAA+f,mBAIA/f,KAAAggB,IAAAe,EAAA7a,GAGA6a,EAAA3d,WACApD,KAAAigB,UAAAzjB,IAAA2kB,EAAA,IAAA/d,SAAA2d,EAAA3d,UA+NA0d,EA5NA9gB,KAAA8f,YAAA9f,KAAAggB,IA6NAlf,QAAAoF,IACA,MAAAia,EAAAW,EAAA/B,IACA,IAAAS,EAIAW,EAAA3jB,IAAA0J,EAAA4a,aACAA,EAAAxd,SAAA4C,EAAA4a,WAAA,SAAA,CAAAF,EAAAzF,MACAqE,EAAAW,EAAA3jB,IAAA0J,EAAA4a,YAAA3F,KAKAqE,EAAA1e,QAAA4e,IACA2B,GAAAP,EAAApB,EAAA5iB,gBAnEA,SAAAwkB,GACA,IAAAjB,EAEAiB,EAAArB,UAAAnf,QAAA,CAAA4e,EAAAvE,KAIAmG,EAAAtB,IAAAlf,QAAAoF,IACAma,EAAAna,EAAAiZ,WAAAO,EAAAtc,SAAA,EAAAke,EAAAvB,gBAAAva,QAAA2V,IAEAuE,EAAAxZ,GAAAjC,MAAAiC,EAAA4a,WAAAT,IAjEA,SAAAS,EAAApB,EAAAU,EAAAmB,GACA,MAAApB,EAAAW,EAAA/B,IACAyC,EAAArB,EAAA3jB,IAAA4jB,GACAZ,EAAAgC,MAEAhC,EAAA+B,KACA/B,EAAA+B,GAAA,IAAAtI,KAIAuG,EAAA+B,GAAAnP,IAAAsN,GAEA8B,GACArB,EAAA9Z,IAAA+Z,EAAAZ,GAqDAiC,CAAAH,EAAAxB,YAAAJ,EAAAxZ,EAAA4a,WAAAT,OAhLAqB,CAAA1hB,MAGAA,KAAA+f,gBAAAjf,QAAAqa,IACAkG,GAAArhB,KAAA8f,YAAA3E,KAUA,SAAA0E,GAAA8B,EAAA9J,EAAAzU,GACA,GAAApD,KAAAigB,UAAAtO,KAAA,EAMA,MAAA,IAAA1Q,EAAA,2FAGAjB,KAAAkG,MAcA,SAAAyb,EAAA9J,GACA,MAAA+J,EAAAD,EAAA1W,IAAA6V,IAAAA,EAAAjJ,IAGA,OAAAnS,MAAA3I,UAAA6J,OAAAhB,SAAAgc,GAhBAC,CAAAF,EAAA9J,GAEAzU,GAsBA,SAAAkc,GAAAwC,GACA,OAAAA,EAAAC,MAAAtC,GAAA,iBAAAA,GAwIA,SAAA4B,GAAAP,EAAA3F,GACA,MACAuE,EADAoB,EAAA9B,IACAxiB,IAAA2e,GACA,IAAAG,EAQAA,EADAoE,EAAAtc,SACAsc,EAAAtc,SAAAwC,MAAAkb,EAAApB,EAAAxZ,GAAA+E,IAAA/E,GAAAA,EAAA,GAAAA,EAAA,OAEAoV,EAAAoE,EAAAxZ,GAAA,IACA,GAAAoV,EAAA,IAGAwF,EAAA9jB,eAAAme,GACA2F,EAAA3F,GAAAG,EAEAwF,EAAAza,IAAA8U,EAAAG,GC3lBA,MAAA0G,GAAA/e,OAAA,kBAWAgf,WAAAtG,GAOA9b,YAAA5D,EAAA0c,EAAAta,GACAmD,MAAAvF,EAAA0c,EAAAta,GAQA2B,KAAAqG,IAAA,cAAA,GAYArG,KAAAqG,IAAA,aAAA,GAkBAsP,eACA,OAAA3V,KAAAkiB,kBAAAF,IASAG,cAAAxM,GACA,GAAA3V,KAAAkiB,kBAAAF,IAMA,MAAA,IAAA/gB,EAAA,4EAGAjB,KAAAoiB,mBAAAJ,GAAArM,GAEA3V,KAAAqiB,KAAA,cAAAnc,GAAAyP,GAEA3V,KAAAqiB,KAAA,aAAAnc,GACAyP,EACA,YACA2M,GAAAA,GAAA3M,EAAA4M,UAAAC,iBAAAxiB,MAIAA,KAAAsD,SAAAqS,EAAA4M,UAAA,SAAA,KACAviB,KAAAsiB,UAAA3M,EAAA2M,WAAA3M,EAAA4M,UAAAC,iBAAAxiB,QAKAgH,EAAAib,GAAApB;;;;;ACjGA,MAAA4B,GAAAxf,OAAA,kBASAyf,WAAAT,GAMApiB,YAAA5D,GACAuF,MAAAvF,GASA+D,KAAA2iB,SAAA,OAMA9iB,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,eAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,eAAA6M,GAAAtH,MAAAqa,GAAA/S,GAMA6Z,eACA,OAAA3iB,KAAAkiB,kBAAAO,IAGAE,aAAAA,GACA3iB,KAAAoiB,mBAAAK,GAAAE,GAYAC,UAAA3mB,GACA+D,KAAA/D,KAAAA;;;;SClDA4mB,GAmBAhjB,YAAAwD,MACA,IAAAA,EAAAyf,aAAAzf,EAAA0f,cAMA,MAAA,IAAA9hB,EAAA,mGAGA,GAAAoC,EAAA2f,WAAA,WAAA3f,EAAA2f,WAAA,YAAA3f,EAAA2f,UACA,MAAA,IAAA/hB,EACA,wFACK+hB,UAAA3f,EAAA2f,YAeLhjB,KAAA8iB,WAAAzf,EAAAyf,YAAA,KASAzf,EAAA0f,cACA/iB,KAAAijB,SAAAC,GAAAC,mBAAA9f,EAAA0f,eAEA/iB,KAAAijB,SAAAC,GAAAC,mBAAA9f,EAAAyf,WAAA,YAAAzf,EAAA2f,UAAA,MAAA,UASAhjB,KAAAgjB,UAAA3f,EAAA2f,WAAA,UASAhjB,KAAAojB,mBAAA/f,EAAA+f,iBASApjB,KAAAqjB,UAAAhgB,EAAAggB,QAUArjB,KAAAsjB,mBAAAjgB,EAAAigB,iBAQAtjB,KAAAujB,qBAAAvjB,KAAA8iB,WAAA9iB,KAAA8iB,WAAAxF,MAAAjI,OAAA,KAQArV,KAAAwjB,mBAAAxjB,KAAA8iB,WAAA9iB,KAAA8iB,WAAAW,IAAApO,OAAA,KAQAxV,CAAAoD,OAAAiU,YACA,OAAAlX,KAeAH,KAAA6jB,GACA,IAAAxF,EAAAxhB,EAAAinB,EAEA,GACAA,EAAA3jB,KAAAijB,WAEM/E,KAAAA,EAAAxhB,MAAAA,GAAcsD,KAAAie,eACjBC,GAAAwF,EAAAhnB,IAEHwhB,IACAle,KAAAijB,SAAAU,GAUA9jB,OACA,MAAA,WAAAG,KAAAgjB,UACAhjB,KAAA4jB,QAEA5jB,KAAA6jB,YAYAhkB,QACA,IAAAojB,EAAAC,GAAAC,mBAAAnjB,KAAAijB,UACA,MAAAa,EAAA9jB,KAAAijB,SACA5N,EAAA4N,EAAA5N,OAGA,GAAA,OAAAA,EAAAA,QAAA4N,EAAA3T,SAAA+F,EAAAkE,WACA,OAAW2E,MAAA,GAIX,GAAA7I,IAAArV,KAAAwjB,oBAAAP,EAAA3T,QAAAtP,KAAA8iB,WAAAW,IAAAnU,OACA,OAAW4O,MAAA,GAIX,IAAAxZ,EAGA,GAAA2Q,aAAAiB,GAAA,CACA,GAAA2M,EAAAc,QAIA,OAFA/jB,KAAAijB,SAAAC,GAAAc,YAAA3O,GAEArV,KAAA4jB,QAGAlf,EAAA2Q,EAAAjU,KAAA6hB,EAAA3T,aAEA5K,EAAA2Q,EAAAI,SAAAwN,EAAA3T,QAGA,GAAA5K,aAAAgU,GASA,OARA1Y,KAAAqjB,QAGAJ,EAAA3T,SAFA2T,EAAA,IAAAC,GAAAxe,EAAA,GAKA1E,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,eAAAvf,EAAAof,EAAAb,EAAA,GACG,GAAAve,aAAA4R,GAAA,CACH,GAAAtW,KAAAojB,iBAIA,OAHAH,EAAA,IAAAC,GAAAxe,EAAA,GACA1E,KAAAijB,SAAAA,EAEAjjB,KAAA4jB,QACI,CACJ,IACAtM,EADA4M,EAAAxf,EAAAtD,KAAA6D,OAgBA,OAZAP,GAAA1E,KAAAwjB,oBACAU,EAAAlkB,KAAA8iB,WAAAW,IAAAnU,OACAgI,EAAA,IAAAZ,GAAAhS,EAAA,EAAAwf,GACAjB,EAAAC,GAAAc,YAAA1M,KAEAA,EAAA,IAAAZ,GAAAhS,EAAA,EAAAA,EAAAtD,KAAA6D,QAEAge,EAAA3T,UAGAtP,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,OAAA3M,EAAAwM,EAAAb,EAAAiB,IAEG,GAAA,iBAAAxf,EAAA,CACH,IAAAyf,EAEA,GAAAnkB,KAAAojB,iBACAe,EAAA,MACI,CAIJA,GAFA9O,IAAArV,KAAAwjB,mBAAAxjB,KAAA8iB,WAAAW,IAAAnU,OAAA+F,EAAAjU,KAAA6D,QAEAge,EAAA3T,OAGA,MAAA8U,EAAA,IAAA1N,GAAArB,EAAA4N,EAAA3T,OAAA6U,GAKA,OAHAlB,EAAA3T,QAAA6U,EACAnkB,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,OAAAG,EAAAN,EAAAb,EAAAkB,GAMA,OAHAlB,EAAAC,GAAAc,YAAA3O,GACArV,KAAAijB,SAAAA,EAEAjjB,KAAAsjB,iBACAtjB,KAAA4jB,QAEA5jB,KAAAikB,mBAAA,aAAA5O,EAAAyO,EAAAb,GAaApjB,YACA,IAAAojB,EAAAC,GAAAC,mBAAAnjB,KAAAijB,UACA,MAAAa,EAAA9jB,KAAAijB,SACA5N,EAAA4N,EAAA5N,OAGA,GAAA,OAAAA,EAAAA,QAAA,IAAA4N,EAAA3T,OACA,OAAW4O,MAAA,GAIX,GAAA7I,GAAArV,KAAAujB,sBAAAN,EAAA3T,QAAAtP,KAAA8iB,WAAAxF,MAAAhO,OACA,OAAW4O,MAAA,GAIX,IAAAxZ,EAGA,GAAA2Q,aAAAiB,GAAA,CACA,GAAA2M,EAAAoB,UAIA,OAFArkB,KAAAijB,SAAAC,GAAAoB,aAAAjP,GAEArV,KAAA6jB,YAGAnf,EAAA2Q,EAAAjU,KAAA6hB,EAAA3T,OAAA,QAEA5K,EAAA2Q,EAAAI,SAAAwN,EAAA3T,OAAA,GAGA,GAAA5K,aAAAgU,GACA,OAAA1Y,KAAAqjB,SAUAJ,EAAA3T,SACAtP,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,eAAAvf,EAAAof,EAAAb,EAAA,KAZAA,EAAA,IAAAC,GAAAxe,EAAAA,EAAA6U,YACAvZ,KAAAijB,SAAAA,EAEAjjB,KAAAsjB,iBACAtjB,KAAA6jB,YAEA7jB,KAAAikB,mBAAA,aAAAvf,EAAAof,EAAAb,IAQG,GAAAve,aAAA4R,GAAA,CACH,GAAAtW,KAAAojB,iBAIA,OAHAH,EAAA,IAAAC,GAAAxe,EAAAA,EAAAtD,KAAA6D,QACAjF,KAAAijB,SAAAA,EAEAjjB,KAAA6jB,YACI,CACJ,IACAvM,EADA4M,EAAAxf,EAAAtD,KAAA6D,OAIA,GAAAP,GAAA1E,KAAAujB,qBAAA,CACA,MAAAjU,EAAAtP,KAAA8iB,WAAAxF,MAAAhO,OAGA4U,GADA5M,EAAA,IAAAZ,GAAAhS,EAAA4K,EAAA5K,EAAAtD,KAAA6D,OAAAqK,IACAlO,KAAA6D,OACAge,EAAAC,GAAAoB,aAAAhN,QAEAA,EAAA,IAAAZ,GAAAhS,EAAA,EAAAA,EAAAtD,KAAA6D,QAEAge,EAAA3T,SAKA,OAFAtP,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,OAAA3M,EAAAwM,EAAAb,EAAAiB,IAEG,GAAA,iBAAAxf,EAAA,CACH,IAAAyf,EAEA,GAAAnkB,KAAAojB,iBAMAe,EAAA,MANA,CAEA,MAAAI,EAAAlP,IAAArV,KAAAujB,qBAAAvjB,KAAA8iB,WAAAxF,MAAAhO,OAAA,EAEA6U,EAAAlB,EAAA3T,OAAAiV,EAKAtB,EAAA3T,QAAA6U,EAEA,MAAAC,EAAA,IAAA1N,GAAArB,EAAA4N,EAAA3T,OAAA6U,GAIA,OAFAnkB,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,OAAAG,EAAAN,EAAAb,EAAAkB,GAMA,OAHAlB,EAAAC,GAAAoB,aAAAjP,GACArV,KAAAijB,SAAAA,EAEAjjB,KAAAikB,mBAAA,eAAA5O,EAAAyO,EAAAb,EAAA,GAeApjB,mBAAAiJ,EAAAwO,EAAAwM,EAAAU,EAAAvf,GA6BA,OAxBAqS,aAAAZ,KAEAY,EAAAV,aAAAU,EAAAlW,KAAA6D,QAAAqS,EAAAX,SAAAvV,KAAA6D,SACA,WAAAjF,KAAAgjB,WAAAhjB,KAAA8iB,YAAA9iB,KAAA8iB,WAAAW,IAAAgB,QAAAzkB,KAAAijB,UAKAa,EAAAZ,GAAAc,YAAA1M,EAAAX,WAJA6N,EAAAtB,GAAAc,YAAA1M,EAAAX,UAEA3W,KAAAijB,SAAAuB,IAOA,IAAAlN,EAAAV,eACA,YAAA5W,KAAAgjB,WAAAhjB,KAAA8iB,YAAA9iB,KAAA8iB,WAAAxF,MAAAmH,QAAAzkB,KAAAijB,UAKAa,EAAAZ,GAAAoB,aAAAhN,EAAAX,WAJA6N,EAAAtB,GAAAoB,aAAAhN,EAAAX,UAEA3W,KAAAijB,SAAAuB,MAQAtG,MAAA,EACAxhB,OACAoM,KAAAA,EACAwO,KAAAA,EACAwM,iBAAAA,EACAU,aAAAA,EACAvf,OAAAA;;;;GCraA,SAAAyf,GAAAjF,EAAAkF,GACA,MAAAC,EAAAviB,KAAAwiB,IAAApF,EAAAxa,OAAA0f,EAAA1f,QAEA,IAAA,IAAAvJ,EAAA,EAAiBA,EAAAkpB,EAAYlpB,IAC7B,GAAA+jB,EAAA/jB,IAAAipB,EAAAjpB,GAEA,OAAAA,EAKA,OAAA+jB,EAAAxa,QAAA0f,EAAA1f,OAEA,OACEwa,EAAAxa,OAAA0f,EAAA1f,OAEF,SAGA;;;;SC1BAie,GAOArjB,YAAAwV,EAAA/F,GAQAtP,KAAAqV,OAAAA,EAQArV,KAAAsP,OAAAA,EAUAwV,gBACA,OAAA9kB,KAAAqV,OAAAwG,GAAA,QACA,KAGA7b,KAAAqV,OAAAI,SAAAzV,KAAAsP,SAAA,KAUAyV,iBACA,OAAA/kB,KAAAqV,OAAAwG,GAAA,QACA,KAGA7b,KAAAqV,OAAAI,SAAAzV,KAAAsP,OAAA,IAAA,KASA+U,gBACA,OAAA,IAAArkB,KAAAsP,OASAyU,cACA,MAAAiB,EAAAhlB,KAAAqV,OAAAwG,GAAA,QAAA7b,KAAAqV,OAAAjU,KAAA6D,OAAAjF,KAAAqV,OAAAkE,WAEA,OAAAvZ,KAAAsP,SAAA0V,EASAhqB,WACA,OAAAgF,KAAAqV,OAAAra,KASAwnB,sBACA,IAAAyC,EAAAjlB,KAAAqV,OAEA,OAAA4P,aAAAhD,KAAA,CACA,IAAAgD,EAAA5P,OAGA,OAAA,KAFA4P,EAAAA,EAAA5P,OAMA,OAAA4P,EASAplB,aAAAqlB,GACA,MAAAC,EAAAjC,GAAAC,mBAAAnjB,MAEAsP,EAAA6V,EAAA7V,OAAA4V,EAGA,OAFAC,EAAA7V,OAAAA,EAAA,EAAA,EAAAA,EAEA6V,EAmBAtlB,wBAAA6jB,EAAArgB,MACAA,EAAA0f,cAAA/iB,KAEA,MAAAolB,EAAA,IAAAvC,GAAAxf,GAGA,OAFA+hB,EAAA1B,KAAAA,GAEA0B,EAAAnC,SAQApjB,eACA,OAAAG,KAAAqV,OAAAwG,GAAA,qBACA7b,KAAAqV,QAEArV,KAAAqV,OAAAW,cAAqCJ,aAAA,IAWrC/V,kBAAAojB,GACA,MAAAlN,EAAA/V,KAAAgW,eACAC,EAAAgN,EAAAjN,eAEA,IAAAta,EAAA,EAEA,KAAAqa,EAAAra,IAAAua,EAAAva,IAAAqa,EAAAra,IACAA,IAGA,OAAA,IAAAA,EAAA,KAAAqa,EAAAra,EAAA,GASAmE,QAAAwlB,GACA,OAAArlB,KAAAqV,QAAAgQ,EAAAhQ,QAAArV,KAAAsP,QAAA+V,EAAA/V,OAaAzP,SAAAwlB,GACA,MAAA,UAAArlB,KAAAslB,YAAAD,GAaAxlB,QAAAwlB,GACA,MAAA,SAAArlB,KAAAslB,YAAAD,GAUAxlB,YAAAwlB,GACA,GAAArlB,KAAAykB,QAAAY,GACA,MAAA,OAIA,GAAArlB,KAAAqV,SAAAgQ,EAAAhQ,OACA,OAAArV,KAAAsP,OAAA+V,EAAA/V,OAAA,EAAA,SAAA,QAIA,MAAAtN,EAAAhC,KAAAgW,eACAuP,EAAAF,EAAArP,eAGAlX,EAAA4lB,GAAA1iB,EAAAujB,GAEA,IAAAC,EAEA,OAAA1mB,GACA,KAAA,EAEA,MAAA,YAEA,IAAA,SACA0mB,EAAAxjB,EAAAiD,OAAA,EACA,MAEA,IAAA,YACAugB,EAAAD,EAAAtgB,OAAA,EACA,MAEA,QACAugB,EAAA1mB,EAAA,EAIA,MAAA2mB,EAAAzjB,EAAAwjB,GACAE,EAAA1jB,EAAAwjB,EAAA,GACAG,EAAAJ,EAAAC,EAAA,GAGA,GAAAC,IAAAzlB,KAAAqV,OAAA,CAGA,OAFArV,KAAAsP,OAAAqW,EAAA3d,OAEA,EAAA,SAAA,QACG,GAAAyd,IAAAJ,EAAAhQ,OAAA,CAGH,OAFAqQ,EAAA1d,MAAAqd,EAAA/V,OAEA,EAAA,SAAA,QAMA,OAHAoW,EAAA1d,MAAA2d,EAAA3d,MAGA,EAAA,SAAA,QAqBAnI,gBAAA+lB,EAAAtW,GACA,GAAAsW,aAAA1C,GACA,OAAAljB,KAAAmjB,mBAAAyC,GACG,CACH,MAAAlhB,EAAAkhB,EAEA,GAAA,OAAAtW,EACAA,EAAA5K,EAAAmX,GAAA,QAAAnX,EAAAtD,KAAA6D,OAAAP,EAAA6U,eACI,CAAA,GAAA,UAAAjK,EACJ,OAAAtP,KAAAskB,aAAA5f,GACI,GAAA,SAAA4K,EACJ,OAAAtP,KAAAgkB,YAAAtf,GACI4K,IACJA,EAAA,GAGA,OAAA,IAAA4T,GAAAxe,EAAA4K,IAUAzP,mBAAAyX,GAEA,GAAAA,EAAAuE,GAAA,aACA,OAAA,IAAAqH,GAAA5L,EAAAX,SAAAW,EAAAV,aAAAU,EAAAlW,KAAA6D,QAGA,IAAAqS,EAAAjC,OAOA,MAAA,IAAApU,EAAA,mEAAgGjG,KAAAsc,IAGhG,OAAA,IAAA4L,GAAA5L,EAAAjC,OAAAiC,EAAAtP,MAAA,GASAnI,oBAAAyX,GAEA,GAAAA,EAAAuE,GAAA,aACA,OAAA,IAAAqH,GAAA5L,EAAAX,SAAAW,EAAAV,cAGA,IAAAU,EAAAjC,OAOA,MAAA,IAAApU,EAAA,qEAAkGjG,KAAAsc,IAGlG,OAAA,IAAA4L,GAAA5L,EAAAjC,OAAAiC,EAAAtP,OASAnI,0BAAAojB,GACA,OAAA,IAAAjjB,KAAAijB,EAAA5N,OAAA4N,EAAA3T;;;;SC9XAuW,GASAhmB,YAAAyd,EAAAmG,EAAA,MAOAzjB,KAAAsd,MAAA4F,GAAAC,mBAAA7F,GAQAtd,KAAAyjB,IAAAA,EAAAP,GAAAC,mBAAAM,GAAAP,GAAAC,mBAAA7F,GAgBAzd,EAAAoD,OAAAiU,kBACA,IAAA2L,IAA0BC,WAAA9iB,KAAAsjB,kBAAA,IAQ1BwC,kBACA,OAAA9lB,KAAAsd,MAAAmH,QAAAzkB,KAAAyjB,KASAsC,aACA,OAAA/lB,KAAAsd,MAAAjI,SAAArV,KAAAyjB,IAAApO,OAQAra,WACA,OAAAgF,KAAAsd,MAAAtiB,KAmBA6E,cACA,IAAAyd,EAAAtd,KAAAsd,MAAA0I,wBAAAC,IAAoEjD,UAAA,aACpES,EAAAzjB,KAAAyjB,IAAAuC,wBAAAC,IAWA,OARA3I,EAAAjI,OAAAwG,GAAA,SAAAyB,EAAA+G,YACA/G,EAAA4F,GAAAoB,aAAAhH,EAAAjI,SAGAoO,EAAApO,OAAAwG,GAAA,SAAA4H,EAAAM,UACAN,EAAAP,GAAAc,YAAAP,EAAApO,SAGA,IAAAwQ,GAAAvI,EAAAmG,GAmBA5jB,aACA,IAAAyd,EAAAtd,KAAAsd,MAAA0I,wBAAAC,IAEA,GAAA3I,EAAA4I,QAAAlmB,KAAAyjB,MAAAnG,EAAAmH,QAAAzkB,KAAAyjB,KACA,OAAA,IAAAoC,GAAAvI,EAAAA,GAGA,IAAAmG,EAAAzjB,KAAAyjB,IAAAuC,wBAAAC,IAAgEjD,UAAA,aAChE,MAAAmD,EAAA7I,EAAAwH,UACAsB,EAAA3C,EAAAsB,WAWA,OARAoB,GAAAA,EAAAtK,GAAA,UACAyB,EAAA,IAAA4F,GAAAiD,EAAA,IAGAC,GAAAA,EAAAvK,GAAA,UACA4H,EAAA,IAAAP,GAAAkD,EAAAA,EAAAhlB,KAAA6D,SAGA,IAAA4gB,GAAAvI,EAAAmG,GASA5jB,QAAAwmB,GACA,OAAArmB,MAAAqmB,GAAArmB,KAAAsd,MAAAmH,QAAA4B,EAAA/I,QAAAtd,KAAAyjB,IAAAgB,QAAA4B,EAAA5C,KAUA5jB,iBAAAojB,GACA,OAAAA,EAAAiD,QAAAlmB,KAAAsd,QAAA2F,EAAAqD,SAAAtmB,KAAAyjB,KAaA5jB,cAAAwmB,EAAAE,GAAA,GACAF,EAAAP,cACAS,GAAA,GAGA,MAAAC,EAAAxmB,KAAAymB,iBAAAJ,EAAA/I,QAAAiJ,GAAAvmB,KAAAsd,MAAAmH,QAAA4B,EAAA/I,OACAoJ,EAAA1mB,KAAAymB,iBAAAJ,EAAA5C,MAAA8C,GAAAvmB,KAAAyjB,IAAAgB,QAAA4B,EAAA5C,KAEA,OAAA+C,GAAAE,EA+BA7mB,cAAAwmB,GACA,MAAAM,KAqBA,OAnBA3mB,KAAA4mB,eAAAP,IAGArmB,KAAAymB,iBAAAJ,EAAA/I,QAGAqJ,EAAA1iB,KAAA,IAAA4hB,GAAA7lB,KAAAsd,MAAA+I,EAAA/I,QAGAtd,KAAAymB,iBAAAJ,EAAA5C,MAGAkD,EAAA1iB,KAAA,IAAA4hB,GAAAQ,EAAA5C,IAAAzjB,KAAAyjB,OAIAkD,EAAA1iB,KAAA4hB,GAAAgB,gBAAA7mB,OAGA2mB,EAwBA9mB,gBAAAwmB,GACA,GAAArmB,KAAA4mB,eAAAP,GAAA,CAGA,IAAAS,EAAA9mB,KAAAsd,MACAyJ,EAAA/mB,KAAAyjB,IAcA,OAZAzjB,KAAAymB,iBAAAJ,EAAA/I,SAGAwJ,EAAAT,EAAA/I,OAGAtd,KAAAymB,iBAAAJ,EAAA5C,OAGAsD,EAAAV,EAAA5C,KAGA,IAAAoC,GAAAiB,EAAAC,GAIA,OAAA,KAYAlnB,UAAAwD,MAGA,OAFAA,EAAAyf,WAAA9iB,KAEA,IAAA6iB,GAAAxf,GASAxD,oBACA,OAAAG,KAAAsd,MAAA0J,kBAAAhnB,KAAAyjB,KAiBA5jB,UAAAwD,MACAA,EAAAyf,WAAA9iB,KACAqD,EAAAigB,kBAAA,EAEA,MAAA8B,EAAA,IAAAvC,GAAAxf,GAEA,IAAA,MAAA3G,KAAA0oB,QACA1oB,EAAA4a,KAiBAzX,cAAAwD,MACAA,EAAAyf,WAAA9iB,KAEA,MAAAolB,EAAA,IAAAvC,GAAAxf,SAEA+hB,EAAAnC,SAEA,IAAA,MAAAvmB,KAAA0oB,QACA1oB,EAAA8nB,aAUA3kB,eAAAwmB,GACA,OAAArmB,KAAAsd,MAAAgJ,SAAAD,EAAA5C,MAAAzjB,KAAAyjB,IAAAyC,QAAAG,EAAA/I,OAYAzd,mCAAAonB,EAAA1C,EAAA2C,EAAAlC,GACA,OAAA,IAAAhlB,KACA,IAAAkjB,GAAA+D,EAAA1C,GACA,IAAArB,GAAAgE,EAAAlC,IAUAnlB,uBAAAsnB,GACA,OAAA,IAAAnnB,KAAAmnB,EAAA7J,MAAA6J,EAAA1D,KAWA5jB,kCAAAojB,EAAAiC,GACA,MAAA5H,EAAA2F,EACAQ,EAAAR,EAAAmE,aAAAlC,GAEA,OAAAA,EAAA,EAAA,IAAAllB,KAAAsd,EAAAmG,GAAA,IAAAzjB,KAAAyjB,EAAAnG,GAUAzd,gBAAA2X,GACA,OAAAxX,KAAAqnB,4BAAA7P,EAAA,EAAAA,EAAAA,EAAA+B,YASA1Z,gBAAAyX,GACA,MAAA3F,EAAA2F,EAAAuE,GAAA,aAAAvE,EAAAT,WAAA,EAEA,OAAA7W,KAAAsnB,2BAAApE,GAAAoB,aAAAhN,GAAA3F,GAWA9R,yBAAA+lB,EAAAtW,GACA,MAAAgO,EAAA4F,GAAAqE,SAAA3B,EAAAtW,GACAmU,EAAAP,GAAAC,mBAAA7F,GAEA,OAAA,IAAAuI,GAAAvI,EAAAmG,IAKA,SAAAwC,GAAAvpB,GACA,SAAAA,EAAA4a,KAAAuE,GAAA,sBAAAnf,EAAA4a,KAAAuE,GAAA;;;;GClcA,SAAA2L,GAAAtQ,GACA,IAAAuD,EAAA,EAEA,IAAA,MAAAgN,KAAAvQ,EACAuD,IAGA,OAAAA;;;;SCUAiN,GA0DA7nB,YAAA8nB,EAAA,KAAAC,EAAAvkB,GAOArD,KAAA6nB,WAQA7nB,KAAA8nB,oBAAA,EAQA9nB,KAAA+nB,SAAA,EAQA/nB,KAAAgoB,oBAAA,GAEAhoB,KAAAioB,OAAAN,EAAAC,EAAAvkB,GASA6kB,aACA,OAAAloB,KAAA+nB,QASAI,yBACA,OAAAnoB,KAAAgoB,oBAYAI,aACA,IAAApoB,KAAA6nB,QAAA5iB,OACA,OAAA,KAEA,MAAAkiB,EAAAnnB,KAAA6nB,QAAA7nB,KAAA6nB,QAAA5iB,OAAA,GACAmjB,EAAApoB,KAAA8nB,mBAAAX,EAAA1D,IAAA0D,EAAA7J,MAEA,OAAA4F,GAAAC,mBAAAiF,GASAC,YACA,IAAAroB,KAAA6nB,QAAA5iB,OACA,OAAA,KAEA,MAAAkiB,EAAAnnB,KAAA6nB,QAAA7nB,KAAA6nB,QAAA5iB,OAAA,GACAojB,EAAAroB,KAAA8nB,mBAAAX,EAAA7J,MAAA6J,EAAA1D,IAEA,OAAAP,GAAAC,mBAAAkF,GASAvC,kBACA,OAAA,IAAA9lB,KAAAsoB,YAAAtoB,KAAA6nB,QAAA,GAAA/B,YAQAwC,iBACA,OAAAtoB,KAAA6nB,QAAA5iB,OAQAsjB,iBACA,OAAAvoB,KAAA8lB,aAAA9lB,KAAA8nB,mBASAtF,sBACA,OAAAxiB,KAAAooB,OACApoB,KAAAooB,OAAA5F,gBAGA,KAQA3iB,aACA,IAAA,MAAAsnB,KAAAnnB,KAAA6nB,cACAhC,GAAAgB,gBAAAM,GAYAtnB,gBACA,IAAA2oB,EAAA,KAEA,IAAA,MAAArB,KAAAnnB,KAAA6nB,QACAW,IAAArB,EAAA7J,MAAAgJ,SAAAkC,EAAAlL,SACAkL,EAAArB,GAIA,OAAAqB,EAAA3C,GAAAgB,gBAAA2B,GAAA,KAUA3oB,eACA,IAAA4oB,EAAA,KAEA,IAAA,MAAAtB,KAAAnnB,KAAA6nB,QACAY,IAAAtB,EAAA1D,IAAAyC,QAAAuC,EAAAhF,OACAgF,EAAAtB,GAIA,OAAAsB,EAAA5C,GAAAgB,gBAAA4B,GAAA,KAUA5oB,mBACA,MAAA6oB,EAAA1oB,KAAA2oB,gBAEA,OAAAD,EAAAxF,GAAAC,mBAAAuF,EAAApL,OAAA,KAUAzd,kBACA,MAAA+oB,EAAA5oB,KAAA6oB,eAEA,OAAAD,EAAA1F,GAAAC,mBAAAyF,EAAAnF,KAAA,KAUA5jB,QAAAipB,GACA,GAAA9oB,KAAAkoB,QAAAY,EAAAZ,OACA,OAAA,EAGA,GAAAloB,KAAAkoB,QAAAloB,KAAAmoB,oBAAAW,EAAAX,mBACA,OAAA,EAGA,GAAAnoB,KAAAsoB,YAAAQ,EAAAR,WACA,OAAA,EACG,GAAA,IAAAtoB,KAAAsoB,WACH,OAAA,EAGA,IAAAtoB,KAAAooB,OAAA3D,QAAAqE,EAAAV,UAAApoB,KAAAqoB,MAAA5D,QAAAqE,EAAAT,OACA,OAAA,EAGA,IAAA,MAAAU,KAAA/oB,KAAA6nB,QAAA,CACA,IAAAmB,GAAA,EAEA,IAAA,MAAA3C,KAAAyC,EAAAjB,QACA,GAAAkB,EAAAtE,QAAA4B,GAAA,CACA2C,GAAA,EACA,MAIA,IAAAA,EACA,OAAA,EAIA,OAAA,EAWAnpB,UAAAipB,GACA,GAAA9oB,KAAAuoB,YAAAO,EAAAP,WACA,OAAA,EAGA,MAAAU,EAAAzB,GAAAxnB,KAAAkpB,aAIA,GAAAD,GAHAzB,GAAAsB,EAAAI,aAIA,OAAA,EAIA,GAAA,GAAAD,EACA,OAAA,EAIA,IAAA,IAAAE,KAAAnpB,KAAAkpB,YAAA,CACAC,EAAAA,EAAAC,aAEA,IAAAJ,GAAA,EAEA,IAAA,IAAAK,KAAAP,EAAAI,YAGA,GAFAG,EAAAA,EAAAD,aAEAD,EAAA7L,MAAAmH,QAAA4E,EAAA/L,QAAA6L,EAAA1F,IAAAgB,QAAA4E,EAAA5F,KAAA,CACAuF,GAAA,EACA,MAKA,IAAAA,EACA,OAAA,EAKA,OAAA,EAUAnpB,qBACA,GAAA,IAAAG,KAAAsoB,WACA,OAAA,KAGA,MAAAnB,EAAAnnB,KAAA2oB,gBACAxC,EAAAgB,EAAA7J,MAAAwH,UACAsB,EAAAe,EAAA1D,IAAAsB,WAEA,OAAAoB,aAAAzN,IAAAyN,GAAAC,EAAAD,EAAA,KAiEAtmB,OAAA8nB,EAAAC,EAAAvkB,GACA,GAAA,OAAAskB,EACA3nB,KAAAspB,eACAtpB,KAAAupB,gBAAA3B,QACG,GAAAD,aAAAD,GACH1nB,KAAAspB,WAAA3B,EAAAuB,YAAAvB,EAAAY,YACAvoB,KAAAupB,iBAA0BC,KAAA7B,EAAAO,OAAAuB,MAAA9B,EAAAQ,0BACvB,GAAAR,aAAA9B,GACH7lB,KAAAspB,YAAA3B,GAAAC,GAAAA,EAAA8B,UACA1pB,KAAAupB,gBAAA3B,QACG,GAAAD,aAAAzE,GACHljB,KAAAspB,YAAA,IAAAzD,GAAA8B,KACA3nB,KAAAupB,gBAAA3B,QACG,GAAAD,aAAAvS,GAAA,CACH,MAAAsU,IAAArmB,KAAAA,EAAAqmB,SACA,IAAAvC,EAEA,QAAA5pB,IAAAqqB,EAMA,MAAA,IAAA3mB,EACA,qIAIAkmB,EADI,MAAAS,EACJ/B,GAAA8D,SAAAhC,GACI,MAAAC,EACJ/B,GAAA+D,SAAAjC,GAEA9B,GAAAgE,kBAAAlC,EAAAC,GAGA5nB,KAAAspB,YAAAnC,GAAAuC,GACA1pB,KAAAupB,gBAAAlmB,OACG,CAAA,IAAA4T,GAAA0Q,GAWH,MAAA,IAAA1mB,EAAA,6EARAjB,KAAAspB,WAAA3B,EAAAC,GAAAA,EAAA8B,UACA1pB,KAAAupB,gBAAA3B,GAUA5nB,KAAA+G,KAAA,UAaAlH,WAAAiqB,EAAAC,GAAA,GAGAD,EAAApkB,MAAAC,KAAAmkB,GAEA9pB,KAAA6nB,WAEA,IAAA,MAAAV,KAAA2C,EACA9pB,KAAAgqB,UAAA7C,GAGAnnB,KAAA8nB,qBAAAiC,EAcAlqB,UAAA+lB,EAAAtW,GACA,GAAA,OAAAtP,KAAAooB,OAMA,MAAA,IAAAnnB,EACA,sGAIA,MAAAgpB,EAAA/G,GAAAqE,SAAA3B,EAAAtW,GAEA,GAAA,QAAA2a,EAAA3E,YAAAtlB,KAAAqoB,OACA,OAGA,MAAAD,EAAApoB,KAAAooB,OAEApoB,KAAA6nB,QAAApnB,MAEA,UAAAwpB,EAAA3E,YAAA8C,GACApoB,KAAAgqB,UAAA,IAAAnE,GAAAoE,EAAA7B,IAAA,GAEApoB,KAAAgqB,UAAA,IAAAnE,GAAAuC,EAAA6B,IAGAjqB,KAAA+G,KAAA,UAgBAlH,gBAAAwD,MACArD,KAAA+nB,UAAA1kB,EAAAmmB,KACAxpB,KAAAgoB,oBAAA3kB,EAAAmmB,MAAAnmB,EAAAomB,OAAA,GAoBA5pB,UAAAsnB,EAAAoB,GAAA,GACA,KAAApB,aAAAtB,IACA,MAAA,IAAA5kB,EAAA,gDAGAjB,KAAAkqB,WAAA/C,GACAnnB,KAAA8nB,qBAAAS,EAYA1oB,WAAAsnB,GACA,IAAA,MAAAgD,KAAAnqB,KAAA6nB,QACA,GAAAV,EAAAP,eAAAuD,GAQA,MAAA,IAAAlpB,EACA,6GACMmpB,WAAAjD,EAAAkD,kBAAAF,IAKNnqB,KAAA6nB,QAAA5jB,KAAA4hB,GAAAgB,gBAAAM,KAIAngB,EAAA0gB,GAAArR;;;;;MCroBAiU,GAOAzqB,YAAAwD,MAOArD,KAAAuqB,UAQAvqB,KAAAwqB,SAAA,IAAApkB,IAQApG,KAAAyqB,YAAApnB,EAAAqnB,YAAA,KAYA1qB,KAAA2qB,6BAAA,IAAAC,QAYA5qB,KAAA6qB,6BAAA,IAAAD,QAQA5qB,KAAA8qB,+BAgBA7lB,aACA,OAAAjF,KAAAuqB,OAAAtlB,OAQAujB,YACA,OAAAxoB,KAAAuqB,OAAA,IAAA,KAQA9B,WACA,OAAAzoB,KAAAuqB,OAAAvqB,KAAAiF,OAAA,IAAA,KAcApF,IAAAyX,EAAAtP,GACA,IAAA+iB,EACA,MAAAL,EAAA1qB,KAAAyqB,YAEA,GAAAC,KAAApT,EAAA,CAGA,GAAA,iBAFAyT,EAAAzT,EAAAoT,IAQA,MAAA,IAAAzpB,EAAA,6BAGA,GAAAjB,KAAAxD,IAAAuuB,GAMA,MAAA,IAAA9pB,EAAA,2CAGAqW,EAAAoT,GAAAK,EAAA5oB,IAIA,QAAA5E,IAAAyK,EACAA,EAAAhI,KAAAuqB,OAAAtlB,YACG,GAAA+C,EAAAhI,KAAAuqB,OAAAtlB,QAAA+C,EAAA,EAMH,MAAA,IAAA/G,EAAA,qCASA,OANAjB,KAAAuqB,OAAArlB,OAAA8C,EAAA,EAAAsP,GAEAtX,KAAAwqB,SAAAnkB,IAAA0kB,EAAAzT,GAEAtX,KAAA+G,KAAA,MAAAuQ,EAAAtP,GAEAhI,KASAH,IAAAmrB,GACA,IAAA1T,EAEA,GAAA,iBAAA0T,EACA1T,EAAAtX,KAAAwqB,SAAAhuB,IAAAwuB,OACG,CAAA,GAAA,iBAAAA,EAQH,MAAA,IAAA/pB,EAAA,0DAPAqW,EAAAtX,KAAAuqB,OAAAS,GAUA,OAAA1T,GAAA,KAUAzX,SAAAorB,GACA,IAAA3T,EAQA,OALAA,EADA,iBAAA2T,EACAjrB,KAAAwqB,SAAAhuB,IAAAyuB,GAEAA,EAGAjrB,KAAAuqB,OAAA/kB,QAAA8R,GAUAzX,OAAAqrB,GACA,IAAAljB,EAAAxB,EAAA8Q,EACA6T,GAAA,EACA,MAAAT,EAAA1qB,KAAAyqB,YAyBA,GAvBA,iBAAAS,GACA1kB,EAAA0kB,EAEAC,IADA7T,EAAAtX,KAAAwqB,SAAAhuB,IAAAgK,IAGA8Q,IACAtP,EAAAhI,KAAAuqB,OAAA/kB,QAAA8R,KAEG,iBAAA4T,GACHljB,EAAAkjB,EAEAC,IADA7T,EAAAtX,KAAAuqB,OAAAviB,IAGAsP,IACA9Q,EAAA8Q,EAAAoT,MAIAlkB,GADA8Q,EAAA4T,GACAR,GAEAS,GAAA,IADAnjB,EAAAhI,KAAAuqB,OAAA/kB,QAAA8R,MACAtX,KAAAwqB,SAAAhuB,IAAAgK,IAGA2kB,EAMA,MAAA,IAAAlqB,EAAA,0CAGAjB,KAAAuqB,OAAArlB,OAAA8C,EAAA,GACAhI,KAAAwqB,SAAAlkB,OAAAE,GAEA,MAAA4kB,EAAAprB,KAAA6qB,6BAAAruB,IAAA8a,GAMA,OALAtX,KAAA6qB,6BAAAvkB,OAAAgR,GACAtX,KAAA2qB,6BAAArkB,OAAA8kB,GAEAprB,KAAA+G,KAAA,SAAAuQ,EAAAtP,GAEAsP,EAYAzX,IAAAuD,EAAAioB,GACA,OAAArrB,KAAAuqB,OAAAtf,IAAA7H,EAAAioB,GAYAxrB,KAAAuD,EAAAioB,GACA,OAAArrB,KAAAuqB,OAAAe,KAAAloB,EAAAioB,GAYAxrB,OAAAuD,EAAAioB,GACA,OAAArrB,KAAAuqB,OAAAgB,OAAAnoB,EAAAioB,GAOAxrB,QAMA,IALAG,KAAAwrB,oBACAxrB,KAAAwD,cAAAxD,KAAAwrB,mBACAxrB,KAAAwrB,kBAAA,MAGAxrB,KAAAiF,QACAjF,KAAAyrB,OAAA,GAsGA5rB,OAAA6rB,GACA,GAAA1rB,KAAAwrB,kBAMA,MAAA,IAAAvqB,EAAA,6EAKA,OAFAjB,KAAAwrB,kBAAAE,GASAC,GAAAC,IACA5rB,KAAA6rB,oBAAAvU,GAAA,IAAAsU,EAAAtU,KAWAwU,MAAAC,IACA,mBAAAA,EACA/rB,KAAA6rB,oBAAAvU,GAAAyU,EAAAzU,IAEAtX,KAAA6rB,oBAAAvU,GAAAA,EAAAyU,MAYAlsB,oBAAA5E,GACA,MAAAywB,EAAA1rB,KAAAwrB,kBAKAQ,EAAA,CAAApL,EAAAwK,EAAApjB,KACA,MAAAikB,EAAAP,EAAAF,mBAAAxrB,KACAksB,EAAAR,EAAAb,6BAAAruB,IAAA4uB,GAMA,GAAAa,GAAAC,EACAlsB,KAAA2qB,6BAAAtkB,IAAA+kB,EAAAc,GACAlsB,KAAA6qB,6BAAAxkB,IAAA6lB,EAAAd,OACI,CACJ,MAAA9T,EAAArc,EAAAmwB,GAGA,IAAA9T,EAGA,YAFAtX,KAAA8qB,4BAAA7mB,KAAA+D,GAOA,IAAAmkB,EAAAnkB,EAmBA,IAAA,MAAAokB,KAAApsB,KAAA8qB,4BACA9iB,EAAAokB,GACAD,IAiBA,IAAA,MAAAC,KAAAV,EAAAZ,4BACAqB,GAAAC,GACAD,IAIAnsB,KAAA2qB,6BAAAtkB,IAAA+kB,EAAA9T,GACAtX,KAAA6qB,6BAAAxkB,IAAAiR,EAAA8T,GACAprB,KAAAoS,IAAAkF,EAAA6U,GAIA,IAAA,IAAAzwB,EAAA,EAAoBA,EAAAgwB,EAAAZ,4BAAA7lB,OAA2DvJ,IAC/EywB,GAAAT,EAAAZ,4BAAApvB,IACAgwB,EAAAZ,4BAAApvB,OAOA,IAAA,MAAA0vB,KAAAM,EACAM,EAAA,EAAAZ,EAAAM,EAAAW,SAAAjB,IAIAprB,KAAAsD,SAAAooB,EAAA,MAAAM,GAGAhsB,KAAAsD,SAAAooB,EAAA,SAAA,CAAA9K,EAAAwK,EAAApjB,KACA,MAAAsP,EAAAtX,KAAA2qB,6BAAAnuB,IAAA4uB,GAEA9T,GACAtX,KAAAyrB,OAAAnU,GAKAtX,KAAA8qB,4BAAA9qB,KAAA8qB,4BAAAwB,OAAA,CAAAxtB,EAAAstB,KACApkB,EAAAokB,GACAttB,EAAAmF,KAAAmoB,EAAA,GAGApkB,EAAAokB,GACAttB,EAAAmF,KAAAmoB,GAGAttB,SAUAe,CAAAoD,OAAAiU,YACA,OAAAlX,KAAAuqB,OAAAtnB,OAAAiU,aAmBAlQ,EAAAsjB,GAAAjU;;;;;MCjmBAkW,GAIA1sB,cAOAG,KAAAuiB,UAAA,IAAAmF,GAaA1nB,KAAAwsB,MAAA,IAAAlC,IAAgCI,WAAA,aAUhC1qB,KAAAqG,IAAA,cAAA,GAYArG,KAAAqG,IAAA,aAAA,GAYArG,KAAAqG,IAAA,eAAA,GAQArG,KAAAysB,YAAA,IAAAxT,IAWApZ,QAAA5D,EAAA,QACA,OAAA+D,KAAAwsB,MAAAhwB,IAAAP,GAqBA4D,kBAAA6sB,GACA1sB,KAAAysB,YAAAra,IAAAsa,GASA7sB,gBAAA8sB,GACA,IAAAC,GAAA,EAEA,GACA,IAAA,MAAAxpB,KAAApD,KAAAysB,YAGA,GAFAG,EAAAxpB,EAAAupB,GAGA,YAGGC,IAIH5lB,EAAAulB,GAAA1L;;;;;ACpIA,MAAAgM,GAAA,SAYAC,WAAApU,GAQA7Y,YAAA5D,EAAA0c,EAAAta,GACAmD,MAAAvF,EAAA0c,EAAAta,GAUA2B,KAAA+sB,UAAAF,GAQA7sB,KAAAua,gBAAAyS,GASAtqB,eACA,OAAA1C,KAAA+sB,UAMAltB,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,oBAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,oBAAA6M,GAAAtH,MAAAqa,GAAA/S,GAcAjJ,UAAA8Z,GACA,OAAAnY,MAAAyrB,UAAAtT,IAAA3Z,KAAA0C,UAAAiX,EAAAjX,SAWA7C,OAAAoa,GACA,MAAAK,EAAA9Y,MAAA6Y,OAAAJ,GAKA,OAFAK,EAAAyS,UAAA/sB,KAAA+sB,UAEAzS,GAcA,SAAA0S,KAEA,GAAAE,GAAAltB,MACA,OAAA,KAGA,IAAAwX,EAAAxX,KAAAqV,OAGA,KAAAmC,GAAAA,EAAAqE,GAAA,qBAAA,CACA,GAAAqR,GAAA1V,GAAA,EACA,OAAA,KAGAA,EAAAA,EAAAnC,OAGA,OAAAmC,GAAA0V,GAAA1V,GAAA,EACA,KAIAxX,KAAAuZ,WAOA,SAAA2T,GAAA1V,GACA,OAAA9R,MAAAC,KAAA6R,EAAA4C,eAAAmR,OAAA/T,IAAAA,EAAAqE,GAAA,cAAA5W;;;;GAnCA6nB,GAAAK,iBAAAN,SC9FAO,WAAA1U,GAYA7Y,YAAA5D,EAAA+d,EAAA3b,GACAmD,MAAAvF,EAAA+d,EAAA3b,GAQA2B,KAAAua,gBAAA8S,GAMAxtB,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,gBAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,gBAAA6M,GAAAtH,MAAAqa,GAAA/S,GAaAjJ,gBAAAmI,EAAA0S,GACA,GAAAA,IAAAA,aAAAtF,IAAA1P,MAAAC,KAAA+U,GAAAzV,OAAA,GAMA,MAAA,IAAAhE,EAAA,mFAQA,SAAAosB,KACA,OAAA;;;;GC9CA,IAAAC,IAHAC,MAWA,SAAAC,GACA,OAAAA,EAAAhoB,QAAA,cAAA;;;;GAZA+nB,CAdAE,UAAAD,UAAAE,gBCGA,MAAAC,IACAC,IAAA,OACAC,IAAA,QACAC,IAAA,OAGAC,IACAC,KAAA,IACA9I,MAAA,IACA+I,IAAA,KAeAC,GA0FA,WACA,MAAAC,GACAC,UAAA,GACAC,QAAA,GACAC,WAAA,GACAC,UAAA,GACAC,UAAA,EACAloB,OAAA,GACAmoB,MAAA,GACAC,MAAA,GACAC,IAAA,GACAC,IAAA,EAIAZ,KAAA,QAGAa,IAAA,QACA3J,MAAA,QACA+I,IAAA,SAIA,IAAA,IAAAa,EAAA,GAAqBA,GAAA,GAAYA,IAAA,CACjC,MAAAC,EAAA9gB,OAAA+gB,aAAAF,GAEAX,EAAAY,EAAArB,eAAAoB,EAIA,IAAA,IAAAA,EAAA,GAAqBA,GAAA,GAAYA,IACjCX,EAAAW,EAAA,IAAAA,EAIA,IAAA,IAAAA,EAAA,IAAsBA,GAAA,IAAaA,IACnCX,EAAA,KAAAW,EAAA,MAAAA,EAGA,OAAAX,EAlIAc,GAWA,SAAAC,GAAAnuB,GACA,IAAAouB,EAEA,GAAA,iBAAApuB,GAGA,KAFAouB,EAAAjB,GAAAntB,EAAA2sB,gBASA,MAAA,IAAAzsB,EAAA,2CAAwEF,IAAAA,SAGxEouB,EAAApuB,EAAAouB,SACApuB,EAAAquB,OAAAlB,GAAAD,IAAA,IACAltB,EAAAsuB,QAAAnB,GAAAF,KAAA,IACAjtB,EAAAuuB,SAAApB,GAAAhJ,MAAA,GAGA,OAAAiK,EAqBA,SAAAI,GAAAC,GAKA,MAJA,iBAAAA,IACAA,EAAAC,GAAAD,IAGAA,EACAvkB,IAAAlK,GAAA,iBAAAA,EAAAmuB,GAAAnuB,GAAAA,GACAurB,OAAA,CAAAvrB,EAAA2uB,IAAAA,EAAA3uB,EAAA,GAwEA,SAAA0uB,GAAAD,GACA,OAAAA,EAAAhvB,MAAA;;;;SC1JAmvB,WAAAjX,GAYA7Y,YAAA5D,EAAA+d,EAAA3b,GACAmD,MAAAvF,EAAA+d,EAAA3b,GAQA2B,KAAAua,gBAAAqV,GAMA/vB,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,aAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,aAAA6M,GAAAtH,MAAAqa,GAAA/S,GAWAjJ,gBAAAmI,EAAA0S,GACA,GAAAA,IAAAA,aAAAtF,IAAA1P,MAAAC,KAAA+U,GAAAzV,OAAA,GAMA,MAAA,IAAAhE,EAAA,4EAoBApB,OAAAgwB,GACA,OAAA7vB,KAAA8vB,aAAAD,GAUAhwB,aAAAgwB,GACA,MAAAE,EAAAF,EAAAG,cAAAhwB,KAAA/D,MAEA,IAAA,MAAA8E,KAAAf,KAAAiwB,mBACAF,EAAAG,aAAAnvB,EAAAf,KAAAgY,aAAAjX,IAGA,OAAAgvB,GAaA,SAAAI,GAAAC,GACAA,EAAAza,SAAAgL,GAAA,UAAA,CAAAC,EAAAxf,KAaA,SAAAwf,EAAAxf,EAAAivB,GACA,GAAAjvB,EAAA+tB,SAAAjB,GAAAI,WAAA,CACA,MAAAgC,EAAAlvB,EAAAmvB,UAAAC,cAAAC,YAAAC,eACAC,EAAA,GAAAL,EAAAhI,YAAAgI,EAAAM,WAAA,GAAAC,UAGA,GAAAF,GAAAvvB,EAAAkuB,SAAA,CACA,MAAAwB,EAAAR,EAAAS,UACAC,EAAAV,EAAAW,YAEAC,EAAAb,EAAAc,kBAAAL,EAAAE,GAGA,GAAA,OAAAE,EACA,OAIA,IAAAE,GAAA,EAEA,MAAAC,EAAAH,EAAAlL,wBAAAtpB,IACAA,EAAA4a,KAAAuE,GAAA,eAEAuV,GAAA,MAIA10B,EAAA4a,KAAAuE,GAAA,eAAAnf,EAAA4a,KAAAuE,GAAA,uBAUA,GAAAuV,EAAA,CACA,MAAAE,EAAAjB,EAAAkB,kBAAAF,GAEAV,EAEAL,EAAAkB,SAAAF,EAAAjc,OAAAic,EAAAhiB,QAGAghB,EAAAmB,OAAAH,EAAAjc,OAAAic,EAAAhiB;;;;IA1DAoiB,CAAA9Q,EAAAxf,EAAAgvB,EAAAC,eAMA,SAAAT,KACA,OAAA,WC1GA+B,GAQA9xB,YAAAxB,GAOA2B,KAAA8Y,aAEAza,GACA2B,KAAA+Y,gBAAA,EAAA1a,GAWAwB,CAAAoD,OAAAiU,YACA,OAAAlX,KAAA8Y,UAAA7V,OAAAiU,YASAqC,iBACA,OAAAvZ,KAAA8Y,UAAA7T,OASAuU,cACA,OAAA,IAAAxZ,KAAAuZ,WASAve,WACA,OAAAgF,KASAqV,aACA,OAAA,KAWAxV,GAAAiJ,GACA,MAAA,oBAAAA,EAUAjJ,gBAAA2a,GACA,OAAAxa,KAAA+Y,gBAAA/Y,KAAAuZ,WAAAiB,GASA3a,SAAAmI,GACA,OAAAhI,KAAA8Y,UAAA9Q,GASAnI,cAAA6E,GACA,OAAA1E,KAAA8Y,UAAAtT,QAAAd,GAQA7E,cACA,OAAAG,KAAA8Y,UAAA7V,OAAAiU,YAWArX,gBAAAmI,EAAAwS,GACAxa,KAAAmW,YAAA,WAAAnW,MACA,IAAAya,EAAA,EAEA,MAAAC,EAsDA,SAAAA,GAEA,GAAA,iBAAAA,EACA,OAAA,IAAApE,GAAAoE,IAGAzD,GAAAyD,KACAA,GAAAA,IAIA,OAAAhV,MAAAC,KAAA+U,GACAzP,IAAAvG,GACA,iBAAAA,EACA,IAAA4R,GAAA5R,GAGAA,aAAAgS,GACA,IAAAJ,GAAA5R,EAAAtD,MAGAsD;;;;GA3EAktB,CAAApX,GAEA,IAAA,MAAA9V,KAAAgW,EAEA,OAAAhW,EAAA2Q,QACA3Q,EAAAkW,UAGAlW,EAAA2Q,OAAArV,KAEAA,KAAA8Y,UAAA5T,OAAA8C,EAAA,EAAAtD,GACAsD,IACAyS,IAGA,OAAAA,EAUA5a,gBAAAmI,EAAA6S,EAAA,GACA7a,KAAAmW,YAAA,WAAAnW,MAEA,IAAA,IAAAtE,EAAAsM,EAAsBtM,EAAAsM,EAAA6S,EAAqBnf,IAC3CsE,KAAA8Y,UAAApd,GAAA2Z,OAAA,KAGA,OAAArV,KAAA8Y,UAAA5T,OAAA8C,EAAA6S,GAWAhb,YAAAiJ,EAAApE,GACA1E,KAAA+G,KAAA,UAAA+B,EAAApE,IAIAsC,EAAA2qB,GAAAtb,SChLAwb,GACAhyB,YAAA8V,GAKA3V,KAAA2V,SAAAA,EAqEA9V,aAAA8nB,EAAAC,EAAAvkB,GACArD,KAAA2V,SAAA4M,UAAA0F,OAAAN,EAAAC,EAAAvkB,GAYAxD,kBAAA+lB,EAAAtW,GACAtP,KAAA2V,SAAA4M,UAAAuP,UAAAlM,EAAAtW,GAWAzP,WAAAuB,GACA,OAAA,IAAAkV,GAAAlV,GAaAvB,uBAAA5D,EAAA+d,EAAAtX,GACA,MAAAqvB,EAAA,IAAAjF,GAAA7wB,EAAA+d,GAMA,OAJAtX,IACAqvB,EAAAhF,UAAArqB,GAGAqvB,EAaAlyB,uBAAA5D,EAAA+d,GACA,OAAA,IAAA2B,GAAA1f,EAAA+d,GAcAna,sBAAA5D,EAAA+d,GACA,MAAAwI,EAAA,IAAAP,GAAAhmB,EAAA+d,GAGA,OAFAwI,EAAAL,UAAAniB,KAAA2V,SAEA6M,EAaA3iB,mBAAA5D,EAAA+d,GACA,OAAA,IAAAoT,GAAAnxB,EAAA+d,GAuBAna,gBAAA5D,EAAA+d,EAAAgY,GACA,MAAAC,EAAA,IAAAtC,GAAA1zB,EAAA+d,GAMA,OAJAgY,IACAC,EAAAC,OAAAF,GAGAC,EASApyB,YAAAnD,EAAAia,GACAA,EAAAH,MAAA9Z,EAYAmD,aAAAkB,EAAArE,EAAA8a,GACAA,EAAA2a,cAAApxB,EAAArE,GAWAmD,gBAAAkB,EAAAyW,GACAA,EAAA4a,iBAAArxB,GAYAlB,SAAA+Z,EAAApC,GACAA,EAAA6a,UAAAzY,GAYA/Z,YAAA+Z,EAAApC,GACAA,EAAA8a,aAAA1Y,GAgBA/Z,SAAA/C,EAAAJ,EAAA8a,GACAhY,EAAA1C,SAAAS,IAAAia,IACAA,EAAA9a,GAGA8a,EAAA+a,UAAAz1B,EAAAJ,GAYAmD,YAAA/C,EAAA0a,GACAA,EAAAgb,aAAA11B,GAWA+C,kBAAAkB,EAAArE,EAAA8a,GACAA,EAAA4K,mBAAArhB,EAAArE,GAUAmD,qBAAAkB,EAAAyW,GACA,OAAAA,EAAAib,sBAAA1xB,GA0CAlB,gBAAA6yB,GACA,OAAAA,aAAAxP,GACAyP,GAAAD,GAEAE,GAAAF,GA2BA7yB,eAAAojB,GACA,MAAAzL,EAAAyL,EAAA5N,OAEA,IAAAmC,EAAAqE,GAAA,oBAMA,MAAA,IAAA5a,EACA,yGAIA,IAAAuW,EAAAnC,OAMA,MAAA,IAAApU,EAAA,yDAGA,GAAAgiB,EAAAoB,UACA,OAAAnB,GAAAoB,aAAA9M,GACG,IAAAyL,EAAAc,QAAA,CACH,MAAA8O,EAAArb,EAAA6C,QAAA,GAEAra,KAAA8yB,OAAA5P,GAAAc,YAAAxM,GAAAqb,GAEA,MAAAE,EAAA,IAAAlN,GAAA5C,EAAAC,GAAAqE,SAAA/P,EAAA,QACAwb,EAAA,IAAA9P,GAAA2P,EAAA,GAEA7yB,KAAAizB,KAAAF,EAAAC,GAGA,OAAA9P,GAAAc,YAAAxM,GA6BA3X,gBAAAojB,GACA,MAAAiQ,EAAAjQ,EAAA3T,OACA6jB,EAAAlQ,EAAA5N,OAGA,GAAA8d,EAAAtX,GAAA,QACA,OAAAoH,EAIA,GAAAkQ,EAAAtX,GAAA,qBAAA,IAAAsX,EAAA5Z,WAAA,CACA,MAAAlE,EAAA8d,EAAA9d,OACA/F,EAAA6jB,EAAAnrB,MAGA,OAFAmrB,EAAAvY,UAEA5a,KAAAozB,gBAAA,IAAAlQ,GAAA7N,EAAA/F,IAGA,MAAAyV,EAAAoO,EAAA1d,SAAAyd,EAAA,GACApO,EAAAqO,EAAA1d,SAAAyd,GAGA,IAAAnO,IAAAD,EACA,OAAA7B,EAIA,GAAA8B,EAAAlJ,GAAA,SAAAiJ,EAAAjJ,GAAA,QACA,OAAAwX,GAAAtO,EAAAD,GAGA,GAAAC,EAAAlJ,GAAA,qBAAAiJ,EAAAjJ,GAAA,qBAAAkJ,EAAAkI,UAAAnI,GAAA,CAEA,MAAArK,EAAAsK,EAAAxL,WAMA,OALAwL,EAAAuO,gBAAAxO,EAAA1K,eACA0K,EAAAlK,UAIA5a,KAAAozB,gBAAA,IAAAlQ,GAAA6B,EAAAtK,IAGA,OAAAwI,EAqBApjB,gBAAAojB,GACA,MAAAsQ,EAAAtQ,EAAA8B,WACA9G,EAAAgF,EAAA6B,UAEA,KAAAyO,GAAAtV,GAAAsV,EAAA1X,GAAA,qBAAAoC,EAAApC,GAAA,qBAMA,MAAA,IAAA5a,EAAA,4GAIA,MAAAuyB,EAAAD,EAAA9d,SAAA8d,EAAAha,WAAA,GACAka,EAAAD,aAAAld,GAAA4M,GAAAqE,SAAAiM,EAAA,OAAAtQ,GAAAqE,SAAAgM,EAAA,OAKA,OAHAvzB,KAAAizB,KAAApN,GAAA8D,SAAA1L,GAAAiF,GAAAqE,SAAAgM,EAAA,QACAvzB,KAAAyrB,OAAA5F,GAAA+D,SAAA3L,IAEAwV,EAsBA5zB,OAAAojB,EAAAvI,IA+7BA,SAAAgZ,EAAAhZ,GACA,IAAA,MAAAhW,KAAAgW,EAAA,CACA,IAAAiZ,GAAAC,KAAAC,GAAAnvB,aAAAmvB,GASA,MAAA,IAAA5yB,EAAA,mCAGAyD,EAAAmX,GAAA,SACA6X,EAAAhvB,EAAA0V,iBA18BAsZ,CAHAhZ,EAAAzD,GAAAyD,OAAAA,IAAAA,IAKA,MAAAoZ,EAAAC,GAAA9Q,GAEA,IAAA6Q,EAMA,MAAA,IAAA7yB,EAAA,0CAGA,MAAA+yB,EAAArB,GAAA1P,GAAA,GAEAhe,EAAA6uB,EAAA/a,gBAAAib,EAAA1kB,OAAAoL,GACAuZ,EAAAD,EAAA5M,aAAAniB,GACAqY,EAAAtd,KAAAozB,gBAAAY,GAGA,GAAA,IAAA/uB,EACA,OAAA,IAAA4gB,GAAAvI,EAAAA,GACG,CAEHA,EAAAmH,QAAAuP,IACAC,EAAA3kB,SAGA,MAAAmU,EAAAzjB,KAAAozB,gBAAAa,GAEA,OAAA,IAAApO,GAAAvI,EAAAmG,IAeA5jB,OAAAsnB,GAIA,GAHA+M,GAAA/M,GAGAA,EAAArB,YACA,OAAA,IAAA6L,GAIA,MAASrU,MAAA6W,EAAA1Q,IAAA2Q,GAAmCxB,GAAAzL,GAAA,GAC5CkN,EAAAF,EAAA9e,OAEAoF,EAAA2Z,EAAA9kB,OAAA6kB,EAAA7kB,OAGAglB,EAAAD,EAAAne,gBAAAie,EAAA7kB,OAAAmL,GAGA8Z,EAAAv0B,KAAAozB,gBAAAe,GAKA,OAJAhN,EAAA7J,MAAAiX,EACApN,EAAA1D,IAAAP,GAAAC,mBAAAoR,GAGA,IAAA5C,GAAA2C,GAaAz0B,MAAAsnB,EAAA3P,GACA0c,GAAA/M,GAIA,MAAAqN,EAAArN,EAAAsN,WACAzR,UAAA,WACAM,kBAAA,IAIA,IAAA,MAAAoR,KAAAF,EAAA,CACA,MAAAld,EAAAod,EAAApd,KACA,IAAAqd,EAGA,GAAArd,EAAAuE,GAAA,YAAArE,EAAAyV,UAAA3V,GAEAqd,EAAA9O,GAAA+D,SAAAtS,QAEI,IAAAod,EAAAlQ,aAAA0B,QAAAiB,EAAA7J,QAAAhG,EAAAuE,GAAA,aAAA,CAEJ,MAAA+Y,EAAAtd,EAAAtB,eAAAsV,KAAAuJ,GACAA,EAAAhZ,GAAA,YAAArE,EAAAyV,UAAA4H,IAIAD,IACAD,EAAA9O,GAAA8D,SAAAiL,IAKAD,IAEAA,EAAAlR,IAAAyC,QAAAiB,EAAA1D,OACAkR,EAAAlR,IAAA0D,EAAA1D,KAGAkR,EAAArX,MAAAgJ,SAAAa,EAAA7J,SACAqX,EAAArX,MAAA6J,EAAA7J,OAIAtd,KAAAyrB,OAAAkJ,KAiBA90B,KAAAkzB,EAAAC,GACA,IAAAtY,EAEA,GAAAsY,EAAA9M,QAAA6M,EAAAtP,KAAA,CAGA,MAAApO,GAFA2d,EAAAL,GAAAK,GAAA,IAEA3d,OACAyf,EAAAzf,EAAAkE,WAEAwZ,EAAAH,GAAAG,GAAA,GAEArY,EAAA1a,KAAAyrB,OAAAsH,GAEAC,EAAA1jB,QAAA+F,EAAAkE,WAAAub,OAEApa,EAAA1a,KAAAyrB,OAAAsH,GAGA,OAAA/yB,KAAA8yB,OAAAE,EAAAtY,GAwBA7a,KAAAsnB,EAAAtP,GACA,KAAAA,aAAAiV,IACA,MAAA,IAAA7rB,EAAA,sCAKA,GAFAizB,GAAA/M,GAEAA,EAAArB,YAGG,CAEH,IAAA7C,EAAAkE,EAAA7J,MAEA2F,EAAA5N,OAAAwG,GAAA,aAmeAxG,EAneA4N,EAAA5N,QAoeA3P,MAAAC,KAAA0P,EAAA+E,eAAAwZ,KAAAzZ,IAAAA,EAAA0B,GAAA,iBAneAoH,EAAAA,EAAA+C,wBAAAtpB,GAAAA,EAAA4a,KAAAuE,GAAA,eAGAoH,EAAAjjB,KAAA+0B,cAAA9R,EAAApL,GACA,MAAAmd,EAAAh1B,KAAA2V,SAAA4M,UAOA,OAJAyS,EAAAlP,aAAAkP,EAAAC,mBAAAxQ,QAAA0C,EAAA7J,QACAtd,KAAAk1B,aAAAjS,GAGA,IAAA4C,GAAA5C,GAjBA,OAAAjjB,KAAAm1B,WAAAhO,EAAAtP,GAweA,IAAAxC,EAzcAxV,OAAAsnB,EAAAtP,GACA,KAAAA,aAAAiV,IAMA,MAAA,IAAA7rB,EAAA,wCAMA,GAHAizB,GAAA/M,GAGAA,EAAArB,YACA,OAAAqB,EAIA,MAAS7J,MAAA6W,EAAA1Q,IAAA2Q,GAAmCxB,GAAAzL,GAAA,GAK5C,GAAAiN,EAAA3P,QAAA0P,EAAA/M,aAAA,IAAA,CACA,MAAA1iB,EAAAyvB,EAAArP,UAGA,IAAAjN,EAAAoV,UAAAvoB,IAAAA,aAAAooB,IAAA9sB,KAAAo1B,wBAAAvd,EAAAnT,GAAA,CACA,MAAA4Y,EAAAtd,KAAAozB,gBAAAe,GAEA7W,EAAAmH,QAAA0P,IACAC,EAAA9kB,SAGA,MAAAmU,EAAAzjB,KAAAozB,gBAAAgB,GAEA,OAAA,IAAAvO,GAAAvI,EAAAmG,IAIA,MAAA4Q,EAAAF,EAAA9e,OAGAggB,EAAAr1B,KAAAs1B,gBAAAjB,EAAAF,EAAA7kB,OAAA8kB,EAAA9kB,OAAAuI,GAGAyF,EAAAtd,KAAAozB,gBAAAiC,EAAA/X,OAGAA,EAAAmH,QAAA4Q,EAAA/X,QACA+X,EAAA5R,IAAAnU,SAGA,MAAAmU,EAAAzjB,KAAAozB,gBAAAiC,EAAA5R,KAEA,OAAA,IAAAoC,GAAAvI,EAAAmG,GAeA5jB,OAAA01B,EAAAC,GACA,MAAA3C,EAAA,IAAAlX,GAAA6Z,EAAAD,EAAAE,iBAMA,OAJAz1B,KAAA8yB,OAAA5P,GAAAc,YAAAuR,GAAA1C,GACA7yB,KAAAizB,KAAApN,GAAA8D,SAAA4L,GAAArS,GAAAqE,SAAAsL,IACA7yB,KAAAyrB,OAAA5F,GAAA+D,SAAA2L,IAEA1C,EAaAhzB,cAAAwV,EAAAkP,EAAAS,EAAAnN,GACA,IAAAnc,EAAA6oB,EACA,MAAAmR,KAEA,KAAAh6B,EAAAspB,GAAA,CACA,MAAA7K,EAAA9E,EAAAI,SAAA/Z,GACAi6B,EAAAxb,EAAA0B,GAAA,QACA+Z,EAAAzb,EAAA0B,GAAA,oBACArC,EAAAW,EAAA0B,GAAA,gBACAga,EAAA1b,EAAA0B,GAAA,aAGA,GAAA8Z,GAAAnc,GAAAqc,GAAAD,GAAAE,GAAAje,EAAAsC,GAAA,CAEA,MAAA4b,EAAAle,EAAAwC,SAGAF,EAAAS,UACAmb,EAAAzC,gBAAAnZ,GACA9E,EAAA0D,gBAAArd,EAAAq6B,GAEAL,EAAAzxB,KAAA,IAAAif,GAAA7N,EAAA3Z,SAGAk6B,GACA51B,KAAAg2B,cAAA7b,EAAA,EAAAA,EAAAZ,WAAA1B,GAGAnc,IAIA,IAAAu6B,EAAA,EAEA,IAAA,MAAAhT,KAAAyS,EAAA,CAIA,GAHAzS,EAAA3T,QAAA2mB,EAGAhT,EAAA3T,QAAAiV,EACA,SAGAvkB,KAAAozB,gBAAAnQ,GAGAwB,QAAAxB,KACAgT,IACAjR,KAIA,OAAAa,GAAAwB,4BAAAhS,EAAAkP,EAAAlP,EAAA2P,GAaAnlB,gBAAAwV,EAAAkP,EAAAS,EAAAnN,GACA,IAAAnc,EAAA6oB,EACA,MAAA2R,KAGA,KAAAx6B,EAAAspB,GAAA,CACA,MAAA7K,EAAA9E,EAAAI,SAAA/Z,GAGA,GAAAye,EAAA8S,UAAApV,GAAA,CACA,MAAAse,EAAAhc,EAAAC,cACAK,EAAAN,EAAAZ,WAGAY,EAAAS,UACAvF,EAAA0D,gBAAArd,EAAAy6B,GAGAD,EAAAjyB,KACA,IAAAif,GAAA7N,EAAA3Z,GACA,IAAAwnB,GAAA7N,EAAA3Z,EAAA+e,IAKA/e,GAAA+e,EACAuK,GAAAvK,EAAA,OAGAN,EAAA0B,GAAA,qBACA7b,KAAAs1B,gBAAAnb,EAAA,EAAAA,EAAAZ,WAAA1B,GAGAnc,IAKA,IAAAu6B,EAAA,EAEA,IAAA,MAAAhT,KAAAiT,EAAA,CAIA,GAHAjT,EAAA3T,QAAA2mB,EAGAhT,EAAA3T,QAAAiV,GAAAtB,EAAA3T,QAAA0V,EACA,SAGAhlB,KAAAozB,gBAAAnQ,GAGAwB,QAAAxB,KACAgT,IACAjR,KAIA,OAAAa,GAAAwB,4BAAAhS,EAAAkP,EAAAlP,EAAA2P,GAeAnlB,WAAAsnB,EAAAtP,GAEA,GAmeA,SAAAsP,GACA,OAAAA,EAAA7J,MAAAjI,QAAA8R,EAAA1D,IAAApO,QAAA8R,EAAA7J,MAAAjI,OAAAwG,GAAA,qBACA,IAAAsL,EAAA7J,MAAAhO,QAAA6X,EAAA1D,IAAAnU,SAAA6X,EAAA7J,MAAAjI,OAAAkE,WAreA6c,CAAAjP,IAAAnnB,KAAAq2B,sBAAAxe,EAAAsP,EAAA7J,MAAAjI,QAAA,CACA,MAAAA,EAAA8R,EAAA7J,MAAAjI,OAEAoO,EAAAzjB,KAAAozB,gBAAAlQ,GAAAc,YAAA3O,IACAiI,EAAAtd,KAAAozB,gBAAAlQ,GAAAoB,aAAAjP,IAEA,OAAA,IAAAwQ,GAAAvI,EAAAmG,GAIA,MAASnG,MAAA6W,EAAA1Q,IAAA2Q,GAAmCxB,GAAAzL,GAAA,GAG5C,GAAAiN,EAAA3P,QAAA0P,EAAA/M,aAAA,IAAA,CACA,MAAA1iB,EAAAyvB,EAAArP,UAEA,GAAApgB,aAAAooB,IAAA9sB,KAAAq2B,sBAAAxe,EAAAnT,GAAA,CACA,MAAA4Y,EAAAtd,KAAAozB,gBAAAe,GAEA7W,EAAAmH,QAAA0P,IACAC,EAAA9kB,SAGA,MAAAmU,EAAAzjB,KAAAozB,gBAAAgB,GAEA,OAAA,IAAAvO,GAAAvI,EAAAmG,IAIA,MAAA4Q,EAAAF,EAAA9e,OAGAihB,EAAAt2B,KAAAs1B,gBAAAjB,EAAAF,EAAA7kB,OAAA8kB,EAAA9kB,OAAAuI,GAGAwd,EAAAr1B,KAAAg2B,cAAA3B,EAAAiC,EAAAhZ,MAAAhO,OAAAgnB,EAAA7S,IAAAnU,OAAAuI,GAGAyF,EAAAtd,KAAAozB,gBAAAiC,EAAA/X,OAGAA,EAAAmH,QAAA4Q,EAAA/X,QACA+X,EAAA5R,IAAAnU,SAEA,MAAAmU,EAAAzjB,KAAAozB,gBAAAiC,EAAA5R,KAEA,OAAA,IAAAoC,GAAAvI,EAAAmG,GAeA5jB,cAAAojB,EAAApL,GAEA,GAAAA,EAAAoV,UAAAhK,EAAA5N,QACA,OAAAkhB,GAAArT,GAAAC,mBAAAF,IAIAA,EAAA5N,OAAAwG,GAAA,UACAoH,EAAAuT,GAAAvT,IAIA,MAAAwT,EAAAz2B,KAAA02B,yBACAD,EAAA1J,UAAA4J,OAAAC,kBACAH,EAAAxJ,UAAA,MAAA,GAGAhK,EAAA5N,OAAA0D,gBAAAkK,EAAA3T,OAAAmnB,GAGA,MAAAI,EAAA,IAAAhR,GAAA5C,EAAAA,EAAAmE,aAAA,IAGApnB,KAAA82B,KAAAD,EAAAhf,GAGA,MAAA4b,EAAA,IAAAvQ,GAAAuT,EAAAphB,OAAAohB,EAAAzuB,OACAyuB,EAAA7b,UAGA,MAAAmK,EAAA0O,EAAA1O,WACAD,EAAA2O,EAAA3O,UAEA,OAAAC,aAAAzO,IAAAwO,aAAAxO,GACA+c,GAAAtO,EAAAD,GAIAyR,GAAA9C,GAaA5zB,sBAAAk3B,EAAAC,GAEA,GAAAD,EAAA96B,OAAA+6B,EAAA/6B,MAAA86B,EAAAr0B,WAAAs0B,EAAAt0B,SACA,OAAA,EAIA,IAAA,MAAA3B,KAAAg2B,EAAA9G,mBAEA,GAAA,UAAAlvB,GAAA,UAAAA,GAKAi2B,EAAAjf,aAAAhX,IAAAi2B,EAAAhf,aAAAjX,KAAAg2B,EAAA/e,aAAAjX,GACA,OAAA,EAKA,IAAA,MAAAA,KAAAg2B,EAAAE,gBACA,GAAAD,EAAAze,SAAAxX,IAAAi2B,EAAAxe,SAAAzX,KAAAg2B,EAAAve,SAAAzX,GACA,OAAA,EAKA,IAAA,MAAAA,KAAAg2B,EAAA9G,mBAEA,UAAAlvB,GAAA,UAAAA,IAKAi2B,EAAAjf,aAAAhX,IACAf,KAAAkwB,aAAAnvB,EAAAg2B,EAAA/e,aAAAjX,GAAAi2B,IAIA,IAAA,MAAAj2B,KAAAg2B,EAAAE,gBACAD,EAAAze,SAAAxX,IACAf,KAAAk3B,SAAAn2B,EAAAg2B,EAAAve,SAAAzX,GAAAi2B,GAIA,IAAA,MAAAj2B,KAAAg2B,EAAA5e,gBACA6e,EAAA5e,SAAArX,IACAf,KAAAm3B,SAAAp2B,EAAAi2B,GAIA,OAAA,EAaAn3B,wBAAAk3B,EAAAK,GAEA,GAAAL,EAAA96B,OAAAm7B,EAAAn7B,MAAA86B,EAAAr0B,WAAA00B,EAAA10B,SACA,OAAA,EAIA,IAAA,MAAA3B,KAAAg2B,EAAA9G,mBAEA,GAAA,UAAAlvB,GAAA,UAAAA,KAKAq2B,EAAArf,aAAAhX,IAAAq2B,EAAApf,aAAAjX,KAAAg2B,EAAA/e,aAAAjX,IACA,OAAA,EAKA,IAAAq2B,EAAAhf,YAAA2e,EAAA5e,iBACA,OAAA,EAIA,IAAA,MAAApX,KAAAg2B,EAAAE,gBAEA,IAAAG,EAAA7e,SAAAxX,IAAAq2B,EAAA5e,SAAAzX,KAAAg2B,EAAAve,SAAAzX,GACA,OAAA,EAKA,IAAA,MAAAA,KAAAg2B,EAAA9G,mBAEA,UAAAlvB,GAAA,UAAAA,GAIAf,KAAAq3B,gBAAAt2B,EAAAq2B,GASA,OALAp3B,KAAAs3B,YAAA5xB,MAAAC,KAAAoxB,EAAA5e,iBAAAif,GAGAp3B,KAAAu3B,YAAA7xB,MAAAC,KAAAoxB,EAAAE,iBAAAG,IAEA,GAsBA,SAAArD,GAAA9Q,GACA,IAAA5N,EAAA4N,EAAA5N,OAEA,MAAAmiB,GAAAniB,IAAA,CACA,IAAAA,EACA,OAEAA,EAAAA,EAAAA,OAGA,OAAAA,EAWA,SAAAud,GAAAzL,EAAAsQ,GAAA,GACA,MAAAC,EAAAvQ,EAAA7J,MACAqa,EAAAxQ,EAAA1D,IAKA,GAHAyQ,GAAA/M,GAGAA,EAAArB,YAAA,CACA,MAAA7C,EAAA0P,GAAAxL,EAAA7J,MAAAma,GAEA,OAAA,IAAA5R,GAAA5C,EAAAA,GAGA,MAAAmR,EAAAzB,GAAAgF,EAAAF,GACAhd,EAAA2Z,EAAA/e,OAAAkE,WACA4a,EAAAxB,GAAA+E,EAAAD,GAKA,OAFArD,EAAA9kB,QAAA8kB,EAAA/e,OAAAkE,WAAAkB,EAEA,IAAAoL,GAAAsO,EAAAC,GAiBA,SAAAzB,GAAA1P,EAAAwU,GAAA,GACA,MAAAvE,EAAAjQ,EAAA3T,OACA6jB,EAAAlQ,EAAA5N,OAGA,GAAA4N,EAAA5N,OAAAwG,GAAA,gBAMA,MAAA,IAAA5a,EAAA,0CAIA,GAAAgiB,EAAA5N,OAAAwG,GAAA,aAMA,MAAA,IAAA5a,EAAA,uCAIA,IAAAw2B,GAAAtE,EAAAtX,GAAA,SAAA2b,GAAArE,EAAA9d,QACA,OAAA6N,GAAAC,mBAAAF,GAIA,GAAAuU,GAAArE,GACA,OAAAjQ,GAAAC,mBAAAF,GAIA,GAAAkQ,EAAAtX,GAAA,QACA,OAAA8W,GAAA6D,GAAAvT,GAAAwU,GAQA,GAAAvE,GALAC,EAAA5Z,WAKA,CAGA,OAAAoZ,GAFA,IAAAzP,GAAAiQ,EAAA9d,OAAA8d,EAAAnrB,MAAA,GAEAyvB,GAKA,GAAA,IAAAvE,EAAA,CAGA,OAAAP,GAFA,IAAAzP,GAAAiQ,EAAA9d,OAAA8d,EAAAnrB,OAEAyvB,GAMA,CACA,MAAAG,EAAAzE,EAAAnrB,MAAA,EAGA6vB,EAAA1E,EAAA9Y,SAGA8Y,EAAA9d,OAAA0D,gBAAA6e,EAAAC,GAGA,MAAApd,EAAA0Y,EAAA5Z,WAAA2Z,EACA4E,EAAA3E,EAAAjd,gBAAAgd,EAAAzY,GAQA,OALAod,EAAAvE,gBAAAwE,GAKAnF,GAFA,IAAAzP,GAAAiQ,EAAA9d,OAAAuiB,GAEAH,IAYA,SAAA3B,GAAArW,EAAAkF,GACA,OAAAlF,EAAA/c,SAAAiiB,EAAAjiB,YAEE+c,EAAA/c,SAAAiiB,EAAAjiB,WAKF+c,EAAAsY,cAAApT,EAAAoT,cAYA,SAAAxB,GAAAtT,GACA,MAAA8B,EAAA9B,EAAA8B,WAEA,GAAAA,GAAAA,EAAAlJ,GAAA,QACA,OAAA,IAAAqH,GAAA6B,EAAAA,EAAA3jB,KAAA6D,QAGA,MAAA6f,EAAA7B,EAAA6B,UAEA,OAAAA,GAAAA,EAAAjJ,GAAA,QACA,IAAAqH,GAAA4B,EAAA,GAGA7B,EAWA,SAAAuT,GAAAvT,GACA,GAAAA,EAAA3T,QAAA2T,EAAA5N,OAAAjU,KAAA6D,OACA,OAAA,IAAAie,GAAAD,EAAA5N,OAAAA,OAAA4N,EAAA5N,OAAArN,MAAA,GAGA,GAAA,IAAAib,EAAA3T,OACA,OAAA,IAAA4T,GAAAD,EAAA5N,OAAAA,OAAA4N,EAAA5N,OAAArN,OAIA,MAAAgwB,EAAA/U,EAAA5N,OAAAjU,KAAAuD,MAAAse,EAAA3T,QASA,OANA2T,EAAA5N,OAAAmB,MAAAyM,EAAA5N,OAAAjU,KAAAuD,MAAA,EAAAse,EAAA3T,QAGA2T,EAAA5N,OAAAA,OAAA0D,gBAAAkK,EAAA5N,OAAArN,MAAA,EAAA,IAAAsO,GAAA0hB,IAGA,IAAA9U,GAAAD,EAAA5N,OAAAA,OAAA4N,EAAA5N,OAAArN,MAAA,GASA,SAAAqrB,GAAA4E,EAAAC,GAEA,MAAAC,EAAAF,EAAA72B,KAAA6D,OAIA,OAHAgzB,EAAAzhB,OAAA0hB,EAAA92B,KACA82B,EAAAtd,UAEA,IAAAsI,GAAA+U,EAAAE,GAiDA,MAAAxE,IAAArd,GAAAwW,GAAAnR,GAAAyR,GAAAuC,IAMA,SAAA6H,GAAA9yB,GACA,OAAAA,IAAAA,EAAAmX,GAAA,qBAAAnX,EAAAmX,GAAA,qBAQA,SAAAqY,GAAA/M,GACA,MAAAiR,EAAArE,GAAA5M,EAAA7J,OACA+a,EAAAtE,GAAA5M,EAAA1D,KAEA,IAAA2U,IAAAC,GAAAD,IAAAC,EAQA,MAAA,IAAAp3B,EAAA;;;;GC3gDA,MAAAq3B,GAAAzI,IACA,MAAA0I,EAAA1I,EAAAG,cAAA,MAGA,OAFAuI,EAAAC,QAAAC,WAAA,EAEAF,GAUAG,GAAA7I,GAAAA,EAAA8I,eAAA,KAKAC,GAAA,EAKA,IAAAC,GAAA,GAEA,IAAA,IAAAn9B,EAAA,EAAgBA,EAAAk9B,GAA0Bl9B,IAC1Cm9B,IAAA,IAcA,SAAAC,GAAAC,GACA,OAAAA,aAAAC,MAAAD,EAAA33B,KAAAoD,OAAA,EAAAo0B,MAAAC,GAYA,SAAAI,GAAAC,GACA,OAAAA,EAAA93B,KAAA6D,QAAA2zB,IAAAE,GAAAI,GAaA,SAAAC,GAAAD,GACA,OAAAJ,GAAAI,GACAA,EAAA93B,KAAAuD,MAAAi0B,IAEAM,EAAA93B,KAKA,MAAAg4B,GAAA,IAAAxO,QAYA,SAAAyO,GAAAN,EAAAO,GACA,IAAAC,EAAAH,GAAA58B,IAAA88B,GAOA,OALAC,IACAA,EAAAD,EAAAh+B,OAAAqa,UACAyjB,GAAA/yB,IAAAizB,EAAAC,IAGAR,EAAAS,YAAAD,GAcA,SAAAE,GAAA7Y,EAAAxf,GACA,GAAAA,EAAA+tB,SAAAjB,GAAAE,UAAA,CACA,MAAAkC,EAAAlvB,EAAAmvB,UAAAC,cAAAC,YAAAC,eAEA,GAAA,GAAAJ,EAAAhI,YAAAgI,EAAAM,WAAA,GAAAC,UAAA,CACA,MAAAC,EAAAR,EAAAM,WAAA,GAAAwH,eACApH,EAAAV,EAAAM,WAAA,GAAArM,YAEAuU,GAAAhI,IAAAE,GAAA4H,IACAtI,EAAAkB,SAAAV,EAAA;;;;GC7IA,SAAA4I,GAAAja,EAAAkF,EAAAgV,GAOA,IAAAC,EAAAC,EAGA,GARAF,EAAAA,GAAA,SAAAla,EAAAkF,GACA,OAAAlF,IAAAkF,GAOAA,EAAA1f,OAAAwa,EAAAxa,OAAA,CACA,MAAA60B,EAAAra,EAEAA,EAAAkF,EACAA,EAAAmV,EAGAF,EAAA,SACAC,EAAA,cAEAD,EAAA,SACAC,EAAA,SAGA,MAAA/9B,EAAA2jB,EAAAxa,OACAtI,EAAAgoB,EAAA1f,OACA80B,EAAAp9B,EAAAb,EAGAk+B,KAEAC,KAEA,SAAAC,EAAAC,GAGA,MAAAC,QAAA78B,IAAA08B,EAAAE,EAAA,GAAAF,EAAAE,EAAA,IAAA,GAAA,EAEAE,OAAA98B,IAAA08B,EAAAE,EAAA,GAAAF,EAAAE,EAAA,IAAA,EAEAG,EAAAF,EAAAC,GAAA,EAAA,EAGAL,EAAAG,EAAAG,KACAN,EAAAG,GAAAH,EAAAG,EAAAG,GAAA31B,MAAA,IAIAq1B,EAAAG,KACAH,EAAAG,OAIAH,EAAAG,GAAAl2B,KAAAm2B,EAAAC,EAAAT,EAAAC,GAGA,IAAAU,EAAAl4B,KAAA+a,IAAAgd,EAAAC,GACAG,EAAAD,EAAAJ,EAGA,KAAAK,EAAA1+B,GAAAy+B,EAAA59B,GAAAg9B,EAAAla,EAAA+a,GAAA7V,EAAA4V,KACAC,IACAD,IAEAP,EAAAG,GAAAl2B,KAAA,SAGA,OAAAs2B,EAGA,IACAJ,EADAl9B,EAAA,EAIA,EAAA,CAEA,IAAAk9B,GAAAl9B,EAAek9B,EAAAJ,EAAWI,IAC1BF,EAAAE,GAAAD,EAAAC,GAIA,IAAAA,EAAAJ,EAAA98B,EAAsBk9B,EAAAJ,EAAWI,IACjCF,EAAAE,GAAAD,EAAAC,GAKAF,EAAAF,GAAAG,EAAAH,GAEA98B,UACEg9B,EAAAF,KAAAp9B,GAIF,OAAAq9B,EAAAD,GAAAp1B,MAAA;;;;GCrGA,SAAA81B,GAAA7F,EAAA5sB,EAAA0yB,GACA9F,EAAA+F,aAAAD,EAAA9F,EAAAgG,WAAA5yB,IAAA;;;;GCHA,SAAA6yB,GAAAn2B,GACA,MAAA2Q,EAAA3Q,EAAAo2B,WAEAzlB,GACAA,EAAA0lB,YAAAr2B;;;;GCHA,SAAAs2B,GAAAhkB,GACA,MAAA,iBAAA5a,OAAAW,UAAAgC,SAAAlD,KAAAmb;;;;SCkBAikB,GAOAp7B,YAAAwwB,EAAA9N,GAOAviB,KAAAk7B,aAAA,IAAAjiB,IAQAjZ,KAAAqwB,aAAAA,EAQArwB,KAAAm7B,iBAAA,IAAAliB,IAQAjZ,KAAAo7B,eAAA,IAAAniB,IAQAjZ,KAAAq7B,YAAA,IAAApiB,IAQAjZ,KAAAuiB,UAAAA,EAQAviB,KAAAs7B,cAAA,KAQAt7B,KAAAsiB,WAAA,EAQAtiB,KAAAu7B,wBAAA,KAeA17B,WAAAiJ,EAAApE,GACA,GAAA,SAAAoE,EACA9I,KAAAqwB,aAAAmL,aAAA92B,EAAA2Q,SACArV,KAAAq7B,YAAAjpB,IAAA1N,OAEG,CAGH,IAAA1E,KAAAqwB,aAAAmL,aAAA92B,GACA,OAGA,GAAA,eAAAoE,EACA9I,KAAAm7B,iBAAA/oB,IAAA1N,OACI,CAAA,GAAA,aAAAoE,EAQJ,MAAA,IAAA7H,EAAA,2EAPAjB,KAAAo7B,eAAAhpB,IAAA1N,KAoCA7E,SACA,IAAA47B,EAKAz7B,KAAAs7B,gBAAAt7B,KAAA07B,8BACA17B,KAAA27B,sBAIA37B,KAAAs7B,cACAG,EAAAz7B,KAAA47B,2BAGA57B,KAAA67B,kCACAJ,EAAAz7B,KAAAuiB,UAAA0S,mBAGAj1B,KAAAo7B,eAAAhpB,IAAAqpB,EAAApmB,SAGA,IAAA,MAAA3Q,KAAA1E,KAAAq7B,aACAr7B,KAAAo7B,eAAA7yB,IAAA7D,EAAA2Q,SAAArV,KAAAqwB,aAAAmL,aAAA92B,EAAA2Q,SACArV,KAAA87B,YAAAp3B,GAA6B+2B,qBAAAA,IAI7B,IAAA,MAAAjkB,KAAAxX,KAAAm7B,iBACAn7B,KAAA+7B,aAAAvkB,GAGA,IAAA,MAAAA,KAAAxX,KAAAo7B,eACAp7B,KAAAg8B,gBAAAxkB,GAAmCikB,qBAAAA,IASnC,GAAAA,EAAA,CACA,MAAAQ,EAAAj8B,KAAAqwB,aAAAkB,kBAAAkK,GACA5L,EAAAoM,EAAA5mB,OAAAmb,cAEAsI,GAAAmD,EAAA5mB,QAKArV,KAAAs7B,cAAAW,EAAA5mB,OAHArV,KAAAs7B,cAAAt7B,KAAAk8B,iBAAArM,EAAAoM,EAAA5mB,OAAA4mB,EAAA3sB,aAOAtP,KAAAs7B,cAAA,KAGAt7B,KAAAm8B,mBACAn8B,KAAAo8B,eAEAp8B,KAAAq7B,YAAA90B,QACAvG,KAAAm7B,iBAAA50B,QACAvG,KAAAo7B,eAAA70B,QAeA1G,iBAAAgwB,EAAAwM,EAAA/sB,GACA,MAAAsrB,EAAAyB,aAAA32B,MAAA22B,EAAAA,EAAAzB,WACA0B,EAAA1B,EAAAtrB,GAEA,GAAA0rB,GAAAsB,GAGA,OAFAA,EAAAl7B,KAAAy3B,GAAAyD,EAAAl7B,KAEAk7B,EACG,CACH,MAAAC,EAAA1M,EAAA8I,eAAAE,IAQA,OANAnzB,MAAAkI,QAAAyuB,GACAzB,EAAA11B,OAAAoK,EAAA,EAAAitB,GAEA9B,GAAA4B,EAAA/sB,EAAAitB,GAGAA,GAiBA18B,2BACA,MAAA28B,EAAAx8B,KAAAuiB,UAAA0S,mBAEA,OAAAuH,EAAAnnB,OAAAwG,GAAA,QACAqH,GAAAoB,aAAAtkB,KAAAuiB,UAAA0S,mBAAA5f,QAEAmnB,EAYA38B,6BACA,GAAA,GAAAG,KAAAuiB,UAAA+F,aAAAtoB,KAAAuiB,UAAAuD,YACA,OAAA,EAYA,MAAA2W,EAAAz8B,KAAAuiB,UAAA0S,mBACAhS,EAAAjjB,KAAAqwB,aAAAkB,kBAAAkL,GAEA,SAAAxZ,GAAA+X,GAAA/X,EAAA5N,SAAAyjB,GAAA7V,EAAA5N,SAYAxV,sBACA,MAAA68B,EAAA18B,KAAAs7B,cAGA,IAAAxC,GAAA4D,GAOA,MAAA,IAAAz7B,EAAA,mEAGAg4B,GAAAyD,GACAA,EAAA5B,WAAAC,YAAA2B,GAEAA,EAAAt7B,KAAAs7B,EAAAt7B,KAAAoD,OAAAo0B,IAGA54B,KAAAs7B,cAAA,KASAz7B,gCACA,GAAA,GAAAG,KAAAuiB,UAAA+F,aAAAtoB,KAAAuiB,UAAAuD,YACA,OAAA,EAGA,MAAA2W,EAAAz8B,KAAAuiB,UAAA0S,mBACA0H,EAAAF,EAAApnB,OACAunB,EAAAH,EAAAntB,OAGA,IAAAtP,KAAAqwB,aAAAmL,aAAAmB,EAAA3hC,MACA,OAAA,EAGA,IAAA2hC,EAAA9gB,GAAA,WACA,OAAA,EAKA,IAkVA,SAAArE,GACA,GAAA,SAAAA,EAAAQ,aAAA,mBACA,OAAA,EAGA,MAAA3C,EAAAmC,EAAAqlB,aAAArlB,GAAAA,EAAAO,aAAA,oBAEA,OAAA1C,GAAA,QAAAA,EAAA2C,aAAA;;;;GAzVA8kB,CAAAH,GACA,OAAA,EAIA,GAAAC,IAAAD,EAAApiB,kBACA,OAAA,EAGA,MAAAwK,EAAA0X,EAAA1X,WACAD,EAAA2X,EAAA3X,UAEA,QAAAC,aAAAzO,IAAAwO,aAAAxO,IAgBAzW,YAAAk9B,EAAA15B,GACA,MAAA61B,EAAAl5B,KAAAqwB,aAAA2M,yBAAAD,GACAE,EAAAj9B,KAAAqwB,aAAA6M,UAAAH,EAAA7D,EAAA1I,eAEA2M,EAAAjE,EAAA93B,KACA,IAAAg8B,EAAAH,EAAA77B,KAEA,MAAAi8B,EAAAh6B,EAAAo4B,qBAEA4B,GAAAA,EAAAhoB,QAAA0nB,EAAA1nB,QAAAgoB,EAAA/tB,QAAAytB,EAAA/0B,QACAo1B,EAAAvE,GAAAuE,GAGAD,GAAAC,IACAlE,EAAA93B,KAAAg8B,GAUAv9B,aAAA01B,GACA,MAAAxF,EAAA/vB,KAAAqwB,aAAAmL,aAAAjG,GACA+H,EAAA53B,MAAAC,KAAAoqB,EAAA/V,YAAA/O,IAAAsyB,GAAAA,EAAAthC,MACAuhC,EAAAjI,EAAAtF,mBAGA,IAAA,MAAAlvB,KAAAy8B,EACAzN,EAAAG,aAAAnvB,EAAAw0B,EAAAvd,aAAAjX,IAIA,IAAA,MAAAA,KAAAu8B,EACA/H,EAAAxd,aAAAhX,IACAgvB,EAAAsH,gBAAAt2B,GAcAlB,gBAAA01B,EAAAlyB,GACA,MAAAgtB,EAAArwB,KAAAqwB,aACAN,EAAAM,EAAAmL,aAAAjG,GAEA,IAAAxF,EAGA,OAGA,MAAAF,EAAAE,EAAAS,cACA6M,EAAAh6B,EAAAo4B,qBACAgC,EAAA1N,EAAA6K,WACA8C,EAAAh4B,MAAAC,KAAA0qB,EAAAsN,kBAAApI,EAAA1F,GAAqGxN,MAAA,KAKrGgb,GAAAA,EAAAhoB,QAAAkgB,GACAv1B,KAAAk8B,iBAAArM,EAAA6N,EAAAL,EAAA/tB,QAGA,MAAAsuB,EAAAlE,GAAA+D,EAAAC,EA0BA,SAAAG,EAAAC,GAEA,GAAAD,IAAAC,EACA,OAAA,EAGA,GAAA9C,GAAA6C,IAAA7C,GAAA8C,GACA,OAAAD,EAAAz8B,OAAA08B,EAAA18B,KAGA,GAAAi4B,GAAAwE,EAAAxN,EAAAiJ,cACAD,GAAAyE,EAAAzN,EAAAiJ,aACA,OAAA,EAIA,OAAA,IAxCA,IAAA59B,EAAA,EACA,MAAAqiC,EAAA,IAAA9kB,IAEA,IAAA,MAAA+kB,KAAAJ,EACA,WAAAI,GACAvD,GAAA1K,EAAAr0B,EAAAgiC,EAAAhiC,IACAA,KACI,WAAAsiC,GACJD,EAAA3rB,IAAAqrB,EAAA/hC,IACAm/B,GAAA4C,EAAA/hC,KAEAA,IAOA,IAAA,MAAAgJ,KAAAq5B,EACAr5B,EAAAo2B,YACA96B,KAAAqwB,aAAA4N,iBAAAv5B,GA6BA7E,mBAEA,GAAA,IAAAG,KAAAuiB,UAAA+F,WAIA,OAHAtoB,KAAAk+B,2BACAl+B,KAAAm+B,uBAKA,MAAAC,EAAAp+B,KAAAqwB,aAAAmL,aAAAx7B,KAAAuiB,UAAAC,iBAGAxiB,KAAAsiB,WAAA8b,IAKAp+B,KAAAuiB,UAAA2F,OACAloB,KAAAq+B,qBAAAD,IAEAp+B,KAAAm+B,uBACAn+B,KAAAs+B,oBAAAF,KAUAv+B,qBAAAu+B,GACA,MAAAvO,EAAAuO,EAAA5N,cACA,IAAAsD,EAAA9zB,KAAAu7B,wBAGAzH,IACA9zB,KAAAu7B,wBAAAzH,EAAAjE,EAAAG,cAAA,OAEA5zB,OAAAmiC,OAAAzK,EAAAxb,OACA2K,SAAA,QACAub,IAAA,EACAC,KAAA,UAEAC,MAAA,SAIA5K,EAAA6K,YAAA9O,EAAA8I,eAAA,OAIA7E,EAAAc,eACAwJ,EAAAO,YAAA7K,GAIAA,EAAA8K,WAAAx9B,KAAApB,KAAAuiB,UAAA4F,oBAAA,IAGA,MAAAmI,EAAAT,EAAAa,eACAmO,EAAAhP,EAAAiP,cAEAxO,EAAAyO,kBACAF,EAAAG,mBAAAlL,GACAxD,EAAA2O,SAAAJ,GAGA7+B,KAAAqwB,aAAA6O,kBAAApL,EAAA9zB,KAAAuiB,WASA1iB,oBAAAu+B,GACA,MAAA9N,EAAA8N,EAAA5N,cAAAC,YAAAC,eAGA,IAAA1wB,KAAAm/B,yBAAA7O,GACA,OAQA,MAAAlI,EAAApoB,KAAAqwB,aAAAkB,kBAAAvxB,KAAAuiB,UAAA6F,QACAC,EAAAroB,KAAAqwB,aAAAkB,kBAAAvxB,KAAAuiB,UAAA8F,OAIA+V,EAAA/V,QAEAiI,EAAAkB,SAAApJ,EAAA/S,OAAA+S,EAAA9Y,QACAghB,EAAAmB,OAAApJ,EAAAhT,OAAAgT,EAAA/Y,QAUAzP,yBAAAywB,GACA,IAAAtwB,KAAAqwB,aAAA+O,sBAAA9O,GAEA,OAAA,EAGA,MAAA+O,EAAA/O,GAAAtwB,KAAAqwB,aAAAiP,mBAAAhP,GAEA,QAAA+O,IAAAr/B,KAAAuiB,UAAAkC,QAAA4a,QAKAr/B,KAAAuiB,UAAAuD,aAAA9lB,KAAAuiB,UAAA0K,UAAAoS,IAcAx/B,sBACA,IAAA,MAAA0/B,KAAAv/B,KAAAk7B,aAAA,CAGA,GAFAqE,EAAA7O,eAEApI,WAAA,CACA,MAAAkX,EAAAD,EAAAE,cACAlK,EAAAv1B,KAAAqwB,aAAAqP,aAAAF,GAEAA,GAAAjK,GACAgK,EAAA7O,eAAAqO,oBAWAl/B,uBACA,MAAAi0B,EAAA9zB,KAAAu7B,wBAEAzH,GACAA,EAAArI,SASA5rB,eACA,GAAAG,KAAAsiB,UAAA,CACA,MAAA2C,EAAAjlB,KAAAuiB,UAAAC,gBAEAyC,GACAjlB,KAAAqwB,aAAAhI,MAAApD,KAMAje,EAAAi0B,GAAApa,ICprBA,IAAAljB,IAAgBrC,OAAAA,OAAAqa,SAAAA;;;;GCVhB,SAAAgqB,GAAAj7B,GACA,IAAAsD,EAAA,EAEA,KAAAtD,EAAAgR,iBACAhR,EAAAA,EAAAgR,gBACA1N,IAGA,OAAAA;;;;GCHA,SAAAgO,GAAAtR,GACA,MAAAgW,KAGA,KAAAhW,GAAAA,EAAApH,UAAAsiC,KAAAC,eACAnlB,EAAAolB,QAAAp7B,GACAA,EAAAA,EAAAo2B,WAGA,OAAApgB;;;;;;;;;MCOAqlB,GAOAlgC,YAAAwD,MAkBArD,KAAAs5B,YAAAj2B,EAAAi2B,aAAAhB,GAQAt4B,KAAAggC,aAAA,OAQAhgC,KAAAigC,eAAA,IAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAQAjgC,KAAAkgC,kBAAA,IAAAtV,QAQA5qB,KAAAmgC,kBAAA,IAAAvV,QAQA5qB,KAAAogC,sBAAA,IAAAxV,QAWA/qB,kBAAAkwB,EAAAiF,GACAh1B,KAAAogC,sBAAA/5B,IAAA0pB,EAAA,IAAArI,GAAAsN,IAUAn1B,oBAAAkwB,GACA,OAAA/vB,KAAAogC,sBAAA5jC,IAAAuzB,GAWAlwB,aAAAkwB,EAAAwF,GACAv1B,KAAAkgC,kBAAA75B,IAAA0pB,EAAAwF,GACAv1B,KAAAmgC,kBAAA95B,IAAAkvB,EAAAxF,GASAlwB,iBAAAkwB,GACA,MAAAwF,EAAAv1B,KAAAkgC,kBAAA1jC,IAAAuzB,GAEA,GAAAwF,EAAA,CACAv1B,KAAAkgC,kBAAA55B,OAAAypB,GACA/vB,KAAAmgC,kBAAA75B,OAAAivB,GAGA,IAAA,MAAApb,KAAAzU,MAAAC,KAAAoqB,EAAA6K,YACA56B,KAAAi+B,iBAAA9jB,IAaAta,sBAAAwgC,EAAAC,GACAtgC,KAAAkgC,kBAAA75B,IAAAg6B,EAAAC,GACAtgC,KAAAmgC,kBAAA95B,IAAAi6B,EAAAD,GAeAxgC,UAAA0gC,EAAA1Q,EAAAxsB,MACA,GAAAk9B,EAAA1kB,GAAA,QAAA,CACA,MAAA2kB,EAAAxgC,KAAAygC,yBAAAF,GAEA,OAAA1Q,EAAA8I,eAAA6H,GACG,CACH,GAAAxgC,KAAAw7B,aAAA+E,GACA,OAAAvgC,KAAAw7B,aAAA+E,GAGA,IAAAxQ,EAEA,GAAAwQ,EAAA1kB,GAAA,oBAEAkU,EAAAF,EAAA6Q,yBAEAr9B,EAAAgf,MACAriB,KAAA2gC,sBAAA5Q,EAAAwQ,OAEI,CAAA,GAAAA,EAAA1kB,GAAA,aAQJ,OANAkU,EAAAwQ,EAAArO,OAAArC,GAEAxsB,EAAAgf,MACAriB,KAAA4gC,aAAA7Q,EAAAwQ,GAGAxQ,EAGAA,EAAAF,EAAAG,cAAAuQ,EAAAtkC,MAEAoH,EAAAgf,MACAriB,KAAA4gC,aAAA7Q,EAAAwQ,GAIA,IAAA,MAAAx/B,KAAAw/B,EAAAtQ,mBACAF,EAAAG,aAAAnvB,EAAAw/B,EAAAvoB,aAAAjX,IAIA,GAAAsC,EAAAw9B,mBAAAtjC,IAAA8F,EAAAw9B,aACA,IAAA,MAAA1mB,KAAAna,KAAA29B,kBAAA4C,EAAA1Q,EAAAxsB,GACA0sB,EAAA4O,YAAAxkB,GAIA,OAAA4V,GAcAlwB,mBAAA01B,EAAA1F,EAAAxsB,MACA,MAAAy9B,EAAAvL,EAAAhb,iBAAAgb,EAAAhb,kBACA,IAAAjL,EAAA,EAEA,IAAA,MAAAyxB,KAAAxL,EAAAnb,cACA0mB,IAAAxxB,UACAtP,KAAAs5B,YAAAzJ,UAGA7vB,KAAAk9B,UAAA6D,EAAAlR,EAAAxsB,GAEAiM,IAGAwxB,IAAAxxB,UACAtP,KAAAs5B,YAAAzJ,IAWAhwB,eAAAmhC,GACA,MAAAC,EAAAjhC,KAAAuxB,kBAAAyP,EAAA1jB,OACA4jB,EAAAlhC,KAAAuxB,kBAAAyP,EAAAvd,KAEAob,EAAAlpB,SAAAmpB,cAIA,OAHAD,EAAAsC,SAAAF,EAAA5rB,OAAA4rB,EAAA3xB,QACAuvB,EAAAuC,OAAAF,EAAA7rB,OAAA6rB,EAAA5xB,QAEAuvB,EAcAh/B,kBAAAqxB,GACA,MAAAmQ,EAAAnQ,EAAA7b,OAEA,GAAAgsB,EAAAxlB,GAAA,QAAA,CACA,MAAAiV,EAAA9wB,KAAAg9B,yBAAAqE,GAEA,IAAAvQ,EAEA,OAAA,KAGA,IAAAxhB,EAAA4hB,EAAA5hB,OAMA,OAJAwpB,GAAAhI,KACAxhB,GAAAspB,KAGWvjB,OAAAyb,EAAAxhB,OAAAA,GACR,CAEH,IAAAwhB,EAAAwQ,EAAAC,EAEA,GAAA,IAAArQ,EAAA5hB,OAAA,CAGA,KAFAwhB,EAAA9wB,KAAAw7B,aAAA6F,IAIA,OAAA,KAGAE,EAAAzQ,EAAA8J,WAAA,OACI,CACJ,MAAA7V,EAAAmM,EAAAnM,WAMA,KAJAuc,EAAAvc,EAAAlJ,GAAA,QACA7b,KAAAg9B,yBAAAjY,GACA/kB,KAAAw7B,aAAAtK,EAAAnM,aAIA,OAAA,KAGA+L,EAAAwQ,EAAAxG,WACAyG,EAAAD,EAAA9rB,YAKA,GAAAwlB,GAAAuG,IAAAzI,GAAAyI,GACA,OAAYlsB,OAAAksB,EAAAjyB,OAAAspB,IAKZ,OAAWvjB,OAAAyb,EAAAxhB,OAFXgyB,EAAA3B,GAAA2B,GAAA,EAAA,IAoBAzhC,UAAAk5B,EAAA11B,MACA,GAAAg2B,GAAAN,EAAA/4B,KAAAs5B,aACA,OAAA,KAIA,MAAArH,EAAAjyB,KAAAwhC,mBAAAzI,EAAA/4B,KAAAkgC,mBAEA,GAAAjO,EACA,OAAAA,EAGA,GAAA+I,GAAAjC,GAAA,CACA,GAAAE,GAAAF,GACA,OAAA,KACI,CACJ,MAAAyH,EAAAxgC,KAAAyhC,wBAAA1I,GAEA,MAAA,KAAAyH,EAAA,KAAA,IAAAlqB,GAAAkqB,IAEG,GAAAxgC,KAAA0hC,UAAA3I,GACH,OAAA,KACG,CACH,GAAA/4B,KAAA0/B,aAAA3G,GACA,OAAA/4B,KAAA0/B,aAAA3G,GAGA,IAAAxD,EAEA,GAAAv1B,KAAA2hC,mBAAA5I,GAEAxD,EAAA,IAAA5D,GAEAtuB,EAAAgf,MACAriB,KAAA2gC,sBAAA5H,EAAAxD,OAEI,CAEJ,MAAAqM,EAAAv+B,EAAAw+B,iBAAA9I,EAAA+I,QAAA/I,EAAA+I,QAAApU,cACA6H,EAAA,IAAA7c,GAAAkpB,GAEAv+B,EAAAgf,MACAriB,KAAA4gC,aAAA7H,EAAAxD,GAIA,MAAA5c,EAAAogB,EAAA/e,WAEA,IAAA,IAAAte,EAAAid,EAAA1T,OAAA,EAAmCvJ,GAAA,EAAQA,IAC3C65B,EAAApD,cAAAxZ,EAAAjd,GAAAO,KAAA0c,EAAAjd,GAAAgB,OAIA,GAAA2G,EAAAw9B,mBAAAtjC,IAAA8F,EAAAw9B,aACA,IAAA,MAAA1mB,KAAAna,KAAA+hC,kBAAAhJ,EAAA11B,GACAkyB,EAAAjC,gBAAAnZ,GAIA,OAAAob,GAaA11B,mBAAAkwB,EAAA1sB,MACA,IAAA,IAAA3H,EAAA,EAAkBA,EAAAq0B,EAAA6K,WAAA31B,OAAkCvJ,IAAA,CACpD,MAAAsmC,EAAAjS,EAAA6K,WAAAl/B,GACAumC,EAAAjiC,KAAAkiC,UAAAF,EAAA3+B,GAEA,OAAA4+B,UACAA,IAYApiC,mBAAAywB,GAGA,GAAA,IAAAA,EAAAhI,WAAA,CACA,IAAAwL,EAAAxD,EAAAM,WAAA,GAAAwH,eAGA4C,GAAAlH,KACAA,EAAAA,EAAAgH,YAGA,MAAA9F,EAAAh1B,KAAAmiC,oBAAArO,GAEA,GAAAkB,EACA,OAAAA,EAIA,MAAAzM,EAAAvoB,KAAAoiC,uBAAA9R,GAEA+R,KAEA,IAAA,IAAA3mC,EAAA,EAAkBA,EAAA40B,EAAAhI,WAA6B5sB,IAAA,CAE/C,MAAAmjC,EAAAvO,EAAAM,WAAAl1B,GACAslC,EAAAhhC,KAAAsiC,eAAAzD,GAEAmC,GACAqB,EAAAp+B,KAAA+8B,GAIA,OAAA,IAAAtZ,GAAA2a,GAAyC3Y,SAAAnB,IAUzC1oB,eAAAg/B,GACA,MAAA0D,EAAAviC,KAAAmxB,kBAAA0N,EAAAzG,eAAAyG,EAAAta,aACAie,EAAAxiC,KAAAmxB,kBAAA0N,EAAAxG,aAAAwG,EAAA7Z,WAEA,OAAAud,GAAAC,EACA,IAAA3c,GAAA0c,EAAAC,GAGA,KAkBA3iC,kBAAAixB,EAAAE,GACA,GAAAqI,GAAAvI,EAAA9wB,KAAAs5B,aACA,OAAAt5B,KAAAmxB,kBAAAL,EAAAgK,WAAA6E,GAAA7O,IAIA,MAAAyE,EAAAv1B,KAAA0/B,aAAA5O,GAEA,GAAAyE,GAAAA,EAAA1Z,GAAA,aACA,OAAAqH,GAAAoB,aAAAiR,GAGA,GAAAyF,GAAAlK,GAAA,CACA,GAAAmI,GAAAnI,GACA,OAAA9wB,KAAAmxB,kBAAAL,EAAAgK,WAAA6E,GAAA7O,IAGA,MAAAuQ,EAAArhC,KAAAyiC,0BAAA3R,GACA,IAAAxhB,EAAA0hB,EAEA,OAAAqQ,GAIAvI,GAAAhI,KAEAxhB,GADAA,GAAAspB,IACA,EAAA,EAAAtpB,GAGA,IAAA4T,GAAAme,EAAA/xB,IARA,KAYA,GAAA,IAAA0hB,EAAA,CACA,MAAAqQ,EAAArhC,KAAA0/B,aAAA5O,GAEA,GAAAuQ,EACA,OAAA,IAAAne,GAAAme,EAAA,OAEI,CACJ,MAAAC,EAAAxQ,EAAA8J,WAAA5J,EAAA,GACA0R,EAAA1H,GAAAsG,GACAthC,KAAAyiC,0BAAAnB,GACAthC,KAAA0/B,aAAA4B,GAGA,GAAAoB,GAAAA,EAAArtB,OACA,OAAA,IAAA6N,GAAAwf,EAAArtB,OAAAqtB,EAAA16B,MAAA,GAIA,OAAA,KAeAnI,aAAA8iC,GACA,OAAA3iC,KAAAwhC,mBAAAmB,IAAA3iC,KAAAkgC,kBAAA1jC,IAAAmmC,GAuBA9iC,0BAAAq5B,GACA,GAAAD,GAAAC,GACA,OAAA,KAIA,MAAAjH,EAAAjyB,KAAAwhC,mBAAAtI,GAEA,GAAAjH,EACA,OAAAA,EAGA,MAAAvc,EAAAwjB,EAAAxjB,gBAGA,GAAAA,EAAA,CACA,IAAA1V,KAAA4iC,UAAAltB,GAEA,OAAA,KAGA,MAAA6f,EAAAv1B,KAAA0/B,aAAAhqB,GAEA,GAAA6f,EAAA,CAIA,OAHAA,EAAA/f,uBAGAc,GACAif,EAAA/f,YAEA,UAKA,CACA,MAAA+f,EAAAv1B,KAAA0/B,aAAAxG,EAAA4B,YAEA,GAAAvF,EAAA,CACA,MAAAqJ,EAAArJ,EAAA9f,SAAA,GAGA,OAAAmpB,aAAAtoB,GACAsoB,EAEA,MAKA,OAAA,KAaA/+B,aAAAgjC,GACA,OAAA7iC,KAAAmgC,kBAAA3jC,IAAAqmC,GAkBAhjC,yBAAAk9B,GACA,MAAArnB,EAAAqnB,EAAArnB,gBAGA,OAAAA,GAAA1V,KAAAw7B,aAAA9lB,GACA1V,KAAAw7B,aAAA9lB,GAAAF,aAIAE,GAAAqnB,EAAA1nB,QAAArV,KAAAw7B,aAAAuB,EAAA1nB,QACArV,KAAAw7B,aAAAuB,EAAA1nB,QAAAulB,WAAA,GAGA,KAQA/6B,MAAAijC,GACA,MAAAC,EAAA/iC,KAAAw7B,aAAAsH,GAEA,GAAAC,GAAAA,EAAAvS,cAAAiP,gBAAAsD,EAAA,CAEA,MAAAC,QAAUA,EAAAC,QAAAA,GAAmBtlC,GAAArC,OAC7B4nC,KAIAC,GAAAJ,EAAAr+B,IACA,MAAA0+B,WAAWA,EAAAC,UAAAA,GAAwB3+B,EAEnCw+B,EAAAj/B,MAAAm/B,EAAAC,MAGAN,EAAA1a,QAMA8a,GAAAJ,EAAAr+B,IACA,MAAA0+B,EAAAC,GAAAH,EAAAhe,QAEAxgB,EAAA0+B,WAAAA,EACA1+B,EAAA2+B,UAAAA,IAKA1lC,GAAArC,OAAAgoC,SAAAN,EAAAC,IAUApjC,UAAA6E,GACA,OAAAA,GAAAA,EAAApH,UAAAsiC,KAAA2D,aASA1jC,mBAAA6E,GACA,OAAAA,GAAAA,EAAApH,UAAAsiC,KAAA4D,uBASA3jC,UAAA6E,GACA,OAAAA,GAAAA,EAAApH,UAAAsiC,KAAA6D,aASA5jC,uBAAA0iB,GACA,GAAAA,EAAAuD,YACA,OAAA,EAKA,MAAAqB,EAAAxR,SAAAmpB,cAEA3X,EAAAga,SAAA5e,EAAAmhB,WAAAnhB,EAAAohB,cACAxc,EAAAia,OAAA7e,EAAAwO,UAAAxO,EAAA0O,aAEA,MAAAvH,EAAAvC,EAAA0J,UAIA,OAFA1J,EAAAyc,SAEAla,EAUA7pB,mBAAAk5B,GACA,MAAAjjB,EAAAE,GAAA+iB,GAKA,IAFAjjB,EAAArV,MAEAqV,EAAA7Q,QAAA,CACA,MAAA8zB,EAAAjjB,EAAArV,MACA8/B,EAAAvgC,KAAAkgC,kBAAA1jC,IAAAu8B,GAEA,GAAAwH,GAAAA,EAAA1kB,GAAA,aACA,OAAA0kB,EAIA,OAAA,KAaA1gC,sBAAAywB,GACA,OAAAtwB,KAAA6jC,+BAAAvT,EAAAoT,WAAApT,EAAAqT,eACA3jC,KAAA6jC,+BAAAvT,EAAAS,UAAAT,EAAAW,aAWApxB,+BAAAixB,EAAAxhB,GAEA,GAAA0rB,GAAAlK,IAAAgI,GAAAhI,IAAAxhB,EAAAspB,GAEA,OAAA,EAGA,GAAA54B,KAAA4iC,UAAA9R,IAAAgI,GAAAhI,EAAA8J,WAAAtrB,IAEA,OAAA,EAGA,MAAA+xB,EAAArhC,KAAA0/B,aAAA5O,GAIA,OAAAuQ,IAAAA,EAAAxlB,GAAA,aAwBAhc,yBAAA6E,GACA,IAAAtD,EAAAsD,EAAAtD,KAIA,GAAAsD,EAAAsR,eAAA4d,KAAAve,GAAArV,KAAAggC,YAAA8D,SAAAzuB,EAAApZ,OACA,OAAAmF,EAKA,GAAA,KAAAA,EAAAga,OAAA,GAAA,CACA,MAAA2oB,EAAA/jC,KAAAgkC,yBAAAt/B,GAAA,KACAq/B,GAAA/jC,KAAAikC,mBAAAF,KAEAA,IACA3iC,EAAA,IAAAA,EAAAoD,OAAA,IAKA,GAAA,KAAApD,EAAAga,OAAAha,EAAA6D,OAAA,GAAA,CACAjF,KAAAgkC,yBAAAt/B,GAAA,KAGAtD,EAAAA,EAAAoD,OAAA,EAAApD,EAAA6D,OAAA,GAAA,KAIA,OAAA7D,EAAAyI,QAAA,QAA4B,MAU5BhK,mBAAA6E,GACA,GAAAA,EAAAsR,eAAA4d,KAAAve,GAAArV,KAAAggC,YAAA8D,SAAAzuB,EAAApZ,OACA,OAAA,EAGA,MAAAmF,EAAApB,KAAAygC,yBAAA/7B,GAEA,MAAA,KAAAtD,EAAAga,OAAAha,EAAA6D,OAAA,GAgBApF,wBAAA6E,GACA,IAAAtD,EAAAsD,EAAAtD,KAEA,GAAA8iC,GAAAx/B,EAAA1E,KAAAggC,aACA,OAAA7G,GAAAz0B,GAOAtD,EAAAA,EAAAyI,QAAA,iBAAqC,KAErC,MAAAk6B,EAAA/jC,KAAAmkC,wBAAAz/B,GAAA,GACA0/B,EAAApkC,KAAAmkC,wBAAAz/B,GAAA,GA4CA,OAxCAq/B,IAAA,cAAAh6B,KAAAg6B,EAAA3iC,KAAAga,OAAA2oB,EAAA3iC,KAAA6D,OAAA,MACA7D,EAAAA,EAAAyI,QAAA,KAAA,KAIAu6B,GAAAtL,GAAAp0B,KACAtD,EAAAA,EAAAyI,QAAA,KAAA,KAeAzI,GARAA,EAAA+3B,GAAA,IAAAH,KAAA53B,KAQAyI,QAAA,WAAA,MAKAk6B,IAAA,cAAAh6B,KAAAg6B,EAAA3iC,KAAAga,OAAA2oB,EAAA3iC,KAAA6D,OAAA,MACA7D,EAAAA,EAAAyI,QAAA,UAAA,MAOAu6B,GAAA,KAAAA,EAAAhjC,KAAAga,OAAA,KACAha,EAAAA,EAAAyI,QAAA,cAAA,QAKAzI,EAWAvB,yBAAA6E,EAAA2/B,GACA,MAAAjf,EAAA,IAAAvC,IACAE,cAAAshB,EAAAnhB,GAAAc,YAAAtf,GAAAwe,GAAAoB,aAAA5f,GACAse,UAAAqhB,EAAA,UAAA,aAGA,IAAA,MAAA3nC,KAAA0oB,EAAA,CACA,GAAA1oB,EAAA4a,KAAAuE,GAAA,oBAGA,OAAA,KACI,GAAAnf,EAAA4a,KAAAuE,GAAA,aAEJ,OAAAnf,EAAA4a,KAIA,OAAA,KAYAzX,wBAAA6E,EAAA2/B,GACA,IAAA3/B,EAAAo2B,WACA,OAAA,KAGA,MAAA9X,EAAAqhB,EAAA,WAAA,eACA1uB,EAAAjR,EAAA8rB,cACA8T,EAAAtuB,GAAAtR,GAAA,GAEA0gB,EAAAzP,EAAA4uB,iBAAAD,EAAAE,WAAAC,WAEArf,EAAAsf,YAAAhgC,EAEA,MAAAigC,EAAAvf,EAAApC,KAEA,GAAA,OAAA2hB,EAAA,CACA,MAAAC,EC/hCA,SAAAC,EAAAC,GACA,MAAA/uB,EAAAC,GAAA6uB,GACA5uB,EAAAD,GAAA8uB,GAEA,IAAAppC,EAAA,EAGA,KAAAqa,EAAAra,IAAAua,EAAAva,IAAAqa,EAAAra,IACAA,IAGA,OAAA,IAAAA,EAAA,KAAAqa,EAAAra,EAAA,GDohCAqpC,CAAArgC,EAAAigC,GAKA,GACAC,IACAV,GAAAx/B,EAAA1E,KAAAigC,cAAA2E,KACAV,GAAAS,EAAA3kC,KAAAigC,cAAA2E,GAGA,OAAAD,EAIA,OAAA,MAWA,SAAAT,GAAAx/B,EAAAsgC,EAAAC,GACA,IAAAC,EAAAlvB,GAAAtR,GAMA,OAJAugC,IACAC,EAAAA,EAAAvgC,MAAAugC,EAAA1/B,QAAAy/B,GAAA,IAGAC,EAAAtR,KAAAve,GAAAA,EAAAysB,SAAAkD,EAAAlB,SAAAzuB,EAAAysB,QAAApU,gBAQA,SAAAyV,GAAAz+B,EAAAtB,GACA,KAAAsB,GAAAA,GAAA/G,GAAAgY,UACAvS,EAAAsB,GACAA,EAAAA,EAAAo2B;;;;GE9kCA,SAAAqK,GAAAnuB,GACA,GAAAA,EAAA,CACA,GAAAA,EAAAyZ,YACA,OAAAzZ,aAAAA,EAAAyZ,YAAA2U,SACG,GAAApuB,EAAAwZ,eAAAxZ,EAAAwZ,cAAAC,YACH,OAAAzZ,aAAAA,EAAAwZ,cAAAC,YAAAmP,KAIA,OAAA;;;;GCTA,SAAAyF,GAAAruB,GACA,MAAA,mBAAA5a,OAAAW,UAAAgC,SAAA6G,MAAAoR;;;;GCmGA,IAAAsuB,GA9EAzmB,MAAkCxI,GAelCxW,SAAA4D,KAAA8hC,GAGA,GAAAJ,GAAA1hC,IAAA4hC,GAAA5hC,GAAA,CACA,MAAA+hC,EAAAxlC,KAAAylC,iBAAAhiC,IAAA,IAAAiiC,GAAAjiC,GAEA+hC,EAAAG,UAAAJ,GAEA9hC,EAAA+hC,EAIAnvB,EAAA/S,SAAAzH,KAAAmE,KAAAyD,KAAA8hC,IAkBA1lC,cAAA4D,EAAAN,EAAAC,GAEA,GAAA+hC,GAAA1hC,IAAA4hC,GAAA5hC,GAAA,CACA,MAAA+hC,EAAAxlC,KAAAylC,iBAAAhiC,GAGA,IAAA+hC,EACA,OAGA/hC,EAAA+hC,EAIAnvB,EAAA7S,cAAA3H,KAAAmE,KAAAyD,EAAAN,EAAAC,GAEAK,aAAAiiC,IACAjiC,EAAAmgC,OAAAzgC,IAWAtD,iBAAA6E,GACA,O5IuTAkhC,E4IvTA5lC,K5IuTA6lC,E4IvTAC,GAAAphC,G5IwTAkhC,EAAA5iC,IAAA4iC,EAAA5iC,GAAA6iC,GACAD,EAAA5iC,GAAA6iC,GAAApiC,QAGA,KALA,IAAAmiC,EAAAC,W4InRAH,GAKA7lC,YAAA6E,GAEAZ,EAAA9D,KAAA8lC,GAAAphC,IAGA1E,KAAA+lC,SAAArhC,GAiGA,SAAAohC,GAAAphC,GACA,OAAAA,EAAA,qBAAAA,EAAA,mBAAAvC;;;;GA9FA0c,GAAA6mB,GAAA3oC,UAAAsZ,GAqBAxW,OAAAsD,EAAAC,EAAAC,MAGA,GAAArD,KAAAgmC,eAAAhmC,KAAAgmC,cAAA7iC,GACA,OAGA,MAAA8iC,EAAAjmC,KAAAkmC,mBAAA/iC,IAAAE,EAAA8iC,YAGAnmC,KAAA+lC,SAAAK,iBAAAjjC,EAAA8iC,IAAA5iC,EAAA8iC,YAEAnmC,KAAAgmC,gBACAhmC,KAAAgmC,kBAKAhmC,KAAAgmC,cAAA7iC,GAAA8iC,GASApmC,OAAAsD,GACA,IAAAgB,GAMAnE,KAAAgmC,cAAA7iC,KAAAgB,EAAAnE,KAAAuF,QAAApC,KAAAgB,EAAAH,UAAAiB,QACAjF,KAAAgmC,cAAA7iC,GAAAkjC,kBAeAxmC,mBAAAsD,EAAAgjC,GACA,MAAAF,EAAAK,IACAtmC,KAAA+G,KAAA5D,EAAAmjC,IAWA,OALAL,EAAAI,eAAA,MACArmC,KAAA+lC,SAAAQ,oBAAApjC,EAAA8iC,EAAAE,UACAnmC,KAAAgmC,cAAA7iC,KAGA8iC,WClOAO,GAMA3mC,YAAAuwB,GAOApwB,KAAAowB,KAAAA,EAQApwB,KAAA2V,SAAAya,EAAAza,SAQA3V,KAAAymC,WAAA,EAaA5mC,SACAG,KAAAymC,WAAA,EASA5mC,UACAG,KAAAymC,WAAA,EAMA5mC,UACAG,KAAA0mC,UACA1mC,KAAAwD,iBAYAwD,EAAAw/B,GAAAlB,IC3FA,IAAAqB,GAAA,4BAiBA,IAAAC,GALA,SAAAlqC,GAEA,OADAsD,KAAAyH,SAAApB,IAAA3J,EAAAiqC,IACA3mC,MCFA,IAAA6mC,GAJA,SAAAnqC,GACA,OAAAsD,KAAAyH,SAAAc,IAAA7L,ICEA,SAAAoqC,GAAAz3B,GACA,IAAArH,GAAA,EACA/C,EAAAoK,EAAAA,EAAApK,OAAA,EAGA,IADAjF,KAAAyH,SAAA,IAAAiE,KACA1D,EAAA/C,GACAjF,KAAAoS,IAAA/C,EAAArH,IAKA8+B,GAAA/pC,UAAAqV,IAAA00B,GAAA/pC,UAAAkH,KAAA2iC,GACAE,GAAA/pC,UAAAwL,IAAAs+B,GAEA,IAAAE,GAAA,GCJA,IAAAC,GAZA,SAAAn/B,EAAAo/B,GAIA,IAHA,IAAAj/B,GAAA,EACA/C,EAAA4C,EAAA5C,SAEA+C,EAAA/C,GACA,GAAAgiC,EAAAp/B,EAAAG,GAAAA,EAAAH,GACA,OAAA,EAGA,OAAA,GCfAq/B,GAAA,EACAC,GAAA,EA2EA,IAAAC,GA3DA,SAAAv/B,EAAAF,EAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,GACA,IAAAgC,EAAAwwB,EAAAH,GACAI,EAAA1/B,EAAA5C,OACAuiC,EAAA7/B,EAAA1C,OAEA,GAAAsiC,GAAAC,KAAA1wB,GAAA0wB,EAAAD,GACA,OAAA,EAGA,IAAAtyB,EAAAH,EAAAtY,IAAAqL,GACA,GAAAoN,EACA,OAAAA,GAAAtN,EAEA,IAAAK,GAAA,EACAlJ,GAAA,EACA2oC,EAAAH,EAAAJ,GAAA,IAAAH,QAAAxpC,EAKA,IAHAuX,EAAAzO,IAAAwB,EAAAF,KAGAK,EAAAu/B,GAAA,CACA,IAAAG,EAAA7/B,EAAAG,GACA2/B,EAAAhgC,EAAAK,GAEA,GAAAuE,EACA,IAAAq7B,EAAA9wB,EACAvK,EAAAo7B,EAAAD,EAAA1/B,EAAAL,EAAAE,EAAAiN,GACAvI,EAAAm7B,EAAAC,EAAA3/B,EAAAH,EAAAF,EAAAmN,GAEA,QAAAvX,IAAAqqC,EAAA,CACA,GAAAA,EACA,SAEA9oC,GAAA,EACA,MAGA,GAAA2oC,GACA,IAAAT,GAAAr/B,EAAA,SAAAggC,EAAAE,GACA,IAAAJ,EAAAl/B,IAAAs/B,KACAH,IAAAC,GAAAN,EAAAK,EAAAC,EAAAp7B,EAAA+6B,EAAAxyB,IACA,OAAA2yB,EAAAr1B,IAAAy1B,KAEW,CACX/oC,GAAA,EACA,YAEK,GACL4oC,IAAAC,IACAN,EAAAK,EAAAC,EAAAp7B,EAAA+6B,EAAAxyB,GACA,CACAhW,GAAA,EACA,OAIA,OADAgW,EAAA,OAAAjN,GACA/I,GCtEAgpC,GAAA,EACAC,GAAA,EAGAC,GAAA,mBACAC,GAAA,gBACAC,GAAA,iBACAC,GAAA,eACAC,GAAA,kBACAC,GAAA,kBACAC,GAAA,eACAC,GAAA,kBACAC,GAAA,kBAEAC,GAAA,uBACAC,GAAA,oBAGAC,GAAAp2B,GAAAA,GAAAxV,eAAAQ,EACAqrC,GAAAD,GAAAA,GAAAj2B,aAAAnV,EAuFA,IAAAsrC,GAnEA,SAAAhsC,EAAA8K,EAAAwB,EAAAk+B,EAAA96B,EAAA+6B,EAAAxyB,GACA,OAAA3L,GACA,KAAAu/B,GACA,GAAA7rC,EAAAoU,YAAAtJ,EAAAsJ,YACApU,EAAAuU,YAAAzJ,EAAAyJ,WACA,OAAA,EAEAvU,EAAAA,EAAAgS,OACAlH,EAAAA,EAAAkH,OAEA,KAAA45B,GACA,QAAA5rC,EAAAoU,YAAAtJ,EAAAsJ,aACAo2B,EAAA,IAAAx2B,GAAAhU,GAAA,IAAAgU,GAAAlJ,KAKA,KAAAqgC,GACA,KAAAC,GAIA,OAAAprC,IAAA8K,EAEA,KAAAugC,GACA,OAAArrC,EAAAZ,MAAA0L,EAAA1L,MAAAY,EAAAsE,SAAAwG,EAAAxG,QAEA,KAAAinC,GAEA,OAAAvrC,IAAAA,EAAA8K,IAAAA,EAAA9K,IAAA8K,EAEA,KAAA0gC,GACA,KAAAE,GAIA,OAAA1rC,GAAA8K,EAAA,GAEA,KAAAwgC,GACA,IAAAW,EAAAp3B,GAEA,KAAA42B,GACA,IAAAxxB,EAAAwwB,EAAAS,GAGA,GAFAe,IAAAA,EAAAz2B,IAEAxV,EAAA8U,MAAAhK,EAAAgK,OAAAmF,EACA,OAAA,EAGA,IAAA7B,EAAAH,EAAAtY,IAAAK,GACA,OAAAoY,EACAA,GAAAtN,GAEA2/B,GAAAQ,GACAhzB,EAAAzO,IAAAxJ,EAAA8K,GAGAy/B,GAAA0B,EAAAjsC,GAAAisC,EAAAnhC,GAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,IAEA,KAAA0zB,GACA,GAAAI,GACA,OAAAA,GAAA/sC,KAAAgB,IAAA+rC,GAAA/sC,KAAA8L,GAGA,OAAA,GC1GAohC,GAAA,EA8EA,IAAAC,GA9DA,SAAAnsC,EAAA8K,EAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,GACA,IAAAgC,EAAAwwB,EAAAyB,GACAE,EAAA16B,GAAA1R,GACAqsC,EAAAD,EAAAhkC,OAIA,GAAAikC,GAHA36B,GAAA5G,GACA1C,SAEA6R,EACA,OAAA,EAGA,IADA,IAAA9O,EAAAkhC,EACAlhC,KAAA,CACA,IAAAjH,EAAAkoC,EAAAjhC,GACA,KAAA8O,EAAA/V,KAAA4G,EAAA+E,GAAA/E,EAAA5G,IACA,OAAA,EAIA,IAAAkU,EAAAH,EAAAtY,IAAAK,GACA,GAAAoY,EACA,OAAAA,GAAAtN,EAEA,IAAA7I,GAAA,EACAgW,EAAAzO,IAAAxJ,EAAA8K,GAGA,IADA,IAAAwhC,EAAAryB,IACA9O,EAAAkhC,GAAA,CAEA,IAAA98B,EAAAvP,EADAkE,EAAAkoC,EAAAjhC,IAEA2/B,EAAAhgC,EAAA5G,GAEA,GAAAwL,EACA,IAAAq7B,EAAA9wB,EACAvK,EAAAo7B,EAAAv7B,EAAArL,EAAA4G,EAAA9K,EAAAiY,GACAvI,EAAAH,EAAAu7B,EAAA5mC,EAAAlE,EAAA8K,EAAAmN,GAGA,UAAAvX,IAAAqqC,EACAx7B,IAAAu7B,GAAAN,EAAAj7B,EAAAu7B,EAAAp7B,EAAA+6B,EAAAxyB,GACA8yB,GACA,CACA9oC,GAAA,EACA,MAEAqqC,IAAAA,EAAA,eAAApoC,GAEA,GAAAjC,IAAAqqC,EAAA,CACA,IAAAC,EAAAvsC,EAAA8C,YACA0pC,EAAA1hC,EAAAhI,YAGAypC,GAAAC,GACA,gBAAAxsC,GAAA,gBAAA8K,KACA,mBAAAyhC,GAAAA,aAAAA,GACA,mBAAAC,GAAAA,aAAAA,KACAvqC,GAAA,GAIA,OADAgW,EAAA,OAAAjY,GACAiC,GChDAwqC,MACAA,GAZA,yBAYAA,GAXA,yBAYAA,GAXA,sBAWAA,GAVA,uBAWAA,GAVA,uBAUAA,GATA,uBAUAA,GATA,8BASAA,GARA,wBASAA,GARA,yBAQA,EACAA,GAjCA,sBAiCAA,GAhCA,kBAiCAA,GApBA,wBAoBAA,GAhCA,oBAiCAA,GApBA,qBAoBAA,GAhCA,iBAiCAA,GAhCA,kBAgCAA,GA/BA,qBAgCAA,GA/BA,gBA+BAA,GA9BA,mBA+BAA,GA9BA,mBA8BAA,GA7BA,mBA8BAA,GA7BA,gBA6BAA,GA5BA,mBA6BAA,GA5BA,qBA4BA,EAGA,IAOAC,GAPAntC,OAAAW,UAOAgC,SAyBA,IAAAyqC,GALA,SAAA9sC,GACA,OAAAuC,EAAAvC,IACAuQ,GAAAvQ,EAAAuI,WAAAqkC,GAAAC,GAAA1tC,KAAAa,KClEA+sC,GAAA,EAGAC,GAAA,qBACAC,GAAA,iBACAC,GAAA,kBAMAC,GAHAztC,OAAAW,UAGAC,eA4DA,IAAA8sC,GA3CA,SAAAjtC,EAAA8K,EAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,GACA,IAAAi1B,EAAAp8B,GAAA9Q,GACAmtC,EAAAr8B,GAAAhG,GACAsiC,EAAAN,GACAO,EAAAP,GAEAI,IAEAE,GADAA,EAAAx5B,GAAA5T,KACA6sC,GAAAE,GAAAK,GAEAD,IAEAE,GADAA,EAAAz5B,GAAA9I,KACA+hC,GAAAE,GAAAM,GAEA,IAAAC,EAAAF,GAAAL,KAAA/qC,EAAAhC,GACAutC,EAAAF,GAAAN,KAAA/qC,EAAA8I,GACA0iC,EAAAJ,GAAAC,EAEA,GAAAG,IAAAF,EAEA,OADAr1B,IAAAA,EAAA,IAAA/I,IACAg+B,GAAAP,GAAA3sC,GACAuqC,GAAAvqC,EAAA8K,EAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,GACA+zB,GAAAhsC,EAAA8K,EAAAsiC,EAAA5C,EAAA96B,EAAA+6B,EAAAxyB,GAEA,KAAAwyB,EAAAmC,IAAA,CACA,IAAAa,EAAAH,GAAAN,GAAAhuC,KAAAgB,EAAA,eACA0tC,EAAAH,GAAAP,GAAAhuC,KAAA8L,EAAA,eAEA,GAAA2iC,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAAztC,EAAAH,QAAAG,EACA4tC,EAAAF,EAAA5iC,EAAAjL,QAAAiL,EAGA,OADAmN,IAAAA,EAAA,IAAA/I,IACAs7B,EAAAmD,EAAAC,EAAAl+B,EAAA+6B,EAAAxyB,IAGA,QAAAu1B,IAGAv1B,IAAAA,EAAA,IAAA/I,IACAi9B,GAAAnsC,EAAA8K,EAAA0/B,EAAA96B,EAAA+6B,EAAAxyB,KCjDA,IAAA41B,GAVA,SAAAC,EAAAjuC,EAAAiL,EAAA4E,EAAA+6B,EAAAxyB,GACA,OAAApY,IAAAiL,IAGA,MAAAjL,GAAA,MAAAiL,IAAAkB,EAAAnM,KAAAuC,EAAA0I,GACAjL,GAAAA,GAAAiL,GAAAA,EAEAmiC,GAAAptC,EAAAiL,EAAAgjC,EAAAp+B,EAAA+6B,EAAAxyB,KCeA,IAAA81B,GANA,SAAAluC,EAAAiL,EAAA4E,GAEA,IAAAzN,GADAyN,EAAA,mBAAAA,EAAAA,OAAAhP,GACAgP,EAAA7P,EAAAiL,QAAApK,EACA,YAAAA,IAAAuB,EAAA4rC,GAAAhuC,EAAAiL,EAAA4E,KAAAzN;;;;SCNA+rC,WAAArE,GACA3mC,YAAAuwB,GACA5uB,MAAA4uB,GAQApwB,KAAAC,SACA6qC,WAAA,EACAC,eAAA,EACAC,uBAAA,EACAC,SAAA,GAQAjrC,KAAAqwB,aAAAD,EAAAC,aAOArwB,KAAAkrC,SAAA9a,EAAA+a,UAQAnrC,KAAAorC,gBAQAprC,KAAAqrC,kBAAA,IAAA/vC,OAAAgwC,iBAAAtrC,KAAAurC,aAAAlpB,KAAAriB,OAOAH,QACAG,KAAAurC,aAAAvrC,KAAAqrC,kBAAAG,eAMA3rC,QAAAkwB,GACA/vB,KAAAorC,aAAAnnC,KAAA8rB,GAEA/vB,KAAAymC,WACAzmC,KAAAqrC,kBAAAI,QAAA1b,EAAA/vB,KAAAC,SAOAJ,SACA2B,MAAAkqC,SAEA,IAAA,MAAA3b,KAAA/vB,KAAAorC,aACAprC,KAAAqrC,kBAAAI,QAAA1b,EAAA/vB,KAAAC,SAOAJ,UACA2B,MAAAklC,UAEA1mC,KAAAqrC,kBAAAM,aAMA9rC,UACA2B,MAAAoqC,UAEA5rC,KAAAqrC,kBAAAM,aASA9rC,aAAAgsC,GAEA,GAAA,IAAAA,EAAA5mC,OACA,OAGA,MAAAorB,EAAArwB,KAAAqwB,aAGAyb,EAAA,IAAA1lC,IACA2lC,EAAA,IAAA9yB,IAIA,IAAA,MAAA+yB,KAAAH,EACA,GAAA,cAAAG,EAAAljC,KAAA,CACA,MAAA0O,EAAA6Y,EAAAqP,aAAAsM,EAAA3rC,QAGA,GAAAmX,GAAAA,EAAAqE,GAAA,aACA,SAGArE,IAAAxX,KAAAisC,mBAAAD,IACAD,EAAA35B,IAAAoF,GAMA,IAAA,MAAAw0B,KAAAH,EAAA,CACA,MAAAr0B,EAAA6Y,EAAAqP,aAAAsM,EAAA3rC,QAGA,KAAAmX,IAAAA,EAAAqE,GAAA,eAIA,kBAAAmwB,EAAAljC,KAAA,CACA,MAAAojC,EAAA7b,EAAAoS,0BAAAuJ,EAAA3rC,QAEA6rC,IAAAH,EAAAxjC,IAAA2jC,EAAA72B,QAGAy2B,EAAAzlC,IAAA6lC,GACApjC,KAAA,OACAqjC,QAAAD,EAAA9qC,KACAgrC,QAAAjT,GAAA6S,EAAA3rC,QACAqE,KAAAwnC,KAMAA,GAAApT,GAAAkT,EAAA3rC,SACA0rC,EAAA35B,IAAAie,EAAAqP,aAAAsM,EAAA3rC,OAAAy6B,cASA,MAAAuR,KAEA,IAAA,MAAAC,KAAAR,EAAAz8B,SACArP,KAAAkrC,SAAAqB,WAAA,OAAAD,EAAA5nC,MACA2nC,EAAApoC,KAAAqoC,GAGA,IAAA,MAAA/W,KAAAwW,EAAA,CACA,MAAAhc,EAAAM,EAAAmL,aAAAjG,GACAiX,EAAA9mC,MAAAC,KAAA4vB,EAAAnb,eACAqyB,EAAA/mC,MAAAC,KAAA0qB,EAAA0R,kBAAAhS,IAIA6a,GAAA4B,EAAAC,EAAAC,KACA1sC,KAAAkrC,SAAAqB,WAAA,WAAAhX,GAEA8W,EAAApoC,MACA6E,KAAA,WACA6jC,YAAAH,EACAI,YAAAH,EACA/nC,KAAA6wB,KAOA,MAAAjF,EAAAub,EAAA,GAAAxrC,OAAAmwB,cAAAE,eAEA,IAAAsE,EAAA,KAEA,GAAA1E,GAAAA,EAAAoT,WAAA,CAMA,MAAAmJ,EAAAxc,EAAAc,kBAAAb,EAAAoT,WAAApT,EAAAqT,cACAmJ,EAAAzc,EAAAc,kBAAAb,EAAAS,UAAAT,EAAAW,aAGA4b,GAAAC,IACA9X,EAAA,IAAAtN,GAAAmlB,IACA/a,UAAAgb,GAUA,SAAAJ,EAAAK,EAAAC,GAEA,IAAAtnC,MAAAkI,QAAAm/B,GAKA,OAAAA,IAAAC,MAIAD,EAAAlxB,GAAA,UAAAmxB,EAAAnxB,GAAA,UACAkxB,EAAA3rC,OAAA4rC,EAAA5rC,KAlBApB,KAAA2V,SAAA5O,KAAA,YAAAslC,EAAArX,GAIAh1B,KAAAowB,KAAA8B,SA+BAryB,mBAAAmsC,GACA,IAAAiB,EAAA,KASA,OANA,OAAAjB,EAAAx2B,aAAA,IAAAw2B,EAAAkB,aAAAjoC,QAAA,GAAA+mC,EAAAmB,WAAAloC,SACAgoC,EAAAjtC,KAAAqwB,aAAA6R,UAAA8J,EAAAmB,WAAA,IACAtM,cAAA,KAIAoM,GAAAA,EAAApxB,GAAA,UAAA;;;;SCnRAuxB,GAMAvtC,YAAAuwB,EAAAid,EAAAC,GAOAttC,KAAAowB,KAAAA,EAQApwB,KAAA2V,SAAAya,EAAAza,SAQA3V,KAAAqtC,SAAAA,EAQArtC,KAAAuwB,UAAA8c,EAAAhtC,OAEAwe,GAAA7e,KAAAstC,GASAjtC,aACA,OAAAL,KAAAowB,KAAAC,aAAAqP,aAAA1/B,KAAAuwB,WAMA1wB,iBACAG,KAAAqtC,SAAAE,iBAMA1tC,kBACAG,KAAAqtC,SAAAG;;;;SC3CAC,WAAAjH,GAqBA3mC,YAAAuwB,GACA5uB,MAAA4uB,GAQApwB,KAAAmmC,YAAA,EAMAtmC,QAAAkwB,IACA,iBAAA/vB,KAAA0tC,cAAA1tC,KAAA0tC,cAAA1tC,KAAA0tC,cAEA5sC,QAAAgI,IACA9I,KAAAsD,SAAAysB,EAAAjnB,EAAA,CAAAzD,EAAAgoC,KACArtC,KAAAymC,WACAzmC,KAAA2tC,WAAAN,KAEOlH,WAAAnmC,KAAAmmC,eAaPtmC,KAAA+tC,EAAAP,EAAAC,GACAttC,KAAAymC,WACAzmC,KAAA2V,SAAA5O,KAAA6mC,EAAA,IAAAR,GAAAptC,KAAAowB,KAAAid,EAAAC;;;;SC5EAO,WAAAJ,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEApwB,KAAA0tC,cAAA,UAAA,SAGA7tC,WAAAymC,GACAtmC,KAAA+G,KAAAu/B,EAAAx9B,KAAAw9B,GACAnX,QAAAmX,EAAAnX,QAEAC,OAAAkX,EAAAlX,OACAC,QAAAiX,EAAAjX,SAAAiX,EAAAwH,QACAxe,SAAAgX,EAAAhX,SAEAE,gBACA,OAAAN,GAAAlvB,UClBA,IAEA+tC,GAFAC,KAAAC,ICZAC,GAAA,sBAGAC,GAAA9rC,KAAA+a,IACAgxB,GAAA/rC,KAAAwiB,IAgLA,IAAAwpB,GA5HA,SAAA/kC,EAAAglC,EAAAjrC,GACA,IAAAkrC,EACAC,EACAC,EACA3vC,EACA4vC,EACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAEA,GAAA,mBAAAzlC,EACA,MAAA,IAAAiU,UAAA2wB,IAUA,SAAAc,EAAAC,GACA,IAAA1rC,EAAAgrC,EACAvyB,EAAAwyB,EAKA,OAHAD,EAAAC,OAAAjxC,EACAqxC,EAAAK,EACAnwC,EAAAwK,EAAA1D,MAAAoW,EAAAzY,GAqBA,SAAA2rC,EAAAD,GACA,IAAAE,EAAAF,EAAAN,EAMA,OAAAA,GAAAQ,GAAAb,GACAa,EAAA,GAAAL,GANAG,EAAAL,GAMAH,EAGA,SAAAW,IACA,IAAAH,EAAAlB,KACA,GAAAmB,EAAAD,GACA,OAAAI,EAAAJ,GAGAP,EAAAY,WAAAF,EAzBA,SAAAH,GACA,IAEAnwC,EAAAwvC,GAFAW,EAAAN,GAIA,OAAAG,EAAAV,GAAAtvC,EAAA2vC,GAHAQ,EAAAL,IAGA9vC,EAoBAywC,CAAAN,IAGA,SAAAI,EAAAJ,GAMA,OALAO,aAAAd,GACAA,OAAAnxC,EAIAwxC,GAAAR,EACAS,EAAAC,IAEAV,EAAAC,OAAAjxC,EACAuB,GAeA,SAAA2wC,IACA,IAAAR,EAAAlB,KACA2B,EAAAR,EAAAD,GAMA,GAJAV,EAAA/wB,UACAgxB,EAAAxuC,KACA2uC,EAAAM,EAEAS,EAAA,CACA,QAAAnyC,IAAAmxC,EACA,OAxEA,SAAAO,GAMA,OAJAL,EAAAK,EAEAP,EAAAY,WAAAF,EAAAd,GAEAO,EAAAG,EAAAC,GAAAnwC,EAkEA6wC,CAAAhB,GAEA,GAAAG,EAIA,OAFAU,aAAAd,GACAA,EAAAY,WAAAF,EAAAd,GACAU,EAAAL,GAMA,YAHApxC,IAAAmxC,IACAA,EAAAY,WAAAF,EAAAd,IAEAxvC,EAIA,OA1GAwvC,EAAA3xB,GAAA2xB,IAAA,EACAzlC,EAAAxF,KACAwrC,IAAAxrC,EAAAwrC,QAEAJ,GADAK,EAAA,YAAAzrC,GACA8qC,GAAAxxB,GAAAtZ,EAAAorC,UAAA,EAAAH,GAAAG,EACAM,EAAA,aAAA1rC,IAAAA,EAAA0rC,SAAAA,GAmGAU,EAAAG,OApCA,gBACAryC,IAAAmxC,GACAc,aAAAd,GAEAC,EAAAC,EAAA,EACAL,EAAAC,EAAAE,OAAAnxC,GAgCAkyC,EAAAI,MA7BA,WACA,YAAAtyC,IAAAmxC,EAAA5vC,EAAAuwC,EAAAtB,OA6BA0B;;;;SC/JAK,WAAAtJ,GAMA3mC,YAAAuwB,GACA5uB,MAAA4uB,GASApwB,KAAA+vC,kCAAA1B,GAAAjtC,GAAApB,KAAA2V,SAAA5O,KAAA,sBAAA3F,GAAA,KAMAvB,UACA,MAAA8V,EAAA3V,KAAA2V,SAwEA,IAAAwZ;;;;GAtEAxZ,EAAAgL,GAAA,UAAA,CAAAtb,EAAAjE,KACAuU,EAAA4M,UAEA2F,UAmEAiH,EAnEA/tB,EAAA+tB,UAoEAjB,GAAAI,YACAa,GAAAjB,GAAAE,WACAe,GAAAjB,GAAAG,SACAc,GAAAjB,GAAAK,YAvEAvuB,KAAAymC,YAEArlC,EAAAmsC,iBAEAvtC,KAAAgwC,qBAAA5uC,EAAA+tB,YAEMzsB,SAAA,WAMN7C,UACA2B,MAAAoqC,UAEA5rC,KAAA+vC,kCAAAH,SAgBA/vC,qBAAAsvB,GACA,MAAA5M,EAAAviB,KAAA2V,SAAA4M,UACA0tB,EAAA,IAAAvoB,GAAAnF,EAAA2G,aAAkEQ,SAAAnH,EAAAgG,WAAAiB,MAAA,IAGlE2F,GAAAjB,GAAAE,WAAAe,GAAAjB,GAAAG,SACA4hB,EAAAhoB,OAAAgoB,EAAAhb,oBAIA9F,GAAAjB,GAAAI,YAAAa,GAAAjB,GAAAK,WACA0hB,EAAAhoB,OAAAgoB,EAAAC,mBAGA,MAAA9uC,GACA+uC,aAAA5tB,EACA0tB,aAAAA,EACA3f,aAAA,MAIAtwB,KAAA2V,SAAA5O,KAAA,kBAAA3F,GAMApB,KAAA+vC,kCAAA3uC,IClCA,IAAAgvC,IAnBAvwC,MAAAsB,EAAAC,GACAivC,QAAA5uC,MAAAJ,EAAAF,GAAAC,IAaAvB,KAAAsB,EAAAC,GACAivC,QAAAC,KAAAjvC,EAAAF,GAAAC;;;;SC3CAmvC,WAAA/J,GACA3mC,YAAAuwB,GACA5uB,MAAA4uB,GAWApwB,KAAAwwC,iBAAApgB,EAAAqgB,YAAA5F,IAQA7qC,KAAAuiB,UAAAviB,KAAA2V,SAAA4M,UAUAviB,KAAAqwB,aAAAD,EAAAC,aASArwB,KAAA0wC,WAAA,IAAAC,QASA3wC,KAAA+vC,kCAAA1B,GAAAjtC,GAAApB,KAAA2V,SAAA5O,KAAA,sBAAA3F,GAAA,KAEApB,KAAA4wC,2BAAAC,YAAA,IAAA7wC,KAAA8wC,qBAAA,KAQA9wC,KAAA+wC,iBAAA,EAMAlxC,QAAAkwB,GACA,MAAAF,EAAAE,EAAAS,cAGAxwB,KAAA0wC,WAAAnoC,IAAAsnB,KAIA7vB,KAAAsD,SAAAusB,EAAA,kBAAA,KACA7vB,KAAAgxC,uBAAAnhB,KAGA7vB,KAAA0wC,WAAAt+B,IAAAyd,IAMAhwB,UACA2B,MAAAoqC,UAEAqF,cAAAjxC,KAAA4wC,4BACA5wC,KAAA+vC,kCAAAH,SAWA/vC,uBAAAgwB,GAIA,IAAA7vB,KAAAymC,YAAAzmC,KAAA2V,SAAA2M,YAAAtiB,KAAA2V,SAAAu7B,WACA,OAIAlxC,KAAAwwC,iBAAAX,QAIA,MAAAvf,EAAAT,EAAAY,YAAAC,eACAygB,EAAAnxC,KAAAqwB,aAAAiP,mBAAAhP,GAEA,IAAAtwB,KAAAuiB,UAAAkC,QAAA0sB,KAAAnxC,KAAAqwB,aAAA+O,sBAAA9O,GAOA,KAAAtwB,KAAA+wC,iBAAA,GASAX,GAAAE,KAAA,sGAKA,GAAAtwC,KAAAuiB,UAAA0K,UAAAkkB,GAGAnxC,KAAAowB,KAAA8B,aACG,CACH,MAAA9wB,GACA+uC,aAAAnwC,KAAAuiB,UACA0tB,aAAAkB,EACA7gB,aAAAA,GAIAtwB,KAAA2V,SAAA5O,KAAA,kBAAA3F,GAMApB,KAAA+vC,kCAAA3uC,IASAvB,qBACAG,KAAA+wC,iBAAA;;;;SCxKAK,WAAA3D,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEApwB,KAAA0tC,cAAA,QAAA,QACA1tC,KAAAmmC,YAAA,EACA,MAAAxwB,EAAA3V,KAAA2V,SAEAA,EAAAgL,GAAA,QAAA,KACAhL,EAAA2M,WAAA,EAOAtiB,KAAAqxC,iBAAA/B,WAAA,IAAAlf,EAAA8B,SAAA,MAGAvc,EAAAgL,GAAA,OAAA,CAAAC,EAAAxf,KACA,MAAAkwC,EAAA37B,EAAA4M,UAAAC,gBAEA,OAAA8uB,GAAAA,IAAAlwC,EAAAf,SACAsV,EAAA2M,WAAA,EAGA8N,EAAA8B,YAYAryB,WAAAwtC,GACArtC,KAAA+G,KAAAsmC,EAAAvkC,KAAAukC,GAMAxtC,UACAG,KAAAqxC,kBACA7B,aAAAxvC,KAAAqxC,kBAGA7vC,MAAAoqC;;;;SCrDA2F,WAAA9D,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEApwB,KAAA0tC,cAAA,mBAAA,oBAAA,kBACA,MAAA/3B,EAAA3V,KAAA2V,SAEAA,EAAAgL,GAAA,mBAAA,KACAhL,EAAA67B,aAAA,IAGA77B,EAAAgL,GAAA,iBAAA,KACAhL,EAAA67B,aAAA,IAIA3xC,WAAAwtC,GACArtC,KAAA+G,KAAAsmC,EAAAvkC,KAAAukC;;;;GCtBA,SAAAoE,GAAAz6B,GACA,MAAA,kBAAA5a,OAAAW,UAAAgC,SAAA6G,MAAAoR,GCSA,IAAA06B,GAJA,SAAAh1C,GACA,QAAAA,GAAA,IAAAA,EAAAY,UAAA2B,EAAAvC,KAAA8C,EAAA9C;;;;GCNA,SAAAi1C,GAAAn6B,GAEA,MAAAc,EAAAd,EAAAgZ,cAAAC,YAAAmhB,iBAAAp6B,GAEA,OACAgnB,IAAA9hB,SAAApE,EAAAu5B,eAAA,IACAC,MAAAp1B,SAAApE,EAAAy5B,iBAAA,IACAC,OAAAt1B,SAAApE,EAAA25B,kBAAA,IACAxT,KAAA/hB,SAAApE,EAAA45B,gBAAA;;;;SCHAC,GA4BAtyC,YAAAc,GACA,MAAAyxC,EAAAX,GAAA9wC,GAgBA,GAPAvE,OAAAC,eAAA2D,KAAA,WAEAtD,MAAAiE,EAAA0xC,SAAA1xC,EACA2xC,UAAA,EACA/1C,YAAA,IAGAm1C,GAAA/wC,IAAAyxC,EAAA,CACA,MAAAG,EAAAH,EAAAzxC,EAAAy3B,eAAAz3B,EAEA4xC,EAAA/hB,eAAA+hB,EAAA/hB,cAAAgiB,KAAAC,SAAAF,IAaAnC,GAAAE,KACA,6FACM3vC,OAAAA,IAKN+xC,GAAA1yC,KADAoyC,EACAD,GAAAQ,iBAAAhyC,GAAA,GAEAA,EAAAiyC,8BAEG,GAAAvN,GAAA1kC,GAAA,CACH,MAAAkyC,WAAUA,EAAAC,YAAAA,GAA0BnyC,EAEpC+xC,GAAA1yC,MACAw+B,IAAA,EACAsT,MAAAe,EACAb,OAAAc,EACArU,KAAA,EACAC,MAAAmU,EACAE,OAAAD,SAGAJ,GAAA1yC,KAAAW,GAmDAd,QACA,OAAA,IAAAsyC,GAAAnyC,MAUAH,OAAA26B,EAAAD,GAMA,OALAv6B,KAAAw+B,IAAAjE,EACAv6B,KAAA8xC,MAAAtX,EAAAx6B,KAAA0+B,MACA1+B,KAAAgyC,OAAAzX,EAAAv6B,KAAA+yC,OACA/yC,KAAAy+B,KAAAjE,EAEAx6B,KAUAH,OAAA26B,EAAAD,GAMA,OALAv6B,KAAAw+B,KAAAjE,EACAv6B,KAAA8xC,OAAAtX,EACAx6B,KAAAy+B,MAAAjE,EACAx6B,KAAAgyC,QAAAzX,EAEAv6B,KASAH,gBAAAmzC,GACA,MAAAC,GACAzU,IAAAn8B,KAAA+a,IAAApd,KAAAw+B,IAAAwU,EAAAxU,KACAsT,MAAAzvC,KAAAwiB,IAAA7kB,KAAA8xC,MAAAkB,EAAAlB,OACAE,OAAA3vC,KAAAwiB,IAAA7kB,KAAAgyC,OAAAgB,EAAAhB,QACAvT,KAAAp8B,KAAA+a,IAAApd,KAAAy+B,KAAAuU,EAAAvU,OAMA,OAHAwU,EAAAvU,MAAAuU,EAAAnB,MAAAmB,EAAAxU,KACAwU,EAAAF,OAAAE,EAAAjB,OAAAiB,EAAAzU,IAEAyU,EAAAvU,MAAA,GAAAuU,EAAAF,OAAA,EACA,KAEA,IAAAZ,GAAAc,GAUApzC,oBAAAmzC,GACA,MAAAC,EAAAjzC,KAAAkzC,gBAAAF,GAEA,OAAAC,EACAA,EAAAE,UAEA,EASAtzC,UACA,OAAAG,KAAA0+B,MAAA1+B,KAAA+yC,OAaAlzC,aACA,MAAAc,EAAAX,KAAAqyC,QACA,IAAAe,EAAApzC,KAAAqzC,QAGA,IAAAC,GAAA3yC,GAAA,CACA,IAAA0U,EAAA1U,EAAAm6B,YAAAn6B,EAAA4yC,wBAGA,KAAAl+B,IAAAi+B,GAAAj+B,IAAA,CACA,MAAAm+B,EAAA,IAAArB,GAAA98B,GACAo+B,EAAAL,EAAAF,gBAAAM,GAEA,IAAAC,EAOA,OAAA,KANAA,EAAAN,UAAAC,EAAAD,YAEAC,EAAAK,GAOAp+B,EAAAA,EAAAylB,YAIA,OAAAsY,EAWAvzC,QAAAmzC,GACA,IAAA,MAAAU,KAAAC,GACA,GAAA3zC,KAAA0zC,KAAAV,EAAAU,GACA,OAAA,EAIA,OAAA,EASA7zC,SAAAmzC,GACA,MAAAY,EAAA5zC,KAAAkzC,gBAAAF,GAEA,SAAAY,IAAAA,EAAAnvB,QAAAuuB,IAWAnzC,8BACA,MAAAc,EAAAX,KAAAqyC,QACA,IAAAwB,EAAAC,EAEA,GAAAzO,GAAA1kC,GACAkzC,EAAAlzC,EAAAkyC,WAAAlyC,EAAAgV,SAAAo+B,gBAAAC,YACAF,EAAAnzC,EAAAmyC,YAAAnyC,EAAAgV,SAAAo+B,gBAAAE,iBACG,CACH,MAAAC,EAAAvC,GAAA3xC,KAAAqyC,SAEAwB,EAAAlzC,EAAAwzC,YAAAxzC,EAAAqzC,YACAF,EAAAnzC,EAAAyzC,aAAAzzC,EAAAszC,aAEAj0C,KAAAq0C,OAAAH,EAAAzV,KAAAyV,EAAA1V,KAUA,OANAx+B,KAAA0+B,OAAAmV,EACA7zC,KAAA8xC,OAAA+B,EAEA7zC,KAAA+yC,QAAAe,EACA9zC,KAAAgyC,QAAA8B,EAEA9zC,KASAH,wBAAAsnB,GACA,MAAAmtB,KAEAC,EAAA7uC,MAAAC,KAAAwhB,EAAAqtB,kBAEA,GAAAD,EAAAtvC,OACA,IAAA,MAAAguC,KAAAsB,EACAD,EAAArwC,KAAA,IAAAkuC,GAAAc,QAOA,CACA,IAAA7a,EAAAjR,EAAAiR,eAEA4C,GAAA5C,KACAA,EAAAA,EAAA0C,YAGA,MAAAmY,EAAA,IAAAd,GAAA/Z,EAAAwa,yBACAK,EAAAnB,MAAAmB,EAAAxU,KACAwU,EAAAvU,MAAA,EAEA4V,EAAArwC,KAAAgvC,GAGA,OAAAqB,GAIA,MAAAX,IAAA,MAAA,QAAA,SAAA,OAAA,QAAA,UAOA,SAAAjB,GAAAO,EAAAtyC,GACA,IAAA,MAAA1D,KAAA02C,GACAV,EAAAh2C,GAAA0D,EAAA1D,GASA,SAAAq2C,GAAAmB,GACA,QAAA/C,GAAA+C,IAIAA,IAAAA,EAAAjkB,cAAAgiB;;;;GC5XA,SAAAkC,IAAAr0C,OAA6CA,EAAAs0C,eAAAA,EAAA,IAC7C,MAAAC,EAAAC,GAAAx0C,GACA,IAAAy0C,EAAAF,EACAG,EAAA,KAGA,KAAAD,GAAA,CACA,IAAAE,EAeAC,GANAD,EAAAE,GADAJ,GAAAF,EACAv0C,EAEA00C,GAIA,IAMAI,GAAA90C,EAAAy0C,IAKA,MAAAM,EAAAD,GAAA90C,EAAAy0C,GAEAO,GAAAP,EAAAM,EAAAT,GAEAG,EAAAz/B,QAAAy/B,GAKAC,EAAAD,EAAAQ,aACAR,EAAAA,EAAAz/B,QAEAy/B,EAAA,MAmEA,SAAAO,GAAA/5C,EAAA23C,EAAA0B,GACA,MAAAY,EAAAtC,EAAAI,QAAAgB,OAAA,EAAAM,GACAa,EAAAvC,EAAAI,QAAAgB,OAAA,GAAAM,GACAc,EAAA,IAAAtD,GAAA72C,GAAAo6C,8BAIA,KAFAF,EAAAD,GAEAxzB,MAAAkxB,GAAAwC,EAAAhD,SAAAQ,IAAA,CACA,IAAAjQ,QAAOA,EAAAC,QAAAA,GAAmB3nC,EAE1Bq6C,GAAAH,EAAAC,GACAxS,GAAAwS,EAAAjX,IAAAyU,EAAAzU,IAAAmW,EACGiB,GAAAL,EAAAE,KACHxS,GAAAgQ,EAAAjB,OAAAyD,EAAAzD,OAAA2C,GAKAkB,GAAA5C,EAAAwC,GACAzS,GAAAyS,EAAAhX,KAAAwU,EAAAxU,KAAAkW,EACGmB,GAAA7C,EAAAwC,KACHzS,GAAAiQ,EAAAnB,MAAA2D,EAAA3D,MAAA6C,GAGAr5C,EAAAgoC,SAAAN,EAAAC,IASA,SAAAgS,GAAA5/B,EAAA0gC,GACA,MAAAC,EAAAnB,GAAAx/B,GACA,IAAAm+B,EAAA4B,EAEA,KAAA//B,GAAA2gC,EAAArgC,SAAA68B,MACA4C,EAAAW,KACAvC,EAAA,IAAArB,GAAA98B,GAAAqgC,+BAEAjD,SAAA2C,KACAO,GAAAP,EAAA5B,GACAn+B,EAAAguB,WAAAmQ,EAAAhV,IAAA4W,EAAA5W,IACIoX,GAAAR,EAAA5B,KACJn+B,EAAAguB,WAAA+R,EAAApD,OAAAwB,EAAAxB,QAGA6D,GAAAT,EAAA5B,GACAn+B,EAAA+tB,YAAAoQ,EAAA/U,KAAA2W,EAAA3W,KACIqX,GAAAV,EAAA5B,KACJn+B,EAAA+tB,YAAAgS,EAAAtD,MAAA0B,EAAA1B,QAIAz8B,EAAAA,EAAAylB,WASA,SAAA8a,GAAAK,EAAAC,GACA,OAAAD,EAAAjE,OAAAkE,EAAAlE,OAQA,SAAA2D,GAAAM,EAAAC,GACA,OAAAD,EAAAzX,IAAA0X,EAAA1X,IAQA,SAAAqX,GAAAI,EAAAC,GACA,OAAAD,EAAAxX,KAAAyX,EAAAzX,KAQA,SAAAqX,GAAAG,EAAAC,GACA,OAAAD,EAAAnE,MAAAoE,EAAApE,MAQA,SAAA+C,GAAAJ,GACA,OAAAhD,GAAAgD,GACAA,EAAArc,eAAA5H,cAAAC,YAEAgkB,EAAAjkB,cAAAC,YASA,SAAAykB,GAAAT,GACA,GAAAhD,GAAAgD,GAAA,CACA,IAAAp/B,EAAAo/B,EAAAlB,wBAOA,OAJAvY,GAAA3lB,KACAA,EAAAA,EAAAylB,YAGAzlB,EAEA,OAAAo/B,EAAA3Z,WAWA,SAAAqa,GAAA90C,EAAA81C,GACA,MAAAvB,EAAAC,GAAAx0C,GACA4yC,EAAA,IAAAd,GAAA9xC,GAEA,GAAAu0C,IAAAuB,EACA,OAAAlD,EACE,CACF,IAAA6B,EAAAF,EAEA,KAAAE,GAAAqB,GAAA,CACA,MAAAC,EAAAtB,EAAAQ,aACAe,EAAA,IAAAlE,GAAAiE,GAAAV,8BAEAzC,EAAAoB,OAAAgC,EAAA5X,KAAA4X,EAAA7X,KAEAsW,EAAAA,EAAAz/B,QAIA,OAAA49B;;;;GAxMA72C,OAAAmiC,WACA+X,2BAAA5B,GACA6B,4BAZA,SAAAl2C,GAGA40C,GAFAC,GAAA70C,GAEA,IACA,IAAA8xC,GAAA9xC,aC3BAm2C,GACA32C,cAOAG,KAAA2V,SAAA,IAAA4W,GAUAvsB,KAAAqwB,aAAA,IAAA0P,GAQA//B,KAAAmrC,UAAA,IAAAlQ,GAAAj7B,KAAAqwB,aAAArwB,KAAA2V,SAAA4M,WACAviB,KAAAmrC,UAAA9oB,KAAA,aAAAnc,GAAAlG,KAAA2V,UAQA3V,KAAAy2C,SAAA,IAAArwC,IAQApG,KAAA02C,WAAA,IAAAtwC,IAQApG,KAAA22C,gBAAA,EAQA32C,KAAA42C,sBAAA,EAQA52C,KAAA62C,uBAAA,EAQA72C,KAAA82C,QAAA,IAAAjlB,GAAA7xB,KAAA2V,UAGA3V,KAAA+2C,YAAAlM,IACA7qC,KAAA+2C,YAAAxG,IACAvwC,KAAA+2C,YAAA3F,IACApxC,KAAA+2C,YAAAlJ,IACA7tC,KAAA+2C,YAAAjH,IACA9vC,KAAA+2C,YAAAxF,IAGAvxC,K1CMA2V,SAAAgL,GAAA,UAAA8Y,I0CLAtJ,GAAAnwB,MAGAA,KAAA2gB,GAAA,SAAA,KACA3gB,KAAAg3C,YAeAn3C,cAAAu+B,EAAAniC,EAAA,QACA,MAAAg7C,EAAAj3C,KAAA2V,SAAAuhC,QAAAj7C,GAGAg7C,EAAAr0B,MAAAwb,EAAA0D,QAAApU,cAEA1tB,KAAAy2C,SAAApwC,IAAApK,EAAAmiC,GACAp+B,KAAAqwB,aAAAuQ,aAAAxC,EAAA6Y,GACAj3C,KAAAmrC,UAAAoB,WAAA,WAAA0K,GACAj3C,KAAAmrC,UAAAjQ,aAAA9oB,IAAAgsB,EAAA5N,eAEAymB,EAAAt2B,GAAA,kBAAA,CAAAC,EAAAlc,IAAA1E,KAAAmrC,UAAAoB,WAAA,WAAA7nC,IACAuyC,EAAAt2B,GAAA,oBAAA,CAAAC,EAAAlc,IAAA1E,KAAAmrC,UAAAoB,WAAA,aAAA7nC,IACAuyC,EAAAt2B,GAAA,cAAA,CAAAC,EAAAlc,IAAA1E,KAAAmrC,UAAAoB,WAAA,OAAA7nC,IAEA,IAAA,MAAAyyC,KAAAn3C,KAAA02C,WAAArnC,SACA8nC,EAAA1L,QAAArN,EAAAniC,GAUA4D,WAAA5D,EAAA,QACA,OAAA+D,KAAAy2C,SAAAj6C,IAAAP,GAgBA4D,YAAAu3C,GACA,IAAAD,EAAAn3C,KAAA02C,WAAAl6C,IAAA46C,GAEA,GAAAD,EACA,OAAAA,EAGAA,EAAA,IAAAC,EAAAp3C,MAEAA,KAAA02C,WAAArwC,IAAA+wC,EAAAD,GAEA,IAAA,MAAAl7C,EAAA8zB,KAAA/vB,KAAAy2C,SACAU,EAAA1L,QAAA1b,EAAA9zB,GAKA,OAFAk7C,EAAAzL,SAEAyL,EASAt3C,YAAAu3C,GACA,OAAAp3C,KAAA02C,WAAAl6C,IAAA46C,GAMAv3C,mBACA,IAAA,MAAAs3C,KAAAn3C,KAAA02C,WAAArnC,SACA8nC,EAAAzQ,UAOA7mC,kBACA,IAAA,MAAAs3C,KAAAn3C,KAAA02C,WAAArnC,SACA8nC,EAAAzL,SAQA7rC,uBACA,MAAAsnB,EAAAnnB,KAAA2V,SAAA4M,UAAAoG,gBAEAxB,GACAutB,IACAr0C,OAAAL,KAAAqwB,aAAAgnB,eAAAlwB,GACAwtB,eAAA,KASA90C,QACA,IAAAG,KAAA2V,SAAA2M,UAAA,CACA,MAAA2C,EAAAjlB,KAAA2V,SAAA4M,UAAAC,gBAEAyC,GACAjlB,KAAAqwB,aAAAhI,MAAApD,GACAjlB,KAAAkyB,UASAke,GAAAE,KAAA,6EA+BAzwC,OAAAuD,GACA,GAAApD,KAAA42C,sBAAA52C,KAAA62C,sBASA,MAAA,IAAA51C,EACA,qOAOAjB,KAAA22C,eACAvzC,EAAApD,KAAA82C,UAOA92C,KAAA22C,gBAAA,EACAvzC,EAAApD,KAAA82C,SACA92C,KAAA22C,gBAAA,EAGA32C,KAAA62C,uBAAA,EACA72C,KAAA2V,SAAA2hC,gBAAAt3C,KAAA82C,SACA92C,KAAA62C,uBAAA,EAEA72C,KAAA+G,KAAA,WAUAlH,SACAG,KAAAu3C,OAAA,QAMA13C,UACA,IAAA,MAAAs3C,KAAAn3C,KAAA02C,WAAArnC,SACA8nC,EAAAvL,UAGA5rC,KAAAwD,gBASA3D,UACAG,KAAA42C,sBAAA,EACA52C,KAAAw3C,mBACAx3C,KAAAmrC,UAAAjZ,SACAlyB,KAAAy3C,kBACAz3C,KAAA42C,sBAAA;;;;;AClXA,SAAAc,GAAAt2C,GACA,OAAA5B,EAAA4B,GACA2V,GAAA3V,GAEA,IAAAgF,IAAAhF;;;;GDmYA4F,EAAAwvC,GAAA31B,UErXA82B,GASA93C,YAAA8Y,GASA3Y,KAAAqV,OAAA,KAQArV,KAAA4Y,OAAA8+B,GAAA/+B,GAYA3Q,YACA,IAAAsN,EAEA,IAAAtV,KAAAqV,OACA,OAAA,KAGA,GAAA,QAAAC,EAAAtV,KAAAqV,OAAAE,cAAAvV,OACA,MAAA,IAAAiB,EAAA,iFAGA,OAAAqU,EAaAiP,kBACA,IAAAjP,EAEA,IAAAtV,KAAAqV,OACA,OAAA,KAGA,GAAA,QAAAC,EAAAtV,KAAAqV,OAAAuiC,oBAAA53C,OACA,MAAA,IAAAiB,EAAA,iFAGA,OAAAqU,EAYAuB,iBACA,OAAA,EAWAmO,gBACA,OAAAhlB,KAAAqV,OAIArV,KAAAukB,YAAAvkB,KAAA6W,WAHA,KAYArB,kBACA,MAAAxN,EAAAhI,KAAAgI,MAEA,OAAA,OAAAA,GAAAhI,KAAAqV,OAAAI,SAAAzN,EAAA,IAAA,KASA0N,sBACA,MAAA1N,EAAAhI,KAAAgI,MAEA,OAAA,OAAAA,GAAAhI,KAAAqV,OAAAI,SAAAzN,EAAA,IAAA,KAUAhN,WACA,IAAAA,EAAAgF,KAEA,KAAAhF,EAAAqa,QACAra,EAAAA,EAAAqa,OAGA,OAAAra,EAUA2a,eAEA,OAAA3V,KAAAhF,MAAAgF,KACA,KAIAA,KAAAhF,KAAA2a,UAAA,KAmBA9V,UACA,MAAAmC,KACA,IAAA0C,EAAA1E,KAEA,KAAA0E,EAAA2Q,QACArT,EAAA89B,QAAAp7B,EAAA6f,aACA7f,EAAAA,EAAA2Q,OAGA,OAAArT,EAYAnC,aAAAwD,GAA0BuS,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAAT,EAAAhS,EAAAuS,YAAA5V,KAAAA,KAAAqV,OAEA,KAAAA,GACAS,EAAAzS,EAAAwS,YAAA,OAAA,WAAAR,GACAA,EAAAA,EAAAA,OAGA,OAAAS,EAaAjW,kBAAA6E,EAAArB,MACA,MAAA0S,EAAA/V,KAAAgW,aAAA3S,GACA4S,EAAAvR,EAAAsR,aAAA3S,GAEA,IAAA3H,EAAA,EAEA,KAAAqa,EAAAra,IAAAua,EAAAva,IAAAqa,EAAAra,IACAA,IAGA,OAAA,IAAAA,EAAA,KAAAqa,EAAAra,EAAA,GASAmE,aAAAkB,GACA,OAAAf,KAAA4Y,OAAArQ,IAAAxH,GASAlB,aAAAkB,GACA,OAAAf,KAAA4Y,OAAApc,IAAAuE,GAWAlB,gBACA,OAAAG,KAAA4Y,OAAAvQ,UAQAxI,mBACA,OAAAG,KAAA4Y,OAAA/X,OAQAhB,SACA,MAAAuW,KAMA,OAJApW,KAAA4Y,OAAAjH,OACAyE,EAAA4D,eAAAha,KAAA4Y,SAGAxC,EASAvW,SACA,OAAA,IAAA83C,GAAA33C,KAAA4Y,QASA/Y,UACAG,KAAAqV,OAAAa,gBAAAlW,KAAAgI,OAWAnI,cAAAkB,EAAArE,GACAsD,KAAA4Y,OAAAvS,IAAAtF,EAAArE,GAUAmD,iBAAA8Y,GACA3Y,KAAA4Y,OAAA8+B,GAAA/+B,GAWA9Y,iBAAAkB,GACA,OAAAf,KAAA4Y,OAAAtS,OAAAvF,GASAlB,mBACAG,KAAA4Y,OAAArS;;;;SCjXAsxC,WAAAF,GAWA93C,YAAAuB,EAAAuX,GACAnX,MAAAmX,GAQA3Y,KAAAwW,MAAApV,GAAA,GAMAyV,iBACA,OAAA7W,KAAAoB,KAAA6D,OAQA7D,WACA,OAAApB,KAAAwW,MAMA3W,GAAAiJ,GACA,MAAA,QAAAA,EAQAjJ,SACA,MAAAuW,EAAA5U,MAAAs2C,SAIA,OAFA1hC,EAAAhV,KAAApB,KAAAoB,KAEAgV,EASAvW,SACA,OAAA,IAAAg4C,GAAA73C,KAAAoB,KAAApB,KAAAy1B,iBASA51B,gBAAAuW,GACA,OAAA,IAAAyhC,GAAAzhC,EAAAhV,KAAAgV,EAAA4D;;;;SC5DA+9B,GAWAl4C,YAAA8W,EAAAC,EAAA3R,GASA,GAFAjF,KAAA2W,SAAAA,EAEAC,EAAA,GAAAA,EAAAD,EAAAE,WAMA,MAAA,IAAA5V,EAAA,8EAGA,GAAAgE,EAAA,GAAA2R,EAAA3R,EAAA0R,EAAAE,WAMA,MAAA,IAAA5V,EAAA,kEASAjB,KAAAoB,KAAAuV,EAAAvV,KAAAoB,UAAAoU,EAAAA,EAAA3R,GAQAjF,KAAA4W,aAAAA,EAUA2N,kBACA,OAAA,OAAAvkB,KAAA2W,SAAA4N,YAAAvkB,KAAA2W,SAAA4N,YAAAvkB,KAAA4W,aAAA,KAUAC,iBACA,OAAA7W,KAAAoB,KAAA6D,OAUA+f,gBACA,OAAA,OAAAhlB,KAAAukB,YAAAvkB,KAAAukB,YAAAvkB,KAAA6W,WAAA,KAcAC,gBACA,OAAA9W,KAAA6W,aAAA7W,KAAA2W,SAAAE,WASAxB,aACA,OAAArV,KAAA2W,SAAAtB,OASAra,WACA,OAAAgF,KAAA2W,SAAA3b,KAUA2a,eACA,OAAA3V,KAAA2W,SAAAhB,SAWA9V,GAAAiJ,GACA,MAAA,aAAAA,EASAjJ,UACA,MAAAmC,EAAAhC,KAAA2W,SAAAqhC,UAMA,OAJAh2C,EAAAiD,OAAA,IACAjD,EAAAA,EAAAiD,OAAA,IAAAjF,KAAA4W,cAGA5U,EAYAnC,aAAAwD,GAA0BuS,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAAT,EAAAhS,EAAAuS,YAAA5V,KAAAA,KAAAqV,OAEA,KAAAA,GACAS,EAAAzS,EAAAwS,YAAA,OAAA,WAAAR,GACAA,EAAAA,EAAAA,OAGA,OAAAS,EASAjW,aAAAkB,GACA,OAAAf,KAAA2W,SAAAoB,aAAAhX,GASAlB,aAAAkB,GACA,OAAAf,KAAA2W,SAAAqB,aAAAjX,GAWAlB,gBACA,OAAAG,KAAA2W,SAAA8e,gBAQA51B,mBACA,OAAAG,KAAA2W,SAAAsZ;;;;SCpPAgoB,GAOAp4C,YAAA6a,GAOA1a,KAAAk4C,UAEAx9B,GACA1a,KAAAm4C,aAAA,EAAAz9B,GAWA7a,CAAAoD,OAAAiU,YACA,OAAAlX,KAAAk4C,OAAAj1C,OAAAiU,YASAjS,aACA,OAAAjF,KAAAk4C,OAAAjzC,OASAmzC,gBACA,OAAAp4C,KAAAk4C,OAAA5rB,OAAA,CAAAoD,EAAAhrB,IAAAgrB,EAAAhrB,EAAAmS,WAAA,GASAhX,QAAAmI,GACA,OAAAhI,KAAAk4C,OAAAlwC,IAAA,KASAnI,aAAA6E,GACA,MAAAsD,EAAAhI,KAAAk4C,OAAA1yC,QAAAd,GAEA,OAAA,GAAAsD,EAAA,KAAAA,EAUAnI,mBAAA6E,GACA,MAAAsD,EAAAhI,KAAAq4C,aAAA3zC,GAEA,OAAA,OAAAsD,EAAA,KAAAhI,KAAAk4C,OAAAvzC,MAAA,EAAAqD,GAAAskB,OAAA,CAAAoD,EAAAhrB,IAAAgrB,EAAAhrB,EAAAmS,WAAA,GAYAhX,cAAAmI,GACA,GAAAA,GAAAhI,KAAAk4C,OAAAjzC,OACA,OAAAjF,KAAAo4C,UAGA,MAAA1zC,EAAA1E,KAAAk4C,OAAAlwC,GAEA,IAAAtD,EAMA,MAAA,IAAAzD,EAAA,qFAGA,OAAAjB,KAAAs4C,mBAAA5zC,GAYA7E,cAAAyP,GACA,IAAAipC,EAAA,EAEA,IAAA,MAAA7zC,KAAA1E,KAAAk4C,OAAA,CACA,GAAA5oC,GAAAipC,GAAAjpC,EAAAipC,EAAA7zC,EAAAmS,WACA,OAAA7W,KAAAq4C,aAAA3zC,GAGA6zC,GAAA7zC,EAAAmS,WAGA,GAAA0hC,GAAAjpC,EAMA,MAAA,IAAArO,EAAA,uFAGA,OAAAjB,KAAAiF,OAUApF,aAAAmI,EAAA0S,GAEA,IAAA,MAAAhW,KAAAgW,EACA,KAAAhW,aAAAizC,IAMA,MAAA,IAAA12C,EAAA,iGAIAjB,KAAAk4C,OAAAhzC,OAAA8C,EAAA,KAAA0S,GAWA7a,aAAA24C,EAAA39B,EAAA,GACA,OAAA7a,KAAAk4C,OAAAhzC,OAAAszC,EAAA39B,GASAhb,SACA,OAAAG,KAAAk4C,OAAAjtC,IAAAvG,GAAAA,EAAAozC;;;;SCvLAW,WAAAd,GAaA93C,YAAA5D,EAAA0c,EAAAta,GACAmD,MAAAmX,GAQA3Y,KAAA/D,KAAAA,EAQA+D,KAAA8Y,UAAA,IAAAm/B,GAEA55C,GACA2B,KAAA+Y,gBAAA,EAAA1a,GAUAkb,iBACA,OAAAvZ,KAAA8Y,UAAA7T,OASAmzC,gBACA,OAAAp4C,KAAA8Y,UAAAs/B,UASA5+B,cACA,OAAA,IAAAxZ,KAAAuZ,WAsBA1Z,GAAAiJ,EAAA7M,EAAA,MACA,OAAAA,EAGA,WAAA6M,GAAA7M,GAAA+D,KAAA/D,KAFA,WAAA6M,GAAAA,GAAA9I,KAAA/D,KAYA4D,SAAAmI,GACA,OAAAhI,KAAA8Y,UAAA4/B,QAAA1wC,GAQAnI,cACA,OAAAG,KAAA8Y,UAAA7V,OAAAiU,YASArX,cAAA6E,GACA,OAAA1E,KAAA8Y,UAAAu/B,aAAA3zC,GAWA7E,oBAAA6E,GACA,OAAA1E,KAAA8Y,UAAAw/B,mBAAA5zC,GAoBA7E,cAAAyP,GACA,OAAAtP,KAAA8Y,UAAA6/B,cAAArpC,GAcAzP,cAAA+4C,GACA,IAAAl0C,EAAA1E,KAEA,IAAA,MAAAgI,KAAA4wC,EACAl0C,EAAAA,EAAA+Q,SAAA/Q,EAAAi0C,cAAA3wC,IAGA,OAAAtD,EAQA7E,SACA,MAAAuW,EAAA5U,MAAAs2C,SAIA,GAFA1hC,EAAAna,KAAA+D,KAAA/D,KAEA+D,KAAA8Y,UAAA7T,OAAA,EAAA,CACAmR,EAAA/X,YAEA,IAAA,MAAAqG,KAAA1E,KAAA8Y,UACA1C,EAAA/X,SAAA4F,KAAAS,EAAAozC,UAIA,OAAA1hC,EAWAvW,OAAAoa,GAAA,GACA,MAAA5b,EAAA4b,EAAAvU,MAAAC,KAAA3F,KAAA8Y,WAAA7N,IAAAvG,GAAAA,EAAA2V,QAAA,IAAA,KAEA,OAAA,IAAAo+B,GAAAz4C,KAAA/D,KAAA+D,KAAAy1B,gBAAAp3B,GAUAwB,gBAAA6a,GACA1a,KAAA+Y,gBAAA/Y,KAAAuZ,WAAAmB,GAYA7a,gBAAAmI,EAAAwS,GACA,MAAAE,EAkEA,SAAAA,GAEA,GAAA,iBAAAA,EACA,OAAA,IAAAm9B,GAAAn9B,IAGAzD,GAAAyD,KACAA,GAAAA,IAIA,OAAAhV,MAAAC,KAAA+U,GACAzP,IAAAvG,GACA,iBAAAA,EACA,IAAAmzC,GAAAnzC,GAGAA,aAAAqzC,GACA,IAAAF,GAAAnzC,EAAAtD,KAAAsD,EAAA+wB,iBAGA/wB;;;;GAvFAm0C,CAAAr+B,GAEA,IAAA,MAAA9V,KAAAgW,EAEA,OAAAhW,EAAA2Q,QACA3Q,EAAAkW,UAGAlW,EAAA2Q,OAAArV,KAGAA,KAAA8Y,UAAAq/B,aAAAnwC,EAAA0S,GAaA7a,gBAAAmI,EAAA6S,EAAA,GACA,MAAAH,EAAA1a,KAAA8Y,UAAAggC,aAAA9wC,EAAA6S,GAEA,IAAA,MAAAnW,KAAAgW,EACAhW,EAAA2Q,OAAA,KAGA,OAAAqF,EAUA7a,gBAAAuW,GACA,IAAA/X,EAAA,KAEA,GAAA+X,EAAA/X,SAAA,CACAA,KAEA,IAAA,MAAA8b,KAAA/D,EAAA/X,SACA8b,EAAAle,KAEAoC,EAAA4F,KAAAw0C,GAAAM,SAAA5+B,IAGA9b,EAAA4F,KAAA4zC,GAAAkB,SAAA5+B,IAKA,OAAA,IAAAs+B,GAAAriC,EAAAna,KAAAma,EAAA4D,WAAA3b,UCxSA26C,GAmBAn5C,YAAAwD,MACA,IAAAA,EAAAyf,aAAAzf,EAAA0f,cAMA,MAAA,IAAA9hB,EAAA,oGAGA,MAAA+hB,EAAA3f,EAAA2f,WAAA,UAEA,GAAA,WAAAA,GAAA,YAAAA,EACA,MAAA,IAAA/hB,EACA,yFACK+hB,UAAAA,IAULhjB,KAAAgjB,UAAAA,EAaAhjB,KAAA8iB,WAAAzf,EAAAyf,YAAA,KAWAzf,EAAA0f,cACA/iB,KAAAijB,SAAAg2B,GAAA91B,mBAAA9f,EAAA0f,eAEA/iB,KAAAijB,SAAAg2B,GAAA91B,mBAAAnjB,KAAA8iB,WAAA,YAAA9iB,KAAAgjB,UAAA,MAAA,UAUAhjB,KAAAojB,mBAAA/f,EAAA+f,iBASApjB,KAAAqjB,UAAAhgB,EAAAggB,QAWArjB,KAAAsjB,mBAAAjgB,EAAAigB,iBAQAtjB,KAAAujB,qBAAAvjB,KAAA8iB,WAAA9iB,KAAA8iB,WAAAxF,MAAAjI,OAAA,KAQArV,KAAAwjB,mBAAAxjB,KAAA8iB,WAAA9iB,KAAA8iB,WAAAW,IAAApO,OAAA,KASArV,KAAAk5C,eAAAl5C,KAAAijB,SAAA5N,OAQAxV,CAAAoD,OAAAiU,YACA,OAAAlX,KAeAH,KAAA6jB,GACA,IAAAxF,EAAAxhB,EAAAinB,EAAAw1B,EAEA,GACAx1B,EAAA3jB,KAAAijB,SACAk2B,EAAAn5C,KAAAk5C,iBAEMh7B,KAAAA,EAAAxhB,MAAAA,GAAcsD,KAAAie,eACjBC,GAAAwF,EAAAhnB,IAEHwhB,IACAle,KAAAijB,SAAAU,EACA3jB,KAAAk5C,eAAAC,GASAt5C,OACA,MAAA,WAAAG,KAAAgjB,UACAhjB,KAAA4jB,QAEA5jB,KAAA6jB,YAYAhkB,QACA,MAAAikB,EAAA9jB,KAAAijB,SACAA,EAAAg2B,GAAA91B,mBAAAnjB,KAAAijB,UACA5N,EAAArV,KAAAk5C,eAGA,GAAA,OAAA7jC,EAAAA,QAAA4N,EAAA3T,SAAA+F,EAAA+iC,UACA,OAAWl6B,MAAA,GAIX,GAAA7I,IAAArV,KAAAwjB,oBAAAP,EAAA3T,QAAAtP,KAAA8iB,WAAAW,IAAAnU,OACA,OAAW4O,MAAA,GAGX,MAAAxZ,EAAAue,EAAAtM,SAAAsM,EAAAtM,SAAAsM,EAAA6B,UAEA,GAAApgB,aAAA+zC,GAWA,OAVAz4C,KAAAqjB,QAKAJ,EAAA3T,UAHA2T,EAAAjhB,KAAAiC,KAAA,GACAjE,KAAAk5C,eAAAx0C,GAKA1E,KAAAijB,SAAAA,EAEAm2B,GAAA,eAAA10C,EAAAof,EAAAb,EAAA,GACG,GAAAve,aAAAmzC,GAAA,CACH,IAAA3zB,EAEA,GAAAlkB,KAAAojB,iBACAc,EAAA,MACI,CACJ,IAAA5U,EAAA5K,EAAAsgB,UAEAhlB,KAAAwjB,oBAAAnO,GAAArV,KAAA8iB,WAAAW,IAAAnU,OAAAA,IACAA,EAAAtP,KAAA8iB,WAAAW,IAAAnU,QAGA4U,EAAA5U,EAAA2T,EAAA3T,OAGA,MAAA+pC,EAAAp2B,EAAA3T,OAAA5K,EAAA6f,YACAjN,EAAA,IAAAygC,GAAArzC,EAAA20C,EAAAn1B,GAKA,OAHAjB,EAAA3T,QAAA4U,EACAlkB,KAAAijB,SAAAA,EAEAm2B,GAAA,OAAA9hC,EAAAwM,EAAAb,EAAAiB,GAQA,OALAjB,EAAAjhB,KAAAvB,MACAwiB,EAAA3T,SACAtP,KAAAijB,SAAAA,EACAjjB,KAAAk5C,eAAA7jC,EAAAA,OAEArV,KAAAsjB,iBACAtjB,KAAA4jB,QAEAw1B,GAAA,aAAA/jC,EAAAyO,EAAAb,GAaApjB,YACA,MAAAikB,EAAA9jB,KAAAijB,SACAA,EAAAg2B,GAAA91B,mBAAAnjB,KAAAijB,UACA5N,EAAArV,KAAAk5C,eAGA,GAAA,OAAA7jC,EAAAA,QAAA,IAAA4N,EAAA3T,OACA,OAAW4O,MAAA,GAIX,GAAA7I,GAAArV,KAAAujB,sBAAAN,EAAA3T,QAAAtP,KAAA8iB,WAAAxF,MAAAhO,OACA,OAAW4O,MAAA,GAIX,MAAAxZ,EAAAue,EAAAtM,SAAAsM,EAAAtM,SAAAsM,EAAA8B,WAEA,GAAArgB,aAAA+zC,GAGA,OAFAx1B,EAAA3T,SAEAtP,KAAAqjB,SAWArjB,KAAAijB,SAAAA,EAEAm2B,GAAA,eAAA10C,EAAAof,EAAAb,EAAA,KAZAA,EAAAjhB,KAAAiC,KAAAS,EAAA0zC,WACAp4C,KAAAijB,SAAAA,EACAjjB,KAAAk5C,eAAAx0C,EAEA1E,KAAAsjB,iBACAtjB,KAAA6jB,YAEAu1B,GAAA,aAAA10C,EAAAof,EAAAb,IAOG,GAAAve,aAAAmzC,GAAA,CACH,IAAA3zB,EAEA,GAAAlkB,KAAAojB,iBACAc,EAAA,MACI,CACJ,IAAA5U,EAAA5K,EAAA6f,YAEAvkB,KAAAujB,sBAAAlO,GAAArV,KAAA8iB,WAAAxF,MAAAhO,OAAAA,IACAA,EAAAtP,KAAA8iB,WAAAxF,MAAAhO,QAGA4U,EAAAjB,EAAA3T,OAAAA,EAGA,MAAA+pC,EAAAp2B,EAAA3T,OAAA5K,EAAA6f,YACAjN,EAAA,IAAAygC,GAAArzC,EAAA20C,EAAAn1B,EAAAA,GAKA,OAHAjB,EAAA3T,QAAA4U,EACAlkB,KAAAijB,SAAAA,EAEAm2B,GAAA,OAAA9hC,EAAAwM,EAAAb,EAAAiB,GAOA,OAJAjB,EAAAjhB,KAAAvB,MACAT,KAAAijB,SAAAA,EACAjjB,KAAAk5C,eAAA7jC,EAAAA,OAEA+jC,GAAA,eAAA/jC,EAAAyO,EAAAb,EAAA,IAKA,SAAAm2B,GAAAtwC,EAAAwO,EAAAwM,EAAAU,EAAAvf,GACA,OACAiZ,MAAA,EACAxhB,OACAoM,KAAAA,EACAwO,KAAAA,EACAwM,iBAAAA,EACAU,aAAAA,EACAvf,OAAAA,ICjVA,IAAAq0C,GALA,SAAAzxC,GACA,IAAA5C,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,EAAA4C,EAAA5C,EAAA,QAAA1H;;;;SCqBA07C,GAOAp5C,YAAA7E,EAAAgH,GACA,IAAAhH,EAAA6gB,GAAA,aAAA7gB,EAAA6gB,GAAA,oBAQA,MAAA,IAAA5a,EAAA,uDAGA,KAAAe,aAAA0D,QAAA,IAAA1D,EAAAiD,OAOA,MAAA,IAAAhE,EAAA,yFAAsHe,KAAAA,IAItHA,EAAAhH,EAAAg9C,UAAApxC,OAAA5E,GACAhH,EAAAA,EAAAA,KASAgF,KAAAhF,KAAAA,EAgCAgF,KAAAgC,KAAAA,EASAsN,aACA,OAAAgqC,GAAAt5C,KAAAgC,MAMAsN,WAAAiqC,GACAv5C,KAAAgC,KAAAhC,KAAAgC,KAAAiD,OAAA,GAAAs0C,EAeAlkC,aACA,IAAAA,EAAArV,KAAAhF,KAEA,IAAA,IAAAU,EAAA,EAAkBA,EAAAsE,KAAAgC,KAAAiD,OAAA,EAA0BvJ,IAC5C2Z,EAAAA,EAAAI,SAAAJ,EAAAsjC,cAAA34C,KAAAgC,KAAAtG,KAGA,OAAA2Z,EAWArN,YACA,OAAAhI,KAAAqV,OAAAsjC,cAAA34C,KAAAsP,QAUAqH,eACA,MAAAjS,EAAA1E,KAAAqV,OAAAI,SAAAzV,KAAAgI,OAEA,OAAAtD,aAAAmzC,IAAAnzC,EAAA6f,YAAAvkB,KAAAsP,OAAA5K,EAAA,KASAogB,gBACA,OAAA,OAAA9kB,KAAA2W,SAAA3W,KAAAqV,OAAAI,SAAAzV,KAAAgI,OAAA,KASA+c,iBACA,OAAA,OAAA/kB,KAAA2W,SAAA3W,KAAAqV,OAAAI,SAAAzV,KAAAgI,MAAA,GAAA,KASAqc,gBACA,OAAA,IAAArkB,KAAAsP,OASAyU,cACA,OAAA/jB,KAAAsP,QAAAtP,KAAAqV,OAAA+iC,UASAv4C,YAAAwlB,GACA,GAAArlB,KAAAhF,MAAAqqB,EAAArqB,KACA,MAAA,YAGA,MAAA8D,EAAA4lB,GAAA1kB,KAAAgC,KAAAqjB,EAAArjB,MAEA,OAAAlD,GACA,IAAA,OACA,MAAA,OAEA,IAAA,SACA,MAAA,SAEA,IAAA,YACA,MAAA,QAEA,QACA,OAAAkB,KAAAgC,KAAAlD,GAAAumB,EAAArjB,KAAAlD,GACA,SAEA,SA0BAe,wBAAA6jB,EAAArgB,MACAA,EAAA0f,cAAA/iB,KAEA,MAAAolB,EAAA,IAAA4zB,GAAA31C,GAGA,OAFA+hB,EAAA1B,KAAAA,GAEA0B,EAAAnC,SAWApjB,gBACA,OAAAG,KAAAgC,KAAA2C,MAAA,GAAA,GAQA9E,eACA,OAAAG,KAAAqV,OAAAwG,GAAA,qBACA7b,KAAAqV,QAEArV,KAAAqV,OAAAW,cAAqCJ,aAAA,IAWrC/V,cAAAojB,GACA,GAAAjjB,KAAAhF,MAAAioB,EAAAjoB,KACA,SAIA,MAAA2+B,EAAAjV,GAAA1kB,KAAAgC,KAAAihB,EAAAjhB,MAEAw3C,EAAA,iBAAA7f,EAAAt3B,KAAAwiB,IAAA7kB,KAAAgC,KAAAiD,OAAAge,EAAAjhB,KAAAiD,QAAA00B,EAEA,OAAA35B,KAAAgC,KAAA2C,MAAA,EAAA60C,GAUA35C,kBAAAojB,GACA,MAAAlN,EAAA/V,KAAAgW,eACAC,EAAAgN,EAAAjN,eAEA,IAAAta,EAAA,EAEA,KAAAqa,EAAAra,IAAAua,EAAAva,IAAAqa,EAAAra,IACAA,IAGA,OAAA,IAAAA,EAAA,KAAAqa,EAAAra,EAAA,GAUAmE,aAAAqlB,GACA,MAAAC,EAAA8zB,GAAA91B,mBAAAnjB,MAEAsP,EAAA6V,EAAA7V,OAAA4V,EAGA,OAFAC,EAAA7V,OAAAA,EAAA,EAAA,EAAAA,EAEA6V,EAWAtlB,QAAAwlB,GACA,MAAA,SAAArlB,KAAAslB,YAAAD,GAkCAxlB,SAAAwlB,GACA,MAAA,UAAArlB,KAAAslB,YAAAD,GASAxlB,QAAAwlB,GACA,MAAA,QAAArlB,KAAAslB,YAAAD,GAaAxlB,WAAAwlB,GACA,IAAAoZ,EAAA,KACAqT,EAAA,KAGA,OAFA9xC,KAAAslB,YAAAD,IAGA,IAAA,OACA,OAAA,EAEA,IAAA,SACAoZ,EAAAwa,GAAA91B,mBAAAnjB,MACA8xC,EAAAmH,GAAA91B,mBAAAkC,GACA,MAEA,IAAA,QACAoZ,EAAAwa,GAAA91B,mBAAAkC,GACAysB,EAAAmH,GAAA91B,mBAAAnjB,MACA,MAEA,QACA,OAAA,EAIA,IAAAy5C,EAAAhb,EAAAppB,OAEA,KAAAopB,EAAAz8B,KAAAiD,OAAA6sC,EAAA9vC,KAAAiD,QAAA,CACA,GAAAw5B,EAAAha,QAAAqtB,GACA,OAAA,EAGA,GAAArT,EAAAz8B,KAAAiD,OAAA6sC,EAAA9vC,KAAAiD,OAAA,CACA,GAAAw5B,EAAAnvB,SAAAmqC,EAAArB,UACA,OAAA,EAGA3Z,EAAAz8B,KAAAy8B,EAAAz8B,KAAA2C,MAAA,GAAA,GACA80C,EAAAA,EAAApkC,OACAopB,EAAAnvB,aACI,CACJ,GAAA,IAAAwiC,EAAAxiC,OACA,OAAA,EAGAwiC,EAAA9vC,KAAA8vC,EAAA9vC,KAAA2C,MAAA,GAAA,KAcA9E,0BAAA65C,EAAA7+B,GACA,MAAA8+B,EAAAV,GAAA91B,mBAAAnjB,MAGA,GAAAA,KAAAhF,MAAA0+C,EAAA1+C,KACA,OAAA2+C,EAGA,GAAA,QAAAj1B,GAAAg1B,EAAAE,gBAAA55C,KAAA45C,kBAEA,GAAAF,EAAApqC,OAAAtP,KAAAsP,OAAA,CAEA,GAAAoqC,EAAApqC,OAAAuL,EAAA7a,KAAAsP,OAEA,OAAA,KAGAqqC,EAAArqC,QAAAuL,QAGG,GAAA,UAAA6J,GAAAg1B,EAAAE,gBAAA55C,KAAA45C,iBAAA,CAEH,MAAAl+C,EAAAg+C,EAAA13C,KAAAiD,OAAA,EAEA,GAAAy0C,EAAApqC,QAAAtP,KAAAgC,KAAAtG,GAAA,CAEA,GAAAg+C,EAAApqC,OAAAuL,EAAA7a,KAAAgC,KAAAtG,GAGA,OAAA,KAGAi+C,EAAA33C,KAAAtG,IAAAmf,GAKA,OAAA8+B,EAcA95C,2BAAAg6C,EAAAh/B,EAAA8f,GACA,MAAAgf,EAAAV,GAAA91B,mBAAAnjB,MAGA,GAAAA,KAAAhF,MAAA6+C,EAAA7+C,KACA,OAAA2+C,EAGA,GAAA,QAAAj1B,GAAAm1B,EAAAD,gBAAA55C,KAAA45C,kBAEAC,EAAAvqC,OAAAtP,KAAAsP,QAAAuqC,EAAAvqC,QAAAtP,KAAAsP,QAAAqrB,KAGAgf,EAAArqC,QAAAuL,QAEG,GAAA,UAAA6J,GAAAm1B,EAAAD,gBAAA55C,KAAA45C,iBAAA,CAEH,MAAAl+C,EAAAm+C,EAAA73C,KAAAiD,OAAA,EAEA40C,EAAAvqC,QAAAtP,KAAAgC,KAAAtG,KAGAi+C,EAAA33C,KAAAtG,IAAAmf,GAIA,OAAA8+B,EAiBA95C,sBAAAi6C,EAAA9mB,EAAAnY,EAAA8f,EAAAof,GAEA,IAAAJ,EAAA35C,KAAAg6C,0BAAAF,EAAAj/B,GAeA,OAZAmY,EAAAA,EAAAgnB,0BAAAF,EAAAj/B,GAKA8+B,EAHA,OAAAA,GAAAI,GAAAJ,EAAAl1B,QAAAq1B,GAGA95C,KAAAi6C,aAAAH,EAAA9mB,GAIA2mB,EAAAO,2BAAAlnB,EAAAnY,EAAA8f,GAiCA96B,aAAAc,EAAAN,GACA,MAAA3E,EAAAiF,EAAAqB,KAAAiD,OAAA,EAGAk1C,EAAAlB,GAAA91B,mBAAA9iB,GAWA,OANA85C,EAAA7qC,OAAA6qC,EAAA7qC,OAAAtP,KAAAgC,KAAAtG,GAAAiF,EAAA2O,OAIA6qC,EAAAn4C,KAAAm4C,EAAAn4C,KAAA4E,OAAA5G,KAAAgC,KAAA2C,MAAAjJ,EAAA,IAEAy+C,EAsBAt6C,gBAAA+lB,EAAAtW,GACA,GAAAsW,aAAAqzB,GACA,OAAAj5C,KAAAmjB,mBAAAyC,GACG,CACH,MAAAlhB,EAAAkhB,EAEA,GAAA,OAAAtW,EACAA,EAAA5K,EAAA0zC,cACI,CAAA,GAAA,UAAA9oC,EACJ,OAAAtP,KAAAskB,aAAA5f,GACI,GAAA,SAAA4K,EACJ,OAAAtP,KAAAgkB,YAAAtf,GACI4K,IACJA,EAAA,GAGA,OAAAtP,KAAAo6C,0BAAA11C,EAAA4K,IAUAzP,mBAAAyX,GACA,IAAAA,EAAAjC,OAOA,MAAA,IAAApU,EAAA,qEAAkGjG,KAAAsc,IAGlG,OAAAtX,KAAAo6C,0BAAA9iC,EAAAjC,OAAAiC,EAAA0N,WASAnlB,oBAAAyX,GACA,IAAAA,EAAAjC,OAOA,MAAA,IAAApU,EAAA,uEAAoGjG,KAAAsc,IAGpG,OAAAtX,KAAAo6C,0BAAA9iC,EAAAjC,OAAAiC,EAAAiN,aAUA1kB,iCAAAwV,EAAA/F,GACA,IAAA+F,EAAAwG,GAAA,aAAAxG,EAAAwG,GAAA,oBAMA,MAAA,IAAA5a,EAAA,+FAGA,MAAAe,EAAAqT,EAAA2iC,UAIA,OAFAh2C,EAAAiC,KAAAqL,GAEA,IAAAtP,KAAAqV,EAAAra,KAAAgH,GASAnC,0BAAAojB,GACA,OAAA,IAAAjjB,KAAAijB,EAAAjoB,KAAAioB,EAAAjhB,KAAA2C,SASA9E,gBAAAuW,EAAAmpB,GACA,GAAA,eAAAnpB,EAAApb,KACA,OAAA,IAAAi+C,GAAA1Z,EAAA8a,UAAAjkC,EAAApU,MAGA,IAAAu9B,EAAA2X,QAAA9gC,EAAApb,MAOA,MAAA,IAAAiG,EACA,kHACK0hB,SAAAvM,EAAApb,OAIL,OAAA,IAAAi+C,GAAA1Z,EAAA2X,QAAA9gC,EAAApb,MAAAob,EAAApU;;;;SC5vBAs4C,GASAz6C,YAAAyd,EAAAmG,EAAA,MAOAzjB,KAAAsd,MAAA27B,GAAA91B,mBAAA7F,GAQAtd,KAAAyjB,IAAAA,EAAAw1B,GAAA91B,mBAAAM,GAAAw1B,GAAA91B,mBAAA7F,GAiBAzd,EAAAoD,OAAAiU,kBACA,IAAA8hC,IAA0Bl2B,WAAA9iB,KAAAsjB,kBAAA,IAS1BwC,kBACA,OAAA9lB,KAAAsd,MAAAmH,QAAAzkB,KAAAyjB,KASAsC,aACA,OAAA/lB,KAAAsd,MAAAjI,SAAArV,KAAAyjB,IAAApO,OAQAra,WACA,OAAAgF,KAAAsd,MAAAtiB,KAUA6E,iBAAAojB,GACA,OAAAA,EAAAiD,QAAAlmB,KAAAsd,QAAA2F,EAAAqD,SAAAtmB,KAAAyjB,KAYA5jB,cAAAwmB,EAAAE,GAAA,GACAF,EAAAP,cACAS,GAAA,GAGA,MAAAC,EAAAxmB,KAAAymB,iBAAAJ,EAAA/I,QAAAiJ,GAAAvmB,KAAAsd,MAAAmH,QAAA4B,EAAA/I,OACAoJ,EAAA1mB,KAAAymB,iBAAAJ,EAAA5C,MAAA8C,GAAAvmB,KAAAyjB,IAAAgB,QAAA4B,EAAA5C,KAEA,OAAA+C,GAAAE,EAQA7mB,aAAAyX,GACA,MAAAhC,EAAA2jC,GAAA30B,aAAAhN,GAEA,OAAAtX,KAAAymB,iBAAAnR,IAAAtV,KAAAsd,MAAAmH,QAAAnP,GASAzV,QAAAwmB,GACA,OAAArmB,KAAAsd,MAAAmH,QAAA4B,EAAA/I,QAAAtd,KAAAyjB,IAAAgB,QAAA4B,EAAA5C,KASA5jB,eAAAwmB,GACA,OAAArmB,KAAAsd,MAAAgJ,SAAAD,EAAA5C,MAAAzjB,KAAAyjB,IAAAyC,QAAAG,EAAA/I,OAyBAzd,cAAAwmB,GACA,MAAAM,KAqBA,OAnBA3mB,KAAA4mB,eAAAP,IAGArmB,KAAAymB,iBAAAJ,EAAA/I,QAGAqJ,EAAA1iB,KAAA,IAAAq2C,GAAAt6C,KAAAsd,MAAA+I,EAAA/I,QAGAtd,KAAAymB,iBAAAJ,EAAA5C,MAGAkD,EAAA1iB,KAAA,IAAAq2C,GAAAj0B,EAAA5C,IAAAzjB,KAAAyjB,OAIAkD,EAAA1iB,KAAAq2C,GAAAzzB,gBAAA7mB,OAGA2mB,EAmBA9mB,gBAAAwmB,GACA,GAAArmB,KAAA4mB,eAAAP,GAAA,CAGA,IAAAS,EAAA9mB,KAAAsd,MACAyJ,EAAA/mB,KAAAyjB,IAcA,OAZAzjB,KAAAymB,iBAAAJ,EAAA/I,SAGAwJ,EAAAT,EAAA/I,OAGAtd,KAAAymB,iBAAAJ,EAAA5C,OAGAsD,EAAAV,EAAA5C,KAGA,IAAA62B,GAAAxzB,EAAAC,GAIA,OAAA,KA0CAlnB,uBACA,MAAA8mB,KACA6yB,EAAAx5C,KAAAsd,MAAAi9B,cAAAv6C,KAAAyjB,KAAAxe,OAEAqQ,EAAA2jC,GAAA91B,mBAAAnjB,KAAAsd,OACA,IAAAk9B,EAAAllC,EAAAD,OAGA,KAAAC,EAAAtT,KAAAiD,OAAAu0C,EAAA,GAAA,CACA,MAAA3+B,EAAA2/B,EAAApC,UAAA9iC,EAAAhG,OAEA,IAAAuL,GACA8L,EAAA1iB,KAAA,IAAAq2C,GAAAhlC,EAAAA,EAAA8R,aAAAvM,KAGAvF,EAAAtT,KAAAsT,EAAAtT,KAAA2C,MAAA,GAAA,GACA2Q,EAAAhG,SACAkrC,EAAAA,EAAAnlC,OAIA,KAAAC,EAAAtT,KAAAiD,QAAAjF,KAAAyjB,IAAAzhB,KAAAiD,QAAA,CACA,MAAAqK,EAAAtP,KAAAyjB,IAAAzhB,KAAAsT,EAAAtT,KAAAiD,OAAA,GACA4V,EAAAvL,EAAAgG,EAAAhG,OAEA,IAAAuL,GACA8L,EAAA1iB,KAAA,IAAAq2C,GAAAhlC,EAAAA,EAAA8R,aAAAvM,KAGAvF,EAAAhG,OAAAA,EACAgG,EAAAtT,KAAAiC,KAAA,GAGA,OAAA0iB,EAYA9mB,UAAAwD,MAGA,OAFAA,EAAAyf,WAAA9iB,KAEA,IAAAg5C,GAAA31C,GAkBAxD,UAAAwD,MACAA,EAAAyf,WAAA9iB,KACAqD,EAAAigB,kBAAA,EAEA,MAAA8B,EAAA,IAAA4zB,GAAA31C,GAEA,IAAA,MAAA3G,KAAA0oB,QACA1oB,EAAA4a,KAiBAzX,cAAAwD,MACAA,EAAAyf,WAAA9iB,KAEA,MAAAolB,EAAA,IAAA4zB,GAAA31C,SAEA+hB,EAAAnC,SAEA,IAAA,MAAAvmB,KAAA0oB,QACA1oB,EAAA8nB,aAcA3kB,sBAAAk6B,GACA,MAAApT,GAAA2zB,GAAAzzB,gBAAA7mB,OAGAy6C,EAAA,IAAAxhC,KAAA,SAAA,OAAA,SAAA,aAEA,IAAA,MAAAyhC,KAAA3gB,EAAA4gB,WACA,GAAAF,EAAAlyC,IAAAmyC,EAAA5xC,MACA,IAAA,IAAApN,EAAA,EAAoBA,EAAAirB,EAAA1hB,OAAmBvJ,IAAA,CACvC,MAAAoD,EAAA6nB,EAAAjrB,GAAAk/C,gCACAF,EAAA5xC,KACAixB,EAAAjxB,KACA4xC,EAAA1nB,gBAAA0nB,EAAAz3B,SACAy3B,EAAA7/B,SAAA6/B,EAAAhgC,MAAA09B,UACAsC,EAAAZ,gBAGAnzB,EAAAzhB,OAAAxJ,EAAA,KAAAoD,GAEApD,GAAAoD,EAAAmG,OAAA,EAKA,OAAA0hB,EAaA9mB,uBAAAg7C,GACA,MAAAl0B,GAAA2zB,GAAAzzB,gBAAA7mB,OAEA,IAAA,MAAA+5B,KAAA8gB,EACA,IAAA,IAAAn/C,EAAA,EAAmBA,EAAAirB,EAAA1hB,OAAmBvJ,IAAA,CACtC,MAAAoD,EAAA6nB,EAAAjrB,GAAAo/C,sBAAA/gB,GAEApT,EAAAzhB,OAAAxJ,EAAA,KAAAoD,GACApD,GAAAoD,EAAAmG,OAAA,EAQA,IAAA,IAAAvJ,EAAA,EAAkBA,EAAAirB,EAAA1hB,OAAmBvJ,IAAA,CACrC,MAAAyrB,EAAAR,EAAAjrB,GAEA,IAAA,IAAAq/C,EAAAr/C,EAAA,EAAuBq/C,EAAAp0B,EAAA1hB,OAAmB81C,IAAA,CAC1C,MAAA98B,EAAA0I,EAAAo0B,IAEA5zB,EAAA6zB,cAAA/8B,IAAAA,EAAA+8B,cAAA7zB,IAAAA,EAAA1C,QAAAxG,KACA0I,EAAAzhB,OAAA61C,EAAA,IAKA,OAAAp0B,EASA9mB,oBACA,OAAAG,KAAAsd,MAAA0J,kBAAAhnB,KAAAyjB,KAcA5jB,gCAAAiJ,EAAAmyC,EAAAjoB,EAAAnY,EAAAi/B,GACA,GAAA,UAAAhxC,EACA,OAAA9I,KAAAk6C,2BAAAlnB,EAAAnY,GAAA,GAAA,GACG,CACH,MAAAkY,EAAAunB,GAAAhzB,2BAAAwyB,EAAAj/B,GAGA,GACA,SAAAogC,GACAj7C,KAAA8lB,cACA9lB,KAAAsd,MAAAmH,QAAAsO,EAAAzV,QAAAtd,KAAAsd,MAAAmH,QAAAsO,EAAAtP,MACA,CAWA,MAAAnU,EAAAtP,KAAAsd,MAAAhO,OAAAyjB,EAAAzV,MAAAhO,OAEA,OAAA,IAAAgrC,GAAAtnB,EAAA5L,aAAA9X,KAKA,GAAA,SAAA2rC,GAAAj7C,KAAA8lB,aAAA9lB,KAAAyjB,IAAAgB,QAAAsO,EAAAtP,KAKA,OAAA,IAAA62B,GAAAtnB,EAAA5L,aAAAvM,KAWA,IACAkY,EAAAtM,iBAAAzmB,KAAAsd,QAAAyV,EAAAzV,MAAAmH,QAAAzkB,KAAAsd,SACAtd,KAAAymB,iBAAAsM,EAAAtP,MACAzjB,KAAAyjB,IAAAyC,QAAA8M,GACA,CACA,MAAA1V,EAAAtd,KAAAsd,MAAA28B,aACAH,EACA9mB,EAAAgnB,0BAAAF,EAAAj/B,IAEA4I,EAAAzjB,KAAAyjB,IAAAy3B,sBAAApB,EAAA9mB,EAAAnY,GAAA,GAAA,GAEA,OAAA,IAAAy/B,GAAAh9B,EAAAmG,IAOA,IACAsP,EAAAtM,iBAAAzmB,KAAAyjB,MAAAsP,EAAAtP,IAAAgB,QAAAzkB,KAAAyjB,OACAzjB,KAAAymB,iBAAAsM,EAAAzV,QACAtd,KAAAsd,MAAAgJ,SAAA0M,GACA,CACA,MAAA1V,EAAAtd,KAAAsd,MAAA49B,sBACApB,EACA9mB,EACAnY,GACA,GACA,GAEA4I,EAAAzjB,KAAAyjB,IAAAw2B,aACAH,EACA9mB,EAAAgnB,0BAAAF,EAAAj/B,IAGA,OAAA,IAAAy/B,GAAAh9B,EAAAmG,IAGA,OAAAzjB,KAAAk7C,sBAAApB,EAAA9mB,EAAAnY,IAuCAhb,2BAAAg6C,EAAAh/B,EAAAsgC,GAAA,EAAAC,GAAA,GACA,GAAAD,GAAAn7C,KAAAymB,iBAAAozB,GAKA,OACA,IAAAS,GAAAt6C,KAAAsd,MAAAu8B,GACA,IAAAS,GACAT,EAAAK,2BAAAL,EAAAh/B,GAAA,GACA7a,KAAAyjB,IAAAy2B,2BAAAL,EAAAh/B,EAAA7a,KAAA8lB,eAGG,CACH,MAAAqB,EAAAmzB,GAAAzzB,gBAAA7mB,MAEAq7C,GAAAD,EACAE,IAAAn0B,EAAArB,aAAAs1B,EAKA,OAHAj0B,EAAA7J,MAAA6J,EAAA7J,MAAA48B,2BAAAL,EAAAh/B,EAAAwgC,GACAl0B,EAAA1D,IAAA0D,EAAA1D,IAAAy2B,2BAAAL,EAAAh/B,EAAAygC,IAEAn0B,IAcAtnB,sBAAAi6C,EAAA9mB,EAAAnY,GACA,GAAA7a,KAAA8lB,YAAA,CACA,MAAAy1B,EAAAv7C,KAAAsd,MAAA49B,sBAAApB,EAAA9mB,EAAAnY,GAAA,GAAA,GAEA,OAAA,IAAAy/B,GAAAiB,IAGA,IAAAz8C,EAEA,MAAA08C,EAAA,IAAAlB,GAAAR,EAAAA,EAAA1yB,aAAAvM,IAEA4gC,EAAAz7C,KAAA07C,cAAAF,GACA,IAAAG,EAAA,KAEA,MAAAC,EAAA57C,KAAAkzC,gBAAAsI,GAEA,GAAAC,EAAAx2C,OAEA02C,EAAA,IAAArB,GACAmB,EAAA,GAAAn+B,MAAA08B,0BAAAF,EAAAj/B,GACA4gC,EAAA,GAAAh4B,IAAAu2B,0BAAAF,EAAAj/B,IAEG,GAAA4gC,EAAAx2C,SAEH02C,EAAA,IAAArB,GACAt6C,KAAAsd,MACAtd,KAAAyjB,IAAAu2B,0BAAAF,EAAAj/B,KAIA,MAAAg/B,EAAA7mB,EAAAgnB,0BAAAF,EAAAj/B,GAeA,OAZA/b,EADA68C,EACAA,EAAAzB,2BAAAL,EAAAh/B,EAAA,OAAA+gC,MAKAA,GACA98C,EAAAmF,KAAA,IAAAq2C,GACAsB,EAAAt+B,MAAA28B,aAAAuB,EAAAl+B,MAAAu8B,GACA+B,EAAAn4B,IAAAw2B,aAAAuB,EAAAl+B,MAAAu8B,KAIA/6C,EAWAe,kCAAAojB,EAAAiC,GACA,MAAA5H,EAAA2F,EACAQ,EAAAR,EAAAmE,aAAAlC,GAEA,OAAAA,EAAA,EAAA,IAAAllB,KAAAsd,EAAAmG,GAAA,IAAAzjB,KAAAyjB,EAAAnG,GAYAzd,mCAAAonB,EAAA1C,EAAA2C,EAAAlC,GACA,OAAA,IAAAhlB,KACAi5C,GAAAmB,0BAAAnzB,EAAA1C,GACA00B,GAAAmB,0BAAAlzB,EAAAlC,IAUAnlB,uBAAAsnB,GACA,OAAA,IAAAnnB,KAAAmnB,EAAA7J,MAAA6J,EAAA1D,KAUA5jB,gBAAA2X,GACA,OAAAxX,KAAAqnB,4BAAA7P,EAAA,EAAAA,EAAAA,EAAA4gC,WASAv4C,gBAAAyX,GACA,OAAAtX,KAAAsnB,2BAAA2xB,GAAA30B,aAAAhN,GAAAA,EAAAT,YAWAhX,yBAAA+lB,EAAAtW,GACA,MAAAgO,EAAA27B,GAAA1xB,SAAA3B,EAAAtW,GACAmU,EAAAw1B,GAAA91B,mBAAA7F,GAEA,OAAA,IAAAg9B,GAAAh9B,EAAAmG,GAkBA5jB,wBAAA8mB,GACA,GAAA,IAAAA,EAAA1hB,OAOA,MAAA,IAAAhE,EAAA,8EACG,GAAA,GAAA0lB,EAAA1hB,OACH,OAAAjF,KAAA6mB,gBAAAF,EAAA,IAMA,MAAAk1B,EAAAl1B,EAAA,GAGAA,EAAA7M,KAAA,CAAA2F,EAAAkF,IACAlF,EAAAnC,MAAA4I,QAAAvB,EAAArH,OAAA,GAAA,GAIA,MAAAw+B,EAAAn1B,EAAAnhB,QAAAq2C,GAKA/8C,EAAA,IAAAkB,KAAA67C,EAAAv+B,MAAAu+B,EAAAp4B,KAIA,IAAA,IAAA/nB,EAAAogD,EAAA,EAA6BpgD,GAAA,GAC7BirB,EAAAjrB,GAAA+nB,IAAAgB,QAAA3lB,EAAAwe,OADqC5hB,IAErCoD,EAAAwe,MAAA27B,GAAA91B,mBAAAwD,EAAAjrB,GAAA4hB,OASA,IAAA,IAAA5hB,EAAAogD,EAAA,EAA6BpgD,EAAAirB,EAAA1hB,QAC7B0hB,EAAAjrB,GAAA4hB,MAAAmH,QAAA3lB,EAAA2kB,KADgD/nB,IAEhDoD,EAAA2kB,IAAAw1B,GAAA91B,mBAAAwD,EAAAjrB,GAAA+nB,KAOA,OAAA3kB,EAUAe,gBAAAuW,EAAAmpB,GACA,OAAA,IAAAv/B,KAAAi5C,GAAAF,SAAA3iC,EAAAkH,MAAAiiB,GAAA0Z,GAAAF,SAAA3iC,EAAAqN,IAAA8b;;;;SCzyBAwc,GAIAl8C,cAOAG,KAAAg8C,oBAAA,IAAApxB,QAQA5qB,KAAAi8C,oBAAA,IAAArxB,QASA5qB,KAAAk8C,4BAAA,IAAA91C,IAGApG,KAAA2gB,GAAA,sBAAA,CAAAC,EAAAxf,KACA,GAAAA,EAAA8vB,aACA,OAGA,MAAAirB,EAAAn8C,KAAAg8C,oBAAAx/C,IAAA4E,EAAAg7C,cAAA/mC,QAEAjU,EAAA8vB,aAAAlxB,KAAAq8C,gBAAAF,EAAA/6C,EAAAg7C,cAAA9sC,UACM5M,SAAA,QAGN1C,KAAA2gB,GAAA,sBAAA,CAAAC,EAAAxf,KACA,GAAAA,EAAAg7C,cACA,OAGA,IAAAE,EAAAl7C,EAAA8vB,aAAA7b,OACAknC,EAAAv8C,KAAAi8C,oBAAAz/C,IAAA8/C,GAEA,MAAAC,GACAD,EAAAA,EAAAjnC,OACAknC,EAAAv8C,KAAAi8C,oBAAAz/C,IAAA8/C,GAGA,MAAAE,EAAAx8C,KAAAy8C,eAAAr7C,EAAA8vB,aAAA7b,OAAAjU,EAAA8vB,aAAA5hB,OAAAgtC,GAEAl7C,EAAAg7C,cAAAnD,GAAAmB,0BAAAmC,EAAAC,KACM95C,SAAA,QAYN7C,aAAA68C,EAAAnnB,GACAv1B,KAAAg8C,oBAAA31C,IAAAq2C,EAAAnnB,GACAv1B,KAAAi8C,oBAAA51C,IAAAkvB,EAAAmnB,GAcA78C,kBAAA01B,GACA,MAAAmnB,EAAA18C,KAAA28C,eAAApnB,GAEAv1B,KAAAi8C,oBAAA31C,OAAAivB,GAEAv1B,KAAAg8C,oBAAAx/C,IAAAkgD,IAAAnnB,GACAv1B,KAAAg8C,oBAAA11C,OAAAo2C,GAeA78C,mBAAA68C,GACA,MAAAnnB,EAAAv1B,KAAA48C,cAAAF,GAEA18C,KAAAg8C,oBAAA11C,OAAAo2C,GAEA18C,KAAAi8C,oBAAAz/C,IAAA+4B,IAAAmnB,GACA18C,KAAAi8C,oBAAA31C,OAAAivB,GAOA11B,gBACAG,KAAAg8C,oBAAA,IAAApxB,QACA5qB,KAAAi8C,oBAAA,IAAArxB,QAWA/qB,eAAA01B,GACA,OAAAv1B,KAAAi8C,oBAAAz/C,IAAA+4B,GASA11B,cAAA68C,GACA,OAAA18C,KAAAg8C,oBAAAx/C,IAAAkgD,GASA78C,aAAAmhC,GACA,OAAA,IAAAsZ,GAAAt6C,KAAA68C,gBAAA7b,EAAA1jB,OAAAtd,KAAA68C,gBAAA7b,EAAAvd,MASA5jB,YAAAi9C,GACA,OAAA,IAAAj3B,GAAA7lB,KAAA+8C,eAAAD,EAAAx/B,OAAAtd,KAAA+8C,eAAAD,EAAAr5B,MAUA5jB,gBAAAqxB,GACA,MAAA9vB,GACA8vB,aAAAA,EACA8rB,OAAAh9C,MAKA,OAFAA,KAAA+G,KAAA,sBAAA3F,GAEAA,EAAAg7C,cAaAv8C,eAAAu8C,EAAA/4C,GAA2C45C,WAAA,IAC3C,MAAA77C,GACAg7C,cAAAA,EACAY,OAAAh9C,KACAi9C,UAAA55C,EAAA45C,WAKA,OAFAj9C,KAAA+G,KAAA,sBAAA3F,GAEAA,EAAA8vB,aAgCArxB,0BAAAq9C,EAAAC,GACAn9C,KAAAk8C,4BAAA71C,IAAA62C,EAAAC,GAqBAt9C,eAAAwhC,EAAA+b,EAAAd,GACA,GAAAA,GAAAjb,EAAA,CAKA,OAHArhC,KAAAy8C,eAAApb,EAAAhsB,OAAAgsB,EAAAr5B,MAAAs0C,GACAt8C,KAAAy8C,eAAApb,EAAA+b,EAAA/b,GAQA,GAAAA,EAAAxlB,GAAA,QACA,OAAAuhC,EAIA,IAAAZ,EAAA,EAEA,IAAA,IAAA9gD,EAAA,EAAkBA,EAAA0hD,EAAgB1hD,IAClC8gD,GAAAx8C,KAAAq9C,eAAAhc,EAAA5rB,SAAA/Z,IAGA,OAAA8gD,EAyBA38C,eAAA0gC,GACA,GAAAvgC,KAAAk8C,4BAAA1/C,IAAA+jC,EAAAtkC,MAAA,CAGA,OAFA+D,KAAAk8C,4BAAA1/C,IAAA+jC,EAAAtkC,KAEAmH,CAAAm9B,GACG,GAAAvgC,KAAAi8C,oBAAA1zC,IAAAg4B,GACH,OAAA,EACG,GAAAA,EAAA1kB,GAAA,QACH,OAAA0kB,EAAAn/B,KAAA6D,OACG,GAAAs7B,EAAA1kB,GAAA,aACH,OAAA,EACG,CACH,IAAAyhC,EAAA,EAEA,IAAA,MAAAnjC,KAAAomB,EAAAnmB,cACAkjC,GAAAt9C,KAAAq9C,eAAAljC,GAGA,OAAAmjC,GA6BAz9C,gBAAAwhC,EAAAkc,GAEA,IAAAhd,EAEAid,EAAA,EAEAhB,EAAA,EACAY,EAAA,EAGA,GAAA/b,EAAAxlB,GAAA,QACA,OAAA,IAAAqH,GAAAme,EAAAkc,GAMA,KAAAf,EAAAe,GACAhd,EAAAc,EAAA5rB,SAAA2nC,GAEAZ,GADAgB,EAAAx9C,KAAAq9C,eAAA9c,GAEA6c,IAIA,OAAAZ,GAAAe,EACAv9C,KAAAy9C,4BAAA,IAAAv6B,GAAAme,EAAA+b,IAMAp9C,KAAAq8C,gBAAA9b,EAAAgd,GAAAf,EAAAgB,IAgBA39C,4BAAAqxB,GAGA,MAAAnM,EAAAmM,EAAAnM,WACAD,EAAAoM,EAAApM,UAEA,OAAAC,aAAAzO,GACA,IAAA4M,GAAA6B,EAAAA,EAAA3jB,KAAA6D,QACG6f,aAAAxO,GACH,IAAA4M,GAAA4B,EAAA,GAIAoM,GAwGAlqB,EAAA+0C,GAAA1lC;;;;;MChdAqnC,GAIA79C,cAOAG,KAAA29C,YAAA,IAAAv3C,IAaApG,KAAA49C,mBAAA,IAAAx3C,IAiBAvG,IAAAyX,EAAAxO,GACAA,EAAA+0C,GAAA/0C,GAEAwO,aAAAygC,KACAzgC,EAAAtX,KAAA89C,uBAAAxmC,IAGAtX,KAAA29C,YAAAp1C,IAAA+O,IACAtX,KAAA29C,YAAAt3C,IAAAiR,EAAA,IAAAlR,KAGApG,KAAA29C,YAAAnhD,IAAA8a,GAAAjR,IAAAyC,GAAA,GAkBAjJ,QAAAyX,EAAAxO,GAOA,OANAA,EAAA+0C,GAAA/0C,GAEAwO,aAAAygC,KACAzgC,EAAAtX,KAAA89C,uBAAAxmC,MAGAtX,KAAA+J,KAAAuN,EAAAxO,KACA9I,KAAA29C,YAAAnhD,IAAA8a,GAAAjR,IAAAyC,GAAA,IAEA,GAsBAjJ,KAAAyX,EAAAxO,GACAA,EAAA+0C,GAAA/0C,GAEAwO,aAAAygC,KACAzgC,EAAAtX,KAAA89C,uBAAAxmC,IAGA,MAAAymC,EAAA/9C,KAAA29C,YAAAnhD,IAAA8a,GAEA,QAAA/Z,IAAAwgD,EACA,OAAA,KAGA,MAAArhD,EAAAqhD,EAAAvhD,IAAAsM,GAEA,YAAAvL,IAAAb,EACA,KAGAA,EAkBAmD,OAAAyX,EAAAxO,GACAA,EAAA+0C,GAAA/0C,GAEAwO,aAAAygC,KACAzgC,EAAAtX,KAAA89C,uBAAAxmC,IAGA,MAAAvN,EAAA/J,KAAA+J,KAAAuN,EAAAxO,GAEA,OAAA,IAAAiB,GACA/J,KAAA29C,YAAAnhD,IAAA8a,GAAAjR,IAAAyC,GAAA,IAEA,IACG,IAAAiB,GAIH,KAaAlK,uBAAAukB,GACA,IAAAxR,EAAA,KAEA,MAAAorC,EAAAh+C,KAAA49C,mBAAAphD,IAAA4nB,EAAAG,aAEA,GAAAy5B,EAAA,CACA,MAAAC,EAAAD,EAAAxhD,IAAA4nB,EAAAY,WAEAi5B,IACArrC,EAAAqrC,EAAAzhD,IAAA4nB,EAAA/O,SAQA,OAJAzC,IACAA,EAAA5S,KAAAk+C,uBAAA95B,EAAAG,YAAAH,EAAAY,UAAAZ,EAAA/O,SAGAzC,EAcA/S,uBAAAyd,EAAAmG,EAAApO,GACA,MAAAzC,EAAA3P,OAAA,mBACA,IAAA+6C,EAAAC,EAkBA,OAhBAD,EAAAh+C,KAAA49C,mBAAAphD,IAAA8gB,MAGA0gC,EAAA,IAAA53C,IACApG,KAAA49C,mBAAAv3C,IAAAiX,EAAA0gC,KAGAC,EAAAD,EAAAxhD,IAAAinB,MAGAw6B,EAAA,IAAA73C,IACA43C,EAAA33C,IAAAod,EAAAw6B,IAGAA,EAAA53C,IAAAgP,EAAAzC,GAEAA,GAUA,SAAAirC,GAAA/0C,GACA,MAAAvI,EAAAuI,EAAAtI,MAAA,KAEA,OAAAD,EAAA0E,OAAA,EAAA1E,EAAA,GAAA,IAAAA,EAAA,GAAAA,EAAA;;;;SC1NA49C,GAMAt+C,YAAAu+C,MAMAp+C,KAAAo+C,cAAAv/B,IAAgCw/B,WAAAr+C,MAAmBo+C,GASnDv+C,eAAAy+C,EAAA3xB,GAEA,IAAA,MAAArkB,KAAAg2C,EAAAC,aACA,UAAAj2C,EAAAQ,KACA9I,KAAAw+C,cAAAlE,GAAAhzB,2BAAAhf,EAAA2a,SAAA3a,EAAArD,QAAA0nB,GACI,UAAArkB,EAAAQ,KACJ9I,KAAAy+C,cAAAn2C,EAAA2a,SAAA3a,EAAArD,OAAAqD,EAAArM,KAAA0wB,GAGA3sB,KAAA0+C,iBAAAp2C,EAAA6e,MAAA7e,EAAAq2C,aAAAr2C,EAAAs2C,kBAAAt2C,EAAAu2C,kBAAAlyB,GAKA,IAAA,MAAA4qB,KAAA+G,EAAAQ,kBACA9+C,KAAA++C,iBAAAxH,EAAAt7C,KAAAs7C,EAAApwB,MAAAwF,GAeA9sB,cAAAsnB,EAAAwF,GACA3sB,KAAAo+C,cAAAzxB,OAAAA,EAGA3sB,KAAAo+C,cAAAY,WAAAh/C,KAAAi/C,wBAAA93B,GAGA,IAAA,MAAAzqB,KAAAyqB,EAAA,CACA,MAAA7P,EAAA5a,EAAA4a,KAEAlW,GACAkW,KAAAA,EACA6P,MAHAmzB,GAAAhzB,2BAAA5qB,EAAAonB,iBAAApnB,EAAAuI,SAMAjF,KAAAk/C,aAAA,SAAA99C,GAKA,IAAA,MAAAL,KAAAuW,EAAA2Y,mBACA7uB,EAAAu9C,aAAA59C,EACAK,EAAAw9C,kBAAA,KACAx9C,EAAAy9C,kBAAAvnC,EAAAU,aAAAjX,GAEAf,KAAAk/C,0BAAoCn+C,IAAMK,GAI1CpB,KAAAm/C,sBAWAt/C,cAAAojB,EAAAhe,EAAAhJ,EAAA0wB,GACA3sB,KAAAo+C,cAAAzxB,OAAAA,EAEA3sB,KAAA+G,KAAA,UAAA9K,GAAgCgnB,SAAAA,EAAAhe,OAAAA,GAAmBjF,KAAAo+C,eAEnDp+C,KAAAm/C,sBAeAt/C,iBAAAsnB,EAAApmB,EAAAqe,EAAA5S,EAAAmgB,GACA3sB,KAAAo+C,cAAAzxB,OAAAA,EAGA3sB,KAAAo+C,cAAAY,WAAAh/C,KAAAo/C,0BAAAj4B,eAAsFpmB,KAGtF,IAAA,MAAArE,KAAAyqB,EAAA,CACA,MAEA/lB,GACAkW,KAHA5a,EAAA4a,KAIA6P,MAHAmzB,GAAAhzB,2BAAA5qB,EAAAonB,iBAAApnB,EAAAuI,QAIA05C,aAAA59C,EACA69C,kBAAAx/B,EACAy/B,kBAAAryC,GAGAxM,KAAAk/C,0BAAmCn+C,IAAMK,GAGzCpB,KAAAm/C,sBAeAt/C,iBAAA0iB,EAAA88B,EAAA1yB,GACA,MAAA2yB,EAAA55C,MAAAC,KAAA05C,EAAAE,qBAAAh9B,EAAA0S,qBAOA,GALAj1B,KAAAo+C,cAAAzxB,OAAAA,EACA3sB,KAAAo+C,cAAAY,WAAAh/C,KAAAw/C,2BAAAj9B,EAAA+8B,GAEAt/C,KAAA+G,KAAA,aAA2Bwb,UAAAA,GAAYviB,KAAAo+C,eAEvC77B,EAAAuD,YAAA,CAIA,IAAA,MAAA25B,KAAAH,EAAA,CACA,MAAAI,EAAAD,EAAAE,WAEA,IAAAC,GAAAr9B,EAAA0S,mBAAAwqB,EAAAz/C,KAAAo+C,cAAApB,QACA,SAGA,MAAA57C,GACAkW,KAAAiL,EACAs9B,WAAAJ,EAAAxjD,KACAyjD,YAAAA,GAGA1/C,KAAAo+C,cAAAY,WAAAj1C,KAAAwY,EAAA,aAAAk9B,EAAAxjD,OACA+D,KAAA+G,KAAA,aAAA04C,EAAAxjD,KAAAmF,EAAApB,KAAAo+C,eAIA,IAAA,MAAAr9C,KAAAwhB,EAAA0N,mBAAA,CACA,MAAA7uB,GACAkW,KAAAiL,EACA4E,MAAA5E,EAAAoG,gBACAg2B,aAAA59C,EACA69C,kBAAA,KACAC,kBAAAt8B,EAAAvK,aAAAjX,IAIAf,KAAAo+C,cAAAY,WAAAj1C,KAAAwY,EAAA,aAAAnhB,EAAAu9C,eACA3+C,KAAA+G,KAAA,aAAA3F,EAAAu9C,aAAAv9C,EAAApB,KAAAo+C,eAIAp+C,KAAAm/C,uBAYAt/C,iBAAAggD,EAAAH,EAAA/yB,GAEA,IAAA+yB,EAAA1kD,KAAA2a,UAAA,cAAA+pC,EAAA1kD,KAAA2nB,SACA,OAGA3iB,KAAAo+C,cAAAzxB,OAAAA,EAGA,MAAAzoB,EAAA,aAAA27C,EAGA,GAAAH,EAAA55B,YAAA,CACA,MAAAk5B,EAAA,IAAAtB,GAOA,OANAsB,EAAA5sC,IAAAstC,EAAAx7C,GAEAlE,KAAAo+C,cAAAY,WAAAA,OAEAh/C,KAAA+G,KAAA7C,GAA0B27C,WAAAA,EAAAH,YAAAA,GAA0B1/C,KAAAo+C,eAMpDp+C,KAAAo+C,cAAAY,WAAAh/C,KAAAo/C,0BAAAM,EAAAx7C,GAGA,IAAA,MAAAoT,KAAAooC,EAAAI,WAAA,CAEA,IAAA9/C,KAAAo+C,cAAAY,WAAAj1C,KAAAuN,EAAApT,GACA,SAGA,MAAA9C,GAAiBkW,KAAAA,EAAA6P,MAAAmzB,GAAA1wB,SAAAtS,GAAAuoC,WAAAA,EAAAH,YAAAA,GAEjB1/C,KAAA+G,KAAA7C,EAAA9C,EAAApB,KAAAo+C,eAGAp+C,KAAAm/C,sBAWAt/C,oBAAAggD,EAAAH,EAAA/yB,GAEA+yB,EAAA1kD,KAAA2a,UAAA,cAAA+pC,EAAA1kD,KAAA2nB,WAIA3iB,KAAAo+C,cAAAzxB,OAAAA,EAEA3sB,KAAA+G,KAAA,gBAAA84C,GAA4CA,WAAAA,EAAAH,YAAAA,GAA0B1/C,KAAAo+C,eAEtEp+C,KAAAm/C,uBAWAt/C,wBAAAsnB,GACA,MAAA63B,EAAA,IAAAtB,GAEA,IAAA,MAAAhhD,KAAAyqB,EAAA,CACA,MAAA7P,EAAA5a,EAAA4a,KAEA0nC,EAAA5sC,IAAAkF,EAAA,UAEA,IAAA,MAAAvW,KAAAuW,EAAA2Y,mBACA+uB,EAAA5sC,IAAAkF,EAAA,aAAAvW,GAIA,OAAAi+C,EAWAn/C,0BAAAsnB,EAAAre,GACA,MAAAk2C,EAAA,IAAAtB,GAEA,IAAA,MAAApmC,KAAA6P,EAAA24B,WACAd,EAAA5sC,IAAAkF,EAAAxO,GAGA,OAAAk2C,EAWAn/C,2BAAA0iB,EAAA88B,GACA,MAAAL,EAAA,IAAAtB,GAEAsB,EAAA5sC,IAAAmQ,EAAA,aAEA,IAAA,MAAAk9B,KAAAJ,EACAL,EAAA5sC,IAAAmQ,EAAA,aAAAk9B,EAAAxjD,MAGA,IAAA,MAAA8E,KAAAwhB,EAAA0N,mBACA+uB,EAAA5sC,IAAAmQ,EAAA,aAAAxhB,GAGA,OAAAi+C,EAYAn/C,aAAAiJ,EAAA1H,GACA,IAAApB,KAAAo+C,cAAAY,WAAAj1C,KAAA3I,EAAAkW,KAAAxO,GAEA,OAGA,MAAA7M,EAAAmF,EAAAkW,KAAArb,MAAA,QAEA+D,KAAA+G,KAAA+B,EAAA,IAAA7M,EAAAmF,EAAApB,KAAAo+C,eAQAv+C,6BACAG,KAAAo+C,cAAAzxB,cACA3sB,KAAAo+C,cAAAY,YA+HA,SAAAY,GAAAxD,EAAAqD,EAAAzC,GACA,MAAA71B,EAAAs4B,EAAAE,WACA7pC,EAAApQ,MAAAC,KAAAy2C,EAAApmC,gBAYA,OAXAF,EAAAoP,QACApP,EAAAiqC,WAEAjqC,EAAA8d,KAAApc,IACA,GAAA2P,EAAA64B,aAAAxoC,GAAA,CAGA,QAFAwlC,EAAAJ,cAAAplC,GAEA0K,kBAAA;;;;GAnBAlb,EAAAm3C,GAAA9nC,SC3iBA4pC,GAyDApgD,YAAA8nB,EAAAC,EAAAvkB,GAOArD,KAAA8nB,oBAAA,EAQA9nB,KAAA6nB,WAQA7nB,KAAA4Y,OAAA,IAAAxS,IAEAuhB,GACA3nB,KAAAkgD,MAAAv4B,EAAAC,EAAAvkB,GAgBA+kB,aACA,GAAApoB,KAAA6nB,QAAA5iB,OAAA,EAAA,CACA,MAAAkiB,EAAAnnB,KAAA6nB,QAAA7nB,KAAA6nB,QAAA5iB,OAAA,GAEA,OAAAjF,KAAA8nB,mBAAAX,EAAA1D,IAAA0D,EAAA7J,MAGA,OAAA,KAYA+K,YACA,GAAAroB,KAAA6nB,QAAA5iB,OAAA,EAAA,CACA,MAAAkiB,EAAAnnB,KAAA6nB,QAAA7nB,KAAA6nB,QAAA5iB,OAAA,GAEA,OAAAjF,KAAA8nB,mBAAAX,EAAA7J,MAAA6J,EAAA1D,IAGA,OAAA,KAUAqC,kBAGA,OAAA,IAFA9lB,KAAA6nB,QAAA5iB,QAGAjF,KAAA6nB,QAAA,GAAA/B,YAYAwC,iBACA,OAAAtoB,KAAA6nB,QAAA5iB,OAUAsjB,iBACA,OAAAvoB,KAAA8lB,aAAA9lB,KAAA8nB,mBAUAjoB,QAAAipB,GACA,GAAA9oB,KAAAsoB,YAAAQ,EAAAR,WACA,OAAA,EACG,GAAA,IAAAtoB,KAAAsoB,WACH,OAAA,EAGA,IAAAtoB,KAAAooB,OAAA3D,QAAAqE,EAAAV,UAAApoB,KAAAqoB,MAAA5D,QAAAqE,EAAAT,OACA,OAAA,EAGA,IAAA,MAAAU,KAAA/oB,KAAA6nB,QAAA,CACA,IAAAmB,GAAA,EAEA,IAAA,MAAA3C,KAAAyC,EAAAjB,QACA,GAAAkB,EAAAtE,QAAA4B,GAAA,CACA2C,GAAA,EACA,MAIA,IAAAA,EACA,OAAA,EAIA,OAAA,EAQAnpB,aACA,IAAA,MAAAsnB,KAAAnnB,KAAA6nB,cACAyyB,GAAAzzB,gBAAAM,GAcAtnB,gBACA,IAAA2oB,EAAA,KAEA,IAAA,MAAArB,KAAAnnB,KAAA6nB,QACAW,IAAArB,EAAA7J,MAAAgJ,SAAAkC,EAAAlL,SACAkL,EAAArB,GAIA,OAAAqB,EAAA8xB,GAAAzzB,gBAAA2B,GAAA,KAaA3oB,eACA,IAAA4oB,EAAA,KAEA,IAAA,MAAAtB,KAAAnnB,KAAA6nB,QACAY,IAAAtB,EAAA1D,IAAAyC,QAAAuC,EAAAhF,OACAgF,EAAAtB,GAIA,OAAAsB,EAAA6xB,GAAAzzB,gBAAA4B,GAAA,KAYA5oB,mBACA,MAAA2oB,EAAAxoB,KAAA2oB,gBAEA,OAAAH,EAAAywB,GAAA91B,mBAAAqF,EAAAlL,OAAA,KAYAzd,kBACA,MAAA+oB,EAAA5oB,KAAA6oB,eAEA,OAAAD,EAAAqwB,GAAA91B,mBAAAyF,EAAAnF,KAAA,KA0DA5jB,MAAA8nB,EAAAC,EAAAvkB,GACA,GAAA,OAAAskB,EACA3nB,KAAAspB,oBACG,GAAA3B,aAAAs4B,GACHjgD,KAAAspB,WAAA3B,EAAAuB,YAAAvB,EAAAY,iBACG,GAAAZ,GAAA,mBAAAA,EAAAuB,UAGHlpB,KAAAspB,WAAA3B,EAAAuB,YAAAvB,EAAAY,iBACG,GAAAZ,aAAA2yB,GACHt6C,KAAAspB,YAAA3B,KAAAC,KAAAA,EAAA8B,eACG,GAAA/B,aAAAsxB,GACHj5C,KAAAspB,YAAA,IAAAgxB,GAAA3yB,UACG,GAAAA,aAAAgwB,GAAA,CACH,MAAAjuB,IAAArmB,KAAAA,EAAAqmB,SACA,IAAAvC,EAEA,GAAA,MAAAS,EACAT,EAAAmzB,GAAA3wB,SAAAhC,QACI,GAAA,MAAAC,EACJT,EAAAmzB,GAAA1wB,SAAAjC,OACI,CAAA,QAAApqB,IAAAqqB,EAQJ,MAAA,IAAA3mB,EACA,sIARAkmB,EAAAmzB,GAAAzwB,kBAAAlC,EAAAC,GAYA5nB,KAAAspB,YAAAnC,GAAAuC,OACG,CAAA,IAAAzS,GAAA0Q,GASH,MAAA,IAAA1mB,EAAA,8EAPAjB,KAAAspB,WAAA3B,EAAAC,KAAAA,EAAA8B,WAsBA7pB,WAAAiqB,EAAAC,GAAA,GAIA,MAAAo2B,GAHAr2B,EAAApkB,MAAAC,KAAAmkB,IAGA8J,KAAAyB,IACA,KAAAA,aAAAilB,IACA,MAAA,IAAAr5C,EAAA,8FAGA,OAAAjB,KAAA6nB,QAAA9F,MAAAq+B,IACAA,EAAA37B,QAAA4Q,MAKA,GAAAvL,EAAA7kB,SAAAjF,KAAA6nB,QAAA5iB,QAAAk7C,EAAA,CAIAngD,KAAAqgD,mBAEA,IAAA,MAAAl5B,KAAA2C,EACA9pB,KAAAkqB,WAAA/C,GAGAnnB,KAAA8nB,qBAAAiC,EAEA/pB,KAAA+G,KAAA,gBAA8Bu5C,cAAA,KAa9BzgD,SAAA+lB,EAAAtW,GACA,GAAA,OAAAtP,KAAAooB,OAMA,MAAA,IAAAnnB,EACA,uGAIA,MAAAgpB,EAAAgvB,GAAA1xB,SAAA3B,EAAAtW,GAEA,GAAA,QAAA2a,EAAA3E,YAAAtlB,KAAAqoB,OACA,OAGA,MAAAD,EAAApoB,KAAAooB,OAEApoB,KAAA6nB,QAAA5iB,QACAjF,KAAAugD,YAGA,UAAAt2B,EAAA3E,YAAA8C,IACApoB,KAAAkqB,WAAA,IAAAowB,GAAArwB,EAAA7B,IACApoB,KAAA8nB,oBAAA,IAEA9nB,KAAAkqB,WAAA,IAAAowB,GAAAlyB,EAAA6B,IACAjqB,KAAA8nB,oBAAA,GAGA9nB,KAAA+G,KAAA,gBAA8Bu5C,cAAA,IAS9BzgD,aAAAkB,GACA,OAAAf,KAAA4Y,OAAApc,IAAAuE,GAWAlB,gBACA,OAAAG,KAAA4Y,OAAAvQ,UAQAxI,mBACA,OAAAG,KAAA4Y,OAAA/X,OASAhB,aAAAkB,GACA,OAAAf,KAAA4Y,OAAArQ,IAAAxH,GAYAlB,gBAAAkB,GACAf,KAAA+X,aAAAhX,KACAf,KAAA4Y,OAAAtS,OAAAvF,GAEAf,KAAA+G,KAAA,oBAAmCy5C,eAAAz/C,GAAAu/C,cAAA,KAcnCzgD,aAAAkB,EAAArE,GACAsD,KAAAgY,aAAAjX,KAAArE,IACAsD,KAAA4Y,OAAAvS,IAAAtF,EAAArE,GAEAsD,KAAA+G,KAAA,oBAAmCy5C,eAAAz/C,GAAAu/C,cAAA,KAWnCzgD,qBACA,GAAA,IAAAG,KAAAsoB,WACA,OAAA,KAGA,MAAAnB,EAAAnnB,KAAA2oB,gBACAxC,EAAAgB,EAAA7J,MAAAwH,UACAsB,EAAAe,EAAA1D,IAAAsB,WAEA,OAAAoB,aAAAsyB,IAAAtyB,GAAAC,EAAAD,EAAA,KA+BAtmB,qBACA,MAAA4gD,EAAA,IAAA9P,QAEA,IAAA,MAAAxpB,KAAAnnB,KAAAkpB,YAAA,CACA,MAAAw3B,EAAAC,GAAAx5B,EAAA7J,MAAAmjC,GAEAC,UACAA,GAGA,IAAA,MAAAhkD,KAAAyqB,EAAAsN,YACA,cAAA/3B,EAAAoM,MAAA83C,GAAAlkD,EAAA4a,KAAAmpC,WACA/jD,EAAA4a,MAIA,MAAAupC,EAAAF,GAAAx5B,EAAA1D,IAAAg9B,GAGAI,IAAA15B,EAAA1D,IAAAq9B,WAAA7H,GAAA1xB,SAAAs5B,YACAA,IAgBAhhD,sBAAA2X,EAAAxX,KAAAooB,OAAAptB,MACA,MAAA+lD,EAAA9H,GAAA1xB,SAAA/P,GACAwpC,EAAA/H,GAAA1xB,SAAA/P,EAAA,OAEA,OAAAupC,EAAAD,WAAA9gD,KAAAi1B,qBACA+rB,EAAAF,WAAA9gD,KAAAkwC,mBAUArwC,WAAAsnB,GACAnnB,KAAAihD,YAAA95B,GACAnnB,KAAA6nB,QAAA5jB,KAAAq2C,GAAAzzB,gBAAAM,IASAtnB,YAAAsnB,GACA,IAAA,IAAAzrB,EAAA,EAAkBA,EAAAsE,KAAA6nB,QAAA5iB,OAAyBvJ,IAC3C,GAAAyrB,EAAAP,eAAA5mB,KAAA6nB,QAAAnsB,IAQA,MAAA,IAAAuF,EACA,8GACMmpB,WAAAjD,EAAAkD,kBAAArqB,KAAA6nB,QAAAnsB,KAYNmE,mBACA,KAAAG,KAAA6nB,QAAA5iB,OAAA,GACAjF,KAAAugD,YASA1gD,YACAG,KAAA6nB,QAAApnB,OA+BA,SAAAmgD,GAAAppC,EAAAipC,GACA,OAAAA,EAAAl4C,IAAAiP,KAIAipC,EAAAruC,IAAAoF,GAEAA,EAAA7B,SAAAurC,MAAAC,OAAAC,QAAA5pC,IAAAA,EAAAnC,QAKA,SAAAsrC,GAAA19B,EAAAw9B,GACA,MAAA3qC,EAAAmN,EAAA5N,OAAAW,cAAkDH,aAAA,EAAAD,aAAA,IAClDyrC,EAAAvrC,EAAAwV,KAAA9T,GAAAopC,GAAAppC,EAAAipC,IAMA,OAFA3qC,EAAAhV,QAAA0W,GAAAipC,EAAAruC,IAAAoF,IAEA6pC;;;;GAxBAr6C,EAAAi5C,GAAA5pC,SCxtBAirC,WAAAhH,GAMAz6C,YAAAyd,EAAAmG,GACAjiB,MAAA8b,EAAAmG,GAyFA,WAEA,MAAAg3B,EAAA,IAAAxhC,KAAA,SAAA,OAAA,SAAA,aAEAjZ,KAAAsD,SACAtD,KAAAhF,KAAA2a,SAAAurC,MACA,iBACA,CAAA/9C,EAAAI,KACA,MAAAm3C,EAAAn3C,EAAA,GAEAm3C,EAAA6G,qBAIA9G,EAAAlyC,IAAAmyC,EAAA5xC,OAgBA,SAAA4xC,GACA,MAAA8G,EAAA9G,EAAA5xC,KACA24C,EAAA/G,EAAA3gB,MAAA0nB,MAEA,IAAAC,EACA5H,EAEA,UAAA0H,EACAE,EAAApH,GAAAhzB,2BAAAozB,EAAAz3B,SAAAy3B,EAAAhgC,MAAA09B,YAEAsJ,EAAApH,GAAAhzB,2BAAAozB,EAAAiH,qBAAAjH,EAAA7/B,SACAi/B,EAAAY,EAAAZ,gBAGA,MAAAj/B,EAAA6mC,EAAAj+B,IAAAnU,OAAAoyC,EAAApkC,MAAAhO,OACA,IAAA0jB,EAAA0uB,EAAApkC,MAEA,QAAAkkC,GAAA,UAAAA,GAAA,YAAAA,IAIAxuB,EAAAA,EAAAknB,2BAAAJ,EAAAj/B,IAGA,MAAA/b,EAAAkB,KAAA46C,gCAAA4G,EAAA9G,EAAA3gB,MAAAjxB,KAAAkqB,EAAAnY,EAAAi/B,GAMA,QAAA0H,GAAA,UAAAA,GAAA,YAAAA,GAAA,GAAA1iD,EAAAmG,SAGAnG,EAAA,GAAA4iD,GAGA,MAAAE,EAAAtH,GAAAuH,iBAAA/iD,GAEAgjD,GAAAF,EAAAn9B,QAAAzkB,MAEA+hD,EAAA/hD,KAAAymB,iBAAAuM,GACAgvB,EAAAlI,IAAA95C,KAAAymB,iBAAAqzB,IAAA95C,KAAAsd,MAAAmH,QAAAq1B,IACAmI,EAAAF,GAAAC,EAEA,GAAAF,EAAA,CAEA,MAAA1B,EAAA9F,GAAAzzB,gBAAA7mB,MAEAA,KAAAsd,MAAAskC,EAAAtkC,MACAtd,KAAAyjB,IAAAm+B,EAAAn+B,IAEAzjB,KAAA+G,KAAA,eAAAq5C,GACAt3C,KAAA04C,EACAC,MAAAA,EACAt6B,MAAAu6B,EACA5H,eAAAA,SAEEmI,GAEFjiD,KAAA+G,KAAA,iBAAAuzC,GAAAzzB,gBAAA7mB,OACA8I,KAAA04C,EACAC,MAAAA,EACAt6B,MAAAu6B,EACA5H,eAAAA,KA9EAj+C,KAAAmE,KAAA06C,KAGGh4C,SAAA,SAzGH7G,KAAAmE,MAQAH,SACAG,KAAAwD,iBAgLAwD,EAAAs6C,GAAAjrC;;;;;AClMA,MAAA6rC,GAAA,mBA0BAC,GAMAtiD,YAAA0/B,GAMAv/B,KAAAoiD,WAAA,IAAAC,GAAA9iB,GAEAv/B,KAAAoiD,WAAAE,SAAA,gBAAAp8C,GAAAlG,MACAA,KAAAoiD,WAAAE,SAAA,oBAAAp8C,GAAAlG,MAUA8lB,kBACA,OAAA9lB,KAAAoiD,WAAAt8B,YAeAsC,aACA,OAAApoB,KAAAoiD,WAAAh6B,OAYAC,YACA,OAAAroB,KAAAoiD,WAAA/5B,MASAC,iBACA,OAAAtoB,KAAAoiD,WAAA95B,WAUAi6B,kBACA,OAAAviD,KAAAoiD,WAAAG,YAUAh6B,iBACA,OAAAvoB,KAAAoiD,WAAA75B,WAWAi6B,0BACA,OAAAxiD,KAAAoiD,WAAAI,oBAQA36B,cACA,OAAA7nB,KAAAoiD,WAAAv6B,QAQAhoB,YACA,OAAAG,KAAAoiD,WAAAl5B,YAYArpB,mBACA,OAAAG,KAAAoiD,WAAAntB,mBAYAp1B,kBACA,OAAAG,KAAAoiD,WAAAlS,kBAaArwC,gBACA,OAAAG,KAAAoiD,WAAAz5B,gBAaA9oB,eACA,OAAAG,KAAAoiD,WAAAv5B,eA+BAhpB,oBACA,OAAAG,KAAAoiD,WAAAK,oBAUA5iD,qBACA,OAAAG,KAAAoiD,WAAAM,qBAcA7iD,sBAAA2X,GACA,OAAAxX,KAAAoiD,WAAAO,sBAAAnrC,GAMA3X,UACAG,KAAAoiD,WAAAxW,UAQA/rC,mBACA,OAAAG,KAAAoiD,WAAAnyB,mBAWApwB,gBACA,OAAAG,KAAAoiD,WAAA3sB,gBASA51B,aAAAkB,GACA,OAAAf,KAAAoiD,WAAApqC,aAAAjX,GASAlB,aAAAkB,GACA,OAAAf,KAAAoiD,WAAArqC,aAAAhX,GAeAlB,UAAA+lB,EAAAtW,GACAtP,KAAAoiD,WAAAQ,SAAAh9B,EAAAtW,GAmBAzP,OAAA8nB,EAAAC,EAAAvkB,GACArD,KAAAoiD,WAAAlC,MAAAv4B,EAAAC,EAAAvkB,GAYAxD,cAAAkB,EAAArE,GACAsD,KAAAoiD,WAAAlyB,aAAAnvB,EAAArE,GAaAmD,iBAAAkB,GACAf,KAAAoiD,WAAA/qB,gBAAAt2B,GASAlB,uBACA,OAAAG,KAAAoiD,WAAAS,uBAeAhjD,iBAAAijD,GACA9iD,KAAAoiD,WAAAW,gBAAAD,GAWAjjD,kBACAG,KAAAoiD,WAAAY,iBAUAnjD,6BAAAkB,GACA,OAAAmhD,GAAAnhD,EAUAlB,4BAAAkB,GACA,OAAAA,EAAAkiD,WAAAf,KAIAl7C,EAAAm7C,GAAA9rC,SAgBAgsC,WAAApC,GAGApgD,YAAA0/B,GACA/9B,QAMAxB,KAAAkjD,OAAA3jB,EAAA2hB,MAMAlhD,KAAAmiB,UAAAod,EAUAv/B,KAAAmjD,mBAAA,IAAA/8C,IAKApG,KAAAojD,2BAKApjD,KAAAqjD,kBAAA,EAOArjD,KAAAsjD,0BAAA,EAGAtjD,KAAA2gB,GAAA,eAAA,KACA,IAAA,MAAAwG,KAAAnnB,KAAAkpB,YACA,IAAAlpB,KAAAmiB,UAAAohC,wBAAAp8B,GAQA,MAAA,IAAAlmB,EACA,0GACOkmB,MAAAA,MAMPnnB,KAAAsD,SAAAtD,KAAAmiB,UAAA,SAAA,CAAAvB,EAAA6gC,KAEAzhD,KAAAwjD,mBAAA,GA6dA,SAAAtC,EAAAO,GACA,MAAAnD,EAAA4C,EAAAvrC,SAAA2oC,OAEA,IAAA,MAAAh2C,KAAAg2C,EAAAC,aAAA,CACA,GAAA,UAAAj2C,EAAAQ,KACA,SAGA,MAAA26C,EAAAn7C,EAAA2a,SAAA5N,OACAquC,EAAAp7C,EAAArD,SAAAw+C,EAAArL,UAEAsL,GACAxC,EAAAyC,cAAAlC,EAAA90B,IACA,MAAAi3B,EAAAl+C,MAAAC,KAAA89C,EAAAxzB,oBACA1E,OAAAxqB,GAAAA,EAAAkiD,WAAAf,KAEA,IAAA,MAAAnhD,KAAA6iD,EACAj3B,EAAA0K,gBAAAt2B,EAAA0iD,MA3eAI,CAAA7jD,KAAAkjD,OAAAzB,KAGAzhD,KAAAsD,SAAAtD,KAAAkjD,OAAA,iBAAA,KACA,KAAAljD,KAAAojD,wBAAAn+C,QAAA,CACA,MAAA6+C,UAAWA,EAAAhK,eAAAA,GAA4B95C,KAAAojD,wBAAAl+B,QAEvCllB,KAAA+jD,uBAAAD,EAAAhK,GAGA95C,KAAAqjD,mBACArjD,KAAAqjD,kBAAA,EAEArjD,KAAA+G,KAAA,gBAAgCu5C,cAAA,OAE1B59C,SAAA,WAGNojB,kBAGA,OAAA,IAFA9lB,KAAA6nB,QAAA5iB,OAEAjF,KAAAmiB,UAAA6hC,mBAAAl+B,YAAAtkB,MAAAskB,YAGAsC,aACA,OAAA5mB,MAAA4mB,QAAApoB,KAAAmiB,UAAA6hC,mBAAA1mC,MAGA+K,YACA,OAAA7mB,MAAA6mB,OAAAroB,KAAAmiB,UAAA6hC,mBAAAvgC,IAGA6E,iBACA,OAAAtoB,KAAA6nB,QAAA5iB,OAAAjF,KAAA6nB,QAAA5iB,OAAA,EAQAs9C,kBACA,OAAAviD,KAAA6nB,QAAA5iB,OAAA,EAQAu9C,0BACA,OAAAxiD,KAAAsjD,0BAAA,EAIAzjD,UACA,IAAA,IAAAnE,EAAA,EAAkBA,EAAAsE,KAAA6nB,QAAA5iB,OAAyBvJ,IAC3CsE,KAAA6nB,QAAAnsB,GAAAkoC,SAGA5jC,KAAAwD,gBAGA3D,aACAG,KAAA6nB,QAAA5iB,aACAzD,MAAA0nB,kBAEAlpB,KAAAmiB,UAAA6hC,mBAIAnkD,gBACA,OAAA2B,MAAAmnB,iBAAA3oB,KAAAmiB,UAAA6hC,mBAGAnkD,eACA,OAAA2B,MAAAqnB,gBAAA7oB,KAAAmiB,UAAA6hC,mBAGAnkD,MAAA8nB,EAAAs8B,EAAA5gD,GACA7B,MAAA0+C,MAAAv4B,EAAAs8B,EAAA5gD,GACArD,KAAAkkD,qBAGArkD,SAAA+lB,EAAAtW,GACA9N,MAAAohD,SAAAh9B,EAAAtW,GACAtP,KAAAkkD,qBAGArkD,aAAAkB,EAAArE,GACA,GAAAsD,KAAAmyB,cAAApxB,EAAArE,GAAA,CAEA,MAAA8jD,GAAAz/C,GACAf,KAAA+G,KAAA,oBAAmCy5C,cAAAA,EAAAF,cAAA,KAInCzgD,gBAAAkB,GACA,GAAAf,KAAAoyB,iBAAArxB,GAAA,CAEA,MAAAy/C,GAAAz/C,GACAf,KAAA+G,KAAA,oBAAmCy5C,cAAAA,EAAAF,cAAA,KAInCzgD,gBAAAijD,GACA9iD,KAAAsjD,4BAEA,GAAAtjD,KAAAsjD,4BACAR,GACA9iD,KAAA2gB,GAAA,eAAA,CAAAC,EAAAxf,KACAA,EAAAk/C,eACAtgD,KAAAgjD,iBACApiC,EAAA1e,SAKAlC,KAAAwjD,qBAIA3jD,iBACAG,KAAAsjD,4BAEAtjD,KAAAwiD,qBACAxiD,KAAAwjD,oBAKA3jD,qBACAG,KAAAwjD,mBAAA,GAGA3jD,YACAG,KAAA6nB,QAAApnB,MAAAmjC,SAGA/jC,WAAAsnB,GACA,MAAA28B,EAAA9jD,KAAAmkD,cAAAh9B,GAGA28B,GACA9jD,KAAA6nB,QAAA5jB,KAAA6/C,GAUAjkD,cAAAsnB,GAGA,GAFAnnB,KAAAihD,YAAA95B,GAEAA,EAAAnsB,MAAAgF,KAAAmiB,UAAAk4B,UAQA,YAFAjK,GAAAE,KAAA,4GAKA,MAAAwT,EAAAxC,GAAAz6B,gBAAAM,GAcA,OAZA28B,EAAAnjC,GAAA,eAAA,CAAAC,EAAAw/B,EAAAh/C,KACApB,KAAAqjD,kBAAA,EAGAS,EAAA9oD,MAAAgF,KAAAmiB,UAAAk4B,WACAr6C,KAAAojD,wBAAAn/C,MACA6/C,UAAAA,EACAhK,eAAA14C,EAAA04C,mBAKAgK,EAQAjkD,kBAAAukD,GACA,MAAAC,EAAA3M,GAAA13C,KAAAskD,6BACAC,EAAA7M,GAAA13C,KAAAy1B,iBAEA,GAAA2uB,EAEApkD,KAAAmjD,mBAAA,IAAA/8C,IACApG,KAAA4Y,OAAA,IAAAxS,SAGA,IAAA,MAAArF,EAAA2B,KAAA1C,KAAAmjD,mBACA,OAAAzgD,IACA1C,KAAA4Y,OAAAtS,OAAAvF,GACAf,KAAAmjD,mBAAA78C,OAAAvF,IAKAf,KAAAwkD,iBAAAH,GAGA,MAAAI,KAIA,IAAA,MAAAC,EAAAl4C,KAAAxM,KAAAy1B,gBACA8uB,EAAAh8C,IAAAm8C,IAAAH,EAAA/nD,IAAAkoD,KAAAl4C,GACAi4C,EAAAxgD,KAAAygD,GAKA,IAAA,MAAAC,KAAAJ,EACAvkD,KAAA+X,aAAA4sC,IACAF,EAAAxgD,KAAA0gD,GAKAF,EAAAx/C,OAAA,GACAjF,KAAA+G,KAAA,oBAAmCy5C,cAAAiE,EAAAnE,cAAA,IAanCzgD,cAAAkB,EAAArE,EAAA4jD,GAAA,GACA,MAAA59C,EAAA49C,EAAA,SAAA,MAEA,OAAA,OAAA59C,GAAA,UAAA1C,KAAAmjD,mBAAA3mD,IAAAuE,MAKAS,MAAAwW,aAAAjX,KAGArE,IAIAsD,KAAA4Y,OAAAvS,IAAAtF,EAAArE,GAGAsD,KAAAmjD,mBAAA98C,IAAAtF,EAAA2B,IAEA,IAeA7C,iBAAAkB,EAAAu/C,GAAA,GACA,MAAA59C,EAAA49C,EAAA,SAAA,MAEA,OAAA,OAAA59C,GAAA,UAAA1C,KAAAmjD,mBAAA3mD,IAAAuE,MAMAf,KAAAmjD,mBAAA98C,IAAAtF,EAAA2B,KAGAlB,MAAAuW,aAAAhX,KAIAf,KAAA4Y,OAAAtS,OAAAvF,IAEA,IASAlB,iBAAA8Y,GACA,MAAA8rC,EAAA,IAAAxrC,IAEA,IAAA,MAAA0rC,EAAAvlC,KAAApf,KAAAy1B,gBAEA9c,EAAAnc,IAAAmoD,KAAAvlC,GAKApf,KAAAoyB,iBAAAuyB,GAAA,GAGA,IAAA,MAAA5jD,EAAArE,KAAAic,EAAA,CAEA3Y,KAAAmyB,cAAApxB,EAAArE,GAAA,IAGA+nD,EAAAryC,IAAArR,GAIA,OAAA0jD,EAOA5kD,wBACA,MAAA88B,EAAA38B,KAAAi1B,mBAAA5f,OAEA,GAAArV,KAAA8lB,aAAA6W,EAAAnjB,QACA,IAAA,MAAAzY,KAAA47B,EAAA1M,mBACA,GAAAlvB,EAAAkiD,WAAAf,IAAA,OACAnhD,EAAAyD,OAAA09C,GAAAj9C,QAEA03B,EAAA3kB,aAAAjX,KAYAlB,4BACA,MAAAojB,EAAAjjB,KAAAi1B,mBACAksB,EAAAnhD,KAAAkjD,OAAA/B,OAEA,IAAAxoC,EAAA,KAEA,GAAA3Y,KAAA8lB,YAiBG,CAGH,MAAAf,EAAA9B,EAAAtM,SAAAsM,EAAAtM,SAAAsM,EAAA8B,WACAD,EAAA7B,EAAAtM,SAAAsM,EAAAtM,SAAAsM,EAAA6B,UAeA,GAZA9kB,KAAAwiD,sBAEA7pC,EAAAisC,GAAA7/B,IAIApM,IACAA,EAAAisC,GAAA9/B,KAKA9kB,KAAAwiD,sBAAA7pC,EAAA,CACA,IAAAjU,EAAAqgB,EAEA,KAAArgB,IAAAiU,GAEAA,EAAAisC,GADAlgD,EAAAA,EAAAgR,iBAMA,IAAAiD,EAAA,CACA,IAAAjU,EAAAogB,EAEA,KAAApgB,IAAAiU,GAEAA,EAAAisC,GADAlgD,EAAAA,EAAA8Q,aAMAmD,IACAA,EAAA3Y,KAAA6iD,4BAzDA,CAEA,MAAA17B,EAAAnnB,KAAA2oB,gBAGA,IAAA,MAAAjsB,KAAAyqB,EAAA,CAEA,GAAAzqB,EAAA4a,KAAAuE,GAAA,YAAAslC,EAAA0D,SAAAnoD,EAAA4a,MACA,MAKA,QAAA5a,EAAAoM,MAAA,OAAA6P,IACAA,EAAAjc,EAAA4a,KAAAme,kBA+CA,OAAA9c,EAQA9Y,uBAAAikD,EAAAgB,GAGA,MAAAC,EAAA9L,GAAA91B,mBAAA2hC,GAGAE,EAAAhlD,KAAAkjD,OAAA/B,OAAA8D,yBAAAF,GAIA/8C,EAAAhI,KAAA6nB,QAAAriB,QAAAs+C,GAKA,GAJA9jD,KAAA6nB,QAAA3iB,OAAA8C,EAAA,GACA87C,EAAAlgB,SAGAohB,EAAA,CAEA,MAAA3vB,EAAAr1B,KAAAmkD,cAAAa,GAGAhlD,KAAA6nB,QAAA3iB,OAAA8C,EAAA,EAAAqtB,KAYA,SAAAuvB,GAAAlgD,GACA,OAAAA,aAAAqzC,IAAArzC,aAAAmzC,GACAnzC,EAAA+wB,gBAGA,KCl9BA,IAAAyvB,GAJA,SAAAxoD,GACA,OAAAiY,GAAAjY,GAAA,GAAA;;;;GC8BA,SAAAyoD,GAAAC,GAKA,OAJAA,EAAAF,GAAAE,IAEAh1B,KAAAi1B,GAAAD,EAAAh1B,KAAA,aAEAiuB,IACAA,EAAA19B,GAAA,UAAAykC,EAAAlE,OAqYAoE,EArYAF,EAAAh1B,KAsYA,CAAAxP,EAAAxf,EAAAg9C,KACA,MAAA7oB,EAAA+vB,EAAAlkD,EAAAkW,KAAA8mC,EAAAzxB,QAEA,IAAA4I,EACA,OAGA,IAAA6oB,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,UACA,OAGA,MAAA4Z,EAAAktB,EAAApB,OAAAD,eAAA37C,EAAA+lB,MAAA7J,OAEA8gC,EAAApB,OAAApc,aAAAx/B,EAAAkW,KAAAie,GACA6oB,EAAAzxB,OAAAmG,OAAA5B,EAAAqE,MApZ0E7yB,SAAA0iD,EAAA1iD,UAAA,YAqY1E,IAAA4iD,EAxUA,SAAAE,GAAAJ,GAGA,MAAAK,GAFAL,EAAAF,GAAAE,IAEAlE,MAAAngD,IAAAqkD,EAAAlE,MAAAngD,IAAAqkD,EAAAlE,MAEA,GAAAkE,EAAAlE,MAAA7xC,OACA,IAAA,MAAAq2C,KAAAN,EAAAlE,MAAA7xC,OACA+1C,EAAAh1B,KAAAs1B,GAAAL,GAAAD,EAAAh1B,KAAAs1B,GAAA,kBAGAN,EAAAh1B,KAAAi1B,GAAAD,EAAAh1B,KAAA,aAGA,MAAAk1B,EAAAK,GAAAP,GAEA,OAAA/G,IACAA,EAAA19B,GAAA,aAAA8kC,EAmlBA,SAAAH,GACA,MAAA,CAAA1kC,EAAAxf,EAAAg9C,KAGA,MAAAwH,EAAAN,EAAAlkD,EAAAw9C,kBAAAR,EAAAzxB,QAGAk5B,EAAAP,EAAAlkD,EAAAy9C,kBAAAT,EAAAzxB,QAEA,IAAAi5B,IAAAC,EACA,OAGA,IAAAzH,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAA6pD,EAAA1H,EAAAzxB,OACAqI,EAAA8wB,EAAAnwC,SAAA4M,UAEA,GAAAnhB,EAAAkW,gBAAA2oC,IAAA7+C,EAAAkW,gBAAA6qC,GAEA2D,EAAAhvB,KAAA9B,EAAArM,gBAAAk9B,OACG,CAEH,IAAA7kB,EAAAod,EAAApB,OAAA+I,YAAA3kD,EAAA+lB,OAGA,OAAA/lB,EAAAw9C,mBAAAgH,IACA5kB,EAAA8kB,EAAAE,OAAAhlB,EAAA4kB,IAGA,OAAAxkD,EAAAy9C,mBAAAgH,GACAC,EAAAhvB,KAAAkK,EAAA6kB,KApnBAI,CAAAX,IAAmE5iD,SAAA0iD,EAAA1iD,UAAA,YAyDnE,SAAAwjD,GAAAd,GAIA,IAAAlhD,EAAA,eAHAkhD,EAAAF,GAAAE,IAEAlE,MAAAngD,IAAAqkD,EAAAlE,MAAAngD,IAAAqkD,EAAAlE,OAOA,GAJAkE,EAAAlE,MAAAjlD,OACAiI,GAAA,IAAAkhD,EAAAlE,MAAAjlD,MAGAmpD,EAAAlE,MAAA7xC,OACA,IAAA,MAAAq2C,KAAAN,EAAAlE,MAAA7xC,OACA+1C,EAAAh1B,KAAAs1B,GAAAS,GAAAf,EAAAh1B,KAAAs1B,SAGAN,EAAAh1B,KAAA+1B,GAAAf,EAAAh1B,MAGA,MAAAk1B,EAAAK,GAAAP,GAEA,OAAA/G,IACAA,EAAA19B,GAAAzc,GAibAkiD,GADAA,EAhbAd,IAibA,EAAA5oD,EAAA0E,MAAgE1E,MAAAA,EAAAqE,IAAAK,EAAAu9C,gBAEhE,CAAA/9B,EAAAxf,EAAAg9C,KACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAAs5B,EAAA6oB,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACAwuC,EAAA1H,EAAAzxB,OAGA05B,EAAAD,EAAAhlD,EAAAw9C,kBAAAx9C,GAEA,GAAA,OAAAA,EAAAw9C,mBAAAyH,EACA,GAAA,SAAAA,EAAAtlD,IAAA,CACA,MAAAmX,EAAAxS,MAAAkI,QAAAy4C,EAAA3pD,OAAA2pD,EAAA3pD,OAAA2pD,EAAA3pD,OAEA,IAAA,MAAAkd,KAAA1B,EACA4tC,EAAAxuB,YAAA1d,EAAA2b,QAEI,GAAA,SAAA8wB,EAAAtlD,IAAA,CACJ,MAAAF,EAAAzE,OAAAyE,KAAAwlD,EAAA3pD,OAEA,IAAA,MAAAqE,KAAAF,EACAilD,EAAAvuB,YAAAx2B,EAAAw0B,QAGAuwB,EAAAzuB,gBAAAgvB,EAAAtlD,IAAAw0B,GAKA,MAAAQ,EAAAqwB,EAAAhlD,EAAAy9C,kBAAAz9C,GAEA,GAAA,OAAAA,EAAAy9C,mBAAA9oB,EACA,GAAA,SAAAA,EAAAh1B,IAAA,CACA,MAAAmX,EAAAxS,MAAAkI,QAAAmoB,EAAAr5B,OAAAq5B,EAAAr5B,OAAAq5B,EAAAr5B,OAEA,IAAA,MAAAkd,KAAA1B,EACA4tC,EAAA3uB,SAAAvd,EAAA2b,QAEI,GAAA,SAAAQ,EAAAh1B,IAAA,CACJ,MAAAF,EAAAzE,OAAAyE,KAAAk1B,EAAAr5B,OAEA,IAAA,MAAAqE,KAAAF,EACAilD,EAAA5uB,SAAAn2B,EAAAg1B,EAAAr5B,MAAAqE,GAAAw0B,QAGAuwB,EAAA51B,aAAA6F,EAAAh1B,IAAAg1B,EAAAr5B,MAAA64B,MAjegE7yB,SAAA0iD,EAAA1iD,UAAA,YAgbhE,IAAA0jD,EAnUA,SAAAE,GAAAlB,GACA,OAAA/G,IACAA,EAAA19B,GAAA,aAAAykC,EAAAlE,OA4cAqF,EA5cAnB,EAAAh1B,KA6cA,CAAAxP,EAAAxf,EAAAg9C,KACA,GAAAh9C,EAAAs+C,YAAA55B,YACA,OAGA,KAAA1kB,EAAAkW,gBAAA2oC,IAAA7+C,EAAAkW,gBAAA6qC,IAAA/gD,EAAAkW,KAAAuE,GAAA,cACA,OAGA,MAAA2qC,EAAAC,GAAAF,EAAAnlD,EAAAg9C,GAEA,IAAAoI,EACA,OAGA,IAAApI,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAAs5B,EAAAmxB,GAAAF,GACAV,EAAA1H,EAAAzxB,OACAqI,EAAA8wB,EAAAnwC,SAAA4M,UAEA,GAAAnhB,EAAAkW,gBAAA2oC,IAAA7+C,EAAAkW,gBAAA6qC,GACA2D,EAAAhvB,KAAA9B,EAAArM,gBAAA4M,EAAAP,OACG,CACH,MAAAgM,EAAAod,EAAApB,OAAA+I,YAAA3kD,EAAA+lB,OACA2+B,EAAAhvB,KAAAkK,EAAAzL,OAxe6E7yB,SAAA0iD,EAAA1iD,UAAA,WAC7E27C,EAAA19B,GAAA,aAAAykC,EAAAlE,MA6fA,SAAAqF,GACA,MAAA,CAAA3lC,EAAAxf,EAAAg9C,KACA,GAAAh9C,EAAAs+C,YAAA55B,YACA,OAGA,KAAA1kB,EAAAkW,gBAAAmhC,IACA,OAGA,MAAA+N,EAAAC,GAAAF,EAAAnlD,EAAAg9C,GAEA,IAAAoI,EACA,OAGA,IAAApI,EAAAY,WAAAj1C,KAAA3I,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAAs5B,EAAA6oB,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MAEA,GAAAie,GAAAA,EAAArT,kBAAA,gBAAA,CAEAk8B,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MAGA,IAAA,MAAAS,KAAA49C,GAAA3wB,SAAAvoB,EAAAkW,MACA8mC,EAAAY,WAAAuG,QAAA7oD,EAAA4a,KAAAsJ,EAAA3kB,MAGAs5B,EAAArT,kBAAA,eAAAqT,CAAAA,EAAAixB,EAAApI,EAAAzxB,UA5hBAg6B,CAAAvB,EAAAh1B,OAAgF1tB,SAAA0iD,EAAA1iD,UAAA,WAChF27C,EAAA19B,GAAA,gBAAAykC,EAAAlE,MAsjBA,SAAAqF,GACA,MAAA,CAAA3lC,EAAAxf,EAAAg9C,KAEA,GAAAh9C,EAAAs+C,YAAA55B,YACA,OAGA,MAAA0gC,EAAAC,GAAAF,EAAAnlD,EAAAg9C,GAEA,IAAAoI,EACA,OAGA,MAAAxlB,EAAAod,EAAApB,OAAA+I,YAAA3kD,EAAAs+C,aAGAllC,EAAA,IAAAvB,IAAA+nB,EAAA8e,YAGA,IAAA,MAAAxoC,KAAAkD,EACA,GAAAlD,EAAAuE,GAAA,qBAAAvE,EAAA4K,kBAAA,mBAAA,CACA5K,EAAA4K,kBAAA,kBAAA5K,CAAAA,EAAAkvC,EAAAhgD,GAAA43C,EAAAzxB,QAGA,IAAA,MAAAi6B,KAAA/gC,GAAA8D,SAAArS,GACAkD,EAAAlU,OAAAsgD,GAOA,MAAAC,EAAAH,GAAAF,GACAV,EAAA1H,EAAAzxB,OAEA,IAAA,MAAArV,KAAA5R,MAAAC,KAAA6U,GAAAulC,UACAzoC,EAAAuE,GAAA,cACAiqC,EAAAE,OAAAngC,GAAA+D,SAAAtS,GAAAuvC,IA3lBAC,CAAA1B,EAAAh1B,OAAkF1tB,SAAA0iD,EAAA1iD,UAAA,YA0clF,IAAA6jD,EAhcA,SAAAlB,GAAAj1B,EAAA22B,GACA,MAAA,mBAAA32B,EAEAA,EAGA,CAAA42B,EAAAlB,KASA,SAAAmB,EAAAnB,EAAAiB,GACA,iBAAAE,IAEAA,GAA2BhrD,KAAAgrD,IAG3B,IAAAzvC,EAGAA,EADA,aAAAuvC,EACAjB,EAAAoB,uBAAAD,EAAAhrD,KAAAG,OAAAmiC,UAA4F0oB,EAAApvC,YAC1F,aAAAkvC,EACFjB,EAAApvB,uBAAAuwB,EAAAhrD,KAAAG,OAAAmiC,UAA4F0oB,EAAApvC,YAG5FiuC,EAAAqB,gBAAAF,EAAAhrD,KAAAG,OAAAmiC,UAAqF0oB,EAAApvC,YAGrF,GAAAovC,EAAA3uC,MAAA,CACA,MAAAzX,EAAAzE,OAAAyE,KAAAomD,EAAA3uC,OAEA,IAAA,MAAAvX,KAAAF,EACAilD,EAAA5uB,SAAAn2B,EAAAkmD,EAAA3uC,MAAAvX,GAAAyW,GAIA,GAAAyvC,EAAA1vC,MAAA,CACA,MAAAW,EAAA+uC,EAAA1vC,MAEA,GAAA,iBAAAW,EACA4tC,EAAA3uB,SAAAjf,EAAAV,QAEA,IAAA,MAAAoC,KAAA1B,EACA4tC,EAAA3uB,SAAAvd,EAAApC,GAKA,OAAAA,GA9CA4vC,CAAAh3B,EAAA01B,EAAAiB,GAiDA,SAAApB,GAAAP,GACA,OAAAA,EAAAlE,MAAA7xC,OACA,CAAAg4C,EAAAvB,KACA,MAAA11B,EAAAg1B,EAAAh1B,KAAAi3B,GAEA,OAAAj3B,EACAA,EAAAi3B,EAAAvB,GAGA,MAGAV,EAAAh1B,KAQA,SAAA+1B,GAAA/1B,GACA,MAAA,iBAAAA,EACAi3B,KAAmCtmD,IAAAqvB,EAAA1zB,MAAA2qD,IACjC,iBAAAj3B,EACF,IAAAA,EAGAA,EAsgBA,SAAAq2B,GAAAF,EAAAnlD,EAAAg9C,GAEA,MAAAoI,EAAA,mBAAAD,EACAA,EAAAnlD,EAAAg9C,GACAmI,EAEA,OAAAC,GAKAA,EAAA9jD,WACA8jD,EAAA9jD,SAAA,IAIA8jD,EAAAhgD,KACAggD,EAAAhgD,GAAApF,EAAAy+C,YAGA2G,GAbA,KAwBA,SAAAE,GAAAF,GACA,MAAAjxB,EAAA,IAAA+xB,GAAA,OAAAd,EAAAxsC,YAYA,OAVAwsC,EAAAjvC,OACAge,EAAAlD,UAAAm0B,EAAAjvC,OAGAivC,EAAA9jD,WACA6yB,EAAAxI,UAAAy5B,EAAA9jD,UAGA6yB,EAAAnT,mBAAA,wBAAAokC,EAAAhgD,IAEA+uB,QAcA+xB,WAAAx6B,GACAjtB,UAAA8Z,GACA,QAAAA,EAAAkC,GAAA,qBACA7b,KAAAkiB,kBAAA,2BAAAvI,EAAAuI,kBAAA;;;;;;;;;MCj8BAqlC,GAMA1nD,YAAAqhD,GAOAlhD,KAAAkhD,MAAAA,EAQAlhD,KAAAowB,KAAA,IAAAomB,GAQAx2C,KAAAg9C,OAAA,IAAAjB,GAQA/7C,KAAAwnD,mBAAA,IAAArJ,IACAnB,OAAAh9C,KAAAg9C,SAGA,MAAAzd,EAAAv/B,KAAAkhD,MAAAvrC,SACA4M,EAAAgd,EAAAhd,UACA88B,EAAAr/C,KAAAkhD,MAAA7B,QAEAr/C,KAAAsD,SAAAi8B,EAAA,SAAA,KACAv/B,KAAAowB,KAAAmnB,OAAA5qB,IACA3sB,KAAAwnD,mBAAAC,eAAAloB,EAAA+e,OAAA3xB,GACA3sB,KAAAwnD,mBAAAE,iBAAAnlC,EAAA88B,EAAA1yB,OAEMjqB,SAAA,QAGN1C,KAAAsD,SAAAtD,KAAAowB,KAAAza,SAAA,kBC5DA,SAAAurC,EAAAlE,GACA,MAAA,CAAAp8B,EAAAxf,KACA,MAAA4zB,EAAA5zB,EAAA6uC,aACA0X,EAAA,IAAA1H,GAEAt5B,KAEA,IAAA,MAAAqa,KAAAhM,EAAA9L,YACAvC,EAAA1iB,KAAA+4C,EAAA4K,aAAA5mB,IAGA2mB,EAAAzH,MAAAv5B,GAAiC+C,SAAAsL,EAAAzM,aAEjCo/B,EAAAljC,QAAAy8B,EAAAvrC,SAAA4M,YACA2+B,EAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAyyB;;;;GD6CAE,CAAA7nD,KAAAkhD,MAAAlhD,KAAAg9C,SAGAh9C,KAAAwnD,mBAAA7mC,GAAA,eDiYA,CAAAC,EAAAxf,EAAAg9C,KACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,UACA,OAGA,MAAAwuC,EAAA1H,EAAAzxB,OACAuE,EAAAktB,EAAApB,OAAAD,eAAA37C,EAAA+lB,MAAA7J,OACAyf,EAAA+oB,EAAAgC,WAAA1mD,EAAAkW,KAAAlW,MAEA0kD,EAAAhzB,OAAA5B,EAAA6L,KC1Y6Dr6B,SAAA,WAC7D1C,KAAAwnD,mBAAA7mC,GAAA,SDqZA,CAAAC,EAAAxf,EAAAg9C,KAEA,MAAA7b,EAAA6b,EAAApB,OAAAD,eAAA37C,EAAA6hB,UAEA8kC,EAAA3mD,EAAA6hB,SAAAmE,aAAAhmB,EAAA6D,QACAu9B,EAAA4b,EAAApB,OAAAD,eAAAgL,GAAkE9K,WAAA,IAElEjc,EAAA,IAAAnb,GAAA0c,EAAAC,GAGAlO,EAAA8pB,EAAAzxB,OAAAlB,OAAAuV,EAAA5X,cAIA,IAAA,MAAAjP,KAAA0L,GAAA8D,SAAA2K,GAAAwrB,WACA1B,EAAApB,OAAAgL,kBAAA7tC,KCpamDzX,SAAA,QAGnD1C,KAAAwnD,mBAAA7mC,GAAA,YEkBA,CAAAC,EAAAxf,EAAAg9C,KACA,MAAA0H,EAAA1H,EAAAzxB,OACAqI,EAAA8wB,EAAAnwC,SAAA4M,UAEA,IAAA,MAAA4E,KAAA6N,EAAA9L,YAEA/B,EAAArB,aAEAqB,EAAA1D,IAAApO,OAAAM,UACAyoC,EAAAzxB,OAAAyG,gBAAAjM,EAAA7J,OAIAwoC,EAAA5wB,aAAA,QF/B+DxyB,SAAA,QAC/D1C,KAAAwnD,mBAAA7mC,GAAA,YEzEA,CAAAC,EAAAxf,EAAAg9C,KACA,MAAA77B,EAAAnhB,EAAAmhB,UAEA,GAAAA,EAAAuD,YACA,OAGA,IAAAs4B,EAAAY,WAAAuG,QAAAhjC,EAAA,aACA,OAGA,MAAA8f,KAEA,IAAA,MAAAlb,KAAA5E,EAAA2G,YAAA,CACA,MAAA8X,EAAAod,EAAApB,OAAA+I,YAAA5+B,GACAkb,EAAAp+B,KAAA+8B,GAGAod,EAAAzxB,OAAAuI,aAAAmN,GAAkD3Y,SAAAnH,EAAAgG,eFuDmB7lB,SAAA,QACrE1C,KAAAwnD,mBAAA7mC,GAAA,YE7BA,CAAAC,EAAAxf,EAAAg9C,KACA,MAAA77B,EAAAnhB,EAAAmhB,UAEA,IAAAA,EAAAuD,YACA,OAGA,IAAAs4B,EAAAY,WAAAuG,QAAAhjC,EAAA,aACA,OAGA,MAAAujC,EAAA1H,EAAAzxB,OACAyvB,EAAA75B,EAAA0S,mBACA/D,EAAAktB,EAAApB,OAAAD,eAAAX,GACA6L,EAAAnC,EAAAoC,gBAAAh3B,GAEA40B,EAAA5wB,aAAA+yB,KFayEvlD,SAAA,QAQzE,MAAAylD,EAAA,IAAAlvC,IAIA6sC,EAAA,IAAAj0B,GAAA7xB,KAAAowB,KAAAza,UAEA3V,KAAAsD,SAAA49C,EAAA,iBAAA,CAAAtgC,EAAArd,KAEA,MAAAm3C,EAAAn3C,EAAA,GAEA,IAAA,MAAAk8C,KAAAyB,EAAA7B,QAAA,CAEA,GAAA8I,EAAA5/C,IAAAk3C,EAAAxjD,MACA,SAGA,MAAAyjD,EAAAD,EAAAE,WAEAyI,GAAA1N,EAAA+E,KAEA0I,EAAA/1C,IAAAqtC,EAAAxjD,MACA+D,KAAAwnD,mBAAAa,oBAAA5I,EAAAxjD,KAAAyjD,EAAAoG,GAEA9lD,KAAAkhD,MAAAvrC,SAAA2oC,OAAAgK,mBAAA7I,EAAAxjD,KAAAyjD,EAAAA,OAGMh9C,SAAA,SAGN1C,KAAAsD,SAAA49C,EAAA7B,QAAA,SAAA,CAAAz+B,EAAA6+B,EAAAW,KACAA,IAAA+H,EAAA5/C,IAAAk3C,EAAAxjD,QACAksD,EAAA/1C,IAAAqtC,EAAAxjD,MACA+D,KAAAwnD,mBAAAa,oBAAA5I,EAAAxjD,KAAAmkD,EAAA0F,MAKA9lD,KAAAsD,SAAA49C,EAAA,UAAA,KACAiH,EAAA5hD,UACM7D,SAAA,QAKN1C,KAAAowB,KAAAza,SAAA6W,MAAA+7B,OAAAvoD,KAAAkhD,MAAAvrC,SAAA6W,OAAAV,MAAA9wB,IAEA,GAAA,cAAAA,EAAA2nB,SACA,OAAA,KAGA,MAAAs0B,EAAA,IAAAv0B,GAAA1nB,EAAAiB,MAMA,OAJAg7C,EAAAt0B,SAAA3nB,EAAA2nB,SACAs0B,EAAA90B,UAAAniB,KAAAowB,KAAAza,SACA3V,KAAAg9C,OAAApc,aAAA5lC,EAAAi8C,GAEAA,IAQAp3C,UACAG,KAAAowB,KAAAwb,UACA5rC,KAAAwD,iBAOA,SAAA4kD,GAAA1N,EAAA+E,GACA,MAAAt4B,EAAAs4B,EAAAE,WAEA,MAAA,UAAAjF,EAAA5xC,MAAA,UAAA4xC,EAAA5xC,KACA0/C,GAAA9N,EAAAz3B,SAAAkE,GACE,QAAAuzB,EAAA5xC,MAAA,UAAA4xC,EAAA5xC,MAAA,YAAA4xC,EAAA5xC,KACF0/C,GAAA9N,EAAA1nB,eAAA7L,IAAAqhC,GAAA9N,EAAAZ,eAAA3yB,GACE,UAAAuzB,EAAA5xC,MAAA4xC,EAAAz+C,MAAAwjD,EAAAxjD,KAQF,SAAAusD,GAAAvlC,EAAAkE,GACA,OAAAA,EAAAV,iBAAAxD,KAAAkE,EAAA7J,MAAA48B,2BAAAj3B,EAAA,GAAA,GAAAwB,QAAA0C,EAAA7J;;;;GAnBAtW,EAAAugD,GAAA1mC,UGhKA4nC,GAWA5oD,YAAA6oD,EAAAC,MAKA3oD,KAAA4oD,QAAAF,EAQA1oD,KAAA6oD,kBAAA,IAAAziD,IAMApG,KAAA8oD,SAAA,IAAA1iD,IAEA,IAAA,MAAA2iD,KAAAJ,EACA3oD,KAAA6oD,kBAAAxiD,IAAA0iD,EAAAA,GAEAA,EAAAC,YACAhpD,KAAA6oD,kBAAAxiD,IAAA0iD,EAAAC,WAAAD,GAYAlpD,EAAAoD,OAAAiU,YACA,IAAA,MAAA5O,KAAAtI,KAAA8oD,SACA,mBAAAxgD,EAAA,WACAA,GAWAzI,IAAAkB,GACA,OAAAf,KAAA8oD,SAAAtsD,IAAAuE,GAeAlB,KAAAopD,EAAAC,MACA,MAAAC,EAAAnpD,KACA0oD,EAAA1oD,KAAA4oD,QACAQ,EAAA,IAAAnwC,IACAowC,KAEAC,EAAAC,EAAAN,GACAO,EAAAD,EAAAL,GACAO,EAsHA,SAAAR,GACA,MAAAQ,KAEA,IAAA,MAAAC,KAAAT,EACAU,EAAAD,IACAD,EAAAxlD,KAAAylD,GAIA,OAAAD,EAAAxkD,OAAAwkD,EAAA,KA/HAG,CAAAX,GAEA,GAAAQ,EAAA,CAwBA,MAAAI,EAAA,6FAKA,OAFAzZ,GAAA3uC,MAAAooD,GAAyBZ,QAAAQ,IAEzBK,QAAAC,OAAA,IAAA9oD,EAAA4oD,GAAwDZ,QAAAQ,KAGxD,OAAAK,QAAAE,IAAAV,EAAAr+C,IAAAg/C,IACAC,KAAA,IAAAb,GAEA,SAAAY,EAAAlB,GACA,IAAAS,EAAA1lB,SAAAilB,KAKAI,EAAA3sD,IAAAusD,KAAAK,EAAA7gD,IAAAwgD,GAIA,OA4BA,SAAAA,GACA,OAAA,IAAAe,QAAAv5C,IACA64C,EAAAh3C,IAAA22C,GAEAA,EAAAoB,UACApB,EAAAoB,SAAArpD,QAAAspD,IACA,MAAAC,EAAAV,EAAAS,GAEA,GAAAlB,EAAAplB,SAAAumB,GAQA,MAAA,IAAAppD,EACA,2HAESqpD,OAAAD,EAAAE,WAAAxB,IAITkB,EAAAI,KAIA,MAAAC,EAAA,IAAAvB,EAAAL,GACAS,EAAAqB,KAAAzB,EAAAuB,GACAjB,EAAAplD,KAAAqmD,GAEA/5C,MA3DAk6C,CAAA1B,GACA2B,MAAAC,IAuBA,MAFAva,GAAA3uC,MAAA,kEAAmF6oD,OAAAvB,IAEnF4B,IAuCA,SAAAhB,EAAAiB,GACA,MAAA,mBAAAA,EACAA,EAGAzB,EAAAN,kBAAArsD,IAAAouD,GAeA,SAAArB,EAAAN,GACA,OAAAA,EACAh+C,IAAAy+C,GAAAC,EAAAD,IACAn+B,OAAAw9B,KAAAA,IASAlpD,UACA,MAAAgrD,EAAAnlD,MAAAC,KAAA3F,MACAiL,IAAA,EAAA,CAAA6/C,KAAAA,GACAv/B,OAAAu/B,GAAA,mBAAAA,EAAAlf,SACA3gC,IAAA6/C,GAAAA,EAAAlf,WAEA,OAAAke,QAAAE,IAAAa,GAUAhrD,KAAAkpD,EAAAuB,GACAtqD,KAAA8oD,SAAAziD,IAAA0iD,EAAAuB,GAEA,MAAAtB,EAAAD,EAAAC,WAEAA,IAIAhpD,KAAA8oD,SAAAvgD,IAAAygD,GAWA5Y,GAAAE,KACA,sFACK0Y,WAAAA,EAAA+B,QAAA/qD,KAAA8oD,SAAAtsD,IAAAwsD,GAAArpD,YAAAqrD,QAAAjC,IAGL/oD,KAAA8oD,SAAAziD,IAAA2iD,EAAAsB;;;;SC9QAW,GAIAprD,cAOAG,KAAAkrD,UAAA,IAAA9kD,IASAvG,IAAAsrD,EAAAC,GACAprD,KAAAkrD,UAAA7kD,IAAA8kD,EAAAC,GASAvrD,IAAAsrD,GACA,OAAAnrD,KAAAkrD,UAAA1uD,IAAA2uD,GAQAtrD,QAAAsrD,KAAA5nD,GACA,MAAA6nD,EAAAprD,KAAAxD,IAAA2uD,GAEA,IAAAC,EAOA,MAAA,IAAAnqD,EAAA,gEAA6FkqD,YAAAA,IAG7FC,EAAAC,WAAA9nD,GAQA1D,eACAG,KAAAkrD,UAAArqD,OAQAhB,kBACAG,KAAAkrD,UAAA77C,SAUAxP,CAAAoD,OAAAiU,YACA,OAAAlX,KAAAkrD,UAAAjoD,OAAAiU,YAMArX,UACA,IAAA,MAAAurD,KAAAprD,KAAAsrD,WACAF,EAAAxf;;;;GC5FA,IAAA2f,MA0CA,SAAAC,GAAAC,EAAAC,GACA,MAAAC,EAkCAvvD,OAAAyE,KAAA0qD,IAAAtmD,OA1BA,OANA,IAAA0mD,IAGAF,EAAArvD,OAAAyE,KAAA0qD,IAAA,IAGA,IAAAI,GASA,SAAAF,EAAAC,GACA,OACAD,KAAAF,IACAG,KAAAH,GAAAE,GAZAG,CAAAH,EAAAC,GAKAH,GAAAE,GAAAC,GAAA7hD,QAAA,wBAAA,IAJA6hD,EAAA7hD,QAAA,wBAAA,IA8BAvO,OAAAuwD,sBAAAvwD,OAAAuwD,0BACAvwD,OAAAuwD,sBAAAz5C,IA/DA,SAAAq5C,EAAAK,GACAP,GAAAE,GAAAF,GAAAE,OAEArvD,OAAAmiC,OAAAgtB,GAAAE,GAAAK;;;;;MCpBAC,GAMAlsD,YAAAmsD,GAOAhsD,KAAAgsD,SAAAA,GAAA,KAqBAhsD,KAAAisD,EAAA,KAAA1oD,IAAAvD,KAAAksD,MAAA3oD,IAQA1D,GAAAssD,EAAA98C,GACA,IAAA+8C,EAAAZ,GAAAxrD,KAAAgsD,SAAAG,GAQA,OANA98C,IACA+8C,EAAAA,EAAAviD,QAAA,UAAA,CAAAlI,EAAAqG,IACAA,EAAAqH,EAAApK,OAAAoK,EAAArH,GAAArG,IAIAyqD;;;;SC9BAC,GAIAxsD,cAUAG,KAAAssD,aAAA,IAAAlmD,IA6BAvG,IAAA2X,EAAA+0C,GACA,IAAAC,EAGAh1C,EAAAqE,GAAA,SAAArE,EAAAqE,GAAA,oBACA7b,KAAAssD,aAAAjmD,IAAAmR,GAAA,IAMAxX,KAAAssD,aAAA/jD,IAAAiP,GAIAg1C,EAAAxsD,KAAAssD,aAAA9vD,IAAAgb,IAHAg1C,EAAA,IAAAC,GACAzsD,KAAAssD,aAAAjmD,IAAAmR,EAAAg1C,IAKAA,EAAAp6C,IAAAm6C,IAgCA1sD,KAAA2X,EAAA+0C,GACA,MAAAC,EAAAxsD,KAAAssD,aAAA9vD,IAAAgb,GAEA,YAAAja,IAAAivD,EACA,KAIAh1C,EAAAqE,GAAA,SAAArE,EAAAqE,GAAA,oBACA2wC,EAIAA,EAAAziD,KAAAwiD,GA+BA1sD,QAAA2X,EAAA+0C,GACA,QAAAvsD,KAAA+J,KAAAyN,EAAA+0C,KACA/0C,EAAAqE,GAAA,SAAArE,EAAAqE,GAAA,oBAEA7b,KAAAssD,aAAAjmD,IAAAmR,GAAA,GAGAxX,KAAAssD,aAAA9vD,IAAAgb,GAAA+tC,QAAAgH,IAGA,GAkCA1sD,OAAA2X,EAAA+0C,GACA,MAAAC,EAAAxsD,KAAAssD,aAAA9vD,IAAAgb,QAEAja,IAAAivD,IACAh1C,EAAAqE,GAAA,SAAArE,EAAAqE,GAAA,oBAEA7b,KAAAssD,aAAAjmD,IAAAmR,GAAA,GAGAg1C,EAAAE,OAAAH,IAaA1sD,8BAAA2X,GACA,MAAA+0C,GACAtwD,MAAA,EACA4b,aACAN,SACAe,UAGA0B,EAAAxC,EAAAyY,mBAEA,IAAA,MAAApY,KAAAmC,EAEA,SAAAnC,GAAA,SAAAA,GAIA00C,EAAA10C,UAAA5T,KAAA4T,GAGA,MAAAK,EAAAV,EAAAW,gBAEA,IAAA,MAAAyB,KAAA1B,EACAq0C,EAAAh1C,MAAAtT,KAAA2V,GAGA,MAAAG,EAAAvC,EAAAyf,gBAEA,IAAA,MAAA3e,KAAAyB,EACAwyC,EAAAj0C,MAAArU,KAAAqU,GAGA,OAAAi0C,EAcA1sD,kBAAA8F,EAAAgnD,GAKA,GAJAA,IACAA,EAAA,IAAAN,IAGA1mD,EAAAkW,GAAA,QAGA,OAFA8wC,EAAAv6C,IAAAzM,GAEAgnD,EAIAhnD,EAAAkW,GAAA,YACA8wC,EAAAv6C,IAAAzM,EAAA0mD,GAAAO,uBAAAjnD,IAGAA,EAAAkW,GAAA,qBACA8wC,EAAAv6C,IAAAzM,GAGA,IAAA,MAAAwU,KAAAxU,EAAAyU,cACAuyC,EAAAN,GAAAQ,WAAA1yC,EAAAwyC,GAGA,OAAAA,SAUAF,GAIA5sD,cAOAG,KAAA8sD,gBAAA,KAQA9sD,KAAAssD,cACAz0C,UAAA,IAAAzR,IACAkS,MAAA,IAAAlS,IACAmR,MAAA,IAAAnR,KAyBAvG,IAAA0sD,GACAA,EAAAtwD,OACA+D,KAAA8sD,iBAAA,GAGA,IAAA,MAAAhkD,KAAA9I,KAAAssD,aACAxjD,KAAAyjD,GACAvsD,KAAAwqD,KAAA1hD,EAAAyjD,EAAAzjD,IAyBAjJ,KAAA0sD,GAEA,GAAAA,EAAAtwD,OAAA+D,KAAA8sD,gBACA,OAAA9sD,KAAA8sD,gBAGA,IAAA,MAAAhkD,KAAA9I,KAAAssD,aACA,GAAAxjD,KAAAyjD,EAAA,CACA,MAAA7vD,EAAAsD,KAAA+sD,MAAAjkD,EAAAyjD,EAAAzjD,IAEA,IAAA,IAAApM,EACA,OAAAA,EAMA,OAAA,EAqBAmD,QAAA0sD,GACAA,EAAAtwD,OACA+D,KAAA8sD,iBAAA,GAGA,IAAA,MAAAhkD,KAAA9I,KAAAssD,aACAxjD,KAAAyjD,GACAvsD,KAAAgtD,SAAAlkD,EAAAyjD,EAAAzjD,IAsBAjJ,OAAA0sD,GACAA,EAAAtwD,OACA+D,KAAA8sD,iBAAA,GAGA,IAAA,MAAAhkD,KAAA9I,KAAAssD,aACAxjD,KAAAyjD,GACAvsD,KAAAitD,QAAAnkD,EAAAyjD,EAAAzjD,IAeAjJ,KAAAiJ,EAAAwO,GACA,MAAAkD,EAAA7M,GAAA2J,GAAAA,GAAAA,GACAi1C,EAAAvsD,KAAAssD,aAAAxjD,GAEA,IAAA,MAAA7M,KAAAue,EAAA,CACA,GAAA,cAAA1R,IAAA,UAAA7M,GAAA,UAAAA,GAeA,MAAA,IAAAgF,EAAA,sFAGAsrD,EAAAlmD,IAAApK,GAAA,IAaA4D,MAAAiJ,EAAAwO,GACA,MAAAkD,EAAA7M,GAAA2J,GAAAA,GAAAA,GACAi1C,EAAAvsD,KAAAssD,aAAAxjD,GAEA,IAAA,MAAA7M,KAAAue,EACA,GAAA,cAAA1R,GAAA,UAAA7M,GAAA,UAAAA,EAOI,CACJ,MAAAS,EAAA6vD,EAAA/vD,IAAAP,GAEA,QAAAsB,IAAAb,EACA,OAAA,KAGA,IAAAA,EACA,OAAA,MAfA,CAEA,MAAAA,EAAAsD,KAAA+sD,MAAA9wD,MAAA+D,KAAAssD,aAAArwD,GAAA4E,SAEA,IAAA,IAAAnE,EACA,OAAAA,EAeA,OAAA,EAUAmD,SAAAiJ,EAAAwO,GACA,MAAAkD,EAAA7M,GAAA2J,GAAAA,GAAAA,GACAi1C,EAAAvsD,KAAAssD,aAAAxjD,GAEA,IAAA,MAAA7M,KAAAue,EACA,cAAA1R,GAAA,UAAA7M,GAAA,UAAAA,EAIAswD,EAAAlmD,IAAApK,GAAA,GAFA+D,KAAAgtD,SAAA/wD,MAAA+D,KAAAssD,aAAArwD,GAAA4E,SAcAhB,QAAAiJ,EAAAwO,GACA,MAAAkD,EAAA7M,GAAA2J,GAAAA,GAAAA,GACAi1C,EAAAvsD,KAAAssD,aAAAxjD,GAEA,IAAA,MAAA7M,KAAAue,EACA,GAAA,cAAA1R,GAAA,UAAA7M,GAAA,UAAAA,EAGI,EAGJ,IAFAswD,EAAA/vD,IAAAP,IAGAswD,EAAAlmD,IAAApK,GAAA,QALA+D,KAAAitD,QAAAhxD,MAAA+D,KAAAssD,aAAArwD,GAAA4E;;;;SC/YAqsD,GAIArtD,cACAG,KAAAmtD,sBAEAntD,KAAAotD,SAAA,cACAptD,KAAAotD,SAAA,kBAEAptD,KAAA2gB,GAAA,iBAAA,CAAAC,EAAArd,KACAA,EAAA,GAAA,IAAA8pD,GAAA9pD,EAAA,MACMb,SAAA,YAEN1C,KAAA2gB,GAAA,aAAA,CAAAC,EAAArd,KACAA,EAAA,GAAA,IAAA8pD,GAAA9pD,EAAA,IACAA,EAAA,GAAAvD,KAAAstD,cAAA/pD,EAAA,MACMb,SAAA,YAaN7C,SAAA0tD,EAAAC,GACA,GAAAxtD,KAAAmtD,mBAAAI,GAEA,MAAA,IAAAtsD,EAAA,8FACAssD,SAAAA,IAIAvtD,KAAAmtD,mBAAAI,IACAnxD,OAAAmiC,UAAoBivB,IAGpBxtD,KAAAytD,cA2BA5tD,OAAA0tD,EAAAC,GACA,IAAAxtD,KAAAmtD,mBAAAI,GAEA,MAAA,IAAAtsD,EAAA,0FACAssD,SAAAA,IAIAvtD,KAAAmtD,mBAAAI,GAAAtpD,KAAA7H,OAAAmiC,UAA6DivB,IAE7DxtD,KAAAytD,cAQA5tD,iBAKA,OAJAG,KAAA0tD,sBACA1tD,KAAA2tD,WAGA3tD,KAAA0tD,qBASA7tD,cAAAyX,GACA,IAAAi2C,EAYA,OATAA,EADA,iBAAAj2C,EACAA,EACGA,EAAAuE,KAAAvE,EAAAuE,GAAA,SAAAvE,EAAAuE,GAAA,cACH,QAIAvE,EAAArb,KAGA+D,KAAA4tD,iBAAAL,GAYA1tD,aAAAyX,GACA,QAAAtX,KAAAstD,cAAAh2C,GAeAzX,QAAAyX,GACA,MAAAu2C,EAAA7tD,KAAAstD,cAAAh2C,GAEA,SAAAu2C,IAAAA,EAAAzM,SAaAvhD,QAAAyX,GACA,MAAAu2C,EAAA7tD,KAAAstD,cAAAh2C,GAEA,SAAAu2C,IAAAA,EAAAC,SAeAjuD,SAAAyX,GACA,MAAAu2C,EAAA7tD,KAAAstD,cAAAh2C,GAEA,SAAAu2C,IAAAA,EAAAhJ,UAiBAhlD,WAAAkuD,EAAAF,GAEA,QAAAA,GAIA7tD,KAAAguD,mBAAAH,EAAAE,GAkBAluD,eAAAkuD,EAAAE,GACA,MAAAJ,EAAA7tD,KAAAstD,cAAAS,EAAAtlC,MAEA,QAAAolC,GAIAA,EAAAK,gBAAApqB,SAAAmqB,GAmBApuD,WAAAsuD,EAAAC,EAAA,MACA,GAAAD,aAAAlV,GAAA,CACA,MAAAl0B,EAAAopC,EAAAppC,WACAD,EAAAqpC,EAAArpC,UAEA,KAAAC,aAAA0zB,IAMA,MAAA,IAAAx3C,EAAA,gGAGA,KAAA6jB,aAAA2zB,IAMA,MAAA,IAAAx3C,EAAA,8FAGA,OAAAjB,KAAAquD,WAAAtpC,EAAAD,GAGA,IAAA,MAAA3K,KAAAi0C,EAAAh0C,cACA,IAAApa,KAAAsuD,WAAAH,EAAAh0C,GACA,OAAA,EAIA,OAAA,EA0CAta,cAAAuD,GACApD,KAAA2gB,GAAA,aAAA,CAAAC,GAAAyK,EAAAkjC,MAIA,IAAAA,EACA,OAGA,MAAAC,EAAAprD,EAAAioB,EAAAkjC,GAEA,kBAAAC,IACA5tC,EAAA3e,OACA2e,EAAA3a,OAAAuoD,KAEM9rD,SAAA,SA0CN7C,kBAAAuD,GACApD,KAAA2gB,GAAA,iBAAA,CAAAC,GAAAyK,EAAA4iC,MACA,MAAAO,EAAAprD,EAAAioB,EAAA4iC,GAEA,kBAAAO,IACA5tC,EAAA3e,OACA2e,EAAA3a,OAAAuoD,KAEM9rD,SAAA,SAUN7C,gBAAA0iB,GAEA,IAAA/K,EAAA9R,MAAAC,KAAA4c,EAAA2G,aACAoD,OAAA,CAAA9U,EAAA2P,KACA,MAAAsnC,EAAAtnC,EAAAH,oBAEA,OAAAxP,EAIAA,EAAAwP,kBAAAynC,GAA4D74C,aAAA,IAH5D64C,GAII,MAEJ,MAAAzuD,KAAA8tD,QAAAt2C,IACAA,EAAAnC,QACAmC,EAAAA,EAAAnC,OAMA,OAAAmC,EAcA3X,0BAAA0iB,EAAA1K,GACA,GAAA0K,EAAAuD,YAEA,OAAA9lB,KAAA0uD,mBAAAnsC,EAAA0S,mBAAAjf,eAAA,SAAA6B,GACG,CACH,MAAA8O,EAAApE,EAAA2G,YAGA,IAAA,MAAA/B,KAAAR,EACA,IAAA,MAAAjqB,KAAAyqB,EACA,GAAAnnB,KAAA0uD,eAAAhyD,EAAA4a,KAAAO,GAEA,OAAA,EAOA,OAAA,EAUAhY,eAAA8mB,EAAA9O,GACA,MAAA82C,KAEA,IAAA,MAAAxnC,KAAAR,EAAA,CACA,IAAA8B,EAAAtB,EAAA7J,MACA3X,EAAAwhB,EAAA7J,MACA,MAAApX,EAAAihB,EAAA1D,IAEA,IAAA,MAAA/mB,KAAAyqB,EAAAsN,YACAz0B,KAAA0uD,eAAAhyD,EAAA4a,KAAAO,KACAlS,EAAA8e,QAAAgE,IACAkmC,EAAA1qD,KAAA,IAAAq2C,GAAA30C,EAAA8iB,IAGA9iB,EAAAjJ,EAAA8nB,cAGAiE,EAAA/rB,EAAA8nB,aAGA7e,IAAAA,EAAA8e,QAAAve,IACAyoD,EAAA1qD,KAAA,IAAAq2C,GAAA30C,EAAAO,IAIA,OAAAyoD,EAsBA9uD,yBAAAojB,EAAAD,EAAA,QAEA,GAAAhjB,KAAAsuD,WAAArrC,EAAA,SACA,OAAA,IAAAq3B,GAAAr3B,GAGA,IAAA2rC,EAAAC,EAEA,QAAA7rC,GAAA,YAAAA,IACA4rC,EAAA,IAAA5V,IAAqCj2B,cAAAE,EAAAD,UAAA,cAGrC,QAAAA,GAAA,WAAAA,IACA6rC,EAAA,IAAA7V,IAAoCj2B,cAAAE,KAGpC,IAAA,MAAA7hB,KAwyBA,UAAAsoB,EAAAolC,GACA,IAAA5wC,GAAA,EAEA,MAAAA,GAAA,CAGA,GAFAA,GAAA,EAEAwL,EAAA,CACA,MAAAqlC,EAAArlC,EAAAzL,OAEA8wC,EAAA7wC,OACAA,GAAA,QAEAsW,OAAA9K,EACAhtB,MAAAqyD,EAAAryD,QAKA,GAAAoyD,EAAA,CACA,MAAAC,EAAAD,EAAA7wC,OAEA8wC,EAAA7wC,OACAA,GAAA,QAEAsW,OAAAs6B,EACApyD,MAAAqyD,EAAAryD;;;;GAj0BAsyD,CAAAJ,EAAAC,GAAA,CACA,MAAA/lD,EAAA1H,EAAAozB,QAAAo6B,EAAA,aAAA,eACAlyD,EAAA0E,EAAA1E,MAEA,GAAAA,EAAAoM,MAAAA,GAAA9I,KAAA6kD,SAAAnoD,EAAA4a,MACA,OAAAgjC,GAAA1wB,SAAAltB,EAAA4a,MAGA,GAAAtX,KAAAsuD,WAAA5xD,EAAA8nB,aAAA,SACA,OAAA,IAAA81B,GAAA59C,EAAA8nB,cAIA,OAAA,KAaA3kB,kBAAA6E,EAAAue,GACA,IAAA5N,EAAA4N,EAAA5N,OAEA,KAAAA,GAAA,CACA,GAAArV,KAAAsuD,WAAAj5C,EAAA3Q,GACA,OAAA2Q,EAIA,GAAArV,KAAA8tD,QAAAz4C,IAAArV,KAAA6kD,SAAAxvC,GACA,OAAA,KAGAA,EAAAA,EAAAA,OAGA,OAAA,KASAxV,2BAAA6a,EAAAiS,GACA,IAAA,MAAAjoB,KAAAgW,EAAA,CACA,IAAA,MAAA7C,KAAAnT,EAAAurB,mBACAjwB,KAAA0uD,eAAAhqD,EAAAmT,IACA8U,EAAA0K,gBAAAxf,EAAAnT,GAIAA,EAAAmX,GAAA,YACA7b,KAAAivD,2BAAAvqD,EAAA0V,cAAAuS,IAQA9sB,cACAG,KAAA0tD,qBAAA,KAMA7tD,WACA,MAAAqvD,KACAC,EAAAnvD,KAAAmtD,mBACAiC,EAAAhzD,OAAAyE,KAAAsuD,GAEA,IAAA,MAAA5B,KAAA6B,EACAF,EAAA3B,GAAA8B,GAAAF,EAAA5B,GAAAA,GAGA,IAAA,MAAAA,KAAA6B,EACAE,GAAAJ,EAAA3B,GAGA,IAAA,MAAAA,KAAA6B,EACAG,GAAAL,EAAA3B,GAGA,IAAA,MAAAA,KAAA6B,EACAI,GAAAN,EAAA3B,GACAkC,GAAAP,EAAA3B,GAGA,IAAA,MAAAA,KAAA6B,EACAM,GAAAR,EAAA3B,GACAoC,GAAAT,EAAA3B,GAGAvtD,KAAA0tD,qBAAAwB,EASArvD,mBAAAguD,EAAAE,EAAA6B,EAAA7B,EAAA9oD,OAAA,GACA,MAAA4qD,EAAA9B,EAAA+B,QAAAF,GAEA,GAAA/B,EAAAkC,QAAAjsB,SAAA+rB,EAAA5zD,MAAA,CACA,GAAA,GAAA2zD,EACA,OAAA,EACI,CACJ,MAAAI,EAAAhwD,KAAAstD,cAAAuC,GAEA,OAAA7vD,KAAAguD,mBAAAgC,EAAAjC,EAAA6B,EAAA,IAGA,OAAA,GAKA5oD,EAAAkmD,GAAArsC,UAuRAwsC,GAMAxtD,YAAAkuD,GACA,GAAAA,aAAAV,GACA,OAAAU,EAGA,iBAAAA,EACAA,GAAAA,GACGroD,MAAAkI,QAAAmgD,KAGHA,EAAAA,EAAA/3C,cAAoCJ,aAAA,KAGpCm4C,EAAA,IAAA,iBAAAA,EAAA,IAAAA,EAAA,GAAAlyC,GAAA,qBACAkyC,EAAA7oC,QAGAllB,KAAAuqB,OAAAwjC,EAAA9iD,IAAAglD,IAQAhrD,aACA,OAAAjF,KAAAuqB,OAAAtlB,OAQAwjB,WACA,OAAAzoB,KAAAuqB,OAAAvqB,KAAAuqB,OAAAtlB,OAAA,GAUApF,CAAAoD,OAAAiU,YACA,OAAAlX,KAAAuqB,OAAAtnB,OAAAiU,YA2BArX,KAAAyX,GACA,MAAA+T,EAAA,IAAAgiC,IAAA/1C,IAIA,OAFA+T,EAAAd,WAAAvqB,KAAAuqB,UAAAc,EAAAd,QAEAc,EAQAxrB,QAAAmI,GACA,OAAAhI,KAAAuqB,OAAAviB,GAQAnI,kBACAG,KAAAuqB,OAAAtf,IAAAqM,GAAAA,EAAArb,MAgBA4D,SAAAqwD,GACA,OAAAxqD,MAAAC,KAAA3F,KAAAmwD,YAAA12C,KAAA,KAAA22C,SAAAF,IAkGA,SAAAb,GAAAgB,EAAA9C,GACA,MAAA+C,GACAr0D,KAAAsxD,EAEAwC,WACAQ,kBACAC,cAEAtC,mBACAuC,qBAEAC,qBAgBA,OAkFA,SAAAL,EAAAC,GACA,IAAA,MAAAK,KAAAN,EAAA,CACA,MAAAO,EAAAx0D,OAAAyE,KAAA8vD,GAAAplC,OAAAtvB,GAAAA,EAAAgnD,WAAA,OAEA,IAAA,MAAAhnD,KAAA20D,EACAN,EAAAr0D,GAAA00D,EAAA10D,IApGA40D,CAAAR,EAAAC,GAEAQ,GAAAT,EAAAC,EAAA,WACAQ,GAAAT,EAAAC,EAAA,kBACAQ,GAAAT,EAAAC,EAAA,cAEAQ,GAAAT,EAAAC,EAAA,mBACAQ,GAAAT,EAAAC,EAAA,qBAEAQ,GAAAT,EAAAC,EAAA,oBA0GA,SAAAD,EAAAC,GACA,IAAA,MAAAK,KAAAN,EAAA,CACA,MAAAU,EAAAJ,EAAAK,eAEAD,IACAT,EAAAC,eAAAtsD,KAAA8sD,GACAT,EAAAE,WAAAvsD,KAAA8sD,GACAT,EAAAG,kBAAAxsD,KAAA8sD,GACAT,EAAAI,iBAAAzsD,KAAA8sD,KAhHAE,CAAAZ,EAAAC,GAEAA,EAGA,SAAAhB,GAAAJ,EAAA3B,GACA,IAAA,MAAA2D,KAAAhC,EAAA3B,GAAAgD,eAEA,GAAArB,EAAAgC,GAAA,CACAC,GAAAjC,EAAAgC,GAEApwD,QAAAswD,IACAA,EAAArB,QAAA9rD,KAAAspD,YAKA2B,EAAA3B,GAAAgD,eAGA,SAAAhB,GAAAL,EAAA3B,GACA,IAAA,MAAA8D,KAAAnC,EAAA3B,GAAAiD,WAAA,CACA,MAAAO,EAAA7B,EAAAmC,GAGA,GAAAN,EAAA,CACA,MAAAO,EAAAP,EAAAhB,QAEAb,EAAA3B,GAAAwC,QAAA9rD,QAAAqtD,WAIApC,EAAA3B,GAAAiD,WAGA,SAAAhB,GAAAN,EAAA3B,GACA,IAAA,MAAAgE,KAAArC,EAAA3B,GAAAkD,kBAAA,CACA,MAAAM,EAAA7B,EAAAqC,GAEA,GAAAR,EAAA,CACA,MAAAS,EAAAT,EAAA7C,gBAEAgB,EAAA3B,GAAAW,gBAAAjqD,QAAAutD,WAIAtC,EAAA3B,GAAAkD,kBAGA,SAAAhB,GAAAP,EAAA3B,GACA,MAAAj2C,EAAA43C,EAAA3B,GAEA,IAAA,MAAAkE,KAAAn6C,EAAAo5C,iBAAA,CACA,MAAAK,EAAA7B,EAAAuC,GAEA,GAAAV,EAAA,CACA,MAAAH,EAAAx0D,OAAAyE,KAAAkwD,GAAAxlC,OAAAtvB,GAAAA,EAAAgnD,WAAA,OAEA,IAAA,MAAAhnD,KAAA20D,EACA30D,KAAAqb,IACAA,EAAArb,GAAA80D,EAAA90D,YAMAqb,EAAAo5C,iBAKA,SAAAhB,GAAAR,EAAA3B,GACA,MAAA+C,EAAApB,EAAA3B,GACAmE,EAAApB,EAAAP,QAAAxkC,OAAAomC,GAAAzC,EAAAyC,IAEArB,EAAAP,QAAArqD,MAAAC,KAAA,IAAAsT,IAAAy4C,IAGA,SAAA/B,GAAAT,EAAA3B,GACA,MAAA+C,EAAApB,EAAA3B,GAEA+C,EAAApC,gBAAAxoD,MAAAC,KAAA,IAAAsT,IAAAq3C,EAAApC,kBAaA,SAAA4C,GAAAT,EAAAC,EAAAn1C,GACA,IAAA,MAAAw1C,KAAAN,EACA,iBAAAM,EAAAx1C,GACAm1C,EAAAn1C,GAAAlX,KAAA0sD,EAAAx1C,IACGzV,MAAAkI,QAAA+iD,EAAAx1C,KACHm1C,EAAAn1C,GAAAlX,QAAA0sD,EAAAx1C,IAkBA,SAAAg2C,GAAAjC,EAAA3B,GACA,MAAA+C,EAAApB,EAAA3B,GAEA,OAGAv2C,EAHAk4C,EAIA9yD,OAAAyE,KAAAmW,GAAA/L,IAAAlK,GAAAiW,EAAAjW,KAJAwqB,OAAAsiC,GAAAA,EAAAkC,QAAAjsB,SAAAwsB,EAAAr0D,OAGA,IAAA+a,EAIA,SAAAi5C,GAAA2B,GACA,MAAA,iBAAAA,GAEA31D,KAAA21D,EAEA/xD,sBAEAA,mBAKA5D,KAAA21D,EAAA/1C,GAAA,WAAA+1C,EAAA31D,KAAA,QAEA4D,0BACA+xD,EAAA3hC,oBAGAjY,aAAAjX,GACA6wD,EAAA55C,aAAAjX,UCh4CA8wD,GAQAhyD,YAAAu+C,MAUAp+C,KAAA8xD,eAAA,IAAA74C,IAUAjZ,KAAA+xD,aAAA,KAOA/xD,KAAAo+C,cAAAhiD,OAAAmiC,UAAwC6f,GAIxCp+C,KAAAo+C,cAAA4T,YAAAhyD,KAAAiyD,aAAA5vC,KAAAriB,MACAA,KAAAo+C,cAAA8T,gBAAAlyD,KAAAmyD,iBAAA9vC,KAAAriB,MACAA,KAAAo+C,cAAAgU,qBAAApyD,KAAAqyD,sBAAAhwC,KAAAriB,MAiBAH,QAAAyyD,EAAA3lC,EAAAohC,GAAA,UACA/tD,KAAA+G,KAAA,cAAAurD,GAIAtyD,KAAA+xD,aAwPA,SAAAQ,EAAA5lC,GACA,IAAA1J,EAEA,IAAA,MAAA3L,KAAA,IAAA+1C,GAAAkF,GAAA,CACA,MAAAv4C,KAEA,IAAA,MAAAjZ,KAAAuW,EAAA2Y,mBACAjW,EAAAjZ,GAAAuW,EAAAU,aAAAjX,GAGA,MAAA2zB,EAAA/H,EAAAqD,cAAA1Y,EAAArb,KAAA+d,GAEAiJ,GACA0J,EAAA6lC,OAAA99B,EAAAzR,GAGAA,EAAAg2B,GAAA1xB,SAAAmN,GAGA,OAAAzR;;;;GA3QAwvC,CAAA1E,EAAAphC,GAIA3sB,KAAAo+C,cAAAzxB,OAAAA,EAGA3sB,KAAAo+C,cAAAY,WAAAqN,GAAAQ,WAAAyF,GAGAtyD,KAAAo+C,cAAAsU,SAGA,MAAA5V,WAASA,GAAa98C,KAAAiyD,aAAAK,EAAAtyD,KAAA+xD,cAGtBY,EAAAhmC,EAAA+T,yBAGA,GAAAoc,EAAA,CAEA98C,KAAA4yD,uBAGA,IAAA,MAAAt7C,KAAA5R,MAAAC,KAAA3F,KAAA+xD,aAAA18C,OAAA+E,eACAuS,EAAA6lC,OAAAl7C,EAAAq7C,GAIAA,EAAAtT,QAuLA,SAAAwT,EAAAlmC,GACA,MAAAmmC,EAAA,IAAA75C,IACAomC,EAAA,IAAAj5C,IAGA+gB,EAAAmzB,GAAA3wB,SAAAkpC,GAAA/S,WAGA,IAAA,MAAAxoC,KAAA6P,EAEA,WAAA7P,EAAArb,MACA62D,EAAA1gD,IAAAkF,GAKA,IAAA,MAAAy7C,KAAAD,EAAA,CACA,MAAAjT,EAAAkT,EAAA/6C,aAAA,aACAg7C,EAAA/Z,GAAA30B,aAAAyuC,GAGA1T,EAAA92C,IAAAs3C,GAIAR,EAAA7iD,IAAAqjD,GAAAp8B,IAAAw1B,GAAA91B,mBAAA6vC,GAHA3T,EAAAh5C,IAAAw5C,EAAA,IAAAvF,GAAArB,GAAA91B,mBAAA6vC,KAOArmC,EAAAlB,OAAAsnC,GAGA,OAAA1T,EAvNA4T,CAAAN,EAAAhmC,GAcA,OAVA3sB,KAAA+xD,aAAA,KAGA/xD,KAAA8xD,eAAAvrD,QAGAvG,KAAAo+C,cAAAzxB,OAAA,KACA3sB,KAAAo+C,cAAAsU,MAAA,KAGAC,EAOA9yD,aAAAyyD,EAAAY,GACA,MAAA9xD,EAAAhF,OAAAmiC,QAA+B+zB,SAAAA,EAAAY,YAAAA,EAAApW,WAAA,OAW/B,GATAwV,EAAAz2C,GAAA,WACA7b,KAAA+G,KAAA,WAAAurD,EAAAr2D,KAAAmF,EAAApB,KAAAo+C,eACGkU,EAAAz2C,GAAA,QACH7b,KAAA+G,KAAA,OAAA3F,EAAApB,KAAAo+C,eAEAp+C,KAAA+G,KAAA,mBAAA3F,EAAApB,KAAAo+C,eAIAh9C,EAAA07C,cAAA17C,EAAA07C,sBAAAxC,IAQA,MAAA,IAAAr5C,EAAA,yFAGA,OAAU67C,WAAA17C,EAAA07C,WAAAoW,YAAA9xD,EAAA8xD,aAOVrzD,iBAAAyyD,EAAAY,GACA,MAAApW,EAAA,IAAAxC,GAAA4Y,GACA,IAAAC,EAAAD,EAEA,IAAA,MAAAjxB,KAAAv8B,MAAAC,KAAA2sD,EAAAl4C,eAAA,CACA,MAAAtb,EAAAkB,KAAAiyD,aAAAhwB,EAAAkxB,GAEAr0D,EAAAg+C,sBAAAxC,KACAwC,EAAAr5B,IAAA3kB,EAAAg+C,WAAAr5B,IACA0vC,EAAAr0D,EAAAo0D,aAIA,OAAUpW,WAAAA,EAAAoW,YAAAC,GAOVtzD,sBAAA6E,EAAAwuD,GAEA,MAAAE,EAAApzD,KAAAo+C,cAAA+C,OAAAkS,kBAAA3uD,EAAAwuD,GAGA,IAAAE,EACA,OAAA,KAIA,GAAAA,IAAAF,EAAA79C,OACA,OAAW4N,SAAAiwC,GAIX,GAAAlzD,KAAA+xD,aAAA18C,OAAAW,eAAA8tB,SAAAsvB,GACA,OAAA,KAIA,MAAAE,EAAAtzD,KAAAo+C,cAAAzxB,OAAAnsB,MAAA0yD,EAAAE,GAOA,IAAA,MAAAnwC,KAAAqwC,EAAAnsC,MAAAosC,eACAtwC,EAAAwB,QAAA6uC,EAAArwC,WACAjjB,KAAA8xD,eAAA1/C,IAAA6Q,EAAA5N,QAIA,OACA4N,SAAAqwC,EAAArwC,SACAuwC,aAAAF,EAAAnsC,MAAA1D,IAAApO,QAYAxV,uBACA,IAAAy0B,GAAA,EAEA,IAAA,MAAA9c,KAAAxX,KAAA8xD,eACAt6C,EAAAgC,UACAxZ,KAAAo+C,cAAAzxB,OAAAlB,OAAAjU,GACAxX,KAAA8xD,eAAAxrD,OAAAkR,GACA8c,GAAA,GAIAA,GACAt0B,KAAA4yD,wBCnQA,SAAAa,GAAArO,GAGA,MAAAsO,EA6OA,SAAAtO,GACA,MAAAvrC,EAAA,IAAA1C,GAAAiuC,EAAAh1B,MAEA,MAAA,CAAAxP,EAAAxf,EAAAg9C,KAEA,MAAAz8C,EAAAkY,EAAAlY,MAAAP,EAAAkxD,UAGA,IAAA3wD,EACA,OAIAA,EAAAA,MAAA1F,MAAA,EAGA,MAAAygD,GA+DAwE,EA/DAkE,EAAAlE,MA+DAtwC,EA/DAxP,EAAAkxD,SA+DA3lC,EA/DAyxB,EAAAzxB,OAgEAu0B,aAAAljD,SACAkjD,EAAAtwC,EAAA+b,GAEAA,EAAAqD,cAAAkxB,IAhEA,IAAAxE,EACA,OAIA,IAAA0B,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,SAAA3wD,EAAAA,OACA,OAMA,MAAA2xD,EAAAlV,EAAAgU,qBAAA1V,EAAAt7C,EAAA8xD,aAGA,IAAAI,EACA,OAIAlV,EAAAzxB,OAAAmG,OAAA4pB,EAAA4W,EAAArwC,UAGA,MAAA0wC,EAAAvV,EAAA8T,gBAAA9wD,EAAAkxD,SAAArZ,GAAA1xB,SAAAm1B,IAGA0B,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,SAAA3wD,EAAAA,OAGAP,EAAA07C,WAAA,IAAAxC,GAEArB,GAAA30B,aAAAo4B,GAKAzD,GAAAj1B,YAAA2vC,EAAAT,YAAA79C,SAQAi+C,EAAAE,aACApyD,EAAA8xD,YAAAja,GAAA1xB,SAAA+rC,EAAAE,cAIApyD,EAAA8xD,YAAA9xD,EAAA07C,WAAAr5B,KAWA,IAAAy9B,EAAAtwC,EAAA+b,EA5TAinC,CAFAxO,EAAAF,GAAAE,IAIAyO,EAAAC,GAAA1O,GACAlhD,EAAA2vD,EAAA,WAAAA,EAAA,UAEA,OAAAxV,IACAA,EAAA19B,GAAAzc,EAAAwvD,GAAwChxD,SAAA0iD,EAAA1iD,UAAA,YAqExC,SAAAqxD,GAAA3O,GAGA4O,GAFA5O,EAAAF,GAAAE,IAIA,MAAAsO,EAAAO,GAAA7O,GAAA,GAEAyO,EAAAC,GAAA1O,GACAlhD,EAAA2vD,EAAA,WAAAA,EAAA,UAEA,OAAAxV,IACAA,EAAA19B,GAAAzc,EAAAwvD,GAAwChxD,SAAA0iD,EAAA1iD,UAAA,YAoExC,SAAAwxD,GAAA9O,GAGA,IAAA+O,EAAA,MAEA,iBAJA/O,EAAAF,GAAAE,IAIAh1B,MAAAg1B,EAAAh1B,KAAArvB,OACAozD,EA0KA,SAAA/O,GACA,iBAAAA,EAAAh1B,OACAg1B,EAAAh1B,MAAiBrvB,IAAAqkD,EAAAh1B,OAGjB,MAAArvB,EAAAqkD,EAAAh1B,KAAArvB,IACA,IAAAqzD,EAEA,GAAA,SAAArzD,GAAA,SAAAA,EACAqzD,GACAv0D,CAAAkB,GAAAqkD,EAAAh1B,KAAA1zB,WAEE,CACF,MAAAA,OAAA,IAAA0oD,EAAAh1B,KAAA1zB,MAAA,UAAA0oD,EAAAh1B,KAAA1zB,MAEA03D,GACAv8C,WACAhY,CAAAkB,GAAArE,IAKA0oD,EAAAh1B,KAAAn0B,OACAm4D,EAAAn4D,KAAAmpD,EAAAh1B,KAAAn0B,MAKA,OAFAmpD,EAAAh1B,KAAAgkC,EAEArzD,EAtMAszD,CAAAjP,IAGA4O,GAAA5O,EAAA+O,GAEA,MAAAT,EAAAO,GAAA7O,GAAA,GAEA,OAAA/G,IACAA,EAAA19B,GAAA,UAAA+yC,GAAwChxD,SAAA0iD,EAAA1iD,UAAA,SAqDxC,SAAAoxD,GAAA1O,GACA,MAAA,iBAAAA,EAAAh1B,KACAg1B,EAAAh1B,KAGA,iBAAAg1B,EAAAh1B,MAAA,iBAAAg1B,EAAAh1B,KAAAn0B,KACAmpD,EAAAh1B,KAAAn0B,KAGA,KA0IA,SAAA+3D,GAAA5O,EAAAkP,EAAA,MACA,MAAAC,EAAA,OAAAD,GAAA/+B,CAAAA,GAAAA,EAAAvd,aAAAs8C,IAEAvzD,EAAA,iBAAAqkD,EAAAlE,MAAAkE,EAAAlE,MAAAkE,EAAAlE,MAAAngD,IACArE,EAAA,iBAAA0oD,EAAAlE,MAAAqT,EAAAnP,EAAAlE,MAAAxkD,MAEA0oD,EAAAlE,OAAiBngD,IAAAA,EAAArE,MAAAA,GAUjB,SAAAu3D,GAAA7O,EAAAoP,GACA,MAAA36C,EAAA,IAAA1C,GAAAiuC,EAAAh1B,MAEA,MAAA,CAAAxP,EAAAxf,EAAAg9C,KACA,MAAAz8C,EAAAkY,EAAAlY,MAAAP,EAAAkxD,UAGA,IAAA3wD,EACA,OAGA,MAAA8jD,EAAAL,EAAAlE,MAAAngD,IACA2kD,EAAA,mBAAAN,EAAAlE,MAAAxkD,MAAA0oD,EAAAlE,MAAAxkD,MAAA0E,EAAAkxD,UAAAlN,EAAAlE,MAAAxkD,MAGA,OAAAgpD,IAIA8O,EAIA7yD,EAAAA,MAAA1F,MAAA,SAFA0F,EAAAA,MAAA1F,KAMAmiD,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,SAAA3wD,EAAAA,SAMAP,EAAA07C,aAEA17C,EAAAhF,OAAAmiC,OAAAn9B,EAAAg9C,EAAA8T,gBAAA9wD,EAAAkxD,SAAAlxD,EAAA8xD,eAmBA,SAAApW,EAAA2X,EAAArW,GACA,IAAAt/C,GAAA,EAGA,IAAA,MAAA4F,KAAAgB,MAAAC,KAAAm3C,EAAAgD,YACA1B,EAAA+C,OAAAuN,eAAAhqD,EAAA+vD,EAAA1zD,OACAq9C,EAAAzxB,OAAAuD,aAAAukC,EAAA1zD,IAAA0zD,EAAA/3D,MAAAgI,GAEA5F,GAAA,GAIA,OAAAA,EA3BA41D,CAAAtzD,EAAA07C,YAA6D/7C,IAAA0kD,EAAA/oD,MAAAgpD,GAAmCtH,IAGhGA,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,SAAA3wD,EAAAA,UD5HAqF,EAAA6qD,GAAAx7C;;;;;MEnUAs+C,GAQA90D,YAAAqhD,EAAA0T,GAOA50D,KAAAkhD,MAAAA,EAQAlhD,KAAA60D,UAAAD,EAUA50D,KAAAg9C,OAAA,IAAAjB,GAQA/7C,KAAAwnD,mBAAA,IAAArJ,IACAnB,OAAAh9C,KAAAg9C,SAEAh9C,KAAAwnD,mBAAA7mC,GAAA,eZyYA,CAAAC,EAAAxf,EAAAg9C,KACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,UACA,OAGA,MAAAwuC,EAAA1H,EAAAzxB,OACAuE,EAAAktB,EAAApB,OAAAD,eAAA37C,EAAA+lB,MAAA7J,OACAyf,EAAA+oB,EAAAgC,WAAA1mD,EAAAkW,KAAAlW,MAEA0kD,EAAAhzB,OAAA5B,EAAA6L,KYlZ6Dr6B,SAAA,WAQ7D1C,KAAA80D,iBAAA,IAAAjD,IACA1Q,OAAAD,EAAAC,SAQAnhD,KAAA80D,iBAAAn0C,GAAA,OD4cA,CAAAC,EAAAxf,EAAAg9C,KACA,GAAAA,EAAA+C,OAAAmN,WAAAltD,EAAA8xD,YAAA,UACA9U,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,UAAA,CACA,MAAApmB,EAAAkS,EAAAzxB,OAAAm7B,WAAA1mD,EAAAkxD,SAAAlxD,MAEAg9C,EAAAzxB,OAAAmG,OAAAoZ,EAAA9qC,EAAA8xD,aAEA9xD,EAAA07C,WAAAxC,GAAAhzB,2BAAAlmB,EAAA8xD,YAAAhnB,EAAAr1B,YACAzV,EAAA8xD,YAAA9xD,EAAA07C,WAAAr5B,OCpdoD/gB,SAAA,WACpD1C,KAAA80D,iBAAAn0C,GAAA,UD0bA,CAAAC,EAAAxf,EAAAg9C,KAEA,IAAAh9C,EAAA07C,YAAAsB,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,UAA6Er2D,MAAA,IAAa,CAC1F,MAAA6gD,WAAUA,EAAAoW,YAAAA,GAA0B9U,EAAA8T,gBAAA9wD,EAAAkxD,SAAAlxD,EAAA8xD,aAEpC9xD,EAAA07C,WAAAA,EACA17C,EAAA8xD,YAAAA,KChckExwD,SAAA,WAClE1C,KAAA80D,iBAAAn0C,GAAA,mBDybA,CAAAC,EAAAxf,EAAAg9C,KAEA,IAAAh9C,EAAA07C,YAAAsB,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,UAA6Er2D,MAAA,IAAa,CAC1F,MAAA6gD,WAAUA,EAAAoW,YAAAA,GAA0B9U,EAAA8T,gBAAA9wD,EAAAkxD,SAAAlxD,EAAA8xD,aAEpC9xD,EAAA07C,WAAAA,EACA17C,EAAA8xD,YAAAA,KC/b2ExwD,SAAA,WAE3E1C,KAAAotD,SAAA,QAUAvtD,IAAA8iB,EAAA,QAEA,OAAA3iB,KAAAuB,UAAAvB,KAAAkhD,MAAAvrC,SAAAuhC,QAAAv0B,IAYA9iB,UAAAk1D,GAEA,MAAAC,EAAAh1D,KAAAi1D,OAAAF,GAGA,OAAA/0D,KAAA60D,UAAAK,OAAAF,GAaAn1D,OAAAk1D,GAEA,MAAAjY,EAAAxC,GAAA3wB,SAAAorC,GAEAC,EAAA,IAAArjC,GAIAm0B,EAAA,IAAAj0B,GAAA,IAAAtF,IAKA,GAJAvsB,KAAAg9C,OAAApc,aAAAm0B,EAAAC,GAEAh1D,KAAAwnD,mBAAAhJ,cAAA1B,EAAAgJ,IAEAiP,EAAAl5C,GAAA,oBAAA,CAGA,MAAAwjC,EA8HA,SAAA7nC,GACA,MAAA1Y,KACAygC,EAAA/nB,EAAAxc,KAAA2a,SAEA,IAAA4pB,EACA,SAGA,MAAA41B,EAAA7a,GAAA3wB,SAAAnS,GAEA,IAAA,MAAAioC,KAAAlgB,EAAA2hB,MAAA7B,QAAA,CACA,MAAA+V,EAAAD,EAAAjiB,gBAAAuM,EAAAE,YAEAyV,GACAt2D,EAAAmF,MAAAw7C,EAAAxjD,KAAAm5D,IAIA,OAAAt2D;;;;GAhJAu2D,CAAAN,GAEA,IAAA,MAAA94D,EAAAkrB,KAAAk4B,EACAr/C,KAAAwnD,mBAAAzI,iBAAA9iD,EAAAkrB,EAAA2+B,GAOA,OAFA9lD,KAAAg9C,OAAAsY,gBAEAN,EAeAn1D,KAAAuB,EAAAuhB,EAAA,QACA,GAAA3iB,KAAAkhD,MAAAvrC,SAAA4/C,QAQA,MAAA,IAAAt0D,EAAA,6FAGA,MAAAu0D,EAAAx1D,KAAAkhD,MAAAvrC,SAAAuhC,QAAAv0B,GAEA3iB,KAAAkhD,MAAAyC,cAAA,cAAAh3B,IACAA,EAAAmG,OAAA9yB,KAAAy1D,MAAAr0D,EAAAo0D,GAAAA,KAgBA31D,IAAAuB,EAAAuhB,EAAA,QAEA,MAAA6yC,EAAAx1D,KAAAkhD,MAAAvrC,SAAAuhC,QAAAv0B,GAEA3iB,KAAAkhD,MAAAyC,cAAA,cAAAh3B,IACAA,EAAAuI,aAAA,MACAvI,EAAA+oC,yBAAA11D,KAAAkhD,MAAAvrC,SAAA4M,UAAA0N,oBAEAtD,EAAAlB,OAAA6uB,GAAA3wB,SAAA6rC,IACA7oC,EAAAmG,OAAA9yB,KAAAy1D,MAAAr0D,EAAAo0D,GAAAA,KAcA31D,MAAAuB,EAAA2sD,EAAA,SAEA,MAAAiH,EAAAh1D,KAAA60D,UAAAI,OAAA7zD,GAGA,OAAApB,KAAA21D,QAAAX,EAAAjH,GAiBAluD,QAAA+1D,EAAA7H,EAAA,SACA,OAAA/tD,KAAAkhD,MAAA3J,OAAA5qB,GACA3sB,KAAA80D,iBAAAhsB,QAAA8sB,EAAAjpC,EAAAohC,IAOAluD,YAUAmH,EAAA2tD,GAAA9zC,UChQAg1C,GAIAh2D,cAKAG,KAAA81D,mBAAA,IAAA1vD,IAeAvG,SAAAk2D,EAAAC,GACA,GAAAh2D,KAAA81D,mBAAAvtD,IAAAwtD,GAMA,MAAA,IAAA90D,EAAA,kGAGAjB,KAAA81D,mBAAAzvD,IAAA0vD,EAAAC,GAgDAn2D,IAAAk2D,GACA,MAAAC,EAAAh2D,KAAAi2D,gBAAAF,GAEA,OACAl2D,IAAAq2D,GAGA,OAgaA,SAAAF,EAAAE,GACA,IAAA,MAAA7X,KAAA2X,EACAE,EAAA7X,GApaA8X,CAAAH,EAAAE,GAEAl2D,OA4EAH,iBAAA2tD,GAEAxtD,KAAAo2D,IAAA,YAAAhkD,IAAA+yC,GAAAqI,IAGA,IAAA,MAAAtM,MAAeA,EAAA9wB,KAAAA,KAAcimC,GAAA7I,GAC7BxtD,KAAAo2D,IAAA,UAAAhkD,IACAqhD,IACAvS,MAAAA,EACA9wB,KAAAA,EACA1tB,SAAA8qD,EAAA9qD,YA2IA7C,mBAAA2tD,GAEAxtD,KAAAo2D,IAAA,YAAAhkD,IAAAozC,GAAAgI,IAGA,IAAA,MAAAtM,MAAeA,EAAA9wB,KAAAA,KAAcimC,GAAA7I,GAC7BxtD,KAAAo2D,IAAA,UAAAhkD,IACA2hD,IACA3jC,KAAAA,EACA8wB,MAAAA,EACAx+C,SAAA8qD,EAAA9qD,YAiHA7C,qBAAA2tD,GAEAxtD,KAAAo2D,IAAA,YAAAhkD,IAAA8zC,GAAAsH,IAGA,IAAA,MAAAtM,MAAeA,EAAA9wB,KAAAA,KAAcimC,GAAA7I,GAC7BxtD,KAAAo2D,IAAA,UAAAhkD,IACA8hD,IACA9jC,KAAAA,EACA8wB,MAAAA,KAiBArhD,gBAAAk2D,GACA,MAAAC,EAAAh2D,KAAA81D,mBAAAt5D,IAAAu5D,GAEA,IAAAC,EAMA,MAAA,IAAA/0D,EAAA,4FAGA,OAAA+0D,GAyCA,SAAAK,GAAA7I,GACA,GAAAA,EAAAtM,MAAA7xC,OACA,IAAA,MAAA3S,KAAA8wD,EAAAtM,MAAA7xC,OAAA,OAKAinD,IAJkBv1D,IAAAysD,EAAAtM,MAAAngD,IAAArE,MAAAA,GAClB8wD,EAAAp9B,KAAA1zB,GACA8wD,EAAA+I,WAAA/I,EAAA+I,WAAA75D,QAAAa,cAKA+4D,GAAA9I,EAAAtM,MAAAsM,EAAAp9B,KAAAo9B,EAAA+I,YAIA,SAAAD,GAAApV,EAAA9wB,EAAAmmC,GAGA,SAFQrV,MAAAA,EAAA9wB,KAAAA,GAERmmC,EAAA,CACAA,EAAA7wD,MAAAkI,QAAA2oD,GAAAA,GAAAA,GAEA,IAAA,MAAAC,KAAAD,QACUrV,MAAAA,EAAA9wB,KAAAomC;;;;SCniBVC,GAOA52D,YAAA62D,GASA12D,KAAA02D,YAAAA,EAQA12D,KAAAuhD,oBAAA,OAAAvhD,KAAA02D,YAoDA72D,aASAA,SACA,MAAAuW,EAAAjB,GAAAnV,MAAA,GAUA,OARAoW,EAAAugD,YAAA32D,KAAAL,YAAAia,iBAGAxD,EAAA2jB,aAGA3jB,EAAAmrC,oBAEAnrC,EAQAwD,uBACA,MAAA,mCAUA/Z,gBAAAuW,GACA,OAAA,IAAApW,KAAAoW,EAAAsgD;;;;SC7GAE,GAWA/2D,YAAAxB,GASA2B,KAAAq/C,QAAA,IAAAj5C,IAQApG,KAAA8Y,UAAA,IAAAm/B,GAEA55C,GACA2B,KAAA+Y,gBAAA,EAAA1a,GASAwB,CAAAoD,OAAAiU,YACA,OAAAlX,KAAAoa,cASAb,iBACA,OAAAvZ,KAAA8Y,UAAA7T,OASAmzC,gBACA,OAAAp4C,KAAA8Y,UAAAs/B,UASA5+B,cACA,OAAA,IAAAxZ,KAAAuZ,WASAve,WACA,OAAAgF,KASAqV,aACA,OAAA,KAWAxV,GAAAiJ,GACA,MAAA,oBAAAA,EASAjJ,SAAAmI,GACA,OAAAhI,KAAA8Y,UAAA4/B,QAAA1wC,GAQAnI,cACA,OAAAG,KAAA8Y,UAAA7V,OAAAiU,YASArX,cAAA6E,GACA,OAAA1E,KAAA8Y,UAAAu/B,aAAA3zC,GAWA7E,oBAAA6E,GACA,OAAA1E,KAAA8Y,UAAAw/B,mBAAA5zC,GAQA7E,UACA,SAcAA,cAAA+4C,GACA,IAAAl0C,EAAA1E,KAEA,IAAA,MAAAgI,KAAA4wC,EACAl0C,EAAAA,EAAA+Q,SAAA/Q,EAAAi0C,cAAA3wC,IAGA,OAAAtD,EAsBA7E,cAAAyP,GACA,OAAAtP,KAAA8Y,UAAA6/B,cAAArpC,GASAzP,SACA,MAAAuW,KAEA,IAAA,MAAA1R,KAAA1E,KAAA8Y,UACA1C,EAAAnS,KAAAS,EAAAozC,UAGA,OAAA1hC,EAUAvW,gBAAAuW,GACA,MAAA/X,KAEA,IAAA,MAAA8b,KAAA/D,EACA+D,EAAAle,KAEAoC,EAAA4F,KAAAw0C,GAAAM,SAAA5+B,IAGA9b,EAAA4F,KAAA4zC,GAAAkB,SAAA5+B,IAIA,OAAA,IAAAy8C,GAAAv4D,GASAwB,gBAAA2a,GACAxa,KAAA+Y,gBAAA/Y,KAAAuZ,WAAAiB,GAWA3a,gBAAAmI,EAAAwS,GACA,MAAAE,EAsCA,SAAAA,GAEA,GAAA,iBAAAA,EACA,OAAA,IAAAm9B,GAAAn9B,IAGAzD,GAAAyD,KACAA,GAAAA,IAIA,OAAAhV,MAAAC,KAAA+U,GACAzP,IAAAvG,GACA,iBAAAA,EACA,IAAAmzC,GAAAnzC,GAGAA,aAAAqzC,GACA,IAAAF,GAAAnzC,EAAAtD,KAAAsD,EAAA+wB,iBAGA/wB;;;;GA3DAmyD,CAAAr8C,GAEA,IAAA,MAAA9V,KAAAgW,EAEA,OAAAhW,EAAA2Q,QACA3Q,EAAAkW,UAGAlW,EAAA2Q,OAAArV,KAGAA,KAAA8Y,UAAAq/B,aAAAnwC,EAAA0S,GAYA7a,gBAAAmI,EAAA6S,EAAA,GACA,MAAAH,EAAA1a,KAAA8Y,UAAAggC,aAAA9wC,EAAA6S,GAEA,IAAA,MAAAnW,KAAAgW,EACAhW,EAAA2Q,OAAA,KAGA,OAAAqF,GCrRA,SAAAo8C,GAAA7zC,EAAAvI,GAIA,MAAApL,GAHAoL,EAAAq8C,GAAAr8C,IAGA4R,OAAA,CAAAoD,EAAAhrB,IAAAgrB,EAAAhrB,EAAAmS,WAAA,GACAxB,EAAA4N,EAAA5N,OAGA2hD,GAAA/zC,GACA,MAAAjb,EAAAib,EAAAjb,MAUA,OANAqN,EAAA0D,gBAAA/Q,EAAA0S,GAGAu8C,GAAA5hD,EAAArN,EAAA0S,EAAAzV,QACAgyD,GAAA5hD,EAAArN,GAEA,IAAAsyC,GAAAr3B,EAAAA,EAAAmE,aAAA9X,IAWA,SAAA4nD,GAAA/vC,GACA,IAAAA,EAAApB,OAMA,MAAA,IAAA9kB,EAAA,+GAIA,MAAAoU,EAAA8R,EAAA7J,MAAAjI,OAGA2hD,GAAA7vC,EAAA7J,OACA05C,GAAA7vC,EAAA1D,KAGA,MAAA6Q,EAAAjf,EAAAa,gBAAAiR,EAAA7J,MAAAtV,MAAAmf,EAAA1D,IAAAzb,MAAAmf,EAAA7J,MAAAtV,OAMA,OAFAivD,GAAA5hD,EAAA8R,EAAA7J,MAAAtV,OAEAssB,EA4EA,SAAAyiC,GAAAr8C,GACA,MAAA05C,KAEA15C,aAAAhV,QACAgV,GAAAA,IAIA,IAAA,IAAAhf,EAAA,EAAiBA,EAAAgf,EAAAzV,OAAkBvJ,IACnC,GAAA,iBAAAgf,EAAAhf,GACA04D,EAAAnwD,KAAA,IAAA4zC,GAAAn9B,EAAAhf,UACG,GAAAgf,EAAAhf,aAAAq8C,GACHqc,EAAAnwD,KAAA,IAAA4zC,GAAAn9B,EAAAhf,GAAA0F,KAAAsZ,EAAAhf,GAAA+5B,uBACG,GAAA/a,EAAAhf,aAAAk7D,IAAAl8C,EAAAhf,aAAAu8C,GACH,IAAA,MAAA99B,KAAAO,EAAAhf,GACA04D,EAAAnwD,KAAAkW,QAEGO,EAAAhf,aAAAi8C,IACHyc,EAAAnwD,KAAAyW,EAAAhf,IAMA,IAAA,IAAAA,EAAA,EAAiBA,EAAA04D,EAAAnvD,OAAuBvJ,IAAA,CACxC,MAAAgJ,EAAA0vD,EAAA14D,GACA63B,EAAA6gC,EAAA14D,EAAA,GAEAgJ,aAAAmzC,IAAAtkB,aAAAskB,IAAAsf,GAAAzyD,EAAA6uB,KAEA6gC,EAAAlvD,OAAAxJ,EAAA,EAAA,EAAA,IAAAm8C,GAAAtkB,EAAAnyB,KAAAsD,EAAAtD,KAAAmyB,EAAAkC,kBACA/5B,KAIA,OAAA04D,EAcA,SAAA6C,GAAAz/C,EAAAxP,GACA,MAAA+c,EAAAvN,EAAA/B,SAAAzN,EAAA,GACA8c,EAAAtN,EAAA/B,SAAAzN,GAGA,GAAA+c,GAAAD,GAAAC,EAAAlJ,GAAA,SAAAiJ,EAAAjJ,GAAA,SAAAs7C,GAAApyC,EAAAD,GAAA,CAEA,MAAAsyC,EAAA,IAAAvf,GAAA9yB,EAAA3jB,KAAA0jB,EAAA1jB,KAAA2jB,EAAA0Q,iBAGAje,EAAAtB,gBAAAlO,EAAA,EAAA,GAGAwP,EAAAuB,gBAAA/Q,EAAA,EAAAovD,IAYA,SAAAJ,GAAA/zC,GACA,MAAAtM,EAAAsM,EAAAtM,SACAa,EAAAyL,EAAA5N,OAEA,GAAAsB,EAAA,CACA,MAAA0gD,EAAAp0C,EAAA3T,OAAAqH,EAAA4N,YACAvc,EAAA2O,EAAA3O,MAEAwP,EAAAtB,gBAAAlO,EAAA,GAEA,MAAAsvD,EAAA,IAAAzf,GAAAlhC,EAAAvV,KAAAoD,OAAA,EAAA6yD,GAAA1gD,EAAA8e,iBACA8hC,EAAA,IAAA1f,GAAAlhC,EAAAvV,KAAAoD,OAAA6yD,GAAA1gD,EAAA8e,iBAEAje,EAAAuB,gBAAA/Q,GAAAsvD,EAAAC,KAaA,SAAAJ,GAAAtyB,EAAAC,GACA,MAAA0yB,EAAA3yB,EAAApP,gBACAgiC,EAAA3yB,EAAArP,gBAEA,IAAA,MAAA8H,KAAAi6B,EAAA,CACA,GAAAj6B,EAAA,KAAAuH,EAAA9sB,aAAAulB,EAAA,IACA,OAAA,EAGAk6B,EAAAx5C,OAGA,OAAAw5C,EAAAx5C,OAAAC,KCjPA,IAAAw5C,GAJA,SAAAh7D,EAAAiL,GACA,OAAA+iC,GAAAhuC,EAAAiL;;;;SCVAgwD,WAAAlB,GAoBA52D,YAAAsnB,EAAApmB,EAAAqe,EAAA5S,EAAAkqD,GACAl1D,MAAAk1D,GAQA12D,KAAAmnB,MAAAmzB,GAAAzzB,gBAAAM,GAQAnnB,KAAAe,IAAAA,EAQAf,KAAAof,cAAA7hB,IAAA6hB,EAAA,KAAAA,EAQApf,KAAAwM,cAAAjP,IAAAiP,EAAA,KAAAA,EAMA1D,WACA,OAAA,OAAA9I,KAAAof,SACA,eACG,OAAApf,KAAAwM,SACH,kBAEA,kBASA3M,QACA,OAAA,IAAA83D,GAAA33D,KAAAmnB,MAAAnnB,KAAAe,IAAAf,KAAAof,SAAApf,KAAAwM,SAAAxM,KAAA02D,aAQA72D,cACA,OAAA,IAAA83D,GAAA33D,KAAAmnB,MAAAnnB,KAAAe,IAAAf,KAAAwM,SAAAxM,KAAAof,SAAApf,KAAA02D,YAAA,GAMA72D,YACA,IAAA,MAAAyX,KAAAtX,KAAAmnB,MAAA24B,WAAA,CACA,GAAA,OAAA9/C,KAAAof,WAAAs4C,GAAApgD,EAAAU,aAAAhY,KAAAe,KAAAf,KAAAof,UASA,MAAA,IAAAne,EACA,yHAEMqW,KAAAA,EAAAvW,IAAAf,KAAAe,IAAArE,MAAAsD,KAAAof,WAIN,GAAA,OAAApf,KAAAof,UAAA,OAAApf,KAAAwM,UAAA8K,EAAAS,aAAA/X,KAAAe,KAQA,MAAA,IAAAE,EACA,sFACMyD,KAAA4S,EAAAvW,IAAAf,KAAAe,OASNlB,WAEA63D,GAAA13D,KAAAof,SAAApf,KAAAwM,WFtBA,SAAA2a,EAAApmB,EAAArE,GAEAs6D,GAAA7vC,EAAA7J,OACA05C,GAAA7vC,EAAA1D,KAGA,IAAA,MAAAnM,KAAA6P,EAAA24B,WAAA,CAIA,MAAAp7C,EAAA4S,EAAAuE,GAAA,aAAAvE,EAAAX,SAAAW,EAEA,OAAA5a,EACAgI,EAAAytB,cAAApxB,EAAArE,GAEAgI,EAAA0tB,iBAAArxB,GAIAk2D,GAAAvyD,EAAA2Q,OAAA3Q,EAAAsD,OAIAivD,GAAA9vC,EAAA1D,IAAApO,OAAA8R,EAAA1D,IAAAzb,OECA4vD,CAAA53D,KAAAmnB,MAAAnnB,KAAAe,IAAAf,KAAAwM,UAOAoN,uBACA,MAAA,4CAUA/Z,gBAAAuW,EAAAT,GACA,OAAA,IAAAgiD,GAAArd,GAAAvB,SAAA3iC,EAAA+Q,MAAAxR,GAAAS,EAAArV,IAAAqV,EAAAgJ,SAAAhJ,EAAA5J,SAAA4J,EAAAsgD;;;;SCtJAmB,WAAApB,GAYA52D,YAAAi6C,EAAAj/B,EAAAmY,EAAA0jC,GACAl1D,MAAAk1D,GAOA12D,KAAA85C,eAAAb,GAAA91B,mBAAA22B,GAOA95C,KAAA6a,QAAAA,EAOA7a,KAAAgzB,eAAAimB,GAAA91B,mBAAA6P,GAUAhzB,KAAAo7C,UAAA,EAMAtyC,WACA,MAAA,OAQAjJ,QACA,MAAAi4D,EAAA,IAAA93D,KAAAL,YAAAK,KAAA85C,eAAA95C,KAAA6a,QAAA7a,KAAAgzB,eAAAhzB,KAAA02D,aAGA,OAFAoB,EAAA1c,SAAAp7C,KAAAo7C,SAEA0c,EAiBAj4D,qBACA,OAAAG,KAAAgzB,eAAAgnB,0BAAAh6C,KAAA85C,eAAA95C,KAAA6a,SAQAhb,cACA,MAAAk4D,EAAA/3D,KAAA85C,eAAAI,2BAAAl6C,KAAAgzB,eAAAhzB,KAAA6a,SAEAi9C,EAAA,IAAA93D,KAAAL,YAAAK,KAAA2hD,qBAAA3hD,KAAA6a,QAAAk9C,EAAA/3D,KAAA02D,YAAA,GAGA,OAFAoB,EAAA1c,SAAAp7C,KAAAo7C,SAEA0c,EAMAj4D,YACA,MAAAm4D,EAAAh4D,KAAA85C,eAAAzkC,OACA4iD,EAAAj4D,KAAAgzB,eAAA3d,OACA6iD,EAAAl4D,KAAA85C,eAAAxqC,OACA6oD,EAAAn4D,KAAAgzB,eAAA1jB,OAKA,IAAA0oD,IAAAC,EAMA,MAAA,IAAAh3D,EACA,mFAEG,GAAAi3D,EAAAl4D,KAAA6a,QAAAm9C,EAAA5f,UAMH,MAAA,IAAAn3C,EACA,oFAEG,GAAA+2D,IAAAC,GAAAC,EAAAC,GAAAA,EAAAD,EAAAl4D,KAAA6a,QAMH,MAAA,IAAA5Z,EACA,kGAEG,GAAAjB,KAAA85C,eAAA9+C,MAAAgF,KAAAgzB,eAAAh4B,MACH,UAAA0pB,GAAA1kB,KAAA85C,eAAAF,gBAAA55C,KAAAgzB,eAAA4mB,iBAAA,CACA,MAAAl+C,EAAAsE,KAAA85C,eAAA93C,KAAAiD,OAAA,EAEA,GAAAjF,KAAAgzB,eAAAhxB,KAAAtG,IAAAw8D,GAAAl4D,KAAAgzB,eAAAhxB,KAAAtG,GAAAw8D,EAAAl4D,KAAA6a,QAMA,MAAA,IAAA5Z,EACA,wGAUApB,YHhFA,SAAAkzB,EAAAC,GACA,IAAAD,EAAAhN,OAMA,MAAA,IAAA9kB,EAAA,2GAIA,MAAAyZ,EAAAw8C,GAAAnkC,GAMA+jC,GAFA9jC,EAAAA,EAAAgnB,0BAAAjnB,EAAAzV,MAAAyV,EAAAtP,IAAAnU,OAAAyjB,EAAAzV,MAAAhO,QAEAoL,GGgEA09C,CAAA9d,GAAAhzB,2BAAAtnB,KAAA85C,eAAA95C,KAAA6a,SAAA7a,KAAAgzB,gBAMApZ,uBACA,MAAA,uCAUA/Z,gBAAAuW,EAAAT,GACA,MAAAmkC,EAAAb,GAAAF,SAAA3iC,EAAA0jC,eAAAnkC,GACAqd,EAAAimB,GAAAF,SAAA3iC,EAAA4c,eAAArd,GAEAsd,EAAA,IAAAjzB,KAAA85C,EAAA1jC,EAAAyE,QAAAmY,EAAA5c,EAAAsgD,aAMA,OAJAtgD,EAAAglC,WACAnoB,EAAAmoB,UAAA,GAGAnoB;;;;SC7LAolC,WAAAR,GAMA50C,eACA,OAAAjjB,KAAAgzB,eAMA/P,aAAA3N,GACAtV,KAAAgzB,eAAA1d,EAMAxM,WACA,MAAA,WAQAjJ,cACA,MAAAk4D,EAAA/3D,KAAA85C,eAAAI,2BAAAl6C,KAAAgzB,eAAAhzB,KAAA6a,SAEA,OAAA,IAAAy9C,GAAAt4D,KAAA2hD,qBAAA3hD,KAAA6a,QAAAk9C,EAAA/3D,KAAA02D,YAAA,GAMA72D,YAGA,GAFA2B,MAAA+2D,aAEAv4D,KAAA85C,eAAA9+C,KAAA2a,SACA,MAAA,IAAA1U,EAAA,uEAGA,IAAAjB,KAAAgzB,eAAAh4B,KAAA2a,SACA,MAAA,IAAA1U,EAAA,mFAOA2Y,uBACA,MAAA;;;;SCzDA0+C,WAAAT,GAIA/uD,WACA,MAAA,SAQAjJ,cACA,MAAAk4D,EAAA/3D,KAAA85C,eAAAI,2BAAAl6C,KAAAgzB,eAAAhzB,KAAA6a,SAEA,OAAA,IAAAw9C,GAAAr4D,KAAA2hD,qBAAA3hD,KAAA6a,QAAAk9C,EAAA/3D,KAAA02D,YAAA,GAMA72D,YAGA,GAFA2B,MAAA+2D,aAEAv4D,KAAA85C,eAAA9+C,KAAA2a,SAQA,MAAA,IAAA1U,EAAA,mEAOA2Y,uBACA,MAAA;;;;SClCA4+C,WAAA/B,GASA52D,YAAAojB,EAAAvI,EAAAg8C,GACAl1D,MAAAk1D,GAQA12D,KAAAijB,SAAAg2B,GAAA91B,mBAAAF,GAQAjjB,KAAA0a,MAAA,IAAAu9B,GAAA8e,GAAAr8C,IAMA5R,WACA,MAAA,SAQAjJ,QACA,MAAA6a,EAAA,IAAAu9B,OAAAj4C,KAAA0a,OAAAzP,IAAAvG,GAAAA,EAAA2V,QAAA,KAEA,OAAA,IAAAm+C,GAAAx4D,KAAAijB,SAAAvI,EAAA1a,KAAA02D,aAQA72D,cACA,MAAAw6C,EAAAr6C,KAAAijB,SAAAjoB,KAAA2a,SAAA0kC,UACAoe,EAAA,IAAAxf,GAAAoB,GAAA,IAEA,OAAA,IAAAie,GAAAt4D,KAAAijB,SAAAjjB,KAAA0a,MAAA09B,UAAAqgB,EAAAz4D,KAAA02D,YAAA,GAMA72D,YACA,MAAAo4D,EAAAj4D,KAAAijB,SAAA5N,OAEA,IAAA4iD,GAAAA,EAAA7f,UAAAp4C,KAAAijB,SAAA3T,OAMA,MAAA,IAAArO,EACA,qEAQApB,WAKA,MAAA64D,EAAA14D,KAAA0a,MACA1a,KAAA0a,MAAA,IAAAu9B,OAAAygB,GAAAztD,IAAAvG,GAAAA,EAAA2V,QAAA,KAEAy8C,GAAA92D,KAAAijB,SAAAy1C,GAMA9+C,uBACA,MAAA,yCAUA/Z,gBAAAuW,EAAAT,GACA,MAAAtX,KAEA,IAAA,MAAA8b,KAAA/D,EAAAsE,MACAP,EAAAle,KAEAoC,EAAA4F,KAAAw0C,GAAAM,SAAA5+B,IAGA9b,EAAA4F,KAAA4zC,GAAAkB,SAAA5+B,IAIA,OAAA,IAAAq+C,GAAAvf,GAAAF,SAAA3iC,EAAA6M,SAAAtN,GAAAtX,EAAA+X,EAAAsgD;;;;SC9HAiC,WAAAlC,GASA52D,YAAA5D,EAAAmkD,EAAA/qB,EAAAgqB,EAAAqX,GACAl1D,MAAAk1D,GAQA12D,KAAA/D,KAAAA,EAQA+D,KAAAogD,SAAAA,EAAA9F,GAAAzzB,gBAAAu5B,GAAA,KAQApgD,KAAAq1B,SAAAA,EAAAilB,GAAAzzB,gBAAAwO,GAAA,KAQAr1B,KAAA44D,SAAAvZ,EAMAv2C,WACA,MAAA,SAQAjJ,QACA,OAAA,IAAA84D,GAAA34D,KAAA/D,KAAA+D,KAAAogD,SAAApgD,KAAAq1B,SAAAr1B,KAAA44D,SAAA54D,KAAA02D,aAQA72D,cACA,OAAA,IAAA84D,GAAA34D,KAAA/D,KAAA+D,KAAAq1B,SAAAr1B,KAAAogD,SAAApgD,KAAA44D,SAAA54D,KAAA02D,YAAA,GAMA72D,WACA,MAAAiJ,EAAA9I,KAAAq1B,SAAA,OAAA,UAEAr1B,KAAA44D,SAAA9vD,GAAA9I,KAAA/D,KAAA+D,KAAAq1B,UAAA,GAMAx1B,SACA,MAAAuW,EAAA5U,MAAAs2C,SAIA,cAFA1hC,EAAAwiD,SAEAxiD,EAMAwD,uBACA,MAAA,yCAUA/Z,gBAAAuW,EAAAT,GACA,OAAA,IAAAgjD,GACAviD,EAAAna,KACAma,EAAAgqC,SAAA9F,GAAAvB,SAAA3iC,EAAAgqC,SAAAzqC,GAAA,KACAS,EAAAif,SAAAilB,GAAAvB,SAAA3iC,EAAAif,SAAA1f,GAAA,KACAA,EAAAurC,MAAA7B,QACAjpC,EAAAsgD;;;;SCxGAmC,WAAApC,GACA3tD,WACA,MAAA,OAQAjJ,QACA,OAAA,IAAAg5D,GAAA74D,KAAA02D,aAQA72D,cACA,OAAA,IAAAg5D,GAAA74D,KAAA02D,YAAA,GAGA72D,YAMA+Z,uBACA,MAAA;;;;SC9BAk/C,WAAArC,GAUA52D,YAAAojB,EAAA81C,EAAAvjC,EAAAkhC,GACAl1D,MAAAk1D,GAOA12D,KAAAijB,SAAAA,EAOAjjB,KAAA+4D,QAAAA,EAOA/4D,KAAAw1B,QAAAA,EAMA1sB,WACA,MAAA,SAQAjJ,QACA,OAAA,IAAAi5D,GAAA7f,GAAA91B,mBAAAnjB,KAAAijB,UAAAjjB,KAAA+4D,QAAA/4D,KAAAw1B,QAAAx1B,KAAA02D,aAQA72D,cACA,OAAA,IAAAi5D,GAAA7f,GAAA91B,mBAAAnjB,KAAAijB,UAAAjjB,KAAAw1B,QAAAx1B,KAAA+4D,QAAA/4D,KAAA02D,YAAA,GAMA72D,YACA,MAAA2X,EAAAxX,KAAAijB,SAAA6B,UAEA,KAAAtN,aAAAihC,IAMA,MAAA,IAAAx3C,EACA,8GAEG,GAAAuW,EAAAvb,OAAA+D,KAAA+4D,QAMH,MAAA,IAAA93D,EACA,gGAQApB,WACAG,KAAAijB,SAAA6B,UAEA7oB,KAAA+D,KAAAw1B,QAMA5b,uBACA,MAAA,yCAUA/Z,gBAAAuW,EAAAT,GACA,OAAA,IAAAmjD,GAAA7f,GAAAF,SAAA3iC,EAAA6M,SAAAtN,GAAAS,EAAA2iD,QAAA3iD,EAAAof,QAAApf,EAAAsgD;;;;SC5GAsC,WAAAvC,GAYA52D,YAAA7E,EAAA+F,EAAAqe,EAAA5S,EAAAkqD,GACAl1D,MAAAk1D,GAQA12D,KAAAhF,KAAAA,EAQAgF,KAAAe,IAAAA,EAQAf,KAAAof,SAAAA,EAQApf,KAAAwM,SAAAA,EAMA1D,WACA,OAAA,OAAA9I,KAAAof,SACA,mBACG,OAAApf,KAAAwM,SACH,sBAEA,sBASA3M,QACA,OAAA,IAAAm5D,GAAAh5D,KAAAhF,KAAAgF,KAAAe,IAAAf,KAAAof,SAAApf,KAAAwM,SAAAxM,KAAA02D,aAQA72D,cACA,OAAA,IAAAm5D,GAAAh5D,KAAAhF,KAAAgF,KAAAe,IAAAf,KAAAwM,SAAAxM,KAAAof,SAAApf,KAAA02D,YAAA,GAMA72D,YACA,GAAAG,KAAAhF,MAAAgF,KAAAhF,KAAAA,MAAAgF,KAAAhF,KAAA6gB,GAAA,oBASA,MAAA,IAAA5a,EACA,oFACKjG,KAAAgF,KAAAhF,KAAA+F,IAAAf,KAAAe,MAIL,GAAA,OAAAf,KAAAof,UAAApf,KAAAhF,KAAAgd,aAAAhY,KAAAe,OAAAf,KAAAof,SASA,MAAA,IAAAne,EACA,6HAEKjG,KAAAgF,KAAAhF,KAAA+F,IAAAf,KAAAe,MAIL,GAAA,OAAAf,KAAAof,UAAA,OAAApf,KAAAwM,UAAAxM,KAAAhF,KAAA+c,aAAA/X,KAAAe,KAQA,MAAA,IAAAE,EACA,0FACKjG,KAAAgF,KAAAhF,KAAA+F,IAAAf,KAAAe,MAQLlB,WACA,OAAAG,KAAAwM,SACAxM,KAAAhF,KAAAm3B,cAAAnyB,KAAAe,IAAAf,KAAAwM,UAEAxM,KAAAhF,KAAAo3B,iBAAApyB,KAAAe,KAOA6Y,uBACA,MAAA,gDAUA/Z,gBAAAuW,EAAAT,GACA,IAAAA,EAAAuhC,QAAA9gC,EAAApb,MAOA,MAAA,IAAAiG,EACA,4HACK0hB,SAAAvM,IAIL,OAAA,IAAA4iD,GAAArjD,EAAAuhC,QAAA9gC,EAAApb,MAAAob,EAAArV,IAAAqV,EAAAgJ,SAAAhJ,EAAA5J,SAAA4J,EAAAsgD;;;;GC5KA,MAAAuC,MACAA,GAAAtB,GAAA/9C,WAAA+9C,GACAsB,GAAAT,GAAA5+C,WAAA4+C,GACAS,GAAAN,GAAA/+C,WAAA++C,GACAM,GAAApB,GAAAj+C,WAAAi+C,GACAoB,GAAAJ,GAAAj/C,WAAAi/C,GACAI,GAAAxC,GAAA78C,WAAA68C,GACAwC,GAAAZ,GAAAz+C,WAAAy+C,GACAY,GAAAX,GAAA1+C,WAAA0+C,GACAW,GAAAH,GAAAl/C,WAAAk/C,GACAG,GAAAD,GAAAp/C,WAAAo/C,SAOAE,GAQAr5D,gBAAAuW,EAAAT,GACA,OAAAsjD,GAAA7iD,EAAAugD,aAAA5d,SAAA3iC,EAAAT;;;;GCjCA,MAAAwjD,GAAA,IAAA/yD,UAUAgzD,GAQAv5D,gBAAAuW,EAAAmpB,GACA,IAAA45B,GAAA5wD,IAAA6N,EAAAugD,aAOA,MAAA,IAAA11D,EACA,0EACKhF,KAAAma,EAAAugD,cAIL,MAEA58B,EAAA,IAFAo/B,GAAA38D,IAAA4Z,EAAAugD,cAIA,IAAA,MAAAjc,KAAAtkC,EAAAukC,WACA5gB,EAAAs/B,aAAAH,GAAAngB,SAAA2B,EAAAnb,IAIA,IAAA,MAAAmU,KAAAt9B,EACA,eAAAs9B,QAAAn2C,IAAAw8B,EAAA2Z,KACA3Z,EAAA2Z,GAAAt9B,EAAAs9B,IAIA,OAAA3Z,EAQAl6B,gBAAAy5D,GACAH,GAAA9yD,IAAAizD,EAAA1/C,UAAA0/C;;;;SCjDAC,GAIA15D,cAQAG,KAAAyhD,MAAA,KAQAzhD,KAAA26C,cAUA+b,kBACA,OAAA12D,KAAA26C,WAAA11C,OAAA,EACAjF,KAAA26C,WAAA,GAAA+b,YAGA,KAMAA,gBAAAA,GACA,IAAA,MAAAhc,KAAA16C,KAAA26C,WACAD,EAAAgc,YAAAA,IAUA8C,yBACA,OAAAD,GAeA15D,aAAA66C,GAIA,OAHAA,EAAA3gB,MAAA/5B,KACAA,KAAA26C,WAAA12C,KAAAy2C,GAEAA,EAQA76C,QACA,MAAAk6B,EAAA,IAAA/5B,KAAAL,YAEA,IAAA,MAAAm4D,KAAA93D,KAAA26C,WACA5gB,EAAAs/B,aAAAvB,EAAAzkB,SAGA,OAAAtZ,EAcAl6B,cACA,MAAAk6B,EAAA,IAAA/5B,KAAAw5D,mBAEA,IAAA,MAAA1B,KAAA93D,KAAA26C,WACA5gB,EAAAs/B,aAAAvB,EAAA2B,eAGA1/B,EAAA4gB,WAAAoF,UAEA,IAAA,IAAArkD,EAAA,EAAkBA,EAAAq+B,EAAA4gB,WAAA11C,OAA6BvJ,IAC/Cq+B,EAAA4gB,WAAAj/C,GAAAg7D,YAAA12D,KAAA26C,WAAA36C,KAAA26C,WAAA11C,OAAA,GAAAyxD,YAAAh7D,EAAA,EAGA,OAAAq+B,EAQAl6B,SACA,MAAAuW,EAAAjB,GAAAnV,MAOA,OALAoW,EAAAugD,YAAA32D,KAAAL,YAAAia,iBAGAxD,EAAAqrC,MAEArrC,EAUAwD,uBACA,MAAA,4BAIAw/C,GAAAM,SAAAH;;;;;MCjJAI,WAAAJ,GAIAzwD,WACA,MAAA,YASA/H,UACA,OAAAf,KAAA26C,WAAA,GAAA36C,KAAA26C,WAAA,GAAA55C,IAAA,KASArE,YACA,OAAAsD,KAAA26C,WAAA,GAAA36C,KAAA26C,WAAA,GAAAnuC,SAAA,KASA2a,YAEA,GAAAnnB,KAAA45D,OACA,OAAA55D,KAAA45D,OAGA,IAAAt8C,EAAA,KACAmG,EAAA,KAEA,IAAA,MAAAi3B,KAAA16C,KAAA26C,WACAD,aAAAme,MAIA,OAAAv7C,GAAAA,EAAA4I,QAAAw0B,EAAAvzB,MAAA7J,UACAA,EAAAo9B,EAAAvzB,MAAA7J,QAGA,OAAAmG,GAAAA,EAAA6C,SAAAo0B,EAAAvzB,MAAA1D,QACAA,EAAAi3B,EAAAvzB,MAAA1D,MAIA,OAAAnG,GAAAmG,GACAzjB,KAAA45D,OAAA,IAAAtf,GAAAh9B,EAAAmG,GAEAzjB,KAAA45D,QAGA,KAGAJ,yBACA,OAAAG,GAMA95D,SACA,MAAAuW,EAAA5U,MAAAs2C,SAIA,cAFA1hC,EAAAwjD,OAEAxjD,EAMAwD,uBACA,MAAA,qCAIAw/C,GAAAM,SAAAC;;;;;MC1FAE,WAAAN,GAIAzwD,WACA,MAAA,QAQAma,eACA,OAAAjjB,KAAA85D,eAAA95D,KAAA85D,eAAAhgB,eAAA,KAkBAigB,sBACA,OAAA/5D,KAAA26C,WAAA,IAAA,KAUAmf,qBACA,OAAA95D,KAAA26C,WAAA,IAAA36C,KAAA26C,WAAA,aAAAkd,GAAA73D,KAAA26C,WAAA,GAAA,KAMA6e,yBACA,OAAAQ,GAMApgD,uBACA,MAAA,iCAIAw/C,GAAAM,SAAAG;;;;;MC/DAG,WAAAT,GAIAzwD,WACA,MAAA,QASAma,eACA,OAAAjjB,KAAAi6D,iBAAAj6D,KAAAi6D,iBAAAngB,eAAA,KAaAmgB,uBACA,OAAAj6D,KAAA26C,WAAA,IAAA,KAMA6e,yBACA,OAAAK,GAMAjgD,uBACA,MAAA,iCAIAw/C,GAAAM,SAAAM;;;;;MChDAE,WAAAX,GAIAzwD,WACA,MAAA,OAQA+R,cACA,OAAA7a,KAAA85D,eAAA95D,KAAA85D,eAAAj/C,QAAA,KAUAi/B,qBACA,OAAA95C,KAAA85D,eAAA95D,KAAA85D,eAAAhgB,eAAA,KAUA9mB,qBACA,OAAAhzB,KAAA85D,eAAA95D,KAAA85D,eAAA9mC,eAAA,KAUA8mC,qBACA,OAAA95D,KAAA26C,WAAA,IAAA,KAMA6e,yBACA,OAAAU,GAMAtgD,uBACA,MAAA,gCAIAw/C,GAAAM,SAAAQ;;;;;MCjEAC,WAAAD,GAIAtgD,uBACA,MAAA,kCAIAw/C,GAAAM,SAAAS;;;;;MCTAC,WAAAb,GAIAzwD,WACA,MAAA,SAMA0wD,yBACA,OAAAY,GAMAxgD,uBACA,MAAA,kCAIAw/C,GAAAM,SAAAU;;;;;MCrBAC,WAAAd,GAIAzwD,WACA,MAAA,OAQAqe,YACA,MAAAmzC,EAAAt6D,KAAA85D,eAEA,OAAAQ,EAAAhgB,GAAAhzB,2BAAAgzC,EAAAxgB,eAAAwgB,EAAAz/C,SAAA,KAQAA,cACA,MAAAsM,EAAAnnB,KAAAmnB,MAEA,OAAAA,EAAAA,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OAAA,EAWAirD,uBACA,OAAAv6D,KAAA26C,WAAA,IAAA,KASAmf,qBACA,OAAA95D,KAAA26C,WAAA,IAAA,KAMA6e,yBACA,OAAAgB,GAMA5gD,uBACA,MAAA,gCAIAw/C,GAAAM,SAAAW;;;;;MCpEAG,WAAAjB,GAIAzwD,WACA,MAAA,SAQAma,eACA,OAAAjjB,KAAA85D,eAAA95D,KAAA85D,eAAA9mC,eAAA,KASA8mC,qBACA,OAAA95D,KAAA26C,WAAA,IAAA,KAMA6e,yBACA,OAAAa,GAMAzgD,uBACA,MAAA,kCAIAw/C,GAAAM,SAAAc;;;;;MC1CAC,WAAAlB,GAIAzwD,WACA,MAAA,SASAma,eACA,OAAAjjB,KAAAu6D,iBAAAv6D,KAAAu6D,iBAAAt3C,SAAA,KASAvI,YACA,OAAA1a,KAAAu6D,iBAAAv6D,KAAAu6D,iBAAA7/C,MAAA,KAUA6/C,uBACA,OAAAv6D,KAAA26C,WAAA,IAAA,KAMA6e,yBACA,OAAAW,GAMAvgD,uBACA,MAAA,kCAIAw/C,GAAAM,SAAAe;;;;;MCvDAC,WAAAD,GAIA7gD,uBACA,MAAA,sCAIAw/C,GAAAM,SAAAgB;;;;;;;;UCkhBA,SAAAj7C,EAAAkF,EAAAopC,GAAqC4M,UAAA,IACrC,IAAAC,EAAAC,EAEAp7C,aAAA+4C,GACAoC,EAAAE,GAAAC,gBACEt7C,aAAAk4C,GACFiD,EAAAE,GAAAE,mBACEv7C,aAAAu5C,GACF4B,EAAAE,GAAAG,uBACEx7C,aAAAq5C,GACF8B,EAAAE,GAAAI,gBACEz7C,aAAAk5C,GACFiC,EAAAE,GAAAK,gBACE17C,aAAAo4C,GACF+C,EAAAE,GAAAM,cAEAP,EAAAQ,GAGAT,IAEAC,EADAl2C,aAAA6zC,GACAoC,EAAAG,gBACGp2C,aAAAgzC,GACHiD,EAAAI,mBACGr2C,aAAAq0C,GACH4B,EAAAK,uBACGt2C,aAAAm0C,GACH8B,EAAAM,gBACGv2C,aAAAg0C,GACHiC,EAAAO,gBACGx2C,aAAAkzC,GACH+C,EAAAQ,cAEAC,IAIA,MAAA1hB,EAAAkhB,EAAAp7C,EAAAkF,EAAAopC,GAEA,OAWA,SAAA2I,EAAA/b,GACA,IAAA,IAAAj/C,EAAA,EAAiBA,EAAAi/C,EAAA11C,OAAuBvJ,IACxCi/C,EAAAj/C,GAAAg7D,YAAAA,EAAAh7D,EAAA,EAGA,OAAAi/C,EAhBA2gB,CAAA77C,EAAAi3C,YAAA/c,IAphBA,MAAAmhB,IACAC,iBAGAl7D,gBAAA4f,EAAAkF,EAAAopC,GAEA,MAAApU,EAAAl6B,EAAA4zB,QAGA1Y,OAAAp9B,IAAAwwD,EAAApzB,cAAAozB,EAAA4M,SAAA5M,EAAApzB,aAKA,OAFAgf,EAAA12B,SAAA02B,EAAA12B,SAAAi3B,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,UAAAzd,IAEAgf,IAGAqhB,mBAAAK,GAEAJ,uBAAAI,GAEAH,gBAAAG,GAEAF,gBAAAE,GAIAx7D,cAAA4f,EAAAkF,EAAAopC,GACA,MAAApU,EAAAl6B,EAAA4zB,QAGA1Y,OAAAp9B,IAAAwwD,EAAApzB,cAAAozB,EAAA4M,SAAA5M,EAAApzB,aAWA,OARAgf,EAAA12B,SAAAxD,EAAAwD,SAAAi4B,sBACAv2B,EAAAm1B,eACAn1B,EAAAqO,eACArO,EAAA9J,QACA8f,EACAhW,EAAAy2B,WAAA2S,EAAAwN,iBAGA5hB,KAIAqhB,oBAEAD,gBAAA,CAAAt7C,EAAAkF,IAEAlF,EAAA0H,MAAA+yB,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,WAAA,GAAA,GAGA2H,UAAA90C,IAAAkc,GACA,IAAAwwC,GAAAxwC,EAAA1H,EAAA1e,IAAA0e,EAAAL,SAAAK,EAAAjT,SAAAiT,EAAAi3C,cAMA72D,mBAAA4f,EAAAkF,EAAAopC,GACA,GAAAtuC,EAAA1e,MAAA4jB,EAAA5jB,IAAA,CAIA,MAAA45C,EAAAl7B,EAAA0H,MAAAu0B,cAAA/2B,EAAAwC,OAAAlc,IAAAkc,GACA,IAAAwwC,GAAAxwC,EAAA1H,EAAA1e,IAAA0e,EAAAL,SAAAK,EAAAjT,SAAAiT,EAAAi3C,cAIA9a,EAAAn8B,EAAA0H,MAAA+rB,gBAAAvuB,EAAAwC,OAaA,OAXAy0B,IAIAmS,EAAA4M,SACAhgB,EAAA12C,KAAA,IAAA0zD,GAAA/b,EAAAj3B,EAAA5jB,IAAA4jB,EAAAnY,SAAAiT,EAAAjT,SAAAiT,EAAAi3C,cACM,IAAA/b,EAAA11C,QACN01C,EAAA12C,KAAA,IAAA40D,GAAA,KAIAle,EAGA,OAAAl7B,EAAA4zB,UAIA4nB,uBAAAI,GAEAH,gBAAAG,GAEAF,gBAAAE,GAGAx7D,cAAA4f,EAAAkF,GAEA,MAAA0E,EAAAixB,GAAAhzB,2BAAA3C,EAAAm1B,eAAAn1B,EAAA9J,SAGA,IAAA8L,KAKA,MAAAg1B,EAocA,SAAAh1B,GACA,OAAA,IAAAA,EAAA1hB,OACA,KACE,GAAA0hB,EAAA1hB,OACF0hB,EAAA,IAEAA,EAAA,GAAAlD,IAAAkD,EAAAA,EAAA1hB,OAAA,GAAAwe,IAEAkD,EAAA,IA5cA60C,CAAA/7C,EAAA0H,MAAAu0B,cAAAryB,IAGAuyB,EAAAn8B,EAAA0H,MAAA+rB,gBAAA7pB,GA6BA,OA3BA,OAAAsyB,IAKAA,EAAAr+B,MAAAq+B,EAAAr+B,MAAA08B,0BAAAr1B,EAAAm1B,eAAAn1B,EAAA9J,SACA8gC,EAAAl4B,IAAAk4B,EAAAl4B,IAAAu2B,0BAAAr1B,EAAAm1B,eAAAn1B,EAAA9J,SAOA8L,EAAAg1B,EAAAzB,2BAAAv1B,EAAAg9B,qBAAAh9B,EAAA9J,SAAA,GAAA,GAAAklC,WAGA,OAAAnE,IAIAA,EAAAt+B,MAAAs+B,EAAAt+B,MAAA28B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBACA/F,EAAAn4B,IAAAm4B,EAAAn4B,IAAAw2B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBAEAh7B,EAAA1iB,KAAA23C,IAIAj1B,EAAA1b,IAAAkc,GACA,IAAAwwC,GAAAxwC,EAAA1H,EAAA1e,IAAA0e,EAAAL,SAAAK,EAAAjT,SAAAiT,EAAAi3C,gBAKAuE,wBACAF,gBAAAM,GAEAL,mBAAAK,GAIAJ,uBAAA,CAAAx7C,EAAAkF,EAAAopC,IACAtuC,EAAAzkB,OAAA2pB,EAAA3pB,MAAAykB,EAAA1e,MAAA4jB,EAAA5jB,MACA0e,EAAAjT,WAAAmY,EAAAnY,UAAAuhD,EAAA4M,WAAAl7C,EAAAjT,WAAAmY,EAAAnY,UAKAiT,EAAA4zB,UAJA,IAAAwlB,GAAAp5C,EAAAi3C,cAOAwE,gBAAAG,GAEAF,gBAAAE,GAEAD,cAAAC,IAGAH,iBAEAr7D,gBAAA4f,EAAAkF,GAEA,MAAA0uB,EAAA5zB,EAAA4zB,QAKA,OAFAA,EAAApwB,SAAAowB,EAAApwB,SAAAi3B,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,WAAA,IAEA/E,IAGA2nB,mBAAAK,GAEAJ,uBAAAI,GAIAx7D,gBAAA4f,EAAAkF,EAAAopC,GAEA,MAAA1a,EAAA5zB,EAAA4zB,QAEA,GAAA5zB,EAAAwD,SAAAwB,QAAAE,EAAA1B,UAAA,CACA,IAAA8qC,EAAA4M,SAGA,OAAA,IAAA9B,GAAAp5C,EAAAi3C,cAFArjB,EAAA0lB,QAAAp0C,EAAA6Q,QAMA,OAAA6d,IAGA8nB,gBAAAE,GAGAx7D,cAAA4f,EAAAkF,GACA,MAAA0uB,EAAA5zB,EAAA4zB,QACA+H,EAAA/H,EAAApwB,SAAAwB,QAAAE,EAAAm1B,gBAIA,OAFAzG,EAAApwB,SAAAowB,EAAApwB,SAAAi4B,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,SAAA,EAAAugC,IAEA/H,KAIA8nB,iBAEAt7D,gBAAA4f,EAAAkF,GAEA,MAAA0uB,EAAA5zB,EAAA4zB,QAUA,OARAA,EAAA+M,WACA/M,EAAA+M,SAAA/M,EAAA+M,SAAAlG,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,WAAA,GAAA,GAAA,IAGA/E,EAAAhe,WACAge,EAAAhe,SAAAge,EAAAhe,SAAA6kB,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,WAAA,GAAA,GAAA,KAGA/E,IAGA2nB,mBAAAK,GAEAJ,uBAAAI,GAEAH,gBAAAG,GAIAx7D,gBAAA4f,EAAAkF,EAAAopC,GAEA,MAAA1a,EAAA5zB,EAAA4zB,QAEA,GAAA5zB,EAAAxjB,MAAA0oB,EAAA1oB,KAAA,CACA,IAAA8xD,EAAA4M,SAGA,OAAA,IAAA9B,GAAAp5C,EAAAi3C,cAFArjB,EAAA+M,SAAAz7B,EAAA0Q,SAMA,OAAAge,IAIAxzC,cAAA4f,EAAAkF,GAEA,MAAA0uB,EAAA5zB,EAAA4zB,QAEA,GAAAA,EAAA+M,SAAA,CACA,MAAAqb,EAAApoB,EAAA+M,SAAAlF,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,SACAw4B,EAAA+M,SAAA9F,GAAAuH,iBAAA4Z,GAGA,GAAApoB,EAAAhe,SAAA,CACA,MAAAvL,EAAAupB,EAAAhe,SAAA6lB,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,SACAw4B,EAAAhe,SAAAilB,GAAAuH,iBAAA/3B,GAGA,OAAAupB,KAIA+nB,eAGAv7D,gBAAA4f,EAAAkF,EAAAopC,GAEA,IAAA5mC,EAAAmzB,GAAAhzB,2BAAA7H,EAAAq6B,eAAAr6B,EAAA5E,SACA,MAAA6gD,EAAAj8C,EAAA27B,WAAA2S,EAAAwN,eAEAp0C,EAAAA,EAAA+yB,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,WAAA,EAAAsjB,GAAA,GAGA,MAAA/gC,OAAAp9B,IAAAwwD,EAAApzB,cAAAozB,EAAA4M,SAAA5M,EAAApzB,aAEA77B,EAAA,IAAA2gB,EAAA9f,YACAwnB,EAAA7J,MACA6J,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OACAmQ,EAAAuT,eAAAknB,2BAAAv1B,EAAA1B,SAAA0B,EAAAjK,MAAA09B,UAAAzd,GACAlb,EAAAi3C,aAKA,OAFA53D,EAAAs8C,SAAA37B,EAAA27B,UAEAt8C,IAGAk8D,mBAAAK,GAEAJ,uBAAAI,GAEAH,gBAAAG,GAEAF,gBAAAE,GAIAx7D,cAAA4f,EAAAkF,EAAAopC,GAKA,MAAA5kC,EAAAmxB,GAAAhzB,2BAAA7H,EAAAq6B,eAAAr6B,EAAA5E,SACAwO,EAAAixB,GAAAhzB,2BAAA3C,EAAAm1B,eAAAn1B,EAAA9J,SAIA,IAAA8/C,EAAA5M,EAAA4M,SAIA,MAAAe,EAAAj8C,EAAA27B,WAAA2S,EAAAwN,eAIA5gC,OAAAp9B,IAAAwwD,EAAApzB,cAAAggC,EAAA5M,EAAApzB,aAGAo9B,EAAAt4C,EAAAuT,eAAAkoB,sBACAv2B,EAAAm1B,eACAn1B,EAAAqO,eACArO,EAAA9J,QACA8f,EACAhW,EAAAy2B,WAAA2S,EAAAwN,gBASA,GAAAI,GAAAl8C,EAAAkF,IAAAg3C,GAAAh3C,EAAAlF,GAGA,OAAAkF,EAAA80C,eAUA,MAAAmC,EAAAzyC,EAAA1C,iBAAA9B,EAAAqO,iBACA7J,EAAA7L,MAAAmH,QAAAE,EAAAqO,iBAAA0oC,GACAvyC,EAAA1F,IAAAgB,QAAAE,EAAAqO,iBAAA0oC,EAIA,GAAAE,GAAAzyC,EAAA6xB,cAAA3xB,GAAA,GAMA,OAHAF,EAAA7L,MAAA6L,EAAA7L,MAAA49B,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,SAAA6gD,GACAvyC,EAAA1F,IAAA0F,EAAA1F,IAAAy3B,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,QAAA6gD,GAEAG,IAAA1yC,GAAA4uC,EAAAt4C,GAUA,IAJA4J,EAAA5C,iBAAAhH,EAAAuT,iBACA3J,EAAA/L,MAAAmH,QAAAhF,EAAAuT,iBAAArO,EAAAy2B,WAAA2S,EAAAwN,gBACAlyC,EAAA5F,IAAAgB,QAAAhF,EAAAuT,iBAAArO,EAAAy2B,WAAA2S,EAAAwN,iBAEAlyC,EAAA2xB,cAAA7xB,GAAA,GAMA,OAHAA,EAAA7L,MAAA6L,EAAA7L,MAAA28B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBACAx4B,EAAA1F,IAAA0F,EAAA1F,IAAAw2B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBAEAka,IAAA1yC,GAAA4uC,EAAAt4C,GAaA,MAAAq8C,EAAAp3C,GAAAjF,EAAAq6B,eAAAF,gBAAAj1B,EAAAm1B,eAAAF,iBAEA,GAAA,UAAAkiB,GAAA,aAAAA,EAOA,OAHA3yC,EAAA7L,MAAA6L,EAAA7L,MAAA49B,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,SAAA6gD,GACAvyC,EAAA1F,IAAA0F,EAAA1F,IAAAy3B,sBAAAv2B,EAAAm1B,eAAAn1B,EAAAqO,eAAArO,EAAA9J,QAAA6gD,GAEAG,IAAA1yC,GAAA4uC,EAAAt4C,GAeAsuC,EAAAgO,kBACAt8C,aAAA64C,MAAA3zC,aAAA2zC,IACAqC,GAAA,IACKl7C,aAAA64C,KAAA3zC,aAAA2zC,KACLqC,GAAA,IAMA,MAAAh0C,KAIAg1B,EAAAxyB,EAAAuyB,cAAAryB,GAEA,IAAA,MAAAlC,KAAAw0B,EAAA,CAEAx0B,EAAA7J,MAAA6J,EAAA7J,MAAA08B,0BAAAr1B,EAAAm1B,eAAAn1B,EAAA9J,SACAsM,EAAA1D,IAAA0D,EAAA1D,IAAAu2B,0BAAAr1B,EAAAm1B,eAAAn1B,EAAA9J,SAGA,MAAAmhD,EAAA,QAAAt3C,GAAAyC,EAAA7J,MAAAs8B,gBAAAj1B,EAAAg9B,qBAAA/H,iBACA9vB,EAAA3C,EAAA+yB,2BAAAv1B,EAAAg9B,qBAAAh9B,EAAA9J,QAAAmhD,EAAAN,GAEA/0C,EAAA1iB,QAAA6lB,GAIA,MAAA8xB,EAAAzyB,EAAA+pB,gBAAA7pB,GA+BA,OA7BA,OAAAuyB,GAAA+e,IAAAiB,IAEAhgB,EAAAt+B,MAAAs+B,EAAAt+B,MAAA28B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBACA/F,EAAAn4B,IAAAm4B,EAAAn4B,IAAAw2B,aAAAt1B,EAAAm1B,eAAAn1B,EAAAg9B,sBAQA,IAAAh7B,EAAA1hB,OACA0hB,EAAA1iB,KAAA23C,GAGA,GAAAj1B,EAAA1hB,OACAokB,EAAA/L,MAAAgJ,SAAA6C,EAAA7L,QAAA+L,EAAA/L,MAAAmH,QAAA0E,EAAA7L,OACAqJ,EAAAmZ,QAAA8b,GAEAj1B,EAAA1iB,KAAA23C,GAMAj1B,EAAAzhB,OAAA,EAAA,EAAA02C,IAIA,IAAAj1B,EAAA1hB,QAGA,IAAA4zD,GAAAp5C,EAAAi3C,cAGAmF,GAAAl1C,EAAAoxC,EAAAt4C,MAiDA,SAAA47C,GAAA3gB,GACA,OAAAA,EAAArH,SAcA,SAAAsoB,GAAAl8C,EAAAkF,GACA,OAAA,OAAAlF,EAAAuT,eAAAgnB,0BAAAr1B,EAAAm1B,eAAAn1B,EAAA9J,SAuBA,SAAAghD,GAAAl1C,EAAAqM,EAAAvT,GAUA,MAAAk7B,KAGA,IAAA,IAAAj/C,EAAA,EAAiBA,EAAAirB,EAAA1hB,OAAmBvJ,IAAA,CAEpC,MAAAo8D,EAAAmE,GAAAt1C,EAAAjrB,GAAAs3B,EAAAvT,EAAA27B,UAEAT,EAAA12C,KAAA6zD,GAGA,IAAA,IAAA/c,EAAAr/C,EAAA,EAAsBq/C,EAAAp0B,EAAA1hB,OAAmB81C,IAMzCp0B,EAAAo0B,GAAAp0B,EAAAo0B,GAAAG,sBAAA4c,EAAAhe,eAAAge,EAAA9kC,eAAA8kC,EAAAj9C,SAAA,GAGAmY,EAAAA,EAAAkoB,sBAAA4c,EAAAhe,eAAAge,EAAA9kC,eAAA8kC,EAAAj9C,SAAA,GAAA,GAGA,OAAA8/B,EAGA,SAAAshB,GAAA90C,EAAA6L,EAAAooB,GAEA,IAAA8gB,EAUA,MAAAp9D,EAAA,IAPAo9D,EADA,cAAAlpC,EAAAh4B,KAAA2nB,SACA21C,GACE,cAAAnxC,EAAA7J,MAAAtiB,KAAA2nB,SACF01C,GAEAR,IAIA1wC,EAAA7J,MACA6J,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OACA0jB,EACA,GAKA,OAFAl0B,EAAAs8C,SAAAA,EAEAt8C,EC1pBA,IAAAq9D,GArBA,SAAAt0D,EAAAyV,EAAAmG,GACA,IAAAzb,GAAA,EACA/C,EAAA4C,EAAA5C,OAEAqY,EAAA,IACAA,GAAAA,EAAArY,EAAA,EAAAA,EAAAqY,IAEAmG,EAAAA,EAAAxe,EAAAA,EAAAwe,GACA,IACAA,GAAAxe,GAEAA,EAAAqY,EAAAmG,EAAA,EAAAA,EAAAnG,IAAA,EACAA,KAAA,EAGA,IADA,IAAAxe,EAAA4G,MAAAT,KACA+C,EAAA/C,GACAnG,EAAAkJ,GAAAH,EAAAG,EAAAsV,GAEA,OAAAxe,GCtBAs9D,GAAA/5D,KAAAg6D,KACAC,GAAAj6D,KAAA+a,IA2CA,IAAAm/C,GApBA,SAAA10D,EAAA8J,EAAAkM,GAEAlM,GADAkM,EAAA/B,GAAAjU,EAAA8J,EAAAkM,QAAAtgB,IAAAoU,GACA,EAEA2qD,GAAAt/C,GAAArL,GAAA,GAEA,IAAA1M,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,IAAAA,GAAA0M,EAAA,EACA,SAMA,IAJA,IAAA3J,EAAA,EACAw0D,EAAA,EACA19D,EAAA4G,MAAA02D,GAAAn3D,EAAA0M,IAEA3J,EAAA/C,GACAnG,EAAA09D,KAAAL,GAAAt0D,EAAAG,EAAAA,GAAA2J,GAEA,OAAA7S,GChBA,IAAA29D,GAfA,SAAA50D,GAMA,IALA,IAAAG,GAAA,EACA/C,EAAA4C,EAAAA,EAAA5C,OAAA,EACAu3D,EAAA,EACA19D,OAEAkJ,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACAtL,IACAoC,EAAA09D,KAAA9/D,GAGA,OAAAoC,GCbA,IAAA49D,GAJA,SAAAhgE,GACA,OAAAiR,GAAAjR,IAAAgR,GAAAhR,IC0BA,IAAAigE,GAvBA,SAAAC,EAAA/0D,EAAAg1D,EAAA51B,EAAA61B,EAAAh+D,GACA,IAAAkJ,GAAA,EACA/C,EAAA4C,EAAA5C,OAKA,IAHAgiC,IAAAA,EAAAy1B,IACA59D,IAAAA,QAEAkJ,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACA60D,EAAA,GAAA51B,EAAAvqC,GACAmgE,EAAA,EAEAD,EAAAlgE,EAAAmgE,EAAA,EAAA51B,EAAA61B,EAAAh+D,GAEAsQ,GAAAtQ,EAAApC,GAEKogE,IACLh+D,EAAAA,EAAAmG,QAAAvI,GAGA,OAAAoC,GCOA,IAAAi+D,GAdA,WAMA,IALA,IAAA93D,EAAAuY,UAAAvY,OACA1B,EAAAmC,MAAAT,EAAAA,EAAA,EAAA,GACA4C,EAAA2V,UAAA,GACAxV,EAAA/C,EAEA+C,KACAzE,EAAAyE,EAAA,GAAAwV,UAAAxV,GAEA,OAAA/C,EACAmK,GAAAzB,GAAA9F,GAAAmH,GAAAnH,IAAAA,GAAA80D,GAAAp5D,EAAA,QCfA,IAAAy5D,GAbA,SAAAn1D,EAAAo1D,EAAAC,GAIA,IAHA,IAAAj4D,EAAA4C,EAAA5C,OACA+C,EAAAi1D,GAAAC,EAAA,GAAA,GAEAA,EAAAl1D,MAAAA,EAAA/C,GAAA,CACA,IAAA0C,EAAAE,EAAAG,GACA,GAAAL,GAAAA,EACA,OAAAK,EAGA,OAAA,GCOA,IAAAm1D,GAfA,SAAAt1D,EAAAnL,EAAAugE,GACA,GAAAvgE,GAAAA,EACA,OAAAsgE,GAAAn1D,EAAAo1D,GAKA,IAHA,IAAAj1D,EAAAi1D,EAAA,EACAh4D,EAAA4C,EAAA5C,SAEA+C,EAAA/C,GACA,GAAA4C,EAAAG,KAAAtL,EACA,OAAAsL,EAGA,OAAA,GCRA,IAAAo1D,GAJA,SAAAv1D,EAAAnL,GACA,QAAAmL,EAAA5C,QAAAk4D,GAAAt1D,EAAAnL,EAAA,IAAA,GCSA,IAAA2gE,GAZA,SAAAx1D,EAAAnL,EAAA4gE,GAIA,IAHA,IAAAt1D,GAAA,EACA/C,EAAA4C,EAAA5C,SAEA+C,EAAA/C,GACA,GAAAq4D,EAAA5gE,EAAAmL,EAAAG,IACA,OAAA,EAGA,OAAA,GCEA,IAAAu1D,GAXA,SAAA11D,EAAAoE,GAKA,IAJA,IAAAjE,GAAA,EACA/C,EAAA4C,EAAA5C,OACAnG,EAAA4G,MAAAT,KAEA+C,EAAA/C,GACAnG,EAAAkJ,GAAAiE,EAAApE,EAAAG,GAAAA,EAAAH,GAEA,OAAA/I,GCJA,IAAA0+D,GANA,SAAAl0D,GACA,OAAA,SAAA5M,GACA,OAAA4M,EAAA5M,KCGA,IAAA+gE,GAJA,SAAA5xD,EAAA9K,GACA,OAAA8K,EAAAtD,IAAAxH,ICDA28D,GAAA,IA0DA,IAAAC,GA7CA,SAAA91D,EAAAwH,EAAApD,EAAAqxD,GACA,IAAAt1D,GAAA,EACA87B,EAAAs5B,GACAQ,GAAA,EACA34D,EAAA4C,EAAA5C,OACAnG,KACA++D,EAAAxuD,EAAApK,OAEA,IAAAA,EACA,OAAAnG,EAEAmN,IACAoD,EAAAkuD,GAAAluD,EAAAmuD,GAAAvxD,KAEAqxD,GACAx5B,EAAAu5B,GACAO,GAAA,GAEAvuD,EAAApK,QAAAy4D,KACA55B,EAAA25B,GACAG,GAAA,EACAvuD,EAAA,IAAA03B,GAAA13B,IAEAyuD,EACA,OAAA91D,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACA+1D,EAAA9xD,EAAAA,EAAAvP,GAAAA,EAGA,GADAA,EAAA4gE,GAAA,IAAA5gE,EAAAA,EAAA,EACAkhE,GAAAG,GAAAA,EAAA,CAEA,IADA,IAAAC,EAAAH,EACAG,KACA,GAAA3uD,EAAA2uD,KAAAD,EACA,SAAAD,EAGAh/D,EAAAmF,KAAAvH,QAEAonC,EAAAz0B,EAAA0uD,EAAAT,IACAx+D,EAAAmF,KAAAvH,GAGA,OAAAoC,GCjCAm/D,GANA5gD,GAAA,SAAAxV,EAAAwH,GACA,OAAAlC,GAAAtF,GACA81D,GAAA91D,EAAA80D,GAAAttD,EAAA,EAAAlC,IAAA,SCtBA+wD,GAAA,EACAC,GAAA,EAwDA,IAAAC,GA5CA,SAAAvhE,EAAA8D,EAAA09D,EAAA9xD,GACA,IAAAvE,EAAAq2D,EAAAp5D,OACAA,EAAA+C,EACAs2D,GAAA/xD,EAEA,GAAA,MAAA1P,EACA,OAAAoI,EAGA,IADApI,EAAAT,OAAAS,GACAmL,KAAA,CACA,IAAA5G,EAAAi9D,EAAAr2D,GACA,GAAAs2D,GAAAl9D,EAAA,GACAA,EAAA,KAAAvE,EAAAuE,EAAA,MACAA,EAAA,KAAAvE,GAEA,OAAA,EAGA,OAAAmL,EAAA/C,GAAA,CAEA,IAAAlE,GADAK,EAAAi9D,EAAAr2D,IACA,GACAoE,EAAAvP,EAAAkE,GACAw9D,EAAAn9D,EAAA,GAEA,GAAAk9D,GAAAl9D,EAAA,IACA,QAAA7D,IAAA6O,KAAArL,KAAAlE,GACA,OAAA,MAEK,CACL,IAAAiY,EAAA,IAAA/I,GACA,GAAAQ,EACA,IAAAzN,EAAAyN,EAAAH,EAAAmyD,EAAAx9D,EAAAlE,EAAA8D,EAAAmU,GAEA,UAAAvX,IAAAuB,EACA4rC,GAAA6zB,EAAAnyD,EAAAG,EAAA2xD,GAAAC,GAAArpD,GACAhW,GAEA,OAAA,GAIA,OAAA,GC5CA,IAAA0/D,GAJA,SAAA9hE,GACA,OAAAA,GAAAA,IAAAmM,EAAAnM,ICMA,IAAA+hE,GANA,SAAA5hE,EAAAyP,GACA,OAAAixD,GAAAjxD,EAAA,SAAAvL,GACA,OAAAA,EAAAlE,EAAAkE,OCIA,IAAA29D,GAVA,SAAAr4D,GACA,IAAA2B,GAAA,EACAlJ,EAAA4G,MAAAW,EAAAsL,MAKA,OAHAtL,EAAAvF,QAAA,SAAApE,GACAoC,IAAAkJ,IAAAtL,EAAAA,KAEAoC,GCRA6/D,GAAA,eACAC,GAAA,eAsBA,ICAAC,GDbA,SAAArvD,GACA,OAAA,SAAA3S,GACA,IAAAsM,EAAAsH,GAAA5T,GACA,OAAAsM,GAAAw1D,GACAjtD,GAAA7U,GAEAsM,GAAAy1D,GACAF,GAAA7hE,GAEA4hE,GAAA5hE,EAAA2S,EAAA3S,KCEAiiE,CAAAvwD,ICPA,IAAAwwD,GAVA,SAAAliE,GAIA,IAHA,IAAAiC,EAAA+/D,GAAAhiE,GACAoI,EAAAnG,EAAAmG,OAEAA,KACAnG,EAAAmG,GAAA,GAAAu5D,GAAA1/D,EAAAmG,GAAA,IAEA,OAAAnG,GCEA,IAAAkgE,GAVA,SAAAj+D,EAAAw9D,GACA,OAAA,SAAA1hE,GACA,OAAA,MAAAA,GAGAA,EAAAkE,KAAAw9D,SACAhhE,IAAAghE,GAAAx9D,KAAA3E,OAAAS,MCMA,IAAAoiE,GAVA,SAAAt+D,GACA,IAAA09D,EAAAU,GAAAp+D,GACA,OAAA,GAAA09D,EAAAp5D,QAAAo5D,EAAA,GAAA,GACAW,GAAAX,EAAA,GAAA,GAAAA,EAAA,GAAA,IAEA,SAAAxhE,GACA,OAAAA,IAAA8D,GAAAy9D,GAAAvhE,EAAA8D,EAAA09D,KCdAa,GAAA,sBA8CA,SAAAC,GAAA71D,EAAA81D,GACA,GAAA,mBAAA91D,GAAA81D,GAAA,mBAAAA,EACA,MAAA,IAAA7hD,UAAA2hD,IAEA,IAAAG,EAAA,WACA,IAAA97D,EAAAia,UACAzc,EAAAq+D,EAAAA,EAAAx5D,MAAA5F,KAAAuD,GAAAA,EAAA,GACAsI,EAAAwzD,EAAAxzD,MAEA,GAAAA,EAAAtD,IAAAxH,GACA,OAAA8K,EAAArP,IAAAuE,GAEA,IAAAjC,EAAAwK,EAAA1D,MAAA5F,KAAAuD,GAEA,OADA87D,EAAAxzD,MAAAA,EAAAxF,IAAAtF,EAAAjC,GACAA,GAGA,OADAugE,EAAAxzD,MAAA,IAAAszD,GAAAG,OAAA5zD,IACA2zD,EAIAF,GAAAG,MAAA5zD,GAEA,IAAA6zD,GAAA,GCpEAC,GAAA,EAAA,EAGAC,GAAAltD,GAAAA,GAAAxV,eAAAQ,EACAmiE,GAAAD,GAAAA,GAAA1gE,cAAAxB,EAsBA,IAAAoiE,GAZA,SAAAjjE,GAEA,GAAA,iBAAAA,EACA,OAAAA,EAEA,GAAAyf,GAAAzf,GACA,OAAAgjE,GAAAA,GAAA7jE,KAAAa,GAAA,GAEA,IAAAoC,EAAApC,EAAA,GACA,MAAA,KAAAoC,GAAA,EAAApC,IAAA8iE,GAAA,KAAA1gE,GCAA,IAAA8gE,GAJA,SAAAljE,GACA,OAAA,MAAAA,EAAA,GAAAijE,GAAAjjE,ICpBAmjE,GAAA,sEAGAC,GAAA,WAiBAC,GARAR,GAAA,SAAAr0D,GACA,IAAApM,KAIA,OAHA8gE,GAAA10D,GAAArB,QAAAg2D,GAAA,SAAAl+D,EAAAq+D,EAAAC,EAAA/0D,GACApM,EAAAmF,KAAAg8D,EAAA/0D,EAAArB,QAAAi2D,GAAA,MAAAE,GAAAr+D,KAEA7C,ICPA,IAAAohE,GAJA,SAAAxjE,GACA,OAAAiR,GAAAjR,GAAAA,EAAAqjE,GAAArjE,ICPAyjE,GAAA,mDACAC,GAAA,QAuBA,IAAAC,GAbA,SAAA3jE,EAAAG,GACA,GAAA8Q,GAAAjR,GACA,OAAA,EAEA,IAAAoM,SAAApM,EACA,QAAA,UAAAoM,GAAA,UAAAA,GAAA,WAAAA,GACA,MAAApM,IAAAyf,GAAAzf,KAGA0jE,GAAAr2D,KAAArN,KAAAyjE,GAAAp2D,KAAArN,IACA,MAAAG,GAAAH,KAAAN,OAAAS,ICtBAyjE,GAAA,EAAA,EAiBA,IAAAC,GARA,SAAA7jE,GACA,GAAA,iBAAAA,GAAAyf,GAAAzf,GACA,OAAAA,EAEA,IAAAoC,EAAApC,EAAA,GACA,MAAA,KAAAoC,GAAA,EAAApC,IAAA4jE,GAAA,KAAAxhE,GCOA,IAAA0hE,GAZA,SAAA3jE,EAAAmF,GAMA,IAHA,IAAAgG,EAAA,EACA/C,GAHAjD,EAAAq+D,GAAAr+D,EAAAnF,IAAAmF,GAAAk+D,GAAAl+D,IAGAiD,OAEA,MAAApI,GAAAmL,EAAA/C,GACApI,EAAAA,EAAA0jE,GAAAv+D,EAAAgG,OAEA,OAAAA,GAAAA,GAAA/C,EAAApI,OAAAU,GCWA,IAAAkjE,GALA,SAAA5jE,EAAAmF,EAAA0+D,GACA,IAAA5hE,EAAA,MAAAjC,OAAAU,EAAAijE,GAAA3jE,EAAAmF,GACA,YAAAzE,IAAAuB,EAAA4hE,EAAA5hE,GCjBA,IAAA6hE,GAJA,SAAA9jE,EAAAkE,GACA,OAAAA,KAAA3E,OAAAS,IC+BA,IAAA+jE,GAtBA,SAAA/jE,EAAAmF,EAAA6+D,GAOA,IAJA,IAAA/hE,EACAkJ,GAAA,EACA/C,GAJAjD,EAAAq+D,GAAAr+D,EAAAnF,IAAAmF,GAAAk+D,GAAAl+D,IAIAiD,SAEA+C,EAAA/C,GAAA,CACA,IAAAlE,EAAAw/D,GAAAv+D,EAAAgG,IACA,KAAAlJ,EAAA,MAAAjC,GAAAgkE,EAAAhkE,EAAAkE,IACA,MAEAlE,EAAAA,EAAAkE,GAEA,OAAAjC,MAGAmG,EAAApI,EAAAA,EAAAoI,OAAA,IACAgI,GAAAhI,IAAAmJ,GAAArN,EAAAkE,KACA0I,GAAA9Q,IAAAkR,GAAAlR,IAAA6Q,GAAA7Q,KCJA,IAAAikE,GAJA,SAAAjkE,EAAAmF,GACA,OAAA,MAAAnF,GAAA+jE,GAAA/jE,EAAAmF,EAAA2+D,KCrBAI,GAAA,EACAC,GAAA,EAsBA,IAAAC,GAZA,SAAAj/D,EAAAu8D,GACA,OAAA8B,GAAAr+D,IAAAw8D,GAAAD,GACAS,GAAAuB,GAAAv+D,GAAAu8D,GAEA,SAAA1hE,GACA,IAAAuP,EAAAq0D,GAAA5jE,EAAAmF,GACA,YAAAzE,IAAA6O,GAAAA,IAAAmyD,EACAuC,GAAAjkE,EAAAmF,GACA0oC,GAAA6zB,EAAAnyD,OAAA7O,EAAAwjE,GAAAC,MCRA,IAAAE,GAJA,SAAAxkE,GACA,OAAAA,GCFA,IAAAykE,GANA,SAAAn/D,GACA,OAAA,SAAAnF,GACA,OAAA2jE,GAAA3jE,EAAAmF,KCoBA,IAAAo/D,GAJA,SAAAp/D,GACA,OAAAq+D,GAAAr+D,GAAA8K,GAAAyzD,GAAAv+D,IAAAm/D,GAAAn/D,ICEA,IAAAq/D,GAjBA,SAAA3kE,GAGA,MAAA,mBAAAA,EACAA,EAEA,MAAAA,EACAwkE,GAEA,iBAAAxkE,EACAiR,GAAAjR,GACAukE,GAAAvkE,EAAA,GAAAA,EAAA,IACAuiE,GAAAviE,GAEA0kE,GAAA1kE,ICcA4kE,GAVAjkD,GAAA,SAAAxV,EAAAwH,GACA,IAAApD,EAAAqtC,GAAAjqC,GAIA,OAHAlC,GAAAlB,KACAA,OAAA1O,GAEA4P,GAAAtF,GACA81D,GAAA91D,EAAA80D,GAAAttD,EAAA,EAAAlC,IAAA,GAAAk0D,GAAAp1D,SCAAs1D,GAVAlkD,GAAA,SAAAxV,EAAAwH,GACA,IAAAiuD,EAAAhkB,GAAAjqC,GAIA,OAHAlC,GAAAmwD,KACAA,OAAA//D,GAEA4P,GAAAtF,GACA81D,GAAA91D,EAAA80D,GAAAttD,EAAA,EAAAlC,IAAA,QAAA5P,EAAA+/D,QCIA,IAAAkE,GATA,SAAA35D,EAAAlL,EAAAkhB,GACA,IAAA5Y,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,GAGAtI,EAAAkhB,QAAAtgB,IAAAZ,EAAA,EAAAqgB,GAAArgB,GACAw/D,GAAAt0D,EAAAlL,EAAA,EAAA,EAAAA,EAAAsI,QCIA,IAAAw8D,GAVA,SAAA55D,EAAAlL,EAAAkhB,GACA,IAAA5Y,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,GAGAtI,EAAAkhB,QAAAtgB,IAAAZ,EAAA,EAAAqgB,GAAArgB,GAEAw/D,GAAAt0D,EAAA,GADAlL,EAAAsI,EAAAtI,GACA,EAAA,EAAAA,QCVA,IAAA+kE,GAZA,SAAA75D,EAAAo/B,EAAA06B,EAAAzE,GAIA,IAHA,IAAAj4D,EAAA4C,EAAA5C,OACA+C,EAAAk1D,EAAAj4D,GAAA,GAEAi4D,EAAAl1D,MAAAA,EAAA/C,IACAgiC,EAAAp/B,EAAAG,GAAAA,EAAAH,KAEA,OAAA85D,EACAxF,GAAAt0D,EAAAq1D,EAAA,EAAAl1D,EAAAk1D,EAAAl1D,EAAA,EAAA/C,GACAk3D,GAAAt0D,EAAAq1D,EAAAl1D,EAAA,EAAA,EAAAk1D,EAAAj4D,EAAA+C,ICuBA,IAAA45D,GANA,SAAA/5D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAy8D,GAAA75D,EAAAw5D,GAAAp6B,EAAA,IAAA,GAAA,OCIA,IAAA46B,GANA,SAAAh6D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAy8D,GAAA75D,EAAAw5D,GAAAp6B,EAAA,IAAA,OCpBA,IAAA66B,GAZA,SAAA9B,EAAA+B,EAAAC,GASA,OARAhC,GAAAA,SACAziE,IAAAykE,IACAhC,EAAAA,GAAAgC,EAAAhC,EAAAgC,QAEAzkE,IAAAwkE,IACA/B,EAAAA,GAAA+B,EAAA/B,EAAA+B,IAGA/B,GCdAiC,GAAA,WAiCA,IAAAC,GAJA,SAAAxlE,GACA,OAAAA,EAAAolE,GAAA9kD,GAAAtgB,GAAA,EAAAulE,IAAA,GCHA,IAAAE,GAlBA,SAAAt6D,EAAAnL,EAAA4gB,EAAAmG,GACA,IAAAxe,EAAA4C,EAAA5C,OAWA,KATAqY,EAAAN,GAAAM,IACA,IACAA,GAAAA,EAAArY,EAAA,EAAAA,EAAAqY,IAEAmG,OAAAlmB,IAAAkmB,GAAAA,EAAAxe,EAAAA,EAAA+X,GAAAyG,IACA,IACAA,GAAAxe,GAEAwe,EAAAnG,EAAAmG,EAAA,EAAAy+C,GAAAz+C,GACAnG,EAAAmG,GACA5b,EAAAyV,KAAA5gB,EAEA,OAAAmL,GCgBA,IAAAu6D,GAZA,SAAAv6D,EAAAnL,EAAA4gB,EAAAmG,GACA,IAAAxe,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,GAGAqY,GAAA,iBAAAA,GAAAxB,GAAAjU,EAAAnL,EAAA4gB,KACAA,EAAA,EACAmG,EAAAxe,GAEAk9D,GAAAt6D,EAAAnL,EAAA4gB,EAAAmG,QCnBA,IAAA4+C,GAZA,SAAAx6D,EAAAo/B,EAAAi2B,GAIA,IAHA,IAAAj4D,EAAA4C,EAAA5C,OACA+C,EAAAk1D,EAAAj4D,GAAA,EAEAi4D,EAAAl1D,MAAAA,EAAA/C,GACA,GAAAgiC,EAAAp/B,EAAAG,GAAAA,EAAAH,GACA,OAAAG,EAGA,OAAA,GCyBA,IAAAs6D,GANA,SAAAz6D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAo9D,GAAAx6D,EAAAw5D,GAAAp6B,EAAA,KACA,GCGA,IAAAs7B,GANA,SAAA16D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAo9D,GAAAx6D,EAAAw5D,GAAAp6B,EAAA,IAAA,IACA,GCnBA,IAAAu7B,GAJA,SAAA36D,GACA,OAAAA,GAAAA,EAAA5C,OAAA4C,EAAA,QAAAtK,GCEA,IAAAklE,GALA,SAAA56D,GAEA,OADAA,GAAAA,EAAA5C,OACA03D,GAAA90D,EAAA,OCfA66D,GAAA,EAAA,EAqBA,IAAAC,GALA,SAAA96D,GAEA,OADAA,GAAAA,EAAA5C,OACA03D,GAAA90D,EAAA66D,QCWA,IAAAE,GATA,SAAA/6D,EAAAg1D,GAEA,OADAh1D,GAAAA,EAAA5C,QAIA43D,OAAAt/D,IAAAs/D,EAAA,EAAA7/C,GAAA6/C,GACAF,GAAA90D,EAAAg1D,QCFA,IAAAgG,GAZA,SAAAC,GAKA,IAJA,IAAA96D,GAAA,EACA/C,EAAA69D,EAAAA,EAAA79D,OAAA,EACAnG,OAEAkJ,EAAA/C,GAAA,CACA,IAAAqM,EAAAwxD,EAAA96D,GACAlJ,EAAAwS,EAAA,IAAAA,EAAA,GAEA,OAAAxS,GCpBAikE,GAAA1gE,KAAA+a,IAqCA,IAAA4lD,GAZA,SAAAn7D,EAAAnL,EAAAugE,GACA,IAAAh4D,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,IAGAg4D,EAAAjgD,GAAAigD,IACA,IACAA,EAAA8F,GAAA99D,EAAAg4D,EAAA,IAEAE,GAAAt1D,EAAAnL,EAAAugE,KANA,GCZA,IAAAgG,GAJA,SAAAp7D,GACA,OAAA45D,GAAA55D,EAAA,ICTAq7D,GAAA7gE,KAAAwiB,IAiEA,IAAAs+C,GArDA,SAAAC,EAAAn3D,EAAAqxD,GASA,IARA,IAAAx5B,EAAAw5B,EAAAD,GAAAD,GACAn4D,EAAAm+D,EAAA,GAAAn+D,OACAuiC,EAAA47B,EAAAn+D,OACA4iC,EAAAL,EACA67B,EAAA39D,MAAA8hC,GACA87B,EAAAC,EAAAA,EACAzkE,KAEA+oC,KAAA,CACA,IAAAhgC,EAAAu7D,EAAAv7B,GACAA,GAAA57B,IACApE,EAAA01D,GAAA11D,EAAA21D,GAAAvxD,KAEAq3D,EAAAJ,GAAAr7D,EAAA5C,OAAAq+D,GACAD,EAAAx7B,IAAAy1B,IAAArxD,GAAAhH,GAAA,KAAA4C,EAAA5C,QAAA,KACA,IAAA8hC,GAAAc,GAAAhgC,QACAtK,EAEAsK,EAAAu7D,EAAA,GAEA,IAAAp7D,GAAA,EACAy/B,EAAA47B,EAAA,GAEAvF,EACA,OAAA91D,EAAA/C,GAAAnG,EAAAmG,OAAAq+D,GAAA,CACA,IAAA5mE,EAAAmL,EAAAG,GACA+1D,EAAA9xD,EAAAA,EAAAvP,GAAAA,EAGA,GADAA,EAAA4gE,GAAA,IAAA5gE,EAAAA,EAAA,IACA+qC,EACAg2B,GAAAh2B,EAAAs2B,GACAj6B,EAAAhlC,EAAAi/D,EAAAT,IACA,CAEA,IADAz1B,EAAAL,IACAK,GAAA,CACA,IAAAh8B,EAAAw3D,EAAAx7B,GACA,KAAAh8B,EACA4xD,GAAA5xD,EAAAkyD,GACAj6B,EAAAs/B,EAAAv7B,GAAAk2B,EAAAT,IAEA,SAAAQ,EAGAr2B,GACAA,EAAAxjC,KAAA85D,GAEAj/D,EAAAmF,KAAAvH,IAGA,OAAAoC,GCzDA,IAAA0kE,GAJA,SAAA9mE,GACA,OAAAyQ,GAAAzQ,GAAAA,MCmBA+mE,GAPApmD,GAAA,SAAA+lD,GACA,IAAAM,EAAAnG,GAAA6F,EAAAI,IACA,OAAAE,EAAAz+D,QAAAy+D,EAAA,KAAAN,EAAA,GACAD,GAAAO,QCmBAC,GAdAtmD,GAAA,SAAA+lD,GACA,IAAAn3D,EAAAqtC,GAAA8pB,GACAM,EAAAnG,GAAA6F,EAAAI,IAOA,OALAv3D,IAAAqtC,GAAAoqB,GACAz3D,OAAA1O,EAEAmmE,EAAAjjE,MAEAijE,EAAAz+D,QAAAy+D,EAAA,KAAAN,EAAA,GACAD,GAAAO,EAAArC,GAAAp1D,SCCA23D,GAdAvmD,GAAA,SAAA+lD,GACA,IAAA9F,EAAAhkB,GAAA8pB,GACAM,EAAAnG,GAAA6F,EAAAI,IAOA,OALAlG,IAAAhkB,GAAAoqB,GACApG,OAAA//D,EAEAmmE,EAAAjjE,MAEAijE,EAAAz+D,QAAAy+D,EAAA,KAAAN,EAAA,GACAD,GAAAO,OAAAnmE,EAAA+/D,QCjCAuG,GAHAn+D,MAAA3I,UAGA0c,KAqBA,IAAAqqD,GAJA,SAAAj8D,EAAAk8D,GACA,OAAAl8D,EAAAg8D,GAAAhoE,KAAAgM,EAAAk8D,GAAA,IClBAC,GAAA3hE,KAAA+a,IACA6mD,GAAA5hE,KAAAwiB,IAgDA,IAAAq/C,GAzBA,SAAAr8D,EAAAnL,EAAAugE,GACA,IAAAh4D,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,IAAAA,EACA,OAAA,EAEA,IAAA+C,EAAA/C,EASA,QARA1H,IAAA0/D,IAEAj1D,IADAA,EAAAgV,GAAAigD,IAEA,EACA+G,GAAA/+D,EAAA+C,EAAA,GACAi8D,GAAAj8D,EAAA/C,EAAA,IACA,GAEAvI,GAAAA,EACA,OAAAsgE,GAAAn1D,EAAAG,GAAA,GAEA,KAAAA,KACA,GAAAH,EAAAG,KAAAtL,EACA,OAAAsL,EAGA,OAAA,GC/BA,IAAAm8D,GATA,SAAAt8D,EAAAlL,GACA,IAAAsI,EAAA4C,EAAA5C,OACA,GAAAA,EAIA,OAAAmJ,GADAzR,GAAAA,EAAA,EAAAsI,EAAA,EACAA,GAAA4C,EAAAlL,QAAAY,GCYA,IAAA6mE,GAJA,SAAAv8D,EAAAlL,GACA,OAAAkL,GAAAA,EAAA5C,OAAAk/D,GAAAt8D,EAAAmV,GAAArgB,SAAAY,GCHA,IAAA8mE,GAZA,SAAAx8D,EAAAnL,EAAAugE,EAAAK,GAIA,IAHA,IAAAt1D,EAAAi1D,EAAA,EACAh4D,EAAA4C,EAAA5C,SAEA+C,EAAA/C,GACA,GAAAq4D,EAAAz1D,EAAAG,GAAAtL,GACA,OAAAsL,EAGA,OAAA,GCVAs8D,GAHA5+D,MAAA3I,UAGAmI,OAqCA,IAAAq/D,GAxBA,SAAA18D,EAAAwH,EAAApD,EAAAqxD,GACA,IAAA93D,EAAA83D,EAAA+G,GAAAlH,GACAn1D,GAAA,EACA/C,EAAAoK,EAAApK,OACAwiC,EAAA5/B,EAKA,IAHAoE,IACAw7B,EAAA81B,GAAA11D,EAAA21D,GAAAvxD,OAEAjE,EAAA/C,GAKA,IAJA,IAAAg4D,EAAA,EACAvgE,EAAA2S,EAAArH,GACA+1D,EAAA9xD,EAAAA,EAAAvP,GAAAA,GAEAugE,EAAAz3D,EAAAiiC,EAAAs2B,EAAAd,EAAAK,KAAA,GACA71B,IAAA5/B,GACAy8D,GAAAzoE,KAAA4rC,EAAAw1B,EAAA,GAEAqH,GAAAzoE,KAAAgM,EAAAo1D,EAAA,GAGA,OAAAp1D,GCfA,IAAA28D,GANA,SAAA38D,EAAAwH,GACA,OAAAxH,GAAAA,EAAA5C,QAAAoK,GAAAA,EAAApK,OACAs/D,GAAA18D,EAAAwH,GACAxH,GCGA48D,GAFApnD,GAAAmnD,ICOA,IAAAE,GANA,SAAA78D,EAAAwH,EAAApD,GACA,OAAApE,GAAAA,EAAA5C,QAAAoK,GAAAA,EAAApK,OACAs/D,GAAA18D,EAAAwH,EAAAgyD,GAAAp1D,IACApE,GCCA,IAAA88D,GANA,SAAA98D,EAAAwH,EAAAiuD,GACA,OAAAz1D,GAAAA,EAAA5C,QAAAoK,GAAAA,EAAApK,OACAs/D,GAAA18D,EAAAwH,OAAA9R,EAAA+/D,GACAz1D,GCNA,IAAA+8D,GAZA,SAAA/nE,EAAAgoE,GAMA,IALA,IAAA78D,GAAA,EACA88D,EAAA,MAAAjoE,EACAoI,EAAA4/D,EAAA5/D,OACAnG,EAAA4G,MAAAT,KAEA+C,EAAA/C,GACAnG,EAAAkJ,GAAA88D,OAAAvnE,EAAAkjE,GAAA5jE,EAAAgoE,EAAA78D,IAEA,OAAAlJ,GCJA,IAAAimE,GAJA,SAAAloE,EAAAmF,GACA,OAAA,GAAAA,EAAAiD,OAAApI,EAAA2jE,GAAA3jE,EAAAs/D,GAAAn6D,EAAA,GAAA,KCDAgjE,GAHAt/D,MAAA3I,UAGAmI,OAsCA,IAAA+/D,GA3BA,SAAAp9D,EAAA4G,GAIA,IAHA,IAAAxJ,EAAA4C,EAAA4G,EAAAxJ,OAAA,EACAiN,EAAAjN,EAAA,EAEAA,KAAA,CACA,IAAA+C,EAAAyG,EAAAxJ,GACA,GAAAA,GAAAiN,GAAAlK,IAAAk9D,EAAA,CACA,IAAAA,EAAAl9D,EACA,GAAAoG,GAAApG,GACAg9D,GAAAnpE,KAAAgM,EAAAG,EAAA,QAEA,GAAAq4D,GAAAr4D,EAAAH,UASAA,EAAA04D,GAAAv4D,QATA,CACA,IAAAhG,EAAAk+D,GAAAl4D,GACAnL,EAAAkoE,GAAAl9D,EAAA7F,GAEA,MAAAnF,UACAA,EAAA0jE,GAAAjnB,GAAAt3C,OAQA,OAAA6F,GCNA,IAAAs9D,GA9BA,SAAAzoE,EAAAiL,GACA,GAAAjL,IAAAiL,EAAA,CACA,IAAAy9D,OAAA7nE,IAAAb,EACA2oE,EAAA,OAAA3oE,EACA4oE,EAAA5oE,GAAAA,EACA6oE,EAAAppD,GAAAzf,GAEA8oE,OAAAjoE,IAAAoK,EACA89D,EAAA,OAAA99D,EACA+9D,EAAA/9D,GAAAA,EACAg+D,EAAAxpD,GAAAxU,GAEA,IAAA89D,IAAAE,IAAAJ,GAAA7oE,EAAAiL,GACA49D,GAAAC,GAAAE,IAAAD,IAAAE,GACAN,GAAAG,GAAAE,IACAN,GAAAM,IACAJ,EACA,OAAA,EAEA,IAAAD,IAAAE,IAAAI,GAAAjpE,EAAAiL,GACAg+D,GAAAP,GAAAE,IAAAD,IAAAE,GACAE,GAAAL,GAAAE,IACAE,GAAAF,IACAI,EACA,OAAA,EAGA,OAAA,GCQAE,GAbAvoD,GAAA,SAAAxV,EAAA4G,GACAA,EAAAkuD,GAAAluD,EAAA,GAEA,IAAAxJ,EAAA4C,EAAAA,EAAA5C,OAAA,EACAnG,EAAA8lE,GAAA/8D,EAAA4G,GAMA,OAJAw2D,GAAAp9D,EAAA01D,GAAA9uD,EAAA,SAAAzG,GACA,OAAAoG,GAAApG,EAAA/C,IAAA+C,EAAAA,IACG8R,KAAAqrD,KAEHrmE,ICWA,IAAA+mE,GArBA,SAAAh+D,EAAAo/B,GACA,IAAAnoC,KACA,IAAA+I,IAAAA,EAAA5C,OACA,OAAAnG,EAEA,IAAAkJ,GAAA,EACAyG,KACAxJ,EAAA4C,EAAA5C,OAGA,IADAgiC,EAAAo6B,GAAAp6B,EAAA,KACAj/B,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACAi/B,EAAAvqC,EAAAsL,EAAAH,KACA/I,EAAAmF,KAAAvH,GACA+R,EAAAxK,KAAA+D,IAIA,OADAi9D,GAAAp9D,EAAA4G,GACA3P,GC9CAgnE,GAHApgE,MAAA3I,UAGAgjD,QA6BA,IAAAgmB,GAJA,SAAAl+D,GACA,OAAAA,EAAAi+D,GAAAjqE,KAAAgM,GAAAA,GCMA,IAAAm+D,GAhBA,SAAAn+D,EAAAyV,EAAAmG,GACA,IAAAxe,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,GAGAwe,GAAA,iBAAAA,GAAA3H,GAAAjU,EAAAyV,EAAAmG,IACAnG,EAAA,EACAmG,EAAAxe,IAGAqY,EAAA,MAAAA,EAAA,EAAAN,GAAAM,GACAmG,OAAAlmB,IAAAkmB,EAAAxe,EAAA+X,GAAAyG,IAEA04C,GAAAt0D,EAAAyV,EAAAmG,QC7BAwiD,GAAAC,WAGAC,GAAA9jE,KAAAC,MACA8jE,GAAA/jE,KAAAwiB,IAuDA,IAAAwhD,GAxCA,SAAAx+D,EAAAnL,EAAAuP,EAAAq6D,GACA5pE,EAAAuP,EAAAvP,GASA,IAPA,IAAAoG,EAAA,EACAD,EAAAgF,EAAAA,EAAA5C,OAAA,EACAshE,EAAA7pE,GAAAA,EACA2oE,EAAA,OAAA3oE,EACA6oE,EAAAppD,GAAAzf,GACA8pE,OAAAjpE,IAAAb,EAEAoG,EAAAD,GAAA,CACA,IAAA4jE,EAAAN,IAAArjE,EAAAD,GAAA,GACAk7D,EAAA9xD,EAAApE,EAAA4+D,IACAjB,OAAAjoE,IAAAwgE,EACA0H,EAAA,OAAA1H,EACA2H,EAAA3H,GAAAA,EACA4H,EAAAxpD,GAAA4hD,GAEA,GAAAwI,EACA,IAAAG,EAAAJ,GAAAZ,OAEAgB,EADKF,EACLd,IAAAY,GAAAd,GACKH,EACLK,GAAAF,IAAAc,IAAAb,GACKF,EACLG,GAAAF,IAAAC,IAAAa,IAAAX,IACKF,IAAAE,IAGLW,EAAAvI,GAAArhE,EAAAqhE,EAAArhE,GAEAgqE,EACA5jE,EAAA2jE,EAAA,EAEA5jE,EAAA4jE,EAGA,OAAAL,GAAAvjE,EAAAojE,KCtDAU,GAAAC,WAmCA,IAAAC,GArBA,SAAAh/D,EAAAnL,EAAA4pE,GACA,IAAAxjE,EAAA,EACAD,EAAAgF,EAAAA,EAAA5C,OAAAnC,EAEA,GAAA,iBAAApG,GAAAA,GAAAA,GAAAmG,GAAA8jE,GAAA,CACA,KAAA7jE,EAAAD,GAAA,CACA,IAAA4jE,EAAA3jE,EAAAD,IAAA,EACAk7D,EAAAl2D,EAAA4+D,GAEA,OAAA1I,IAAA5hD,GAAA4hD,KACAuI,EAAAvI,GAAArhE,EAAAqhE,EAAArhE,GACAoG,EAAA2jE,EAAA,EAEA5jE,EAAA4jE,EAGA,OAAA5jE,EAEA,OAAAwjE,GAAAx+D,EAAAnL,EAAAwkE,GAAAoF,ICZA,IAAAQ,GAJA,SAAAj/D,EAAAnL,GACA,OAAAmqE,GAAAh/D,EAAAnL,ICUA,IAAAqqE,GAJA,SAAAl/D,EAAAnL,EAAAuP,GACA,OAAAo6D,GAAAx+D,EAAAnL,EAAA2kE,GAAAp1D,KCAA,IAAA+6D,GAXA,SAAAn/D,EAAAnL,GACA,IAAAuI,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,GAAAA,EAAA,CACA,IAAA+C,EAAA6+D,GAAAh/D,EAAAnL,GACA,GAAAsL,EAAA/C,GAAAyC,EAAAG,EAAAG,GAAAtL,GACA,OAAAsL,EAGA,OAAA,GCHA,IAAAi/D,GAJA,SAAAp/D,EAAAnL,GACA,OAAAmqE,GAAAh/D,EAAAnL,GAAA,ICOA,IAAAwqE,GAJA,SAAAr/D,EAAAnL,EAAAuP,GACA,OAAAo6D,GAAAx+D,EAAAnL,EAAA2kE,GAAAp1D,IAAA,ICKA,IAAAk7D,GAXA,SAAAt/D,EAAAnL,GAEA,GADAmL,GAAAA,EAAA5C,OACA,CACA,IAAA+C,EAAA6+D,GAAAh/D,EAAAnL,GAAA,GAAA,EACA,GAAAgL,EAAAG,EAAAG,GAAAtL,GACA,OAAAsL,EAGA,OAAA,GCEA,IAAAo/D,GAlBA,SAAAv/D,EAAAoE,GAMA,IALA,IAAAjE,GAAA,EACA/C,EAAA4C,EAAA5C,OACAu3D,EAAA,EACA19D,OAEAkJ,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACA+1D,EAAA9xD,EAAAA,EAAAvP,GAAAA,EAEA,IAAAsL,IAAAN,EAAAq2D,EAAAt2B,GAAA,CACA,IAAAA,EAAAs2B,EACAj/D,EAAA09D,KAAA,IAAA9/D,EAAA,EAAAA,GAGA,OAAAoC,GCHA,IAAAuoE,GANA,SAAAx/D,GACA,OAAAA,GAAAA,EAAA5C,OACAmiE,GAAAv/D,OCMA,IAAAy/D,GANA,SAAAz/D,EAAAoE,GACA,OAAApE,GAAAA,EAAA5C,OACAmiE,GAAAv/D,EAAAw5D,GAAAp1D,QCDA,IAAAs7D,GAJA,SAAA1/D,GACA,OAAA25D,GAAA35D,EAAA,ICmBA,IAAA2/D,GARA,SAAA3/D,EAAAlL,EAAAkhB,GACA,OAAAhW,GAAAA,EAAA5C,QAGAtI,EAAAkhB,QAAAtgB,IAAAZ,EAAA,EAAAqgB,GAAArgB,GACAw/D,GAAAt0D,EAAA,EAAAlL,EAAA,EAAA,EAAAA,QCKA,IAAA8qE,GAVA,SAAA5/D,EAAAlL,EAAAkhB,GACA,IAAA5Y,EAAA4C,EAAAA,EAAA5C,OAAA,EACA,OAAAA,GAGAtI,EAAAkhB,QAAAtgB,IAAAZ,EAAA,EAAAqgB,GAAArgB,GAEAw/D,GAAAt0D,GADAlL,EAAAsI,EAAAtI,GACA,EAAA,EAAAA,EAAAsI,QCUA,IAAAyiE,GANA,SAAA7/D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAy8D,GAAA75D,EAAAw5D,GAAAp6B,EAAA,IAAA,GAAA,OCIA,IAAA0gC,GANA,SAAA9/D,EAAAo/B,GACA,OAAAp/B,GAAAA,EAAA5C,OACAy8D,GAAA75D,EAAAw5D,GAAAp6B,EAAA,QCtBA,IAAA2gC,GAJA,aCGAC,GAJAh4D,IAAA,EAAAwC,GAAA,IAAAxC,IAAA,EAAA,KAAA,IATA,EAAA,EASA,SAAAR,GACA,OAAA,IAAAQ,GAAAR,IADAu4D,GCNAE,GAAA,IA+DA,IAAAC,GApDA,SAAAlgE,EAAAoE,EAAAqxD,GACA,IAAAt1D,GAAA,EACA87B,EAAAs5B,GACAn4D,EAAA4C,EAAA5C,OACA24D,GAAA,EACA9+D,KACA2oC,EAAA3oC,EAEA,GAAAw+D,EACAM,GAAA,EACA95B,EAAAu5B,QAEA,GAAAp4D,GAAA6iE,GAAA,CACA,IAAAzhE,EAAA4F,EAAA,KAAA47D,GAAAhgE,GACA,GAAAxB,EACA,OAAAgM,GAAAhM,GAEAu3D,GAAA,EACA95B,EAAA25B,GACAh2B,EAAA,IAAAV,QAGAU,EAAAx7B,KAAAnN,EAEAg/D,EACA,OAAA91D,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACA+1D,EAAA9xD,EAAAA,EAAAvP,GAAAA,EAGA,GADAA,EAAA4gE,GAAA,IAAA5gE,EAAAA,EAAA,EACAkhE,GAAAG,GAAAA,EAAA,CAEA,IADA,IAAAiK,EAAAvgC,EAAAxiC,OACA+iE,KACA,GAAAvgC,EAAAugC,KAAAjK,EACA,SAAAD,EAGA7xD,GACAw7B,EAAAxjC,KAAA85D,GAEAj/D,EAAAmF,KAAAvH,QAEAonC,EAAA2D,EAAAs2B,EAAAT,KACA71B,IAAA3oC,GACA2oC,EAAAxjC,KAAA85D,GAEAj/D,EAAAmF,KAAAvH,IAGA,OAAAoC,GC3CAmpE,GAJA5qD,GAAA,SAAA+lD,GACA,OAAA2E,GAAApL,GAAAyG,EAAA,EAAAj2D,IAAA,MCgBA+6D,GARA7qD,GAAA,SAAA+lD,GACA,IAAAn3D,EAAAqtC,GAAA8pB,GAIA,OAHAj2D,GAAAlB,KACAA,OAAA1O,GAEAwqE,GAAApL,GAAAyG,EAAA,EAAAj2D,IAAA,GAAAk0D,GAAAp1D,MCDAk8D,GARA9qD,GAAA,SAAA+lD,GACA,IAAA9F,EAAAhkB,GAAA8pB,GAIA,OAHAj2D,GAAAmwD,KACAA,OAAA//D,GAEAwqE,GAAApL,GAAAyG,EAAA,EAAAj2D,IAAA,QAAA5P,EAAA+/D,KCNA,IAAA8K,GANA,SAAAvgE,GACA,OAAAA,GAAAA,EAAA5C,OACA8iE,GAAAlgE,OCUA,IAAAwgE,GANA,SAAAxgE,EAAAoE,GACA,OAAApE,GAAAA,EAAA5C,OACA8iE,GAAAlgE,EAAAw5D,GAAAp1D,QCAA,IAAAq8D,GANA,SAAAzgE,EAAAy1D,GACA,OAAAz1D,GAAAA,EAAA5C,OACA8iE,GAAAlgE,OAAAtK,EAAA+/D,OCCA,IAAAiL,GAfA,SAAA1gE,EAAAo/B,GAMA,IALA,IAAAj/B,GAAA,EACA/C,EAAA4C,EAAA5C,OACAu3D,EAAA,EACA19D,OAEAkJ,EAAA/C,GAAA,CACA,IAAAvI,EAAAmL,EAAAG,GACAi/B,EAAAvqC,EAAAsL,EAAAH,KACA/I,EAAA09D,KAAA9/D,GAGA,OAAAoC,GCdA0pE,GAAAnmE,KAAA+a,IAqCA,IAAAqrD,GAhBA,SAAA5gE,GACA,IAAAA,IAAAA,EAAA5C,OACA,SAEA,IAAAA,EAAA,EAOA,OANA4C,EAAA0gE,GAAA1gE,EAAA,SAAA+yD,GACA,GAAAztD,GAAAytD,GAEA,OADA31D,EAAAujE,GAAA5N,EAAA31D,OAAAA,IACA,IAGA4H,GAAA5H,EAAA,SAAA+C,GACA,OAAAu1D,GAAA11D,EAAAiF,GAAA9E,OCFA,IAAA0gE,GAbA,SAAA7gE,EAAAoE,GACA,IAAApE,IAAAA,EAAA5C,OACA,SAEA,IAAAnG,EAAA2pE,GAAA5gE,GACA,OAAA,MAAAoE,EACAnN,EAEAy+D,GAAAz+D,EAAA,SAAA87D,GACA,OAAA7+C,GAAA9P,OAAA1O,EAAAq9D,MCNA+N,GANAtrD,GAAA,SAAAxV,EAAAwH,GACA,OAAAlC,GAAAtF,GACA81D,GAAA91D,EAAAwH,QCKA,IAAAu5D,GAfA,SAAAxF,EAAAn3D,EAAAqxD,GAIA,IAHA,IAAAt1D,GAAA,EACA/C,EAAAm+D,EAAAn+D,SAEA+C,EAAA/C,GACA,IAAAnG,EAAAA,EACAsQ,GACAuuD,GAAA7+D,EAAAskE,EAAAp7D,GAAAiE,EAAAqxD,GACAK,GAAAyF,EAAAp7D,GAAAlJ,EAAAmN,EAAAqxD,IAEA8F,EAAAp7D,GAEA,OAAAlJ,GAAAA,EAAAmG,OAAA8iE,GAAAjpE,EAAAmN,EAAAqxD,OCCAuL,GAJAxrD,GAAA,SAAA+lD,GACA,OAAAwF,GAAAL,GAAAnF,EAAAj2D,OCcA27D,GARAzrD,GAAA,SAAA+lD,GACA,IAAAn3D,EAAAqtC,GAAA8pB,GAIA,OAHAj2D,GAAAlB,KACAA,OAAA1O,GAEAqrE,GAAAL,GAAAnF,EAAAj2D,IAAAk0D,GAAAp1D,MCDA88D,GARA1rD,GAAA,SAAA+lD,GACA,IAAA9F,EAAAhkB,GAAA8pB,GAIA,OAHAj2D,GAAAmwD,KACAA,OAAA//D,GAEAqrE,GAAAL,GAAAnF,EAAAj2D,SAAA5P,EAAA+/D,KCVA0L,GAFA3rD,GAAAorD,ICGA,IAAAQ,GAbA,SAAA38D,EAAA+C,EAAA65D,GAMA,IALA,IAAAlhE,GAAA,EACA/C,EAAAqH,EAAArH,OACAkkE,EAAA95D,EAAApK,OACAnG,OAEAkJ,EAAA/C,GAAA,CACA,IAAAvI,EAAAsL,EAAAmhE,EAAA95D,EAAArH,QAAAzK,EACA2rE,EAAApqE,EAAAwN,EAAAtE,GAAAtL,GAEA,OAAAoC,GCIA,IAAAsqE,GAJA,SAAA98D,EAAA+C,GACA,OAAA45D,GAAA38D,MAAA+C,MAAAlD,KCyBA,IAAAk9D,GA5BA,SAAAxsE,EAAAmF,EAAAtF,EAAA6P,GAQA,IALA,IAAAvE,GAAA,EACA/C,GAHAjD,EAAAq+D,GAAAr+D,EAAAnF,IAAAmF,GAAAk+D,GAAAl+D,IAGAiD,OACAiN,EAAAjN,EAAA,EACAqkE,EAAAzsE,EAEA,MAAAysE,KAAAthE,EAAA/C,GAAA,CACA,IAAAlE,EAAAw/D,GAAAv+D,EAAAgG,IACA,GAAAa,EAAAygE,GAAA,CACA,IAAA98D,EAAA9P,EACA,GAAAsL,GAAAkK,EAAA,CACA,IAAA9F,EAAAk9D,EAAAvoE,QAEAxD,KADAiP,EAAAD,EAAAA,EAAAH,EAAArL,EAAAuoE,QAAA/rE,KAEAiP,EAAA,MAAAJ,EACAgC,GAAApM,EAAAgG,EAAA,UACAoE,GAGAD,GAAAm9D,EAAAvoE,EAAAyL,GAEA88D,EAAAA,EAAAvoE,GAEA,OAAAlE,GCpBA,IAAA0sE,GAJA,SAAAj9D,EAAA+C,GACA,OAAA45D,GAAA38D,MAAA+C,MAAAg6D,KCGAG,GAAAnsD,GAAA,SAAA+lD,GACA,IAAAn+D,EAAAm+D,EAAAn+D,OACAgH,EAAAhH,EAAA,EAAAm+D,EAAAn+D,EAAA,QAAA1H,EAGA,OADA0O,EAAA,mBAAAA,GAAAm3D,EAAA3iE,MAAAwL,QAAA1O,EACAmrE,GAAAtF,EAAAn3D,KCuCAw9D,IACAC,MAAAnN,GAAAoN,QAAAlN,GAAA71D,OAAAm2D,GAAAphB,WAAAsiB,GAAA2L,aAAAtI,GACAuI,eAAAtI,GAAAuI,KAAAtI,GAAAuI,UAAAtI,GAAAuI,eAAApI,GAAAqI,UAAApI,GACAqI,KAAA9H,GAAA+H,UAAA7H,GAAA8H,cAAA7H,GAAA/5C,MAAAg6C,GAAA6H,QAAA5H,GACA6H,YAAA3H,GAAA4H,aAAA3H,GAAA4H,UAAA3H,GAAA4H,KAAAjI,GAAAh9D,QAAAw9D,GACA0H,QAAAzH,GAAA7N,aAAAqO,GAAAkH,eAAAhH,GAAAiH,iBAAAhH,GAAAnqD,KAAAqqD,GACAr7C,KAAA6wB,GAAA70C,YAAAy/D,GAAA2G,IAAAzG,GAAA0G,KAAArG,GAAAsG,QAAAvG,GACAwG,UAAAtG,GAAAuG,YAAAtG,GAAAuG,OAAAtF,GAAAn6C,OAAAo6C,GAAA9lB,QAAAgmB,GACAphE,MAAAqhE,GAAAmF,YAAArE,GAAAsE,cAAArE,GAAAsE,cAAArE,GAAAsE,gBAAArE,GACAsE,kBAAArE,GAAAsE,kBAAArE,GAAAsE,WAAApE,GAAAqE,aAAApE,GAAAqE,KAAApE,GACAqE,KAAApE,GAAAqE,UAAApE,GAAAqE,eAAApE,GAAAqE,UAAApE,GAAAqE,MAAA/D,GACAgE,QAAA/D,GAAAgE,UAAA/D,GAAAgE,KAAA/D,GAAAgE,OAAA/D,GAAAgE,SAAA/D,GACAgE,MAAA7D,GAAA8D,UAAA7D,GAAA8D,QAAA7D,GAAA8D,IAAA5D,GAAA6D,MAAA5D,GACA6D,QAAA5D,GAAA6D,IAAA5D,GAAA6D,UAAAzD,GAAA0D,cAAAvD,GAAAwD,QDjDA;;;;;AEJA,MAAAC,GAAA,IAAA5mE,IAKA6mE,IAuBAptE,UAAA4f,EAAAkF,EAAAopC,GACA,MAGApU,GAHAszB,GAAAC,sBAAAztD,EAAAkF,IAAAsoD,GAAAE,kBAGA1tD,EAAAkF,EAAAvoB,OAAAmiC,UAAiEwvB,IAGjE,OAkQA,SAAA2I,EAAA7b,GACA,IAAA,MAAA9gB,KAAA8gB,EACA,IAAA,MAAAid,KAAA/9B,EAAA4gB,WACAmd,EAAApB,cAAAA,EAIA,OAAA7b,EAzQAuyB,CAFA3D,GAAAhhD,KAAA9D,EAAAg2B,YAAA+b,YAEA/c,IAcA95C,iBAAA4f,EAAAkF,EAAAopC,GAGA,MAAApU,KAGA,IAAA0zB,EAAA1oD,EAAAg2B,WAGA2yB,KAGA,IAAA,MAAAC,KAAA9tD,EAAAk7B,WAAA,CAGA,MAAA6yB,GAAAD,GAGA,IAAA,MAAAE,KAAAJ,EAEA,IAAA,IAAA3xE,EAAA,EAAoBA,EAAA8xE,EAAAvoE,OAAgBvJ,IAAA,CAEpC,MAAAo8D,EAAA0V,EAAA9xE,GAkBAic,EAAA+1D,GAAA5V,EAAA2V,EAAA1f,GAKAroD,MAAA3I,UAAAmI,OAAAU,MAAA4nE,GAAA9xE,EAAA,GAAAkL,OAAA+Q,IAEAjc,GAAAic,EAAA1S,OAAA,EAIA,MAAA0oE,EAAAvxE,OAAAmiC,UAA6CwvB,GAC7C4f,EAAAhT,UAAA5M,EAAA4M,SACAgT,EAAAhzC,kBAAAp9B,IAAAwwD,EAAApzB,cAAAozB,EAAApzB,kBAAAp9B,EAGA,MAAAqwE,EAAAF,GAAAD,EAAA3V,EAAA6V,GAIAjoE,MAAA3I,UAAAkH,KAAA2B,MAAA0nE,EAAAM,GAaAP,EAAAC,EACAA,KAIA,IAAA,MAAAxV,KAAA0V,EACA7zB,EAAA11C,KAAA6zD,GAOA,OA+WA,SAAA+V,EAAAC,EAAAnzB,GACA,IAAAE,KACA,IAAA9gB,EAAA,KACA,IAAAg0C,EAEA,OAAAD,GACA,KAAA5T,GACA,KAAAC,GAGA,IAAA,MAAAh+D,KAAAw+C,GAKA5gB,EAJA59B,aAAA08D,GAIA,IAAAU,GAEAp9D,aAAAm8D,GACA,IAAA6B,GAEA,IAAAD,IAIAb,aAAAl9D,GACA0+C,EAAA52C,KAAA81B,GAIA,OAAA8gB,EACA,KAAAgf,GACA,KAAAQ,GAYA,OAPAtgC,EAAA,IAAA+zC,GACAzU,aAAA1e,EAAA,IACA5gB,EAAAs/B,aAAA1e,EAAA,IAEAE,EAAAgzB,EAAA3T,GAAAvf,EAAAh2C,MAAA,KAGAo1B,GAAAnzB,OAAAi0C,GACA,KAAAmf,GACA,KAAAQ,GAYA,OAPA3f,EAAAgzB,EAAA3T,GAAAvf,EAAAh2C,MAAA,GAAA,KAEAo1B,EAAA,IAAA+zC,GACAzU,aAAA1e,EAAAA,EAAA11C,OAAA,IACA80B,EAAAs/B,aAAA1e,EAAAA,EAAA11C,OAAA,IAGA41C,EAAAj0C,OAAAmzB,GACA,KAAAqgC,GAYA,OAPArgC,EADA4gB,EAAA,aAAAke,GACA,IAAAU,GAEA,IAAAa,IAGAf,aAAA1e,EAAA,KAEA5gB,GACA,KAAA4/B,GAKA,IAAAoU,EAAA,EAAqCA,EAAApzB,EAAA11C,QACrC01C,EAAAozB,aAAAlV,GADkFkV,KAOlFA,GAAApzB,EAAA11C,OACA80B,EAAA,IAAAw/B,IAIAx/B,EAAA,IAAA4/B,GAGA,GAAAoU,GAEApzB,EAAA7a,QAAA6a,EAAAz1C,OAAA6oE,EAAA,GAAA,KAMA,IAAA,MAAA5xE,KAAAw+C,EACA5gB,EAAAs/B,aAAAl9D,GAGA,OAAA49B,GACA,QAEAA,EAAA,IAAA+zC,EAEA,IAAA,MAAA3xE,KAAAw+C,EACA5gB,EAAAs/B,aAAAl9D,GAGA,OAAA49B;;;;GA/dA8zC,CAAApuD,EAAA9f,YAAAg6C,IAUA95C,sBAAAmuE,EAAAC,EAAA7O,GACA,IAAA8O,EAAAlB,GAAAxwE,IAAAwxE,GAEAE,IACAA,EAAA,IAAA9nE,IACA4mE,GAAA3mE,IAAA2nE,EAAAE,IAGAA,EAAA7nE,IAAA4nE,EAAA7O,IASAv/D,sBAAA4f,EAAAkF,GACA,IAAAupD,EAAAlB,GAAAxwE,IAAAijB,EAAA9f,aAIA,IAAAuuE,IAAAA,EAAA1xE,IAAAmoB,EAAAhlB,aAAA,CACA,MAAAwuE,EAAAnB,GAAAnsE,OAEA,IAAA,MAAAutE,KAAAD,EACA,GAAA1uD,aAAA2uD,GAAApB,GAAAxwE,IAAA4xE,GAAA5xE,IAAAmoB,EAAAhlB,aAAA,CACAuuE,EAAAlB,GAAAxwE,IAAA4xE,GAEA,OAKA,GAAAF,EACA,OAAAA,EAAA1xE,IAAAmoB,EAAAhlB,cAsBAE,mBAAAwuE,EAAAC,EAAA34D,EAAA,MACA,MAAA44D,EAAA7oE,MAAAC,KAAA0oE,GACAG,EAAA9oE,MAAAC,KAAA2oE,GAEAG,EAAA,OAAA94D,EAEA+4D,GACA/T,UAAA,GAGA,GAAA8T,EAAA,CACAC,EAAAC,YAAA,IAAAvoE,IACAsoE,EAAAE,cAAA,IAAAxoE,IACAsoE,EAAA/4D,SAAAA,EACA+4D,EAAAG,UAAA,EAEA,IAAA,MAAA90C,KAAAy0C,EACAE,EAAAE,cAAAvoE,IAAA0zB,EAAAA,GAIA,IAAA,IAAAr+B,EAAA,EAAkBA,EAAA6yE,EAAAtpE,OAA+BvJ,IAAA,CACjD,MAAAozE,GAAAP,EAAA7yE,IAEA,IAAA,IAAAq/C,EAAA,EAAmBA,EAAAyzB,EAAAvpE,OAA+B81C,IAAA,CAClD,MAAAg0B,GAAAP,EAAAzzB,IAEA,IAAA,IAAA5gB,EAAA,EAAoBA,EAAA20C,EAAA7pE,OAAmBk1B,IACvC,IAAA,IAAAx+B,EAAA,EAAqBA,EAAAozE,EAAA9pE,OAAmBtJ,IAAA,CACxC8yE,GACAO,GAAAF,EAAA30C,GAAA40C,EAAApzE,GAAA+yE,GAGA,MAAAO,EAAAhC,GAAAiC,UAAAJ,EAAA30C,GAAA40C,EAAApzE,IACAg/B,aAAA+zC,EAAA/zC,aACA4gC,eAAAmT,EAAAnT,eACAZ,SAAA+T,EAAA/T,SACAoB,gBAAA2S,EAAA3S,gBACA8S,SAAAH,EAAAG,WAGAM,EAAAlC,GAAAiC,UAAAH,EAAApzE,GAAAmzE,EAAA30C,IACAQ,cAAA+zC,EAAA/zC,aACA4gC,eAAAmT,EAAAnT,eACAZ,UAAA+T,EAAA/T,SACAoB,gBAAA2S,EAAA3S,gBACA8S,SAAAH,EAAAG,WAGA,GAAAJ,EAAA,CACAW,GAAAN,EAAA30C,GAAA80C,EAAAP,GAEA,MAAAE,EAAAF,EAAAE,cAAApyE,IAAAuyE,EAAApzE,IAEA,IAAA,MAAA0zE,KAAAF,EACAT,EAAAE,cAAAvoE,IAAAgpE,EAAAT,GAIAE,EAAA5pE,OAAAi1B,EAAA,KAAA80C,GACA90C,GAAA80C,EAAAhqE,OAAA,EAEA8pE,EAAA7pE,OAAAvJ,EAAA,KAAAwzE,GACAxzE,GAAAwzE,EAAAlqE,OAAA,EAIAupE,EAAAtpE,OAAA61C,EAAA,KAAAg0B,GACAh0B,GAAAg0B,EAAA9pE,OAAA,EAGAspE,EAAArpE,OAAAxJ,EAAA,KAAAozE,GACApzE,GAAAozE,EAAA7pE,OAAA,EAGA,MAAAqqE,EAAAC,GAAAhB,GAAAgB,GAAAlB,GACAmB,EAAAD,GAAAf,GAAAe,GAAAjB,GAQA,OANAkB,EAAAF,EACAG,GAAAjB,EAAAc,EAAAE,GACGF,EAAAE,GACHC,GAAAlB,EAAAiB,EAAAF,IAGUjB,QAAAE,EAAAD,QAAAE,KAIV,IAAAkB,GAAA,GAcA,SAAAH,GAAA10B,GACA,OAAAA,EAAAvuB,OAAA,CAAAoI,EAAAqF,IACArF,EAAAqF,EAAA4gB,WAAA11C,OACE,GAKF,SAAAwqE,GAAA50B,EAAAhgC,GACA,MAAA80D,EAAA90B,EAAAA,EAAA51C,OAAA,GACA,IAAAyxD,EAAAiZ,EAAAh1B,WAAA11C,OAAA0qE,EAAAjZ,YAEA,MAAAkZ,EAAA,IAAArW,GAEA,IAAA,IAAA79D,EAAA,EAAiBA,EAAAmf,EAAanf,IAC9Bk0E,EAAAvW,aAAA,IAAAR,GAAAnC,MAGA7b,EAAA52C,KAAA2rE,GAMA,SAAAZ,GAAAvvD,EAAAkF,EAAAopC,IAoGA,SAAAtuC,EAAAkF,EAAAopC,GACAA,EAAA4gB,YAAAnyE,IAAAijB,IAEAsuC,EAAA4gB,YAAAtoE,IAAAoZ,EAAA,IAAArZ,KAGA,MAAAwoE,EAAA7gB,EAAA6gB,cAAApyE,IAAAmoB,GACA,IAAAgqD,IAAA5gB,EAAA4gB,YAAAnyE,IAAAijB,GAAAjjB,IAAAoyE,GAGA,IAAA,MAAArB,KAAA9tD,EAAAk7B,WAAA,CACA,IAAA,MAAA8yB,KAAA9oD,EAAAg2B,WACA,GAAA4yB,aAAA1V,IAAA4V,aAAA5V,IACAgY,GAAAtC,EAAAE,GAAA,CAEAkB,GAAA,EAEA,MAMA,GAAAA,EACA,MAIA5gB,EAAA4gB,YAAAnyE,IAAAijB,GAAApZ,IAAAuoE,EAAAD,GA/HAmB,CAAArwD,EAAAkF,EAAAopC,GAsCA,SAAAtuC,EAAAkF,EAAAopC,GAEA,MAAA6gB,EAAA7gB,EAAA6gB,cAAApyE,IAAAmoB,GAEA,GAAAopC,EAAAp4C,SAAAo6D,QAAAC,eAAApB,GAAA,CAEA,MAAAqB,EAAAliB,EAAAp4C,SAAAo6D,QAAAG,eAAAtB,GAEAuB,EAAApiB,EAAA4gB,YAAAnyE,IAAAijB,GAEA2wD,EAAAD,EAAA3zE,IAAAyzE,QAEA1yE,IAAA6yE,IAEAriB,EAAApzB,aAAAy1C,IAnDAC,CAAA5wD,EAAAkF,EAAAopC,GAuFA,SAAAppC,EAAAopC,GACA,MAAAgiB,EAAAhiB,EAAAp4C,SAAAo6D,QACAO,EAAAviB,EAAA6gB,cAAApyE,IAAAmoB,GAIAopC,EAAAgO,gBAAAgU,EAAAQ,cAAAD,GA5FAE,CAAA7rD,EAAAopC,GAiEA,SAAAppC,EAAAopC,GACA,MAAA6gB,EAAA7gB,EAAA6gB,cAAApyE,IAAAmoB,GACAorD,EAAAhiB,EAAAp4C,SAAAo6D,QAEAhiB,EAAAwN,eAAAwU,EAAAQ,cAAA3B,IAAAmB,EAAAC,eAAApB,GApEA6B,CAAA9rD,EAAAopC,GAiIA,SAAA8hB,GAAAtC,EAAAE,GACA,MAAAptE,EAAAktE,EAAAv6C,eACAryB,EAAA8sE,EAAA3zB,eAEA42B,EAAAhsD,GAAA/jB,EAAAi5C,gBAAAv5C,EAAAu5C,iBAEA,OAAAv5C,EAAArF,MAAA2F,EAAA3F,OAIA,QAAA01E,GAAA/vE,EAAA2O,OAAAjP,EAAAiP,QAWA,SAAA8/D,GAAAuB,EAAAC,EAAA7iB,UACAA,EAAApzB,oBACAozB,EAAAwN,sBACAxN,EAAAgO,gBAEA,MAAA4S,EAAA5gB,EAAA4gB,YAAAnyE,IAAAm0E,GAEA5iB,EAAA4gB,YAAAroE,OAAAqqE,GAEA,IAAA,MAAA52C,KAAA62C,EACA7iB,EAAA4gB,YAAAtoE,IAAA0zB,EAAA,IAAA3zB,IAAAuoE,UCnfAkC,WAAAtX,GAIAzwD,WACA,MAAA,SASA0wD,yBACA,OAAAqX,GAMAj3D,uBACA,MAAA,kCAIAw/C,GAAAM,SAAAmX;;;;;ACnCA,MAAAC,GAAApB,GAAAqB,sBACAC,GAAAtB,GAAAvC,iBA4GA,SAAA8D,GAAAxxD,EAAAkF,GACA,MAAAusD,EAAAzxD,EAAA4zB,QACA89B,EAAAD,EAAAv2B,WAAA,GAUA,OARAw2B,EAAA/wB,WACA+wB,EAAA/wB,SAAA+wB,EAAA/wB,SAAAtF,sBAAAn2B,GAAA,IAGAwsD,EAAA97C,WACA87C,EAAA97C,SAAA87C,EAAA97C,SAAAylB,sBAAAn2B,GAAA,KAGAusD,GAobA,SAAAE,GAAAC,EAAAC,GACA,MAAAC,EAAA,IAAA5X,GACAj/C,EAAA22D,EAAA32D,MAGA,IAAA82D,EAAA92D,EAAAg+B,QAAA,GAAA1gC,aAAAs5D,EAAAvwE,KAIA0wE,EAAA,EAEAC,EAAAh3D,EAAAg+B,QAAA,GAAA7hC,WAEA,IAAA,IAAAnb,EAAA,EAAiBA,EAAAgf,EAAAzV,OAAkBvJ,IAAA,CACnC,MAAAgJ,EAAAgW,EAAAg+B,QAAAh9C,GACAi2E,EAAAjtE,EAAAsT,aAAAs5D,EAAAvwE,KAIA4wE,GAAAH,IAGAA,GAAAF,EAAA50E,OACA28D,IAGAmY,EAAAG,EACAF,EAAAC,GAGAA,GAAAhtE,EAAAmS,WAOA,OAFAwiD,IAEAkY,EAEA,SAAAlY,IACA,MAAAlyC,EAAA,IAAAmzB,GACA+2B,EAAApuD,SAAAmE,aAAAqqD,GACAJ,EAAApuD,SAAAmE,aAAAsqD,IAGAE,EAAA,IAAAja,GAAAxwC,EAAAmqD,EAAAvwE,IAAAywE,EAAAF,EAAA50E,MAAA,GACA60E,EAAAlY,aAAAuY,IAMA,SAAAC,KACA,MAAAjC,EAAA,IAAArW,GAKA,OAFAqW,EAAAvW,aAAA,IAAAR,GAAA,IAEA+W;;;;GA1kBAkB,GAAAnX,GAAAe,GAAA,CAAAj7C,EAAAkF,EAAAopC,KAGA,MAAAlT,EAAAm2B,GAAAvxD,EAAAkF,EAAAopC,GAMA,OAJAtuC,EAAA0H,MAAAV,iBAAA9B,EAAA1B,WACA43B,EAAA52C,KAAAmtE,GAAAzsD,EAAAlF,IAGAo7B,IAIAi2B,GAAAnX,GAAAE,GAAA,CAAAp6C,EAAAkF,EAAAopC,KAEA,IAAAppC,EAAA1B,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAGA,MAAA8gB,EAAA9gB,EAAA8gB,SACAiD,EAAA,IAAA74B,GAAAt0B,EAAA1B,SAAAjoB,KAAA2pB,EAAA1B,SAAAjhB,KAAA2C,MAAA,GAAA,IAEAk2C,EAAAm2B,GAAAvxD,EAAAkF,EAAAopC,GAGA,GAAA8gB,KAAAlqD,EAAAo1C,2BAAAvB,IACA,OAAA3d,EAGA,IAAA,MAAAH,KAAAj7B,EAAAk7B,WAGA,GAAAD,EAAAvzB,MAAAV,iBAAAqrD,IAAAp3B,EAAAvzB,MAAA7J,MAAAmH,QAAAqtD,GAAA,CACA,MAAAC,EAAA,IAAApY,GAEAjiC,EAAAo6C,EAAA1qD,aAAA,GACAuQ,EAAAshB,GAAA91B,mBAAAuU,GACAC,EAAA31B,KAAAiC,KAAA,GAEA,MAAAmb,EAAAuF,EAAAo1C,gBAAAr/C,MAAAg+B,QAAA,GAAA1gC,aAAA0iC,EAAA35C,KAEAgxE,EAAA1Y,aAAA,IAAA1B,GACA,IAAArd,GAAA5iB,EAAAC,GACA+iB,EAAA35C,SACAxD,IAAA6hB,EAAA,KAAAA,EACAs7B,EAAAluC,SACA,IAGAquC,EAAA52C,KAAA8tE,GAEA,MAIA,OAAAl3B,IAIAi2B,GAAArW,GAAAT,GAAA,CAAAv6C,EAAAkF,EAAAopC,KAEA,IAAAppC,EAAA1B,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAQA,OALAA,EAAA8gB,UAKApvD,EAAAwD,SAAAwB,QAAAE,EAAA1B,WAEA0B,EAAA80C,cACAh6C,EAAA4zB,SAIA29B,GAAAvxD,EAAAkF,EAAAopC,KAkBA+iB,GAAAD,GAAAhX,GAAAoX,IACAH,GAAAD,GAAA7W,GAAAiX,IACAH,GAAAD,GAAAxW,GAAA4W,IACAH,GAAAD,GAAArW,GAAAyW,IACAH,GAAAD,GAAA3W,GAAA+W,IACAH,GAAAD,GAAAzW,GAAA6W,IAGAH,GAAA5W,GAAAF,GAAA,CAAAv6C,EAAAkF,EAAAopC,KAIA,GAHAA,EAAA8gB,WAGAlqD,EAAA1B,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAMA,MAAAikB,EACAvyD,EAAAq6B,eAAA9+C,MAAA2pB,EAAA1B,SAAAjoB,MACA,SAAA0pB,GAAAjF,EAAAq6B,eAAAF,gBAAAj1B,EAAA1B,SAAA22B,iBAEAq4B,EAAAxyD,EAAAq6B,eAAAxqC,QAAAqV,EAAA1B,SAAA3T,QAAAmQ,EAAAq6B,eAAAxqC,OAAAmQ,EAAA5E,QAAA8J,EAAA1B,SAAA3T,OAEA,OAAA0iE,GAAAC,GAEAttD,EAAA80C,cACAh6C,EAAA4zB,SAIA29B,GAAAvxD,EAAAkF,EAAAopC,KAIA+iB,GAAA9W,GAAAS,GAAA,CAAAh7C,EAAAkF,EAAAopC,KAEA,IAAAtuC,EAAAwD,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAOA,OAJAA,EAAA8gB,UAIApvD,EAAAwD,SAAAwB,QAAAE,EAAA1B,WACA4uD,MAGAb,GAAAvxD,EAAAkF,EAAAopC,KAIA+iB,GAAA9W,GAAAE,GAAA,CAAAz6C,EAAAkF,EAAAopC,KAIA,GAHAA,EAAA8gB,WAGApvD,EAAAwD,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAKA,MAAAikB,EACAvyD,EAAAwD,SAAAjoB,MAAA2pB,EAAAm1B,eAAA9+C,MACA,SAAA0pB,GAAAjF,EAAAwD,SAAA22B,gBAAAj1B,EAAAm1B,eAAAF,iBAEAq4B,EAAAttD,EAAAm1B,eAAAxqC,QAAAmQ,EAAAwD,SAAA3T,QAAAqV,EAAAm1B,eAAAxqC,OAAAqV,EAAA9J,QAAA4E,EAAAwD,SAAA3T,OAEA,OAAA0iE,GAAAC,GACAJ,MAGAb,GAAAvxD,EAAAkF,EAAAopC,KAGA+iB,GAAAjX,GAAAA,GAAA,CAAAp6C,EAAAkF,EAAAopC,KAIA,GAHAA,EAAA8gB,SAIA,OAAAmC,GAAAvxD,EAAAkF,EAAAopC,GAIA,IAAAtuC,EAAAwD,WAAA0B,EAAA1B,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAGA,MAAAmkB,EAAAzyD,EAAAwD,SAAA22B,gBACAu4B,EAAAxtD,EAAA1B,SAAA22B,gBAGA,GAAAn6B,EAAAwD,SAAAjoB,MAAA2pB,EAAA1B,SAAAjoB,MAAA,QAAA0pB,GAAAwtD,EAAAC,GAAA,CAGA,IAFA1yD,EAAAA,EAAA4zB,SAEApwB,SAAA3T,OAAAqV,EAAA1B,SAAA3T,QAAAmQ,EAAAwD,SAAA3T,QAAAqV,EAAA1B,SAAA3T,QAAAy+C,EAAA4M,SAAA,CAIAl7C,EAAAs6C,2BAAA1B,IAAA1zC,EAAAo1C,2BAAA1B,IACA54C,EAAAs6C,gBAAAjgB,eAAAxqC,OAAAqV,EAAAo1C,gBAAAjgB,eAAAxqC,QAEAmQ,EAAAs6C,gBAAAjgB,eAAAxqC,SAKA,MAAA8iE,EAAA93B,GAAAhzB,2BAAA7H,EAAAwD,SAAAxD,EAAAq6C,eAAAj/C,SACAw3D,EAAA/3B,GAAAhzB,2BAAA3C,EAAA1B,SAAA0B,EAAAm1C,eAAAj/C,SAEAy3D,EAAAF,EAAA12B,cAAA22B,GAEA,IAAAE,EAAA,EAEA,IAAA,MAAAprD,KAAAmrD,EACAC,GAAAprD,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OAUA,OAPA,IAAAijE,GACA9yD,EAAAk7B,WAAAl6C,MACAgf,EAAA45C,aAAA,IAAAR,GAAAp5C,EAAAk7B,WAAA,GAAA+b,YAAA,KAEAj3C,EAAAk7B,WAAA,GAAA9/B,QAAA03D,GAGA9yD,GACG,CAGH,MAAA+yD,EAAAp2E,OAAAmiC,UAAuCwvB,GAIvC,OAHAykB,EAAA7X,UAAA,EACA6X,EAAA73C,cAAA,EAEAq2C,GAAAvxD,EAAAkF,EAAA6tD,IAIA,OAAAxB,GAAAvxD,EAAAkF,EAAAopC,KAIA+iB,GAAAjX,GAAAW,GAAA,CAAA/6C,EAAAkF,EAAAopC,IAEAtuC,EAAAwD,UAMAxD,EAAAwD,SAAAjoB,MAAA2pB,EAAA1B,SAAAjoB,MAAA,SAAA0pB,GAAAC,EAAA1B,SAAAjhB,KAAAyd,EAAAwD,SAAA22B,kBACAi4B,MANAb,GAAAvxD,EAAAkF,EAAAopC,IAaA+iB,GAAAjX,GAAAQ,GAAA,CAAA56C,EAAAkF,EAAAopC,KAEA,IAAAtuC,EAAAwD,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAMA,MAAA0kB,EAAAhzD,EAAAwD,SAAAjoB,MAAA2pB,EAAAwC,MAAA7J,MAAAtiB,KACAg3E,EAAAS,GAAA,SAAA/tD,GAAAjF,EAAAwD,SAAA22B,gBAAAj1B,EAAAwC,MAAA7J,MAAAs8B,iBACA84B,EAAA/tD,EAAAwC,MAAA7J,MAAAhO,OAAAmQ,EAAAwD,SAAA3T,QAAAqV,EAAAwC,MAAA1D,IAAAnU,QAAAmQ,EAAAwD,SAAA3T,OAEA,GAAA0iE,GAAAU,EACA,OAAAb,MACE,GAAAY,GAAA,SAAA/tD,GAAAjF,EAAAwD,SAAA22B,gBAAAj1B,EAAAwC,MAAA1D,IAAA2D,cAAA,GAAAplB,MAAA,CAIF,MAAA+3B,EAAAta,EAAA4zB,QAOAs/B,EAAA15B,GAAA91B,mBAAAwB,EAAAwC,MAAA7J,OAGAq1D,EAAA3wE,KAAAiC,KAAA0gB,EAAA9J,QAAA,GAGA,MAAA+3D,EAAAD,EAAAvrD,aAAA,GACA2S,EAAAggC,gBAAA92C,SAAA2vD,EAKA,MAAAC,EAAA55B,GAAA91B,mBAAAwvD,GAEAE,EAAA7wE,KAAAiC,KAAAwb,EAAAwD,SAAA3T,QACAyqB,EAAA+/B,eAAAhgB,eAAA+4B,EAKA,MAAAC,EAAA75B,GAAA91B,mBAAAyvD,GAIA,OAHAE,EAAA9wE,KAAAiC,KAAA,GACA81B,EAAA+/B,eAAA9mC,eAAA8/C,GAEA/4C,GAGA,OAAAi3C,GAAAvxD,EAAAkF,EAAAopC,KAIA+iB,GAAAjX,GAAAF,GAAA,CAAAl6C,EAAAkF,EAAAopC,KAEA,IAAAtuC,EAAAwD,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAGAtuC,EAAAA,EAAA4zB,QAEA,MAAAw7B,EAAA9gB,EAAA8gB,SACAiD,EAAA,IAAA74B,GAAAx5B,EAAAwD,SAAAjoB,KAAAykB,EAAAwD,SAAAjhB,KAAA2C,MAAA,GAAA,IAGA,GAAAkqE,KAAApvD,EAAAs6C,2BAAAvB,IACA,OAAA/4C,GAKA,IAAA,MAAAi7B,KAAA/1B,EAAAg2B,WACA,GAAAD,EAAAvzB,MAAAV,iBAAAqrD,IAAAp3B,EAAAvzB,MAAA7J,MAAAmH,QAAAqtD,GAAA,CACA,OAAAp3B,EAAAluC,SACAiT,EAAAs6C,gBAAAr/C,MAAAg+B,QAAA,GAAAvmB,cAAAuoB,EAAA35C,IAAA25C,EAAAluC,UAEAiT,EAAAs6C,gBAAAr/C,MAAAg+B,QAAA,GAAAtmB,iBAAAsoB,EAAA35C,KAGA,MAIA,OAAA0e,KAIAqxD,GAAAtW,GAAAX,GAAA,CAAAp6C,EAAAkF,EAAAopC,IAEAppC,EAAA1B,UAMAxD,EAAAwD,SAAAjoB,MAAA2pB,EAAA1B,SAAAjoB,MAAA,SAAA0pB,GAAAjF,EAAAwD,SAAAjhB,KAAA2iB,EAAA1B,SAAA22B,kBAEAj1B,EAAA80C,cACAh6C,EAAA4zB,SARA29B,GAAAvxD,EAAAkF,EAAAopC,IAgBA+iB,GAAApW,GAAAf,GAAA,CAAAl6C,EAAAkF,KAEA,MAAAk2B,GAAAp7B,EAAA4zB,SAMA,OAJA1uB,EAAAwC,MAAAV,iBAAAhH,EAAAwD,WACA43B,EAAA52C,KAAAmtE,GAAA3xD,EAAAkF,IAGAk2B,IAIAi2B,GAAAzW,GAAAR,GAAA,CAAAp6C,EAAAkF,EAAAopC,KAEA,IAAAppC,EAAA1B,SACA,OAAA+tD,GAAAvxD,EAAAkF,EAAAopC,GAKA,MAAA0kB,EAAAhzD,EAAA0H,MAAA7J,MAAAtiB,MAAA2pB,EAAA1B,SAAAjoB,KACAg3E,EAAAS,GAAA,SAAA/tD,GAAAjF,EAAA0H,MAAA7J,MAAAs8B,gBAAAj1B,EAAA1B,SAAA22B,iBACA84B,EAAAjzD,EAAA0H,MAAA7J,MAAAhO,OAAAqV,EAAA1B,SAAA3T,QAAAmQ,EAAA0H,MAAA1D,IAAAnU,QAAAqV,EAAA1B,SAAA3T,OAEA,GAAA0iE,GAAAU,EACA,OACA/tD,EAAA80C,cACAh6C,EAAA4zB,SAEE,GAAAo/B,GAAA,SAAA/tD,GAAAC,EAAA1B,SAAA22B,gBAAAn6B,EAAA0H,MAAA1D,IAAA2D,cAAA,GAAAplB,MAAA,CACF,MAAA+3B,EAAAta,EAAA4zB,QAWA,OARAtZ,EAAAwgC,iBAAAt3C,SAAA3T,SAGAyqB,EAAA+/B,eAAAj/C,UAGAkf,EAAA+/B,eAAA9mC,eAAAhxB,KAAA+3B,EAAA+/B,eAAA9mC,eAAAhxB,KAAAiD,OAAA,MAEA80B,GAGA,OAAAi3C,GAAAvxD,EAAAkF,EAAAopC,KAIA+iB,GAAA1W,GAAAP,GAAA,CAAAp6C,EAAAkF,EAAAopC,KACA,MAAA8gB,EAAA9gB,EAAA8gB,SACAh0B,EAAAm2B,GAAAvxD,EAAAkF,EAAAopC,GAGA,GAAA8gB,KAAAlqD,EAAAo1C,2BAAAvB,IACA,OAAA3d,EAGA,MAAAhB,EAAAl1B,EAAAo1C,gBAAA92C,SAAAmE,cAAA,GAEA,GAAAyyB,GAAAp6B,EAAAk7B,WAAA,GAAA13B,SAAAwB,QAAAo1B,GAAA,CAGA,MAAAk5B,EAAAtzD,EAAA4zB,QACA0/B,EAAAp4B,WAAA,GAAA13B,SAAA42B,EAAAzyB,aAAA,GAEAyzB,EAAA52C,KAAA8uE,GAGA,OAAAl4B,IAIAi2B,GAAAjX,GAAAO,GAAA,CAAA36C,EAAAkF,EAAAopC,KACAtuC,EAAAA,EAAA4zB,QAEA,MAAAw7B,EAAA9gB,EAAA8gB,SAGA,GAAAA,KAAApvD,EAAAs6C,2BAAAvB,IACA,OAAA/4C,GAGA,MAAAo6B,EAAAp6B,EAAAs6C,gBAAA92C,SAAAmE,cAAA,GAGA,GAAAyyB,IAAAg1B,GAAAlqD,EAAAg2B,WAAA,GAAA13B,SAAAwB,QAAAo1B,GAAA,CACA,MAAAk5B,EAAApuD,EAAA0uB,QAIA,OAHA0/B,EAAAp4B,WAAA,GAAA13B,SAAA42B,EAAAzyB,aAAA,GACA2rD,EAAAp4B,WAAA,GAAAoe,QAAAt5C,EAAAs6C,gBAAAr/C,MAAAg+B,QAAA,GAAAz8C,MAEAwjB,EAAAszD,GAGA,OAAAtzD,KAIAqxD,GAAA3W,GAAAN,GAAA,CAAAp6C,EAAAkF,EAAAopC,KACA,MAAAlT,EAAAm2B,GAAAvxD,EAAAkF,EAAAopC,GAEAlU,EAAAl1B,EAAAo1C,gBAAA92C,UAAA0B,EAAAo1C,gBAAA/mC,eAGA,IAAA6mB,EACA,OAAAm3B,GAAAvxD,EAAAkF,EAAAopC,GAMA,GAHAA,EAAA8gB,SAIA,OAAAh0B,EAIA,IAAA,MAAA9gB,KAAA8gB,EAEA,GAAA9gB,aAAAogC,GAAA,CACA,MAAAzf,EAAA3gB,EAAA+/B,eACApf,EAAAZ,eAAA1yB,aAAAszB,EAAA7/B,SAEA4J,QAAAo1B,KACAa,EAAA7/B,SAAA,GAKA,OAAAggC,IAIAi2B,GAAAjX,GAAAM,GAAA,CAAA16C,EAAAkF,EAAAopC,KAIA,GAHAA,EAAA8gB,SAIA,OAAAmC,GAAAvxD,EAAAkF,EAAAopC,GAQA,MAAAlU,EAAAp6B,EAAAs6C,gBAAA92C,UAAAxD,EAAAs6C,gBAAA/mC,eAGA,IAAA6mB,EACA,OAAAm3B,GAAAvxD,EAAAkF,EAAAopC,GAIA,MAAArT,GADA/1B,EAAAA,EAAA0uB,SACAymB,eAOA,OANApf,EAAAZ,eAAA1yB,aAAAszB,EAAA7/B,SAEA4J,QAAAo1B,KACAa,EAAA7/B,SAAA,GAGAm2D,GAAAvxD,EAAAkF,EAAAopC,WC7hBAilB,GAQAnzE,YAAAiJ,EAAA,WAOA9I,KAAA66C,UAaA76C,KAAA8I,KAAAA,EAUA4tD,kBACA,IAAA,MAAA38B,KAAA/5B,KAAA66C,OACA,GAAA,OAAA9gB,EAAA28B,YACA,OAAA38B,EAAA28B,YAIA,OAAA,KAUA72D,SAAAk6B,GAIA,OAHAA,EAAA0nB,MAAAzhD,KACAA,KAAA66C,OAAA52C,KAAA81B,GAEAA,EAQAl6B,iBACA,IAAA,MAAAk6B,KAAA/5B,KAAA66C,aACA9gB,EAAA4gB;;;;SCtEAs4B,WAAA1Z,GAIA3/C,uBACA,MAAA,yCAIAw/C,GAAAM,SAAAuZ;;;;;MCRAC,WAAAzc,GASA52D,YAAAi6C,EAAAj/B,GACArZ,MAAA,MAOAxB,KAAA85C,eAAAb,GAAA91B,mBAAA22B,GAOA95C,KAAA6a,QAAAA,EAMA/R,WACA,MAAA,SAMAjJ,YACA,GAAAG,KAAA85C,eAAA9+C,KAAA2a,SAOA,MAAA,IAAA1U,EAAA,mEAOApB,WACAq3D,GAAA5c,GAAAhzB,2BAAAtnB,KAAA85C,eAAA95C,KAAA6a,UAMAjB,uBACA,MAAA;;;;SClEAu5D,WAAA16B,GASA54C,YAAA0/B,EAAAtjC,EAAA0mB,EAAA,QACAnhB,MAAAvF,GAQA+D,KAAAozE,KAAA7zC,EAQAv/B,KAAA2iB,SAAAA,EAWAhN,eACA,OAAA3V,KAAAozE,KAMAvzE,GAAAiJ,EAAA7M,GACA,OAAAA,EAGA,eAAA6M,GAAA7M,GAAA+D,KAAA/D,MAAAuF,MAAAqa,GAAA/S,EAAA7M,GAFA,eAAA6M,GAAAtH,MAAAqa,GAAA/S,GAWAjJ,SACA,OAAAG,KAAA2iB;;;;SCdA0wD,GAWAxzE,YAAAqhD,EAAAO,GAKAzhD,KAAAkhD,MAAAA,EAMAlhD,KAAAyhD,MAAAA,EAaA5hD,WAAAuB,EAAA4Y,GACA,OAAA,IAAA69B,GAAAz2C,EAAA4Y,GAaAna,cAAA5D,EAAA+d,GACA,OAAA,IAAAy+B,GAAAx8C,EAAA+d,GAQAna,yBACA,OAAA,IAAA+2D,GAwCA/2D,OAAAyX,EAAAsO,EAAAtW,GACAtP,KAAAszE,6BAEA,MAAArwD,EAAAg2B,GAAA1xB,SAAA3B,EAAAtW,GAGAyqB,EAAAziB,aAAAugC,KAAAvgC,EAAAjC,OAAA,IAAAqlD,GAAA,IAAAD,GAGA,GAAAnjD,EAAAjC,OAAA,CAEA,GAAAk+D,GAAAj8D,EAAAtc,KAAAioB,EAAAjoB,MAIA,YAFAgF,KAAAizB,KAAAqnB,GAAA1wB,SAAAtS,GAAA2L,GAMA,GAAA3L,EAAAtc,KAAA2a,SAEA,MAAA,IAAAzU,MAAA,+FAIAlB,KAAAyrB,OAAAnU,GAKA,MAAAi+C,EAAAtyC,EAAAjoB,KAAA2a,SAAAsN,EAAAjoB,KAAA2a,SAAA4/C,QAAA,KAEAziC,EAAA,IAAA0lC,GAAAv1C,EAAA3L,EAAAi+C,GAOA,GALAv1D,KAAAyhD,MAAA+xB,SAAAz5C,GACAA,EAAAs/B,aAAAvmC,GACA9yB,KAAAkhD,MAAAuyB,eAAA3gD,GAGAxb,aAAAs/C,GACA,IAAA,MAAA/W,EAAAH,KAAApoC,EAAA+nC,QAAA,CAEA,MAAAq0B,EAAAz6B,GAAA1xB,SAAAm4B,EAAA1kD,MACAmsB,EAAA,IAAAmzB,GACAoF,EAAApiC,MAAA28B,aAAAy5B,EAAAzwD,GACAy8B,EAAAj8B,IAAAw2B,aAAAy5B,EAAAzwD,IAGAjjB,KAAA2zE,UAAA9zB,EAAA14B,GAAwCysD,gBAAA,KA0BxC/zE,WAAAqsC,EAAAlyB,EAAA4L,EAAAtW,GACA0K,aAAA48C,IAAA58C,aAAAy+B,IAAAz+B,aAAAi/B,GACAj5C,KAAA8yB,OAAA9yB,KAAA8nD,WAAA5b,GAAAlyB,EAAA4L,GAEA5lB,KAAA8yB,OAAA9yB,KAAA8nD,WAAA5b,EAAAlyB,GAAA4L,EAAAtW,GAyBAzP,cAAA5D,EAAA+d,EAAA4L,EAAAtW,GACA0K,aAAA48C,IAAA58C,aAAAy+B,IAAAz+B,aAAAi/B,GACAj5C,KAAA8yB,OAAA9yB,KAAAgwB,cAAA/zB,GAAA+d,EAAA4L,GAEA5lB,KAAA8yB,OAAA9yB,KAAAgwB,cAAA/zB,EAAA+d,GAAA4L,EAAAtW,GAmBAzP,OAAAyX,EAAAjC,GACArV,KAAA8yB,OAAAxb,EAAAjC,EAAA,OAaAxV,WAAAqsC,EAAAlyB,EAAA3E,GACA2E,aAAA48C,IAAA58C,aAAAy+B,GACAz4C,KAAA8yB,OAAA9yB,KAAA8nD,WAAA5b,GAAAlyB,EAAA,OAEAha,KAAA8yB,OAAA9yB,KAAA8nD,WAAA5b,EAAAlyB,GAAA3E,EAAA,OAcAxV,cAAA5D,EAAA+d,EAAA3E,GACA2E,aAAA48C,IAAA58C,aAAAy+B,GACAz4C,KAAA8yB,OAAA9yB,KAAAgwB,cAAA/zB,GAAA+d,EAAA,OAEAha,KAAA8yB,OAAA9yB,KAAAgwB,cAAA/zB,EAAA+d,GAAA3E,EAAA,OAUAxV,YAAAnD,EAAAia,GACAA,EAAAH,MAAA9Z,EAYAmD,aAAAkB,EAAArE,EAAAm3E,GACA7zE,KAAAszE,6BAEAO,aAAAv5B,GACAw5B,GAAA9zE,KAAAe,EAAArE,EAAAm3E,GAEAE,GAAA/zE,KAAAe,EAAArE,EAAAm3E,GAiBAh0E,cAAAma,EAAA65D,GACA,IAAA,MAAA9yE,EAAAywE,KAAA95B,GAAA19B,GACAha,KAAAkwB,aAAAnvB,EAAAywE,EAAAqC,GAYAh0E,gBAAAkB,EAAA8yE,GACA7zE,KAAAszE,6BAEAO,aAAAv5B,GACAw5B,GAAA9zE,KAAAe,EAAA,KAAA8yE,GAEAE,GAAA/zE,KAAAe,EAAA,KAAA8yE,GAUAh0E,gBAAAg0E,GACA7zE,KAAAszE,6BAEA,MAAAU,EAAA18D,IACA,IAAA,MAAAO,KAAAP,EAAA2Y,mBACAjwB,KAAAq3B,gBAAAxf,EAAAP,IAIA,GAAAu8D,aAAAv5B,GAGA,IAAA,MAAAhjC,KAAAu8D,EAAA/zB,WACAk0B,EAAA18D,QAHA08D,EAAAH,GAgCAh0E,KAAAsnB,EAAAvB,EAAAtW,GAGA,GAFAtP,KAAAszE,+BAEAnsD,aAAAmzB,IAMA,MAAA,IAAAr5C,EAAA,qDAGA,IAAAkmB,EAAApB,OAMA,MAAA,IAAA9kB,EAAA,0DAGA,MAAAgiB,EAAAg2B,GAAA1xB,SAAA3B,EAAAtW,GAEA,IAAAikE,GAAApsD,EAAAnsB,KAAAioB,EAAAjoB,MAOA,MAAA,IAAAiG,EAAA,2FAGA,MAAA84B,EAAA,IAAAmgC,GACAl6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAAw7B,EAAApuC,EAAAnsB,KAAA2a,SAAAwR,EAAAnsB,KAAA2a,SAAA4/C,QAAA,KAEA7a,EAAA,IAAAmd,GAAA1wC,EAAA7J,MAAA6J,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OAAA2T,EAAAsyC,GACAx7B,EAAAs/B,aAAA3e,GACA16C,KAAAkhD,MAAAuyB,eAAA/4B,GAQA76C,OAAAg0E,GACA7zE,KAAAszE,6BAEA,MAAAW,EAAA,CAAAhxD,EAAApI,KACA,MAAAkf,EAAA,IAAAogC,GACAn6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEAm6C,GAAAjxD,EAAApI,EAAAkf,EAAA/5B,KAAAkhD,QAGA,GAAA2yB,aAAAv5B,GAAA,CAEA,MAAA3zB,EAAAktD,EAAAM,uBAAAp0B,UAEA,IAAA,MAAAq0B,KAAAztD,EACAstD,EAAAG,EAAA92D,MAAA82D,EAAA3wD,IAAAnU,OAAA8kE,EAAA92D,MAAAhO,YAEG,CACH,MAAAuL,EAAAg5D,EAAAh4D,GAAA,QAAAg4D,EAAAh9D,WAAA,EAEAo9D,EAAAh7B,GAAA30B,aAAAuvD,GAAAh5D,IAYAhb,MAAAojB,GACAjjB,KAAAszE,6BAEA,MAAAv5C,EAAA,IAAAigC,GACAh6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAAhV,EAAA9B,EAAA8B,WACAD,EAAA7B,EAAA6B,UAEA,KAAAC,aAAA0zB,IAMA,MAAA,IAAAx3C,EAAA,kFAGA,KAAA6jB,aAAA2zB,IAMA,MAAA,IAAAx3C,EAAA,gFAGA,MAAAozE,EAAAp7B,GAAAmB,0BAAAt1B,EAAA,GACAwvD,EAAAr7B,GAAAmB,0BAAAr1B,EAAAA,EAAAqzB,WAEAm8B,EAAAtxD,EAAAjoB,KAAA2a,SAAAsN,EAAAjoB,KAAA2a,SAAA4/C,QAAA,KAEAtiC,EAAA,IAAA4kC,GACAwc,EACAvvD,EAAAszB,UACAk8B,EACAC,GAGAthD,EAAAmoB,UAAA,EACArhB,EAAAs/B,aAAApmC,GACAjzB,KAAAkhD,MAAAuyB,eAAAxgD,GAEAihD,GAAAjxD,EAAA,EAAA8W,EAAA/5B,KAAAkhD,OASArhD,OAAA2X,EAAAge,GAGA,GAFAx1B,KAAAszE,+BAEA97D,aAAAihC,IAMA,MAAA,IAAAx3C,EACA,uGAIA,MAAA84B,EAAA,IAAAqgC,GACAp6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAAw7B,EAAA/9C,EAAAxc,KAAA2a,SAAA6B,EAAAxc,KAAA2a,SAAA4/C,QAAA,KAEAif,EAAA,IAAA1b,GAAA7f,GAAA30B,aAAA9M,GAAAA,EAAAvb,KAAAu5B,EAAA+/B,GACAx7B,EAAAs/B,aAAAmb,GACAx0E,KAAAkhD,MAAAuyB,eAAAe,GAiBA30E,MAAAojB,EAAAwxD,GACAz0E,KAAAszE,6BAEA,IAuBAoB,EAAAC,EAvBAC,EAAA3xD,EAAA5N,OAEA,IAAAu/D,EAAAv/D,OAMA,MAAA,IAAApU,EAAA,4EAQA,GAJAwzE,IACAA,EAAAG,EAAAv/D,SAGA4N,EAAA5N,OAAAW,cAAuCJ,aAAA,IAAoBkuB,SAAA2wC,GAC3D,MAAA,IAAAxzE,EAAA,iFAQA,EAAA,CACA,MAAA84B,EAAA,IAAA8/B,GACA75D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAAhrB,EAAA,IAAA0pC,GAAAm8B,EAAA34E,KAAA24E,EAAAn/C,iBACAo/C,EAAAD,EAAA55E,KAAA2a,SAAAi/D,EAAA55E,KAAA2a,SAAA4/C,QAAA,KAEAziC,EAAA,IAAA0lC,GACAvf,GAAAj1B,YAAA4wD,GACA7lE,EACA8lE,GAGA96C,EAAAs/B,aAAAvmC,GACA9yB,KAAAkhD,MAAAuyB,eAAA3gD,GAEA,MAAAyhD,EAAA,OAAAM,EAAAA,EAAA,EAAA,KAEA5hD,EAAA,IAAA4kC,GACA50C,EACA2xD,EAAAx8B,UAAAn1B,EAAA3T,OACA2pC,GAAAmB,0BAAArrC,EAAA,GACAwlE,GAEAthD,EAAAmoB,UAAA,EAEArhB,EAAAs/B,aAAApmC,GACAjzB,KAAAkhD,MAAAuyB,eAAAxgD,GAGAyhD,GAAAC,IACAD,EAAAE,EACAD,EAAA5lE,GAIA6lE,GADA3xD,EAAAg2B,GAAA30B,aAAAvV,IACAsG,aACGu/D,IAAAH,GAEH,OACAxxD,SAAAA,EACAkE,MAAA,IAAAmzB,GAAArB,GAAA1xB,SAAAmtD,EAAA,OAAAz7B,GAAA1xB,SAAAotD,KAYA90E,KAAAsnB,EAAA2tD,GAGA,GAFA90E,KAAAszE,8BAEAnsD,EAAApB,OAMA,MAAA,IAAA9kB,EAAA,0DAGA,MAAAuW,EAAAs9D,aAAAr8B,GAAAq8B,EAAA,IAAAr8B,GAAAq8B,GAEA,GAAAt9D,EAAA+B,WAAA,EAMA,MAAA,IAAAtY,EAAA,qEAGA,GAAA,OAAAuW,EAAAnC,OAMA,MAAA,IAAApU,EAAA,yFAGA,MAAA84B,EAAA,IAAAsgC,GACAr6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAA86C,EAAA1tD,EAAAnsB,KAAA2a,SAAAwR,EAAAnsB,KAAA2a,SAAA4/C,QAAA,KAEAziC,EAAA,IAAA0lC,GAAArxC,EAAA1D,IAAAjM,EAAAq9D,GACA96C,EAAAs/B,aAAAvmC,GACA9yB,KAAAkhD,MAAAuyB,eAAA3gD,GAEA,MAAAyhD,EAAA,OAAAM,EAAAA,EAAA,EAAA,KAEA7hD,EAAAimB,GAAAmB,0BAAA5iC,EAAA,GACAyb,EAAA,IAAA4kC,GACA1wC,EAAA7J,MACA6J,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OACA0jB,EACAuhD,GAEAx6C,EAAAs/B,aAAApmC,GACAjzB,KAAAkhD,MAAAuyB,eAAAxgD,GASApzB,OAAA2X,GAGA,GAFAxX,KAAAszE,6BAEA,OAAA97D,EAAAnC,OAMA,MAAA,IAAApU,EAAA,qFAGA,MAAA84B,EAAA,IAAAygC,GACAx6D,KAAAyhD,MAAA+xB,SAAAz5C,GAEA,MAAA+f,EAAAb,GAAAmB,0BAAA5iC,EAAA,GACA+8D,EAAAz6B,EAAA9+C,KAAA2a,SAAAmkC,EAAA9+C,KAAA2a,SAAA4/C,QAAA,KAEAtiC,EAAA,IAAA4kC,GACA/d,EACAtiC,EAAA4gC,UACAa,GAAA30B,aAAA9M,GACA+8D,GAGAthD,EAAAmoB,UAAA,EACArhB,EAAAs/B,aAAApmC,GACAjzB,KAAAkhD,MAAAuyB,eAAAxgD,GAEAihD,GAAAj7B,GAAA30B,aAAA9M,GAAA,EAAAuiB,EAAA/5B,KAAAkhD,OAgDArhD,UAAAk1E,EAAAC,EAAA3xE,GAGA,IAAAw8C,EAAAxqB,EAAAu+C,EAFA5zE,KAAAszE,6BAIAyB,aAAAz6B,IACAuF,EAAA19C,IACAkzB,EAAA0/C,EACAnB,IAAAoB,KAAAA,EAAApB,iBAEA/zB,EAAA,iBAAAk1B,EAAAA,EAAAA,EAAA94E,KAEA+4E,aAAA16B,IACAjlB,EAAA2/C,EACApB,IAAAvwE,KAAAA,EAAAuwE,iBAEAv+C,EAAA,KACAu+C,IAAAoB,KAAAA,EAAApB,iBAIA,MAAAqB,EAAAj1E,KAAAkhD,MAAA7B,QAAA7iD,IAAAqjD,GAEA,IAAA+zB,EAAA,CACA,IAAAv+C,EAMA,MAAA,IAAAp0B,EAAA,oFASA,OAJAg0E,GAAAA,EAAAC,yBAAAtB,GACAuB,GAAAn1E,KAAA6/C,EAAAo1B,EAAAt1B,WAAA,MAGA3/C,KAAAkhD,MAAA7B,QAAA+1B,KAAAv1B,EAAAxqB,EAAAu+C,GAGA,IAAAv+C,IAAA4/C,EACA,MAAA,IAAAh0E,EAAA,oFAGA,MAAAo0E,EAAAJ,EAAAA,EAAAt1B,WAAA,KAWA,OATAtqB,EAMA8/C,GAAAn1E,KAAA6/C,EAAAw1B,EAAAhgD,GAHA8/C,GAAAn1E,KAAA6/C,EAAA,KAAAw1B,GAMAr1E,KAAAkhD,MAAA7B,QAAA7iD,IAAAqjD,GAUAhgD,aAAAy1E,GACAt1E,KAAAszE,6BAEA,MAAAr3E,EAAA,iBAAAq5E,EAAAA,EAAAA,EAAAr5E,KAEA,IAAA+D,KAAAkhD,MAAA7B,QAAA92C,IAAAtM,GAMA,MAAA,IAAAgF,EAAA,gFAGA,MAAAw+C,EAAAz/C,KAAAkhD,MAAA7B,QAAA7iD,IAAAP,GAEAwjD,EAAAy1B,uBAQAC,GAAAn1E,KAAA/D,EAFAwjD,EAAAE,WAEA,MAPA3/C,KAAAkhD,MAAA7B,QAAAzkC,QAAA3e,GAiEA4D,aAAA8nB,EAAAC,EAAAvkB,GACArD,KAAAszE,6BAEAtzE,KAAAkhD,MAAAvrC,SAAA4M,UAAA0F,OAAAN,EAAAC,EAAAvkB,GAYAxD,kBAAA+lB,EAAAtW,GACAtP,KAAAszE,6BAEAtzE,KAAAkhD,MAAAvrC,SAAA4M,UAAAuP,UAAAlM,EAAAtW,GAsBAzP,sBAAA01E,EAAA74E,GAGA,GAFAsD,KAAAszE,6BAEA,iBAAAiC,EACAv1E,KAAAw1E,uBAAAD,EAAA74E,QAEA,IAAA,MAAAqE,EAAArE,KAAAg7C,GAAA69B,GACAv1E,KAAAw1E,uBAAAz0E,EAAArE,GAkBAmD,yBAAA41E,GAGA,GAFAz1E,KAAAszE,6BAEA,iBAAAmC,EACAz1E,KAAA01E,0BAAAD,QAEA,IAAA,MAAA10E,KAAA00E,EACAz1E,KAAA01E,0BAAA30E,GAgCAlB,yBAAAijD,GACA9iD,KAAAkhD,MAAAvrC,SAAA4M,UAAAozD,iBAAA7yB,GAQAjjD,0BACAG,KAAAkhD,MAAAvrC,SAAA4M,UAAAqzD,kBAQA/1E,uBAAAkB,EAAArE,GACA,MAAA6lB,EAAAviB,KAAAkhD,MAAAvrC,SAAA4M,UAGA,GAAAA,EAAAuD,aAAAvD,EAAA6F,OAAA/S,OAAAmE,QAAA,CACA,MAAAq8D,EAAA1zB,GAAA2zB,sBAAA/0E,GAEAf,KAAAkwB,aAAA2lD,EAAAn5E,EAAA6lB,EAAA6F,OAAA/S,QAGAkN,EAAA4P,cAAApxB,EAAArE,GAOAmD,0BAAAkB,GACA,MAAAwhB,EAAAviB,KAAAkhD,MAAAvrC,SAAA4M,UAGA,GAAAA,EAAAuD,aAAAvD,EAAA6F,OAAA/S,OAAAmE,QAAA,CACA,MAAAq8D,EAAA1zB,GAAA2zB,sBAAA/0E,GAEAf,KAAAq3B,gBAAAw+C,EAAAtzD,EAAA6F,OAAA/S,QAGAkN,EAAA6P,iBAAArxB,GAQAlB,6BAUA,GAAAG,KAAAkhD,MAAA60B,iBAAA/1E,KACA,MAAA,IAAAiB,EAAA,6EAeA,SAAA6yE,GAAAnnD,EAAA5rB,EAAArE,EAAAyqB,GACA,MAAA4S,EAAA,IAAA4/B,GACAzY,EAAAv0B,EAAAu0B,MACA3hB,EAAA2hB,EAAAvrC,SAGA,IAIAsN,EAGA+yD,EAGAC,EAVAC,EAAA/uD,EAAA7J,MAYA,IAAA,MAAAk0D,KAAArqD,EACA8uD,EAAAzE,EAAAl6D,KAAAU,aAAAjX,GAIAkiB,GAAA+yD,GAAAC,IAEAD,GAAAt5E,GACA28D,IAGA6c,EAAAjzD,GAGAA,EAAAuuD,EAAAhtD,aACAwxD,EAAAC,EASA,SAAA5c,IAEA,IAAAt/B,EAAA4gB,WAAA11C,QACA0nB,EAAA80B,MAAA+xB,SAAAz5C,GAGA,MAAA5S,EAAA,IAAAmzB,GAAA47B,EAAAjzD,GACAsyC,EAAApuC,EAAAnsB,KAAA2a,SAAA4pB,EAAAg2B,QAAA,KACA7a,EAAA,IAAAid,GAAAxwC,EAAApmB,EAAAi1E,EAAAt5E,EAAA64D,GAEAx7B,EAAAs/B,aAAA3e,GACAwG,EAAAuyB,eAAA/4B,GAfAz3B,aAAAg2B,IAAAh2B,GAAAizD,GAAAF,GAAAt5E,GACA28D,IAyBA,SAAA0a,GAAApnD,EAAA5rB,EAAArE,EAAA4a,GACA,MAAA4pC,EAAAv0B,EAAAu0B,MACA3hB,EAAA2hB,EAAAvrC,SACAwgE,EAAA7+D,EAAAU,aAAAjX,GACA,IAAAomB,EAAAuzB,EAEA,GAAAy7B,GAAAz5E,EAAA,CACA,MAAA05E,EAAA9+D,EAAAtc,OAAAsc,EAEAyiB,EAAAq8C,EAAA,IAAAnD,GAAA,IAAAtZ,GAGA,GAFAhtC,EAAA80B,MAAA+xB,SAAAz5C,GAEAq8C,EAAA,CAEA,MAAA7gB,EAAAj+C,EAAA3B,SAAA4pB,EAAAg2B,QAAA,KAEA7a,EAAA,IAAAse,GAAA1hD,EAAAvW,EAAAo1E,EAAAz5E,EAAA64D,OACG,CAYH,MAAAA,GAPApuC,EAJA7P,EAAAuE,GAAA,WAIA,IAAAy+B,GAAArB,GAAA30B,aAAAhN,GAAA2hC,GAAAmB,0BAAA9iC,EAAA,IAIA,IAAAgjC,GAAArB,GAAA30B,aAAAhN,GAAA2hC,GAAAj1B,YAAA1M,KAGAtc,KAAA2a,SAAA4pB,EAAAg2B,QAAA,KAEA7a,EAAA,IAAAid,GAAAxwC,EAAApmB,EAAAo1E,EAAAz5E,EAAA64D,GAGAx7B,EAAAs/B,aAAA3e,GACAwG,EAAAuyB,eAAA/4B,IAWA,SAAAy6B,GAAAxoD,EAAA1wB,EAAAmkD,EAAA/qB,GACA,MAAA6rB,EAAAv0B,EAAAu0B,MACA3hB,EAAA2hB,EAAAvrC,SACAokB,EAAA,IAAA82C,GAEAn2B,EAAA,IAAAie,GAAA18D,EAAAmkD,EAAA/qB,EAAA6rB,EAAA7B,QAAA9f,EAAAg2B,SAEA5oC,EAAA80B,MAAA+xB,SAAAz5C,GACAA,EAAAs/B,aAAA3e,GACAwG,EAAAuyB,eAAA/4B,GAWA,SAAAw5B,GAAAjxD,EAAApI,EAAAkf,EAAAmnB,GACA,IAAAxG,EAEA,GAAAz3B,EAAAjoB,KAAA2a,SAAA,CACA,MAAA4pB,EAAA2hB,EAAAvrC,SACA0gE,EAAA,IAAAp9B,GAAA1Z,EAAA8a,WAAA,IAEAK,EAAA,IAAA4d,GAAAr1C,EAAApI,EAAAw7D,EAAA92C,EAAAg2B,cAEA7a,EAAA,IAAAw4B,GAAAjwD,EAAApI,GAGAkf,EAAAs/B,aAAA3e,GACAwG,EAAAuyB,eAAA/4B,GAUA,SAAA64B,GAAA+C,EAAAC,GAEA,OAAAD,IAAAC,GAKAD,aAAAnD,IAAAoD,aAAApD;;;;SClxCAqD,GACA32E,cAUAG,KAAAy2E,kBAAA,IAAArwE,IAUApG,KAAA02E,kBAAA,IAAAtwE,IAYApG,KAAA22E,gBAAA,IAAAvwE,IASApG,KAAA42E,aAAA,EAYA52E,KAAA62E,eAAA,KAYA72E,KAAA82E,4BAAA,KASAt9D,cACA,OAAA,GAAAxZ,KAAAy2E,kBAAA9kE,MAAA,GAAA3R,KAAA22E,gBAAAhlE,KAWA9R,gBAAA66C,GACA,OAAAA,EAAA5xC,MACA,IAAA,SACA,GAAA9I,KAAA+2E,qBAAAr8B,EAAAz3B,SAAA5N,QACA,OAGArV,KAAAg3E,YAAAt8B,EAAAz3B,SAAA5N,OAAAqlC,EAAAz3B,SAAA3T,OAAAorC,EAAAhgC,MAAA09B,WAEA,MAEA,IAAA,eACA,IAAA,kBACA,IAAA,kBACA,IAAA,MAAA9gC,KAAAojC,EAAAvzB,MAAA24B,WACA9/C,KAAA+2E,qBAAAz/D,EAAAjC,SAIArV,KAAAi3E,eAAA3/D,GAGA,MAEA,IAAA,SACA,IAAA,OACA,IAAA,WAAA,CACA,MAAA4/D,EAAAl3E,KAAA+2E,qBAAAr8B,EAAAZ,eAAAzkC,QACA8hE,EAAAn3E,KAAA+2E,qBAAAr8B,EAAA1nB,eAAA3d,QAEA6hE,GACAl3E,KAAAo3E,YAAA18B,EAAAZ,eAAAzkC,OAAAqlC,EAAAZ,eAAAxqC,OAAAorC,EAAA7/B,SAGAs8D,GACAn3E,KAAAg3E,YAAAt8B,EAAA1nB,eAAA3d,OAAAqlC,EAAAiH,qBAAAryC,OAAAorC,EAAA7/B,SAGA,MAEA,IAAA,SACA,GAAA7a,KAAA+2E,qBAAAr8B,EAAAz3B,SAAA5N,QACA,OAGArV,KAAAo3E,YAAA18B,EAAAz3B,SAAA5N,OAAAqlC,EAAAz3B,SAAA3T,OAAA,GACAtP,KAAAg3E,YAAAt8B,EAAAz3B,SAAA5N,OAAAqlC,EAAAz3B,SAAA3T,OAAA,GAOAtP,KAAA62E,eAAA,KAWAh3E,mBAAAggD,EAAAO,EAAA/qB,GACA,MAAAgiD,EAAAr3E,KAAA22E,gBAAAn6E,IAAAqjD,GAEAw3B,GAMAA,EAAAhiD,SAAAA,EAEA,MAAAgiD,EAAAj3B,UAAA,MAAAi3B,EAAAhiD,UAGAr1B,KAAA22E,gBAAArwE,OAAAu5C,IAVA7/C,KAAA22E,gBAAAtwE,IAAAw5C,GACAO,SAAAA,EACA/qB,SAAAA,IAkBAx1B,qBACA,MAAAf,KAEA,IAAA,MAAA7C,EAAAs7C,KAAAv3C,KAAA22E,gBACA,MAAAp/B,EAAA6I,UACAthD,EAAAmF,MAAkBhI,KAAAA,EAAAkrB,MAAAowB,EAAA6I,WAIlB,OAAAthD,EAQAe,kBACA,MAAAf,KAEA,IAAA,MAAA7C,EAAAs7C,KAAAv3C,KAAA22E,gBACA,MAAAp/B,EAAAliB,UACAv2B,EAAAmF,MAAkBhI,KAAAA,EAAAkrB,MAAAowB,EAAAliB,WAIlB,OAAAv2B,EAmBAe,WAAAwD,GAAwBi0E,2BAAA,IAExB,GAAAt3E,KAAA62E,eACA,OAAAxzE,EAAAi0E,0BACAt3E,KAAA82E,4BAAAnyE,QAEA3E,KAAA62E,eAAAlyE,QAKA,MAAA4yE,KAGA,IAAA,MAAA//D,KAAAxX,KAAAy2E,kBAAA51E,OAAA,CAEA,MAAA22E,EAAAx3E,KAAAy2E,kBAAAj6E,IAAAgb,GAAAsC,KAAA,CAAA2F,EAAAkF,IACAlF,EAAAnQ,SAAAqV,EAAArV,OACAmQ,EAAA3W,MAAA6b,EAAA7b,KAIA,UAAA2W,EAAA3W,MAAA,EAAA,EAGA,EAGA2W,EAAAnQ,OAAAqV,EAAArV,QAAA,EAAA,GAIAmoE,EAAAz3E,KAAA02E,kBAAAl6E,IAAAgb,GAEAkgE,EAAAC,GAAAngE,EAAA4C,eAGAwjB,EAAAg6C,GAAAH,EAAAxyE,OAAAuyE,GAEA,IAAA97E,EAAA,EACAq/C,EAAA,EAGA,IAAA,MAAA/c,KAAAJ,EACA,GAAA,MAAAI,EAEAu5C,EAAAtzE,KAAAjE,KAAA63E,eAAArgE,EAAA9b,EAAAg8E,EAAAh8E,GAAAO,OAEAP,SACK,GAAA,MAAAsiC,EAELu5C,EAAAtzE,KAAAjE,KAAA83E,eAAAtgE,EAAA9b,EAAA+7E,EAAA18B,GAAA9+C,OAEA8+C,SACK,GAAA,MAAA/c,EAAA,CAEL,MAAA+5C,EAAAL,EAAAh8E,GAAAse,WACAg+D,EAAAP,EAAA18B,GAAA/gC,WACA,IAAAmN,EAEA,GAAA,SAAAuwD,EAAAh8E,GAAAO,KACAkrB,EAAAmzB,GAAAjzB,4BAAA7P,EAAA9b,EAAA8b,EAAA9b,EAAA,OACM,CACN,MAAAsM,EAAAwP,EAAAmhC,cAAAj9C,GACAyrB,EAAAmzB,GAAAjzB,4BAAA7P,EAAA9b,EAAA8b,EAAA/B,SAAAzN,GAAA,GAKAuvE,EAAAtzE,QAAAjE,KAAAi4E,mBAAA9wD,EAAA6wD,EAAAD,IAEAr8E,IACAq/C,SAGAr/C,IACAq/C,IAMAw8B,EAAAz9D,KAAA,CAAA2F,EAAAkF,IAIAlF,EAAAwD,SAAAjoB,MAAA2pB,EAAA1B,SAAAjoB,KACAykB,EAAAwD,SAAAjoB,KAAA2nB,SAAAgC,EAAA1B,SAAAjoB,KAAA2nB,UAAA,EAAA,EAIAlD,EAAAwD,SAAAwB,QAAAE,EAAA1B,UAEAxD,EAAAy4D,YAAAvzD,EAAAuzD,aAAA,EAAA,EAIAz4D,EAAAwD,SAAAqD,SAAA3B,EAAA1B,WAAA,EAAA,GAIA,IAAA,IAAAvnB,EAAA,EAAkBA,EAAA67E,EAAAtyE,OAAoBvJ,IAAA,CACtC,MAAAy8E,EAAAZ,EAAA77E,EAAA,GACA08E,EAAAb,EAAA77E,GAGA28E,EACA,UAAAF,EAAArvE,MAAA,UAAAsvE,EAAAtvE,MACA,SAAAqvE,EAAAl8E,MAAA,SAAAm8E,EAAAn8E,MACAk8E,EAAAl1D,SAAAwB,QAAA2zD,EAAAn1D,UAGAq1D,EACA,UAAAH,EAAArvE,MAAA,UAAAsvE,EAAAtvE,MACA,SAAAqvE,EAAAl8E,MAAA,SAAAm8E,EAAAn8E,MACAk8E,EAAAl1D,SAAA5N,QAAA+iE,EAAAn1D,SAAA5N,QACA8iE,EAAAl1D,SAAA3T,OAAA6oE,EAAAlzE,QAAAmzE,EAAAn1D,SAAA3T,OAGAipE,EACA,aAAAJ,EAAArvE,MAAA,aAAAsvE,EAAAtvE,MACAqvE,EAAAl1D,SAAA5N,QAAA+iE,EAAAn1D,SAAA5N,QACA8iE,EAAAhxD,MAAApB,QAAAqyD,EAAAjxD,MAAApB,QACAoyD,EAAAl1D,SAAA3T,OAAA6oE,EAAAlzE,QAAAmzE,EAAAn1D,SAAA3T,QACA6oE,EAAAx5B,cAAAy5B,EAAAz5B,cACAw5B,EAAAv5B,mBAAAw5B,EAAAx5B,mBACAu5B,EAAAt5B,mBAAAu5B,EAAAv5B,mBAEAw5B,GAAAC,GAAAC,KACAhB,EAAA77E,EAAA,GAAAuJ,SAEAszE,IACAhB,EAAA77E,EAAA,GAAAyrB,MAAA1D,IAAA8zD,EAAA77E,EAAA,GAAAyrB,MAAA1D,IAAA2D,aAAA,IAGAmwD,EAAAryE,OAAAxJ,EAAA,GACAA,KAKA,IAAA,MAAA4b,KAAAigE,SACAjgE,EAAA4gE,YAEA,aAAA5gE,EAAAxO,cACAwO,EAAA2L,gBACA3L,EAAArS,QAUA,OANAjF,KAAA42E,aAAA,EAGA52E,KAAA82E,4BAAAS,EAAA5yE,QACA3E,KAAA62E,eAAAU,EAAA5yE,QAAA4mB,OAAAitD,IAEAn1E,EAAAi0E,0BACAt3E,KAAA82E,4BAEA92E,KAAA62E,eAOAh3E,QACAG,KAAAy2E,kBAAAlwE,QACAvG,KAAA02E,kBAAAnwE,QACAvG,KAAA22E,gBAAApwE,QACAvG,KAAA62E,eAAA,KAWAh3E,YAAAwV,EAAA/F,EAAAuL,GACA,MAAA49D,GAAsB3vE,KAAA,SAAAwG,OAAAA,EAAAuL,QAAAA,EAAAJ,MAAAza,KAAA42E,gBAEtB52E,KAAA04E,YAAArjE,EAAAojE,GAWA54E,YAAAwV,EAAA/F,EAAAuL,GACA,MAAA49D,GAAsB3vE,KAAA,SAAAwG,OAAAA,EAAAuL,QAAAA,EAAAJ,MAAAza,KAAA42E,gBAEtB52E,KAAA04E,YAAArjE,EAAAojE,GAEAz4E,KAAA24E,wBAAAtjE,EAAA/F,EAAAuL,GASAhb,eAAAyX,GACA,MAAAmhE,GAAsB3vE,KAAA,YAAAwG,OAAAgI,EAAAiN,YAAA1J,QAAAvD,EAAAT,WAAA4D,MAAAza,KAAA42E,gBAEtB52E,KAAA04E,YAAAphE,EAAAjC,OAAAojE,GAUA54E,YAAAwV,EAAAojE,GAEAz4E,KAAA44E,cAAAvjE,GAGA,MAAAmiE,EAAAx3E,KAAA64E,sBAAAxjE,GAGArV,KAAA84E,cAAAL,EAAAjB,GAGAA,EAAAvzE,KAAAw0E,GAIA,IAAA,IAAA/8E,EAAA,EAAkBA,EAAA87E,EAAAvyE,OAAoBvJ,IACtC87E,EAAA97E,GAAAmf,QAAA,IACA28D,EAAAtyE,OAAAxJ,EAAA,GAEAA,KAYAmE,sBAAA2X,GACA,IAAAggE,EAUA,OARAx3E,KAAAy2E,kBAAAluE,IAAAiP,GACAggE,EAAAx3E,KAAAy2E,kBAAAj6E,IAAAgb,IAEAggE,KAEAx3E,KAAAy2E,kBAAApwE,IAAAmR,EAAAggE,IAGAA,EASA33E,cAAA2X,GACAxX,KAAA02E,kBAAAnuE,IAAAiP,IACAxX,KAAA02E,kBAAArwE,IAAAmR,EAAAmgE,GAAAngE,EAAA4C,gBAYAva,cAAAk5E,EAAAvB,GAiBAuB,EAAAC,cAAAD,EAAAl+D,QAEA,IAAA,MAAAo+D,KAAAzB,EAAA,CACA,MAAA0B,EAAAH,EAAAzpE,OAAAypE,EAAAl+D,QACAs+D,EAAAF,EAAA3pE,OAAA2pE,EAAAp+D,QAEA,GAAA,UAAAk+D,EAAAjwE,OACA,UAAAmwE,EAAAnwE,OACAiwE,EAAAzpE,QAAA2pE,EAAA3pE,OACA2pE,EAAA3pE,QAAAypE,EAAAl+D,QACMk+D,EAAAzpE,OAAA6pE,IACNF,EAAAp+D,SAAAk+D,EAAAC,cACAD,EAAAC,cAAA,IAIA,UAAAC,EAAAnwE,MACAiwE,EAAAzpE,OAAA2pE,EAAA3pE,SACA2pE,EAAA3pE,QAAAypE,EAAAl+D,SAIA,aAAAo+D,EAAAnwE,MACA,GAAAiwE,EAAAzpE,QAAA2pE,EAAA3pE,OACA2pE,EAAA3pE,QAAAypE,EAAAl+D,aACM,GAAAk+D,EAAAzpE,OAAA6pE,EAAA,CAWN,MAAAt+D,EAAAo+D,EAAAp+D,QAEAo+D,EAAAp+D,QAAAk+D,EAAAzpE,OAAA2pE,EAAA3pE,OAIAkoE,EAAA13C,SACAh3B,KAAA,YACAwG,OAAA4pE,EACAr+D,QAAAA,EAAAo+D,EAAAp+D,QACAJ,MAAAza,KAAA42E,iBAMA,GAAA,UAAAmC,EAAAjwE,KAAA,CACA,GAAA,UAAAmwE,EAAAnwE,KACA,GAAAowE,GAAAD,EAAA3pE,OACA2pE,EAAA3pE,QAAAypE,EAAAl+D,aACM,GAAAq+D,GAAAC,EACN,GAAAJ,EAAAzpE,OAAA2pE,EAAA3pE,OAAA,CACA,MAAA8pE,EAAAF,EAAAD,EAAA3pE,OAEA2pE,EAAA3pE,OAAAypE,EAAAzpE,OAEA2pE,EAAAp+D,SAAAu+D,EACAL,EAAAC,eAAAI,OAEAH,EAAAp+D,SAAAk+D,EAAAC,cACAD,EAAAC,cAAA,OAGA,GAAAD,EAAAzpE,QAAA2pE,EAAA3pE,OACAypE,EAAAC,eAAAC,EAAAp+D,QACAo+D,EAAAp+D,QAAA,OACO,GAAAk+D,EAAAzpE,OAAA6pE,EAAA,CACP,MAAAC,EAAAD,EAAAJ,EAAAzpE,OAEA2pE,EAAAp+D,SAAAu+D,EACAL,EAAAC,eAAAI,EAgBA,GAXA,UAAAH,EAAAnwE,OACAiwE,EAAAzpE,OAAAypE,EAAAl+D,SAAAo+D,EAAA3pE,OACA2pE,EAAA3pE,QAAAypE,EAAAl+D,QACMk+D,EAAAzpE,OAAA2pE,EAAA3pE,SACN2pE,EAAA3pE,OAAAypE,EAAAzpE,OACA2pE,EAAAp+D,SAAAk+D,EAAAC,cAEAD,EAAAC,cAAA,IAIA,aAAAC,EAAAnwE,KACA,GAAAowE,GAAAD,EAAA3pE,OACA2pE,EAAA3pE,QAAAypE,EAAAl+D,aACM,GAAAk+D,EAAAzpE,OAAA2pE,EAAA3pE,OAAA,CACN,MAAA8pE,EAAAF,EAAAD,EAAA3pE,OAEA2pE,EAAA3pE,OAAAypE,EAAAzpE,OACA2pE,EAAAp+D,SAAAu+D,OACM,GAAAL,EAAAzpE,OAAA6pE,EACN,GAAAD,GAAAC,EAAA,CAMA,MAAAt+D,EAAAo+D,EAAAp+D,QAEAo+D,EAAAp+D,QAAAk+D,EAAAzpE,OAAA2pE,EAAA3pE,OAEA,MAAA+pE,EAAAx+D,EAAAo+D,EAAAp+D,QAAAk+D,EAAAC,cAIAxB,EAAA13C,SACAh3B,KAAA,YACAwG,OAAAypE,EAAAzpE,OACAuL,QAAAw+D,EACA5+D,MAAAza,KAAA42E,sBAGAqC,EAAAp+D,SAAAs+D,EAAAJ,EAAAzpE,OAMA,GAAA,aAAAypE,EAAAjwE,KAAA,CACA,GAAA,UAAAmwE,EAAAnwE,KACA,GAAAiwE,EAAAzpE,OAAA2pE,EAAA3pE,QAAA4pE,EAAAD,EAAA3pE,OAAA,CACA,GAAA4pE,EAAAC,EAAA,CAOA,MAAAG,GACAxwE,KAAA,YACAwG,OAAA6pE,EACAt+D,QAAAq+D,EAAAC,EACA1+D,MAAAza,KAAA42E,gBAGA52E,KAAA84E,cAAAQ,EAAA9B,GAEAA,EAAAvzE,KAAAq1E,GAGAP,EAAAC,cAAAC,EAAA3pE,OAAAypE,EAAAzpE,YACMypE,EAAAzpE,QAAA2pE,EAAA3pE,QAAAypE,EAAAzpE,OAAA6pE,IACND,EAAAC,GACAJ,EAAAC,cAAAE,EAAAC,EACAJ,EAAAzpE,OAAA6pE,GAEAJ,EAAAC,cAAA,GAKA,aAAAC,EAAAnwE,MACAiwE,EAAAzpE,QAAA2pE,EAAA3pE,QAAA4pE,GAAAC,IACAJ,EAAAC,cAAA,IAMAD,EAAAl+D,QAAAk+D,EAAAC,qBACAD,EAAAC,cAYAn5E,eAAAwV,EAAA/F,EAAArT,GACA,OACA6M,KAAA,SACAma,SAAAg2B,GAAAmB,0BAAA/kC,EAAA/F,GACArT,KAAAA,EACAgJ,OAAA,EACAizE,YAAAl4E,KAAA42E,gBAaA/2E,eAAAwV,EAAA/F,EAAArT,GACA,OACA6M,KAAA,SACAma,SAAAg2B,GAAAmB,0BAAA/kC,EAAA/F,GACArT,KAAAA,EACAgJ,OAAA,EACAizE,YAAAl4E,KAAA42E,gBAaA/2E,mBAAAsnB,EAAAo9B,EAAAF,GAEA,MAAAk1B,KAGAl1B,EAAA,IAAAj+C,IAAAi+C,GAGA,IAAA,MAAAtjD,EAAAqe,KAAAmlC,EAAA,CAEA,MAAA/3C,EAAA63C,EAAA97C,IAAAxH,GAAAsjD,EAAA7nD,IAAAuE,GAAA,KAGAyL,IAAA4S,GAEAm6D,EAAAt1E,MACA6E,KAAA,YACAma,SAAAkE,EAAA7J,MACA6J,MAAAmzB,GAAAzzB,gBAAAM,GACAliB,OAAA,EACA05C,aAAA59C,EACA69C,kBAAAx/B,EACAy/B,kBAAAryC,EACA0rE,YAAAl4E,KAAA42E,iBAKAvyB,EAAA/9C,OAAAvF,GAIA,IAAA,MAAAA,EAAAyL,KAAA63C,EAEAk1B,EAAAt1E,MACA6E,KAAA,YACAma,SAAAkE,EAAA7J,MACA6J,MAAAmzB,GAAAzzB,gBAAAM,GACAliB,OAAA,EACA05C,aAAA59C,EACA69C,kBAAA,KACAC,kBAAAryC,EACA0rE,YAAAl4E,KAAA42E,iBAIA,OAAA2C,EAUA15E,qBAAA2X,GACA,MAAAnC,EAAAmC,EAAAnC,OAEA,IAAAA,EACA,OAAA,EAGA,MAAAmiE,EAAAx3E,KAAAy2E,kBAAAj6E,IAAA6Y,GACA/F,EAAAkI,EAAA+M,YAEA,GAAAizD,EACA,IAAA,MAAAjgC,KAAAigC,EACA,GAAA,UAAAjgC,EAAAzuC,MAAAwG,GAAAioC,EAAAjoC,QAAAA,EAAAioC,EAAAjoC,OAAAioC,EAAA18B,QACA,OAAA,EAKA,OAAA7a,KAAA+2E,qBAAA1hE,GAYAxV,wBAAAwV,EAAA/F,EAAAuL,GACA,MAAAsM,EAAAmzB,GAAAjzB,4BAAAhS,EAAA/F,EAAA+F,EAAA/F,EAAAuL,GAEA,IAAA,MAAAvD,KAAA6P,EAAA24B,UAAuCz8B,SAAA,IACvC/L,EAAAuE,GAAA,aACA7b,KAAA02E,kBAAApwE,OAAAgR,GACAtX,KAAAy2E,kBAAAnwE,OAAAgR,GAEAtX,KAAA24E,wBAAArhE,EAAA,EAAAA,EAAA8gC,aAQA,SAAAu/B,GAAAt5E,GACA,MAAAm7E,KAEA,IAAA,MAAAr/D,KAAA9b,EACA,GAAA8b,EAAA0B,GAAA,QACA,IAAA,IAAAngB,EAAA,EAAmBA,EAAAye,EAAA/Y,KAAA6D,OAAuBvJ,IAC1C89E,EAAAv1E,MACAhI,KAAA,QACA+d,WAAA,IAAA5T,IAAA+T,EAAAsb,wBAIA+jD,EAAAv1E,MACAhI,KAAAke,EAAAle,KACA+d,WAAA,IAAA5T,IAAA+T,EAAAsb,mBAKA,OAAA+jD,EAgDA,SAAA5B,GAAA6B,EAAAjC,GACA,MAAA55C,KAEA,IAAAtuB,EAAA,EACAoqE,EAAA,EAGA,IAAA,MAAAniC,KAAAigC,EAEAjgC,EAAAjoC,OAAAA,IACAsuB,EAAA35B,QAAA,IAAA01E,OAAApiC,EAAAjoC,OAAAA,GAAA9O,MAAA,KAEAk5E,GAAAniC,EAAAjoC,OAAAA,GAIA,UAAAioC,EAAAzuC,MACA80B,EAAA35B,QAAA,IAAA01E,OAAApiC,EAAA18B,SAAAra,MAAA,KAGA8O,EAAAioC,EAAAjoC,OAAAioC,EAAA18B,SACG,UAAA08B,EAAAzuC,MACH80B,EAAA35B,QAAA,IAAA01E,OAAApiC,EAAA18B,SAAAra,MAAA,KAGA8O,EAAAioC,EAAAjoC,OAEAoqE,GAAAniC,EAAA18B,UAEA+iB,EAAA35B,QAAA,IAAA01E,OAAApiC,EAAA18B,SAAAra,MAAA,KAGA8O,EAAAioC,EAAAjoC,OAAAioC,EAAA18B,QAEA6+D,GAAAniC,EAAA18B,SAUA,OAJA6+D,EAAAD,GACA77C,EAAA35B,QAAA,IAAA01E,OAAAF,EAAAC,GAAAl5E,MAAA,KAGAo9B,EAIA,SAAA46C,GAAAlwE,GACA,MAAAsxE,EAAAtxE,EAAA2a,UAAA,cAAA3a,EAAA2a,SAAAjoB,KAAA2nB,SACAk3D,EAAAvxE,EAAA6e,OAAA,cAAA7e,EAAA6e,MAAAnsB,KAAA2nB,SAEA,OAAAi3D,IAAAC;;;;SC38BAC,GAIAj6E,cAOAG,KAAA+5E,WASA/5E,KAAAg6E,eAAA,IAAA5zE,IAYApG,KAAAi6E,WAAA,IAAA7zE,IAQApG,KAAAk6E,cAAA,IAAAjhE,IAQApZ,SAAAk6B,GACA,GAAAA,EAAA4gB,WAAA11C,OAAA,IAAAjF,KAAAg6E,eAAAzxE,IAAAwxB,EAAA28B,aAAA,CACA,MAAA1uD,EAAAhI,KAAA+5E,QAAA90E,OAEAjF,KAAA+5E,QAAA/xE,GAAA+xB,EACA/5B,KAAAg6E,eAAA3zE,IAAA0zB,EAAA28B,YAAA1uD,IAaAnI,WAAA8F,EAAA,EAAAO,EAAAywB,OAAAC,mBAEA,GAAA,IAAA52B,KAAA+5E,QAAA90E,OACA,OAIA,IAAAg4D,EAAAj9D,KAAAm6E,UAAAx0E,GAGA,IAAA,GAAAs3D,EAKA,KAAAA,EAAAj9D,KAAA+5E,QAAA90E,QAAA,CACA,MAAA80B,EAAA/5B,KAAA+5E,QAAA9c,KAEA,GAAAljC,EAAA28B,aAAAxwD,EACA,YAGA6zB,GAUAl6B,SAAA62D,GACA,MAAA1uD,EAAAhI,KAAAg6E,eAAAx9E,IAAAk6D,GAEA,YAAAn5D,IAAAyK,EAAA,KAAAhI,KAAA+5E,QAAA/xE,GAUAnI,iBAAAowE,EAAAmK,GACAp6E,KAAAi6E,WAAA5zE,IAAA+zE,EAAAnK,GACAjwE,KAAAk6E,cAAA9nE,IAAA69D,GASApwE,eAAAk6B,GACA,OAAA/5B,KAAAi6E,WAAA1xE,IAAAwxB,GASAl6B,cAAAk6B,GACA,OAAA/5B,KAAAk6E,cAAA3xE,IAAAwxB,GAUAl6B,eAAAu6E,GACA,OAAAp6E,KAAAi6E,WAAAz9E,IAAA49E,GASAv6E,UAAA62D,GACA,MAAA1uD,EAAAhI,KAAAg6E,eAAAx9E,IAAAk6D,GAGA,QAAAn5D,IAAAyK,EAAA,CACA,MAAA2nE,EAAA3vE,KAAA+5E,QAAA/5E,KAAA+5E,QAAA90E,OAAA,GACAo1E,EAAA1K,EAAAjZ,YAAAiZ,EAAAh1B,WAAA11C,OAEA,GAAAyxD,EAAA,GAAAA,GAAA2jB,EAEA,OAAA,EAQA,MAAA,IAAAp5E,EAAA,oFAGA,OAAA+G;;;;GCtIA,SAAAsyE,GAAApvE,EAAAoE,GACA,SAzBAirE,EAyBArvE,EAAAkQ,OAAA9L,EAAA,KAxBA,GAAAirE,EAAAt1E,QAAA,kBAAA8E,KAAAwwE,IAYA,SAAAA,GACA,QAAAA,GAAA,GAAAA,EAAAt1E,QAAA,kBAAA8E,KAAAwwE,GAWAC,CAAAtvE,EAAAkQ,OAAA9L,IAzBA,IAAAirE,EAmCA,SAAAE,GAAAvvE,EAAAoE,GACA,SAjDAirE,EAiDArvE,EAAAkQ,OAAA9L,KAhDA,GAAAirE,EAAAt1E,QAAA,sEAAA8E,KAAAwwE,GADA,IAAAA;;;;GCKA,MAAAG,GAAA,mBASAC,GAKA96E,YAAAqhD,GAOAlhD,KAAAkhD,MAAAA,EAWAlhD,KAAAu1D,QAAA,EAUAv1D,KAAA+vE,QAAA,IAAA+J,GAAA95E,MAQAA,KAAAuiB,UAAA,IAAA4/B,GAAAniD,MASAA,KAAAwsB,MAAA,IAAAlC,IAAgCI,WAAA,aAQhC1qB,KAAAs+C,OAAA,IAAAk4B,GAQAx2E,KAAAysB,YAAA,IAAAxT,IAGAjZ,KAAA46E,WAAA,QAAAF,IAGA16E,KAAAsD,SAAA49C,EAAA,iBAAA,CAAAtgC,EAAArd,KACA,MAAAm3C,EAAAn3C,EAAA,GAEA,GAAAm3C,EAAA6G,qBAAA7G,EAAAgc,cAAA12D,KAAAu1D,QAOA,MAAA,IAAAt0D,EACA,uGACMy5C,UAAAA,MAGAh4C,SAAA,YAGN1C,KAAAsD,SAAA49C,EAAA,iBAAA,CAAAtgC,EAAArd,KACA,MAAAm3C,EAAAn3C,EAAA,GAEAm3C,EAAA6G,qBACAvhD,KAAAs+C,OAAAu8B,gBAAAngC,KAEMh4C,SAAA,SAGN1C,KAAAsD,SAAA49C,EAAA,iBAAA,CAAAtgC,EAAArd,KACA,MAAAm3C,EAAAn3C,EAAA,GAEAm3C,EAAA6G,sBACAvhD,KAAAu1D,UACAv1D,KAAA+vE,QAAAyD,SAAA94B,EAAA3gB,UAEMr3B,SAAA,QAGN,IAAAo4E,GAAA,EAEA96E,KAAAsD,SAAAtD,KAAAuiB,UAAA,SAAA,KACAu4D,GAAA,IAMA96E,KAAAsD,SAAA49C,EAAA,UAAA,CAAAtgC,EAAA+L,KACA3sB,KAAAs+C,OAAA9kC,UAAAshE,IACA96E,KAAAs3C,gBAAA3qB,GAEA3sB,KAAA+G,KAAA,SAAA4lB,EAAA80B,OAEAzhD,KAAAs+C,OAAAy8B,QACAD,GAAA,KAOA96E,KAAAsD,SAAA49C,EAAA7B,QAAA,SAAA,CAAAz+B,EAAA6+B,EAAAW,EAAA/qB,KAEAr1B,KAAAs+C,OAAAgK,mBAAA7I,EAAAxjD,KAAAmkD,EAAA/qB,GAEA+qB,GAEAX,EAAA9+B,GAAA,SAAA,CAAAC,EAAAw/B,KACApgD,KAAAs+C,OAAAgK,mBAAA7I,EAAAxjD,KAAAmkD,EAAAX,EAAAE,gBAYAtF,gBACA,OAAAr6C,KAAAk3C,QAAAwjC,IAWA76E,WAAAg0D,EAAA,QAAAlxC,EAAA,QACA,GAAA3iB,KAAAwsB,MAAAhwB,IAAAmmB,GAQA,MAAA,IAAA1hB,EACA,mFACKhF,KAAA0mB,IAIL,MAAA3nB,EAAA,IAAAm4E,GAAAnzE,KAAA6zD,EAAAlxC,GAGA,OAFA3iB,KAAAwsB,MAAApa,IAAApX,GAEAA,EAMA6E,UACAG,KAAAuiB,UAAAqpB,UACA5rC,KAAAwD,gBAUA3D,QAAA5D,EAAA,QACA,OAAA+D,KAAAwsB,MAAAhwB,IAAAP,GAQA4D,eACA,OAAA6F,MAAAC,KAAA3F,KAAAwsB,MAAAxxB,GAAAA,EAAA2nB,UAAA4I,OAAAtvB,GAAAA,GAAAy+E,IAsCA76E,kBAAA6sB,GACA1sB,KAAAysB,YAAAra,IAAAsa,GAQA7sB,SACA,MAAAuW,EAAAjB,GAAAnV,MAMA,OAHAoW,EAAAmM,UAAA,mCACAnM,EAAA8qC,MAAA,uBAEA9qC,EAUAvW,kBACA,IAAA,MAAA7E,KAAAgF,KAAAwsB,MACA,GAAAxxB,IAAAgF,KAAAq6C,UACA,OAAAr/C,EAIA,OAAAgF,KAAAq6C,UAUAx6C,mBACA,MAAAm7E,EAAAh7E,KAAAi7E,kBACA95B,EAAAnhD,KAAAkhD,MAAAC,OAGAl+B,EAAA,IAAAg2B,GAAA+hC,GAAA,IAIA,OAHA75B,EAAA8D,yBAAAhiC,IAGA,IAAAq3B,GAAAr3B,GAWApjB,wBAAAsnB,GACA,OAAA+zD,GAAA/zD,EAAA7J,QAAA49D,GAAA/zD,EAAA1D,KAQA5jB,gBAAA8sB,GACA,IAAAC,GAAA,EAEA,GACA,IAAA,MAAAxpB,KAAApD,KAAAysB,YAGA,GAFAG,EAAAxpB,EAAAupB,GAGA,YAGGC,IAiBH,SAAAsuD,GAAAC,GACA,MAAAxkE,EAAAwkE,EAAAxkE,SAEA,GAAAA,EAAA,CACA,MAAAvV,EAAAuV,EAAAvV,KACAkO,EAAA6rE,EAAA7rE,OAAAqH,EAAA4N,YAEA,OAAA+1D,GAAAl5E,EAAAkO,KAAAmrE,GAAAr5E,EAAAkO,GAGA,OAAA;;;;GAdAtI,EAAA2zE,GAAAtkE,SCxVA+kE,GAIAv7E,cAOAG,KAAA44D,SAAA,IAAAxyD,IAUAvG,CAAAoD,OAAAiU,YACA,OAAAlX,KAAA44D,SAAAvpD,SASAxP,IAAAggD,GACA,OAAA7/C,KAAA44D,SAAArwD,IAAAs3C,GAUAhgD,IAAAggD,GACA,OAAA7/C,KAAA44D,SAAAp8D,IAAAqjD,IAAA,KAmBAhgD,KAAAy1E,EAAAnuD,EAAA+tD,GAAA,GACA,MAAAr1B,EAAAy1B,aAAA+F,GAAA/F,EAAAr5E,KAAAq5E,EACAgG,EAAAt7E,KAAA44D,SAAAp8D,IAAAqjD,GAEA,GAAAy7B,EAAA,CACA,MAAAl7B,EAAAk7B,EAAA37B,WACA,IAAA47B,GAAA,EAgBA,OAdAn7B,EAAA37B,QAAA0C,KACAm0D,EAAAE,iBAAAl6B,GAAAz6B,gBAAAM,IACAo0D,GAAA,GAGArG,GAAAoG,EAAApG,yBACAoG,EAAAG,wBAAAvG,EACAqG,GAAA,GAGAA,GACAv7E,KAAA+G,KAAA,UAAA84C,EAAAy7B,EAAAl7B,EAAAj5B,GAGAm0D,EAGA,MAAAx3B,EAAAxC,GAAAz6B,gBAAAM,GACAs4B,EAAA,IAAA47B,GAAAx7B,EAAAiE,EAAAoxB,GAKA,OAHAl1E,KAAA44D,SAAAvyD,IAAAw5C,EAAAJ,GACAz/C,KAAA+G,KAAA,UAAA84C,EAAAJ,EAAA,KAAAt4B,GAEAs4B,EAWA5/C,QAAAy1E,GACA,MAAAz1B,EAAAy1B,aAAA+F,GAAA/F,EAAAr5E,KAAAq5E,EACAgG,EAAAt7E,KAAA44D,SAAAp8D,IAAAqjD,GAEA,QAAAy7B,IACAt7E,KAAA44D,SAAAtyD,OAAAu5C,GACA7/C,KAAA+G,KAAA,UAAA84C,EAAAy7B,EAAAA,EAAA37B,WAAA,MAEA3/C,KAAA07E,eAAAJ,IAEA,GAYAz7E,sBAAAojB,GACA,IAAA,MAAAw8B,KAAAz/C,KACAy/C,EAAAE,WAAAl5B,iBAAAxD,WACAw8B,GAQA5/C,UACA,IAAA,MAAA4/C,KAAAz/C,KAAA44D,SAAAvpD,SACArP,KAAA07E,eAAAj8B,GAGAz/C,KAAA44D,SAAA,KAEA54D,KAAAwD,gBAgBA3D,iBAAA87E,GACA,IAAA,MAAAl8B,KAAAz/C,KAAA44D,SAAAvpD,SACAowC,EAAAxjD,KAAAgnD,WAAA04B,EAAA,aACAl8B,GAWA5/C,eAAA4/C,GACAA,EAAAj8C,gBACAi8C,EAAAm8B,oBAeA50E,EAAAo0E,GAAA/kE,SAyEAglE,GAQAx7E,YAAA5D,EAAA6nD,EAAAoxB,GAOAl1E,KAAA/D,KAAAA,EAQA+D,KAAAy7E,wBAAAvG,EAQAl1E,KAAA67E,WAAA77E,KAAAw7E,iBAAA13B,GAUAoxB,6BACA,IAAAl1E,KAAA67E,WACA,MAAA,IAAA56E,EAAA,6DAGA,OAAAjB,KAAAy7E,wBAQA57E,WACA,IAAAG,KAAA67E,WACA,MAAA,IAAA56E,EAAA,6DAGA,OAAAg4C,GAAA91B,mBAAAnjB,KAAA67E,WAAAv+D,OAQAzd,SACA,IAAAG,KAAA67E,WACA,MAAA,IAAA56E,EAAA,6DAGA,OAAAg4C,GAAA91B,mBAAAnjB,KAAA67E,WAAAp4D,KAeA5jB,WACA,IAAAG,KAAA67E,WACA,MAAA,IAAA56E,EAAA,6DAGA,OAAAq5C,GAAAzzB,gBAAA7mB,KAAA67E,YAUAh8E,iBAAAikD,GAWA,OAVA9jD,KAAA67E,YACA77E,KAAA47E,mBAIA93B,EAAAxB,SAAA,gBAAAp8C,GAAAlG,MACA8jD,EAAAxB,SAAA,kBAAAp8C,GAAAlG,MAEAA,KAAA67E,WAAA/3B,EAEAA,EAQAjkD,mBACAG,KAAA67E,WAAAC,eAAA,eAAA97E,MACAA,KAAA67E,WAAAC,eAAA,iBAAA97E,MACAA,KAAA67E,WAAAj4C,SACA5jC,KAAA67E,WAAA,MAgCA70E,EAAAq0E,GAAAhlE;;;;;MCraA0lE,WAAA9iC,GAUAp5C,YAAA7E,EAAAgH,EAAAg6E,GAGA,GAFAx6E,MAAAxG,EAAAgH,IAEAhC,KAAAhF,KAAA6gB,GAAA,eAMA,MAAA,IAAA5a,EACA,sGAwBAjB,KAAAg8E,WAAAA,GAAA,eA+DA,WAEA,MAAAvhC,EAAA,IAAAxhC,KAAA,SAAA,OAAA,SAAA,aAEAjZ,KAAAsD,SACAtD,KAAAhF,KAAA2a,SAAAurC,MACA,iBACA,CAAA/9C,EAAAI,KACA,MAAAm3C,EAAAn3C,EAAA,GAEAm3C,EAAA6G,qBAIA9G,EAAAlyC,IAAAmyC,EAAA5xC,OAgBA,SAAA4xC,GAEA,IAAAvzB,EACAlE,EAEA,UAAAy3B,EAAA5xC,KACAqe,EAAAmzB,GAAAhzB,2BAAAozB,EAAAz3B,SAAAy3B,EAAAhgC,MAAA09B,YAEAjxB,EAAAmzB,GAAAhzB,2BAAAozB,EAAAiH,qBAAAjH,EAAA7/B,SACAoI,EAAAy3B,EAAAZ,gBAGA,MAAAj/B,EAAAsM,EAAA1D,IAAAnU,OAAA6X,EAAA7J,MAAAhO,OACA,IAAAqqC,EAEA,OAAAe,EAAA5xC,MACA,IAAA,SACA,MAAA6xB,EAAA,gBAAA36B,KAAAg8E,WACAriC,EAAA35C,KAAAk6C,2BAAA/yB,EAAA7J,MAAAzC,EAAA8f,GACA,MAEA,IAAA,OACA,IAAA,SACA,IAAA,WACA,MAAAshD,EAAA3hC,GAAAhzB,2BAAArE,EAAApI,GAEAqhE,EAAAD,EAAAx1D,iBAAAzmB,OACAi8E,EAAA3+D,MAAAmH,QAAAzkB,OAAA,gBAAAA,KAAAg8E,YACAC,EAAAx4D,IAAAgB,QAAAzkB,OAAA,oBAAAA,KAAAg8E,WAGA,GAAAE,EACAviC,EAAA35C,KAAAi6C,aAAAh3B,EAAAkE,EAAA7J,WACI,CACJ,MAAAqd,EAAA,gBAAA36B,KAAAg8E,WAKAhpD,EAAA7L,EAAA7J,MAAA48B,2BAAAj3B,EAAApI,GAEA8+B,EAAA35C,KAAAk7C,sBAAAj4B,EAAA+P,EAAAnY,EAAA8f,IAKA,IAAA36B,KAAAykB,QAAAk1B,GAAA,CACA,MAAAwiC,EAAAljC,GAAA91B,mBAAAnjB,MAEAA,KAAAgC,KAAA23C,EAAA33C,KACAhC,KAAAhF,KAAA2+C,EAAA3+C,KAEAgF,KAAA+G,KAAA,SAAAo1E,KAnEAtgF,KAAAmE,KAAA06C,KAGGh4C,SAAA,SA/EH7G,KAAAmE,MAQAH,SACAG,KAAAwD,iBA2IAwD,EAAA+0E,GAAA1lE,SC9IA+lE,GACAv8E,YAAAqhD,EAAAv0B,EAAA1J,GAMAjjB,KAAAkhD,MAAAA,EAOAlhD,KAAA2sB,OAAAA,EAOA3sB,KAAAijB,SAAAA,EAaAjjB,KAAAq8E,aAAA,IAAApjE,KAAAjZ,KAAAijB,SAAA5N,SAOArV,KAAAmhD,OAAAD,EAAAC,OAEAnhD,KAAAs8E,uBAUAz8E,YAAA6a,EAAA6hE,GACA7hE,EAAAhV,MAAAC,KAAA+U,GAEA,IAAA,IAAAhf,EAAA,EAAkBA,EAAAgf,EAAAzV,OAAkBvJ,IAAA,CACpC,MAAAgJ,EAAAgW,EAAAhf,GAEAsE,KAAAw8E,YAAA93E,GACA+3E,QAAA,IAAA/gF,GAAA6gF,EAAAE,QACAC,OAAAhhF,IAAAgf,EAAAzV,OAAA,GAAAs3E,EAAAG,SAKA18E,KAAAmhD,OAAA8N,2BAAAjvD,KAAAs8E,oBAAAt8E,KAAA2sB,QACA3sB,KAAAs8E,uBASAz8E,oBACA,OAAAG,KAAA28E,aACAriC,GAAA1wB,SAAA5pB,KAAA28E,cAGA38E,KAAAkhD,MAAAC,OAAA8D,yBAAAjlD,KAAAijB,UAYApjB,YAAA6E,EAAAqpD,GAIA,GAAA/tD,KAAAmhD,OAAA0D,SAAAngD,GAGA,YAFA1E,KAAA48E,cAAAl4E,EAAAqpD,GAQA/tD,KAAA68E,gCAAAn4E,EAAAqpD,IAQA/tD,KAAA45B,QAAAl1B,GAcA1E,KAAA88E,iBAAAp4E,EAAAqpD,IAnBA/tD,KAAA+8E,sBAAAr4E,EAAAqpD,GA2BAluD,cAAA6E,EAAAqpD,GAEA/tD,KAAA68E,gCAAAn4E,GACA1E,KAAA45B,QAAAl1B,GAIA1E,KAAAg9E,qBAAAt4E,EAAAqpD,GASAluD,sBAAA6E,EAAAqpD,GAEArpD,EAAAmX,GAAA,WACA7b,KAAAi9E,YAAAv4E,EAAA0V,cAAA2zC,GAIA/tD,KAAAg9E,qBAAAt4E,EAAAqpD,GAQAluD,QAAA6E,GAEA,IAAA1E,KAAAmhD,OAAAmN,WAAAtuD,KAAAijB,SAAAve,GAQA,YALA0rC,GAAA3uC,MACA,oFACKiD,KAAAA,EAAAue,SAAAjjB,KAAAijB,WAML,MAAAi6D,EAAAnB,GAAA54D,mBAAAnjB,KAAAijB,UAEAjjB,KAAA2sB,OAAAmG,OAAApuB,EAAA1E,KAAAijB,UAEAjjB,KAAAijB,SAAAg2B,GAAA91B,mBAAA+5D,GACAA,EAAAt5C,SAGA5jC,KAAAmhD,OAAA0D,SAAAngD,KAAA1E,KAAAmhD,OAAAmN,WAAAtuD,KAAAijB,SAAA,SACAjjB,KAAA28E,aAAAj4E,EAEA1E,KAAA28E,aAAA,KAGA38E,KAAAs8E,oBAAAr4E,KAAAS,GAQA7E,iBAAA6E,EAAAqpD,GACA,KAAArpD,aAAA+zC,IACA,OAGA,MAAA0kC,EAAAn9E,KAAAo9E,cAAA14E,EAAAqpD,GACAsvB,EAAAr9E,KAAAs9E,eAAA54E,EAAAqpD,GACAwvB,EAAAxB,GAAAz3D,aAAA5f,GACA84E,EAAAzB,GAAA/3D,YAAAtf,GAEA,GAAAy4E,EAAA,CACA,MAAAl6D,EAAA84D,GAAA54D,mBAAAnjB,KAAAijB,UAEAjjB,KAAA2sB,OAAA8wD,MAAAF,GAEAv9E,KAAAijB,SAAAg2B,GAAA91B,mBAAAF,GACAA,EAAA2gB,SAGA,GAAAy5C,EAAA,CAEAr9E,KAAAijB,SAAAwB,QAAA+4D,IAIAptC,GAAA3uC,MAAA,iGAKAzB,KAAAijB,SAAAg2B,GAAA1xB,SAAAi2D,EAAAz4D,WAAA,OAIA,MAAA9B,EAAA,IAAA84D,GAAA/7E,KAAAijB,SAAAjoB,KAAAgF,KAAAijB,SAAAjhB,KAAA,oBAEAhC,KAAA2sB,OAAA8wD,MAAAD,GAEAx9E,KAAAijB,SAAAg2B,GAAA91B,mBAAAF,GACAA,EAAA2gB,UAGAu5C,GAAAE,IAGAr9E,KAAAs8E,oBAAAr4E,KAAAjE,KAAAijB,SAAA5N,QAGAkoE,EAAA35C,SACA45C,EAAA55C,SAWA/jC,cAAA6E,EAAAqpD,GACA,MAAAr4C,EAAAhR,EAAAgR,gBAEA,OAAAq4C,EAAA0uB,SACA/mE,aAAA+iC,IACAz4C,KAAAq8E,aAAA9zE,IAAAmN,IACA1V,KAAAkhD,MAAAC,OAAAkN,WAAA34C,EAAAhR,GAWA7E,eAAA6E,EAAAqpD,GACA,MAAAv4C,EAAA9Q,EAAA8Q,YAEA,OAAAu4C,EAAA2uB,QACAlnE,aAAAijC,IACAz4C,KAAAq8E,aAAA9zE,IAAAiN,IACAxV,KAAAkhD,MAAAC,OAAAkN,WAAA3pD,EAAA8Q,GAUA3V,qBAAA6E,EAAAqpD,GACA,MAAA2vB,EAAA19E,KAAA2sB,OAAAqD,cAAA,aAKAhwB,KAAA29E,cAAAD,EAAA19E,KAAAijB,SAAA5N,SAAArV,KAAAmhD,OAAAmN,WAAAovB,EAAAh5E,KACAg5E,EAAApqD,gBAAA5uB,GACA1E,KAAAw8E,YAAAkB,EAAA3vB,IAUAluD,gCAAA6E,GACA,MAAA4sD,EAAAtxD,KAAA29E,cAAAj5E,EAAA1E,KAAAijB,SAAA5N,QAEA,IAAAi8C,EACA,OAAA,EAGA,KAAAA,GAAAtxD,KAAAijB,SAAA5N,QAAA,CAEA,GAAArV,KAAAmhD,OAAA2M,QAAA9tD,KAAAijB,SAAA5N,QACA,OAAA,EAGA,GAAArV,KAAAijB,SAAAoB,UAAA,CACA,MAAAhP,EAAArV,KAAAijB,SAAA5N,OACArV,KAAAijB,SAAAg2B,GAAA30B,aAAAjP,GAIAA,EAAAmE,SACAxZ,KAAA2sB,OAAAlB,OAAApW,QAEI,GAAArV,KAAAijB,SAAAc,QACJ/jB,KAAAijB,SAAAg2B,GAAAj1B,YAAAhkB,KAAAijB,SAAA5N,YACI,CACJ,MAAAuoE,EAAA3kC,GAAAj1B,YAAAhkB,KAAAijB,SAAA5N,QAEArV,KAAA2sB,OAAAnsB,MAAAR,KAAAijB,UAEAjjB,KAAAijB,SAAA26D,EAEA59E,KAAAq8E,aAAAjqE,IAAApS,KAAAijB,SAAA6B,YAIA,OAAA,EAWAjlB,cAAA6E,EAAA8S,GACA,OAAAxX,KAAAmhD,OAAAmN,WAAA92C,EAAA9S,GACA8S,EAGAA,EAAAnC,OACArV,KAAA29E,cAAAj5E,EAAA8S,EAAAnC,QAGA;;;;GCzZA,SAAAwoE,GAAA38B,EAAA3+B,EAAAlf,MACA,GAAAkf,EAAAuD,YACA,OAGA,MAAAq7B,EAAAD,EAAAC,OAEAD,EAAA3J,OAAA5qB,IAGA,IAAAtpB,EAAAy6E,yBAkKA,SAAA38B,EAAA5+B,GACA,MAAAkyD,EAAAtzB,EAAA48B,gBAAAx7D,GAEA,IAAAA,EAAAogC,sBAAA8xB,GACA,OAAA,EAGA,MAAAttD,EAAA5E,EAAAoG,gBAEA,GAAAxB,EAAA7J,MAAAjI,QAAA8R,EAAA1D,IAAApO,OACA,OAAA,EAGA,OAAA8rC,EAAAmN,WAAAmmB,EAAA;;;;GA/KAuJ,CAAA78B,EAAA5+B,GAGA,YAoJA,SAAAoK,EAAApK,GACA,MAAAkyD,EAAA9nD,EAAAu0B,MAAAC,OAAA48B,gBAAAx7D,GAEAoK,EAAAlB,OAAA6uB,GAAA3wB,SAAA8qD,IACAwJ,GAAAtxD,EAAAssB,GAAA1xB,SAAAktD,GAAAlyD,GA1JA27D,CAAAvxD,EAAApK,GAKA,MAAA47D,EAAA57D,EAAAoG,gBACAy1D,EAAAD,EAAA7gE,MACA+gE,EAAAtC,GAAA54D,mBAAAg7D,EAAA16D,KAGA06D,EAAA7gE,MAAAwjC,WAAAq9B,EAAA16D,MACAkJ,EAAAlB,OAAA0yD,GAWA96E,EAAAi7E,iBA8BA,SAAAC,EAAA5xD,EAAAyxD,EAAAC,GACA,MAAAG,EAAAJ,EAAA/oE,OACA,MAAAopE,EAAAJ,EAAAhpE,OAIA,GAAAmpE,GAAAC,EACA,OAMA,IAAAD,EAAAnpE,SAAAopE,EAAAppE,OACA,OAMA,IAsDA,SAAAqpE,EAAAC,EAAAx9B,GACA,MAAAy9B,EAAA,IAAAtkC,GAAAokC,EAAAC,GAEA,IAAA,MAAAjiF,KAAAkiF,EAAAnqD,YACA,GAAA0sB,EAAA0D,SAAAnoD,EAAA4a,OAAA6pC,EAAA2M,QAAApxD,EAAA4a,MACA,OAAA,EAIA,OAAA,EA/DAunE,CAAAT,EAAAC,EAAA1xD,EAAAu0B,MAAAC,QACA,OAOAi9B,EAAAnlC,GAAAj1B,YAAAw6D,GACAH,EAAAplC,GAAA30B,aAAAm6D,GAEAJ,EAAA55D,QAAA25D,IAKAzxD,EAAAmG,OAAA2rD,EAAAL,GAMAzxD,EAAA8wD,MAAAW,GAOA,KAAAC,EAAAhpE,OAAAmE,SAAA,CACA,MAAAslE,EAAAT,EAAAhpE,OAEAgpE,EAAAplC,GAAA30B,aAAAw6D,GAEAnyD,EAAAlB,OAAAqzD,GAIAP,EAAA5xD,EAAAyxD,EAAAC,GAvFAE,CAAA5xD,EAAAyxD,EAAAC,GAQAl9B,EAAA8N,2BAAAmvB,EAAA/oE,OAAA+E,cAAAuS,IAGApK,aAAA4/B,GACAx1B,EAAAuI,aAAAkpD,GAEA77D,EAAA29B,MAAAk+B,GA4EA,SAAAj9B,EAAAl+B,GACA,MAAA87D,EAAA59B,EAAAmN,WAAArrC,EAAA,SACA+7D,EAAA79B,EAAAmN,WAAArrC,EAAA,aAEA,OAAA87D,GAAAC,EA3EAC,CAAA99B,EAAAi9B,IACAH,GAAAtxD,EAAAyxD,EAAA77D,GAGA87D,EAAAz6C,WA4FA,SAAAq6C,GAAAtxD,EAAA1J,EAAAV,GACA,MAAAm7D,EAAA/wD,EAAAqD,cAAA,aAEArD,EAAAmG,OAAA4qD,EAAAz6D,GAEAV,aAAA4/B,GACAx1B,EAAAuI,aAAAwoD,EAAA,GAEAn7D,EAAA29B,MAAAw9B,EAAA,GCvLA,MAAAwB,GAAA,cA+BA,SAAAC,GAAAj+B,EAAA3+B,EAAAlf,MACA,MAAA89C,EAAAD,EAAAC,OACAi+B,EAAA,YAAA/7E,EAAA2f,UACAq8D,EAAAh8E,EAAAg8E,KAAAh8E,EAAAg8E,KAAA,YAEAh3D,EAAA9F,EAAA8F,MAEAmM,EAAA,IAAAwkB,IACAl2B,WAsIA,SAAAxF,EAAA8hE,GACA,MAAApkF,EAAAsiB,EAAAtiB,KACAskF,EAAArmC,GAAA1xB,SAAAvsB,EAAAokF,EAAA,MAAA,GAEA,OAAAA,EACA,IAAA9kC,GAAAh9B,EAAAgiE,GAEA,IAAAhlC,GAAAglC,EAAAhiE,GA7IAiiE,CAAAl3D,EAAA+2D,GACAh8D,kBAAA,EACAJ,UAAAo8D,EAAA,UAAA,aAGAh+E,GAAeozB,OAAAA,EAAA2sB,OAAAA,EAAAi+B,UAAAA,EAAAC,KAAAA,GAEf,IAAAphE,EAEA,KAAAA,EAAAuW,EAAAvW,QAAA,CACA,GAAAA,EAAAC,KACA,OAGA,MAAA+E,EAAAu8D,GAAAp+E,EAAA6c,EAAAvhB,OAEA,GAAAumB,EASA,YARAV,aAAA4/B,GACAjB,EAAA3J,OAAA5qB,IACAA,EAAA8yD,kBAAAx8D,KAGAV,EAAAqgC,SAAA3/B,KAWA,SAAAu8D,GAAAp+E,EAAA1E,GAGA,GAAA,QAAAA,EAAAoM,KACA,MAAA,SAAA1H,EAAAi+E,KA+DA,SAAA7qD,EAAA4qD,GACA,IAAAzoE,EAAA6d,EAAAvR,SAAAtM,SAEA,GAAAA,EAAA,CACA,IAAArH,EAAAklB,EAAAvR,SAAA3T,OAAAqH,EAAA4N,YAEA,MAAAm7D,GAAA/oE,EAAAvV,KAAAkO,EAAA8vE,KAAAO,GAAAhpE,EAAArH,EAAA8vE,IAAA,CACA5qD,EAAAvW,OAKA,MAAAmmB,EAAAg7C,EAAA5qD,EAAAvR,SAAA6B,UAAA0P,EAAAvR,SAAA8B,WAEA,GAAAqf,EAAA,CAEA,MAAAw7C,EAAAx7C,EAAAhjC,KAAAga,OAAAgkE,EAAA,EAAAh7C,EAAAhjC,KAAA6D,OAAA,GAGAi6E,GAAAp7C,SAAA87C,KAEAprD,EAAAvW,OAEAtH,EAAA6d,EAAAvR,SAAAtM,UAIArH,EAAAklB,EAAAvR,SAAA3T,OAAAqH,EAAA4N,aAIA,OAAAiQ,EAAAvR,SA7FA48D,CAAAz+E,EAAAozB,OAAApzB,EAAAg+E,WAwCA,SAAA5qD,EAAA6qD,GACA,MAAA1oE,EAAA6d,EAAAvR,SAAAtM,SAEA,GAAAA,EAAA,CACA,MAAAvV,EAAAuV,EAAAvV,KACA,IAAAkO,EAAAklB,EAAAvR,SAAA3T,OAAAqH,EAAA4N,YAEA,KAAA+1D,GAAAl5E,EAAAkO,IAAA,aAAA+vE,GAAA5E,GAAAr5E,EAAAkO,IACAklB,EAAAvW,OAEA3O,EAAAklB,EAAAvR,SAAA3T,OAAAqH,EAAA4N,YAIA,OAAAiQ,EAAAvR,SAnDA68D,CAAA1+E,EAAAozB,OAAApzB,EAAAi+E,KAAAj+E,EAAAg+E,WAIA,GAAA1iF,EAAAoM,OAAA1H,EAAAg+E,UAAA,eAAA,cAAA,CAEA,GAAAh+E,EAAA+/C,OAAA0D,SAAAnoD,EAAA4a,MACA,OAAA2hC,GAAA1xB,SAAA7qB,EAAA4a,KAAAlW,EAAAg+E,UAAA,QAAA,UAIA,GAAAh+E,EAAA+/C,OAAAmN,WAAA5xD,EAAA8nB,aAAA,SACA,OAAA9nB,EAAA8nB,iBAIA,CAEA,GAAApjB,EAAA+/C,OAAA2M,QAAApxD,EAAA4a,MAIA,YAFAlW,EAAAozB,OAAA9Q,KAAA,KAAA,GAMA,GAAAtiB,EAAA+/C,OAAAmN,WAAA5xD,EAAA8nB,aAAA,SACA,OAAA9nB,EAAA8nB,cAkFA,SAAAk7D,GAAAt+E,EAAAkO,EAAA8vE,GAEA,MAAAW,EAAAzwE,GAAA8vE,EAAA,GAAA,GAEA,OAAAF,GAAAp7C,SAAA1iC,EAAAga,OAAA2kE,IAQA,SAAAJ,GAAAhpE,EAAArH,EAAA8vE,GACA,OAAA9vE,KAAA8vE,EAAAzoE,EAAAqO,UAAA;;;;GC5GA,SAAAg7D,GAAA74D,EAAAwF,GACA,MAAAszD,KAEAv6E,MAAAC,KAAAwhB,EAAA24B,UAA8B98B,UAAA,cAG9B/X,IAAAqM,GAAAgjC,GAAA1wB,SAAAtS,IAKAiU,OAAA20D,IAMA,OAHAA,EAAA5iE,MAAA4I,QAAAiB,EAAA7J,QAAA4iE,EAAA5iE,MAAAmH,QAAA0C,EAAA7J,UACA4iE,EAAAz8D,IAAA6C,SAAAa,EAAA1D,MAAAy8D,EAAAz8D,IAAAgB,QAAA0C,EAAA1D,QAIA3iB,QAAAo/E,IACAD,EAAAh8E,KAAAi8E,EAAA5iE,MAAAjI,QAEAsX,EAAAlB,OAAAy0D,KAKAD,EAAAn/E,QAAAq/E,IACA,IAAA9qE,EAAA8qE,EAEA,KAAA9qE,EAAAA,QAAAA,EAAAmE,SAAA,CACA,MAAA4mE,EAAA9lC,GAAA1wB,SAAAvU,GAEAA,EAAAA,EAAAA,OAEAsX,EAAAlB,OAAA20D;;;;SCzGAC,GACAxgF,cAOAG,KAAAq/C,QAAA,IAAA+7B,GAQAp7E,KAAA2V,SAAA,IAAAglE,GAAA36E,MAQAA,KAAAmhD,OAAA,IAAA+L,GASAltD,KAAAsgF,mBAQAtgF,KAAA+1E,eAAA,MAEA,gBAAA,gBAAA,kBAAA,qBAAA,kBACAj1E,QAAA2f,GAAAzgB,KAAAotD,SAAA3sC,IAIAzgB,KAAA2gB,GAAA,iBAAA,CAAAC,EAAArd,KACAA,EAAA,GAEAg1D,cACM71D,SAAA,YAGN1C,KAAAmhD,OAAAuY,SAAA,SACA5L,SAAA,IAEA9tD,KAAAmhD,OAAAuY,SAAA,UACA3J,QAAA,QACA3O,SAAA,IAEAphD,KAAAmhD,OAAAuY,SAAA,SACA3J,QAAA,WAEA/vD,KAAAmhD,OAAAuY,SAAA,oBACAnJ,eAAA,QACAzC,SAAA,IAEA9tD,KAAAmhD,OAAA1vB,OAAA,SAAgCs+B,QAAA,qBAMhC/vD,KAAAmhD,OAAAuY,SAAA,WACA3J,SAAA,QAAA,YAuCAlwD,OAAAuD,GACA,OAAA,IAAApD,KAAAsgF,gBAAAr7E,QAEAjF,KAAAsgF,gBAAAr8E,MAA+Bw9C,MAAA,IAAAuxB,GAAA5vE,SAAAA,IAE/BpD,KAAAugF,qBAAA,IAGAn9E,EAAApD,KAAA+1E,gBAqCAl2E,cAAA2gF,EAAAp9E,GACA,iBAAAo9E,EACAA,EAAA,IAAAxN,GAAAwN,GACG,mBAAAA,IACHp9E,EAAAo9E,EACAA,EAAA,IAAAxN,IAGAhzE,KAAAsgF,gBAAAr8E,MAA8Bw9C,MAAA++B,EAAAp9E,SAAAA,IAE9B,GAAApD,KAAAsgF,gBAAAr7E,QACAjF,KAAAugF,qBAUA1gF,eAAA66C,GACAA,EAAA+lC,WAmBA5gF,gBAAAwuE,EAAAC,EAAAoS,GAAA,GACA,OAAAhR,GAAAiR,mBAAAtS,EAAAC,EAAAoS,EAAA1gF,KAAA2V,SAAA,MAUA9V,cAAA+gF,EAAAr+D;;;;;AJ5NA,SAAA2+B,EAAA0/B,EAAAr+D,GACA2+B,EAAA3J,OAAA5qB,IACApK,EAAAuD,aACAo7B,EAAA2/B,cAAAt+D,GAGA,MAAAu+D,EAAA,IAAA1E,GAAAl7B,EAAAv0B,EAAApK,EAAA6F,QAEA,IAAA24D,EAGAA,EADAH,EAAA/kE,GAAA,oBACA+kE,EAAAxmE,eAEAwmE,GAGAE,EAAA7D,YAAA8D,GAGAtE,SAAA,EACAC,QAAA,IAGA,MAAArnD,EAAAyrD,EAAAE,oBAGA3rD,EACA9S,aAAA4/B,GACAx1B,EAAAuI,aAAAG,GAEA9S,EAAA29B,MAAA7qB,GAWA+a,GAAAE,KAAA,wFIoLA2wC,CAAAjhF,KAAA4gF,EAAAr+D,GAkBA1iB,cAAA0iB,EAAAlf,GACAw6E,GAAA79E,KAAAuiB,EAAAlf,GAUAxD,gBAAA0iB,EAAAlf,GACA87E,GAAAn/E,KAAAuiB,EAAAlf,GAUAxD,mBAAA0iB,GACA,ODzQA,SAAA2+B,EAAA3+B,GACA,OAAA2+B,EAAA3J,OAAA5qB,IACA,MAAAu0D,EAAAv0D,EAAA+T,yBACAvZ,EAAA5E,EAAAoG,gBAEA,IAAAxB,GAAAA,EAAArB,YACA,OAAAo7D,EAGA,MAAAlmF,EAAAmsB,EAAA7J,MAAAtiB,KACAmmF,EAAAh6D,EAAA7J,MAAAi9B,cAAApzB,EAAA1D,KACA29D,EAAApmF,EAAAqmF,cAAAF,GAeA,IAAAG,EAYA,MAAAzmE,GARAymE,EAFAn6D,EAAA7J,MAAAjI,QAAA8R,EAAA1D,IAAApO,OAEA8R,EAEAmzB,GAAAjzB,4BACA+5D,EAAAj6D,EAAA7J,MAAAtb,KAAAm/E,EAAAl8E,QACAm8E,EAAAj6D,EAAA1D,IAAAzhB,KAAAm/E,EAAAl8E,QAAA,IAIAwe,IAAAnU,OAAAgyE,EAAAhkE,MAAAhO,OAGA,IAAA,MAAAgI,KAAAgqE,EAAAxhC,UAAkDz8B,SAAA,IAClD/L,EAAAuE,GAAA,aACA8Q,EAAA40D,WAAAjqE,EAAAlW,KAAAkW,EAAAme,gBAAAyrD,GAEAv0D,EAAA6lC,OAAAl7C,EAAA+C,QAAA,GAAA6mE,GAmBA,GAAAI,GAAAn6D,EAAA,CAEA,MAAAkO,EAAAlO,EAAA+zB,sBAAAomC,EAAAhkE,MAAA27B,GAAA1xB,SAAA25D,EAAA,GAAArmE,GAAA,GAEA2mE,EAAA,IAAAlnC,GAAArB,GAAA1xB,SAAA25D,GAAA7rD,EAAA/X,OAGA0iE,GAFA,IAAA1lC,GAAAjlB,EAAA5R,IAAAw1B,GAAA1xB,SAAA25D,EAAA,QAEAv0D,GACAqzD,GAAAwB,EAAA70D,GAGA,OAAAu0D,IC8LAO,CAAAzhF,KAAAuiB,GAYA1iB,WAAA6hF,GAKA,GAJAA,aAAAjpC,KACAipC,EAAApnC,GAAA3wB,SAAA+3D,IAGAA,EAAA57D,YACA,OAAA,EAGA,IAAA,MAAAxO,KAAAoqE,EAAA5hC,WAEA,GAAAxoC,EAAAuE,GAAA,cAAA7b,KAAAmhD,OAAA0D,SAAAvtC,GACA,OAAA,EAIA,OAAA,EAMAzX,UACAG,KAAA2V,SAAAi2B,UACA5rC,KAAAwD,gBAUA3D,qBACA,MAAA8hF,KAEA,KAAA3hF,KAAAsgF,gBAAAr7E,QAAA,CAEA,MAAA28E,EAAA5hF,KAAAsgF,gBAAA,GAAA7+B,MACAzhD,KAAA+1E,eAAA,IAAA1C,GAAArzE,KAAA4hF,GAGA,MAAAC,EAAA7hF,KAAAsgF,gBAAA,GAAAl9E,SAAApD,KAAA+1E,gBACA4L,EAAA19E,KAAA49E,GAGA7hF,KAAA+G,KAAA,UAAA/G,KAAA+1E,gBAEA/1E,KAAAsgF,gBAAAp7D,QACAllB,KAAA+1E,eAAA,KAGA,OAAA4L,GA4EA36E,EAAAq5E,GAAAx/D;;;;;MCxZAihE,GAIAjiF,cAOAG,KAAA+hF,UAAA3lF,OAAAgC,OAAAknC,IAQAzlC,SAAA4D,GAUAzD,KAAA+hF,UAAAz+E,SAAAG,EAAA,UAAA,CAAAmd,EAAAohE,KACAhiF,KAAA+hF,UAAAh7E,KAAA,YAAAmoB,GAAA8yD,GAAAA,KAiBAniF,IAAA2vB,EAAApsB,EAAAC,MACA,MAAA8rB,EAAAI,GAAAC,GACA9sB,EAAAW,EAAAX,SAIA1C,KAAA+hF,UAAAz+E,SAAAtD,KAAA+hF,UAAA,YAAA5yD,EAAA,CAAAvO,EAAAohE,KACA5+E,EAAA4+E,EAAA,KAGAA,EAAAz0C,iBACAy0C,EAAAx0C,kBAIA5sB,EAAA3e,SAIA2e,EAAA3a,QAAA,IACMvD,SAAAA,IASN7C,MAAAmiF,GACA,QAAAhiF,KAAA+hF,UAAAh7E,KAAA,YAAAmoB,GAAA8yD,GAAAA,GAMAniF,UACAG,KAAA+hF,UAAAv+E;;;;SCtFAy+E,WAAAH,GAMAjiF,YAAA6oD,GACAlnD,QAQAxB,KAAA0oD,OAAAA,EAoBA7oD,IAAA2vB,EAAApsB,EAAAC,MACA,GAAA,iBAAAD,EAAA,CACA,MAAA+nD,EAAA/nD,EAEAA,EAAA,EAAA8+E,EAAAtyC,KACA5vC,KAAA0oD,OAAA2C,QAAAF,GACAvb,MAIApuC,MAAA6E,IAAAmpB,EAAApsB,EAAAC;;;;SCpCA8+E,GAMAtiF,YAAAulD,GACA,MAAAuD,EAAA3oD,KAAAL,YAAAyiF,OAAApiF,KAAAL,YAAAyiF,MAAAn5B,QAQAjpD,KAAAolD,OAAA,IAAAxlD,EAAAwlD,EAAAplD,KAAAL,YAAAyiF,OAAApiF,KAAAL,YAAAyiF,MAAAh9B,QAEAplD,KAAAolD,OAAAhqD,OAAA,UAAAutD,GAQA3oD,KAAAipD,QAAA,IAAAR,GAAAzoD,KAAA2oD,GAQA3oD,KAAAsrD,SAAA,IAAAL,GAMAjrD,KAAAqiF,OAAA,IAAAt2B,GAAA/rD,KAAAolD,OAAA5oD,IAAA,aAQAwD,KAAAisD,EAAAjsD,KAAAqiF,OAAAp2B,EAWAjsD,KAAAqG,IAAA,cAAA,GAUArG,KAAAkhD,MAAA,IAAAm/B,GASArgF,KAAAoB,KAAA,IAAAuzD,GAAA30D,KAAAkhD,OASAlhD,KAAAsiF,QAAA,IAAA/6B,GAAAvnD,KAAAkhD,OACAlhD,KAAAsiF,QAAAlyD,KAAAza,SAAA0M,KAAA,cAAAnc,GAAAlG,MAWAA,KAAAuiF,WAAA,IAAA1sB,GAEA71D,KAAAuiF,WAAA7oB,SAAA,YAAA15D,KAAAsiF,QAAA96B,mBAAAxnD,KAAAoB,KAAAomD,qBACAxnD,KAAAuiF,WAAA7oB,SAAA,mBAAA15D,KAAAsiF,QAAA96B,qBACAxnD,KAAAuiF,WAAA7oB,SAAA,gBAAA15D,KAAAoB,KAAAomD,qBAEAxnD,KAAAuiF,WAAA7oB,SAAA,UAAA15D,KAAAoB,KAAA0zD,mBAQA90D,KAAAwiF,WAAA,IAAAP,GAAAjiF,MACAA,KAAAwiF,WAAAl/E,SAAAtD,KAAAsiF,QAAAlyD,KAAAza,UAQA9V,cACA,MAAAspD,EAAAnpD,KACAolD,EAAAplD,KAAAolD,OAEA,OAOA,WACA,MAAA6D,EAAA7D,EAAA5oD,IAAA,eACA0sD,EAAA9D,EAAA5oD,IAAA,qBAEA,OAAA2sD,EAAAF,QAAAw5B,KAAAx5B,EAAAC,GAXAw5B,GACAx4B,KAAAy4B,GACAC,EAAAD,EAAA,QACAz4B,KAAA,IAAA04B,EAAAD,EAAA,eAEAz4B,KAAA,IAAAlqD,KAAA+G,KAAA,iBASA,SAAA67E,EAAAD,EAAAE,GACA,OAAAF,EAAAr2D,OAAA,CAAAw2D,EAAAx4B,IACAA,EAAAu4B,GAIAC,EAAA54B,KAAAI,EAAAu4B,GAAAxgE,KAAAioC,IAHAw4B,EAIIh5B,QAAAv5C,YAUJ1Q,UAOA,OANAG,KAAA+G,KAAA,WAEA/G,KAAAwD,gBAEAxD,KAAAsrD,SAAA1f,UAEA5rC,KAAAipD,QAAArd,UACAse,KAAA,KACAlqD,KAAAkhD,MAAAtV,UACA5rC,KAAAoB,KAAAwqC,UACA5rC,KAAAsiF,QAAA12C,UACA5rC,KAAAwiF,WAAA52C,YAcA/rC,WAAA0D,GACAvD,KAAAsrD,SAAAD,WAAA9nD,GAWA1D,cAAAulD,GACA,OAAA,IAAA0E,QAAAv5C,IACA,MAAAm4C,EAAA,IAAA1oD,KAAAolD,GAEA70C,EACAm4C,EAAAk6B,cACA14B,KAAA,KACAxB,EAAA3hD,KAAA,aACA2hD,EAAA3hD,KAAA,WAEAmjD,KAAA,IAAAxB,OAMA1hD,EAAAm7E,GAAAthE,ICpNA,IAAAkiE,IAZAljF,QAAAuB,GACApB,KAAAoB,KAAAiF,IAAAjF,IAMAvB,UACA,OAAAG,KAAAoB,KAAA5E;;;;GCDA,IAAAwmF,IALAnjF,gBCJA,IAAAojF,EAAA7hF;;;;GAAA6hF,EDKAjjF,KAAAwX,QCLApW,EDKApB,KAAAoB,KAAA5E,MCJAymF,aAAAC,sBACAD,EAAAvmF,MAAA0E,GAGA6hF,EAAAE,UAAA/hF;;;;;;;;;MCLAgiF,GAOAvjF,QAAAwjF,GACA,MACAvvD,EADAne,SAAA2tE,eAAAC,mBAAA,IACAvzD,cAAA,OAGA,OAFA8D,EAAA6K,YAAA0kD,GAEAvvD,EAAAqvD;;;;SCRAK,GAIA3jF,cAOAG,KAAAyjF,WAAA,IAAAC,UAQA1jF,KAAA2jF,cAAA,IAAA5jD,IAA0CzG,YAAAZ,KAQ1C14B,KAAA4jF,YAAA,IAAAR,GAUAvjF,OAAAygC,GAEA,MAAAD,EAAArgC,KAAA2jF,cAAAzmD,UAAAoD,EAAA3qB,UAGA,OAAA3V,KAAA4jF,YAAAC,QAAAxjD,GASAxgC,OAAAuB,GAEA,MAAAi/B,EAAArgC,KAAA8jF,OAAA1iF,GAGA,OAAApB,KAAA2jF,cAAAzhD,UAAA7B,GAWAxgC,OAAAuB,GACA,MAAAuU,EAAA3V,KAAAyjF,WAAAM,gBAAA3iF,EAAA,aACAiiF,EAAA1tE,EAAA+qB,yBACAhmB,EAAA/E,EAAA68B,KAAA5X,WAEA,KAAAlgB,EAAAzV,OAAA,GACAo+E,EAAA1kD,YAAAjkB,EAAA,IAGA,OAAA2oE;;;;SChEAW,GAOAnkF,YAAA6oD,GAOA1oD,KAAA0oD,OAAAA,EAQA1oD,KAAAikF,YAAA,IAAA79E,IAQAvG,SACA,IAAA,MAAAnD,KAAAsD,KAAAikF,YAAA50E,eACA3S,EAAAwnF,aAaArkF,IAAA5D,EAAAmH,GACA,GAAApD,KAAAuI,IAAAtM,GAOA,MAAA,IAAAgF,EACA,mFAAwFhF,KAAAA,IAIxF+D,KAAAikF,YAAA59E,IAAA89E,GAAAloF,IAAgDmH,SAAAA,EAAA8gF,aAAAjoF,IAahD4D,OAAA5D,GACA,IAAA+D,KAAAuI,IAAAtM,GASA,MAAA,IAAAgF,EACA,2FAAgGhF,KAAAA,IAIhG,OAAA+D,KAAAikF,YAAAznF,IAAA2nF,GAAAloF,IAAAmH,SAAApD,KAAA0oD,OAAA25B,QASAxiF,IAAA5D,GACA,OAAA+D,KAAAikF,YAAA17E,IAAA47E,GAAAloF,KAUA,SAAAkoF,GAAAloF,GACA,OAAAgS,OAAAhS,GAAAyxB;;;;SC/GA02D,GACAvkF,cAQAG,KAAAqG,IAAA,aAAA,GAQArG,KAAAqkF,eAAA,KAQArkF,KAAAskF,UAAA,IAAArrE,IAQAjZ,KAAAukF,sBAAA,KAQA1kF,IAAA2X,GACA,GAAAxX,KAAAskF,UAAA/7E,IAAAiP,GACA,MAAA,IAAAvW,EAAA,0CAGAjB,KAAAsD,SAAAkU,EAAA,QAAA,IAAAxX,KAAAwkF,OAAAhtE,IAAkE2uB,YAAA,IAClEnmC,KAAAsD,SAAAkU,EAAA,OAAA,IAAAxX,KAAAykF,SAAuDt+C,YAAA,IACvDnmC,KAAAskF,UAAAlyE,IAAAoF,GAQA3X,OAAA2X,GACAA,IAAAxX,KAAAqkF,gBACArkF,KAAAykF,MAAAjtE,GAGAxX,KAAAskF,UAAA/7E,IAAAiP,KACAxX,KAAAwD,cAAAgU,GACAxX,KAAAskF,UAAAh+E,OAAAkR,IAUA3X,OAAA2X,GACAg4B,aAAAxvC,KAAAukF,uBAEAvkF,KAAAqkF,eAAA7sE,EACAxX,KAAAsiB,WAAA,EAUAziB,QACA2vC,aAAAxvC,KAAAukF,uBAEAvkF,KAAAukF,sBAAAj1C,WAAA,KACAtvC,KAAAqkF,eAAA,KACArkF,KAAAsiB,WAAA,GACG,IAYHtb,EAAAo9E,GAAA9+C,IACAt+B,EAAAo9E,GAAAvjE;;;;;MCpHA6jE,GAOA7kF,YAAA6oD,EAAAt4B;;;;;ACIA,IAAAg1B,EDAAplD,KAAA0oD,OAAAA,EAKA1oD,KAAAowB,KAAAA,EAKApwB,KAAA2kF,iBAAA,IAAAX,GAAAt7B,GAKA1oD,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAA6kF,gBCvBAz/B,EDuBAsD,EAAAtD,OAAA5oD,IAAA,WCtBAkJ,MAAAkI,QAAAw3C,IAEA5qC,MAAA4qC,GAIAA,EAMAhpD,OAAAmiC,QACA/jB,UACE4qC,IANF5qC,WDoBA3a,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAt4B,EAAApwB,KAAAowB,KAEAA,EAAA8B,SAGA9B,EAAA00D,YAAAziE,KAAA,YAAAnc,GAAAlG,KAAA4kF,aAAA,aACAx0D,EAAA00D,YAAAC,eAAA30D,EAAA5Y,QAEAxX,KAAA6kF,eAAAG,oBACA50D,EAAA00D,YAAAE,kBAAAhlF,KAAA6kF,eAAAG,mBAIA,MAAAC,EAAAv8B,EAAA45B,QAAAlyD,KAAAza,SAAAuhC,UACA9mB,EAAAnL,SAAA5C,KAAA,cAAAnc,GAAA++E,GACA70D,EAAAnL,SAAA5C,KAAA,aAAAnc,GAAAwiD,EAAA45B,QAAAlyD,KAAAza,UACAya,EAAAnL,SAAAhpB,KAAAgpF,EAAAtiE,SAEA3iB,KAAA4kF,aAAAxyE,IAAApS,KAAAowB,KAAA5N,iBAEAxiB,KAAAowB,KAAA80D,QAAAC,eAAAnlF,KAAA6kF,eAAArqE,MAAAxa,KAAA2kF;;;;;AEvDA,UAAAS,OACAA,EAAAC,uBACAA,EAAAC,mBACAA,EAAAJ,QACAA,EAAAK,YACAA,EAAAC,UACAA,IAIAF,EAAAlzE,IAAA8yE,EAAA1tE,SAGA6tE,EAAAh/E,IAAA,UAAA,CAAAjF,EAAAwuC,KACA01C,EAAAhjE,YAAA4iE,EAAAN,aAAAtiE,YACAijE,GACAA,IAGAL,EAAA78D,QAEAunB,OAKAs1C,EAAA1C,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACAs1C,EAAAN,aAAAtiE,YACA8iE,EAAA/8D,QAEAm9D,GACAA,IAGA51C,OFuBA61C,EACAL,OAAA18B,EAAA45B,QAAAlyD,KACAk1D,mBAAAtlF,KAAA4kF,aACAS,uBAAA38B,EAAA85B,WACA0C,QAAAllF,KAAAowB,KAAA80D,UAOArlF,UACAG,KAAAowB,KAAAwb;;;;SG5CA85C,WAAAp7D,GAMAzqB,YAAAwiF,GACA7gF,OAGAkpB,WAAA,YAIA1qB,KAAA2gB,GAAA,MAAA,CAAAC,EAAAwP,EAAApoB,KACAooB,EAAAu1D,YACAv1D,EAAA8B,SAGA9B,EAAA5Y,SAAAxX,KAAA4lF,gBACA5lF,KAAA4lF,eAAAjrD,aAAAvK,EAAA5Y,QAAAxX,KAAA4lF,eAAAvnF,SAAA2J,MAKAhI,KAAA2gB,GAAA,SAAA,CAAAC,EAAAwP,KACAA,EAAA5Y,SAAAxX,KAAA4lF,gBACAx1D,EAAA5Y,QAAAiU,WAUAzrB,KAAAqiF,OAAAA,EAQAriF,KAAA4lF,eAAA,KAOA/lF,UACAG,KAAAiL,IAAAmlB,GAAAA,EAAAwb,WAUA/rC,UAAAgmF,GACA7lF,KAAA4lF,eAAAC,EAoCAhmF,YAAAsE,GACA,IAAAA,EAAAc,SAAAd,EAgEA4d,MAAAtC,GAAA,iBAAAA,GA1DA,MAAA,IAAAxe,EAAA,6EAGA,OASAiF,GAAA4/E,IAEA,IAAA,MAAA11D,KAAApwB,KACA,IAAA,MAAA+lF,KAAA5hF,EACAisB,EAAAkyB,SAAAyjC,GAAA7/E,GAAA4/E,GAKA9lF,KAAA2gB,GAAA,MAAA,CAAAC,EAAAwP,KACA,IAAA,MAAA21D,KAAA5hF,EACAisB,EAAAkyB,SAAAyjC,GAAA7/E,GAAA4/E,KAKA9lF,KAAA2gB,GAAA,SAAA,CAAAC,EAAAwP,KACA,IAAA,MAAA21D,KAAA5hF,EACAisB,EAAA0rD,eAAAiK,EAAAD,QAoBA9+E,EAAAsjB,GAAAzJ,IC9KA,IAAAmlE,GAJA,SAAAtpF,EAAA6P,GACA,OAAAoI,GAAAjY,GAAA,GAAA,EAAA6P;;;;GCVA,MAAA05E,GAAA,qCAsCAC,GAMArmF,YAAAguD,GACAzxD,OAAAmiC,OAAAv+B,KAAAmmF,GAAAC,GAAAv4B,KAUA7tD,KAAAqmF,aAAA,EAiDArmF,KAAAsmF,YAAA,KAYAzmF,SACA,MAAA6E,EAAA1E,KAAAumF,aACAC,cAAA,IAKA,OAFAxmF,KAAAqmF,aAAA,EAEA3hF,EAsCA7E,MAAA6E,GASA,OARA1E,KAAAsmF,aAouCAjoF,YACAmhB,YACAxF,eApuCAha,KAAAumF,aACA7hF,KAAAA,EACA+hF,YAAA,EACAC,WAAA1mF,KAAAsmF,cAGA5hF,EASA7E,OAAA6E,GACA,IAAA1E,KAAAsmF,YAMA,MAAA,IAAArlF,EAAA,mGAGAjB,KAAA2mF,wBAAAjiF,EAAA1E,KAAAsmF,aA+BAzmF,kBACA,SAAA+mF,EAAA/4B,GACA,GAAAA,EAAAxvD,SACA,IAAA,MAAA8b,KAAA0zC,EAAAxvD,SACAwoF,GAAA1sE,SACAA,EACM2sE,GAAA3sE,WACNysE,EAAAzsE,IAMAysE,CAAA5mF,MAwCAH,YAAAihB,EAAArd,GACA,OACAyC,GAAA,CAAA6gF,EAAA3jF,IACA,IAAA4jF,IACAC,oBAAAF,EACAlvE,UAAAkvE,EACAjmE,WAAAA,EAAArd,QAAAA,EAAAL,SAAAA,IAIA8jF,GAAA,CAAArvE,EAAAsvE,EAAA/jF,IACA,IAAAgkF,IACAtmE,WAAAA,EAAArd,QAAAA,EAAAoU,UAAAA,EAAAsvE,YAAAA,EAAA/jF,SAAAA,KA8DAvD,cAAAwnF,EAAAx5B,GACAw5B,EAAAhB,aAQAj2C,GAAAE,KAAA,4FAk9BA,SAAAg3C,EAAAD,EAAAx5B,GACAA,EAAA7zC,aACAqtE,EAAArtE,aACAqtE,EAAArtE,eAGAutE,GAAAF,EAAArtE,WAAA6zC,EAAA7zC,aAGA6zC,EAAA25B,iBACAH,EAAAG,iBACAH,EAAAG,mBAGAD,GAAAF,EAAAG,eAAA35B,EAAA25B,iBAGA35B,EAAA3hB,MACAm7C,EAAAn7C,KAAAjoC,QAAA4pD,EAAA3hB,MAGA,GAAA2hB,EAAAxvD,UAAAwvD,EAAAxvD,SAAA4G,OAAA,CACA,GAAAoiF,EAAAhpF,SAAA4G,QAAA4oD,EAAAxvD,SAAA4G,OAMA,MAAA,IAAAhE,EACA,uGAIA,IAAAwmF,EAAA,EAEA,IAAA,MAAAl5B,KAAAV,EAAAxvD,SACAipF,EAAAD,EAAAhpF,SAAAopF,KAAAl5B,IAn/BA+4B,CAAAD,EAAAlB,GAAAC,GAAAv4B,KASAhuD,YAAAuB,GACA,IAAAsmF,EAUA,GANAA,EAFAtmF,EAAAsD,KAEA1E,KAAAmJ,KAAAnJ,KAAAksC,KAGAlsC,KAAAmJ,IAAAnJ,KAAAksC,MAAAlsC,KAAAksC,KAUA,MAAA,IAAAjrC,EACA,yGAIA,OAAAjB,KAAAksC,KACAlsC,KAAA2nF,YAAAvmF,GAEApB,KAAA4nF,eAAAxmF,GAUAvB,eAAAuB,GACA,IAAAsD,EAAAtD,EAAAsD,KAUA,OARAA,IACAA,EAAAtD,EAAAsD,KAAAiR,SAAAkyE,gBAAA7nF,KAAA8nF,IAAA7B,GAAAjmF,KAAAmJ,MAGAnJ,KAAA+nF,kBAAA3mF,GACApB,KAAAgoF,uBAAA5mF,GACApB,KAAAioF,gBAAA7mF,GAEAsD,EASA7E,YAAAuB,GACA,IAAAsD,EAAAtD,EAAAsD,KAoCA,OAjCAA,EACAtD,EAAAslF,WAAAx6C,KAAAxnC,EAAAwjF,YAEAxjF,EAAAtD,EAAAsD,KAAAiR,SAAAgjB,eAAA,IAaAwvD,GAAAnoF,KAAAksC,MACAlsC,KAAAooF,mBACAjnC,OAAAnhD,KAAAksC,KACAm8C,QAulBA,SAAA3jF,GACA,OACA7E,IAAAnD,GACAgI,EAAAwjF,YAAAxrF,GAGAmD,SACA6E,EAAAwjF,YAAA,KA9lBAI,CAAA5jF,GACAtD,KAAAA,IAUAsD,EAAAwjF,YAAAloF,KAAAksC,KAAAzyB,KAAA,IAGA/U,EASA7E,kBAAAuB,GACA,IAAAmnF,EAAAC,EAAAC,EAAAC,EAEA,IAAA1oF,KAAAga,WACA,OAGA,MAAAtV,EAAAtD,EAAAsD,KACAgiF,EAAAtlF,EAAAslF,WAEA,IAAA6B,KAAAvoF,KAAAga,WAsCA,GApCAyuE,EAAA/jF,EAAAsT,aAAAuwE,GAGAC,EAAAxoF,KAAAga,WAAAuuE,GAGA7B,IACAA,EAAA1sE,WAAAuuE,GAAAE,GAUAC,EAAA7/E,EAAA2/E,EAAA,KAAAA,EAAA,GAAAV,GAAAU,EAAA,GAAAV,GAAA,KAmBAK,GAAAK,GAAA,CAQA,MAAAG,EAAAD,EAAAF,EAAA,GAAA9rF,MAAA8rF,EAIA9B,GAAAkC,GAAAL,IACAI,EAAA7oD,QAAA2oD,GAGAzoF,KAAAooF,mBACAjnC,OAAAwnC,EACAN,QAAAQ,GAAAnkF,EAAA6jF,EAAAG,GACAtnF,KAAAA,QAWA,SAAAmnF,GAAA,iBAAAC,EAAA,GACAxoF,KAAA8oF,sBAAAN,EAAA,GAAApnF,IAmBAslF,GAAA+B,GAAAG,GAAAL,IACAC,EAAA1oD,QAAA2oD,GAmBAM,GAhBAP,EAAAA,EAUAv9E,IAAAumE,GAAAA,GAAAA,EAAA90E,OAAA80E,GAEAllD,OAAA,CAAAiH,EAAAtV,IAAAsV,EAAA3sB,OAAAqX,OAEAqO,OAAA08D,GAAA,MAGAtkF,EAAAukF,eAAAP,EAAAH,EAAAC,IAiCA3oF,sBAAAka,EAAA3Y,GACA,MAAAsD,EAAAtD,EAAAsD,KAEA,IAAA,MAAAwkF,KAAAnvE,EAAA,CACA,MAAAovE,EAAApvE,EAAAmvE,GAQAf,GAAAgB,GACAnpF,KAAAooF,mBACAjnC,QAAAgoC,GACAd,QAAAe,GAAA1kF,EAAAwkF,GACA9nF,KAAAA,IAWAsD,EAAA4T,MAAA4wE,GAAAC,GAWAtpF,uBAAAuB,GACA,MAAAsD,EAAAtD,EAAAsD,KACAovB,EAAA1yB,EAAAolF,aAAA7wE,SAAA+qB,yBAAAh8B,EACA+hF,EAAArlF,EAAAqlF,WACA,IAAAgB,EAAA,EAEA,IAAA,MAAAttE,KAAAna,KAAA3B,SACA,GAAAgrF,GAAAlvE,IACA,IAAAssE,EAAA,CACAtsE,EAAAmvE,UAAA5kF,GAGA,IAAA,MAAA0rB,KAAAjW,EACA2Z,EAAA6K,YAAAvO,EAAA5Y,eAGI,GAAAqvE,GAAA1sE,GACJssE,IACAtsE,EAAAwrE,YACAxrE,EAAA+X,SAGA4B,EAAA6K,YAAAxkB,EAAA3C,eAEI,GAAA2tB,GAAAhrB,GACJ2Z,EAAA6K,YAAAxkB,QAEA,GAAAssE,EAAA,CACA,MACA8C,GAqtBAlrF,YACAmhB,YACAxF,eAxtBA5Y,EAAAslF,WAGAroF,SAAA4F,KAAAslF,GAEApvE,EAAAosE,aACA7hF,KAAAovB,EAAA8G,WAAA6sD,KACAhB,YAAA,EACAC,WAAA6C,SAGAz1D,EAAA6K,YAAAxkB,EAAA+X,UAKA9wB,EAAAolF,cACA9hF,EAAAi6B,YAAA7K,GAWAj0B,gBAAAuB,GACA,GAAApB,KAAAwnF,eAIA,IAAA,MAAAzmF,KAAAf,KAAAwnF,eAAA,CACA,MAAAgC,EAAAxpF,KAAAwnF,eAAAzmF,GAAAkK,IAAAw+E,IACA,MAAAC,EAAAC,GAAA5oF,EAAAP,MAAA,KAEA,OAAAipF,EAAAG,yBAAAF,EAAAC,EAAAvoF,KAGAA,EAAAslF,YACAtlF,EAAAslF,WAAAlnE,SAAAvb,KAAAulF,IAkBA3pF,mBAAAshD,OAAqBA,EAAAknC,QAAAA,EAAAjnF,KAAAA,IACrB,MAAAslF,EAAAtlF,EAAAslF,WAGAmD,GAAA1oC,EAAAknC,EAAAjnF,GAEA,MAAAooF,EAAAroC,EAEA51B,OAAAjU,IAAAyxE,GAAAzxE,IAEAiU,OAAAjU,GAAAA,EAAAwJ,YAIA7V,IAAA6+E,GAAAA,EAAAC,0BAAA5oC,EAAAknC,EAAAjnF,IAEAslF,GACAA,EAAAlnE,SAAAvb,KAAAulF,GAaA3pF,wBAAA6E,EAAAgiF,GACA,IAAA,MAAAhnE,KAAAgnE,EAAAlnE,SAWA,IAAA,MAAAwqE,KAAAtqE,EACAsqE,IAIA,GAAAtD,EAAAx6C,KACAxnC,EAAAwjF,YAAAxB,EAAAx6C,SADA,CAMA,IAAA,MAAAq8C,KAAA7B,EAAA1sE,WAAA,CACA,MAAAwuE,EAAA9B,EAAA1sE,WAAAuuE,GAGA,OAAAC,EACA9jF,EAAA2yB,gBAAAkxD,GAEA7jF,EAAAwrB,aAAAq4D,EAAAC,GAIA,IAAA,IAAA9sF,EAAA,EAAkBA,EAAAgrF,EAAAroF,SAAA4G,SAAgCvJ,EAClDsE,KAAA2mF,wBAAAjiF,EAAAk2B,WAAAl/B,GAAAgrF,EAAAroF,SAAA3C,MAKAsL,EAAAk/E,GAAA7vE,SAOA4zE,GAMApqF,YAAAguD,GACAzxD,OAAAmiC,OAAAv+B,KAAA6tD,GA0CAhuD,SAAA6E,GACA,MAAAhI,EAAAsD,KAAA8gB,WAAA9gB,KAAA6X,WAEA,OAAA7X,KAAAoD,SAAApD,KAAAoD,SAAA1G,EAAAgI,GAAAhI,EAaAmD,0BAAAshD,EAAAknC,EAAAjnF,GACA,MAAAgC,EAAA,IAAAymF,GAAA1oC,EAAAknC,EAAAjnF,GAKA,OAHApB,KAAAyD,QAAAH,SAAAtD,KAAA8gB,WAAA,UAAA9gB,KAAA6X,UAAAzU,GAGA,KACApD,KAAAyD,QAAAD,cAAAxD,KAAA8gB,WAAA,UAAA9gB,KAAA6X,UAAAzU,WAeA4jF,WAAAiD,GAUApqF,yBAAA6pF,EAAAC,EAAAvoF,GACA,MAAAgC,EAAA,CAAAwd,EAAA0lB,KACAqjD,IAAArjD,EAAAjmC,OAAA6pF,QAAAP,KACA,mBAAA3pF,KAAAinF,oBACAjnF,KAAAinF,oBAAA3gD,GAEAtmC,KAAA8gB,WAAA/Z,KAAA/G,KAAAinF,oBAAA3gD,KAQA,OAHAtmC,KAAAyD,QAAAH,SAAAlC,EAAAsD,KAAAglF,EAAAtmF,GAGA,KACApD,KAAAyD,QAAAD,cAAApC,EAAAsD,KAAAglF,EAAAtmF,WAWAgkF,WAAA6C,GAIApqF,SAAA6E,GAGA,OAAAqkF,GAFAvnF,MAAA2oF,SAAAzlF,MAEA1E,KAAAmnF,cAAA,IAgBA,SAAAgB,GAAAhnC,GACA,QAAAA,IAWAA,EAAAzkD,QACAykD,EAAAA,EAAAzkD,OAGAgJ,MAAAkI,QAAAuzC,GACAA,EAAAvtB,KAAAu0D,IACEhnC,aAAA8oC,IAgCF,SAAAJ,GAAA1oC,EAAAknC,GAAA3jF,KAAiDA,IACjD,IAAAhI,EAnBA,SAAAykD,EAAAz8C,GACA,OAAAy8C,EAAAl2C,IAAAw+E,GAEAA,aAAAQ,GACAR,EAAAU,SAAAzlF,GAIA+kF,GAWAW,CAAAjpC,EAAAz8C,GAYAqkF,GALArsF,EADA,GAAAykD,EAAAl8C,QAAAk8C,EAAA,aAAAimC,GACA1qF,EAAA,GAEAA,EAAA4vB,OAAA08D,GAAA,KAIAX,EAAA58D,SAEA48D,EAAAhiF,IAAA3J,GA8BA,SAAAmsF,GAAA5F,EAAAsF,EAAAT,GACA,OACAjoF,IAAAnD,GACAumF,EAAAgG,eAAAnB,EAAAS,EAAA7rF,IAGAmD,SACAojF,EAAAoH,kBAAAvC,EAAAS,KAYA,SAAAa,GAAAnG,EAAAiG,GACA,OACArpF,IAAAnD,GACAumF,EAAA3qE,MAAA4wE,GAAAxsF,GAGAmD,SACAojF,EAAA3qE,MAAA4wE,GAAA,OASA,SAAA9C,GAAAv4B,GAkBA,OAjBAm4B,GAAAn4B,EAAAnxD,IAYA,GAAAA,IAAAA,aAAAutF,IAAAnD,GAAApqF,IAAAmqF,GAAAnqF,IAAA2sF,GAAA3sF,IACA,OAAAA,IAiBA,SAAAypF,GAAAt4B,GAcA,GAbA,iBAAAA,EACAA,EA0GA,SAAAA,GACA,OACA3hB,MAAA2hB,IA5GAy8B,CAAAz8B,GACEA,EAAA3hB,MA8HF,SAAA2hB,GACAnoD,MAAAkI,QAAAigD,EAAA3hB,QACA2hB,EAAA3hB,MAAA2hB,EAAA3hB,OA/HAq+C,CAAA18B,GAGAA,EAAAltC,KACAktC,EAAA25B,eAkFA,SAAAgD,GACA,IAAA,MAAA7uF,KAAA6uF,EACAC,GAAAD,EAAA7uF,GAGA,OAAA6uF,EAvFAE,CAAA78B,EAAAltC,WAGAktC,EAAAltC,KAGAktC,EAAA3hB,KAAA,CACA2hB,EAAA7zC,YA+CA,SAAArB,GACA,IAAA,MAAA8G,KAAA9G,EACAA,EAAA8G,GAAA/iB,QACAic,EAAA8G,GAAA/iB,SAAAkK,OAAA+R,EAAA8G,GAAA/iB,QAGA+tF,GAAA9xE,EAAA8G,GApDAkrE,CAAA98B,EAAA7zC,YAGA,MAAA3b,KAEA,GAAAwvD,EAAAxvD,SACA,GAAAgrF,GAAAx7B,EAAAxvD,UACAA,EAAA4F,KAAA4pD,EAAAxvD,eAEA,IAAA,MAAA8b,KAAA0zC,EAAAxvD,SACAyoF,GAAA3sE,IAAA0sE,GAAA1sE,IAAAgrB,GAAAhrB,GACA9b,EAAA4F,KAAAkW,GAEA9b,EAAA4F,KAAA,IAAAiiF,GAAA/rE,IAMA0zC,EAAAxvD,SAAAA,EAGA,OAAAwvD,EAiHA,SAAA48B,GAAAzzE,EAAAjW,GACA2E,MAAAkI,QAAAoJ,EAAAjW,MACAiW,EAAAjW,IAAAiW,EAAAjW,KAUA,SAAAioF,GAAAz1D,EAAAq3D,GACA,OAAA7B,GAAA6B,GACAr3D,EACEw1D,GAAAx1D,GACFq3D,KAEYr3D,KAAUq3D,IAkBtB,SAAArD,GAAAvwE,EAAA6zE,GACA,IAAA,MAAAprE,KAAAorE,EACA7zE,EAAAyI,GACAzI,EAAAyI,GAAAxb,QAAA4mF,EAAAprE,IAEAzI,EAAAyI,GAAAorE,EAAAprE,GAwDA,SAAAspE,GAAArsF,GACA,OAAAA,GAAA,IAAAA,EAOA,SAAAmqF,GAAAvvE,GACA,OAAAA,aAAAwzE,GAOA,SAAAhE,GAAAxvE,GACA,OAAAA,aAAA4uE,GAOA,SAAAmD,GAAA/xE,GACA,OAAAA,aAAAouE,GAoBA,SAAAkD,GAAAL,GACA,MAAA,SAAAA,GAAA,SAAAA;;;;SCl1CAuC,GAQAjrF,YAAAwiF,GAgCAriF,KAAAwX,QAAA,KAQAxX,KAAA2lF,YAAA,EAUA3lF,KAAAqiF,OAAAA,EAWAriF,KAAAisD,EAAAo2B,GAAAA,EAAAp2B,EAQAjsD,KAAA+qF,iBAAA,IAAAzgE,GASAtqB,KAAAgrF,iBAAAhrF,KAAAirF,mBAGAjrF,KAAA+qF,iBAAApqE,GAAA,MAAA,CAAAC,EAAAsqE,KACAA,EAAA7I,OAAAA,IAkBAriF,KAAAotD,SAAA,UA8CA+9B,mBACA,OAAAnrF,KAAAorF,cACAprF,KAAAorF,cAGAprF,KAAAorF,cAAAlF,GAAA7jE,KAAAriB,KAAAA,MAoCAH,mBACA,MAAAqrF,EAAA,IAAAxF,GAIA,OAFA1lF,KAAA+qF,iBAAA34E,IAAA84E,GAEAA,EA8DArrF,iBAAAxB,GACA4Y,GAAA5Y,KACAA,GAAAA,IAGA,IAAA,MAAA8b,KAAA9b,EACA2B,KAAAgrF,iBAAA54E,IAAA+H,GAYAta,mBAAAxB,GACA4Y,GAAA5Y,KACAA,GAAAA,IAGA,IAAA,MAAA8b,KAAA9b,EACA2B,KAAAgrF,iBAAAv/D,OAAAtR,GAaAta,YAAA2tD,GACAxtD,KAAAqnF,SAAA,IAAAnB,GAAA14B,GAgBA3tD,eAAA2tD,GACA04B,GAAAz0D,OAAAzxB,KAAAqnF,SAAA75B,GA4DA3tD,SACA,GAAAG,KAAA2lF,WAMA,MAAA,IAAA1kF,EAAA,yEAIAjB,KAAAqnF,WACArnF,KAAAwX,QAAAxX,KAAAqnF,SAAAn1D,SAGAlyB,KAAAqrF,iBAAArrF,KAAAqnF,SAAAiE,aAGAtrF,KAAA2lF,YAAA,EAWA9lF,UACAG,KAAAwD,gBAEAxD,KAAA+qF,iBAAA9/E,IAAAlP,GAAAA,EAAA6vC,YAaA5kC,EAAA8jF,GAAAxlD,IACAt+B,EAAA8jF,GAAAjqE;;;;SCveA0qE,WAAAT,GAMAjrF,YAAAwiF,GACA7gF,MAAA6gF,GASAriF,KAAAwyC,KAAAxyC,KAAAirF,mBAaAprF,SACA2B,MAAA0wB,SAEAlyB,KAAAwrF,wBAMA3rF,UAGA,OAFAG,KAAAyrF,yBAAAhgE,SAEAjqB,MAAAoqC,UAQA/rC,wBACA,MAAA6rF,EAAA1rF,KAAAyrF,yBAAA,IAAAvF,IACA/8E,IAAA,MACA6Q,YACAzC,OACA,UACA,qBACA,iBAGAlZ,SAAA2B,KAAAwyC,OACGtgB,SAEHvc,SAAA68B,KAAA7T,YAAA+sD;;;;SCjEAC,WAAAb,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAQAriF,KAAAqG,IAAA,QAQArG,KAAAqG,IAAA,OAEA,MAAAgc,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,QACA6Q,YACAzC,OACA,YAEA6+C,IAAA/zC,EAAAnc,GAAA,QAEA7H,WAEA6tC,KAAA7pB,EAAAnc,GAAA;;;;SClCA2lF,WAAAN,GAMA1rF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAyJ,EAAA3pF,IASAnC,KAAAw+B,IAAAx+B,KAAAirF,mBASAjrF,KAAA+rF,KAAA/rF,KAAAirF,mBASAjrF,KAAAgsF,gBAAAhsF,KAAAisF,kBAAAH,GAEA9rF,KAAA4rF,aACAziF,IAAA,MAEA6Q,YACAzC,OACA,WACA,YACA,sBAEA20E,KAAA,cACA5xD,IAAA,MACAmxB,KAAA42B,EAAAr2B,SACAmgC,2CAAgDL,KAGhDztF,UACA2B,KAAAgsF,iBAEA7iF,IAAA,MACA6Q,YACAzC,MAAA,8BACA20E,KAAA,gBAEA7tF,SAAA2B,KAAAw+B,MAGAr1B,IAAA,MACA6Q,YACAzC,MAAA,kBACA20E,KAAA,gBAEA7tF,SAAA2B,KAAA+rF,SAYAlsF,kBAAAisF,GACA,MAAA7/B,EAAAjsD,KAAAisD,EACAmgC,EAAA,IAAAT,GAWA,OATAS,EAAAlgD,KAAA+f,EAAA,oBAEAmgC,EAAAC,gBACAryE,YACAxT,4BAAiCslF,IACjCv0E,MAAA,oBAIA60E;;;;SCjGAE,WAAAxB,GAQAjrF,YAAAwiF,EAAA7/D,GACAhhB,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aAEA3oE,IACAxiB,KAAAwX,QAAAxX,KAAAwiB,gBAAAA,GAGAxiB,KAAA4rF,aACAziF,IAAA,MACA6Q,YACAzC,OACA8K,EAAAnc,GAAA,YAAAxJ,GAAAA,EAAA,aAAA,cACA,KACA,sBACA,aACA,sBAEA6vF,gBAAAlqE,EAAAnc,GAAA,aAAAxJ,IAAAA,MAUAsD,KAAAqG,IAAA,cAAA,GAQArG,KAAAqG,IAAA,aAAA,GAQArG,KAAAwsF,gBAAAhqE,EAcA3iB,SACA2B,MAAA0wB,SAEAlyB,KAAAwsF,gBACAxsF,KAAAqnF,SAAAzhF,MAAA5F,KAAAwX,QAAAxX,KAAAwsF,iBAEAxsF,KAAAwiB,gBAAAxiB,KAAAwX,QAOA3X,UACAG,KAAAwsF,iBACAxsF,KAAAqnF,SAAA36B,OAAA1sD,KAAAwsF,iBAGAhrF,MAAAoqC;;;;SCrFA6gD,WAAAH,GASAzsF,YAAAwiF,EAAA7/D,GACAhhB,MAAA6gF,EAAA7/D,GAEA,MAAAH,EAAAriB,KAAAmrF,aACAl/B,EAAAjsD,KAAAisD,EAQAjsD,KAAAqG,IAAA,OAAA,MAMArG,KAAAqsF,gBACAryE,YACAkyE,KAAA,UACAQ,aAAArqE,EAAAnc,GAAA,OAPAxJ,GACAuvD,EAAA,wBAAAvvD,KAOA6a,MAAA;;;;GC/BA,SAAAo1E,GAAAtN,GASA,OAAA3iF,GAAAA,EAAA2iF;;;;GCTA,MAAAuN,GAAAD,GAAA,YAKAE,WAAA/B,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aASAnrF,KAAAqG,IAAA,YAAA,GASArG,KAAAqG,IAAA,YAAA,GAaArG,KAAAqG,IAAA,iBAAA,MAYArG,KAAAqG,IAAA,sBAAA,IAgBArG,KAAAqG,IAAA,oBAAA,GAUArG,KAAAqG,IAAA,cAAA,MAWArG,KAAAqG,IAAA,yBAAA,GAYArG,KAAAqG,IAAA,yBAAA,GAQArG,KAAA4gF,QAAA5gF,KAAAirF,mBAwBAjrF,KAAA8sF,yBAAA,IAAA5G,IACA/8E,IAAA,MACA6Q,YACAzC,OACA,gCAEAe,OACAy0E,QAAA1qE,EAAAnc,GAAA,WAAAk1C,GAAAA,EAAA,QAAA,QACArI,OAAA1wB,EAAAnc,GAAA,WAAAk1C,GACAA,EAAAwxC,GAAA5sF,KAAAgtF,WAAAj6C,QAAA,UAIG7gB,SASHlyB,KAAAitF,cAAA,IAAA/G,IACA/8E,IAAA,MAEA6Q,YACAzC,OACA,2BAEA8K,EAAA6kE,GAAA,WAAA,mCACA7kE,EAAA6kE,GAAA,wBAAA,iDAEA5uE,OACAomB,MAAArc,EAAAnc,GAAA,WAAAk1C,GACAA,EAAAwxC,GAAA5sF,KAAA8sF,yBAAAl6C,wBAAAlU,OAAA,MAGAF,IAAAnc,EAAAnc,GAAA,wBAAAgnF,GACAA,EAAAN,GAAA5sF,KAAAglF,mBAAA,MAGAhzC,OAAA3vB,EAAAnc,GAAA,wBAAAinF,GACAA,EAAAP,GAAA5sF,KAAAotF,qBAAA,MAGAC,WAAAhrE,EAAAnc,GAAA,iBAIA7H,SAAA2B,KAAA4gF,UACG1uD,SAEHlyB,KAAA4rF,aACAziF,IAAA,MACA6Q,YACAzC,OACA,oBAGAlZ,UACA2B,KAAA8sF,yBACA9sF,KAAAitF,iBAQAptF,SACA2B,MAAA0wB,SAGAlyB,KAAAstF,yBAGAttF,KAAAsD,SAAA3F,GAAArC,OAAA,SAAA,KACA0E,KAAAstF,2BAIAttF,KAAAsD,SAAAtD,KAAA,kBAAA,KACAA,KAAAstF,2BAUAztF,yBACA,MAAA0tF,EAAAvtF,KAAAgtF,WAAAhtF,KAAAitF,cAAAr6C,wBACA,IAAA46C,EAEAxtF,KAAA+kF,gBAGAyI,EAAAxtF,KAAAytF,aAAAztF,KAAA+kF,eAAAnyC,wBAGA5yC,KAAAo7C,SAAAp7C,KAAA0tF,UAEAF,EAAAhvD,IAAAx+B,KAAAglF,mBAKAhlF,KAAAgtF,WAAAj6C,OAAA/yC,KAAAotF,oBAAAI,EAAAz6C,QAZA/yC,KAAAo7C,UAAA,EAiBAp7C,KAAAo7C,UACAp7C,KAAAmtF,sBACAK,EAAAx7C,OAAAu7C,EAAAx6C,OAAA/yC,KAAAotF,oBAAAptF,KAAAglF,kBACAhlF,KAAAktF,uBAAAltF,KAAAmtF,yBAAAntF,KAAAglF,kBACAhlF,KAAA2tF,YAAA3tF,KAAAmtF,sBAAA,KAAAP,IAAAjvF,GAAArC,OAAA0nC,WAIAhjC,KAAAmtF,uBAAA,EACAntF,KAAAktF,uBAAA,EACAltF,KAAA2tF,YAAA;;;;SC7NAC,GAUA/tF,YAAAwD,GA4CA,GA3CAjH,OAAAmiC,OAAAv+B,KAAAqD,GA2CAA,EAAAu6B,SAAAv6B,EAAAwqF,iBACA,IAAA,MAAAptE,KAAApd,EAAAu6B,QAAA,CACA,IAAAA,EAAAv6B,EAAAu6B,QAAAnd,GAEA,iBAAAmd,IACAA,GAAAA,IAGA,IAAA,MAAApO,KAAAoO,EACAv6B,EAAAwqF,iBAAAxnF,IAAAmpB,EAAA,CAAApuB,EAAAwuC,KACA5vC,KAAAygB,KACAmvB,OAcApnB,YACA,OAAAxoB,KAAA8tF,WAAAxiE,KAAAyiE,KAAA,KAUAtlE,WACA,OAAAzoB,KAAA8tF,WAAAviE,OAAAwiE,IAAAppF,OAAA,GAAA,IAAA,KAUAsZ,WACA,OAAAje,KAAAguF,kBAAA,GAUA9oB,eACA,OAAAllE,KAAAguF,mBAAA,GAUAt5D,cACA,IAAA1sB,EAAA,KAGA,OAAA,OAAAhI,KAAA4kF,aAAAP,eACA,MAGArkF,KAAA8tF,WAAAxiE,KAAA,CAAA8E,EAAA69D,KACA,MAAAC,EAAA99D,EAAA5Y,UAAAxX,KAAA4kF,aAAAP,eAMA,OAJA6J,IACAlmF,EAAAimF,GAGAC,IAGAlmF,GAMAnI,aACAG,KAAAwkF,OAAAxkF,KAAAwoB,OAMA3oB,YACAG,KAAAwkF,OAAAxkF,KAAAyoB,MAMA5oB,YACAG,KAAAwkF,OAAAxkF,KAAAie,MAMApe,gBACAG,KAAAwkF,OAAAxkF,KAAAklE,UASArlE,OAAAuwB,GACAA,GACAA,EAAA/H,QAaAxoB,kBAAAkvD,GAEA,MAAAr6B,EAAA10B,KAAA00B,QACAy5D,EAAAnuF,KAAA8tF,WAAA7oF,OAEA,IAAAkpF,EACA,OAAA,KAKA,GAAA,OAAAz5D,EACA,OAAA10B,KAAA,IAAA+uD,EAAA,QAAA,QAIA,IAAA/mD,GAAA0sB,EAAAy5D,EAAAp/B,GAAAo/B,EAEA,EAAA,CACA,MAAA/9D,EAAApwB,KAAA8tF,WAAAtxF,IAAAwL,GAGA,GAAA+lF,GAAA39D,GACA,OAAAA,EAIApoB,GAAAA,EAAAmmF,EAAAp/B,GAAAo/B,QACGnmF,IAAA0sB,GAEH,OAAA,MASA,SAAAq5D,GAAA39D,GACA,SAAAA,EAAA/H,OAAA,QAAA1qB,GAAArC,OAAAs2C,iBAAAxhB,EAAA5Y,SAAAu1E;;;;SChRAqB,WAAAtD,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEAriF,KAAA4rF,aACAziF,IAAA,OACA6Q,YACAzC,OACA;;;;;;;;SCFA82E,WAAAvD,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aCDA,IAAA/6D,EDSApwB,KAAAwa,MAAAxa,KAAAirF,mBAQAjrF,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAAwiF,WAAA,IAAAV,GAQA9hF,KAAAqG,IAAA,cAAA,GAQArG,KAAAqG,IAAA,aASArG,KAAAsuF,aAAA,IAAAV,IACAE,WAAA9tF,KAAAwa,MACAoqE,aAAA5kF,KAAA4kF,aACAiJ,iBAAA7tF,KAAAwiF,WACA5kD,SAEA2wD,eAAA,YAAA,WAGAC,WAAA,aAAA,gBAIAxuF,KAAA4rF,aACAziF,IAAA,MACA6Q,YACAzC,OACA,aACA8K,EAAA6kE,GAAA,aAAA,uBACA7kE,EAAAnc,GAAA,eAIA7H,SAAA2B,KAAAwa,MAEAmG,IAEA8tE,WC7EAr+D,ED6EApwB,KC5EAowB,EAAA+6D,aAAAjlF,GAAA0a,IACAA,EAAAvgB,SAAA+vB,EAAA5Y,SACAoJ,EAAA2sB,uBDkFA1tC,SACA2B,MAAA0wB,SAGA,IAAA,MAAA5a,KAAAtX,KAAAwa,MACAxa,KAAA4kF,aAAAxyE,IAAAkF,EAAAE,SAGAxX,KAAAwa,MAAAmG,GAAA,MAAA,CAAAC,EAAAtJ,KACAtX,KAAA4kF,aAAAxyE,IAAAkF,EAAAE,WAGAxX,KAAAwa,MAAAmG,GAAA,SAAA,CAAAC,EAAAtJ,KACAtX,KAAA4kF,aAAAn5D,OAAAnU,EAAAE,WAIAxX,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAMA3X,QACAG,KAAAsuF,aAAAI,aAMA7uF,YACAG,KAAAsuF,aAAAK,YAUA9uF,eAAAulD,EAAAnqD,GACAmqD,EAAAn6C,IAAAhP,IACA,KAAAA,EACA+D,KAAAwa,MAAApI,IAAA,IAAAg8E,IACInzF,EAAAsN,IAAAtM,GACJ+D,KAAAwa,MAAApI,IAAAnX,EAAAmD,OAAAnC,IAmBAm0C,GAAAE,KACA,4EACMr0C,KAAAA;;;;SEjKN2yF,WAAA/C,GAMAhsF,YAAAwiF,GACA7gF,MAAA6gF,GASAriF,KAAA8kF,YAAA,IAAA+H,GAAAxK,GAQAriF,KAAAklF,QAAA,IAAAmJ,GAAAhM,GAQAriF,KAAAilB,SAAA,IAAAwnE,GAAApK,GAMAxiF,SACA2B,MAAA0wB,SAGAlyB,KAAA8kF,YAAAlE,QAAAxuE,IAAApS,KAAAklF,SAEAllF,KAAAw+B,IAAApsB,IAAApS,KAAA8kF,aACA9kF,KAAA+rF,KAAA35E,IAAApS,KAAAilB,UAMAzC,sBACA,OAAAxiB,KAAAilB,SAAAzN;;;;SC7DAq3E,GACAhvF,cAOAG,KAAA8uF,qBAWAjvF,QAAA2X,EAAAqb,GACA7yB,KAAA8uF,kBAAA7qF,MAAgCuT,QAAAA,EAAAqb,WAAAA,IAEhCrb,EAAAc,MAAAy0E,QAAA,OAEAl6D,GACArb,EAAAsjB,WAAAH,aAAA9H,EAAArb,EAAAhC,aAOA3V,UACAG,KAAA8uF,kBAAAhuF,QAAA,EAAqC0W,QAAAA,EAAAqb,WAAAA,MACrCrb,EAAAc,MAAAy0E,QAAA,GAEAl6D,GACAA,EAAApH,WAIAzrB,KAAA8uF;;;;;;;;;MCPAC,WAAA5M,GAYAtiF,YAAA2X,EAAA4tC,GACA5jD,MAAA4jD,GAQAplD,KAAAgvF,iBAAA,IAAAH,GAEA7uF,KAAAwX,QAAAA,EAEAxX,KAAAoB,KAAAyzD,UAAA,IAAA2uB,GAEAxjF,KAAAkhD,MAAAvrC,SAAAilE,aAEA56E,KAAAivF,GAAA,IAAAvK,GAAA1kF,KAAA,IAAA4uF,GAAA5uF,KAAAqiF,SCxDA,SAAA35B,GACA,IAAAx/C,EAAAw/C,EAAAwmC,eAMA,MAAA,IAAAjuF,EAAA,gFAGA,MAAAuW,EAAAkxC,EAAAlxC,QAGA,GAAAA,GAAA,aAAAA,EAAAsqB,QAAApU,eAAAlW,EAAA23E,KAAA,CACA,IAAAC,EACA,MAAAD,EAAA33E,EAAA23E,KACAE,EAAA,IAAA3mC,EAAAwmC,gBAIAhmF,EAAAimF,EAAAG,UACAF,EAAAD,EAAAG,OAEAH,EAAAG,OAAA,MACAD,IACAD,EAAAxpF,MAAAupF,MAKAA,EAAA/oD,iBAAA,SAAAipD,GAIA3mC,EAAA/nC,GAAA,UAAA,KACAwuE,EAAA5oD,oBAAA,SAAA8oD,GAEAD,IACAD,EAAAG,OAAAF,MDoBAG,CAAAvvF,MAUAH,UAKA,OAJAG,KAAAkvF,gBACAlvF,KAAAgvF,iBAAAQ,UACAxvF,KAAAivF,GAAArjD,UAEApqC,MAAAoqC,UA2CA/rC,cAAA2X,EAAA4tC,GACA,OAAA,IAAA0E,QAAAv5C,IACA,MAAAm4C,EAAA,IAAA1oD,KAAAwX,EAAA4tC,GAEA70C,EACAm4C,EAAAk6B,cACA14B,KAAA,IAAAxB,EAAAumC,GAAAQ,QACAvlC,KAAA,KACAxB,EAAAsmC,iBAAAnlF,QAAA2N,EAAAkxC,EAAAumC,GAAA7+D,KAAA5Y,SACAkxC,EAAA3hD,KAAA,aAEAmjD,KAAA,IAAAxB,EAAA45B,QAAAlyD,KAAAs/D,cAAAhnC,EAAAumC,GAAA7+D,KAAA5N,kBACA0nC,KAAA,IAAAxB,EAAAtnD,KAAAquF,MEnIAxM,EFmIAzrE,EElIAyrE,aAAAC,oBACAD,EAAAvmF,MAGAumF,EAAAE,aF+HAj5B,KAAA,KACAxB,EAAA3hD,KAAA,aACA2hD,EAAA3hD,KAAA,WAEAmjD,KAAA,IAAAxB,MExIA,IAAAu6B,GF8IAj8E,EAAA+nF,GAAAhM,IACA/7E,EAAA+nF,GAAA/L;;;;;MG9IA2M,GAIA9vF,YAAA6oD,GAiBA1oD,KAAA0oD,OAAAA,EAMA7oD,UACAG,KAAAwD,iBAIAwD,EAAA2oF,GAAA9uE;;;;;MCtCA+uE,GACA/vF,YAAAgwF,GAOA7vF,KAAA8vF,MA2CA,SAAAD,GAEA,MAAAC,EAAAD,EAAAC,MAAApqF,MAAAC,KAAAkqF,EAAAC,UACAt1E,EAAAq1E,EAAAr1E,MAAA9U,MAAAC,KAAAkqF,EAAAr1E,UAEA,GAAAs1E,EAAA7qF,OACA,OAAA6qF,EAGA,OAAAt1E,EACA+Q,OAAAjU,GAAA,SAAAA,EAAAy4E,MACA9kF,IAAAqM,GAAAA,EAAA04E;;;;GAtDAC,CAAAJ,GAQA7vF,KAAAkwF,QAAAL,EAQA7qD,YACA,OAAAhlC,KAAAkwF,QAAAlrD,MAWAnlC,QAAAiJ,GACA,OAAA9I,KAAAkwF,QAAAC,QAAArnF,GASAjJ,QAAAiJ,EAAA1H,GACApB,KAAAkwF,QAAAE,QAAAtnF,EAAA1H,UCvCAivF,WAAA5iD,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEA,MAAAkgE,EAAAtwF,KAAA2V,SAOA,SAAA46E,EAAA3vE,EAAAxf,GACAA,EAAAmsC,iBAEA,MAAAijD,EAAApvF,EAAAqvF,WAAArvF,EAAAqvF,WAAA/qF,MAAAC,KAAA2qF,EAAA/tE,UAAA2G,aAEAonE,EAAAvpF,KAAA,kBACA2pF,aAAAtvF,EAAAsvF,aACAF,aAAAA,IAZAxwF,KAAA0tC,cAAA,QAAA,OAAA,MAAA,OAAA,YAEA1tC,KAAAsD,SAAAgtF,EAAA,QAAAC,GAAsD7tF,SAAA,QACtD1C,KAAAsD,SAAAgtF,EAAA,OAAAC,GAAqD7tF,SAAA,QAcrD7C,WAAAwtC,GACA,MAAA60C,GACAwO,aAAA,IAAAd,GAAAviD,EAAAsjD,cAAAtjD,EAAAsjD,cAAAtjD,EAAAqjD,eAGA,QAAArjD,EAAAvkC,OACAo5E,EAAAuO,UAOA,SAAArgE,EAAAid,GACA,MAAAujD,EAAAvjD,EAAAhtC,OAAAmwB,cACAgK,EAAA6S,EAAAwjD,QACAt2D,EAAA8S,EAAAyjD,QACA,IAAAjyD,EAGA+xD,EAAAG,qBAAAH,EAAAG,oBAAAv2D,EAAAD,GACAsE,EAAA+xD,EAAAG,oBAAAv2D,EAAAD,GAGA8S,EAAA2jD,eACAnyD,EAAA+xD,EAAA9xD,eACAqC,SAAAkM,EAAA2jD,YAAA3jD,EAAA4jD,aACApyD,EAAArN,UAAA,IAGA,OAAAqN,EACAzO,EAAAC,aAAAiS,eAAAzD,GAEAzO,EAAAza,SAAA4M,UAAAoG;;;;GA3BAuoE,CAAAlxF,KAAAowB,KAAAid,IAGArtC,KAAA+G,KAAAsmC,EAAAvkC,KAAAukC,EAAA60C;;;;;ACxCA,MAAAiP,IAAA,aAAA;;;;;MC+FAC,WAAAzB,GAIA3mC,wBACA,MAAA,YAMAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACA2oC,EAAA3oC,EAAAxH,MAAAvrC,SACAya,EAAAs4B,EAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SC3GA,IAAAu2B;;;;GDoKA,SAAAolD,EAAA1wE,EAAAxf,GACA,MAAAsvF,EAAAtvF,EAAAsvF,aAEAtvF,EAAAmsC,iBAEA,MAAAqzC,EAAAl4B,EAAAtnD,KAAA6zD,OAAAvM,EAAAxH,MAAAqwC,mBAAAF,EAAA9uE,YAEA+tE,EAAAvpF,KAAA,mBAA0C2pF,aAAAA,EAAA9P,QAAAA,EAAAiC,OAAAjiE,EAAA3kB,OAxD1C+D,KAAAwxF,mBAAA,IAAAhO,GAEApzD,EAAA2mB,YAAAs5C,IAIArwF,KAAAsD,SAAAgtF,EAAA,iBAAA,CAAA1vE,EAAAxf,KAGA,GAAAsnD,EAAAxX,WACA,OAGA,MAAAw/C,EAAAtvF,EAAAsvF,aACA,IAAA9P,EAAA,GAEA8P,EAAAP,QAAA,aACAvP,EAAA8P,EAAAP,QAAA,aElIAtmF,QAAA,0DAAA,CAAA4nF,EAAAC,IAGA,GAAAA,EAAAzsF,OACA,IAGAysF,GF4HIhB,EAAAP,QAAA,iBCpIJjkD,GADAA,EDsIAwkD,EAAAP,QAAA,eCnIAtmF,QAAA,KAAA,QACAA,QAAA,KAAA,QAGAA,QAAA,QAAA,WACAA,QAAA,MAAA,KAEAA,QAAA,MAAA,UACAA,QAAA,MAAA,UAEAA,QAAA,QAAA,YAEArE,QAAA,YAAA,IAEA0mC,QAAeA,SDqHf00C,EC/GA10C,GDkHA00C,EAAA5gF,KAAAwxF,mBAAAv8B,OAAA2rB,GAEA5gF,KAAA+G,KAAA,uBAAsC65E,QAAAA,IAEtCxwD,EAAAuhE,yBACMjvF,SAAA,QAEN1C,KAAAsD,SAAAtD,KAAA,sBAAA,CAAA4gB,EAAAxf,KACA,IAAAA,EAAAw/E,QAAApnE,QAAA,CACA,MAAAo4E,EAAA5xF,KAAA0oD,OAAAtnD,KACA8/C,EAAAlhD,KAAA0oD,OAAAxH,MAKA2wC,EAAAD,EAAAj8B,QAAAv0D,EAAAw/E,QAAA,oBAEA,GAAA,GAAAiR,EAAAt4E,WACA,OAGA2nC,EAAA4wC,cAAAD,EAAAR,EAAA9uE,cAEM7f,SAAA,QAcN1C,KAAAsD,SAAAgtF,EAAA,OAAAgB,GAAmD5uF,SAAA,QACnD1C,KAAAsD,SAAAgtF,EAAA,MAAA,CAAA1vE,EAAAxf,KAGAsnD,EAAAxX,WACA9vC,EAAAmsC,iBAEA+jD,EAAA1wE,EAAAxf,KAEMsB,SAAA,QAEN1C,KAAAsD,SAAAgtF,EAAA,kBAAA,CAAA1vE,EAAAxf,KACAA,EAAAw/E,QAAApnE,UACApY,EAAAsvF,aAAAN,QAAA,YAAApwF,KAAAwxF,mBAAAt8B,OAAA9zD,EAAAw/E,UACAx/E,EAAAsvF,aAAAN,QAAA,aDvLA,SAAA2B,EAAAz/B,GACA,IAAApmB,EAAA,GAEA,GAAAomB,EAAAz2C,GAAA,SAAAy2C,EAAAz2C,GAAA,aAEAqwB,EAAAomB,EAAAlxD,UACE,GAAAkxD,EAAAz2C,GAAA,QAAAy2C,EAAAv6C,aAAA,OAEFm0B,EAAAomB,EAAAt6C,aAAA,WACE,CAGF,IAAAub,EAAA,KAEA,IAAA,MAAApZ,KAAAm4C,EAAAl4C,cAAA,CACA,MAAA43E,EAAAD,EAAA53E,GAGAoZ,IAAAA,EAAA1X,GAAA,qBAAA1B,EAAA0B,GAAA,uBACAs1E,GAAArtD,SAAAvQ,EAAAt3B,OAAAk1F,GAAArtD,SAAA3pB,EAAAle,MACAiwC,GAAA,KAEAA,GAAA,QAIAA,GAAA8lD,EACAz+D,EAAApZ,GAIA,OAAA+xB,ECwJA6lD,CAAA3wF,EAAAw/E,WAGA,OAAAx/E,EAAAyhF,QACAn6B,EAAAxH,MAAA2/B,cAAAwQ,EAAA9uE,aAEM7f,SAAA;;;;SGvLNuvF,GAMApyF,YAAA6oD,GA2DA,SAAAwpC,IACAlyF,KAAAymC,WAAA,EArDAzmC,KAAA0oD,OAAAA,EAcA1oD,KAAAqG,IAAA,aAAA9I,GAUAyC,KAAAqG,IAAA,aAAA,GAEArG,KAAAotD,SAAA,WAGAptD,KAAAsD,SAAAtD,KAAA0oD,OAAAxH,MAAAvrC,SAAA,SAAA,KACA3V,KAAAmyF,YAGAnyF,KAAA2gB,GAAA,UAAAC,IACA5gB,KAAAymC,WACA7lB,EAAA3e,SAEMS,SAAA,SAGN1C,KAAAsD,SAAAolD,EAAA,oBAAA,CAAA9nC,EAAA3kB,EAAAS,KACAA,GAGAsD,KAAA2gB,GAAA,mBAAAuxE,GAAgDxvF,SAAA,WAChD1C,KAAAymC,WAAA,IAEAzmC,KAAAkC,IAAA,mBAAAgwF,GACAlyF,KAAAmyF,aAgBAtyF,UACAG,KAAAymC,WAAA,EAcA5mC,WAKAA,UACAG,KAAAwD,iBAgBAwD,EAAAirF,GAAApxE;;;;;MC5HAuxE,WAAAH,GAIApyF,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SAEAurC,EAAA3J,OAAA5qB,KAaA,SAAAu0B,EAAAv0B,EAAApK,EAAA4+B,GACA,MAAAkxC,EAAA9vE,EAAAuD,YACAqB,EAAA5E,EAAAoG,gBACA1B,EAAAE,EAAA7J,MAAAjI,OACA6R,EAAAC,EAAA1D,IAAApO,OAGA,GAAA8rC,EAAA2M,QAAA7mC,IAAAk6B,EAAA2M,QAAA5mC,GASA,YAJAmrE,GAAAprE,GAAAC,GACAg6B,EAAA2/B,cAAAt+D,IAMA,GAAA8vE,EACAC,GAAA3lE,EAAApK,EAAA4E,EAAA7J,WACE,CACF,MAAAghE,IAAAn3D,EAAA7J,MAAA+G,WAAA8C,EAAA1D,IAAAM,SACAwuE,EAAAtrE,GAAAC,EAEAg6B,EAAA2/B,cAAAt+D,GAAmC+7D,cAAAA,IAEnCA,IAIAiU,EACAD,GAAA3lE,EAAApK,EAAAA,EAAA8F,OAMAsE,EAAAuI,aAAAhO,EAAA,KAlDAsrE,CAAAxyF,KAAA0oD,OAAAxH,MAAAv0B,EAAA4S,EAAAhd,UAAA2+B,EAAAC,QACAnhD,KAAA+G,KAAA,gBAA+B4lB,OAAAA,OAuD/B,SAAA2lE,GAAA3lE,EAAApK,EAAAkwE,GACA,MAAAC,EAAAD,EAAAp9E,OACAwd,EAAA,IAAA6/D,EAAA/yF,YAAA+yF,EAAAz2F,KAAAy2F,EAAAj9D,iBAEAg9D,EAAA1uE,QAIA4I,EAAAmG,OAAAD,EAAA4/D,EAAAp9E,OAAA,SACEo9E,EAAApuE,UAIFsI,EAAAmG,OAAAD,EAAA4/D,EAAAp9E,OAAA,UAEAsX,EAAAnsB,MAAAiyF,GAGA9lE,EAAAuI,aAAAu9D,EAAAp9E,OAAAG,YAAA;;;;SCjFAm9E,WAAAnsD,GACA3mC,YAAAuwB,GACA5uB,MAAA4uB,GAEA,MAAAza,EAAA3V,KAAA2V,SAEAA,EAAAgL,GAAA,UAAA,CAAAC,EAAAxf,KACA,GAAApB,KAAAymC,WAAArlC,EAAA+tB,SAAAjB,GAAAO,MAAA,CAEA,IAAAtrB,EACAwS,EAAAi9E,KAAA,QAAAhyE,GAAAzd,EAAAyd,GAAqDle,SAAA,YAErDiT,EAAA5O,KAAA,QAAA,IAAAqmC,GAAAz3B,EAAAvU,EAAAisC,WAIAlqC,GAAAA,EAAAlB,KAAAH,QACA8e,EAAA3e,UASApC;;;;SC1BAgzF,WAAAlD,GAIA3mC,wBACA,MAAA,QAGAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAt4B,EAAAs4B,EAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SAEAya,EAAA2mB,YAAA47C,IAEAjqC,EAAA4C,SAAAl5C,IAAA,QAAA,IAAAggF,GAAA1pC,IAGA1oD,KAAAsD,SAAAgtF,EAAA,QAAA,CAAA1vE,EAAAxf,KACAsnD,EAAA2C,QAAA,SACAjqD,EAAAmsC,iBACAnd,EAAAuhE,yBACMjvF,SAAA;;;;;;;;;MCXNowF,GAOAjzF,YAAAqhD,EAAA6xC,EAAA,IAOA/yF,KAAAkhD,MAAAA,EASAlhD,KAAA2R,KAAA,EAQA3R,KAAA+yF,MAAAA,EAQA/yF,KAAAgzF,UAAA,EAQAhzF,KAAAizF,gBAAA,EAAAryE,EAAA6gC,KACA,eAAAA,EAAA34C,MAAA24C,IAAAzhD,KAAAkzF,QACAlzF,KAAAmzF,QAAA,KAIAnzF,KAAAozF,yBAAA,MACApzF,KAAAmzF,WAGAnzF,KAAAkhD,MAAAvrC,SAAAgL,GAAA,SAAA3gB,KAAAizF,iBAEAjzF,KAAAkhD,MAAAvrC,SAAA4M,UAAA5B,GAAA,eAAA3gB,KAAAozF,0BACApzF,KAAAkhD,MAAAvrC,SAAA4M,UAAA5B,GAAA,mBAAA3gB,KAAAozF,0BA8BA3xC,YAKA,OAJAzhD,KAAAkzF,SACAlzF,KAAAkzF,OAAA,IAAAlgB,IAGAhzE,KAAAkzF,OASArzF,MAAAq4E,GACAl4E,KAAA2R,MAAAumE,EAEAl4E,KAAA2R,MAAA3R,KAAA+yF,OACA/yF,KAAAmzF,QAAA,GAOAtzF,OACAG,KAAAgzF,UAAA,EAMAnzF,SACAG,KAAAgzF,UAAA,EAMAnzF,UACAG,KAAAkhD,MAAAvrC,SAAAzT,IAAA,SAAAlC,KAAAizF,iBACAjzF,KAAAkhD,MAAAvrC,SAAA4M,UAAArgB,IAAA,eAAAlC,KAAAozF,0BACApzF,KAAAkhD,MAAAvrC,SAAA4M,UAAArgB,IAAA,mBAAAlC,KAAAozF,0BASAvzF,OAAAwzF,GACArzF,KAAAgzF,WAAAK,IACArzF,KAAAkzF,OAAA,KACAlzF,KAAA2R,KAAA;;;;SC5JA2hF,WAAArB,GAQApyF,YAAA6oD,EAAA6qC,GACA/xF,MAAAknD,GASA1oD,KAAAwzF,QAAA,IAAAV,GAAApqC,EAAAxH,MAAAqyC,GAQA1kF,aACA,OAAA7O,KAAAwzF,QAMA3zF,UACA2B,MAAAoqC,UAEA5rC,KAAAwzF,QAAA5nD,UAiBA/rC,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SACAu2B,EAAA7oC,EAAA6oC,MAAA,GACAunD,EAAAvnD,EAAAjnC,OACAkiB,EAAA9jB,EAAA8jB,OAAAoY,EAAAhd,UAAAoG,gBACA+qE,EAAArwF,EAAAqwF,YAEAxyC,EAAAyC,cAAA3jD,KAAAwzF,QAAA/xC,MAAA90B,IACA,MAAAgnE,EAAAxsE,EAAArB,YAEA9lB,KAAAwzF,QAAAI,OAEAD,GACAhnE,EAAAlB,OAAAtE,GAGA+kB,GACAvf,EAAAknE,WAAA3nD,EAAA3M,EAAAhd,UAAAkT,gBAAAtO,EAAA7J,OAGAo2E,EACA/mE,EAAAuI,aAAAw+D,GACIC,GAEJhnE,EAAAuI,aAAA/N,EAAA7J,MAAA8J,aAAAqsE,IAGAzzF,KAAAwzF,QAAAM,SAEA9zF,KAAAwzF,QAAA5iF,MAAA6iF;;;;SC5EAM,WAAApE,GAIA3mC,wBACA,MAAA,QAMAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAsrC,EAAAtrC,EAAA45B,QAAAlyD,KACA6jE,EAAA,IAAAX,GAAA5qC,EAAAA,EAAAtD,OAAA5oD,IAAA,oBAAA,IAIAksD,EAAA4C,SAAAl5C,IAAA,QAAA6hF,GAEAj0F,KAAAsD,SAAA0wF,EAAAr+E,SAAA,UAAA,CAAAiL,EAAAxf,KACApB,KAAAk0F,eAAA9yF,EAAA6yF,KACMvxF,SAAA,WAEN1C,KAAAsD,SAAA0wF,EAAAr+E,SAAA,YAAA,CAAAiL,EAAAuzE,EAAAn/D,KACAh1B,KAAAo0F,iBAAAD,EAAAn/D,KAoBAn1B,eAAAqiF,EAAA+R,GACA,MAAA/yC,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SACA9G,EAAAolF,EAAAplF,OAOAolF,EAAAxtD,YAkRA,SAAA4tD,GAEA,GAAAA,EAAAhlE,QACA,OAAA,EAGA,OAAAilE,GAAAxwD,SAAAuwD,EAAAllE,SApRAolE,CAAArS,IAAA3iD,EAAAhd,UAAAuD,cAIAjX,EAAA+kF,OAEA1yC,EAAAyC,cAAA90C,EAAA4yC,MAAA,KACAzhD,KAAA0oD,OAAAxH,MAAA2/B,cAAAthD,EAAAhd,aAGA1T,EAAAilF,WAWAj0F,iBAAAs0F,EAAAn/D,GACA,IAAAw/D,GAAAx0F,KAAA0oD,QAAA+rC,OAAAN,EAAAn/D,UASAw/D,GAMA30F,YAAA6oD,GAOA1oD,KAAA0oD,OAAAA,EAQA1oD,KAAAsiF,QAAAtiF,KAAA0oD,OAAA45B,QAUAziF,OAAAs0F,EAAAn/D,GACA,GAgSA,SAAAm/D,GACA,GAAA,GAAAA,EAAAlvF,OACA,OAAA,EAIA,IAAA,MAAA+mC,KAAAmoD,EACA,GAAA,aAAAnoD,EAAAljC,OAAA4rF,GAAA1oD,GACA,OAAA,EAIA,OAAA,EA5SA2oD,CAAAR,GACAn0F,KAAA40F,kCAAAT,EAAAn/D,QAEA,IAAA,MAAAgX,KAAAmoD,EAEAn0F,KAAA60F,oBAAA7oD,EAAAhX,GACAh1B,KAAA80F,yBAAA9oD,GAuBAnsC,kCAAAs0F,EAAAn/D,GAEA,MAAA+/D,EAuOA,SAAAZ,GACA,MAAAvvD,EAAAuvD,EACAlpF,IAAA+gC,GAAAA,EAAAtnC,MACA4nB,OAAA,CAAA7G,EAAA/gB,IACA+gB,EAAAuB,kBAAAtiB,GAAmDkR,aAAA,KAGnD,IAAAgvB,EACA,OAKA,OAAAA,EAAA5uB,cAA2BJ,aAAA,EAAAC,aAAA,IAC3ByV,KAAA9T,GAAAA,EAAAqE,GAAA,qBAAArE,EAAAqE,GAAA,gBArPAm5E,CAAAb,GAGA,IAAAY,EACA,OAGA,MAGAE,EAHAj1F,KAAA0oD,OAAA45B,QAAAlyD,KAAAC,aAGAmL,aAAAu5D,GAIAG,EAAA,IAAAn1D,GACAo1D,EAAAn1F,KAAA0oD,OAAAtnD,KAAAu0D,QACAu/B,EAAAhzD,UAAA+yD,IACAx/E,SAAA,GAGA2/E,EAAAp1F,KAAA0oD,OAAA45B,QAAAtlC,OAAAL,eAAAo4C,GAQA,IAAAK,EACA,OAIA,MAAAC,EAAA3vF,MAAAC,KAAAwvF,EAAA/6E,eACAk7E,EAAA5vF,MAAAC,KAAAyvF,EAAAh7E,eAGA,IAAAm7E,GAAAF,KAAAE,GAAAD,GACA,OAKA,MAAAlpD,EAAAipD,EAAApqF,IAAAqM,GAAAA,EAAAlW,MAAAqY,KAAA,IAAA5P,QAAA,UAAA,KACAsiC,EAAAmpD,EAAArqF,IAAAqM,GAAAA,EAAAlW,MAAAqY,KAAA,IAGA,GAAA0yB,IAAAC,EACA,OAGA,MAAAopD,EAAA97D,GAAAyS,EAAAC,IAEAqpD,cAASA,EAAAC,WAAAA,EAAAC,UAAAA,GAAuCC,GAAAJ,GAGhD,IAAAK,EAAA,KAEA7gE,IACA6gE,EAAA71F,KAAAsiF,QAAAtlC,OAAA4K,aAAA5yB,EAAArM,kBAGA,MAAAkrE,EAAAznD,EAAA5nC,OAAAixF,EAAAC,GACAtV,EAAA9lC,GAAAjzB,4BACA+tE,EACAK,EACAL,EACAK,EAAAE,GAGA31F,KAAA0oD,OAAA2C,QAAA,SACAnf,KAAA2nD,EACA1sE,MAAAi5D,EACAsT,YAAAmC,IAOAh2F,oBAAAmsC,EAAAhX,GACA,GAAA,QAAAgX,EAAAljC,KACA,OAYA,MAAAsjC,EAAAJ,EAAAI,QAAAviC,QAAA,UAAA,KAIA2rF,EAAA97D,GAFAsS,EAAAG,QAAAtiC,QAAA,UAAA,KAEAuiC,IAEAqpD,cAASA,EAAAC,WAAAA,EAAAC,UAAAA,GAAuCC,GAAAJ,GAGhD,IAAAK,EAAA,KAEA7gE,IACA6gE,EAAA71F,KAAAsiF,QAAAtlC,OAAA4K,aAAA5yB,EAAArM,kBAIA,MAAAmtE,EAAA,IAAA5yE,GAAA8oB,EAAAtnC,KAAA+wF,GACAM,EAAA/1F,KAAAsiF,QAAAtlC,OAAAH,gBAAAi5C,GACA1V,EAAA9lC,GAAAhzB,2BAAAyuE,EAAAJ,GACA9B,EAAAznD,EAAA5nC,OAAAixF,EAAAC,GAEA11F,KAAA0oD,OAAA2C,QAAA,SACAnf,KAAA2nD,EACA1sE,MAAAi5D,EACAsT,YAAAmC,IAOAh2F,yBAAAmsC,GACA,GAAA,YAAAA,EAAAljC,KACA,OAGA,MAAAyuC,EAAAm9C,GAAA1oD,GACA8pD,EAAA,IAAA5yE,GAAA8oB,EAAAtnC,KAAA6yC,EAAAvvC,OACA+tF,EAAA/1F,KAAAsiF,QAAAtlC,OAAAH,gBAAAi5C,GACAE,EAAAz+C,EAAAloC,OAAA,GAAAjO,KAEApB,KAAA0oD,OAAA2C,QAAA,SAKAnf,KAAA8pD,EAAAnsF,QAAA,UAAA,KACAsd,MAAA,IAAAmzB,GAAAy7C,MAKA,MAAAzB,IACAplE,GAAA,WACAA,GAAA,cACAA,GAAA,aACAA,GAAA,aACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAIA,IAAA,IAAAJ,EAAA,IAAqBA,GAAA,IAAaA,IAClCwlE,GAAArwF,KAAA6qB,GAqBA,SAAAmnE,GAAAC,EAAAC,GACA,OAAAD,aAAA5/E,IAAA6/E,aAAA7/E,GACA4/E,EAAA90F,OAAA+0F,EAAA/0F,KAEA80F,IAAAC,EAQA,SAAAzB,GAAA1oD,GAEA,GAAAA,EAAAY,YAAA3nC,OAAA+mC,EAAAW,YAAA1nC,QAAA,EACA,OAIA,MACAuyE,EChWA,SAAAlF,EAAA8jB,GACA,MAAA5e,KACA,IACA6e,EADAruF,EAAA,EAuCA,OApCAsqE,EAAAxxE,QAAAy2C,IACA,SAAAA,GACA++C,IAEAtuF,KACG,UAAAuvC,GACHg/C,EAAA,UACAF,EAAAhnF,OAAApL,KAAAmyF,EAAApuF,KAEAsuF,IAEAD,GACAvtF,KAAA,SACAd,MAAAA,EACAqH,QAAA+mF,EAAApuF,MAIAA,KAEAuuF,EAAA,UACAF,EAAAx7E,WAEAy7E,IAEAD,GACAvtF,KAAA,SACAd,MAAAA,EACA6S,QAAA,MAMAy7E,IAEA9e,EAEA,SAAA8e,IACAD,IACA7e,EAAAvzE,KAAAoyF,GACAA,EAAA,MAIA,SAAAE,EAAAC,GACA,OAAAH,GAAAA,EAAAvtF,MAAA0tF,GD6SAC,CADA/8D,GAAAsS,EAAAW,YAAAX,EAAAY,YAAAqpD,IACAjqD,EAAAY,aAGA,GAAA4qC,EAAAvyE,OAAA,EACA,OAGA,MAAAsyC,EAAAigC,EAAA,GAGA,OAAAjgC,EAAAloC,OAAA,aAAAiH,GAIAihC,OAJA,EA2DA,SAAAg+C,GAAAl3F,GACA,OAAAA,EAAA0jB,MAAA5H,GAAAA,EAAA0B,GAAA,SAQA,SAAA+5E,GAAAJ,GAEA,IAAAC,EAAA,KAEAiB,EAAA,KAGA,IAAA,IAAAh7F,EAAA,EAAiBA,EAAA85F,EAAAvwF,OAAuBvJ,IAAA,CAGxC,SAFA85F,EAAA95F,KAGA+5F,EAAA,OAAAA,EAAA/5F,EAAA+5F,EACAiB,EAAAh7F,GAKA,IAAAi6F,EAAA,EAEAD,EAAA,EAEA,IAAA,IAAAh6F,EAAA+5F,EAA6B/5F,GAAAg7F,EAAmBh7F,IAEhD,UAAA85F,EAAA95F,IACAi6F,IAIA,UAAAH,EAAA95F,IACAg6F,IAIA,OAASA,WAAAA,EAAAC,UAAAA,EAAAF,cAAAA;;;;SEzdTkB,WAAA1E,GAQApyF,YAAA6oD,EAAA1lC,GACAxhB,MAAAknD,GASA1oD,KAAAgjB,UAAAA,EASAhjB,KAAAwzF,QAAA,IAAAV,GAAApqC,EAAAxH,MAAAwH,EAAAtD,OAAA5oD,IAAA,oBAaAqD,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SAEAurC,EAAAyC,cAAA3jD,KAAAwzF,QAAA/xC,MAAA90B,IACA3sB,KAAAwzF,QAAAI,OAEA,MAAArxE,EAAA,IAAA09B,GAAA1gB,EAAAhd,WAOAu7D,EAAAv7D,EAAAuD,YAQA,GALAvD,EAAAuD,aACAo7B,EAAA01C,gBAAAr0E,GAAuCS,UAAAhjB,KAAAgjB,UAAAq8D,KAAAh8E,EAAAg8E,OAIvCr/E,KAAA62F,4CAAAxzF,EAAAyzF,UAAA,GAGA,YAFA92F,KAAA+2F,mCAAApqE,GAMA,GAAApK,EAAAuD,YACA,OAGA,IAAAoyD,EAAA,EAEA31D,EAAAoG,gBAAAwrD,uBAAArzE,QAAAqmB,IACA+wD,GAAA1wD,GACAL,EAAAsN,WAAuBrR,kBAAA,EAAAE,kBAAA,EAAAD,SAAA,OAIvB69B,EAAA2/B,cAAAt+D,GAAoCu7D,wBAAAA,IACpC99E,KAAAwzF,QAAA5iF,MAAAsnE,GAEAvrD,EAAAuI,aAAA3S,GAEAviB,KAAAwzF,QAAAM,WAsBAj0F,4CAAAi3F,GAEA,GAAAA,EAAA,EACA,OAAA,EAGA,MAAA51C,EAAAlhD,KAAA0oD,OAAAxH,MAEA3+B,EADA2+B,EAAAvrC,SACA4M,UACAkyD,EAAAvzB,EAAAC,OAAA48B,gBAAAx7D,GAMA,KAFAA,EAAAuD,aAAAvD,EAAAogC,sBAAA8xB,IAGA,OAAA,EAGA,IAAAvzB,EAAAC,OAAAmN,WAAAmmB,EAAA,aACA,OAAA,EAGA,MAAAuiB,EAAAviB,EAAAh/D,SAAA,GAKA,OAAAuhF,GAAA,cAAAA,EAAA/6F,KAYA4D,mCAAA8sB,GACA,MAAAu0B,EAAAlhD,KAAA0oD,OAAAxH,MAEA3+B,EADA2+B,EAAAvrC,SACA4M,UACAkyD,EAAAvzB,EAAAC,OAAA48B,gBAAAx7D,GACAm7D,EAAA,IAAAjlC,GAAA,aAEA9rB,EAAAlB,OAAA6uB,GAAA3wB,SAAA8qD,IACA9nD,EAAAmG,OAAA4qD,EAAAjJ,GAEA9nD,EAAAuI,aAAAwoD,EAAA;;;;SCjKAuZ,WAAAzwD,GACA3mC,YAAAuwB,GACA5uB,MAAA4uB,GAEA,MAAAza,EAAAya,EAAAza,SACA,IAAAmhF,EAAA,EAEAnhF,EAAAgL,GAAA,QAAA,CAAAC,EAAAxf,KACAA,EAAA+tB,SAAAjB,GAAA5nB,QAAAlF,EAAA+tB,SAAAjB,GAAAM,YACAsoE,EAAA,KAIAnhF,EAAAgL,GAAA,UAAA,CAAAC,EAAAxf,KACA,MAAA81F,KAEA,GAAA91F,EAAA+tB,SAAAjB,GAAA5nB,OACA4wF,EAAAl0E,UAAA,UACAk0E,EAAA7X,KAAA,gBACI,CAAA,GAAAj+E,EAAA+tB,SAAAjB,GAAAM,UAIJ,OAHA0oE,EAAAl0E,UAAA,WACAk0E,EAAA7X,KAAA,YAKA,MAAA8X,EAAA7pE,GAAAC,MAAAnsB,EAAAguB,OAAAhuB,EAAAiuB,QAKA,IAAAlsB,EAJA+zF,EAAA7X,KAAA8X,EAAA,OAAAD,EAAA7X,KACA6X,EAAAJ,WAAAA,EAIAnhF,EAAAi9E,KAAA,SAAAhyE,GAAAzd,EAAAyd,GAAqDle,SAAA,YAErDiT,EAAA5O,KAAA,SAAA,IAAAqmC,GAAAz3B,EAAAvU,EAAAisC,SAAA6pD,IAIA/zF,GAAAA,EAAAlB,KAAAH,QACA8e,EAAA3e,SAQApC;;;;SChDAu3F,WAAAzH,GAIA3mC,wBACA,MAAA,SAGAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAt4B,EAAAs4B,EAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SAEAya,EAAA2mB,YAAAkgD,IAEAvuC,EAAA4C,SAAAl5C,IAAA,gBAAA,IAAAukF,GAAAjuC,EAAA,YACAA,EAAA4C,SAAAl5C,IAAA,SAAA,IAAAukF,GAAAjuC,EAAA,aAEA1oD,KAAAsD,SAAAgtF,EAAA,SAAA,CAAA1vE,EAAAxf,KACAsnD,EAAA2C,QAAA,WAAAjqD,EAAA4hB,UAAA,gBAAA,UAA8Eq8D,KAAAj+E,EAAAi+E,KAAAyX,SAAA11F,EAAA01F,WAC9E11F,EAAAmsC,iBACAnd,EAAAuhE;;;;SCrBA0F,WAAA1H,GACAxlC,sBACA,OAAA4pC,GAAAqD,IAMApuC,wBACA,MAAA;;;;SCTAsuC,WAAArF,GACApyF,YAAA6oD,GACAlnD,MAAAknD,GAWA1oD,KAAAu3F,UAQAv3F,KAAAw3F,gBAAA,IAAA7mD,QAGA3wC,KAAAmyF,UAMAtyF,UACAG,KAAAymC,UAAAzmC,KAAAu3F,OAAAtyF,OAAA,EASApF,SAAA4hD,GACA,MAAAg2C,EAAAz3F,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAEAA,GACAoE,OAAA8wE,EAAAl1C,YAAA78C,MAAAC,KAAA8xF,EAAAvuE,gBACAX,WAAAkvE,EAAAlvE,YAGAvoB,KAAAu3F,OAAAtzF,MAAqBw9C,MAAAA,EAAAl/B,UAAAA,IACrBviB,KAAAmyF,UAMAtyF,aACAG,KAAAu3F,UACAv3F,KAAAmyF,UAWAtyF,kBAAA8mB,EAAA4B,EAAAsyB,GACA,MAAAqG,EAAAlhD,KAAA0oD,OAAAxH,MACAvrC,EAAAurC,EAAAvrC,SAGA+hF,KAGA,IAAA,MAAAvwE,KAAAR,EAAA,CACA,MAMAgxE,EANAC,GAAAzwE,EAAA0zB,GAMAvvB,KACAnE,GAAAA,EAAA7J,MAAAtiB,MAAA2a,EAAA0kC,WAIAs9C,GACAD,EAAAzzF,KAAA0zF,GAKAD,EAAAzyF,QACAi8C,EAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAwiE,GAA2ChuE,SAAAnB,MAY3C1oB,MAAAg4F,GACA,MAAA32C,EAAAlhD,KAAA0oD,OAAAxH,MACAvrC,EAAAurC,EAAAvrC,SAGAmiF,EAAA,IAAA9kB,GACAhzE,KAAAw3F,gBAAAplF,IAAA0lF,GAEA,MAAAC,EAAAF,EAAAh9C,OAAAl2C,QACAozF,EAAAh4C,UAIA,IAAA,MAAAi4C,KAAAD,EAIA,GAAAC,EAAAr9C,WAAA/mB,KAAAkkC,GAAAA,EAAAvW,qBAAA,CAGA,MAAA84B,EAAA2d,EAAAthC,YAAAshC,EAAAr9C,WAAA11C,OAGAgzF,EAAAvyF,MAAAC,KAAAgQ,EAAAo6D,QAAAmoB,UAAA7d,IAEA8d,EADAj3C,EAAAk3C,iBAAAJ,EAAAv+B,eAAAw+B,GAAA,GACA5pB,QAGA,IAAA,MAAAt0C,KAAAo+D,EAAA,CAEAp+D,EAAA28B,YAAA/gD,EAAA4/C,QAGAuiC,EAAAtkB,SAAAz5C,GAGA,IAAA,MAAA2gB,KAAA3gB,EAAA4gB,WACAuG,EAAAuyB,eAAA/4B,GAGA/kC,EAAAo6D,QAAAsoB,iBAAAL,EAAAj+D,IAKA,OAAA+9D,GAMA,SAAAF,GAAAzwE,EAAA0zB,GACA,MAAAlB,EAwBA,SAAAhzB,EAAAk0B,GACA,IAAA,MAAA9gB,KAAA8gB,EACA,IAAA,MAAAH,KAAA3gB,EAAA4gB,WAGA,IAAA,IAAAj/C,EAAA,EAAmBA,EAAAirB,EAAA1hB,OAAmBvJ,IAAA,CAEtC,IAAAoD,EAEA,OAAA47C,EAAA5xC,MACA,IAAA,SACAhK,EAAA6nB,EAAAjrB,GAAAw+C,2BACAQ,EAAAz3B,SACAy3B,EAAAhgC,MAAA09B,WACA,GAEA,MAEA,IAAA,OACA,IAAA,SACA,IAAA,WACAt5C,EAAA6nB,EAAAjrB,GAAAw/C,sBACAR,EAAAZ,eACAY,EAAA1nB,eACA0nB,EAAA7/B,SACA,GAOA/b,IACA6nB,EAAAzhB,OAAAxJ,EAAA,KAAAoD,GAGApD,EAAAA,EAAAoD,EAAAmG,OAAA,GAMA,OAAA0hB;;;;GAlEA2xE,EAAAnxE,GAAA0zB,GAKAlB,EAAA7/B,KAAA,CAAA2F,EAAAkF,IAAAlF,EAAAnC,MAAAgJ,SAAA3B,EAAArH,QAAA,EAAA,GAGA,IAAA,IAAA5hB,EAAA,EAAiBA,EAAAi+C,EAAA10C,OAAwBvJ,IAAA,CACzC,MAAA+jB,EAAAk6B,EAAAj+C,EAAA,GACAipB,EAAAg1B,EAAAj+C,GAEA+jB,EAAAgE,IAAAq9B,WAAAn8B,EAAArH,SAEAmC,EAAAgE,IAAAkB,EAAAlB,IACAk2B,EAAAz0C,OAAAxJ,EAAA,GACAA,KAIA,OAAAi+C,QClLA4+C,WAAAjB,GAUAz3F,QAAA4hD,EAAA,MAEA,MAAA+2C,EAAA/2C,EAAAzhD,KAAAu3F,OAAAptB,UAAA1qD,GAAAA,EAAAgiC,OAAAA,GAAAzhD,KAAAu3F,OAAAtyF,OAAA,EAEAqS,EAAAtX,KAAAu3F,OAAAryF,OAAAszF,EAAA,GAAA,GAIAx4F,KAAA0oD,OAAAxH,MAAAyC,cAAA,KACA,MAAAm0C,EAAA93F,KAAAy4F,MAAAnhF,EAAAmqC,OAEA5G,EAAA76C,KAAA0oD,OAAAxH,MAAAvrC,SAAAo6D,QAAAmoB,UAAA5gF,EAAAmqC,MAAAiV,aACA12D,KAAA04F,kBAAAphF,EAAAiL,UAAAoE,OAAArP,EAAAiL,UAAAgG,WAAAsyB,GAEA76C,KAAA+G,KAAA,SAAAuQ,EAAAmqC,MAAAq2C,KAGA93F,KAAAmyF;;;;SC1BAwG,WAAArB,GASAz3F,UACA,MAAAyX,EAAAtX,KAAAu3F,OAAA92F,MAIAT,KAAA0oD,OAAAxH,MAAAyC,cAAA,KACA,MAAAgsB,EAAAr4D,EAAAmqC,MAAA5G,OAAAvjC,EAAAmqC,MAAA5G,OAAA51C,OAAA,GACAo1E,EAAA1K,EAAAjZ,YAAAiZ,EAAAh1B,WAAA11C,OACA41C,EAAA76C,KAAA0oD,OAAAxH,MAAAvrC,SAAAo6D,QAAAmoB,UAAA7d,GAEAr6E,KAAA04F,kBAAAphF,EAAAiL,UAAAoE,OAAArP,EAAAiL,UAAAgG,WAAAsyB,GACA76C,KAAAy4F,MAAAnhF,EAAAmqC,SAGAzhD,KAAAmyF;;;;SCvBAyG,WAAAjJ,GAIA9vF,YAAA6oD,GACAlnD,MAAAknD,GAwBA1oD,KAAA64F,eAAA,IAAAloD,QAMA9wC,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAGA1oD,KAAA84F,aAAA,IAAAP,GAAA7vC,GACA1oD,KAAA+4F,aAAA,IAAAJ,GAAAjwC,GAGAA,EAAA4C,SAAAl5C,IAAA,OAAApS,KAAA84F,cACApwC,EAAA4C,SAAAl5C,IAAA,OAAApS,KAAA+4F,cAEA/4F,KAAAsD,SAAAolD,EAAAxH,MAAA,iBAAA,CAAAtgC,EAAArd,KACA,MAAAm3C,EAAAn3C,EAAA,GAOA,IAAAm3C,EAAA6G,oBACA,OAGA,MAAAE,EAAA/G,EAAA3gB,MAAA0nB,MAGAzhD,KAAA64F,eAAAtwF,IAAAk5C,IAAA,eAAAA,EAAA34C,OAGA9I,KAAA+4F,aAAAvB,gBAAAjvF,IAAAk5C,GAEAzhD,KAAA84F,aAAAE,SAAAv3C,GACKzhD,KAAA84F,aAAAtB,gBAAAjvF,IAAAk5C,KAGLzhD,KAAA84F,aAAAE,SAAAv3C,GACAzhD,KAAA+4F,aAAAE,cAKAj5F,KAAA64F,eAAAzmF,IAAAqvC,MACM/+C,SAAA,YAEN1C,KAAAsD,SAAAtD,KAAA84F,aAAA,SAAA,CAAAl4E,EAAAs4E,EAAApB,KACA93F,KAAA+4F,aAAAC,SAAAlB,KAGApvC,EAAA85B,WAAAn8E,IAAA,SAAA,QACAqiD,EAAA85B,WAAAn8E,IAAA,SAAA,QACAqiD,EAAA85B,WAAAn8E,IAAA,eAAA;;;;SCtFA8yF,WAAArO,GAIAjrF,cACA2B,QAEA,MAAA6gB,EAAAriB,KAAAmrF,aAQAnrF,KAAAqG,IAAA,UAAA,IAUArG,KAAAqG,IAAA,UAAA,aASArG,KAAAqG,IAAA,YAAA,IAEArG,KAAA4rF,aACAziF,IAAA,MACA2+E,GAAA,6BACA9tE,YACAzC,MAAA,UACA6hF,QAAA/2E,EAAAnc,GAAA,cAQArG,SACA2B,MAAA0wB,SAEAlyB,KAAAq5F,oBACAr5F,KAAAs5F,kBAIAt5F,KAAA2gB,GAAA,iBAAA,KACA3gB,KAAAq5F,oBACAr5F,KAAAs5F,oBAGAt5F,KAAA2gB,GAAA,mBAAA,KACA3gB,KAAAs5F,oBASAz5F,oBACA,GAAAG,KAAA4gF,QAAA,CACA,MACA2Y,GADA,IAAA7V,WAAAK,gBAAA/jF,KAAA4gF,QAAArlE,OAAA,iBACAi+E,cAAA,OACAJ,EAAAG,EAAAvhF,aAAA,WAQA,IANAohF,IACAp5F,KAAAo5F,QAAAA,GAGAp5F,KAAAwX,QAAA2rE,UAAA,GAEAoW,EAAA3+D,WAAA31B,OAAA,GACAjF,KAAAwX,QAAAmnB,YAAA46D,EAAA3+D,WAAA,KAUA/6B,kBACAG,KAAAy5F,WACAz5F,KAAAwX,QAAAkiF,iBAAA,kBAAA54F,QAAAkB,IACAA,EAAAsW,MAAA4xD,KAAAlqE,KAAAy5F;;;;SCpGAE,WAAA7O,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAQAriF,KAAAqG,IAAA,OAAA,IAqBArG,KAAAqG,IAAA,WAAA,KAEA,MAAAgc,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,OACA6Q,YACAzC,OACA,aACA8K,EAAAnc,GAAA,WAAA+c,GAAA,cAAAA,GACAZ,EAAA6kE,GAAA,OAAA,YAAAxqF,IAAAA,EAAA6e,UAGAld,WAEA8K,IAAA,OAEA6Q,YACAzC,OACA,qBAIAlZ,WAEA6tC,KAAA7pB,EAAAnc,GAAA;;;;SCzCA0zF,WAAA9O,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aAGAnrF,KAAAqG,IAAA,QACArG,KAAAqG,IAAA,aAAA,GACArG,KAAAqG,IAAA,QAAA,GACArG,KAAAqG,IAAA,aAAA,GACArG,KAAAqG,IAAA,aACArG,KAAAqG,IAAA,SACArG,KAAAqG,IAAA,YAAA,GACArG,KAAAqG,IAAA,WACArG,KAAAqG,IAAA,kBAAA,KACArG,KAAAqG,IAAA,OAAA,UACArG,KAAAqG,IAAA,YAAA,GAQArG,KAAA3B,SAAA2B,KAAAirF,mBAQAjrF,KAAA65F,YAAA75F,KAAA85F,qBAQA95F,KAAA+5F,UAAA/5F,KAAAg6F,mBASAh6F,KAAAi6F,SAAA,IAAAd,GAEAn5F,KAAAi6F,SAAA5N,gBACAryE,YACAzC,MAAA,qBAaAvX,KAAAqiB,KAAA,kBAAAnc,GACAlG,KAAA,UACAA,KAAA,QACAA,KAAA,YACAA,KAAAk6F,kBAAA73E,KAAAriB,OAGAA,KAAA4rF,aACAziF,IAAA,SAEA6Q,YACAzC,OACA,YACA8K,EAAAnc,GAAA,YAAAxJ,GAAAA,EAAA,aAAA,eACA2lB,EAAA6kE,GAAA,YAAA,YAAAxqF,IAAAA,GACA2lB,EAAAnc,GAAA,OAAAxJ,GAAAA,EAAA,QAAA,UACA2lB,EAAA6kE,GAAA,WAAA,wBAEAp+E,KAAAuZ,EAAAnc,GAAA,OAAAxJ,GAAAA,GAAA,UACAy9F,SAAA93E,EAAAnc,GAAA,aAGA7H,SAAA2B,KAAA3B,SAEAsiB,IACA8tE,UAAApsE,EAAAnc,GAAA0a,IACAA,EAAA2sB,mBAGA6sD,MAAA/3E,EAAAnc,GAAA0a,IAGA5gB,KAAAymC,UACAzmC,KAAA+G,KAAA,WAIA6Z,EAAA2sB,sBAUA1tC,SACA2B,MAAA0wB,SAEAlyB,KAAAq6F,OACAr6F,KAAAi6F,SAAA53E,KAAA,WAAAnc,GAAAlG,KAAA,QACAA,KAAA3B,SAAA+T,IAAApS,KAAAi6F,WAGAj6F,KAAA3B,SAAA+T,IAAApS,KAAA65F,aACA75F,KAAA3B,SAAA+T,IAAApS,KAAA+5F,WAMAl6F,QACAG,KAAAwX,QAAA6Q,QAUAxoB,qBACA,MAAAg6F,EAAA,IAAAF,GAKA,OAHAE,EAAAx3E,KAAA,QAAAnc,GAAAlG,KAAA,kBACA65F,EAAAx3E,KAAA,YAAAnc,GAAAlG,KAAA,mBAEA65F,EASAh6F,mBACA,MAAAk6F,EAAA,IAAAjP,GAgBA,OAdAiP,EAAAnO,aACAziF,IAAA,OAEA6Q,YACAzC,OAAA,qBAGAlZ,WAEA6tC,KAAAlsC,KAAAmrF,aAAAjlF,GAAA,aAKA6zF,EAeAl6F,kBAAAy6F,EAAA7wE,EAAA+F,GACA,OAAA8qE,EACA,iBAAAA,EACAA,GAEA9qE,IACAA,EnT3HA,SAAAA,GACA,OAAAlC,GAAAC,MAIAkC,GAAAD,GAEAvkB,IAAAlK,GAAAgtB,GAAAhtB,EAAA2sB,gBAAA3sB,GAGAurB,OAAA,CAAA5vB,EAAAqE,IACArE,EAAAiI,OAAA,KAAAgpB,GACAjxB,EAAAqE,EAEArE,EAAA,IAAAqE,GAZAyuB,EmTyHA+qE,CAAA/qE,IAGA8qE,aAAAt8F,SACAs8F,EAAA7wE,EAAA+F,MAEe/F,IAAU+F,OAAkBA,KAAY,MAKvD;;;;;MC/NAgrE,WAAA7K,GAIA9vF,OACA,MACAosD,EADAjsD,KAAA0oD,OACAuD,EAEAjsD,KAAAy6F,WAAA,OAAAxuC,EAAA,QAAA,SAAAyuC,GAAAj7E,GACAzf,KAAAy6F,WAAA,OAAAxuC,EAAA,QAAA,SAAA0uC,GAAAl7E,GAYA5f,WAAA5D,EAAAwtB,EAAA+F,EAAAorE,GACA,MAAAlyC,EAAA1oD,KAAA0oD,OAEAA,EAAAumC,GAAAtK,iBAAAvyE,IAAAnW,EAAAomF,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAAP,GACAm0B,EAAA,IAAAwpE,GAAAvX,GAaA,OAXAjyD,EAAA/pB,KACAojB,MAAAA,EACA4wE,KAAAO,EACAprE,UAAAA,EACA8qE,SAAA,IAGAlqE,EAAA/N,KAAA,aAAAnc,GAAAklD,EAAA,aAEAprD,KAAAsD,SAAA8sB,EAAA,UAAA,IAAAs4B,EAAA2C,QAAApvD,IAEAm0B;;;;SC4CAyqE,WAAAlL,GAIAxlC,sBACA,OAAAyuC,GAAA4B,IAMAxxC,wBACA,MAAA;;;;;;;;;MClGA8xC,GAIAj7F,cACA,MAAAk7F,EAAA,IAAAz/F,OAAA0/F,WAQAh7F,KAAAi7F,QAAAF,EASA/6F,KAAAqG,IAAA,SAAA,GAEA00F,EAAAG,WAAAt6E,CAAAA,IACA5gB,KAAAqpD,OAAAzoC,EAAAyoC,SASA5nD,YACA,OAAAzB,KAAAi7F,QAAAx5F,MAUA5B,KAAAs7F,GACA,MAAAJ,EAAA/6F,KAAAi7F,QAGA,OAFAj7F,KAAAo7F,MAAAD,EAAAxpF,KAEA,IAAAm4C,QAAA,CAAAv5C,EAAAw5C,KACAgxC,EAAAM,OAAA,MACA9qF,EAAAwqF,EAAAj8F,UAGAi8F,EAAAO,QAAA,MACAvxC,EAAA,WAGAgxC,EAAAQ,QAAA,MACAxxC,EAAA,aAGA/pD,KAAAi7F,QAAAO,cAAAL,KAOAt7F,QACAG,KAAAi7F,QAAAQ,SAIAz0F,EAAA8zF,GAAAj6E;;;;;MCvDA66E,WAAA/L,GAIA3mC,wBACA,MAAA,iBAMAnpD,OAMAG,KAAA27F,QAAA,IAAArxE,GAqBAtqB,KAAAqG,IAAA,WAAA,GAaArG,KAAAqG,IAAA,cAAA,MASArG,KAAAqiB,KAAA,mBAAAnc,GAAAlG,KAAA,WAAAA,KAAA,cAAA,CAAA47F,EAAAR,IACAA,EAAAQ,EAAAR,EAAA,IAAA,GAYAv7F,UAAAs7F,GACA,IAAA,MAAAU,KAAA77F,KAAA27F,QACA,GAAAE,EAAAV,MAAAA,EACA,OAAAU,EAIA,OAAA,KAWAh8F,aAAAs7F,GACA,IAAAn7F,KAAA87F,oBAiCA,OAFA1rD,GAAA3uC,MAAA,oEAEA,KAGA,MAAAo6F,EAAA,IAAAE,GAAAZ,GA2BA,OA1BAU,EAAAG,SAAAh8F,KAAA87F,oBAAAD,GAEA77F,KAAA27F,QAAAvpF,IAAAypF,GAEAA,EAAAl7E,GAAA,kBAAA,KACA,IAAAs7E,EAAA,EAEA,IAAA,MAAAJ,KAAA77F,KAAA27F,QACAM,GAAAJ,EAAAD,SAGA57F,KAAA47F,SAAAK,IAGAJ,EAAAl7E,GAAA,qBAAA,KACA,IAAAu7E,EAAA,EAEA,IAAA,MAAAL,KAAA77F,KAAA27F,QACAE,EAAAM,cACAD,GAAAL,EAAAM,aAIAn8F,KAAAm8F,YAAAD,IAGAL,EASAh8F,cAAAu8F,GACA,MAAAP,EAAAO,aAAAL,GAAAK,EAAAp8F,KAAAq8F,UAAAD,GAEAP,EAAAS,WAEAt8F,KAAA27F,QAAAlwE,OAAAowE,IAIA70F,EAAA00F,GAAA76E,UAMAk7E,GAOAl8F,YAAAs7F,EAAAoB,GAOAv8F,KAAAwG,GAAArE,IAQAnC,KAAAm7F,KAAAA,EAQAn7F,KAAAg8F,SAAAO,EAQAv8F,KAAAi7F,QAAA,IAAAH,GA2BA96F,KAAAqG,IAAA,SAAA,QASArG,KAAAqG,IAAA,WAAA,GASArG,KAAAqG,IAAA,cAAA,MASArG,KAAAqiB,KAAA,mBAAAnc,GAAAlG,KAAA,WAAAA,KAAA,cAAA,CAAA47F,EAAAR,IACAA,EAAAQ,EAAAR,EAAA,IAAA,GAUAp7F,KAAAqG,IAAA,iBAAA,MAwBAxG,OACA,GAAA,QAAAG,KAAAw8F,OACA,MAAA,IAAAv7F,EAAA,gGAKA,OAFAjB,KAAAw8F,OAAA,UAEAx8F,KAAAi7F,QAAAwB,KAAAz8F,KAAAm7F,MACAjxC,KAAA9oD,IACApB,KAAAw8F,OAAA,OAEAp7F,IAEAspD,MAAAC,IACA,GAAA,YAAAA,EAEA,MADA3qD,KAAAw8F,OAAA,UACA,UAIA,MADAx8F,KAAAw8F,OAAA,QACAx8F,KAAAi7F,QAAAx5F,QAwBA5B,SACA,GAAA,QAAAG,KAAAw8F,OACA,MAAA,IAAAv7F,EAAA,oGAKA,OAFAjB,KAAAw8F,OAAA,YAEAx8F,KAAAg8F,SAAAU,SACAxyC,KAAA9oD,IACApB,KAAA28F,eAAAv7F,EACApB,KAAAw8F,OAAA,OAEAp7F,IAEAspD,MAAAC,IACA,GAAA,YAAA3qD,KAAAw8F,OACA,KAAA,UAIA,MADAx8F,KAAAw8F,OAAA,QACA7xC,IAOA9qD,QACA,MAAA28F,EAAAx8F,KAAAw8F,OACAx8F,KAAAw8F,OAAA,UAEA,WAAAA,GACAx8F,KAAAi7F,QAAAQ,QAGA,aAAAe,GAAAx8F,KAAAg8F,SAAAP,OACAz7F,KAAAg8F,SAAAP,QAGAz7F,KAAAs8F,WAQAz8F,WACAG,KAAAi7F,aAAA19F,EACAyC,KAAAg8F,cAAAz+F,EACAyC,KAAAoB,UAAA7D,EACAyC,KAAA28F,oBAAAp/F,EACAyC,KAAAm7F,UAAA59F,GAIAyJ,EAAA+0F,GAAAl7E;;;;;AC/aA,MAAA+7E,GAAA,cACAC,GAAA,GACAC,GAAA,uCASA,SAAAC,KACA,IAAAC,EAgBA,SAAA/gG,GACAA,EAAAA,EAAAyxB,cACA,MAAAntB,EAAAoV,SAAAsnF,OAAAz8F,MAAA,KAEA,IAAA,MAAAE,KAAAH,EAAA,CACA,MAAA+Q,EAAA5Q,EAAAF,MAAA,KACAO,EAAAm8F,mBAAA5rF,EAAA,GAAAiK,OAAAmS,eAEA,GAAA3sB,IAAA9E,EACA,OAAAihG,mBAAA5rF,EAAA,IAIA,OAAA,KA7BA6rF,CAAAP,IAsCA,IAAA3gG,EAAAS,EA/BA,OALAsgG,GAAAA,EAAA/3F,QAAA43F,KACAG,EA4CA,SAAA/3F,GACA,IAAAnG,EAAA,GACA,MAAAs+F,EAAA,IAAAtsF,WAAA7L,GAEA3J,OAAA+hG,OAAAC,gBAAAF,GAEA,IAAA,IAAAriD,EAAA,EAAiBA,EAAAqiD,EAAAn4F,OAAuB81C,IAAA,CACxC,MAAAw/B,EAAAuiB,GAAA1hF,OAAAgiF,EAAAriD,GAAA+hD,GAAA73F,QACAnG,GAAAuD,KAAAE,SAAA,GAAAg4E,EAAAgjB,cAAAhjB,EAGA,OAAAz7E;;;;GAvDA0+F,CAAAX,IAmCA5gG,EAlCA2gG,GAkCAlgG,EAlCAsgG,EAmCArnF,SAAAsnF,OAAAQ,mBAAAxhG,GAAA,IAAAwhG,mBAAA/gG,GAAA,WAhCAsgG,QC6BAU,GAQA79F,YAAAg8F,EAAA8B,EAAA1xC,GAMAjsD,KAAA67F,OAAAA,EAOA77F,KAAA29F,IAAAA,EAOA39F,KAAAisD,EAAAA,EASApsD,SACA,OAAA,IAAAiqD,QAAA,CAAAv5C,EAAAw5C,KACA/pD,KAAA49F,eACA59F,KAAA69F,eAAAttF,EAAAw5C,GACA/pD,KAAA89F,iBAUAj+F,QACAG,KAAA+9F,KACA/9F,KAAA+9F,IAAAtC,QASA57F,eACA,MAAAk+F,EAAA/9F,KAAA+9F,IAAA,IAAAC,eAEAD,EAAAE,KAAA,OAAAj+F,KAAA29F,KAAA,GACAI,EAAAG,aAAA,OAUAr+F,eAAA0Q,EAAAw5C,GACA,MAAAg0C,EAAA/9F,KAAA+9F,IACAlC,EAAA77F,KAAA67F,OAEAsC,GAAAlyC,EADAjsD,KAAAisD,GACA,2BAAwD4vC,EAAAV,KAAAl/F,QAExD8hG,EAAA33D,iBAAA,QAAA,IAAA2jB,EAAAo0C,IACAJ,EAAA33D,iBAAA,QAAA,IAAA2jB,KACAg0C,EAAA33D,iBAAA,OAAA,KACA,MAAAg4D,EAAAL,EAAAK,SAEA,IAAAA,IAAAA,EAAAxC,SACA,OAAA7xC,EAAAq0C,GAAAA,EAAA38F,OAAA28F,EAAA38F,MAAAN,QAAAi9F,EAAA38F,MAAAN,QAAAg9F,GAGA5tF,GACA8tF,QAAAD,EAAAT,QAMAI,EAAArB,QACAqB,EAAArB,OAAAt2D,iBAAA,WAAAxlB,IACAA,EAAA09E,mBACAzC,EAAAM,YAAAv7E,EAAAw6E,MACAS,EAAAD,SAAAh7E,EAAAyoC,UAWAxpD,eAEA,MAAAuB,EAAA,IAAAm9F,SACAn9F,EAAAoxD,OAAA,SAAAxyD,KAAA67F,OAAAV,MACA/5F,EAAAoxD,OAAA,cAAAuqC,MAGA/8F,KAAA+9F,IAAAS,KAAAp9F;;;;SC7JAq9F,GA6BA5+F,YAAA6oD,EAAAtxC,EAAAsnF,GACA,IAAAt7F,EAEA,GAAA,mBAAAs7F,EACAt7F,EAAAs7F,MACG,CAEH,MAAAtzC,EAAAszC,EAEAt7F,EAAA,MACAslD,EAAA2C,QAAAD,KAIA1C,EAAAxH,MAAAvrC,SAAAgL,GAAA,SAAA,KACA,MAAA62D,EAAA9xE,MAAAC,KAAA+iD,EAAAxH,MAAAvrC,SAAA2oC,OAAAC,cACAj2C,EAAAkvE,EAAA,GAGA,GAAA,GAAAA,EAAAvyE,QAAA,WAAAqD,EAAAQ,MAAA,SAAAR,EAAArM,MAAA,GAAAqM,EAAArD,OACA,OAEA,MAAAqS,EAAAhP,EAAA2a,SAAAtM,UAAArO,EAAA2a,SAAA6B,UAEA,IAAAxN,EAAAjC,OAAAwG,GAAA,aACA,OAGA,MAAAla,EAAAyV,EAAAnF,KAAAqF,EAAAlW,MAEAO,GAKA+mD,EAAAxH,MAAAyC,cAAAh3B,IAEA,MAAAxF,EAAAmzB,GAAAjzB,4BAAA/P,EAAAjC,OAAA,EAAAiC,EAAAjC,OAAA1T,EAAA,GAAAsD,QAGA0nB,EAAAlB,OAAAtE,GAEA/jB,GAAezB,MAAAA;;;;SCvEfg9F,GA8CA9+F,YAAA6oD,EAAAk2C,EAAAC,GACA,IAAAC,EACAngD,EACAogD,EACAC,EAqHA,IAAAxnF,EAnHAonF,aAAAh1F,OACAk1F,EAAAF,EAEAG,EAAAH,EAGA,iBAAAC,EACAlgD,EAAAkgD,EAEAG,EAAAH,EAIAE,EAAAA,GAAA,CAAA7yD,IACA,IAAAptC,EACA,MAAA2sB,KACAwzE,KAEA,KAAA,QAAAngG,EAAAggG,EAAA7sF,KAAAi6B,OAEAptC,GAAAA,EAAAmG,OAAA,IAFA,CAMA,IAAA+C,MACAA,EACAk3F,EAAAC,EACAC,EAAAxe,EACAye,EAAAC,GACKxgG,EAGL,MAAAkqB,EAAAm2E,EAAAve,EAAA0e,EAIAC,GAHAv3F,GAAAlJ,EAAA,GAAAmG,OAAA+jB,EAAA/jB,OAKA+C,EAAAm3F,EAAAl6F,QAEAu6F,GACAx3F,EAAAm3F,EAAAl6F,OAAA27E,EAAA37E,OACA+C,EAAAm3F,EAAAl6F,OAAA27E,EAAA37E,OAAAq6F,EAAAr6F,QAGAwmB,EAAAxnB,KAAAs7F,GACA9zE,EAAAxnB,KAAAu7F,GAEAP,EAAAh7F,MAAA+D,EAAAm3F,EAAAl6F,OAAA+C,EAAAm3F,EAAAl6F,OAAA27E,EAAA37E,SAGA,OACAwmB,OAAAA,EACAwzE,OAAAA,KAKAD,EAAAA,GAAA,EAAAryE,EAAAgiC,KACA,IAAA,MAAAxnC,KAAAwnC,EACAhiC,EAAAuD,aAAAyuB,GAAA,EAAAx3B,GAKAwF,EAAA+oC,yBAAA/W,KAGA+J,EAAAxH,MAAAvrC,SAAAgL,GAAA,SAAA,KACA,MAAA4B,EAAAmmC,EAAAxH,MAAAvrC,SAAA4M,UAGA,IAAAA,EAAAuD,YACA,OAGA,MAAA0xD,EAAA9xE,MAAAC,KAAA+iD,EAAAxH,MAAAvrC,SAAA2oC,OAAAC,cACAj2C,EAAAkvE,EAAA,GAGA,GAAA,GAAAA,EAAAvyE,QAAA,WAAAqD,EAAAQ,MAAA,SAAAR,EAAArM,MAAA,GAAAqM,EAAArD,OACA,OAGA,MAAAo8C,EAAA9+B,EAAA8F,MAAAhT,OACA62B,GA8BA10B,EA9BA6pC,EA+BA37C,MAAAC,KAAA6R,EAAA4C,eAAAkS,OAAA,CAAA7M,EAAAkF,IAAAlF,EAAAkF,EAAAvjB,KAAA,KA/BAuD,MAAA,EAAA4d,EAAA8F,MAAA/Y,QACAmwF,EAAAV,EAAA7yD,GACAwzD,EAAAC,GAAAt+C,EAAAo+C,EAAAR,QACAW,EAAAD,GAAAt+C,EAAAo+C,EAAAh0E,QAEAi0E,EAAAz6F,QAAA26F,EAAA36F,QAKAyjD,EAAAxH,MAAAyC,cAAAh3B,IACA,MAAAgiC,EAAAjG,EAAAxH,MAAAC,OAAA0+C,eAAAH,EAAA/gD,GAGAqgD,EAAAryE,EAAAgiC,GAGA,IAAA,MAAAxnC,KAAAy4E,EAAA7/C,UACApzB,EAAAlB,OAAAtE,QAsBA,SAAAw4E,GAAAt+C,EAAA+hB,GACA,OAAAA,EACA73C,OAAA1jB,QAAAtK,IAAAsK,EAAA,SAAAtK,IAAAsK,EAAA,IACAoD,IAAApD,GAAAyyC,GAAAjzB,4BAAAg6B,EAAAx5C,EAAA,GAAAw5C,EAAAx5C,EAAA;;;;;;;;;MCnLAi4F,WAAA7N,GAKApyF,YAAA6oD,EAAA/J,GACAn9C,MAAAknD,GAQA1oD,KAAA2+C,aAAAA,EAmBA9+C,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SAEA3V,KAAAtD,MAAA6iC,EAAAhd,UAAAxK,aAAA/X,KAAA2+C,cACA3+C,KAAAymC,UAAAya,EAAAC,OAAA4+C,0BAAAxgE,EAAAhd,UAAAviB,KAAA2+C,cAuBA9+C,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MAEA3+B,EADA2+B,EAAAvrC,SACA4M,UACA7lB,OAAAa,IAAA8F,EAAA28F,YAAAhgG,KAAAtD,MAAA2G,EAAA28F,WAEA9+C,EAAA3J,OAAA5qB,IACA,GAAApK,EAAAuD,YACAppB,EACAiwB,EAAAszE,sBAAAjgG,KAAA2+C,cAAA,GAEAhyB,EAAA+oC,yBAAA11D,KAAA2+C,kBAEI,CACJ,MAAAh4B,EAAAu6B,EAAAC,OAAA0+C,eAAAt9E,EAAA2G,YAAAlpB,KAAA2+C,cAEA,IAAA,MAAAx3B,KAAAR,EACAjqB,EACAiwB,EAAAuD,aAAAlwB,KAAA2+C,aAAAjiD,EAAAyqB,GAEAwF,EAAA0K,gBAAAr3B,KAAA2+C,aAAAx3B;;;;GC5FA,MAAA+4E,GAAA,aAUAC,WAAAxQ,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAEAA,EAAAxH,MAAAC,OAAA1vB,OAAA,SAAwCy8B,gBAAAgyC,KAIxCx3C,EAAA65B,WAAA6d,oBACAl/C,MAAAg/C,GACA9vE,KAAA,SACAmmC,YACA,KAEAj+C,OACA+nF,cAAA,YAOA33C,EAAA4C,SAAAl5C,IAAA8tF,GAAA,IAAAJ,GAAAp3C,EAAAw3C,KAGAx3C,EAAA85B,WAAAn8E,IAAA,SAAA65F;;;;;ACpCA,MAAAI,GAAA,aAOAC,WAAA5Q,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAGAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAAkuF,GAAAje,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA8jG,IACAlwE,EAAA,IAAAwpE,GAAAvX,GAcA,OAZAjyD,EAAA/pB,KACAojB,MAAAwiC,EAAA,QACAouC,KAAAmG,GAAA/gF,EACA+P,UAAA,SACA8qE,SAAA,IAGAlqE,EAAA/N,KAAA,OAAA,aAAAnc,GAAAklD,EAAA,QAAA,aAGAprD,KAAAsD,SAAA8sB,EAAA,UAAA,IAAAs4B,EAAA2C,QAAAi1C,KAEAlwE;;;;;;;;;AClCA,MAAAqwE,GAAA,eAUAC,WAAA/Q,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAGAA,EAAAxH,MAAAC,OAAA1vB,OAAA,SAAwCy8B,gBAAAuyC,KAExC/3C,EAAA65B,WAAA6d,oBACAl/C,MAAAu/C,GACArwE,KAAA,IACAmmC,YACA,MAEAj+C,OACAqoF,aAAA,cAOAj4C,EAAA4C,SAAAl5C,IAAAquF,GAAA,IAAAX,GAAAp3C,EAAA+3C,KAGA/3C,EAAA85B,WAAAn8E,IAAA,SAAAo6F;;;;;ACnCA,MAAAG,GAAA,eAOAC,WAAAlR,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAGAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAAwuF,GAAAve,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAAokG,IACAxwE,EAAA,IAAAwpE,GAAAvX,GAcA,OAZAjyD,EAAA/pB,KACAojB,MAAAwiC,EAAA,UACAouC,KAAAyG,GAAArhF,EACA+P,UAAA,SACA8qE,SAAA,IAGAlqE,EAAA/N,KAAA,OAAA,aAAAnc,GAAAklD,EAAA,QAAA,aAGAprD,KAAAsD,SAAA8sB,EAAA,UAAA,IAAAs4B,EAAA2C,QAAAu1C,KAEAxwE;;;;;;;;;AC/BA,SAAA2wE,GAAAC,GACA,MAAAC,EAAAD,EAAA/iF,OAEA,OAAAgjF,EAAA/iF,KACA,KAGA+iF,EAAAvkG;;;;SCDAwkG,WAAAjP,GAYApyF,UACAG,KAAAtD,MAAAsD,KAAAmhG,YACAnhG,KAAAymC,UAAAzmC,KAAAohG,gBAUAvhG,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SACAwrC,EAAAD,EAAAC,OACAkgD,EAAA37F,MAAAC,KAAA45B,EAAAhd,UAAAkgC,qBAEAvB,EAAA3J,OAAA5qB,IACA,GAAA3sB,KAAAtD,MACAsD,KAAAshG,aAAA30E,EAAA00E,EAAA91E,OAAAg2E,SACI,CACJ,MAAAC,EAAAH,EAAA91E,OAAA81B,GAGAkgD,GAAAlgD,IAAAogD,GAAAtgD,EAAAE,IAGArhD,KAAA0hG,YAAA/0E,EAAA60E,MAWA3hG,YACA,MAAA8hG,EAAAZ,GAAA/gG,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAkgC,qBAGA,SAAAk/C,IAAAJ,GAAAI,IASA9hG,gBACA,GAAAG,KAAAtD,MACA,OAAA,EAGA,MAAA6lB,EAAAviB,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UACA4+B,EAAAnhD,KAAA0oD,OAAAxH,MAAAC,OAEAwgD,EAAAZ,GAAAx+E,EAAAkgC,qBAEA,QAAAk/C,GAIAF,GAAAtgD,EAAAwgD,GAcA9hG,aAAA8sB,EAAA00E,GAEAO,GAAAP,GAAAthD,UAAAj/C,QAAA+gG,IACA,GAAAA,EAAAvkF,MAAA+G,WAAAw9E,EAAAp+E,IAAAM,QAGA,YAFA4I,EAAAq5B,OAAA67C,EAAAvkF,MAAAjI,QAMA,GAAAwsF,EAAAvkF,MAAA+G,UAAA,CACA,MAAAiwD,EAAAr7B,GAAA30B,aAAAu9E,EAAAvkF,MAAAjI,QAIA,YAFAsX,EAAAsG,KAAA4uE,EAAAvtB,GAOAutB,EAAAp+E,IAAAM,SACA4I,EAAAnsB,MAAAqhG,EAAAp+E,KAKA,MAAA4wD,EAAAp7B,GAAAj1B,YAAA69E,EAAAp+E,IAAApO,QAEAsX,EAAAsG,KAAA4uE,EAAAxtB,KAWAx0E,YAAA8sB,EAAA00E,GACA,MAAAS,KAGAF,GAAAP,GAAAthD,UAAAj/C,QAAA+gG,IACA,IAAA5hC,EAAAshC,GAAAM,EAAAvkF,OAEA2iD,IACAA,EAAA,IAAAxnB,GAAA,cAEA9rB,EAAAmK,KAAA+qE,EAAA5hC,IAGA6hC,EAAA79F,KAAAg8D,KAOA6hC,EAAA/hD,UAAAzzB,OAAA,CAAAy1E,EAAAC,IACAD,EAAAvsF,aAAAwsF,GACAr1E,EAAA8wD,MAAAxkC,GAAAj1B,YAAA+9E,IAEAA,GAGAC,IAKA,SAAAT,GAAAU,GACA,MAAA,cAAAA,EAAA5sF,OAAApZ,KAAAgmG,EAAA5sF,OAAA,KAWA,SAAAusF,GAAAP,GACA,IAAAt+E,EACArnB,EAAA,EACA,MAAAirB,KAEA,KAAAjrB,EAAA2lG,EAAAp8F,QAAA,CACA,MAAAo8C,EAAAggD,EAAA3lG,GACAwmG,EAAAb,EAAA3lG,EAAA,GAEAqnB,IACAA,EAAAk2B,GAAA30B,aAAA+8B,IAGA6gD,GAAA7gD,EAAA7rC,aAAA0sF,IACAv7E,EAAA1iB,KAAA,IAAAq2C,GAAAv3B,EAAAk2B,GAAAj1B,YAAAq9B,KACAt+B,EAAA,MAGArnB,IAGA,OAAAirB,EAIA,SAAA86E,GAAAtgD,EAAAE,GAEA,MAAA8gD,EAAAhhD,EAAAmN,WAAAjN,EAAAhsC,OAAA,cACA+sF,EAAAjhD,EAAAmN,YAAA,QAAA,cAAAjN,GAEA,OAAA8gD,GAAAC;;;;SC/MAC,WAAA1S,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAvH,EAAAuH,EAAAxH,MAAAC,OAEAuH,EAAA4C,SAAAl5C,IAAA,aAAA,IAAA8uF,GAAAx4C,IAEAvH,EAAAuY,SAAA,cACAlJ,WAAA,SACAD,eAAA,UAIApP,EAAAmhD,cAAA,CAAAj3E,EAAAkjC,KACA,GAAAljC,EAAA+kC,SAAA,eAAA,cAAA7B,EAAAtyD,KACA,OAAA,IAIAysD,EAAA65B,WAAAggB,kBAAuCrhD,MAAA,aAAA9wB,KAAA,eAMvCvwB,YACA,MACAurD,EADAprD,KAAA0oD,OACA4C,SAAA9uD,IAAA,cAOAwD,KAAAsD,SAAAtD,KAAA0oD,OAAA45B,QAAAlyD,KAAAza,SAAA,QAAA,CAAAiL,EAAAxf,KACA,MAAAm+B,EAAAv/B,KAAA0oD,OAAAxH,MAAAvrC,SACAwd,EAAAoM,EAAAhd,UAAA2tB,kBAAA76B,OAEAkqB,EAAAhd,UAAAuD,aAAAqN,EAAA3Z,SAAA4xC,EAAA1uD,QACAsD,KAAA0oD,OAAA2C,QAAA,cACArrD,KAAA0oD,OAAA45B,QAAAlyD,KAAAuhE,uBAEAvwF,EAAAmsC,iBACA3sB,EAAA3e;;;;;MC3CAugG,WAAA7S,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAEAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,aAAAiwE,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA,cACAimG,EAAA,IAAA7I,GAAAvX,GAcA,OAZAogB,EAAAp8F,KACAojB,MAAAwiC,EAAA,eACAouC,KAAAqI,GAAAjjF,EACA66E,SAAA,IAIAmI,EAAApgF,KAAA,OAAA,aAAAnc,GAAAklD,EAAA,QAAA,aAGAprD,KAAAsD,SAAAm/F,EAAA,UAAA,IAAA/5C,EAAA2C,QAAA,eAEAo3C;;;;;;;;;AClCA,MAAAE,GAAA,6BAKAC,GAQA/iG,YAAAgjG,EAAA7F,EAAA8F,GACA,IAAAD,EACA,MAAA,IAAA3hG,MAAA,yBAGA,IAAA87F,EACA,MAAA,IAAA97F,MAAA,0BAGA,IAAA4hG,EACA,MAAA,IAAA5hG,MAAA,gCAQAlB,KAAAm7F,KA4MA,SAAAjwF,GACA,GAAA,iBAAAA,EACA,OAAA,EAGA,MAAAvJ,EAAAuJ,EAAAvJ,MAAAghG,IACA,SAAAhhG,IAAAA,EAAAsD,QAlNA89F,CAAAF,GA6KA,SAAAG,EAAAC,EAAA,KACA,IACA,MAAAC,EAAAF,EAAArhG,MAAAghG,IAAA,GACAQ,EAAAC,KAAAJ,EAAAn5F,QAAA84F,GAAA,KAEAU,KAEA,IAAA,IAAA/zF,EAAA,EAAuBA,EAAA6zF,EAAAl+F,OAA4BqK,GAAA2zF,EAAA,CACnD,MAAAt+F,EAAAw+F,EAAAx+F,MAAA2K,EAAAA,EAAA2zF,GACAK,EAAA,IAAA59F,MAAAf,EAAAM,QAEA,IAAA,IAAAvJ,EAAA,EAAmBA,EAAAiJ,EAAAM,OAAkBvJ,IACrC4nG,EAAA5nG,GAAAiJ,EAAA4+F,WAAA7nG,GAGA2nG,EAAAp/F,KAAA,IAAA6M,WAAAwyF,IAGA,OAAA,IAAAE,KAAAH,GAAgCv6F,KAAAo6F,IAC9B,MAAAzhG,GACF,MAAA,IAAAP,MAAA,6CAjMAuiG,CAAAZ,GAAAA,EAQA7iG,KAAA0jG,OAAA1G,EAQAh9F,KAAA2jG,YAAAb,EAUAjjG,WAAAuD,GAGA,OAFApD,KAAA2gB,GAAA,WAAA,CAAAxd,EAAA/B,IAAAgC,EAAAhC,IAEApB,KAUAH,QAAAuD,GAGA,OAFApD,KAAA4yF,KAAA,QAAA,CAAAzvF,EAAA/B,IAAAgC,EAAAhC,IAEApB,KAMAH,QACAG,KAAA+9F,IAAAtC,QASA57F,OAIA,OAHAG,KAAA4jG,kBACA5jG,KAAA6jG,sBAEA7jG,KAAA89F,eAQAj+F,kBACA,MAAAk+F,EAAA,IAAAC,eAEAD,EAAAE,KAAA,OAAAj+F,KAAA2jG,aACA5F,EAAA+F,iBAAA,gBAAA9jG,KAAA0jG,OAAAhnG,OACAqhG,EAAAG,aAAA,OAEAl+F,KAAA+9F,IAAAA,EAQAl+F,sBACA,MAAAspD,EAAAnpD,KACA+9F,EAAA/9F,KAAA+9F,IA0BA,SAAAgG,EAAA5iG,GACA,MAAA,IAAAgoD,EAAApiD,KAAA,QAAA5F,GAzBA48F,EAAA33D,iBAAA,QAAA29D,EAAA,kBACAhG,EAAA33D,iBAAA,QAAA29D,EAAA,UAGAhG,EAAArB,QACAqB,EAAArB,OAAAt2D,iBAAA,WAAAjjC,IACAA,EAAAm7F,kBACAt+F,KAAA+G,KAAA,YACAq0F,MAAAj4F,EAAAi4F,MACAQ,SAAAz4F,EAAAkmD,WAMA00C,EAAA33D,iBAAA,OAAA,KACA,MAAA49D,EAAAjG,EAAAvB,OACAyH,EAAAlG,EAAAK,SAEA,GAAA4F,EAAA,KAAAA,EAAA,IACA,OAAAhkG,KAAA+G,KAAA,QAAAk9F,EAAA9iG,SAAA8iG,EAAAxiG,SAcA5B,eACA,MAAAqkG,EAAA,IAAA3F,SACAR,EAAA/9F,KAAA+9F,IAIA,OAFAmG,EAAA1xC,OAAA,OAAAxyD,KAAAm7F,MAEA,IAAArxC,QAAA,CAAAv5C,EAAAw5C,KACAg0C,EAAA33D,iBAAA,OAAA,KACA,MAAA49D,EAAAjG,EAAAvB,OACAyH,EAAAlG,EAAAK,SAEA,OAAA4F,EAAA,KAAAA,EAAA,IACAj6C,EAAAk6C,EAAA9iG,SAAA8iG,EAAAxiG,OAGA8O,EAAA0zF,KAGAlG,EAAA33D,iBAAA,QAAA,IAAA2jB,EAAA,kBACAg0C,EAAA33D,iBAAA,QAAA,IAAA2jB,EAAA,UAEAg0C,EAAAS,KAAA0F,MAmBAl9F,EAAA47F,GAAAvsF,GAkDA,IAAA8tF,GAAA;;;;;;;;;ACpPA,MAAAC,IAAyBC,gBAAA,KAAAC,aAAA,SAQzBC,GAWA1kG,YAAA2kG,EAAAnhG,EAAA+gG,IACA,IAAAI,EACA,MAAA,IAAAtjG,MAAA,+BAcAlB,KAAAqG,IAAA,QAAAhD,EAAAohG,WAMAzkG,KAAA0kG,UAAAF,EAMAxkG,KAAA2kG,SAAAvoG,OAAAmiC,UAAmC6lE,GAAA/gG,GAQnCxD,OACA,OAAA,IAAAiqD,QAAA,CAAAv5C,EAAAw5C,KACA/pD,KAAA2kG,SAAAL,aACAtkG,KAAA4kG,mBAGA5kG,KAAAtD,MAQA6T,EAAAvQ,MAPAA,KAAA6kG,gBACA36C,KAAA35C,GACAm6C,MAAAX,KAeAlqD,gBACA,OAAA,IAAAiqD,QAAA,CAAAv5C,EAAAw5C,KACA,MAAAg0C,EAAA,IAAAC,eAEAD,EAAAE,KAAA,MAAAj+F,KAAA0kG,WAEA3G,EAAA33D,iBAAA,OAAA,KACA,MAAA49D,EAAAjG,EAAAvB,OACAyH,EAAAlG,EAAAK,SAEA,OAAA4F,EAAA,KAAAA,EAAA,IACAj6C,EAAA,+BAGA/pD,KAAAqG,IAAA,QAAA49F,GAEA1zF,EAAAvQ,SAGA+9F,EAAA33D,iBAAA,QAAA,IAAA2jB,EAAA,kBACAg0C,EAAA33D,iBAAA,QAAA,IAAA2jB,EAAA,UAEAg0C,EAAAS,SASA3+F,mBACAG,KAAA8kG,iBAAAj0D,YAAA7wC,KAAA6kG,cAAAxiF,KAAAriB,MAAAA,KAAA2kG,SAAAN,iBAQAxkG,kBACAoxC,cAAAjxC,KAAA8kG,kBAaAjlG,cAAA2kG,EAAAnhG,EAAA+gG,IAGA,OAFA,IAAAG,GAAAC,EAAAnhG,GAEAosF,QAIAzoF,EAAAu9F,GAAA1jF,IAEA,IAAAkkF,GAAA;;;;SCvIAC,WAAArV,GAIA9vF,OACA,MAGAwD,EAHArD,KAAA0oD,OACAtD,OAEA5oD,IAAA,qBAEA,IAAA,MAAAyoG,KAAA5hG,EACArD,KAAAilG,GAAA5hG,EAAA4hG,GAyBA,GAAAjlG,KAAAwkG,SAQA,OAFAxkG,KAAAg9F,MAAA,IAAAgI,GAAAE,MAAAllG,KAAAwkG,UAEAxkG,KAAAg9F,MAAAvN,OAPAzvF,KAAAg9F,MAAA,MAWAgI,GAAAE,MAAAH;;;;;MC3CAI,WAAAxV,GAIAxlC,sBACA,OAAAuxC,GAAAsJ,IAMAnlG,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAEA08C,EAAA18C,EAAAO,QAAAzsD,IAAAwoG,IAEAhI,EAAAoI,EAAApI,MACAqI,EAAAD,EAAAC,UAEArI,IAIAh9F,KAAAslG,eAAA,IAAAH,GAAAI,eAAAvI,EAAAqI,GAEA38C,EAAAO,QAAAzsD,IAAAk/F,IAAAI,oBAAAD,CAAAA,GACA,IAAA2J,GAAAxlG,KAAAslG,eAAAzJ,YAQA2J,GACA3lG,YAAA4lG,EAAA5J,GACA77F,KAAAylG,cAAAA,EAEAzlG,KAAA67F,OAAAA,EAGAh8F,SAQA,OAPAG,KAAA0lG,aAAA1lG,KAAAylG,cAAA/I,OAAA18F,KAAA67F,OAAAV,MAEAn7F,KAAA0lG,aAAA/kF,GAAA,WAAA,CAAAC,EAAAxf,KACApB,KAAA67F,OAAAM,YAAA/6F,EAAAg6F,MACAp7F,KAAA67F,OAAAD,SAAAx6F,EAAAw6F,WAGA57F,KAAA0lG,aAAAlH,OAGA3+F,QACAG,KAAA0lG,aAAAjK,SCoCA,SAAAkK,GAAAhnD,GACA,OAAAN,IACAA,EAAA19B,gBAA8Bg+B,UAAe+U,IAG7C,SAAAA,EAAA9yC,EAAAxf,EAAAg9C,GACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAA6pD,EAAA1H,EAAAzxB,OAEAi5E,EADAxnD,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACA7B,SAAA,GAEA,OAAArU,EAAAy9C,kBACAiH,EAAA51B,aAAA9uB,EAAAu9C,aAAAv9C,EAAAy9C,kBAAA+mD,GAEA9/C,EAAAzuB,gBAAAj2B,EAAAu9C,aAAAinD;;;;GD/CAT,GAAAI,qBEhEA1lG,YAAAm9F,EAAA8F,GACA,IAAA9F,EACA,MAAA,IAAA97F,MAAA,0BAGA,IAAA4hG,EACA,MAAA,IAAA5hG,MAAA,gCASAlB,KAAA0jG,OAAA1G,EAQAh9F,KAAA2jG,YAAAb,EA2BAjjG,OAAAgjG,GACA,OAAA,IAAAsB,GAAAtB,EAAA7iG,KAAA0jG,OAAA1jG,KAAA2jG,qBC/CAkC,GAIAhmG,cACAG,KAAAu3F,UAUA13F,IAAA2mD,EAAA75B,GACA,MAAA7X,EAAA9U,KAAAu3F,OAGAuO,EAAAhxF,EAAA,GACA9U,KAAA+lG,kBAAAv/C,GACA,MAAAw/C,EAAAlxF,EAAA,GAGAgxF,IAAAE,GAAAC,GAAAH,EAAAE,IACAhmG,KAAA+G,KAAA,cACAm/F,cAAAJ,EACAK,cAAAH,EACAr5E,OAAAA,IAYA9sB,OAAA2G,EAAAmmB,GACA,MAAA7X,EAAA9U,KAAAu3F,OAEAuO,EAAAhxF,EAAA,GACA9U,KAAAomG,kBAAA5/F,GACA,MAAAw/F,EAAAlxF,EAAA,GAGAgxF,IAAAE,GAAAC,GAAAH,EAAAE,IACAhmG,KAAA+G,KAAA,cACAm/F,cAAAJ,EACAK,cAAAH,EACAr5E,OAAAA,IAYA9sB,kBAAA2mD,GACA,MAAA1xC,EAAA9U,KAAAu3F,OACAvvF,EAAA8M,EAAAq1D,UAAA7yD,GAAAA,EAAA9Q,KAAAggD,EAAAhgD,IAGA,GAAAy/F,GAAAz/C,EAAA1xC,EAAA9M,IACA,OAIAA,GAAA,GACA8M,EAAA5P,OAAA8C,EAAA,GAKA,IAAAtM,EAAA,EAEA,KAAAoZ,EAAApZ,IAAA2qG,GAAAvxF,EAAApZ,GAAA8qD,IACA9qD,IAGAoZ,EAAA5P,OAAAxJ,EAAA,EAAA8qD,GASA3mD,kBAAA2G,GACA,MAAAsO,EAAA9U,KAAAu3F,OACAvvF,EAAA8M,EAAAq1D,UAAA7yD,GAAAA,EAAA9Q,KAAAA,GAGAwB,GAAA,GACA8M,EAAA5P,OAAA8C,EAAA,IAYA,SAAAi+F,GAAAxmF,EAAAkF,GACA,OAAAlF,GAAAkF,GAAAlF,EAAA/c,UAAAiiB,EAAAjiB,UAAA4jG,GAAA7mF,EAAAlI,QAAA+uF,GAAA3hF,EAAApN,OAQA,SAAA8uF,GAAA5mF,EAAAkF,GACA,OAAAlF,EAAA/c,SAAAiiB,EAAAjiB,YAEE+c,EAAA/c,SAAAiiB,EAAAjiB,WAKF4jG,GAAA7mF,EAAAlI,OAAA+uF,GAAA3hF,EAAApN,OAQA,SAAA+uF,GAAApuF,GACA,OAAAxS,MAAAkI,QAAAsK,GAAAA,EAAA4B,OAAAL,KAAA,KAAAvB;;;;GAjCAlR,EAAA6+F,GAAAxvF,GCtHA,MAAAkwF,GAAAtjG,OAAA,YACAujG,GAAAvjG,OAAA,SAOAwjG,GAAA,YAOAC,GAAA,qBAQA,SAAAC,GAAAnvF,GACA,QAAAA,EAAA0K,kBAAAqkF,IAkBA,SAAAK,GAAApvF,EAAAmV,EAAAtpB,MAiBA,OAhBAspB,EAAAuD,aAAA,kBAAA,QAAA1Y,GACAmV,EAAAwK,SAAAsvE,GAAAjvF,GACAmV,EAAAk6E,kBAAAN,IAAA,EAAA/uF,GACAA,EAAA+C,gBAAAusF,GAEAzjG,EAAAomB,OAsDA,SAAAjS,EAAAuvF,EAAAp6E,GACAA,EAAAk6E,kBAAAL,GAAAO,EAAAvvF,GAtDAwvF,CAAAxvF,EAAAnU,EAAAomB,MAAAkD,GA2BA,SAAAnV,EAAAmV,EAAAva,EAAAqZ,GACA,MAAA3W,EAAA,IAAA+wF,GAEA/wF,EAAA6L,GAAA,aAAA,CAAAC,EAAAxf,KACAA,EAAA8kG,eACAz6E,EAAAjU,EAAApW,EAAA8kG,cAAA9kG,EAAAurB,QAGAvrB,EAAA+kG,eACA/zF,EAAAoF,EAAApW,EAAA+kG,cAAA/kG,EAAAurB,UAIAA,EAAAk6E,kBAAA,eAAA,CAAArvF,EAAAgvC,EAAA75B,IAAA7X,EAAA1C,IAAAo0C,EAAA75B,GAAAnV,GACAmV,EAAAk6E,kBAAA,kBAAA,CAAArvF,EAAAhR,EAAAmmB,IAAA7X,EAAA2W,OAAAjlB,EAAAmmB,GAAAnV,GAtCAyvF,CACAzvF,EACAmV,EACA,CAAAnV,EAAAgvC,EAAA75B,IAAAA,EAAAwK,SAAA+vE,EAAA1gD,EAAAjvC,OAAAC,GACA,CAAAA,EAAAgvC,EAAA75B,IAAAA,EAAA2K,YAAA4vE,EAAA1gD,EAAAjvC,OAAAC,IAGAA,EAGA,SAAA0vF,EAAAhvF,GACA,OAAAxS,MAAAkI,QAAAsK,GAAAA,GAAAA,IAiDA,SAAAivF,GAAA3vF,GACA,MAAA4vF,EAAA5vF,EAAA0K,kBAAAskF,IAEA,OAAAY,EAIA,mBAAAA,EAAAA,IAAAA,EAHA,GAyCA,SAAAN,KACA,OAAA;;;;GC7JA,MAAAO,GAAApkG,OAAA,WAyCA,SAAAqkG,GAAAtyE,GACA,MAAAO,EAAAP,EAAA0tB,qBAEA,SAAAntB,IAbA,SAAAA,GACA,QAAAA,EAAArT,kBAAAmlF,KAAAV,GAAApxE,GAYAgyE,CAAAhyE,IAUA,SAAAiyE,GAAA9qD,GACA,OAAAA,aAAAjE,IAAA,SAAAiE,EAAAzgD;;;;SCpCAwrG,WAAA9X,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAvH,EAAAuH,EAAAxH,MAAAC,OACA8K,EAAAvD,EAAAuD,EACAs2B,EAAA75B,EAAA65B,WDfA,IAAAhtD,EAAA5I,EAAAlD,ECkBA03B,EAAAuY,SAAA,SACA7U,UAAA,EACAzD,SAAA,EACAoP,WAAA,SACAtC,iBAAA,MAAA,MAAA,YAGAq0B,EAAAnsB,IAAA,gBAAAhkD,IAAA+yC,IACAjE,MAAA,QACA9wB,KAAA,CAAAssB,EAAAoJ,IAAA4hD,GAAA5hD,MAGAy8B,EAAAnsB,IAAA,mBAAAhkD,IAAA+yC,IACAjE,MAAA,QACA9wB,KAAA,CAAAssB,EAAAoJ,KDhCAvwB,ECgCAmyE,GAAA5hD,GDhCAn5B,ECgCAm5B,EDhCAr8B,ECgCAwiC,EAAA,gBD/BAt/B,EAAAk6E,kBAAAQ,IAAA,EAAA9xE,GAEAqxE,GAAArxE,EAAA5I,GAAwClD,MAExC,WACA,MACAk+E,EADApyE,EAAA9f,SAAA,GACAuC,aAAA,OAEA,OAAA2vF,KAAsBA,KAAal+E,IAAQA,SC0B3C84D,EAAAnsB,IAAA,YACAhkD,IAAAuzF,GAAA,QACAvzF,IAAAuzF,GAAA,QACAvzF,ILUA,WACA,OAAAisC,IACAA,EAAA19B,GAAA,yBAAA+yC,IAGA,SAAAA,EAAA9yC,EAAAxf,EAAAg9C,GACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAGA,MAAA0wB,EAAAyxB,EAAAzxB,OAEAi5E,EADAxnD,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACA7B,SAAA,GAEA,GAAA,OAAArU,EAAAy9C,kBAAA,CACA,MAAA+oD,EAAAxmG,EAAAw9C,kBAEAgpD,EAAAxmG,OACAurB,EAAA0K,gBAAA,SAAAuuE,GACAj5E,EAAA0K,gBAAA,QAAAuuE,GAEAgC,EAAAlpE,OACA/R,EAAA0K,gBAAA,QAAAuuE,QAGG,CACH,MAAAgC,EAAAxmG,EAAAy9C,kBAEA+oD,EAAAxmG,OACAurB,EAAAuD,aAAA,SAAA03E,EAAAxmG,KAAAwkG,GAEAj5E,EAAAuD,aAAA,QAAA,QAAA01E,GAEAgC,EAAAlpE,OACA/R,EAAAuD,aAAA,QAAA03E,EAAAlpE,MAAAknE,MK5CAiC,IAEAtlB,EAAAnsB,IAAA,UACAhkD,IAAAqhD,IACArjC,MACAn0B,KAAA,MACA4b,WACAiwF,KAAA,IAGA5mD,MAAA,CAAA6mD,EAAAC,IAAAA,EAAAh4E,cAAA,SAA8E83E,IAAAC,EAAA/vF,aAAA,YAE9E5F,IAAA8hD,IACA9jC,MACAn0B,KAAA,MACA8E,IAAA,OAEAmgD,MAAA,SAEA9uC,IAAA8hD,IACA9jC,MACAn0B,KAAA,MACA8E,IAAA,UAEAmgD,OACAngD,IAAA,SACArE,MAAAqrG,IACA,MAAArrG,GACA0E,KAAA2mG,EAAA/vF,aAAA,WAOA,OAJA+vF,EAAAhwF,aAAA,WACArb,EAAAgiC,MAAAqpE,EAAA/vF,aAAA,UAGAtb,OAIA0V;;;;;AL3EA,WACA,OAAAisC,IACAA,EAAA19B,GAAA,iBAAA+yC,IAGA,SAAAA,EAAA9yC,EAAAxf,EAAAg9C,GAEA,IAAAA,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,UAAuDr2D,MAAA,EAAAsb,MAAA,UACvD,OAIA,MAAAwwF,EAAAriG,MAAAC,KAAAvE,EAAAkxD,SAAAl4C,eAAAkR,KAAA2W,GAAAA,EAAApmB,GAAA,QAGA,IAAAksF,IAAAA,EAAAhwF,aAAA,SAAAqmC,EAAAY,WAAAj1C,KAAAg+F,GAAqG9rG,MAAA,IACrG,OAIA,MAAAgsG,EAAA7pD,EAAA4T,YAAA+1C,EAAA3mG,EAAA8xD,aAGAg1C,EAAAnH,GAAAkH,EAAAnrD,WAAAgD,YAGAooD,IAKA9pD,EAAA8T,gBAAA9wD,EAAAkxD,SAAArZ,GAAA1xB,SAAA2gF,IAGA9mG,EAAA07C,WAAAmrD,EAAAnrD,WAGA17C,EAAA8xD,YAAA+0C,EAAA/0C,cKsCAi1C,KAaA,SAAAT,GAAA/6E,GACA,MAAAy7E,EAAAz7E,EAAA07E,mBAAA,OACAC,EAAA37E,EAAAu6B,uBAAA,UAA0D3vC,MAAA,UAI1D,OAFAoV,EAAAmG,OAAA5P,GAAAqE,SAAA+gF,GAAAF,GAEAE;;;;SCrGAC,WAAA96D,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEApwB,KAAA0tC,aAAA,YAGA7tC,WAAAwtC,GACArtC,KAAA+G,KAAAsmC,EAAAvkC,KAAAukC;;;;GCNA,MAAAm7D,GAAAj5E,GAAA,gBAWAk5E,WAAA9Y,GAIA3mC,wBACA,MAAA,SAMAnpD,OACA,MAAAuwB,EAAApwB,KAAA0oD,OAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SAQA3V,KAAA0oG,oBAAA,IAAAzvF,IAIAjZ,KAAA0oD,OAAA45B,QAAA96B,mBAAA7mC,GAAA,YAAA,CAAAC,EAAAxf,EAAAg9C,KAEAp+C,KAAA2oG,gCAAAvqD,EAAAzxB,QAEA,MAAAm5B,EAAA1H,EAAAzxB,OACAqI,EAAA8wB,EAAAnwC,SAAA4M,UACAqmF,EAAA5zE,EAAA0tB,qBAEA,IAAA,MAAAv7B,KAAA6N,EAAA9L,YACA,IAAA,MAAAxsB,KAAAyqB,EAAA,CACA,MAAAziB,EAAAhI,EAAA4a,KAEA5S,EAAAmX,GAAA,YAAA8qF,GAAAjiG,KACAohD,EAAA3uB,SAAAuvE,GAAAhiG,GACA1E,KAAA0oG,oBAAAt2F,IAAA1N,GAGAA,GAAAkkG,GACA9iD,EAAA5wB,aAAAF,EAAA9L,aAA4DM,MAAA,EAAAC,MAAA09E,GAAAyB,SAKtDlmG,SAAA,QAGN0tB,EAAA2mB,YAAAwxD,IACAvoG,KAAAsD,SAAAgtF,EAAA,YAAA,IAAA/sF,IAAAvD,KAAA6oG,gBAAAtlG,IAGAvD,KAAAsD,SAAAgtF,EAAA,UAAA,IAAA/sF,IAAAvD,KAAA8oG,cAAAvlG,IAAsFb,SAAA,SAGtF1C,KAAAsD,SAAAgtF,EAAA,SAAA,CAAA1vE,EAAAxf,KACApB,KAAA+oG,cAAA,WAAA3nG,EAAA4hB,aACA5hB,EAAAmsC,iBACA3sB,EAAA3e,UAEMS,SAAA,SAUN7C,aAAAwF,EAAA2jG,GACA,MAAAtgD,EAAA1oD,KAAA0oD,OACAt4B,EAAAs4B,EAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SACA,IAAA6B,EAAAwxF,EAAA3oG,OAGA,GA+QA,SAAAmX,GACA,KAAAA,GAAA,CACA,GAAAA,aAAAyK,MAAAzK,aAAAkL,IACA,OAAA,EAGAlL,EAAAA,EAAAnC,OAGA,OAAA;;;;GAxRA4zF,CAAAzxF,GACA,OAIA,IAAAmvF,GAAAnvF,MACAA,EAAAA,EAAAqlB,aAAA8pE,KAGA,OAIAqC,EAAAz7D,iBAGA+iD,EAAAhuE,WACA8N,EAAA/H,QAIA,MAAAq0B,EAAAgM,EAAA45B,QAAAtlC,OAAAL,eAAAnlC,GAEAkxC,EAAAxH,MAAA3J,OAAA,KACAv3C,KAAAkpG,yBAAAxsD,KAWA78C,WAAAwF,EAAA2jG,GACA,MAAA75E,EAAA65E,EAAA75E,QACAiwD,EAAAjwD,GAAAjB,GAAA5nB,QAAA6oB,GAAAjB,GAAAK,WAAAY,GAAAjB,GAAAI,WACA,IAAA66E,GAAA,GAsNA,SAAAh6E,GACA,OAAAA,GAAAjB,GAAAI,YACAa,GAAAjB,GAAAE,WACAe,GAAAjB,GAAAG,SACAc,GAAAjB,GAAAK,UAtNA66E,CAAAj6E,GA6NA,SAAA65E,GACA,OAAA95E,GAAA85E,IAAAR,GA5NGa,CAAAL,KACHG,EAAAnpG,KAAAspG,mCAAAtpG,KAAAupG,qBAFAJ,EAAAnpG,KAAAwpG,iBAAApqB,GAKA+pB,IACAH,EAAAz7D,iBACAloC,EAAApD,QAWApC,cAAAu/E,GAEA,GAAAp/E,KAAA0oD,OAAAxX,WACA,OAGA,MACAyW,EADA3nD,KAAA0oD,OAAAxH,MAAAvrC,SACA4M,UAGA,IAAAolC,EAAA7hC,YACA,OAGA,MAAA2jF,EAAAzpG,KAAA0pG,iCAAAtqB,GAEA,OAAAqqB,GACAzpG,KAAA0oD,OAAAxH,MAAA3J,OAAA5qB,IACA,IAAAg9E,EAAAhiD,EAAAv/B,OAAA/S,OAGA,KAAAs0F,EAAAnwF,SAAA,CACA,MAAAowF,EAAAD,EACAA,EAAAC,EAAAv0F,OAEAsX,EAAAlB,OAAAm+E,GAGA5pG,KAAAkpG,yBAAAO,MAGA,QAfA,EAyBA5pG,iBAAAu/E,GACA,MAAAl+B,EAAAlhD,KAAA0oD,OAAAxH,MACAC,EAAAD,EAAAC,OAEAwG,EADAzG,EAAAvrC,SACA4M,UACAknF,EAAA9hD,EAAAjF,qBAGA,GAAA+mD,GAAAtoD,EAAA0D,SAAA4kD,GAAA,CACA,MAAAxmF,EAAAm8D,EAAAz3B,EAAAzX,kBAAAyX,EAAA1yB,mBACAI,EAAA8rB,EAAA8D,yBAAAhiC,EAAAm8D,EAAA,UAAA,YAQA,OANA/pD,GACA6rB,EAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAG,MAIA,EAKA,IAAAsyB,EAAA7hC,YACA,OAGA,MAAA+jF,EAAA7pG,KAAA0pG,iCAAAtqB,GAEA,OAAAyqB,aAAApxD,IAAA0I,EAAA0D,SAAAglD,IACA3oD,EAAA3J,OAAA,KACAv3C,KAAAkpG,yBAAAW,MAGA,QALA,EAiBAhqG,kCACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA4oD,EAAA5oD,EAAAvrC,SAAA4M,UACAkyD,EAAAvzB,EAAAC,OAAA48B,gBAAA+rB,GAEA,OAAAA,EAAAnhF,gBAAA3tB,MAAAy5E,IAIAvzB,EAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAolB,GAAA3wB,SAAA8qD,OAGA,GASA50E,oBACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACAohC,EAAAtiF,KAAA0oD,OAAA45B,QAKAsmB,EAJAtmB,EAAAlyD,KACAza,SACA4M,UAEAmgC,qBAIA,GAAAkmD,GAAAjC,GAAAiC,GAAA,CACA,MAAAmB,EAAAznB,EAAAtlC,OAAAL,eAAAisD,EAAAvzF,QAMA,OAJA6rC,EAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAolB,GAAA3wB,SAAAogF,OAGA,EAGA,OAAA,EASAlqG,yBAAA2X,GACAxX,KAAA0oD,OAAAxH,MAAA3J,OAAA5qB,IACAA,EAAAuI,aAAAolB,GAAA1wB,SAAApS,MAaA3X,iCAAAivD,GACA,MAAA5N,EAAAlhD,KAAA0oD,OAAAxH,MACAC,EAAAD,EAAAC,OACAwG,EAAAzG,EAAAvrC,SAAA4M,UAIAynF,EAAA,IAAA/pD,GAAA0H,GACAzG,EAAA01C,gBAAAoT,GAAiChnF,UAAA8rC,EAAA,UAAA,aACjC,MAAA26C,EAAA36C,EAAAk7C,EAAA3hF,MAAAtD,WAAAilF,EAAA3hF,MAAAvD,UAEA,OAAA2kF,aAAAhxD,IAAA0I,EAAA0D,SAAA4kD,GACAA,EAGA,KASA5pG,gCAAA8sB,GACA,IAAA,MAAAs9E,KAAAjqG,KAAA0oG,oBACA/7E,EAAA2K,YAAAovE,GAAAuD,GAGAjqG,KAAA0oG,oBAAAniG,eCnVA2jG,WAAAjY,GAYApyF,UACA,MAAA2X,EAAAxX,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAmgC,qBAEA1iD,KAAAymC,UAAA+gE,GAAAhwF,GAEAgwF,GAAAhwF,IAAAA,EAAAO,aAAA,OACA/X,KAAAtD,MAAA8a,EAAAQ,aAAA,OAEAhY,KAAAtD,OAAA,EAWAmD,QAAAwD,GACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MACAipD,EAAAjpD,EAAAvrC,SAAA4M,UAAAmgC,qBAEAxB,EAAA3J,OAAA5qB,IACAA,EAAAuD,aAAA,MAAA7sB,EAAAmJ,SAAA29F;;;;SCnCAC,WAAAza,GAIA9vF,OACAG,KAAA0oD,OAAA4C,SAAAl5C,IAAA,uBAAA,IAAA83F,GAAAlqG,KAAA0oD;;;;GCGA,SAAA2hD,IAAA5mG,QAA8CA,EAAA6mG,UAAAA,EAAAlnG,SAAAA,EAAAmnG,gBAAAA,IAC9C9mG,EAAAH,SAAAqS,SAAA,YAAA,CAAAiL,GAAkDvgB,OAAAA,MAClD,GAAAiqG,IAAA,CAIA,IAAA,MAAAE,KAAAD,EACA,GAAAC,EAAA/3D,SAAApyC,GACA,OAIA+C;;;;SCnBAqnG,WAAA3f,GAOAjrF,YAAAwiF,EAAAqoB,GACAlpG,MAAA6gF,GAEA,MAAA77E,cAAyBrE,MAQzBnC,KAAAqG,IAAA,SAQArG,KAAAqG,IAAA,SAQArG,KAAAqG,IAAA,cAAA,GAOArG,KAAA+5F,UAAA/5F,KAAAg6F,iBAAAxzF,GAOAxG,KAAA2qG,UAAA3qG,KAAA4qG,iBAAAF,EAAAlkG,GAEA,MAAA6b,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,MACA6Q,YACAzC,OACA,mBACA8K,EAAA6kE,GAAA,aAAA,iBAGA7oF,UACA2B,KAAA+5F,UACA/5F,KAAA2qG,aAYA9qG,iBAAA2G,GACA,MAAAuzF,EAAA,IAAApO,GAAA3rF,KAAAqiF,QAKA,OAHA0X,EAAA3jC,IAAA5vD,EACAuzF,EAAA13E,KAAA,QAAAnc,GAAAlG,KAAA,SAEA+5F,EAWAl6F,iBAAA6qG,EAAAlkG,GACA,MAAAmkG,EAAA,IAAAD,EAAA1qG,KAAAqiF,QAMA,OAJAsoB,EAAAnkG,GAAAA,EACAmkG,EAAAtoF,KAAA,SAAAnc,GAAAlG,MACA2qG,EAAAtoF,KAAA,cAAAnc,GAAAlG,MAEA2qG,EAMA9qG,SACAG,KAAA2qG,UAAAE,SAMAhrG,QACAG,KAAA2qG,UAAAtiF;;;;SCjHAyiF,WAAAhgB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAQAriF,KAAAqG,IAAA,SAQArG,KAAAqG,IAAA,MAQArG,KAAAqG,IAAA,eAQArG,KAAAqG,IAAA,cAAA,GAEA,MAAAgc,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,QACA6Q,YACAlR,KAAA,OACAyO,OACA,WACA,iBAEA/Q,GAAA6b,EAAAnc,GAAA,MACA6kG,YAAA1oF,EAAAnc,GAAA,eACA8kG,SAAA3oF,EAAAnc,GAAA,iBAQArG,SACA2B,MAAA0wB,SAEA,MAAA+4E,EAAAvuG,IACAsD,KAAAwX,QAAA9a,MAAAA,GAAA,IAAAA,EAAAA,EAAA,IAGAuuG,EAAAjrG,KAAAtD,OAIAsD,KAAA2gB,GAAA,eAAA,CAAAC,EAAA3kB,EAAAS,KACAuuG,EAAAvuG,KAOAmD,SACAG,KAAAwX,QAAAqzF,SAMAhrG,QACAG,KAAAwX,QAAA6Q;;;;GC5DA,SAAA6iF,IAAA96E,KAAwCA,IACxCA,EAAA9sB,SAAA8sB,EAAA5Y,QAAA,SAAA,CAAAoJ,EAAA0lB,KACAA,EAAAiH,iBACAnd,EAAArpB,KAAA,YACKo/B,YAAA;;;;;MClBLglE,WAAArgB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAp2B,EAAAjsD,KAAAqiF,OAAAp2B,EAQAjsD,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAAwiF,WAAA,IAAAV,GAOA9hF,KAAAorG,aAAAprG,KAAAqrG,0BAOArrG,KAAAsrG,eAAAtrG,KAAAurG,cAAAt/C,EAAA,QAAAu/C,GAAA/rF,GACAzf,KAAAsrG,eAAAxiG,KAAA,SAOA9I,KAAAyrG,iBAAAzrG,KAAAurG,cAAAt/C,EAAA,UAAAy/C,GAAAjsF,EAAA,UASAzf,KAAA2rG,YAAA,IAAAjmB,GASA1lF,KAAAsuF,aAAA,IAAAV,IACAE,WAAA9tF,KAAA2rG,YACA/mB,aAAA5kF,KAAA4kF,aACAiJ,iBAAA7tF,KAAAwiF,WACA5kD,SAEA2wD,cAAA,cAGAC,UAAA,SAIAxuF,KAAAsrG,eAAAjf,gBACAryE,YACAzC,OACA,uBAKAvX,KAAA4rF,aACAziF,IAAA,OAEA6Q,YACAzC,OACA,4BAIA4iF,SAAA,MAGA97F,UACA2B,KAAAorG,aACAprG,KAAAsrG,eACAtrG,KAAAyrG,oBAQA5rG,SACA2B,MAAA0wB,SAEAlyB,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAEA0zF,IAAkB96E,KAAApwB,QAElBA,KAAAorG,aAAAprG,KAAAsrG,eAAAtrG,KAAAyrG,kBACA3qG,QAAA8qG,IAEA5rG,KAAA2rG,YAAAv5F,IAAAw5F,GAGA5rG,KAAA4kF,aAAAxyE,IAAAw5F,EAAAp0F,WAaA3X,cAAA4pB,EAAA4wE,EAAAn2F,GACA,MAAA2nG,EAAA,IAAAjS,GAAA55F,KAAAqiF,QAYA,OAVAwpB,EAAAxlG,KACAojB,MAAAA,EACA4wE,KAAAA,EACAC,SAAA,IAGAp2F,GACA2nG,EAAAvpD,SAAA,WAAAp8C,GAAAlG,KAAAkE,GAGA2nG,EASAhsG,0BACA,MAAAosD,EAAAjsD,KAAAqiF,OAAAp2B,EACAm/C,EAAA,IAAAX,GAAAzqG,KAAAqiF,OAAAyoB,IAKA,OAHAM,EAAA3hF,MAAAwiC,EAAA,oBACAm/C,EAAAT,UAAAI,YAAA9+C,EAAA,oBAEAm/C;;;;;;;;;ACjHA,SAAAU,IAAAt0F,QAAqCA,EAAAnX,OAAAA,EAAA0rG,UAAAA,EAAAC,QAAAA,EAAAC,cAAAA,IAGrC/iG,EAAA7I,KACAA,EAAAA,KAKA6I,EAAA8iG,KACAA,EAAAA,KAGA,MAAAE,EC3EA,SAAA10F,GACA,KAAAA,GAAA,QAAAA,EAAAsqB,QAAApU,eAAA,CACA,GAAA,UAAA/vB,GAAArC,OAAAs2C,iBAAAp6B,GAAAyL,SACA,OAAAzL,EAGAA,EAAAA,EAAAod,cAGA,OAAA,KDkEAu3E,CAAA30F,EAAAod,eACAw3E,EAAA,IAAAj6D,GAAA36B,GACA49B,EAAA,IAAAjD,GAAA9xC,GAEA,IAAAgsG,EACApwG,EAGA,GAAA+vG,GAAAC,EAEE,CACF,MAAAze,EAAAwe,GAAA,IAAA75D,GAAA65D,GAAAM,aACA72D,EAAAw2D,GAAA,IAAA95D,GAAAx0C,GAAArC,SAEAW,EAAAowG,GAgEA,SAAAN,EAAA32D,EAAAg3D,EAAA5e,EAAA/3C,GACA,IAEA82D,EACAC,EAHAC,EAAA,EACAC,EAAA,EAKA,MAAAC,EAAAP,EAAAj5D,UA6DA,OA3DA44D,EAAAn4E,KAAA3Q,IACA,MAAA2pF,EAAAC,GAAAC,GAAA7pF,EAAAmyB,EAAAg3D,GACA,IAAAW,EACAC,EAEA,GAAAxf,EACA,GAAA/3C,EAAA,CAEA,MAAAw3D,EAAAzf,EAAAt6C,gBAAAuC,GAKAs3D,EAHAE,EAGAA,EAAAC,oBAAAL,GAEA,OAGAE,EAAAvf,EAAA0f,oBAAAL,GA6BA,SAAAM,IACAT,EAAAM,EACAP,EAAAM,EACAR,EAAAM,EACAL,EAAAI,EAKA,OAlCAn3D,IACAu3D,EAAAv3D,EAAAy3D,oBAAAL,IAIAp3D,IAAA+3C,EACAwf,EAAAN,GACAS,KAIA13D,GAAA+3C,EACAuf,EAAAN,GACAU,IAKAH,EAAAN,GAAAK,GAAAN,EACAU,IACIH,GAAAN,GAAAK,EAAAN,GACJU,IAaAJ,IAAAJ,IAGAJ,GAAAC,EAAAD,GAAA,KAnIAa,CAAArB,EAAA32D,EAAAg3D,EAAA5e,EAAA/3C,IAGAq3D,GAAAf,EAAA,GAAA32D,EAAAg3D,QATAnwG,EAAAowG,GAAAS,GAAAf,EAAA,GAAA32D,EAAAg3D,GAYA,IAAA3tE,KAAMA,EAAAD,IAAAA,GAAY6uE,GAAAhB,GAElB,GAAAH,EAAA,CACA,MAAAoB,EAAAD,GAAA,IAAAl7D,GAAA+5D,IACAqB,EAAA57D,GAAAu6D,GAMAztE,GAAA6uE,EAAA7uE,KACAD,GAAA8uE,EAAA9uE,IAOAC,GAAAytE,EAAA9oE,WACA5E,GAAA0tE,EAAA7oE,UAOA5E,GAAA8uE,EAAA9uE,KACAD,GAAA+uE,EAAA/uE,IAGA,OAASC,KAAAA,EAAAD,IAAAA,EAAAviC,KAAAA,GAUT,SAAA6wG,GAAA7pF,EAAAmyB,EAAAg3D,GACA,MAAA3tE,KAAQA,EAAAD,IAAAA,EAAAviC,KAAAA,GAAkBgnB,EAAAmyB,EAAAg3D,GAE1B,OAAAnwG,EAAAmwG,EAAA/4D,QAAAm6D,OAAA/uE,EAAAD,IA2FA,SAAA6uE,IAAA5uE,KAAsCA,EAAAD,IAAAA,IACtC,MAAAwE,QAAQA,EAAAC,QAAAA,GAAmBtlC,GAAArC,OAE3B,OACAmjC,KAAAA,EAAAuE,EACAxE,IAAAA,EAAAyE;;;;GE1OA,MAAAwqE,GAAA9gB,GAAA,MACA+gB,GAAA/vG,GAAAgY,SAAA68B,WAyCAm7D,WAAA7iB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aASAnrF,KAAAqG,IAAA,MAAA,GASArG,KAAAqG,IAAA,OAAA,GAiBArG,KAAAqG,IAAA,WAAA,YASArG,KAAAqG,IAAA,aAAA,GAUArG,KAAAqG,IAAA,aAAA,GAQArG,KAAAqG,IAAA,aAgBArG,KAAA4gF,QAAA5gF,KAAAirF,mBAEAjrF,KAAA4rF,aACAziF,IAAA,MACA6Q,YACAzC,OACA,mBACA8K,EAAAnc,GAAA,WAAAxJ,uBAAuDA,KACvD2lB,EAAA6kE,GAAA,YAAA,4BACA7kE,EAAA6kE,GAAA,YAAA,+BACA7kE,EAAAnc,GAAA,cAGAoS,OACAkmB,IAAAnc,EAAAnc,GAAA,MAAAunG,IACAhvE,KAAApc,EAAAnc,GAAA,OAAAunG,MAIApvG,SAAA2B,KAAA4gF,UASA/gF,OACAG,KAAA4tG,WAAA,EAQA/tG,OACAG,KAAA4tG,WAAA,EAkCA/tG,SAAAwD,GACArD,KAAA6tG,OAEA,MAAAC,EAAAH,GAAAG,iBACAC,EAAA3xG,OAAAmiC,WACA/mB,QAAAxX,KAAAwX,QACAu0F,WACA+B,EAAAE,gBACAF,EAAAG,oBACAH,EAAAI,oBACAJ,EAAAK,gBACAL,EAAAM,oBACAN,EAAAO,qBAEArC,QAAA0B,GACAzB,eAAA,GACG5oG,IAEHm7B,IAASA,EAAAC,KAAAA,EAAAxiC,KAAAgnB,GAA4B6oF,GAAAiC,GAErC3xG,OAAAmiC,OAAAv+B,MAAwBw+B,IAAAA,EAAAC,KAAAA,EAAAxb,SAAAA,IAoCxBpjB,IAAAwD,GACArD,KAAAsuG,QAEAtuG,KAAAuuG,0BAAA,MACAvuG,KAAA4tG,UACA5tG,KAAAwuG,cAAAnrG,GAEArD,KAAAyuG,iBAIAzuG,KAAAwuG,cAAAnrG,GAKArD,KAAAsD,SAAAtD,KAAA,mBAAAA,KAAAuuG,2BAMA1uG,QACAG,KAAAuuG,4BAEAvuG,KAAAyuG,eAIAzuG,KAAAwD,cAAAxD,KAAA,mBAAAA,KAAAuuG,2BAEAvuG,KAAAuuG,0BAAA,KAEAvuG,KAAA0uG,QAWA7uG,cAAAwD,GACArD,KAAA2uG,SAAAtrG,GAEA,MAAA40D,EAAA22C,GAAAvrG,EAAAhD,QACA0kF,EAAA1hF,EAAA2oG,QAAA4C,GAAAvrG,EAAA2oG,SAAA0B,GAGA1tG,KAAAsD,SAAA3F,GAAAgY,SAAA,SAAA,CAAAiL,EAAA0lB,KACA,MAAAuoE,EAAAvoE,EAAAjmC,OAGAyuG,EAAA72C,GAAA42C,EAAAp8D,SAAAwlB,GAGA82C,EAAAhqB,GAAA8pB,EAAAp8D,SAAAsyC,IAIA+pB,IAAAC,GAAA92C,GAAA8sB,GACA/kF,KAAA2uG,SAAAtrG,KAEM8iC,YAAA,IAGNnmC,KAAAsD,SAAA3F,GAAArC,OAAA,SAAA,KACA0E,KAAA2uG,SAAAtrG,KASAxD,eACAG,KAAAwD,cAAA7F,GAAAgY,SAAA,UACA3V,KAAAwD,cAAA7F,GAAArC,OAAA,WAUA,SAAAszG,GAAA/xG,GACA,OAAA60C,GAAA70C,GACAA,EAGA40C,GAAA50C,GACAA,EAAA02C,wBAGA,mBAAA12C,EACA+xG,GAAA/xG,KAGA,KAmVA,SAAAmyG,GAAA55D,EAAA65D,GACA,OAAA75D,EAAA5W,IAAAywE,EAAAl8D,OAAA46D,GAAAuB,oBASA,SAAAC,GAAA/5D,GACA,OAAAA,EAAApD,OAAA27D,GAAAuB;;;;GA3UAvB,GAAAyB,sBAAA,GAmBAzB,GAAAuB,oBAAA,GA6KAvB,GAAAG,kBAGAK,gBAAA,CAAA/4D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAuwE,EAAAvwE,MAAA,EACAziC,KAAA,YAGAoyG,oBAAA,CAAAj5D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAuwE,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAGAmyG,oBAAA,CAAAh5D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAivE,GAAAyB,sBACAnzG,KAAA,aAKAozG,oBAAA,CAAAj6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAAwwE,EAAAvwE,MAAA,EACAziC,KAAA,YAGAqzG,wBAAA,CAAAl6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAAkvE,GAAAyB,sBACAnzG,KAAA,aAGAszG,wBAAA,CAAAn6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAA3W,KAAAwwE,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAKAuzG,oBAAA,CAAAp6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAAtD,MAAAm9D,EAAAvwE,MAAA,EACAziC,KAAA,YAGAwzG,wBAAA,CAAAr6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAAtD,MAAAm9D,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAGAyzG,wBAAA,CAAAt6D,EAAA65D,MACAzwE,IAAAwwE,GAAA55D,EAAA65D,GACAxwE,KAAA2W,EAAAtD,MAAA67D,GAAAyB,sBACAnzG,KAAA,aAKA+xG,gBAAA,CAAA54D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAuwE,EAAAvwE,MAAA,EACAziC,KAAA,YAGAiyG,oBAAA,CAAA94D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAuwE,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAGAgyG,oBAAA,CAAA74D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAA2W,EAAA1W,MAAA,EAAAivE,GAAAyB,sBACAnzG,KAAA,aAKA0zG,oBAAA,CAAAv6D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAAwwE,EAAAvwE,MAAA,EACAziC,KAAA,YAGA2zG,wBAAA,CAAAx6D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAAkvE,GAAAyB,sBACAnzG,KAAA,aAGA4zG,wBAAA,CAAAz6D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAA3W,KAAAwwE,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAKA6zG,oBAAA,CAAA16D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAAtD,MAAAm9D,EAAAvwE,MAAA,EACAziC,KAAA,YAGA8zG,wBAAA,CAAA36D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAAtD,MAAAm9D,EAAAvwE,MAAAivE,GAAAyB,sBACAnzG,KAAA,aAGA+zG,wBAAA,CAAA56D,EAAA65D,MACAzwE,IAAA2wE,GAAA/5D,GACA3W,KAAA2W,EAAAtD,MAAA67D,GAAAyB,sBACAnzG,KAAA,oBCnqBAg0G,WAAAtgB,GAIA3mC,wBACA,MAAA,oBAMAnpD,OAOAG,KAAAowB,KAAA,IAAAu9E,GAaA3tG,KAAAkwG,gBAAA,MACA,MAAA9/E,EAAApwB,KAAA0oD,OAAA45B,QAAAlyD,KAEA5N,EADA4N,EAAAza,SACA4M,UAAAC,gBAEA,OAAAA,EACA4N,EAAAC,aAAAmL,aAAAhZ,EAAAxnB,MAGA,OAUAgF,KAAAu3F,OAAA,IAAAnxF,IAGApG,KAAA0oD,OAAAumC,GAAA7+D,KAAAoiB,KAAApgC,IAAApS,KAAAowB,MAGApwB,KAAA0oD,OAAAumC,GAAArK,aAAAxyE,IAAApS,KAAAowB,KAAA5Y,SASA24F,kBACA,MAAA74F,EAAAtX,KAAAu3F,OAAA/6F,IAAAwD,KAAAowB,KAAAwwD,QAAApkF,IAAA,IAEA,OAAA8a,EAAAA,EAAA8Y,KAAA,KASAvwB,QAAAuwB,GACA,OAAApwB,KAAAu3F,OAAAhvF,IAAA6nB,GAWAvwB,IAAAuB,GACA,GAAApB,KAAAowG,QAAAhvG,EAAAgvB,MAMA,MAAA,IAAAnvB,EAAA,sFAIAjB,KAAAmwG,aAEAnwG,KAAAowB,KAAAwwD,QAAAn1D,OAAAzrB,KAAAmwG,aAIAnwG,KAAAu3F,OAAAlxF,IAAAjF,EAAAgvB,KAAAhvB,GAGApB,KAAAqwG,MAAAjvG,GAUAvB,OAAAuwB,GACA,IAAApwB,KAAAowG,QAAAhgF,GAMA,MAAA,IAAAnvB,EAAA,8FAIA,GAAAjB,KAAAmwG,cAAA//E,EAAA,CAEApwB,KAAAowB,KAAAwwD,QAAAn1D,OAAA2E,GAGApwB,KAAAu3F,OAAAjxF,OAAA8pB,GAGA,MAAA3H,EAAA/iB,MAAAC,KAAA3F,KAAAu3F,OAAAloF,UAAA5O,MAGAgoB,EAEAzoB,KAAAqwG,MAAA5nF,GAGAzoB,KAAAowB,KAAAs+E,YAIA1uG,KAAAu3F,OAAAjxF,OAAA8pB,GAUAvwB,eAAAojB,GACAA,IACAjjB,KAAAu3F,OAAA/6F,IAAAwD,KAAAmwG,aAAAltF,SAAAA,GAGAjjB,KAAAowB,KAAAkgF,IAAAtwG,KAAAuwG,uBAYA1wG,OAAAuwB,KAASA,EAAAogF,iBAAAA,EAAA,KACTxwG,KAAAowB,KAAAxW,UAAA42F,EAEAxwG,KAAAowB,KAAAwwD,QAAAxuE,IAAAge,GACApwB,KAAAowB,KAAAkgF,IAAAtwG,KAAAuwG,uBAUA1wG,sBACA,IAAAojB,EAAA89E,GAAA/gG,KAAAu3F,OAAAloF,UAAA4T,SAUA,OAPAA,IAAAA,EAAA+oF,UAEA/oF,EAAA7mB,OAAAmiC,UAA+Btb,GAC/B+oF,QAAAhsG,KAAAkwG,mBAIAjtF;;;;;ACrNA,SAAAwtF,GAAA/nD,GACA,MAAAgoD,EAAAhoD,EAAAO,QAAAzsD,IAAA,qBAEA,GAAA8qG,GAAA5+C,EAAA45B,QAAAlyD,KAAAza,SAAA4M,WAAA,CACA,MAAAU,EAAA0tF,GAAAjoD,GAEAgoD,EAAAE,eAAA3tF,IAYA,SAAA0tF,GAAAjoD,GACA,MAAAsrC,EAAAtrC,EAAA45B,QAAAlyD,KACA09E,EAAAH,GAAAG,iBAEA,OACAztG,OAAA2zF,EAAA3jE,aAAA6M,UAAA82D,EAAAr+E,SAAA4M,UAAAmgC,sBACAqpD,WACA+B,EAAAK,gBACAL,EAAAM,oBACAN,EAAAO,oBACAP,EAAAE,gBACAF,EAAAG,oBACAH,EAAAI;;;;SCxBA2C,WAAAlhB,GAIAxlC,sBACA,OAAA8lD,IAMApwG,OACAG,KAAAurG,gBACAvrG,KAAA8wG,cASAjxG,gBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAEAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,uBAAAiwE,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA,wBACA4zB,EAAA,IAAAwpE,GAAAvX,GAYA,OAVAjyD,EAAA/pB,KACAojB,MAAAwiC,EAAA,iCACAouC,KAAA0W,GAAAtxF,EACA66E,SAAA,IAGAlqE,EAAA/N,KAAA,aAAAnc,GAAAklD,EAAA,aAEAprD,KAAAsD,SAAA8sB,EAAA,UAAA,IAAApwB,KAAAgxG,aAEA5gF,IAUAvwB,cACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAt4B,EAAAs4B,EAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SAQA3V,KAAAixG,SAAAjxG,KAAA0oD,OAAAO,QAAAzsD,IAAA,qBAOAwD,KAAAkxG,MAAA,IAAA/F,GAAAziD,EAAA25B,QAGAriF,KAAAkxG,MAAAh/E,SAEAlyB,KAAAsD,SAAAtD,KAAAkxG,MAAA,SAAA,KACAxoD,EAAA2C,QAAA,wBACA7+C,SAAAxM,KAAAkxG,MAAA9F,aAAAT,UAAAnzF,QAAA9a,QAGAsD,KAAAmxG,WAAA,KAGAnxG,KAAAsD,SAAAtD,KAAAkxG,MAAA,SAAA,KACAlxG,KAAAmxG,WAAA,KAIAnxG,KAAAkxG,MAAA1uB,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACA5vC,KAAAmxG,WAAA,GACAvhE,MAIA5vC,KAAAsD,SAAA8sB,EAAA,SAAA,KACAk3E,GAAAhX,EAAA/tE,WAEIviB,KAAAoxG,YACJX,GAAA/nD,GAFA1oD,KAAAmxG,WAAA,KAOA9G,IACA5mG,QAAAzD,KAAAkxG,MACA5G,UAAA,IAAAtqG,KAAAoxG,WACA7G,iBAAAvqG,KAAAkxG,MAAA15F,SACApU,SAAA,IAAApD,KAAAmxG,cASAtxG,YACA,GAAAG,KAAAoxG,WACA,OAGA,MAAA1oD,EAAA1oD,KAAA0oD,OACA0C,EAAA1C,EAAA4C,SAAA9uD,IAAA,wBACA4uG,EAAAprG,KAAAkxG,MAAA9F,aAEAprG,KAAAixG,SAAAb,QAAApwG,KAAAkxG,QACAlxG,KAAAixG,SAAA7+F,KACAge,KAAApwB,KAAAkxG,MACAjuF,SAAA0tF,GAAAjoD,KASA0iD,EAAA1uG,MAAA0uG,EAAAT,UAAAnzF,QAAA9a,MAAA0uD,EAAA1uD,OAAA,GAEAsD,KAAAkxG,MAAA9F,aAAAP,SASAhrG,UAAAwxG,GACArxG,KAAAoxG,aAIApxG,KAAAixG,SAAAxlF,OAAAzrB,KAAAkxG,OAEAG,GACArxG,KAAA0oD,OAAA45B,QAAAlyD,KAAA/H,SAWA+oF,iBACA,OAAApxG,KAAAixG,SAAAd,aAAAnwG,KAAAkxG;;;;SC1KAI,WAAA3hB,GAIAxlC,sBACA,OAAAigD,GAAAyG,IAMA7nD,wBACA,MAAA;;;;SCVAuoD,WAAA5hB,GAIAxlC,sBACA,OAAAs9C,GAAAgB,GAAA6I,IAMAtoD,wBACA,MAAA;;;;SCIAwoD,WAAA1mB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAOAriF,KAAAyiG,WAAA,IAAA7I,GAAAvX,GAQAriF,KAAAyxG,eAAA,IAAAC,GAAArvB,GAWAriF,KAAAyxG,eAAApvF,KAAA,gBAAAnc,GAAAlG,MAQAA,KAAAyxG,eAAApvF,KAAA,sBAAAnc,GAAAlG,MAcAA,KAAAyxG,eAAAnvD,SAAA,QAAAp8C,GAAAlG,MAEAA,KAAA4rF,aACAziF,IAAA,OACA6Q,YACAzC,MAAA,yBAEAlZ,UACA2B,KAAAyiG,WACAziG,KAAAyxG,kBAIAzxG,KAAAyiG,WAAA9hF,GAAA,UAAA,KACA3gB,KAAAyxG,eAAAxT,SAOAp+F,QACAG,KAAAyiG,WAAAp6E,eAUAqpF,WAAA5mB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAWAriF,KAAAqG,IAAA,gBAQArG,KAAAqG,IAAA,sBAAA,GAEA,MAAAgc,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,QAEA6Q,YACAzC,OACA,aAEAzO,KAAA,OACAqxF,SAAA,KACAwX,OAAAtvF,EAAAnc,GAAA,gBACA0rG,SAAAvvF,EAAAnc,GAAA,uBAGAya,IAEA42B,OAAAl1B,EAAAnc,GAAA,KACAlG,KAAAwX,SAAAxX,KAAAwX,QAAAs4E,OAAA9vF,KAAAwX,QAAAs4E,MAAA7qF,QACAjF,KAAA+G,KAAA,OAAA/G,KAAAwX,QAAAs4E,OAGA9vF,KAAAwX,QAAA9a,MAAA,QASAmD,OACAG,KAAAwX,QAAA4iF;;;;;ACrKA,SAAAyX,GAAA1W,GAGA,MAFA,8BAEApxF,KAAAoxF,EAAAryF,MAkBA,SAAAgpG,GAAAvvF,GACA,MAAAqmF,EAAArmF,EAAAmgC,qBAEA,GAAAkmD,EACA,OAAA3vD,GAAAj1B,YAAA4kF,GAGA,MAAAjH,EAAAp/E,EAAAkgC,oBAAAxkC,OAAAvhB,MAEA,GAAAilG,EAAA,CAGA,GAAAA,EAAAnoF,QACA,OAAAy/B,GAAA1xB,SAAAo6E,GAGA,MAAAttB,EAAAp7B,GAAAj1B,YAAA29E,GAGA,OAAAp/E,EAAA8F,MAAAy4B,WAAAuzB,GACAA,EAIAp7B,GAAA30B,aAAAq9E,GAGA,OAAAp/E,EAAA8F;;;;SC7CA0pF,WAAApiB,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAGAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,cAAAiwE,IACA,MAAAjyD,EAAA,IAAAohF,GAAAnvB,GACAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA,eAyBA,OAvBA4zB,EAAA/pB,KACA2rG,aAAA,UACAC,oBAAA,IAGA7hF,EAAAqyE,WAAAp8F,KACAojB,MAAAwiC,EAAA,gBACAouC,KAAA6X,GAAAzyF,EACA66E,SAAA,IAGAlqE,EAAAqyE,WAAApgF,KAAA,aAAAnc,GAAAklD,GAEAh7B,EAAAzP,GAAA,OAAA,CAAAC,EAAAkvE,KACA,IAAA,MAAAqL,KAAAz1F,MAAAC,KAAAmqF,GAAA,CACA,MAAAqiB,EAAAL,GAAAppD,EAAAxH,MAAAvrC,SAAA4M,WAEAsvF,GAAA1W,IACAzyC,EAAA2C,QAAA,eAAsC8vC,KAAAA,EAAAgX,SAAAA,OAKtC/hF;;;;;MCjCAgiF,WAAAziB,GAIA9vF,YAAA6oD,GACAlnD,MAAAknD,GAQA1oD,KAAA+qG,YAAA,2BAAyCtN,mBAAA4U,GAAA5yF,GAMzC5f,OACAG,KAAA0oD,OAGA45B,QAAA96B,mBAAA7mC,GAAA,+BAAA,IAAApd,IAAAvD,KAAAsyG,sBAAA/uG,IAWA1D,mBAAA+gB,EAAAxf,EAAAg9C,GACA,MAAAsK,EAAA1oD,KAAA0oD,OACAw/C,EAAA9mG,EAAAkW,KACAi7F,EAAArK,EAAAlwF,aAAA,YAEA,IAAAomC,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,QAAAs2G,EACA,OAGA,MAAAC,EAAA9pD,EAAAO,QAAAzsD,IAAAk/F,IACAqP,EAAA/qG,KAAA+qG,YACAvO,EAAAp7F,EAAAy9C,kBACA4zD,EAAA/pD,EAAA45B,QAAAtlC,OAAAJ,cAAAsrD,GACApiD,EAAA1H,EAAAzxB,OAGA,GAAA,WAAA6vE,EAAA,CACA12C,EAAA3uB,UAAA,YAAA,uBAAA,+BAAAs7E,GACA,MAAAC,EAAAD,EAAAh9F,SAAA,GAGA,YAFAqwC,EAAA51B,aAAA,MAAA66E,EAAA2H,GAMA,GAAA,aAAAlW,EAAA,CACA,MAAAX,EAAA2W,EAAA7W,QAAAn/F,IAAA+1G,GAEA,GAAA1W,EAAA,CACA,MAAA8W,EAqCA,SAAAhmF,GACA,MAAAgmF,EAAAhmF,EAAAw6B,gBAAA,OAAqD5vC,MAAA,oBAGrD,OAFAoV,EAAAk6E,kBAAA+L,IAAA,EAAAD,GAEAA,EAzCAE,CAAA/sD,GAEAA,EAAAxuB,aAAA,uBAAA,+BAAAm7E,GACA3sD,EAAAhzB,OAAA5P,GAAAqE,SAAAkrF,EAAA,OAAAE,GAGA9W,EAAAl7E,GAAA,yBAAA,CAAAC,EAAA3kB,EAAAS,KACAgsD,EAAA45B,QAAAlyD,KAAAmnB,OAAA5qB,IACAA,EAAAuK,SAAA,QAAAx6B,EAAA,IAAAi2G,OAKA,OAIA,MAAAA,EAiCA,SAAAG,GACA,IAAA,MAAA34F,KAAA24F,EAAA14F,cACA,GAAAD,EAAA+H,kBAAA0wF,IACA,OAAAz4F;;;;GApCA44F,CAAAN,GAEAE,EACA7sD,EAAAr6B,OAAA5F,GAAA+D,SAAA+oF,IAEA7sD,EAAAxuB,YAAA,uBAAAm7E,GAGA3sD,EAAAxuB,aAAA,YAAA,+BAAAm7E,IAKA,MAAAG,GAAA3vG,OAAA,sBChGA+vG,WAAA/gB,GAYApyF,QAAAwD,GACA,MAAAqlD,EAAA1oD,KAAA0oD,OACAnpB,EAAAmpB,EAAAxH,MAAAvrC,SACAwlF,EAAA93F,EAAA83F,KACAqX,EAAA9pD,EAAAO,QAAAzsD,IAAAk/F,IAEAhzC,EAAAxH,MAAA3J,OAAA5qB,IACA,MAAAkvE,EAAA2W,EAAAS,aAAA9X,GAGA,IAAAU,EACA,OAGA,MAAAsO,EAAA,IAAA1xD,GAAA,SACA85D,SAAA1W,EAAAr1F,KAGA,IAAA0sG,EAGAA,EADA7vG,EAAA8uG,SACA,IAAAlyD,IAAA,IAAA3F,GAAAj3C,EAAA8uG,YAEA5yE,EAAAhd,UAGAmmC,EAAAxH,MAAA4wC,cAAAqY,EAAA+I,GAGA/I,EAAA90F,QACAsX,EAAAuI,aAAAolB,GAAA1wB,SAAAugF;;;;SCrCAgJ,WAAAxjB,GAIA3mC,wBACA,MAAA,eAMAnpD,OAEAG,KAAA2gB,GAAA,eAAA,CAAAC,EAAAxf,KACA9F,OAAA83G,MAAAhyG,EAAAD,WACMuB,SAAA,WAyBN7C,YAAAsB,EAAAC,MACApB,KAAAqzG,mBACAlyG,QAAAA,EACA2H,KAAA,UACAwqG,UAAAlyG,EAAAkyG,UACAC,MAAAnyG,EAAAmyG,QA0BA1zG,SAAAsB,EAAAC,MACApB,KAAAqzG,mBACAlyG,QAAAA,EACA2H,KAAA,OACAwqG,UAAAlyG,EAAAkyG,UACAC,MAAAnyG,EAAAmyG,QAiDA1zG,YAAAsB,EAAAC,MACApB,KAAAqzG,mBACAlyG,QAAAA,EACA2H,KAAA,UACAwqG,UAAAlyG,EAAAkyG,UACAC,MAAAnyG,EAAAmyG,QAcA1zG,kBAAAuB,GACA,MAAA+B,UAAwB/B,EAAA0H,QAAY1H,EAAAkyG,cAA2BlyG,EAAAkyG,YAAiB,IAEhFtzG,KAAA+G,KAAA5D,GACAhC,QAAAC,EAAAD,QACA2H,KAAA1H,EAAA0H,KACAyqG,MAAAnyG,EAAAmyG,OAAA;;;;SC1JAC,WAAA7jB,GAIAxlC,sBACA,OAAAuxC,GAAAyX,IAMAtzG,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAnpB,EAAAmpB,EAAAxH,MAAAvrC,SACAwrC,EAAAuH,EAAAxH,MAAAC,OACAqxD,EAAA9pD,EAAAO,QAAAzsD,IAAAk/F,IAgLA,IAAAhL;;;;GA7KAvvC,EAAA1vB,OAAA,SACAy8B,iBAAA,WAAA,kBAIAxF,EAAA4C,SAAAl5C,IAAA,cAAA,IAAA4gG,GAAAtqD,IAGAA,EAAA45B,QAAAlyD,KAAAza,SAAAgL,GAAA,iBAAA,CAAAC,EAAAxf,KAGA,GAkKAsvF,EAlKAtvF,EAAAsvF,aAmKAhrF,MAAAC,KAAA+qF,EAAA1rD,OAAAlB,SAAA,cAAA,KAAA4sD,EAAAP,QAAA,aAlKA,OAGA,IAAAsjB,EAAA,IAAAxzD,GACA7+C,EAAAovF,aAAAvlF,IAAA+1B,GAAA0nB,EAAA45B,QAAAtlC,OAAA4K,aAAA5mB,KAGA,IAAA,MAAAm6D,KAAA/5F,EAAAsvF,aAAAZ,MAAA,CACA,MAAAqiB,EAAAL,GAAA2B,GAEA5B,GAAA1W,KACAzyC,EAAA2C,QAAA,eAAqC8vC,KAAAA,EAAAgX,SAAAA,IACrCvxF,EAAA3e,QAKAwxG,EAAAl0E,EAAAhd,aAKAmmC,EAAA45B,QAAAlyD,KAAAza,SAAAgL,GAAA,WAAA,CAAAC,EAAAxf,KACAA,EAAAmsC,mBAGAhO,EAAA5e,GAAA,SAAA,KACA,MAAA62D,EAAAj4C,EAAA+e,OAAAC,YAA2C+4B,2BAAA,IAE3C,IAAA,MAAAhvE,KAAAkvE,EACA,GAAA,UAAAlvE,EAAAQ,MAAA,SAAAR,EAAArM,KAAA,CACA,MAAAqb,EAAAhP,EAAA2a,SAAA6B,UACA4uF,EAAA,cAAAprG,EAAA2a,SAAAjoB,KAAA2nB,SAGA4vF,EAAAj7F,EAAAU,aAAA,YAEA,IAAAu6F,EACA,SAIA,MAAA1W,EAAA2W,EAAA7W,QAAAn/F,IAAA+1G,GAEA,IAAA1W,EACA,SAGA6X,EAEA7X,EAAAJ,QACM,QAAAI,EAAAW,QAENx8F,KAAA2zG,MAAA9X,EAAAvkF,MAeAzX,MAAAg8F,EAAAsO,GACA,MAAAzhD,EAAA1oD,KAAA0oD,OACAxH,EAAAwH,EAAAxH,MACA+K,EAAAvD,EAAA25B,OAAAp2B,EACAumD,EAAA9pD,EAAAO,QAAAzsD,IAAAk/F,IACAkY,EAAAlrD,EAAAO,QAAAzsD,IAAA22G,IAyEA,SAAAU,IACA3yD,EAAAyC,cAAA,cAAAh3B,IACAA,EAAA0K,gBAAA,WAAA8yE,GACAx9E,EAAA0K,gBAAA,eAAA8yE,KAGAqI,EAAAsB,cAAAjY,GA7EA36C,EAAAyC,cAAA,cAAAh3B,IACAA,EAAAuD,aAAA,eAAA,UAAAi6E,KAGAtO,EAAAY,OACAvyC,KAAA9oD,IACA,MACAsxG,EADAhqD,EAAA45B,QAAAtlC,OAAAJ,cAAAutD,GACA10F,SAAA,GACAqtE,EAAA+Y,EAAAa,SAUA,OARAh0C,EAAA45B,QAAAlyD,KAAAmnB,OAAA5qB,IACAA,EAAAuD,aAAA,MAAA9uB,EAAAsxG,KAGAxxD,EAAAyC,cAAA,cAAAh3B,IACAA,EAAAuD,aAAA,eAAA,YAAAi6E,KAGArnB,IAEA54B,KAAA9oD,IACA8/C,EAAAyC,cAAA,cAAAh3B,IACAA,EAAAonF,eAA4BC,aAAA,WAAAlM,IAAA1mG,EAAAi9F,SAA8C8L,GAG1E,IAAA8J,EAAA,EACA,MAAAC,EAAA93G,OAAAyE,KAAAO,GAEAmqB,OAAAxqB,IACA,MAAA29B,EAAAhiB,SAAA3b,EAAA,IAEA,IAAAozG,MAAAz1E,GAGA,OAFAu1E,EAAA5xG,KAAA+a,IAAA62F,EAAAv1E,IAEA,IAKAzzB,IAAAlK,MAAsBK,EAAAL,MAAiBA,MAGvC0Y,KAAA,MAEA,IAAAy6F,GACAvnF,EAAAuD,aAAA,UACA9uB,KAAA8yG,EACAx1E,MAAAu1E,GACO9J,KAIP0J,MAEAnpD,MAAA0pD,IAEA,SAAAvY,EAAAW,QACAoX,EAAAS,YAAAD,GACAb,MAAAtnD,EAAA,iBACAqnD,UAAA,WAIAO,IAGA3yD,EAAAyC,cAAA,cAAAh3B,IACAA,EAAAlB,OAAA0+E,cCzKAmK,WAAA3kB,GAIA3mC,wBACA,MAAA,cAMAmB,sBACA,OAAAqpD,GAAAzB,GAAAK;;;;;;;;;MCnBAmC,WAAAtiB,GAYApyF,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MAEAG,EAAA0/C,GADA7/C,EAAAvrC,SACA4M,UAAAkgC,qBAEAziD,KAAAtD,QAAA2kD,GAAAA,EAAAxlC,GAAA,aACA7b,KAAAymC,YAAA4a,GAAAmzD,GAAAnzD,EAAAH,EAAAC,QAYAthD,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MACAvrC,EAAAurC,EAAAvrC,SAEAurC,EAAA3J,OAAA5qB,IACA,MAAA00E,GAAAh+F,EAAAkf,WAAA5M,EAAA4M,WAAAkgC,oBAEA,IAAA,MAAApB,KAAAggD,GACAhgD,EAAAxlC,GAAA,cAAA24F,GAAAnzD,EAAAH,EAAAC,SACAx0B,EAAA8nF,OAAApzD,EAAA,gBAaA,SAAAmzD,GAAAnzD,EAAAF,GACA,OAAAA,EAAAmN,WAAAjN,EAAAhsC,OAAA,eAAA8rC,EAAA0D,SAAAxD;;;;SChDAqzD,WAAA/kB,GAIA3mC,wBACA,MAAA,YAMAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAxH,EAAAwH,EAAAxH,MACA9/C,EAAAsnD,EAAAtnD,KAEAsnD,EAAA4C,SAAAl5C,IAAA,YAAA,IAAAmiG,GAAA7rD,IAGAxH,EAAAC,OAAAuY,SAAA,aAAuC1I,eAAA,WAEvCtI,EAAA65B,WAAAggB,kBAAuCrhD,MAAA,YAAA9wB,KAAA,MAMvChvB,EAAA0zD,iBAAAn0C,GAAA,UAAA,CAAAC,EAAAxf,EAAAg9C,KAEA,GAAAA,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,UAAwDr2D,KAAAmF,EAAAkxD,SAAAr2D,OAKxD,GAAAy4G,GAAAC,sBAAApsG,IAAAnH,EAAAkxD,SAAAr2D,MAAA,CACA,GAAAmF,EAAAkxD,SAAA94C,QACA,OAGA,MAAAkkE,EAAAt/B,EAAAzxB,OAAAqD,cAAA,aAKAsjC,EAAAlV,EAAAgU,qBAAAsrB,EAAAt8E,EAAA8xD,aAGA,IAAAI,EACA,OAIAlV,EAAAzxB,OAAAmG,OAAA4qD,EAAApqB,EAAArwC,UAGA,MAAA65B,WAAWA,GAAasB,EAAA8T,gBAAA9wD,EAAAkxD,SAAArZ,GAAA1xB,SAAAm2D,IAKxBt8E,EAAA07C,WAAA,IAAAxC,GAAArB,GAAA30B,aAAAo5D,GAAA5gC,EAAAr5B,KACAriB,EAAA8xD,YAAA9xD,EAAA07C,WAAAr5B,SAGImxF,GAAAxzG,EAAAkxD,SAAAlxD,EAAA8xD,YAAA9U,EAAA+C,UACJ//C,EAAAhF,OAAAmiC,OAAAn9B,EAAAyzG,GAAAzzG,EAAAkxD,SAAAlxD,EAAA8xD,YAAA9U,OAEM17C,SAAA,QAGNtB,EAAA0zD,iBAAAn0C,GAAA,OAAA,CAAAC,EAAAxf,EAAAg9C,KAEAh9C,EAAA07C,YAIA83D,GAAAxzG,EAAAkxD,SAAAlxD,EAAA8xD,YAAA9U,EAAA+C,UACA//C,EAAAhF,OAAAmiC,OAAAn9B,EAAAyzG,GAAAzzG,EAAAkxD,SAAAlxD,EAAA8xD,YAAA9U,OAEM17C,SAAA,WAONw+C,EAAAvrC,SAAAm/F,kBAAAnoF,GAAA3sB,KAAA+0G,yBAAApoF,IAEA+7B,EAAA/nC,GAAA,YAAA,KACAugC,EAAAyC,cAAA,cAAAh3B,GAAA3sB,KAAA+0G,yBAAApoF,MACMjqB,SAAA,WASN7C,yBAAA8sB,GACA,MAAAu0B,EAAAlhD,KAAA0oD,OAAAxH,MAEA,IAAA,MAAAv+B,KAAAu+B,EAAAvrC,SAAAq/F,eAAA,CACA,MAAAh6G,EAAAkmD,EAAAvrC,SAAAuhC,QAAAv0B,GAEA,GAAA3nB,EAAAwe,SAAA,cAAAxe,EAAA2nB,UAEAu+B,EAAAC,OAAAmN,WAAAtzD,EAAA,aAGA,OAFA2xB,EAAAsoF,cAAA,YAAAj6G,IAEA,IAsDA,SAAA65G,GAAAjkG,EAAAqS,EAAAm7B,GACA,MAAAs/B,EAAAt/B,EAAAzxB,OAAAqD,cAAA,aAGA,OADAouB,EAAAzxB,OAAAmG,OAAA4qD,EAAAz6D,GACAm7B,EAAA4T,YAAAphD,EAAAqoC,GAAA1xB,SAAAm2D,IAGA,SAAAk3B,GAAAlwG,EAAAue,EAAAk+B,GACA,MAAA4M,EAAA,IAAAV,GAAApqC,GAGA,QAAAk+B,EAAAmN,WAAAP,EAAA,gBAKA5M,EAAAmN,WAAAP,EAAA9pD,KAAA,aAAAS;;;;GAhCAgwG,GAAAC,sBAAA,IAAA17F,KACA,aACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,aCtKAi8F,WAAAjjB,GAOApyF,YAAA6oD,EAAAysD,GACA3zG,MAAAknD,GAmBA1oD,KAAAm1G,cAAAA,EAMAt1G,UACA,MAAAwhD,EAAA0/C,GAAA/gG,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAkgC,qBAEAziD,KAAAtD,QAAA2kD,GAAArhD,KAAAm1G,cAAArxE,SAAAud,EAAAplD,OAAAolD,EAAAplD,KACA+D,KAAAymC,YAAA4a,GAAArhD,KAAAm1G,cAAAvhF,KAAAwhF,GAAAC,GAAAh0D,EAAA+zD,EAAAp1G,KAAA0oD,OAAAxH,MAAAC,SAWAthD,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MACAvrC,EAAAurC,EAAAvrC,SAEA+mC,EAAAr5C,EAAA3G,MAEAsD,KAAAm1G,cAAArxE,SAAA4Y,IAIAwE,EAAA3J,OAAA5qB,IACA,MAAA00E,EAAA37F,MAAAC,KAAAgQ,EAAA4M,UAAAkgC,qBACAl3B,OAAA81B,GACAg0D,GAAAh0D,EAAA3E,EAAAwE,EAAAC,SAGA,IAAA,MAAAE,KAAAggD,EACAhgD,EAAAxlC,GAAA6gC,IACA/vB,EAAA8nF,OAAApzD,EAAA3E,MAcA,SAAA24D,GAAAh0D,EAAA+zD,EAAAj0D,GACA,OAAAA,EAAAmN,WAAAjN,EAAAhsC,OAAA+/F,KAAAj0D,EAAA0D,SAAAxD;;;;GCrFA,MAAAi0D,GAAA,kBASAC,WAAA5lB,GAIA9vF,YAAA6oD,GACAlnD,MAAAknD,GAEAA,EAAAtD,OAAAhqD,OAAA,WACAiI,UACK69C,MAAA,YAAAqyD,MAAA,YAAAh8F,MAAA,yBACA2pC,MAAA,WAAA9wB,KAAA,KAAAmjF,MAAA,YAAAh8F,MAAA,wBACA2pC,MAAA,WAAA9wB,KAAA,KAAAmjF,MAAA,YAAAh8F,MAAA,wBACA2pC,MAAA,WAAA9wB,KAAA,KAAAmjF,MAAA,YAAAh8F,MAAA,0BAQL4yC,sBACA,OAAAuqD,IAMA70G,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACArlD,EAAAqlD,EAAAtD,OAAA5oD,IAAA,mBAEA24G,KAEA,IAAA,MAAAK,KAAAnyG,EAEAmyG,EAAAt0D,QAAAo0D,KAEA5sD,EAAAxH,MAAAC,OAAAuY,SAAA87C,EAAAt0D,OACA8P,eAAA,WAGAtI,EAAA65B,WAAAggB,iBAAAiT,GAEAL,EAAAlxG,KAAAuxG,EAAAt0D,QAKAwH,EAAA4C,SAAAl5C,IAAA,UAAA,IAAA8iG,GAAAxsD,EAAAysD,IAMAt1G,YAGA,MAAA6oD,EAAA1oD,KAAA0oD,OACA+sD,EAAA/sD,EAAA4C,SAAA9uD,IAAA,SACA6G,EAAAqlD,EAAAtD,OAAA5oD,IAAA,mBAEAi5G,GACAz1G,KAAAsD,SAAAmyG,EAAA,eAAA,CAAA70F,EAAAxf,KACA,MAAA+xB,EAAAu1B,EAAAxH,MAAAvrC,SAAA4M,UAAA0S,mBAAA5f,OACAhS,EAAAuwB,KAAA4hF,GAAAriF,EAAAtX,GAAA25F,EAAAt0D,UAEA/tB,EAAAtX,GAAAy5F,KAAA,IAAAniF,EAAA5Z,YACAnY,EAAAurB,OAAA8nF,OAAAthF,EAAAmiF;;;;SCvEAI,GAOA71G,YAAAma,EAAAmF,GAEAA,GACAN,GAAA7e,KAAAmf,GAIAnF,GACAha,KAAAqG,IAAA2T,IAKAhT,EAAA0uG,GAAA70F;;;;;MCpBA80F,WAAA7qB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aAQAnrF,KAAAqG,IAAA,aAAA,GAYArG,KAAA3B,SAAA2B,KAAAirF,mBAEAjrF,KAAA4rF,aACAziF,IAAA,MAEA6Q,YACAzC,OACA,WACA,qBACA8K,EAAA6kE,GAAA,YAAA,gCAIA7oF,SAAA2B,KAAA3B,SAEAsiB,IAGAi1F,YAAAvzF,EAAAnc,GAAA0a,GAAAA,EAAA2sB,qBAUA1tC,QACAG,KAAA3B,SAAA4G,QACAjF,KAAA3B,SAAAmqB,MAAAH,QASAxoB,YACA,GAAAG,KAAA3B,SAAA4G,OAAA,CACA,MAAAuuB,EAAAxzB,KAAA3B,SAAAoqB,KAEA,mBAAA+K,EAAAm7D,UACAn7D,EAAAm7D,YAEAn7D,EAAAnL;;;;SC1BAwtF,WAAA/qB,GAUAjrF,YAAAwiF,EAAAogB,EAAAqT,GACAt0G,MAAA6gF,GAEA,MAAAhgE,EAAAriB,KAAAmrF,aAQAnrF,KAAAyiG,WAAAA,EAgBAziG,KAAA81G,UAAAA,EAQA91G,KAAAqG,IAAA,UAAA,GAUArG,KAAAqG,IAAA,aAAA,GAQArG,KAAA4kF,aAAA,IAAAR,GAYApkF,KAAAwiF,WAAA,IAAAV,GAEA9hF,KAAA4rF,aACAziF,IAAA,MAEA6Q,YACAzC,OACA,cACA8K,EAAAnc,GAAA,YAAAugC,GAAAA,EAAA,GAAA,iBAIApoC,UACAokG,EACAqT,KAIArT,EAAApW,gBACAryE,YACAzC,OACA,0BA4CA1X,SACA2B,MAAA0wB,SAGAlyB,KAAAsD,SAAAtD,KAAAyiG,WAAA,OAAA,KACAziG,KAAA+1G,QAAA/1G,KAAA+1G,SAIA/1G,KAAA81G,UAAAzzF,KAAA,aAAAnc,GAAAlG,KAAA,UAGAA,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAGAxX,KAAA4kF,aAAAxyE,IAAApS,KAAAwX,SAEA,MAAAw+F,EAAA,CAAA50G,EAAAwuC,KACA5vC,KAAA+1G,SACA/1G,KAAAyiG,WAAAp6E,QACAroB,KAAA+1G,QAAA,EACAnmE,MAKA5vC,KAAAwiF,WAAAn8E,IAAA,YAAA,CAAAjF,EAAAwuC,KAEA5vC,KAAAyiG,WAAAh8D,YAAAzmC,KAAA+1G,SACA/1G,KAAA+1G,QAAA,EACAnmE,OAKA5vC,KAAAwiF,WAAAn8E,IAAA,aAAA,CAAAjF,EAAAwuC,KACA5vC,KAAA+1G,QACAnmE,MAKA5vC,KAAAwiF,WAAAn8E,IAAA,YAAA2vG,GACAh2G,KAAAwiF,WAAAn8E,IAAA,MAAA2vG,GAMAn2G,QACAG,KAAAyiG,WAAAp6E;;;;;MC7NA4tF,WAAArc,GAIA/5F,YAAAwiF,GACA7gF,MAAA6gF,GAQAriF,KAAAk2G,UAAAl2G,KAAAm2G,mBAGAn2G,KAAAsiD,SAAA,WAAAp8C,GAAAlG,KAAA,QAMAH,SACA2B,MAAA0wB,SAEAlyB,KAAA3B,SAAA+T,IAAApS,KAAAk2G,WASAr2G,mBACA,MAAAq2G,EAAA,IAAA/c,GAUA,OARA+c,EAAAt1B,QAAAw1B,GAAA32F,EAEAy2F,EAAA7pB,gBACAryE,YACAzC,MAAA,wBAIA2+F;;;;SCzDAG,WAAAvrB,GAIAjrF,cACA2B,QAQAxB,KAAAwa,MAAAxa,KAAAirF,mBAQAjrF,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAAwiF,WAAA,IAAAV,GASA9hF,KAAAsuF,aAAA,IAAAV,IACAE,WAAA9tF,KAAAwa,MACAoqE,aAAA5kF,KAAA4kF,aACAiJ,iBAAA7tF,KAAAwiF,WACA5kD,SAEA2wD,cAAA,UAGAC,UAAA,eAIAxuF,KAAA4rF,aACAziF,IAAA,KAEA6Q,YACAzC,OACA,WACA,YAIAlZ,SAAA2B,KAAAwa,QAOA3a,SACA2B,MAAA0wB,SAGA,IAAA,MAAA5a,KAAAtX,KAAAwa,MACAxa,KAAA4kF,aAAAxyE,IAAAkF,EAAAE,SAGAxX,KAAAwa,MAAAmG,GAAA,MAAA,CAAAC,EAAAtJ,KACAtX,KAAA4kF,aAAAxyE,IAAAkF,EAAAE,WAGAxX,KAAAwa,MAAAmG,GAAA,SAAA,CAAAC,EAAAtJ,KACAtX,KAAA4kF,aAAAn5D,OAAAnU,EAAAE,WAIAxX,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAMA3X,QACAG,KAAAsuF,aAAAI,aAMA7uF,YACAG,KAAAsuF,aAAAK;;;;SCxGA2nB,WAAAxrB,GAIAjrF,cACA2B,QASAxB,KAAAqG,IAAA,YAAA,GAQArG,KAAAwiF,WAAA,IAAAV,GAEA,MAAAz/D,EAAAriB,KAAAmrF,aAEAnrF,KAAA4rF,aACAziF,IAAA,KAEA6Q,YACAzC,OACA,gBACA8K,EAAAnc,GAAA,SACAmc,EAAA6kE,GAAA,WAAA,yBAEA5uE,MAAA+J,EAAAnc,GAAA,SACAi0F,SAAA93E,EAAAnc,GAAA,aAGA7H,WAEA6tC,KAAA7pB,EAAAnc,GAAA,WAIAya,IACAy5E,MAAA/3E,EAAAnc,GAAA,cA0CArG,SACA2B,MAAA0wB,SAEA,MAAAqkF,EAAA,CAAAn1G,EAAAwuC,KACA5vC,KAAA+G,KAAA,WACA6oC,KAGA5vC,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAGAxX,KAAAwiF,WAAAn8E,IAAA,QAAAkwG,GACAv2G,KAAAwiF,WAAAn8E,IAAA,QAAAkwG,GAMA12G,QACAG,KAAAwX,QAAA6Q;;;;;ACzCA,SAAAmuF,GAAAn0B,EAAAo0B,EAAAR,IACA,MAAAxT,EAAA,IAAAgU,EAAAp0B,GAEAyzB,EAAA,IAAAH,GAAAtzB,GACAq0B,EAAA,IAAAb,GAAAxzB,EAAAogB,EAAAqT,GAYA,OAVArT,EAAApgF,KAAA,aAAAnc,GAAAwwG,GAEAjU,aAAAwT,GACAxT,EAAApgF,KAAA,QAAAnc,GAAAwwG,EAAA,UAEAjU,EAAAyT,UAAA7zF,KAAA,QAAAnc,GAAAwwG,EAAA,UAiGA,SAAAA,IASA,SAAAA,GACAA,EAAA/1F,GAAA,SAAA,KACA0pF,IACA5mG,QAAAizG,EACApM,UAAA,IAAAoM,EAAAX,OACA3yG,SAAA,KACAszG,EAAAX,QAAA,GAEAxL,iBAAAmM,EAAAl/F,cAhBAm/F,CAAAD,GAwBA,SAAAA,GAEAA,EAAA/1F,GAAA,UAAA,KACA+1F,EAAAX,QAAA,IA1BAa,CAAAF,GAiCA,SAAAA,GAEAA,EAAAl0B,WAAAn8E,IAAA,YAAA,CAAAjF,EAAAwuC,KACA8mE,EAAAX,SACAW,EAAAZ,UAAAztF,QACAunB,OAKA8mE,EAAAl0B,WAAAn8E,IAAA,UAAA,CAAAjF,EAAAwuC,KACA8mE,EAAAX,SACAW,EAAAZ,UAAAnnB,YACA/+C,OA7CAinE,CAAAH,GAjGAI,CAAAJ,GAEAA,EAuEA,SAAAK,GAAAL,EAAAl8F,GACA,MAAA6nE,EAAAq0B,EAAAr0B,OACA20B,EAAAN,EAAAM,SAAA,IAAAX,GAAAh0B,GAEA20B,EAAAx8F,MAAA+tC,OAAA/tC,GAAAsR,MAAAmrF,IACA,MAAA3/F,EAAA,IAAAg/F,GAAAj0B,GAKA,OAFA/qE,EAAA+K,QAAAjmB,OAAAyE,KAAAo2G,IAAA/wG,GAAA+wG,GAEA3/F,IAGAo/F,EAAAZ,UAAAz3G,SAAA+T,IAAA4kG,GAEAA,EAAAx8F,MAAA8nC,SAAA,WAAAp8C,GAAAwwG;;;;SClKAQ,WAAAvnB,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EACA5oD,EAAArD,KAAAm3G,uBACAC,EAAAnrD,EAAA,kBACAorD,EAAAprD,EAAA,WAGAvD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,UAAAiwE,IACA,MAAAi1B,KACAC,EAAA,IAAAjtF,GAEAktF,EAAA9uD,EAAA4C,SAAA9uD,IAAA,WACAi7G,EAAA/uD,EAAA4C,SAAA9uD,IAAA,aAEA8uD,GAAAksD,GAEA,IAAA,MAAAhC,KAAAnyG,EAAA,CACA,MAAA4zG,EAAA,IAAAvB,IACAjsF,MAAA+rF,EAAAjC,MACAh8F,MAAAi+F,EAAAj+F,QAGA,cAAAi+F,EAAAt0D,OACA+1D,EAAA50F,KAAA,YAAAnc,GAAAuxG,EAAA,SACAR,EAAA5wG,IAAA,cAAA,aACAilD,EAAArnD,KAAAwzG,KAEAR,EAAA50F,KAAA,YAAAnc,GAAAsxG,EAAA,QAAA96G,GAAAA,IAAA84G,EAAAt0D,OACA+1D,EAAA5wG,KACA8kD,YAAA,UACAusD,aAAAlC,EAAAt0D,SAKAq2D,EAAAnlG,IAAA6kG,GAEAK,EAAA9B,EAAAt0D,OAAAs0D,EAAAjC,MAGA,MAAAmD,EAAAF,GAAAn0B,GAiCA,OAhCA00B,GAAAL,EAAAa,GAEAb,EAAAjU,WAAAp8F,KACAsxG,MAAA,EACAC,UAAA,EACAtd,QAAA+c,IAGAX,EAAArqB,gBACAryE,YACAzC,OACA,0BAKAm/F,EAAAr0F,KAAA,aAAAzC,OAAA0rC,EAAA,YAAA,IAAAusD,IACAA,EAAAjkF,KAAA6S,GAAAA,IAGAiwE,EAAAjU,WAAApgF,KAAA,SAAAnc,GAAAsxG,EAAA,QAAAC,EAAA,QAAA,CAAA/6G,EAAAo7G,KACA,MAAAC,EAAAr7G,GAAAo7G,GAAA,YAEA,OAAAR,EAAAS,GAAAT,EAAAS,GAAAX,IAIAp3G,KAAAsD,SAAAozG,EAAA,UAAA91F,IACA8nC,EAAA2C,QAAAzqC,EAAAjgB,OAAAwqD,YAAAvqC,EAAAjgB,OAAA+2G,cAAuEh7G,MAAAkkB,EAAAjgB,OAAA+2G,mBAAiCn6G,GACxGmrD,EAAA45B,QAAAlyD,KAAA/H,UAGAquF,IAeA72G,uBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EACA+rD,GACAC,UAAAhsD,EAAA,aACAisD,YAAAjsD,EAAA,aACAksD,YAAAlsD,EAAA,aACAmsD,YAAAnsD,EAAA,cAGA,OAAAvD,EAAAtD,OAAA5oD,IAAA,mBAAAyO,IAAAuqG,IACA,MAAAjC,EAAAyE,EAAAxC,EAAAjC,OAOA,OALAA,GAAAA,GAAAiC,EAAAjC,QAEAiC,EAAAp5G,OAAAmiC,UAA8Bi3E,GAAWjC,MAAAA,KAGzCiC;;;;;;;;GC1HA,MAAA6C,GAAA,IAAAztF,QAYA,SAAA0tF,GAAAloF,EAAA5Y,EAAA+gG,EAAAC,GACA,MAAA7iG,EAAAya,EAAAza,SAGA0iG,GAAA9vG,IAAAoN,KACA0iG,GAAAhyG,IAAAsP,EAAA,IAAAvP,KAGAuP,EAAAm/F,kBAAAnoF,IAkCA,SAAAhX,EAAAgX,GACA,MAAA8rF,EAAAJ,GAAA77G,IAAAmZ,GACA,IAAA8uC,GAAA,EAEA,IAAA,MAAAjtC,EAAAkhG,KAAAD,EACAE,GAAAhsF,EAAAnV,EAAAkhG,KACAj0D,GAAA,GAIA,OAAAA,GA5CAm0D,CAAAjjG,EAAAgX,KAIA0rF,GAAA77G,IAAAmZ,GAAAtP,IAAAmR,GAAqD+gG,gBAAAA,EAAAC,cAAAA,IAGrDpoF,EAAA8B,SA8CA,SAAAymF,GAAAhsF,EAAAnV,EAAAkhG,GACA,MAAA/iG,EAAA6B,EAAA7B,SACAu2B,EAAAwsE,EAAAH,gBACA,IAAA9zD,GAAA,EAGA,IAAA9uC,EACA,OAAA,EAIA6B,EAAAQ,aAAA,sBAAAk0B,IACAvf,EAAAuD,aAAA,mBAAAgc,EAAA10B,GACAitC,GAAA,GAGA,MACAr8B,EADAzS,EAAA4M,UACA6F,OACAowF,EAAAE,EAAAF,cAGA,GAAAA,IAAAA,IAMA,OALAhhG,EAAAY,SAAA,oBACAuU,EAAA2K,YAAA,iBAAA9f,GACAitC,GAAA,GAGAA,EAKA,MAAAo0D,GAAAnzG,MAAAC,KAAA6R,EAAA4C,eAAAwZ,KAAApc,IAAAA,EAAAqE,GAAA,cAGA,OAAAlG,EAAA2M,WAAAu2F,GACArhG,EAAAY,SAAA,oBACAuU,EAAAwK,SAAA,iBAAA3f,GACAitC,GAAA,GAGAA,IAIAo0D,GAAAzwF,GAAAA,EAAA/S,SAAAmC,EACAA,EAAAY,SAAA,oBACAuU,EAAAwK,SAAA,iBAAA3f,GACAitC,GAAA,GAGAjtC,EAAAY,SAAA,oBACAuU,EAAA2K,YAAA,iBAAA9f,GACAitC,GAAA,GAIAA;;;;GCjIA,MAAAq0D,GAAA71G,OAAA,gBAmCA,SAAA81G,GAAAC,GACA,IAAA,MAAAt0G,KAAAs0G,EAAA5+F,cACA,GAAA1V,aAAA+zC,IAAA,WAAA/zC,EAAAzI,KACA,OAAAyI,EAIA,OAAA,KAWA,SAAAu0G,GAAAzhG,GACA,MAAAnC,EAAAmC,EAAAnC,OAGA,MAAA,cAAAmC,EAAAvb,MAAAoZ,GAAA,UAAAA,EAAApZ,MAAAoZ,EAAA+C,SAAA,UACUnc,MAAA,GAGV;;;;SC/CAi9G,WAAAvpB,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAt4B,EAAAs4B,EAAA45B,QAAAlyD,KACA+wB,EAAAuH,EAAAxH,MAAAC,OACA//C,EAAAsnD,EAAAtnD,KACAkhF,EAAA55B,EAAA45B,QACAr2B,EAAAvD,EAAAuD,EAWA9K,EAAAuY,SAAA,WACA3J,QAAA,QACAQ,eAAA,SACAzC,SAAA,IAIApF,EAAAxH,MAAAvrC,SAAAm/F,kBAAAnoF,GAAA3sB,KAAAm5G,kCAAAxsF,IAGA+7B,EAAA65B,WAAAnsB,IAAA,UAAAhkD,IAAAqhD,IACArjC,KAAA6oF,GACA/3D,MAAA,aAKA9/C,EAAAomD,mBAAA7mC,GAAA,iBAAAy4F,GADAzsF,GAAAA,EAAAu6B,uBAAA,eACA,IAGA,MAAAmyD,ED9CA,SAAAjpF,EAAAmoF,GACA,OAAA5rF,IACA,MAAA1H,EAAA0H,EAAA2sF,sBAAA,cAIA,OAHA3sF,EAAAk6E,kBAAAiS,IAAA,EAAA7zF,GACAqzF,GAAAloF,EAAAnL,EAAAszF,GzCqHAtzF,EyCnHAA,GzCmHA0H,EyCnHAA,GzCoHAwK,SAAA,cAAAlS,GAGA0H,EAAAuD,aAAA,kBAAAjL,EAAAisB,WAAA,QAAA,OAAAjsB,GAGAA,EAAAtE,GAAA,oBAAA,CAAAC,EAAA9jB,EAAA+e,KACA8Q,EAAAuD,aAAA,kBAAArU,EAAA,QAAA,OAAAoJ,KAGAA,EAAAtE,GAAA,mBAAA,CAAAC,EAAA9jB,EAAA+e,KACAA,EACA8Q,EAAAwK,SAAA,sBAAAlS,GAEA0H,EAAA2K,YAAA,sBAAArS,KAIAA,GAnBA,IAAAA,EAAA0H,E0C3EA4sF,CAAAnpF,EAAA67B,EAAA,wBACAq2B,EAAA96B,mBAAA7mC,GAAA,iBAAAy4F,GAAAC,IAGA/2B,EAAA96B,mBAAA7mC,GACA,SACA3gB,KAAAw5G,sBAAAp4G,GAAAA,EAAAkW,OACI5U,SAAA,SAIJ4/E,EAAA96B,mBAAA7mC,GAAA,SAAA3gB,KAAAw5G,sBAAAp4G,GAAAA,EAAA6hB,SAAA5N,SAAwG3S,SAAA,SAGxG0tB,EAAAza,SAAAm/F,kBAAAnoF,GAAA3sB,KAAAy5G,yBAAA9sF,IAWA9sB,yBAAAimD,GACA,MAAA9I,EAAAh9C,KAAA0oD,OAAA45B,QAAAtlC,OACA08D,EAAA15G,KAAA25G,qBACA,IAAAC,EAGA,MAAAjyD,EAAA3nD,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UACAqmF,EAAAjhD,EAAAjF,qBAEA,GAAAkmD,GAAAA,EAAA/sF,GAAA,SAAA,CACA,MAAAg+F,EAAAd,GAAAnQ,GACAgR,EAAA58D,EAAAJ,cAAAi9D,GAIA,MACAA,EAAAC,GADAnyD,EAAA1yB,mBACA5f,QAOA,GALAwkG,IACAD,EAAA58D,EAAAJ,cAAAi9D,IAIAD,EAEA,OAAAF,EAEAA,IAAAE,EACAG,GAAAH,EAAA9zD,IAEAk0D,GAAAN,EAAA5zD,GACA9lD,KAAA25G,qBAAAC,EAEAG,GAAAH,EAAA9zD,KAGA9lD,KAAA25G,qBAAAC,EACAG,GAAAH,EAAA9zD,IAIA,GAAA4zD,EAAA,CACA,MAAAO,EAAAD,GAAAN,EAAA5zD,GAGA,OAFA9lD,KAAA25G,qBAAA,KAEAM,EAEA,OAAA,EAaAp6G,sBAAAq6G,GACA,MAAA,CAAAt5F,EAAAxf,EAAAg9C,KACA,MACAy7D,EAAAC,GADAI,EAAA94G,IAEA47C,EAAAh9C,KAAA0oD,OAAA45B,QAAAtlC,OACA8I,EAAA1H,EAAAzxB,OAEA,GAAAktF,EAAA,CACA,MAAAD,EAAA58D,EAAAJ,cAAAi9D,GAEAD,IACAC,EAAAtgG,WACAusC,EAAAxuB,YAAA,YAAAsiF,GAEA9zD,EAAA3uB,SAAA,YAAAyiF,MAeA/5G,kCAAA8sB,GACA,MACA6qD,EADAx3E,KAAA0oD,OAAAxH,MACAvrC,SAAA2oC,OAAAC,aAEA,IAAA,MAAAj2C,KAAAkvE,EACA,GAAA,UAAAlvE,EAAAQ,MAAA,SAAAR,EAAArM,KAAA,CACA,MAAAqb,EAAAhP,EAAA2a,SAAA6B,UAEA,IAAAi0F,GAAAzhG,GAGA,OAFAqV,EAAAwtF,cAAA,UAAA7iG,IAEA,IAaA,SAAA8hG,GAAA9zD,EAAAopD,GAAA,GACA,MAAA,CAAA9tF,EAAAxf,EAAAg9C,KACA,MAAAg8D,EAAAh5G,EAAAkW,KAGA,IAAA8iG,EAAA7gG,YAAAm1F,IAIAlH,GAAA4S,EAAA/kG,QAAA,CACA,IAAA+oC,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,UACA,OAGA,MAAAywF,EAAA3pD,EAAApB,OAAAJ,cAAAx7C,EAAA+lB,MAAA7J,MAAAjI,QACAukG,EAAAt0D,EAAAlH,EAAAzxB,QACAm5B,EAAA1H,EAAAzxB,OAGAytF,EAAA7gG,YACAusC,EAAA3uB,SAAA,YAAAyiF,GAeA,SAAAA,EAAAC,EAAA9R,EAAA3pD,GACA,MAAAltB,EAAAhO,GAAAqE,SAAAwgF,EAAA,OAEA3pD,EAAAzxB,OAAAmG,OAAA5B,EAAA0oF,GACAx7D,EAAApB,OAAApc,aAAAi5E,EAAAD,GAhBAS,CAAAT,EAAAx4G,EAAAkW,KAAAywF,EAAA3pD,KAwBA,SAAA07D,GAAAp1G,GACA,MACA41G,EADA51G,EAAAsR,cAAuCJ,aAAA,IACvC0V,KAAAuJ,GAAA,WAAAA,EAAA54B,MAEA,OAAAq+G,GAAAA,EAAAjlG,QAAA,SAAAilG,EAAAjlG,OAAApZ,KACAq+G,EAGA,KASA,SAAAN,GAAAM,EAAAx0D,GACA,OAAAw0D,EAAA/gG,aAAA+gG,EAAAliG,SAAA,eACA0tC,EAAA3uB,SAAA,YAAAmjF,IACA,GAYA,SAAAP,GAAAO,EAAAx0D,GACA,QAAAw0D,EAAAliG,SAAA,eACA0tC,EAAAxuB,YAAA,YAAAgjF,IACA;;;;;;;;;MC/QAC,WAAAtoB,GAOApyF,YAAA6oD,EAAA3uC,GACAvY,MAAAknD,GAQA1oD,KAAAw6G,eAAA,EAQAx6G,KAAA+Z,OAAAA,EAAAuS,OAAA,CAAAvS,EAAAzB,KACAyB,EAAAzB,EAAArc,MAAAqc,EAEAA,EAAAmiG,YACAz6G,KAAAw6G,cAAAliG,EAAArc,MAGA8d,OAOAla,UACA,MAAA2X,EAAAxX,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAmgC,qBAIA,GAFA1iD,KAAAymC,UAAA+gE,GAAAhwF,GAEAA,EAEG,GAAAA,EAAAO,aAAA,cAAA,CACH,MAAA2iG,EAAAljG,EAAAQ,aAAA,cACAhY,KAAAtD,QAAAsD,KAAA+Z,OAAA2gG,IAAAA,OAEA16G,KAAAtD,MAAAsD,KAAAw6G,mBALAx6G,KAAAtD,OAAA,EAmBAmD,QAAAwD,MACA,MAAA6lF,EAAA7lF,EAAA3G,MAEA,IAAAsD,KAAA+Z,OAAAmvE,GACA,OAGA,MAAAhoC,EAAAlhD,KAAA0oD,OAAAxH,MACAipD,EAAAjpD,EAAAvrC,SAAA4M,UAAAmgC,qBAEAxB,EAAA3J,OAAA5qB,IAGA3sB,KAAA+Z,OAAAmvE,GAAAuxB,UACA9tF,EAAA0K,gBAAA,aAAA8yE,GAEAx9E,EAAAuD,aAAA,aAAAg5D,EAAAihB;;;;GChBA,SAAAwQ,GAAA1+G,EAAA8d,GACA,IAAA,MAAAzB,KAAAyB,EACA,GAAAzB,EAAArc,OAAAA,EACA,OAAAqc;;;;;AClDA,MAAAsiG,IAEAC,MACA5+G,KAAA,OACAs3G,MAAA,kBACAlZ,KAAAygB,GAAAr7F,EACAg7F,WAAA,GAIAM,MACA9+G,KAAA,OACAs3G,MAAA,aACAlZ,KAAA2gB,GAAAv7F,EACA7F,UAAA,oBAIAqhG,WACAh/G,KAAA,YACAs3G,MAAA,qBACAlZ,KAAA6gB,GAAAz7F,EACA7F,UAAA,0BAIAuhG,aACAl/G,KAAA,cACAs3G,MAAA,iBACAlZ,KAAA+gB,GAAA37F,EACA7F,UAAA,4BAIAyhG,YACAp/G,KAAA,aACAs3G,MAAA,sBACAlZ,KAAA2gB,GAAAv7F,EACA7F,UAAA,4BAYA0hG,IACAT,KAAAC,GAAAr7F,EACAgf,KAAAy8E,GAAAz7F,EACAqyB,MAAAkpE,GAAAv7F,EACA87F,OAAAH,GAAA37F,GASA,SAAA+7F,GAAAC,MACA,OAAAA,EACAxwG,IAAAywG,IACAzwG,IAAAqN,GAAAlc,OAAAmiC,UAAkCjmB,IAQlC,SAAAojG,GAAApjG,GAEA,GAAA,iBAAAA,EAAA,CACA,MAAA4wE,EAAA5wE,EAGAsiG,GAAA1xB,GAEA5wE,EAAAlc,OAAAmiC,UAA4Bq8E,GAAA1xB,KAI5B94C,GAAAE,KACA,sEACKr0C,KAAAitF,IAIL5wE,GACArc,KAAAitF,SAOA,GAAA0xB,GAAAtiG,EAAArc,MAAA,CACA,MAAA0/G,EAAAf,GAAAtiG,EAAArc,MACA2/G,EAAAx/G,OAAAmiC,UAAyCjmB,GAEzC,IAAA,MAAAo7B,KAAAioE,EACArjG,EAAAtb,eAAA02C,KACAkoE,EAAAloE,GAAAioE,EAAAjoE,IAIAp7B,EAAAsjG,EASA,MAJA,iBAAAtjG,EAAA+hF,MAAAihB,GAAAhjG,EAAA+hF,QACA/hF,EAAA+hF,KAAAihB,GAAAhjG,EAAA+hF,OAGA/hF;;;;SCnIAujG,WAAAlsB,GAIAxlC,sBACA,OAAAs9C,IAMAz+C,wBACA,MAAA,oBAMAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAvH,EAAAuH,EAAAxH,MAAAC,OACA//C,EAAAsnD,EAAAtnD,KACAkhF,EAAA55B,EAAA45B,QAGA55B,EAAAtD,OAAAhqD,OAAA,gBAAA,OAAA,SAGA,MAAA2e,EAAAyhG,GAAA9yD,EAAAtD,OAAA5oD,IAAA,iBAIA2kD,EAAA1vB,OAAA,SAA2By8B,gBAAA,eAG3B,MAAA4tD,EFtCA,SAAA/hG,GACA,MAAA,CAAA6G,EAAAxf,EAAAg9C,KACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAAsJ,EAAA3kB,MACA,OAIA,MAAA8/G,EAAApB,GAAAv5G,EAAAy9C,kBAAA9kC,GACAiiG,EAAArB,GAAAv5G,EAAAw9C,kBAAA7kC,GAEAwb,EAAA6oB,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACAwuC,EAAA1H,EAAAzxB,OAEAqvF,GACAl2D,EAAAxuB,YAAA0kF,EAAApiG,UAAA2b,GAGAwmF,GACAj2D,EAAA3uB,SAAA4kF,EAAAniG,UAAA2b,IEoBA0mF,CAAAliG,GACAuoE,EAAA96B,mBAAA7mC,GAAA,6BAAAm7F,GACA16G,EAAAomD,mBAAA7mC,GAAA,6BAAAm7F,GAGA16G,EAAA0zD,iBAAAn0C,GAAA,iBFdA,SAAA5G,GAEA,MAAAmiG,EAAAniG,EAAAwR,OAAAjT,IAAAA,EAAAmiG,WAEA,MAAA,CAAA75F,EAAAxf,EAAAg9C,KACA,IAAAh9C,EAAA07C,WACA,OAGA,MAAAq/D,EAAA/6G,EAAAkxD,SACA8pD,EAAArb,GAAA3/F,EAAA07C,WAAAgD,YAGA,GAAA1B,EAAA+C,OAAAuN,eAAA0tD,EAAA,cAKA,IAAA,MAAA9jG,KAAA4jG,EAEA99D,EAAAY,WAAAuG,QAAA42D,GAA8D5kG,MAAAe,EAAAsB,aAE9DwkC,EAAAzxB,OAAAuD,aAAA,aAAA5X,EAAArc,KAAAmgH,IERAC,CAAAtiG,IAAoFrX,SAAA,QAGpFgmD,EAAA4C,SAAAl5C,IAAA,aAAA,IAAAmoG,GAAA7xD,EAAA3uC;;;;SC3CAuiG,WAAA3sB,GAeA4sB,mCACA,MAAAtwD,EAAAjsD,KAAA0oD,OAAAuD,EAEA,OACAuwD,kBAAAvwD,EAAA,mBACAwwD,aAAAxwD,EAAA,cACAywD,qBAAAzwD,EAAA,sBACA0wD,iBAAA1wD,EAAA,kBACA2wD,sBAAA3wD,EAAA,wBAOApsD,OACA,MAGAg9G,EA6CA,SAAA9iG,EAAAu9F,GACA,IAAA,MAAAh/F,KAAAyB,EAGAu9F,EAAAh/F,EAAAi7F,SACAj7F,EAAAi7F,MAAA+D,EAAAh/F,EAAAi7F,QAIA,OAAAx5F;;;;GAtDA+iG,CAAAtB,GAHAx7G,KAAA0oD,OACAtD,OAAA5oD,IAAA,iBAEAwD,KAAAu8G,8BAEA,IAAA,MAAAjkG,KAAAukG,EACA78G,KAAAurG,cAAAjzF,GAUAzY,cAAAyY,GACA,MAAAowC,EAAA1oD,KAAA0oD,OAEAq0D,gBAAsCzkG,EAAArc,OAEtCysD,EAAAumC,GAAAtK,iBAAAvyE,IAAA2qG,EAAA16B,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA,cACA4zB,EAAA,IAAAwpE,GAAAvX,GAaA,OAXAjyD,EAAA/pB,KACAojB,MAAAnR,EAAAi7F,MACAlZ,KAAA/hF,EAAA+hF,KACAC,SAAA,IAGAlqE,EAAA/N,KAAA,aAAAnc,GAAAklD,EAAA,aACAh7B,EAAA/N,KAAA,QAAAnc,GAAAklD,EAAA,QAAA1uD,GAAAA,IAAA4b,EAAArc,MAEA+D,KAAAsD,SAAA8sB,EAAA,UAAA,IAAAs4B,EAAA2C,QAAA,cAAwE3uD,MAAA4b,EAAArc,QAExEm0B;;;;;ACzEA,MAAA4sF,GAAA;;;;;ACKA,SAAAC,GAAAh6F,EAAAvmB,GACA,OAAA,IAAA49C,GAAA4iE,GAAAj6F,EAAAvmB,GAAA,GAAAwgH,GAAAj6F,EAAAvmB,GAAA,IAUA,SAAAwgH,GAAAj6F,EAAAvmB,EAAAygH,GAGA,IAAAz4G,EAAAue,EAAAtM,WAAAwmG,EAAAl6F,EAAA8B,WAAA9B,EAAA6B,WAEAs4F,EAAA,KAEA,KAAA14G,GAAAA,EAAAsT,aAAA,aAAAtb,GACA0gH,EAAA14G,EACAA,EAAAy4G,EAAAz4G,EAAAgR,gBAAAhR,EAAA8Q,YAGA,OAAA4nG,EAAAnkE,GAAA1xB,SAAA61F,EAAAD,EAAA,SAAA,SAAAl6F;;;;SCxBAo6F,WAAAprB,GAYApyF,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SAEA3V,KAAAtD,MAAA6iC,EAAAhd,UAAAvK,aAAA,YACAhY,KAAAymC,UAAAya,EAAAC,OAAA4+C,0BAAAxgE,EAAAhd,UAAA,YAmBA1iB,QAAAy9G,GACA,MAAAp8D,EAAAlhD,KAAA0oD,OAAAxH,MACA3+B,EAAA2+B,EAAAvrC,SAAA4M,UAEA2+B,EAAA3J,OAAA5qB,IAEA,GAAApK,EAAAuD,YAAA,CACA,MAAA7C,EAAAV,EAAA0S,mBAGA,GAAA1S,EAAAxK,aAAA,YAAA,CAEA,MAAAwlG,EAAAN,GAAA16F,EAAA0S,mBAAA1S,EAAAvK,aAAA,aAEA2U,EAAAuD,aAAA,WAAAotF,EAAAC,GAGA5wF,EAAAuI,aAAAqoF,QAKA,GAAA,KAAAD,EAAA,CACA,MAAAtjG,EAAA09B,GAAAn1B,EAAAkT,iBAEAzb,EAAA3T,IAAA,WAAAi3G,GAEA,MAAA54G,EAAAioB,EAAAm7B,WAAAw1D,EAAAtjG,GAEA2S,EAAAmG,OAAApuB,EAAAue,GAGA0J,EAAAuI,aAAAolB,GAAA1wB,SAAAllB,SAEI,CAGJ,MAAAiiB,EAAAu6B,EAAAC,OAAA0+C,eAAAt9E,EAAA2G,YAAA,YAEA,IAAA,MAAA/B,KAAAR,EACAgG,EAAAuD,aAAA,WAAAotF,EAAAn2F;;;;SC9EAq2F,WAAAvrB,GAIApyF,UACAG,KAAAymC,UAAAzmC,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAxK,aAAA,YAWAlY,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3+B,EAAA2+B,EAAAvrC,SAAA4M,UAEA2+B,EAAA3J,OAAA5qB,IAEA,MAAA8wF,EAAAl7F,EAAAuD,aACAm3F,GAAA16F,EAAA0S,mBAAA1S,EAAAvK,aAAA,cAAAuK,EAAA2G,YAGA,IAAA,MAAA/B,KAAAs2F,EACA9wF,EAAA0K,gBAAA,WAAAlQ;;;;GCnCA,MAAAu2F,GAAAz6G,OAAA,eAkBA,SAAA06G,GAAAL,EAAA3wF,GAEA,MAAAixF,EAAAjxF,EAAA+J,uBAAA,KAA0D4mF,KAAAA,GAAO,GAGjE,OAFA3wF,EAAAk6E,kBAAA6W,IAAA,EAAAE,GAEAA;;;;GCmGA,SAAAC,GAAAz5E,EAAAL,EAAAlsB,GACA,MAAAimG,IAAA15E,GAAAA,EAAArsB,aAAAF,GACAkmG,IAAAh6E,GAAAA,EAAAhsB,aAAAF,GAEA,SAAAimG,IAAAC,GAAA35E,EAAAnU,iBAAApY,KAAAksB,EAAA/rB,aAAAH,MAIAimG,IAAAC,IAAAD,GAAAC;;;;SC3GAC,WAAAruB,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAGAA,EAAAxH,MAAAC,OAAA1vB,OAAA,SAAwCy8B,gBAAA,aAExCxF,EAAA65B,WAAAnsB,IAAA,YACAhkD,IAAAozC,IAAsCtE,MAAA,WAAA9wB,KAAAutF,MAEtCj1D,EAAA65B,WAAAnsB,IAAA,UACAhkD,IAAA2hD,IACA3jC,MACAn0B,KAAA,IACA4b,WACAylG,MAAA,IAGAp8D,OACAngD,IAAA,WACArE,MAAA64B,GAAAA,EAAAvd,aAAA,YAKA0wC,EAAA4C,SAAAl5C,IAAA,OAAA,IAAAirG,GAAA30D,IACAA,EAAA4C,SAAAl5C,IAAA,SAAA,IAAAorG,GAAA90D,IDvBA,SAAAt4B,EAAA8wB,EAAAz9C,EAAAoU,GACA,MAAA8vC,EAAAzG,EAAAvrC,SAAA4M,UAGA9e,EAAAH,SAAA8sB,EAAAza,SAAA,UAAA,CAAAiL,EAAAxf,KACA,MAAA68G,EAAA78G,EAAA+tB,SAAAjB,GAAAI,WACA4vF,EAAA98G,EAAA+tB,SAAAjB,GAAAE,UAGA,IAAA6vF,IAAAC,EACA,OAIA,IAAAv2D,EAAA7hC,YACA,OAKA,GAAA1kB,EAAAkuB,UAAAluB,EAAAguB,QAAAhuB,EAAAiuB,QACA,OAGA,MAAApM,EAAA0kC,EAAA1yB,mBAGA,GAAAgpF,EAAA,CAIA,GAAAt2D,EAAAnF,oBACA,OAKAq7D,GAAA56F,EAAA6B,UAAA7B,EAAA8B,WAAAlN,KAEAzW,EAAAmsC,iBAEA2T,EAAA3J,OAAA5qB,GAAAA,EAAAwxF,iCAIG,CAGH,GAAAx2D,EAAAnF,qBAAAq7D,GAAA56F,EAAA8B,WAAA9B,EAAA6B,UAAAjN,GAMA,OAJAzW,EAAAmsC,sBAEA2T,EAAA3J,OAAA5qB,GAAAA,EAAAyxF,2BAOA,MAAA55F,EAAAvB,EAAAmE,cAAA,GAGA,IAAA5C,EAAA8B,SAAArD,GACA,OAMA46F,GAAAr5F,EAAAO,WAAAP,EAAAM,UAAAjN,IACAqpC,EAAA3J,OAAA5qB,IACA,IAAA0xF,EAAA,EAGA1xF,EAAAwxF,0BAAA,GAGA16G,EAAAH,SAAAqkD,EAAA,eAAA,CAAA/mC,EAAAxf,KACAi9G,KAAAj9G,EAAAk/C,eACA3zB,EAAAyxF,0BACAx9F,EAAA1e,cCtDAo8G,CAAA51D,EAAA45B,QAAAlyD,KAAAs4B,EAAAxH,MAAAlhD,KAAA,YAGAA,KAAAu+G,sBASA1+G,sBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAxH,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SACA4wC,GACA//C,GAAA,iBACA+Q,MAAA,mBACA7U,SAAA,GAIAgmD,EAAA65B,WAAAnsB,IAAA,mBACAhkD,IAAAk0C,IACApF,MAAA,iBACA9wB,KAAAm2B,KAIAhnB,EAAAu1E,kBAAAnoF,IACA,MAAApK,EAAAgd,EAAAhd,UACAk9B,EAAAyB,EAAA7B,QAAA7iD,IAAA,kBAGA,GAAA+lB,EAAAxK,aAAA,YAAA,CACA,MAAA+kC,EAAAmgE,GAAA16F,EAAA0S,mBAAA1S,EAAAvK,aAAA,aAEA,IAAAynC,IAAAA,EAAAE,WAAAl7B,QAAAq4B,GAEA,OADAnwB,EAAAgnD,UAAA,iBAAA72B,IACA,OAEI,GAAA2C,EAEJ,OADA9yB,EAAA6xF,aAAA,mBACA,EAGA,OAAA,IAaA91D,EAAA45B,QAAA96B,mBAAA7mC,GAAA,qBAAA,CAAAC,EAAAxf,EAAAg9C,KACA,MAAA77B,EAAAnhB,EAAAkW,KAEA,KAAAiL,aAAA4/B,IAAA5/B,aAAA09B,MAAA19B,EAAAuD,YACA,OAGA,MACAkP,EADAopB,EAAAzxB,OACAhX,SAAA4M,UACAwU,EAAA2vB,GAAAH,GAEAnI,EAAAzxB,OAAAmK,KAAA9B,EAAArM,gBAAAoO;;;;SCnHA0nF,WAAAhxE,GACA5tC,YAAAuwB,GACA5uB,MAAA4uB,GAEApwB,KAAA0tC,aAAA,QAGA7tC,WAAAwtC,GACArtC,KAAA+G,KAAAsmC,EAAAvkC,KAAAukC;;;;SCIAqxE,WAAA5zB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAp2B,EAAAo2B,EAAAp2B,EAQAjsD,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAAwiF,WAAA,IAAAV,GAOA9hF,KAAA2+G,aAAA3+G,KAAA4+G,kBAOA5+G,KAAAsrG,eAAAtrG,KAAAurG,cAAAt/C,EAAA,QAAAu/C,GAAA/rF,GACAzf,KAAAsrG,eAAAxiG,KAAA,SAOA9I,KAAAyrG,iBAAAzrG,KAAAurG,cAAAt/C,EAAA,UAAAy/C,GAAAjsF,EAAA,UASAzf,KAAA2rG,YAAA,IAAAjmB,GASA1lF,KAAAsuF,aAAA,IAAAV,IACAE,WAAA9tF,KAAA2rG,YACA/mB,aAAA5kF,KAAA4kF,aACAiJ,iBAAA7tF,KAAAwiF,WACA5kD,SAEA2wD,cAAA,cAGAC,UAAA,SAIAxuF,KAAAsrG,eAAAjf,gBACAryE,YACAzC,OACA,uBAKAvX,KAAA4rF,aACAziF,IAAA,OAEA6Q,YACAzC,OACA,gBAIA4iF,SAAA,MAGA97F,UACA2B,KAAA2+G,aACA3+G,KAAAsrG,eACAtrG,KAAAyrG,oBAQA5rG,SACA2B,MAAA0wB,SAEAg5E,IACA96E,KAAApwB,QAIAA,KAAA2+G,aACA3+G,KAAAsrG,eACAtrG,KAAAyrG,kBAGA3qG,QAAA8qG,IAEA5rG,KAAA2rG,YAAAv5F,IAAAw5F,GAGA5rG,KAAA4kF,aAAAxyE,IAAAw5F,EAAAp0F,WAIAxX,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAMA3X,QACAG,KAAAsuF,aAAAI,aASA7uF,kBACA,MAAAosD,EAAAjsD,KAAAqiF,OAAAp2B,EAEAm/C,EAAA,IAAAX,GAAAzqG,KAAAqiF,OAAAyoB,IAKA,OAHAM,EAAA3hF,MAAAwiC,EAAA,YACAm/C,EAAAT,UAAAI,YAAA,sBAEAK,EAYAvrG,cAAA4pB,EAAA4wE,EAAAn2F,GACA,MAAA2nG,EAAA,IAAAjS,GAAA55F,KAAAqiF,QAYA,OAVAwpB,EAAAxlG,KACAojB,MAAAA,EACA4wE,KAAAA,EACAC,SAAA,IAGAp2F,GACA2nG,EAAAvpD,SAAA,WAAAp8C,GAAAlG,KAAAkE,GAGA2nG;;;;;MCtLAgT,WAAA/zB,GAIAjrF,YAAAwiF,GACA7gF,MAAA6gF,GAEA,MAAAp2B,EAAAo2B,EAAAp2B,EAQAjsD,KAAA4kF,aAAA,IAAAR,GAQApkF,KAAAwiF,WAAA,IAAAV,GAOA9hF,KAAA8+G,kBAAA9+G,KAAA++G,uBAOA/+G,KAAAg/G,iBAAAh/G,KAAAurG,cAAAt/C,EAAA,UAAAgzD,GAAAx/F,EAAA,UAOAzf,KAAAk/G,eAAAl/G,KAAAurG,cAAAt/C,EAAA,aAAAkzD,GAAA1/F,EAAA,QAQAzf,KAAAqG,IAAA,QASArG,KAAA2rG,YAAA,IAAAjmB,GASA1lF,KAAAsuF,aAAA,IAAAV,IACAE,WAAA9tF,KAAA2rG,YACA/mB,aAAA5kF,KAAA4kF,aACAiJ,iBAAA7tF,KAAAwiF,WACA5kD,SAEA2wD,cAAA,cAGAC,UAAA,SAIAxuF,KAAA4rF,aACAziF,IAAA,MAEA6Q,YACAzC,OACA,mBAIA4iF,SAAA,MAGA97F,UACA2B,KAAA8+G,kBACA9+G,KAAAk/G,eACAl/G,KAAAg/G,oBAQAn/G,SACA2B,MAAA0wB,UAGAlyB,KAAA8+G,kBACA9+G,KAAAk/G,eACAl/G,KAAAg/G,kBAGAl+G,QAAA8qG,IAEA5rG,KAAA2rG,YAAAv5F,IAAAw5F,GAGA5rG,KAAA4kF,aAAAxyE,IAAAw5F,EAAAp0F,WAIAxX,KAAAwiF,WAAAl/E,SAAAtD,KAAAwX,SAMA3X,QACAG,KAAAsuF,aAAAI,aAYA7uF,cAAA4pB,EAAA4wE,EAAAn2F,GACA,MAAA2nG,EAAA,IAAAjS,GAAA55F,KAAAqiF,QAUA,OARAwpB,EAAAxlG,KACAojB,MAAAA,EACA4wE,KAAAA,EACAC,SAAA,IAGAuR,EAAAvpD,SAAA,WAAAp8C,GAAAlG,KAAAkE,GAEA2nG,EASAhsG,uBACA,MAAAgsG,EAAA,IAAAjS,GAAA55F,KAAAqiF,QACAhgE,EAAAriB,KAAAmrF,aACAl/B,EAAAjsD,KAAAisD,EA0BA,OAxBA4/C,EAAAxlG,KACAuxG,UAAA,EACAtd,QAAAruC,EAAA,0BAGA4/C,EAAAxf,gBACAryE,YACAzC,OACA,4BAEA+lG,KAAAj7F,EAAAnc,GAAA,QACA7F,OAAA,YAIAwrG,EAAAxpF,KAAA,SAAAnc,GAAAlG,KAAA,OAAAs9G,GACAA,GAAArxD,EAAA,yBAGA4/C,EAAAxpF,KAAA,aAAAnc,GAAAlG,KAAA,OAAAs9G,KAAAA,GAEAzR,EAAAxkB,SAAAl+E,IAAA,IACA0iG,EAAAxkB,SAAAG,kBAEAqkB;;;;;ACrMA,MAAAuT,GAAA,eAUAC,WAAA1vB,GAIAxlC,sBACA,OAAA8lD,IAMApwG,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAEAA,EAAA45B,QAAAlyD,KAAA2mB,YAAA0nE,IAOAz+G,KAAAs/G,YAAAt/G,KAAAu/G,qBAOAv/G,KAAAw/G,SAAAx/G,KAAAy/G,kBAQAz/G,KAAAixG,SAAAvoD,EAAAO,QAAAzsD,IAAAyzG,IAGAjwG,KAAA0/G,2BAGA1/G,KAAA2/G,iCASA9/G,qBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACA42D,EAAA,IAAAT,GAAAn2D,EAAA25B,QACAu9B,EAAAl3D,EAAA4C,SAAA9uD,IAAA,QACAqjH,EAAAn3D,EAAA4C,SAAA9uD,IAAA,UAuBA,OArBA8iH,EAAAj9F,KAAA,QAAAnc,GAAA05G,EAAA,SACAN,EAAAJ,eAAA78F,KAAA,aAAAnc,GAAA05G,GACAN,EAAAN,iBAAA38F,KAAA,aAAAnc,GAAA25G,GAGA7/G,KAAAsD,SAAAg8G,EAAA,OAAA,KACAt/G,KAAA8/G,iBAIA9/G,KAAAsD,SAAAg8G,EAAA,SAAA,KACA52D,EAAA2C,QAAA,UACArrD,KAAA+/G,YAIAT,EAAA98B,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACA5vC,KAAA+/G,UACAnwE,MAGA0vE,EASAz/G,kBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACA82D,EAAA,IAAAd,GAAAh2D,EAAA25B,QACAu9B,EAAAl3D,EAAA4C,SAAA9uD,IAAA,QAyBA,OAvBAgjH,EAAAb,aAAAt8F,KAAA,SAAAnc,GAAA05G,EAAA,SAGAJ,EAAAb,aAAAt8F,KAAA,cAAAnc,GAAA05G,EAAA,YAAAljH,IAAAA,GACA8iH,EAAAlU,eAAAjpF,KAAA,aAAAnc,GAAA05G,GAGA5/G,KAAAsD,SAAAk8G,EAAA,SAAA,KACA92D,EAAA2C,QAAA,OAAAm0D,EAAAb,aAAAhU,UAAAnzF,QAAA9a,OACAsD,KAAAggH,oBAIAhgH,KAAAsD,SAAAk8G,EAAA,SAAA,KACAx/G,KAAAggH,oBAIAR,EAAAh9B,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACA5vC,KAAAggH,kBACApwE,MAGA4vE,EASA3/G,2BACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAk3D,EAAAl3D,EAAA4C,SAAA9uD,IAAA,QACAyvD,EAAAvD,EAAAuD,EAGAvD,EAAA85B,WAAAn8E,IAAA+4G,GAAA,CAAAp9B,EAAApyC,KAEAA,IAEAgwE,EAAAn5E,WACAzmC,KAAAigH,YAIAv3D,EAAAumC,GAAAtK,iBAAAvyE,IAAA,OAAAiwE,IACA,MAAAwpB,EAAA,IAAAjS,GAAAvX,GAcA,OAZAwpB,EAAAplE,WAAA,EACAolE,EAAApiF,MAAAwiC,EAAA,QACA4/C,EAAAxR,KAAA6lB,GAAAzgG,EACAosF,EAAAr8E,UAAA4vF,GACAvT,EAAAvR,SAAA,EAGAuR,EAAAxpF,KAAA,aAAAnc,GAAA05G,EAAA,aAGA5/G,KAAAsD,SAAAuoG,EAAA,UAAA,IAAA7rG,KAAAigH,WAEApU,IAUAhsG,iCACA,MAAAywF,EAAAtwF,KAAA0oD,OAAA45B,QAAAlyD,KAAAza,SAIA3V,KAAAsD,SAAAgtF,EAAA,QAAA,KACAtwF,KAAAmgH,2BAIAngH,KAAAigH,YAKAjgH,KAAA0oD,OAAA85B,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACA5vC,KAAAogH,qBAAApgH,KAAAs/G,YAAA16B,aAAAtiE,YACAtiB,KAAAs/G,YAAAj3F,QACAunB,OAMAltC,SAAA,SAIA1C,KAAA0oD,OAAA85B,WAAAn8E,IAAA,MAAA,CAAAjF,EAAAwuC,KACA5vC,KAAAqgH,eACArgH,KAAA+/G,UACAnwE,OAKAy6D,IACA5mG,QAAAzD,KAAAw/G,SACAlV,UAAA,IAAAtqG,KAAAqgH,aACA9V,iBAAAvqG,KAAAixG,SAAA7gF,KAAA5Y,SACApU,SAAA,IAAApD,KAAA+/G,YASAlgH,kBACAG,KAAAixG,SAAA7+F,KACAge,KAAApwB,KAAAs/G,YACAr8F,SAAAjjB,KAAAsgH,4BASAzgH,eACA,MACA+/G,EADA5/G,KAAA0oD,OACA4C,SAAA9uD,IAAA,QAEAwD,KAAAixG,SAAA7+F,KACAge,KAAApwB,KAAAw/G,SACAv8F,SAAAjjB,KAAAsgH,4BAGAtgH,KAAAw/G,SAAAb,aAAA9T,SAQA7qG,KAAAw/G,SAAAb,aAAAhU,UAAAnzF,QAAA9a,MAAAkjH,EAAAljH,OAAA,GAQAmD,kBACAG,KAAAugH,iBACAvgH,KAAAixG,SAAAxlF,OAAAzrB,KAAAw/G,UAIAx/G,KAAA0oD,OAAA45B,QAAAlyD,KAAA/H,SAUAxoB,UACAG,KAAA0oD,OACA4C,SAAA9uD,IAAA,QAEAiqC,YAAAzmC,KAAAwgH,eAKAxgH,KAAAmgH,0BAMAngH,KAAAygH,mBALAzgH,KAAAygH,kBACAzgH,KAAA8/G,gBAQA9/G,KAAA0gH,gCAUA7gH,UACA,IAAAG,KAAAwgH,aACA,OAGA,MAAAxsB,EAAAh0F,KAAA0oD,OAAA45B,QAAAlyD,KAEApwB,KAAAwD,cAAAwwF,EAAA,UAGAh0F,KAAAggH,kBAGAhgH,KAAAixG,SAAAxlF,OAAAzrB,KAAAs/G,aAGAtrB,EAAA3rE,QAWAxoB,+BACA,MAEAm0F,EAFAh0F,KAAA0oD,OACA45B,QACAlyD,KAEA,IAAAuwF,EAAA3gH,KAAAmgH,0BACAS,EAAAC,IAkCA,SAAAA,IACA,OAAA7sB,EAAAr+E,SAAA4M,UAAA8F,MAAArS,eACA+pC,UACAz0B,KAAA5mB,GAAAA,EAAAmX,GAAA,YAnCA7b,KAAAsD,SAAA0wF,EAAA,SAAA,KACA,MAAA8sB,EAAA9gH,KAAAmgH,0BACAxjF,EAAAkkF,IAYAF,IAAAG,IACAH,GAAAhkF,IAAAikF,EACA5gH,KAAA+/G,UASA//G,KAAAixG,SAAAL,eAAA5wG,KAAAsgH,2BAGAK,EAAAG,EACAF,EAAAjkF,IAiBA4jF,qBACA,OAAAvgH,KAAAixG,SAAAb,QAAApwG,KAAAw/G,UAUAuB,yBACA,OAAA/gH,KAAAixG,SAAAb,QAAApwG,KAAAs/G,aAWAc,yBACA,OAAApgH,KAAAixG,SAAAd,cAAAnwG,KAAAs/G,YAUAkB,mBACA,OAAAxgH,KAAAugH,gBAAAvgH,KAAA+gH,mBAWAV,mBAGA,OAFArgH,KAAAixG,SAAAd,aAEAnwG,KAAAw/G,UAAAx/G,KAAAogH,mBAaAvgH,0BACA,MAAAuwB,EAAApwB,KAAA0oD,OAAA45B,QAAAlyD,KACAkgE,EAAAlgE,EAAAza,SACAqrG,EAAAhhH,KAAAmgH,0BAQA,OAAU9/G,OANV2gH,EAEA5wF,EAAAC,aAAAmL,aAAAwlF,GAEA5wF,EAAAC,aAAAgnB,eAAAi5C,EAAA/tE,UAAAoG,kBAgBA9oB,0BACA,MAAA0iB,EAAAviB,KAAA0oD,OAAA45B,QAAAlyD,KAAAza,SAAA4M,UAEA,GAAAA,EAAAuD,YACA,OAAAm7F,GAAA1+F,EAAA0S,oBACG,CAGH,MAAA9N,EAAA5E,EAAAoG,gBAAAS,aACA83F,EAAAD,GAAA95F,EAAA7J,OACA6jG,EAAAF,GAAA95F,EAAA1D,KAEA,OAAAy9F,GAAAA,GAAAC,GAKAt7F,GAAA8D,SAAAu3F,GAAA93F,aAAA3E,QAAA0C,GACA+5F,EALA,OAkBA,SAAAD,GAAAh+F,GACA,OAAAA,EAAAjN,eAAAsV,KAAAuJ,IN/fAnwB,EM+fAmwB,EN9fAnwB,EAAAmX,GAAA,uBAAAnX,EAAAwd,kBAAAw7F,MADA,IAAAh5G;;;;;;;;;MOAA08G,WAAAnvB,GAOApyF,YAAA6oD,EAAA5/C,GACAtH,MAAAknD,GAQA1oD,KAAA8I,KAAA,YAAAA,EAAA,WAAA,WAcAjJ,UACAG,KAAAtD,MAAAsD,KAAAmhG,YACAnhG,KAAAymC,UAAAzmC,KAAAohG,gBAQAvhG,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACAvrC,EAAAurC,EAAAvrC,SACA0rF,EAAA37F,MAAAC,KAAAgQ,EAAA4M,UAAAkgC,qBACAl3B,OAAA81B,GAAAggE,GAAAhgE,EAAAH,EAAAC,SAGAmgE,GAAA,IAAAthH,KAAAtD,MAGAwkD,EAAA3J,OAAA5qB,IAGA,GAAA20F,EAAA,CAEA,IAAArjG,EAAAojF,EAAAA,EAAAp8F,OAAA,GAAAuQ,YACA+rG,EAAA5qF,OAAAC,kBACA4gD,KAkDA,KAAAv5D,GAAA,YAAAA,EAAAhiB,MAAA,IAAAgiB,EAAAjG,aAAA,WAAA,CAGA,MAAAwpG,EAAAvjG,EAAAjG,aAAA,UAGAwpG,EAAAD,IAEAA,EAAAC,GAKA,MAAAC,EAAAD,EAAAD,EAKA/pC,EAAAvzE,MAAoBuT,QAAAyG,EAAAujG,OAAAC,IAGpBxjG,EAAAA,EAAAzI,YAGAgiE,EAAAA,EAAAz3B,UAEA,IAAA,MAAAzoC,KAAAkgE,EACA7qD,EAAAuD,aAAA,SAAA5Y,EAAAkqG,OAAAlqG,EAAAE,SAqBA,IAAA8pG,EAAA,CAGA,IAAAI,EAAA/qF,OAAAC,kBAEA,IAAA,MAAAtf,KAAA+pF,EACA/pF,EAAAuE,GAAA,aAAAvE,EAAAU,aAAA,UAAA0pG,IACAA,EAAApqG,EAAAU,aAAA,WAQA2pG,GAAAtgB,GAAA,EAHAqgB,EAAA,IAAAA,EAAA,EAAAA,GAMAC,GAAAtgB,GAAA,EAAAqgB,GAOA,IAAA,MAAAlqG,KAAA6pF,EAAAthD,UACAuhE,GAAA,YAAA9pG,EAAAvb,KAGA0wB,EAAA8nF,OAAAj9F,EAAA,aACK8pG,GAAA,YAAA9pG,EAAAvb,KAKAqlH,GAAA,YAAA9pG,EAAAvb,MAAAub,EAAAQ,aAAA,SAAAhY,KAAA8I,MAGL6jB,EAAAuD,aAAA,OAAAlwB,KAAA8I,KAAA0O,IALAmV,EAAAonF,eAA4BjrG,KAAA9I,KAAA8I,KAAA04G,OAAA,GAA6BhqG,GACzDmV,EAAA8nF,OAAAj9F,EAAA,eAgBA3X,YAEA,MAAA+hH,EAAA7gB,GAAA/gG,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAkgC,qBAEA,QAAAm/D,GAAAA,EAAA/lG,GAAA,aAAA+lG,EAAA5pG,aAAA,SAAAhY,KAAA8I,KASAjJ,gBAEA,GAAAG,KAAAtD,MACA,OAAA,EAGA,MAAA6lB,EAAAviB,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UACA4+B,EAAAnhD,KAAA0oD,OAAAxH,MAAAC,OAEAwgD,EAAAZ,GAAAx+E,EAAAkgC,qBAEA,QAAAk/C,GAKA0f,GAAA1f,EAAAxgD,IAYA,SAAAwgE,GAAAtgB,EAAA94E,EAAAm5F,GAEA,MAAAG,EAAAt5F,EAAA84E,EAAA,GAAAA,EAAAA,EAAAp8F,OAAA,GAEA,GAAA48G,EAAAhmG,GAAA,YAAA,CACA,IAAAvE,EAAAuqG,EAAAt5F,EAAA,kBAAA,eAcAg5F,EAAAM,EAAA7pG,aAAA,UAIA,KAAAV,GAAAA,EAAAuE,GAAA,aAAAvE,EAAAU,aAAA,WAAA0pG,GACAH,EAAAjqG,EAAAU,aAAA,YACAupG,EAAAjqG,EAAAU,aAAA,WAIAV,EAAAU,aAAA,WAAAupG,GAEAlgB,EAAA94E,EAAA,UAAA,QAAAjR,GAGAA,EAAAA,EAAAiR,EAAA,kBAAA,gBAWA,SAAA84F,GAAAhgE,EAAAF,GACA,OAAAA,EAAAmN,WAAAjN,EAAAhsC,OAAA,cAAA8rC,EAAA0D,SAAAxD;;;;SCpSAygE,WAAA7vB,GAQApyF,YAAA6oD,EAAAq5D,GACAvgH,MAAAknD,GASA1oD,KAAAgiH,UAAA,WAAAD,EAAA,GAAA,EAMAliH,UACAG,KAAAymC,UAAAzmC,KAAAohG,gBAQAvhG,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SACA,IAAAssG,EAAAv8G,MAAAC,KAAA45B,EAAAhd,UAAAkgC,qBAEAvB,EAAA3J,OAAA5qB,IACA,MAAAu1F,EAAAD,EAAAA,EAAAh9G,OAAA,GAGA,IAAAgZ,EAAAikG,EAAA1sG,YAGA,KAAAyI,GAAA,YAAAA,EAAAhiB,MAAAgiB,EAAAjG,aAAA,UAAAkqG,EAAAlqG,aAAA,WACAiqG,EAAAh+G,KAAAga,GAEAA,EAAAA,EAAAzI,YAOAxV,KAAAgiH,UAAA,IACAC,EAAAA,EAAAliE,WAGA,IAAA,MAAAzoC,KAAA2qG,EAAA,CACA,MAAAT,EAAAlqG,EAAAU,aAAA,UAAAhY,KAAAgiH,UAIAR,EAAA,EAIA70F,EAAA8nF,OAAAn9F,EAAA,aAIAqV,EAAAuD,aAAA,SAAAsxF,EAAAlqG,MAYAzX,gBAEA,MAAA+hH,EAAA7gB,GAAA/gG,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAAAkgC,qBAGA,IAAAm/D,IAAAA,EAAA/lG,GAAA,YACA,OAAA,EAGA,GAAA7b,KAAAgiH,UAAA,EAAA,CAGA,MAAAR,EAAAI,EAAA5pG,aAAA,UACAlP,EAAA84G,EAAA5pG,aAAA,QAEA,IAAAub,EAAAquF,EAAAlsG,gBAEA,KAAA6d,GAAAA,EAAA1X,GAAA,aAAA0X,EAAAvb,aAAA,WAAAwpG,GAAA,CACA,GAAAjuF,EAAAvb,aAAA,WAAAwpG,EAKA,OAAAjuF,EAAAvb,aAAA,SAAAlP,EAGAyqB,EAAAA,EAAA7d,gBAIA,OAAA,EAIA,OAAA;;;;GC9GA,SAAAysG,KACA,MAAAC,GAAApiH,KAAAwZ,UAAA,MAAAxZ,KAAAyV,SAAA,GAAAxZ,MAAA,MAAA+D,KAAAyV,SAAA,GAAAxZ,MAEA,OAAA+D,KAAAwZ,SAAA4oG,EAAA,EAAA;;;;GCCA,SAAAC,GAAAzhG,EAAAxf,EAAAg9C,GACA,MAAAY,EAAAZ,EAAAY,WAEA,IAAAA,EAAAj1C,KAAA3I,EAAAkW,KAAA,YACA0nC,EAAAj1C,KAAA3I,EAAAkW,KAAA,oBACA0nC,EAAAj1C,KAAA3I,EAAAkW,KAAA,oBAEA,OAGA0nC,EAAAuG,QAAAnkD,EAAAkW,KAAA,UACA0nC,EAAAuG,QAAAnkD,EAAAkW,KAAA,kBACA0nC,EAAAuG,QAAAnkD,EAAAkW,KAAA,oBAEA,MAAAu7C,EAAAzxD,EAAAkW,KAGAgrG,GAAAzvD,EA2uBA,SAAAA,EAAAzU,GACA,MAAApB,EAAAoB,EAAApB,OACA8I,EAAA1H,EAAAzxB,OACA41F,EAAA,YAAA1vD,EAAA76C,aAAA,QAAA,KAAA,KACAs6C,ED9wBA,SAAA3lC,GACA,MAAA2lC,EAAA3lC,EAAAu6B,uBAAA,MAGA,OAFAoL,EAAA/3C,gBAAA4nG,GAEA7vD,EC0wBAkwD,CAAA18D,GAEA28D,EAAA38D,EAAAoB,uBAAAq7D,EAAA,MAKA,OAJAz8D,EAAAhzB,OAAA5P,GAAAqE,SAAAk7F,GAAAnwD,GAEAtV,EAAApc,aAAAiyB,EAAAP,GAEAA,EAxvBAowD,CAAA7vD,EAAAzU,GAEAA,GAWA,SAAAukE,GAAA/hG,EAAAxf,EAAAg9C,GACA,MACAkU,EADAlU,EAAApB,OAAAD,eAAA37C,EAAA6hB,UAAA+C,wBAAAtpB,IAAAA,EAAA4a,KAAAuE,GAAA,OACAiJ,UACAghC,EAAA1H,EAAAzxB,OAIAm5B,EAAA88D,eAAA1/F,GAAAoB,aAAAguC,IACAxM,EAAA88D,eAAA1/F,GAAAc,YAAAsuC,IAGA,MAAAmwD,EAAAnwD,EAAAj9C,OACAwtG,EAAAJ,EAAA/sG,gBACA0qE,EAAAv6D,GAAA+D,SAAA64F,GACAnuF,EAAAwxB,EAAAr6B,OAAA20D,GAGAyiC,GAAAA,EAAArtG,aACAstG,GAAAh9D,EAAA+8D,EAAAA,EAAArtG,aAMAutG,GAFA3kE,EAAApB,OAAAL,eAAA2V,GAEAt6C,aAAA,UAAA,EAAA5W,EAAA6hB,SAAAm9D,EAAA9iE,MAAAg1C,EAAAlU,GAGA,IAAA,MAAAjkC,KAAA0L,GAAA8D,SAAA2K,GAAAwrB,WACA1B,EAAApB,OAAAgL,kBAAA7tC,GAGAyG,EAAA3e,OAcA,SAAA+gH,GAAApiG,EAAAxf,EAAAg9C,GACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,kBACA,OAGA,MAAAg7C,EAAAlU,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACAwuC,EAAA1H,EAAAzxB,OAIAm5B,EAAA88D,eAAA1/F,GAAAoB,aAAAguC,IACAxM,EAAA88D,eAAA1/F,GAAAc,YAAAsuC,IAIA,IAAAmwD,EAAAnwD,EAAAj9C,OACA,MAAA4tG,EAAA,YAAA7hH,EAAAy9C,kBAAA,KAAA,KAIAikE,GAAAh9D,EAHA28D,EAAA38D,EAAA2uD,OAAAgO,EAAAQ,GAGAR,EAAAjtG,aACAstG,GAAAh9D,EAAA28D,EAAA/sG,gBAAA+sG,GAGA,IAAA,MAAAtoG,KAAA/Y,EAAAkW,KAAA8C,cACAgkC,EAAAY,WAAAuG,QAAAprC,EAAA,UAYA,SAAA+oG,GAAAtiG,EAAAxf,EAAAg9C,GACA,IAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkW,KAAA,oBACA,OAGA,MAAAg7C,EAAAlU,EAAApB,OAAAJ,cAAAx7C,EAAAkW,MACAwuC,EAAA1H,EAAAzxB,OAIAm5B,EAAA88D,eAAA1/F,GAAAoB,aAAAguC,IACAxM,EAAA88D,eAAA1/F,GAAAc,YAAAsuC,IAGA,MAAAmwD,EAAAnwD,EAAAj9C,OACAwtG,EAAAJ,EAAA/sG,gBACA0qE,EAAAv6D,GAAA+D,SAAA64F,GACA38D,EAAAr6B,OAAA20D,GAEAyiC,GAAAA,EAAArtG,aACAstG,GAAAh9D,EAAA+8D,EAAAA,EAAArtG,aAIAutG,GAAA3hH,EAAAw9C,kBAAA,EAAAx9C,EAAA+lB,MAAA7J,MAAA8iE,EAAA9iE,MAAAg1C,EAAAlU,GAGAkkE,GAAAlhH,EAAAkW,KAAAg7C,EAAAlU,GAGA,IAAA,MAAAjkC,KAAA/Y,EAAAkW,KAAA8C,cACAgkC,EAAAY,WAAAuG,QAAAprC,EAAA,UA4BA,SAAAgpG,GAAAviG,EAAAxf,EAAAg9C,GACA,GAAA,YAAAh9C,EAAAkW,KAAArb,KAAA,CACA,IAAAi1B,EAAAktB,EAAApB,OAAAD,eAAA37C,EAAA+lB,MAAA7J,OAEA,MAAAwoC,EAAA1H,EAAAzxB,OACA9nB,KAgDA,MAAA,MAAAqsB,EAAA7b,OAAApZ,MAAA,MAAAi1B,EAAA7b,OAAApZ,OAGA,OAFAi1B,EAAA40B,EAAA88D,eAAA1xF,IAEA7b,OAAApZ,MAHA,CASA,MAAAmnH,EAAAlyF,EACAmyF,EAAAngG,GAAAqE,SAAA2J,EAAA7b,OAAA,OAGA,IAAA+tG,EAAA3+F,QAAA4+F,GAAA,CACA,MAAA/uF,EAAAwxB,EAAAr6B,OAAA,IAAA5F,GAAAu9F,EAAAC,IACAx+G,EAAAZ,KAAAqwB,GAGApD,EAAAhO,GAAAc,YAAAkN,EAAA7b,QAIA,GAAAxQ,EAAAI,OAAA,EAAA,CACA,IAAA,IAAAvJ,EAAA,EAAmBA,EAAAmJ,EAAAI,OAAkBvJ,IAAA,CACrC,MAAA4nH,EAAApyF,EAAAnM,WAKA,GAHAmM,EADA40B,EAAAhzB,OAAA5B,EAAArsB,EAAAnJ,IACA+nB,IAGA/nB,EAAA,EAAA,CACA,MAAA6nH,EAAAT,GAAAh9D,EAAAw9D,EAAAA,EAAA9tG,aAIA+tG,GAAAA,EAAAluG,QAAAiuG,GACApyF,EAAA5hB,UAMAwzG,GAAAh9D,EAAA50B,EAAAnM,WAAAmM,EAAApM,aA2BA,SAAA0+F,GAAA5iG,EAAAxf,EAAAg9C,GACA,MAAAltB,EAAAktB,EAAApB,OAAAD,eAAA37C,EAAA6hB,UACAwgG,EAAAvyF,EAAAnM,WACA2+F,EAAAxyF,EAAApM,UAKAg+F,GAAA1kE,EAAAzxB,OAAA82F,EAAAC,GAeA,SAAAC,GAAA/iG,EAAAxf,EAAAg9C,GACA,GAAAA,EAAAY,WAAAuG,QAAAnkD,EAAAkxD,UAAwDr2D,MAAA,IAAa,CACrE,MAAA0wB,EAAAyxB,EAAAzxB,OACAi3F,EAAA5jH,KAAAo+C,cAAAsU,MAGAkvD,EAAAj1F,EAAAqD,cAAA,YAGA4zF,EAAApC,OAAAoC,EAAApC,QAAA,EACA70F,EAAAuD,aAAA,SAAA0zF,EAAApC,OAAAI,GAGA,MAAA94G,EAAA1H,EAAAkxD,SAAAj9C,QAAA,MAAAjU,EAAAkxD,SAAAj9C,OAAApZ,KAAA,WAAA,WACA0wB,EAAAuD,aAAA,OAAApnB,EAAA84G,GAGAgC,EAAApC,SAGA,MAAAluD,EAAAlV,EAAAgU,qBAAAwvD,EAAAxgH,EAAA8xD,aAIA,IAAAI,EACA,OAGA3mC,EAAAmG,OAAA8uF,EAAAtuD,EAAArwC,UAGA,IAAAuB,EAAAy0B,GAAAj1B,YAAA49F,GAKA,IAAA,MAAAznG,KAAA/Y,EAAAkxD,SAAAl4C,cAEA,MAAAD,EAAAle,MAAA,MAAAke,EAAAle,KACAuoB,EAAA45B,EAAA4T,YAAA73C,EAAAqK,GAAA0uC,YAIA9U,EAAA4T,YAAA73C,EAAA8+B,GAAA1xB,SAAAq6F,EAAA,QAIAgC,EAAApC,SAGApgH,EAAA07C,WAAA,IAAAxC,GAAAl5C,EAAA8xD,YAAA1uC,GAGA8uC,EAAAE,aAEApyD,EAAA8xD,YAAAja,GAAA1xB,SAAA+rC,EAAAE,cAGApyD,EAAA8xD,YAAA9xD,EAAA07C,WAAAr5B,KAeA,SAAAogG,GAAAjjG,EAAAxf,EAAAg9C,GACA,GAAAA,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,UAAqDr2D,MAAA,IAAa,CAElE,MAAAoC,EAAAqH,MAAAC,KAAAvE,EAAAkxD,SAAAl4C,eAEA,IAAA,MAAAD,KAAA9b,EACA8b,EAAA0B,GAAA,OACA1B,EAAAS,WAcA,SAAAkpG,GAAAljG,EAAAxf,EAAAg9C,GACA,GAAAA,EAAAY,WAAAj1C,KAAA3I,EAAAkxD,UAAqDr2D,MAAA,IAAa,CAClE,GAAA,IAAAmF,EAAAkxD,SAAA/4C,WACA,OAGA,MAAAlb,MAAA+C,EAAAkxD,SAAAl4C,eAEA,IAAA2pG,GAAA,EACAC,GAAA,EAEA,IAAA,MAAA7pG,KAAA9b,GACA0lH,GAAA5pG,EAAA0B,GAAA,OAAA1B,EAAA0B,GAAA,OACA1B,EAAAS,UAGAT,EAAA0B,GAAA,SAEAmoG,GACA5lE,EAAAzxB,OAAAs3F,YAAA9pG,EAAA/Y,KAAAyI,QAAA,OAAA,IAAAsQ,KAIAA,EAAA3E,aAAA2E,EAAA3E,YAAAqG,GAAA,OAAA1B,EAAA3E,YAAAqG,GAAA,QACAuiC,EAAAzxB,OAAAs3F,YAAA9pG,EAAA/Y,KAAAyI,QAAA,OAAA,IAAAsQ,KAEIA,EAAA0B,GAAA,OAAA1B,EAAA0B,GAAA,SAEJkoG,GAAA,GAGAC,GAAA,GAcA,SAAAE,GAAAtjG,EAAAxf,GACA,GAAAA,EAAA67C,UACA,OAGA,MAAA4V,EAAAzxD,EAAAg7C,cAAAr3B,WAEA,GAAA8tC,GAAAA,EAAAh3C,GAAA,YAAA,CACA,MAAAy2C,EAAAlxD,EAAA47C,OAAAJ,cAAAiW,GACAsxD,EAAA7xD,EAAAt8C,eAAAsV,KAAA9T,GAAAA,EAAAqE,GAAA,OAAArE,EAAAqE,GAAA,OACA2Y,EAAA,IAAA3R,IACAE,cAAAG,GAAAqE,SAAA+qC,EAAA,KAGA,IAAA,MAAA51D,KAAA83B,EAAA,CACA,GAAA,gBAAA93B,EAAAoM,MAAApM,EAAA4a,KAAAuE,GAAA,MAAA,CACAza,EAAA8vB,aAAAx0B,EAAAonB,iBAEA,MACI,GAAA,cAAApnB,EAAAoM,MAAApM,EAAA4a,MAAA6sG,EAAA,CACJ/iH,EAAA8vB,aAAAx0B,EAAA8nB,aAEA,SAeA,SAAA4/F,GAAAxjG,EAAAxf,GACA,MAAA00F,EAAA10F,EAAA8vB,aACAmQ,EAAAy0D,EAAAzgF,OACA2nC,EAAA57C,EAAA47C,OAEA,GAAA,MAAA3b,EAAAplC,MAAA,MAAAolC,EAAAplC,KAAA,CAEA,GAAA65F,EAAA/xE,QAMG,CAKH,MAAAsgG,EAAArnE,EAAAL,eAAAm5C,EAAA/wE,YACAu/F,EAAAtnE,EAAAK,eAAAy4C,EAAA/wE,YAGA3jB,EAAAg7C,cAAAnD,GAAA30B,aAAA+/F,GAAAj9F,aAAAk9F,OAfA,CAGA,MAAAD,EAAArnE,EAAAL,eAAAm5C,EAAAhxE,WAEA1jB,EAAAg7C,cAAAnD,GAAA30B,aAAA+/F,GAaAzjG,EAAA3e,YACE,GAAA,MAAAo/B,EAAAplC,MAAA65F,EAAA/wE,aAAA,MAAA+wE,EAAA/wE,WAAA9oB,MAAA,MAAA65F,EAAA/wE,WAAA9oB,MAAA,CAGF,MAAAooH,EAAArnE,EAAAL,eAAAtb,GAIA,IAAAijF,EAAA,EACA7B,EAAA3sB,EAAA/wE,WAEA,KAAA09F,IAAAA,EAAA5mG,GAAA,OAAA4mG,EAAA5mG,GAAA,QACAyoG,GAAAtnE,EAAAK,eAAAolE,GAEAA,EAAAA,EAAA/sG,gBAGAtU,EAAAg7C,cAAAnD,GAAA30B,aAAA+/F,GAAAj9F,aAAAk9F,GAEA1jG,EAAA3e,QA6LA,SAAAsiH,GAAA3jG,GAAAggE,EAAAr+D,IAMA,IAAAjL,EAAAspE,EAAA/kE,GAAA,oBAAA+kE,EAAAnrE,SAAA,GAAAmrE,EAEA,GAAAtpE,GAAAA,EAAAuE,GAAA,YAAA,CAEA,MAAAvG,EAAAiN,EAAA0S,mBACA,IAAAuvF,EAAA,KASA,GAPAlvG,EAAAD,OAAAwG,GAAA,YACA2oG,EAAAlvG,EAAAD,OACGC,EAAAyP,YAAAzP,EAAAyP,WAAAlJ,GAAA,cACH2oG,EAAAlvG,EAAAyP,YAIAy/F,EAAA,CAIA,MAAAC,EAAAD,EAAAxsG,aAAA,UAGA,GAAAysG,EAAA,EAEA,KAAAntG,GAAAA,EAAAuE,GAAA,aACAvE,EAAA6a,cAAA,SAAA7a,EAAAU,aAAA,UAAAysG,GAEAntG,EAAAA,EAAA9B,cA8BA,SAAAkvG,GAAAC,EAAAthH,GACA,MAAAuhH,IAAAvhH,EAAAuhH,WACAC,IAAAxhH,EAAAwhH,cAEArD,EAAAmD,aAAAlsE,GAAAksE,EAAA3sG,aAAA,UAAA3U,EAAAm+G,OACA,IAAAlqG,EAAAqtG,aAAAlsE,GAAAksE,EAAAjvG,gBAAAivG,EAAA5/F,WAEA,KAAAzN,GAAA,YAAAA,EAAArb,MAAA,CACA,MAAA6oH,EAAAxtG,EAAAU,aAAA,UAEA,GAAA4sG,GAAApD,GAAAsD,GAAAD,GAAArD,EAAAsD,EACA,OAAAxtG,EAGAA,EAAAA,EAAA5B,gBAGA,OAAA,KAKA,SAAAotG,GAAAh9D,EAAAi/D,EAAAC,GACA,OAAAD,GAAAC,IAAA,MAAAD,EAAA9oH,MAAA,MAAA8oH,EAAA9oH,OAAA8oH,EAAA9oH,MAAA+oH,EAAA/oH,KACA6pD,EAAAm/D,gBAAA/hG,GAAAc,YAAA+gG,IAGA,KAOA,SAAAzC,GAAAzvD,EAAAqyD,EAAA9mE,GACA,MAAA+mE,EAAAD,EAAA7vG,OACA2nC,EAAAoB,EAAApB,OACA8I,EAAA1H,EAAAzxB,OAGA,IAAAktB,EAAAmD,EAAAD,eAAA9D,GAAA30B,aAAAuuC,IAKA,MAAA2xD,EAAAE,GAAA7xD,GAAiD+xD,YAAA,EAAAC,eAAA,IACjDO,EAAAvyD,EAAAn9C,gBAEA,GAAA8uG,GAAAA,EAAAxsG,aAAA,WAAA66C,EAAA76C,aAAA,UAAA,CAGA,MAAAs6C,EAAAtV,EAAAJ,cAAA4nE,GACA3qE,EAAAiM,EAAA88D,eAAA1/F,GAAAc,YAAAsuC,SAMAzY,EAHAurE,GAAA,YAAAA,EAAAnpH,KAGA+gD,EAAAD,eAAA9D,GAAA1xB,SAAA69F,EAAA,QAIApoE,EAAAD,eAAA9D,GAAA30B,aAAAuuC,IAUA,GANAhZ,EAAAwrE,GAAAxrE,GAGAiM,EAAAhzB,OAAA+mB,EAAAsrE,GAGAC,GAAA,YAAAA,EAAAnpH,KAAA,CACA,MAAAqpH,EAAAtoE,EAAAJ,cAAAwoE,GAEA5wF,EAAA,IAAA3R,IACAC,WAAA,IAAA+C,GACA3C,GAAAqE,SAAA+9F,EAAA,GACAzrE,GAEAv2B,kBAAA,IAGA,IAAA,MAAA5mB,KAAA83B,EACA,GAAA93B,EAAA4a,KAAAuE,GAAA,MAAA,CACA,MAAA0pG,EAAAz/D,EAAA88D,eAAA1/F,GAAAoB,aAAA5nB,EAAA4a,OACAmrG,EAAA/lH,EAAA4a,KAAAjC,OAEA2d,EAAA9P,GAAAqE,SAAA29F,EAAA,OACApC,GAAAh9D,EAAA9yB,EAAAjO,WAAAiO,EAAAlO,WACAghC,EAAA7yB,KAAApN,GAAA+D,SAAA64F,GAAAzvF,GAEAwB,EAAAvR,SAAAsiG,OAGE,CACF,MAAAC,EAAAL,EAAA3vG,YAEA,GAAAgwG,IAAAA,EAAA3pG,GAAA,OAAA2pG,EAAA3pG,GAAA,OAAA,CACA,IAAA4pG,EAAA,KAEA,IAAA,MAAAtrG,KAAAqrG,EAAAprG,cAAA,CACA,MAAAsrG,EAAA1oE,EAAAL,eAAAxiC,GAEA,KAAAurG,GAAAA,EAAA1tG,aAAA,UAAA66C,EAAA76C,aAAA,WAGA,MAFAytG,EAAAtrG,EAMAsrG,IACA3/D,EAAA88D,eAAA1/F,GAAAc,YAAAyhG,IACA3/D,EAAA7yB,KAAApN,GAAA+D,SAAA67F,EAAApwG,QAAA6N,GAAAqE,SAAA29F,EAAA,UAMApC,GAAAh9D,EAAAq/D,EAAAA,EAAA3vG,aACAstG,GAAAh9D,EAAAq/D,EAAAzvG,gBAAAyvG,GAKA,SAAApC,GAAA4C,EAAAC,EAAAC,EAAAC,EAAA1nE,GAKA,MAAA2nE,EAAArB,GAAAkB,GACAhB,YAAA,EACAC,eAAA,EACArD,OAAAmE,IAGA3oE,EAAAoB,EAAApB,OACA8I,EAAA1H,EAAAzxB,OAGAq5F,EAAAD,EAAAA,EAAA/tG,aAAA,UAAA,KAEA,IAAA6hC,EAEA,GAAAksE,EAkBE,GAAAC,GAAAL,EAAA,CAkBF,MAAAM,EAAAjpE,EAAAJ,cAAAmpE,GAAA1wG,OACAwkC,EAAA32B,GAAAc,YAAAiiG,OACE,CAmBF,MAAA7pE,EAAAnD,GAAA1xB,SAAAw+F,EAAA,OACAlsE,EAAAmD,EAAAD,eAAAX,QAzCAvC,EAAAgsE,EA4CAhsE,EAAAwrE,GAAAxrE,GAIA,IAAA,MAAA1/B,QAAA2rG,EAAA1rG,gBACAD,EAAA0B,GAAA,OAAA1B,EAAA0B,GAAA,SACAg+B,EAAAiM,EAAA7yB,KAAApN,GAAA+D,SAAAzP,GAAA0/B,GAAAp2B,IAEAq/F,GAAAh9D,EAAA3rC,EAAAA,EAAA3E,aACAstG,GAAAh9D,EAAA3rC,EAAAzE,gBAAAyE,IAUA,SAAAkrG,GAAAn0F,GACA,OAAAA,EAAAlL,wBAAAtpB,GAAAA,EAAA4a,KAAAuE,GAAA;;;;SCz+BAqqG,WAAAv2B,GAIAxlC,sBACA,OAAAuqD,IAMA70G,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAMAA,EAAAxH,MAAAC,OAAAuY,SAAA,YACA1I,eAAA,SACA9C,iBAAA,OAAA,YAIA,MAAA9sD,EAAAsnD,EAAAtnD,KACAkhF,EAAA55B,EAAA45B,QAEA55B,EAAAxH,MAAAvrC,SAAAm/F,kBAAAnoF,ID8gBA,SAAAu0B,EAAAv0B,GACA,MAAA6qD,EAAAt2B,EAAAvrC,SAAA2oC,OAAAC,aACA4nE,EAAA,IAAA//G,IAEA,IAAAggH,GAAA,EAEA,IAAA,MAAA99G,KAAAkvE,EACA,GAAA,UAAAlvE,EAAAQ,MAAA,YAAAR,EAAArM,KACAoqH,EAAA/9G,EAAA2a,eACG,GAAA,UAAA3a,EAAAQ,MAAA,YAAAR,EAAArM,KAAA,CACH,GAAA,SAAAqM,EAAArM,KAAA,CAEA,MAAAqb,EAAAhP,EAAA2a,SAAA6B,UAEAxN,EAAAS,aAAA,YACA4U,EAAA0K,gBAAA,SAAA/f,GAEA8uG,GAAA,GAGA9uG,EAAAS,aAAA,UACA4U,EAAA0K,gBAAA,OAAA/f,GAEA8uG,GAAA,GAMAC,EAFA/9G,EAAA2a,SAAAmE,aAAA9e,EAAArD,aAGG,UAAAqD,EAAAQ,MAAA,YAAAR,EAAArM,KACHoqH,EAAA/9G,EAAA2a,UACG,aAAA3a,EAAAQ,MAAA,UAAAR,EAAAq2C,aACH0nE,EAAA/9G,EAAA6e,MAAA7J,OACG,aAAAhV,EAAAQ,MAAA,QAAAR,EAAAq2C,cACH0nE,EAAA/9G,EAAA6e,MAAA7J,OAIA,IAAA,MAAAgpG,KAAAH,EAAA92G,SACAk3G,EAAAD,GACAE,EAAAF,GAGA,OAAAF,EAEA,SAAAC,EAAApjG,GACA,MAAAsQ,EAAAtQ,EAAA8B,WAEA,GAAAwO,GAAAA,EAAA1X,GAAA,YAMG,CACH,IAAAyqG,EAAA/yF,EAEA,GAAA4yF,EAAA59G,IAAA+9G,GACA,OAGA,KAAAA,EAAA5wG,iBAAA4wG,EAAA5wG,gBAAAmG,GAAA,aAGA,GAFAyqG,EAAAA,EAAA5wG,gBAEAywG,EAAA59G,IAAA+9G,GACA,OAIAH,EAAA9/G,IAAA4c,EAAA8B,WAAAuhG,OArBA,CACA,MAAAhvG,EAAA2L,EAAA6B,UAEAxN,GAAAA,EAAAuE,GAAA,aACAsqG,EAAA9/G,IAAAiR,EAAAA,IAqBA,SAAAivG,EAAAjvG,GACA,IAAAmvG,EAAA,EACAC,EAAA,KAEA,KAAApvG,GAAAA,EAAAuE,GAAA,aAAA,CACA,MAAAipG,EAAAxtG,EAAAU,aAAA,UAEA,GAAA8sG,EAAA2B,EAAA,CACA,IAAAhF,EAEA,OAAAiF,GACAA,EAAA5B,EAAA2B,EACAhF,EAAAgF,IAEAC,EAAA5B,IACA4B,EAAA5B,GAGArD,EAAAqD,EAAA4B,GAGA/5F,EAAAuD,aAAA,SAAAuxF,EAAAnqG,GAEA8uG,GAAA,OAEAM,EAAA,KACAD,EAAAnvG,EAAAU,aAAA,UAAA,EAGAV,EAAAA,EAAA9B,aAIA,SAAAgxG,EAAAlvG,GACA,IAAAqvG,KACApzF,EAAA,KAEA,KAAAjc,GAAAA,EAAAuE,GAAA,aAAA,CACA,MAAAipG,EAAAxtG,EAAAU,aAAA,UAMA,GAJAub,GAAAA,EAAAvb,aAAA,UAAA8sG,IACA6B,EAAAA,EAAAhiH,MAAA,EAAAmgH,EAAA,IAGA,GAAAA,EACA,GAAA6B,EAAA7B,GAAA,CACA,MAAAh8G,EAAA69G,EAAA7B,GAEAxtG,EAAAU,aAAA,SAAAlP,IACA6jB,EAAAuD,aAAA,OAAApnB,EAAAwO,GAEA8uG,GAAA,QAGAO,EAAA7B,GAAAxtG,EAAAU,aAAA,QAIAub,EAAAjc,EACAA,EAAAA,EAAA9B,eCnpBAoxG,CAAAl+D,EAAAxH,MAAAv0B,IAEA21D,EAAAtlC,OAAA6pE,0BAAA,KAAAC,IACA1lH,EAAA47C,OAAA6pE,0BAAA,KAAAC,IAEAxkC,EAAAtlC,OAAAr8B,GAAA,sBAAAujG,IACA5hC,EAAAtlC,OAAAr8B,GAAA,sBAAAyjG,IACAhjH,EAAA47C,OAAAr8B,GAAA,sBAAAujG,IAEA5hC,EAAA96B,mBAAA7mC,GAAA,SAAAwiG,IAAoEzgH,SAAA,SACpE4/E,EAAA96B,mBAAA7mC,GAAA,kBAAA0hG,IACAjhH,EAAAomD,mBAAA7mC,GAAA,SAAAwiG,IAAiEzgH,SAAA,SACjEtB,EAAAomD,mBAAA7mC,GAAA,kBAAA0hG,IAEA//B,EAAA96B,mBAAA7mC,GAAA,0BAAAqiG,IACA5hH,EAAAomD,mBAAA7mC,GAAA,0BAAAqiG,IACA1gC,EAAA96B,mBAAA7mC,GAAA,4BAAAuiG,IACA9hH,EAAAomD,mBAAA7mC,GAAA,4BAAAuiG,IAEA5gC,EAAA96B,mBAAA7mC,GAAA,kBAAAgiG,IACArgC,EAAA96B,mBAAA7mC,GAAA,SAAA6iG,IAAiE9gH,SAAA,QACjEtB,EAAAomD,mBAAA7mC,GAAA,kBAAAgiG,IACAvhH,EAAAomD,mBAAA7mC,GAAA,SAAA6iG,IAA8D9gH,SAAA,QAE9DtB,EAAA0zD,iBAAAn0C,GAAA,aAAAkjG,IAAsDnhH,SAAA,SACtDtB,EAAA0zD,iBAAAn0C,GAAA,aAAAkjG,IAAsDnhH,SAAA,SACtDtB,EAAA0zD,iBAAAn0C,GAAA,aAAAmjG,IAA0DphH,SAAA,SAC1DtB,EAAA0zD,iBAAAn0C,GAAA,aAAAgjG,IAGAj7D,EAAAxH,MAAAvgC,GAAA,gBAAA4jG,IAA4D7hH,SAAA,SAG5DgmD,EAAA4C,SAAAl5C,IAAA,eAAA,IAAAgvG,GAAA14D,EAAA,aACAA,EAAA4C,SAAAl5C,IAAA,eAAA,IAAAgvG,GAAA14D,EAAA,aAGAA,EAAA4C,SAAAl5C,IAAA,aAAA,IAAA0vG,GAAAp5D,EAAA,YACAA,EAAA4C,SAAAl5C,IAAA,cAAA,IAAA0vG,GAAAp5D,EAAA,aAEA,MAAA4nC,EAAAtwF,KAAA0oD,OAAA45B,QAAAlyD,KAAAza,SAIA3V,KAAAsD,SAAAgtF,EAAA,QAAA,CAAA1vE,EAAAxf,KACA,MAAAm+B,EAAAv/B,KAAA0oD,OAAAxH,MAAAvrC,SACAwd,EAAAoM,EAAAhd,UAAA2tB,kBAAA76B,OAEAkqB,EAAAhd,UAAAuD,aAAA,YAAAqN,EAAAl3B,MAAAk3B,EAAA3Z,UACAxZ,KAAA0oD,OAAA2C,QAAA,eAEAjqD,EAAAmsC,iBACA3sB,EAAA3e,UAMAjC,KAAAsD,SAAAgtF,EAAA,SAAA,CAAA1vE,EAAAxf,KAEA,GAAA,aAAAA,EAAA4hB,UACA,OAGA,MAAAT,EAAAviB,KAAA0oD,OAAAxH,MAAAvrC,SAAA4M,UAEA,IAAAA,EAAAuD,YACA,OAGA,MAAAihG,EAAAxkG,EAAA0S,mBAEA,IAAA8xF,EAAA1iG,UACA,OAGA,MAAA8O,EAAA4zF,EAAA1xG,OAEA,aAAA8d,EAAAl3B,OAIAk3B,EAAAzd,iBAAA,aAAAyd,EAAAzd,gBAAAzZ,OAMA+D,KAAA0oD,OAAA2C,QAAA,eAEAjqD,EAAAmsC,iBACA3sB,EAAA3e,WACMS,SAAA,SAEN,MAAAskH,EAAA77D,GACA,CAAA/pD,EAAAwuC,KACA5vC,KAAA0oD,OAAA4C,SAAA9uD,IAAA2uD,GAEA1kB,YACAzmC,KAAA0oD,OAAA2C,QAAAF,GACAvb,MAKA5vC,KAAA0oD,OAAA85B,WAAAn8E,IAAA,MAAA2gH,EAAA,eACAhnH,KAAA0oD,OAAA85B,WAAAn8E,IAAA,YAAA2gH,EAAA,iBAIA,SAAAF,GAAAtvG,GACA,IAAAvS,EAAA,EAEA,IAAA,MAAAkV,KAAA3C,EAAA4C,cACA,GAAA,MAAAD,EAAAle,MAAA,MAAAke,EAAAle,KACA,IAAA,MAAAqb,KAAA6C,EAAAC,cACAnV,GAAA6hH,GAAAxvG,GAKA,OAAArS;;;;;MCpKAgiH,WAAAt3B,GAIA9vF,OAEA,MAAAosD,EAAAjsD,KAAA0oD,OAAAuD,EACAjsD,KAAAy6F,WAAA,eAAAxuC,EAAA,iBAAAi7D,GAAAznG,GACAzf,KAAAy6F,WAAA,eAAAxuC,EAAA,iBAAAk7D,GAAA1nG,GAWA5f,WAAAsrD,EAAA1hC,EAAA4wE,GACA,MAAA3xC,EAAA1oD,KAAA0oD,OAEAA,EAAAumC,GAAAtK,iBAAAvyE,IAAA+4C,EAAAk3B,IACA,MAAAj3B,EAAA1C,EAAA4C,SAAA9uD,IAAA2uD,GAEAs3C,EAAA,IAAA7I,GAAAvX,GAcA,OAZAogB,EAAAp8F,KACAojB,MAAAA,EACA4wE,KAAAA,EACAC,SAAA,IAIAmI,EAAApgF,KAAA,OAAA,aAAAnc,GAAAklD,EAAA,QAAA,aAGAprD,KAAAsD,SAAAm/F,EAAA,UAAA,IAAA/5C,EAAA2C,QAAAF,IAEAs3C;;;;;;;;;MC5CA2kB,WAAAn1B,GAOApyF,YAAA6oD,EAAA/J,GACAn9C,MAAAknD,GAgBA1oD,KAAA2+C,aAAAA,EAMA9+C,UACA,MAAAqhD,EAAAlhD,KAAA0oD,OAAAxH,MACA3hB,EAAA2hB,EAAAvrC,SAEA3V,KAAAtD,MAAA6iC,EAAAhd,UAAAvK,aAAAhY,KAAA2+C,cACA3+C,KAAAymC,UAAAya,EAAAC,OAAA4+C,0BAAAxgE,EAAAhd,UAAAviB,KAAA2+C,cAYA9+C,QAAAwD,MACA,MAAA69C,EAAAlhD,KAAA0oD,OAAAxH,MAEA3+B,EADA2+B,EAAAvrC,SACA4M,UAEA7lB,EAAA2G,EAAA3G,MAEAwkD,EAAA3J,OAAA5qB,IACA,GAAApK,EAAAuD,YACAppB,EACAiwB,EAAAszE,sBAAAjgG,KAAA2+C,aAAAjiD,GAEAiwB,EAAA+oC,yBAAA11D,KAAA2+C,kBAEI,CACJ,MAAAh4B,EAAAu6B,EAAAC,OAAA0+C,eAAAt9E,EAAA2G,YAAAlpB,KAAA2+C,cAEA,IAAA,MAAAx3B,KAAAR,EACAjqB,EACAiwB,EAAAuD,aAAAlwB,KAAA2+C,aAAAjiD,EAAAyqB,GAEAwF,EAAA0K,gBAAAr3B,KAAA2+C,aAAAx3B;;;;SC/DAkgG,WAAAD,GAIAvnH,YAAA6oD,GACAlnD,MAAAknD,EAAA;;;;GCVA,SAAA4+D,GAAAC,GAEA,OAAAA,EACAt8G,IAAAu8G,IAEAj8F,OAAAiqF,KAAAA,GAQA,SAAAgS,GAAAhS,GAEA,MAAA,iBAAAA,EACAA,EAIA,YAAAA,GAEAjC,MAAA,UACAryD,WAAA3jD,GAKA,iBAAAi4G,EAYA,SAAAiS,GAEA,MAAAC,EAAAD,EAAA59G,QAAA,OAAA,IAAArJ,MAAA,KAGAmnH,EAAAD,EAAA,GAGAE,EAAAF,EAAAz8G,IAAA48G,IAAApuG,KAAA,MAEA,OACA85F,MAAAoU,EACAzmE,MAAAymE,EACAv3F,MACAn0B,KAAA,OACAqc,OACAwvG,cAAAF,KAvBAG,CAAAvS,QALA,EAsCA,SAAAqS,GAAAG,GAQA,OAPAA,EAAAA,EAAAzsG,QAGA/V,QAAA,KAAA,IACAwiH,MAAiBA,MAGjBA;;;;GC1EA,SAAAC,GAAAC,EAAA7kH,GACA,MAAAmqD,GACAtM,OACAngD,IAAAmnH,EACA74G,WAEA+gB,QACAmmC,eAGA,IAAA,MAAAi/C,KAAAnyG,EACAmqD,EAAAtM,MAAA7xC,OAAApL,KAAAuxG,EAAAt0D,OACAsM,EAAAp9B,KAAAolF,EAAAt0D,OAAAs0D,EAAAplF,KAEAolF,EAAAj/C,aACA/I,EAAA+I,WAAAi/C,EAAAt0D,OAAAs0D,EAAAj/C,YAIA,OAAA/I;;;;GCpBA,MAAA26D,GAAA,mBAYAC,WAAAz4B,GAIA9vF,YAAA6oD,GACAlnD,MAAAknD,GAGAA,EAAAtD,OAAAhqD,OAAA+sH,IACA9kH,SACA,UACA,+BACA,kCACA,iBACA,iDACA,6BACA,gCACA,sCACA,iCAQAxD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OAGAA,EAAAxH,MAAAC,OAAA1vB,OAAA,SAAwCy8B,gBAAAi6D,KAGxC,MAAA9kH,EAAAikH,GAAA5+D,EAAAtD,OAAA5oD,IAAA,uBAAA+uB,OAAAjU,GAAAA,EAAA4pC,OACAsM,EAAAy6D,GAAAE,GAAA9kH,GAGAqlD,EAAA65B,WAAA6d,mBAAA5yC,GAEA9E,EAAA4C,SAAAl5C,IAAA+1G,GAAA,IAAAd,GAAA3+D;;;;;MC5CA2/D,WAAA14B,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAEA5oD,EAAArD,KAAAm3G,uBAEA/rD,EAAA1C,EAAA4C,SAAA9uD,IAAA,cAGAksD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,aAAAiwE,IACA,MAAAq0B,EAAAF,GAAAn0B,GAuBA,OAtBA00B,GAAAL,EA0DA,SAAArzG,EAAA+nD,GACA,MAAAmsD,EAAA,IAAAjtF,GAGA,IAAA,MAAAkrF,KAAAnyG,EAAA,CACA,MAAA4zG,EAAA,IAAAvB,IACAvqD,YAAA,aACAm9D,aAAA9S,EAAAt0D,MACAz3B,MAAA+rF,EAAAjC,QAGA0D,EAAA50F,KAAA,YAAAnc,GAAAklD,EAAA,QAAA1uD,GAAAA,IAAA84G,EAAAt0D,OAGAs0D,EAAAplF,MAAAolF,EAAAplF,KAAA9X,OACA2+F,EAAA5wG,IAAA,wBAA2CmvG,EAAAplF,KAAA9X,MAAA,kBAG3Ci/F,EAAAnlG,IAAA6kG,GAEA,OAAAM;;;;GA9EAgR,CAAAllH,EAAA+nD,IAEAsrD,EAAAjU,WAAAp8F,KACAojB,MAAAwiC,EAAA,eACAouC,KAAAmuB,GAAA/oG,EACA66E,SAAA,IAGAoc,EAAArqB,gBACAryE,YACAzC,MAAA,6BAIAm/F,EAAAr0F,KAAA,aAAAnc,GAAAklD,GAGAprD,KAAAsD,SAAAozG,EAAA,UAAA91F,IACA8nC,EAAA2C,QAAAzqC,EAAAjgB,OAAAwqD,aAA6CzuD,MAAAkkB,EAAAjgB,OAAA2nH,eAC7C5/D,EAAA45B,QAAAlyD,KAAA/H,UAGAquF,IAeA72G,uBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAIA,OAFAq7D,GAAA5+D,EAAAtD,OAAA5oD,IAAA,uBAEAyO,IAAAuqG,IAEA,YAAAA,EAAAjC,QACAiC,EAAAjC,MAAAtnD,EAAA,YAGAupD,WCjEAiT,WAAA94B,GAIAxlC,sBACA,OAAAi+D,GAAAC,IAMAr/D,wBACA,MAAA;;;;SCZA0/D,WAAAtB,GAIAvnH,YAAA6oD,GACAlnD,MAAAknD,EAAA;;;;GCVA,SAAAigE,GAAApB,GAEA,OAAAA,EACAt8G,IAAA29G,IAEAr9F,OAAAiqF,KAAAA,GAIA,MAAAqT,IACAC,MACAvV,MAAA,OACAryD,MAAA,OACA9wB,MACAn0B,KAAA,OACAsb,MAAA,cAGAwxG,OACAxV,MAAA,QACAryD,MAAA,QACA9wB,MACAn0B,KAAA,OACAsb,MAAA,eAGAyxG,KACAzV,MAAA,MACAryD,MAAA,MACA9wB,MACAn0B,KAAA,OACAsb,MAAA,aAGA0xG,MACA1V,MAAA,OACAryD,MAAA,OACA9wB,MACAn0B,KAAA,OACAsb,MAAA,eAUA,SAAAqxG,GAAApT,GAEA,GAAA,iBAAAA,EACA,OAAAA,EAIA,GAAAqT,GAAArT,GACA,OAAAqT,GAAArT,GAIA,GAAA,YAAAA,EACA,OACAt0D,WAAA3jD,EACAg2G,MAAA,WAKA,MAAA2V,EAAAC,WAAA3T,GAeA,IAAA7jG;;;;GAZA,OAAAwiG,MAAA+U,QAAA,GAYAv3G,EAPAu3G,GAWA3V,MAHAtlG,OAAA0D,GAIAuvC,MAAAvvC,EACAye,MACAn0B,KAAA,OACAqc,OACA8wG,eAAoBz3G,UC9FpB,MAAA03G,GAAA,iBAeAC,WAAA35B,GAIA9vF,YAAA6oD,GACAlnD,MAAAknD,GAGAA,EAAAtD,OAAAhqD,OAAAiuH,IACAhmH,SACA,OACA,QACA,UACA,MACA,UAKA,MAAAA,EAAAslH,GAAA3oH,KAAA0oD,OAAAtD,OAAA5oD,IAAA,qBAAA+uB,OAAAjU,GAAAA,EAAA4pC,OACAsM,EAAAy6D,GAAAoB,GAAAhmH,GAGAqlD,EAAA65B,WAAA6d,mBAAA5yC,GAGA9E,EAAA4C,SAAAl5C,IAAAi3G,GAAA,IAAAX,GAAAhgE,IAMA7oD,OACAG,KAAA0oD,OAGAxH,MAAAC,OAAA1vB,OAAA,SAAwCy8B,gBAAAm7D;;;;;MC1CxCE,WAAA55B,GAIA9vF,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAEA5oD,EAAArD,KAAAm3G,uBAEA/rD,EAAA1C,EAAA4C,SAAA9uD,IAAA,YAGAksD,EAAAumC,GAAAtK,iBAAAvyE,IAAA,WAAAiwE,IACA,MAAAq0B,EAAAF,GAAAn0B,GA0BA,OAzBA00B,GAAAL,EAuEA,SAAArzG,EAAA+nD,GACA,MAAAmsD,EAAA,IAAAjtF,GAEA,IAAA,MAAAkrF,KAAAnyG,EAAA,CACA,MAAA4zG,EAAA,IAAAvB,IACAvqD,YAAA,WACAm9D,aAAA9S,EAAAt0D,MACAz3B,MAAA+rF,EAAAjC,MACAh8F,MAAA,uBAGAi+F,EAAAplF,MAAAolF,EAAAplF,KAAA9X,OACA2+F,EAAA5wG,IAAA,qBAAwCmvG,EAAAplF,KAAA9X,MAAA,gBAGxCk9F,EAAAplF,MAAAolF,EAAAplF,KAAA7Y,OACA0/F,EAAA5wG,IAAA,WAA8B4wG,EAAA1/F,SAAqBi+F,EAAAplF,KAAA7Y,SAGnD0/F,EAAA50F,KAAA,YAAAnc,GAAAklD,EAAA,QAAA1uD,GAAAA,IAAA84G,EAAAt0D,OAGAq2D,EAAAnlG,IAAA6kG,GAGA,OAAAM;;;;GAhGAiS,CAAAnmH,EAAA+nD,IAGAsrD,EAAAjU,WAAAp8F,KACAojB,MAAAwiC,EAAA,aACAouC,KAAAovB,GAAAhqG,EACA66E,SAAA,IAGAoc,EAAArqB,gBACAryE,YACAzC,OACA,4BAKAm/F,EAAAr0F,KAAA,aAAAnc,GAAAklD,GAGAprD,KAAAsD,SAAAozG,EAAA,UAAA91F,IACA8nC,EAAA2C,QAAAzqC,EAAAjgB,OAAAwqD,aAA6CzuD,MAAAkkB,EAAAjgB,OAAA2nH,eAC7C5/D,EAAA45B,QAAAlyD,KAAA/H,UAGAquF,IAeA72G,uBACA,MAAA6oD,EAAA1oD,KAAA0oD,OACAuD,EAAAvD,EAAAuD,EAEA+rD,GACA0R,QAAAz9D,EAAA,WACA09D,KAAA19D,EAAA,QACA29D,MAAA39D,EAAA,SACA49D,IAAA59D,EAAA,OACA69D,KAAA79D,EAAA,SAKA,OAFA08D,GAAAjgE,EAAAtD,OAAA5oD,IAAA,qBAEAyO,IAAAuqG,IACA,MAAAjC,EAAAyE,EAAAxC,EAAAjC,OAOA,OALAA,GAAAA,GAAAiC,EAAAjC,QAEAiC,EAAAp5G,OAAAmiC,UAA8Bi3E,GAAWjC,MAAAA,KAGzCiC,WChFAuU,WAAAp6B,GAIAxlC,sBACA,OAAAm/D,GAAAC,IAMAvgE,wBACA,MAAA;;;;GCjCAxtD,EAAAQ,EAAAiC,EAAA,UAAA,WAAA,OAAA+rH;;;;;MAyBAA,WAAAj7B,IAEAi7B,GAAA5nC,OACAn5B,uBCIA0mC,GAIAxlC,sBACA,OAAAinC,GAAAyB,GAAAwE,GAAAwD,IAMA7xC,wBACA,MAAA,6BjGrBA2mC,GAIAxlC,sBACA,OAAAuxC,IAMA1yC,wBACA,MAAA,wBAMAnpD,OACA,MAAA89F,EAAA39F,KAAA0oD,OAAAtD,OAAA5oD,IAAA,sBAEAmhG,IAKA39F,KAAA0oD,OAAAO,QAAAzsD,IAAAk/F,IAAAI,oBAAAD,CAAAA,GAAA,IAAA6B,GAAA7B,EAAA8B,EAAA39F,KAAA0oD,OAAAuD,qBkG9BA0jC,GAIA3mC,wBACA,MAAA,aAMAnpD,YACAG,KAAAiqH,sBACAjqH,KAAAkqH,6BACAlqH,KAAAmqH,yBACAnqH,KAAAoqH,4BAYAvqH,sBACA,MAAAyrD,EAAAtrD,KAAA0oD,OAAA4C,SAEAA,EAAA9uD,IAAA,iBAEA,IAAAiiG,GAAAz+F,KAAA0oD,OAAA,WAAA,gBAGA4C,EAAA9uD,IAAA,iBAEA,IAAAiiG,GAAAz+F,KAAA0oD,OAAA,eAAA,gBAiBA7oD,6BACA,MAAAyrD,EAAAtrD,KAAA0oD,OAAA4C,SAEAA,EAAA9uD,IAAA,UAEA,IAAAmiG,GAAA3+F,KAAA0oD,OAAA,wBAAA,QACA,IAAAi2C,GAAA3+F,KAAA0oD,OAAA,oBAAA,SAIA4C,EAAA9uD,IAAA,YAKA,IAAAmiG,GAAA3+F,KAAA0oD,OAAA,+BAAA,UACA,IAAAi2C,GAAA3+F,KAAA0oD,OAAA,4BAAA,WAIA4C,EAAA9uD,IAAA,SAEA,IAAAmiG,GAAA3+F,KAAA0oD,OAAA,kBAAA,QAgBA7oD,yBACA,MAAAurD,EAAAprD,KAAA0oD,OAAA4C,SAAA9uD,IAAA,WAEA4uD,GACAA,EAAA+pD,cACA5pF,OAAAtvB,GAAAA,EAAA0F,MAAA,mBACAb,QAAA42G,IACA,MAAA2S,EAAA3S,EAAA,GACAtgG,EAAA,IAAAxN,cAAwCygH,WAGxC,IAAA5rB,GAAAz+F,KAAA0oD,OAAAtxC,EAAA,KACApX,KAAA0oD,OAAA2C,QAAA,WAAuC3uD,MAAAg7G,QAcvC73G,4BACAG,KAAA0oD,OAAA4C,SAAA9uD,IAAA,eAEA,IAAAiiG,GAAAz+F,KAAA0oD,OAAA,QAAA,8BCvHAinC,GAIAxlC,sBACA,OAAAg2C,GAAAI,IAMAv3C,wBACA,MAAA,uBCZA2mC,GAIAxlC,sBACA,OAAAu2C,GAAAG,IAMA73C,wBACA,MAAA,yBCZA2mC,GAIAxlC,sBACA,OAAAk4C,GAAAG,IAMAx5C,wBACA,MAAA,6BCLA2mC,GAIAxlC,sBACA,OACAg7C,GACAoM,GACA+C,IAOAtrD,wBACA,MAAA,4BCnBA2mC,GAIAxlC,sBACA,OAAAorD,GAAA2B,IAMAluD,wBACA,MAAA,YPAAuoD,iBQlBA5hB,GAIAxlC,sBACA,OAAA+uD,IAMAlwD,wBACA,MAAA,+BCVA2mC,GAIAxlC,sBACA,OAAA0xD,GAAAS,IAMAtzD,wBACA,MAAA,6BtCNA2mC,GAIAxlC,sBACA,OAAA8lD,IAMAjnD,wBACA,MAAA,eAMAnpD,OACA,MAAA6oD,EAAA1oD,KAAA0oD,OACA4hE,EAAA5hE,EAAAO,QAAAzsD,IAAA,kBAKA8tH,GACAtqH,KAAAsD,SAAAgnH,EAAA,OAAA1pG,IACA0mF,GAAA5+C,EAAA45B,QAAAlyD,KAAAza,SAAA4M,YACA3B,EAAA3e,SAEOS,SAAA,SAOP7C,YACA,MAAA6oD,EAAA1oD,KAAA0oD,OACA6hE,EAAA7hE,EAAAtD,OAAA5oD,IAAA,iBAGA+tH,GAAAA,EAAAtlH,SAUAjF,KAAAixG,SAAAjxG,KAAA0oD,OAAAO,QAAAzsD,IAAA,qBASAwD,KAAAwqH,SAAA,IAAAn8B,GAGAruF,KAAAwqH,SAAArlC,eAAAolC,EAAA7hE,EAAAumC,GAAAtK,kBAGA3kF,KAAAsD,SAAAolD,EAAA45B,QAAAlyD,KAAA,SAAA,KACApwB,KAAAyqH,oBAIAzqH,KAAAsD,SAAAolD,EAAAumC,GAAArK,aAAA,mBAAA,KACA5kF,KAAAyqH,oBACM/nH,SAAA,SASN7C,kBACA,MAAA6oD,EAAA1oD,KAAA0oD,OAEAA,EAAAumC,GAAArK,aAAAtiE,WAGAglF,GAAA5+C,EAAA45B,QAAAlyD,KAAAza,SAAA4M,WACAviB,KAAA0qH,eAHA1qH,KAAA2qH,eAeA9qH,eACA,MAAA6oD,EAAA1oD,KAAA0oD,OAEA1oD,KAAAoxG,WACAX,GAAA/nD,GAEA1oD,KAAAixG,SAAAb,QAAApwG,KAAAwqH,WACAxqH,KAAAixG,SAAA7+F,KACAge,KAAApwB,KAAAwqH,SACAvnG,SAAA0tF,GAAAjoD,GACA8nD,iBAAAwM,KAWAn9G,eACAG,KAAAoxG,YAIApxG,KAAAixG,SAAAxlF,OAAAzrB,KAAAwqH,UAUApZ,iBACA,OAAApxG,KAAAixG,SAAAd,aAAAnwG,KAAAwqH,W6B7HAlW,iBUpBA3kB,GAIAxlC,sBACA,OAAA6zD,GAAAqB,IAMAr2D,wBACA,MAAA,uBCXA2mC,GAIAxlC,sBACA,OAAA+7D,GAAAe,IAMAj+D,wBACA,MAAA,SXUA0rD,GACAJ,iBYtBA3kB,GAIAxlC,sBACA,OAAAs+D,GAAAsB,IAMA/gE,wBACA,MAAA,UZaA5D,QACA8/B,SACA1qE,OACA,WAAA,aACA,UACA,IACA,OACA,SACA,OACA,eACA,eACA,cACA,aACA,OACA,SAGAowG,OACA1lC,SACA,kBACA,kBACA,IACA,yBAGAl5B,SAAA,2jKazEA,IAAA6+D,EAGAA,EAAA,WACA,OAAA7qH,KADA,GAIA,IAEA6qH,EAAAA,GAAA7sH,SAAA,cAAAA,KAAA,EAAA8sH,MAAA,QACC,MAAA9rH,GAED,iBAAA1D,SAAAuvH,EAAAvvH,QAOAH,EAAAD,QAAA2vH\",\"sourcesContent\":[\"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine([], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"ClassicEditor\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"ClassicEditor\\\"] = factory();\\n})(window, function() {\\nreturn \",\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, {\\n \\t\\t\\t\\tconfigurable: false,\\n \\t\\t\\t\\tenumerable: true,\\n \\t\\t\\t\\tget: getter\\n \\t\\t\\t});\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 28);\\n\",\"import checkGlobal from './_checkGlobal';\\n\\n/** Used to determine if values are of the language type `Object`. */\\nvar objectTypes = {\\n  'function': true,\\n  'object': true\\n};\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\\n  ? exports\\n  : undefined;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\\n  ? module\\n  : undefined;\\n\\n/** Detect free variable `global` from Node.js. */\\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\\n\\n/** Detect free variable `self`. */\\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\\n\\n/** Detect free variable `window`. */\\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\\n\\n/** Detect `this` as the global object. */\\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\\n\\n/**\\n * Used as a reference to the global object.\\n *\\n * The `this` value is used if it's the global object to avoid Greasemonkey's\\n * restricted `window` object, otherwise the `window` object is used.\\n */\\nvar root = freeGlobal ||\\n  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\\n    freeSelf || thisGlobal || Function('return this')();\\n\\nexport default root;\\n\",\"/**\\n * Checks if `value` is a global object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\\n */\\nfunction checkGlobal(value) {\\n  return (value && value.Object === Object) ? value : null;\\n}\\n\\nexport default checkGlobal;\\n\",\"module.exports = function(originalModule) {\\r\\n\\tif (!originalModule.webpackPolyfill) {\\r\\n\\t\\tvar module = Object.create(originalModule);\\r\\n\\t\\t// module.parent = undefined by default\\r\\n\\t\\tif (!module.children) module.children = [];\\r\\n\\t\\tObject.defineProperty(module, \\\"loaded\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.l;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \\\"id\\\", {\\r\\n\\t\\t\\tenumerable: true,\\r\\n\\t\\t\\tget: function() {\\r\\n\\t\\t\\t\\treturn module.i;\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t\\tObject.defineProperty(module, \\\"exports\\\", {\\r\\n\\t\\t\\tenumerable: true\\r\\n\\t\\t});\\r\\n\\t\\tmodule.webpackPolyfill = 1;\\r\\n\\t}\\r\\n\\treturn module;\\r\\n};\\r\\n\",\"/**\\n * Creates a function that returns `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Util\\n * @param {*} value The value to return from the new function.\\n * @returns {Function} Returns the new constant function.\\n * @example\\n *\\n * var object = { 'user': 'fred' };\\n * var getter = _.constant(object);\\n *\\n * getter() === object;\\n * // => true\\n */\\nfunction constant(value) {\\n  return function() {\\n    return value;\\n  };\\n}\\n\\nexport default constant;\\n\",\"import constant from './constant';\\nimport root from './_root';\\n\\n/** Used to determine if values are of the language type `Object`. */\\nvar objectTypes = {\\n  'function': true,\\n  'object': true\\n};\\n\\n/** Detect free variable `exports`. */\\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\\n  ? exports\\n  : undefined;\\n\\n/** Detect free variable `module`. */\\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\\n  ? module\\n  : undefined;\\n\\n/** Detect the popular CommonJS extension `module.exports`. */\\nvar moduleExports = (freeModule && freeModule.exports === freeExports)\\n  ? freeExports\\n  : undefined;\\n\\n/** Built-in value references. */\\nvar Buffer = moduleExports ? root.Buffer : undefined;\\n\\n/**\\n * Checks if `value` is a buffer.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.3.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\\n * @example\\n *\\n * _.isBuffer(new Buffer(2));\\n * // => true\\n *\\n * _.isBuffer(new Uint8Array(2));\\n * // => false\\n */\\nvar isBuffer = !Buffer ? constant(false) : function(value) {\\n  return value instanceof Buffer;\\n};\\n\\nexport default isBuffer;\\n\",\"/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeGetPrototype = Object.getPrototypeOf;\\n\\n/**\\n * Gets the `[[Prototype]]` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {null|Object} Returns the `[[Prototype]]`.\\n */\\nfunction getPrototype(value) {\\n  return nativeGetPrototype(Object(value));\\n}\\n\\nexport default getPrototype;\\n\",\"/**\\n * Checks if `value` is a host object in IE < 9.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\\n */\\nfunction isHostObject(value) {\\n  // Many host objects are `Object` objects that can coerce to strings\\n  // despite having improperly defined `toString` methods.\\n  var result = false;\\n  if (value != null && typeof value.toString != 'function') {\\n    try {\\n      result = !!(value + '');\\n    } catch (e) {}\\n  }\\n  return result;\\n}\\n\\nexport default isHostObject;\\n\",\"/**\\n * Checks if `value` is object-like. A value is object-like if it's not `null`\\n * and has a `typeof` result of \\\"object\\\".\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\\n * @example\\n *\\n * _.isObjectLike({});\\n * // => true\\n *\\n * _.isObjectLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isObjectLike(_.noop);\\n * // => false\\n *\\n * _.isObjectLike(null);\\n * // => false\\n */\\nfunction isObjectLike(value) {\\n  return !!value && typeof value == 'object';\\n}\\n\\nexport default isObjectLike;\\n\",\"import getPrototype from './_getPrototype';\\nimport isHostObject from './_isHostObject';\\nimport isObjectLike from './isObjectLike';\\n\\n/** `Object#toString` result references. */\\nvar objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = Function.prototype.toString;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Used to infer the `Object` constructor. */\\nvar objectCtorString = funcToString.call(Object);\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/**\\n * Checks if `value` is a plain object, that is, an object created by the\\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.8.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a plain object,\\n *  else `false`.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n * }\\n *\\n * _.isPlainObject(new Foo);\\n * // => false\\n *\\n * _.isPlainObject([1, 2, 3]);\\n * // => false\\n *\\n * _.isPlainObject({ 'x': 0, 'y': 0 });\\n * // => true\\n *\\n * _.isPlainObject(Object.create(null));\\n * // => true\\n */\\nfunction isPlainObject(value) {\\n  if (!isObjectLike(value) ||\\n      objectToString.call(value) != objectTag || isHostObject(value)) {\\n    return false;\\n  }\\n  var proto = getPrototype(value);\\n  if (proto === null) {\\n    return true;\\n  }\\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\\n  return (typeof Ctor == 'function' &&\\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\\n}\\n\\nexport default isPlainObject;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/config\\n */\\n\\nimport isPlainObject from './lib/lodash/isPlainObject';\\n\\n/**\\n * Handles a configuration dictionary.\\n */\\nexport default class Config {\\n\\t/**\\n\\t * Creates an instance of the {@link ~Config} class.\\n\\t *\\n\\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\\n\\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\\n\\t */\\n\\tconstructor( configurations, defaultConfigurations ) {\\n\\t\\t/**\\n\\t\\t * Store for the whole configuration.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis._config = {};\\n\\n\\t\\t// Set default configuration.\\n\\t\\tif ( defaultConfigurations ) {\\n\\t\\t\\tthis.define( defaultConfigurations );\\n\\t\\t}\\n\\n\\t\\t// Set initial configuration.\\n\\t\\tif ( configurations ) {\\n\\t\\t\\tthis._setObjectToTarget( this._config, configurations );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Set configuration values.\\n\\t *\\n\\t * It accepts both a name/value pair or an object, which properties and values will be used to set\\n\\t * configurations.\\n\\t *\\n\\t * It also accepts setting a \\\"deep configuration\\\" by using dots in the name. For example, `'resize.width'` sets\\n\\t * the value for the `width` configuration in the `resize` subset.\\n\\t *\\n\\t *\\t\\tconfig.set( 'width', 500 );\\n\\t *\\t\\tconfig.set( 'toolbar.collapsed', true );\\n\\t *\\n\\t *\\t\\t// Equivalent to:\\n\\t *\\t\\tconfig.set( {\\n\\t *\\t\\t\\twidth: 500\\n\\t *\\t\\t\\ttoolbar: {\\n\\t *\\t\\t\\t\\tcollapsed: true\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * Passing an object as the value will amend the configuration, not replace it.\\n\\t *\\n\\t *\\t\\tconfig.set( 'toolbar', {\\n\\t *\\t\\t\\tcollapsed: true,\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\tconfig.set( 'toolbar', {\\n\\t *\\t\\t\\tcolor: 'red',\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\tconfig.get( 'toolbar.collapsed' ); // true\\n\\t *\\t\\tconfig.get( 'toolbar.color' ); // 'red'\\n\\t *\\n\\t * @param {String|Object} name The configuration name or an object from which take properties as\\n\\t * configuration entries. Configuration names are case-sensitive.\\n\\t * @param {*} value The configuration value. Used if a name is passed.\\n\\t */\\n\\tset( name, value ) {\\n\\t\\tthis._setToTarget( this._config, name, value );\\n\\t}\\n\\n\\t/**\\n\\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\\n\\t * existing one, but does not overwrite already defined values.\\n\\t *\\n\\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\\n\\t * rarely used for other needs.\\n\\t *\\n\\t * @param {String|Object} name The configuration name or an object from which take properties as\\n\\t * configuration entries. Configuration names are case-sensitive.\\n\\t * @param {*} value The configuration value. Used if a name is passed.\\n\\t */\\n\\tdefine( name, value ) {\\n\\t\\tconst isDefine = true;\\n\\n\\t\\tthis._setToTarget( this._config, name, value, isDefine );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the value for a configuration entry.\\n\\t *\\n\\t *\\t\\tconfig.get( 'name' );\\n\\t *\\n\\t * Deep configurations can be retrieved by separating each part with a dot.\\n\\t *\\n\\t *\\t\\tconfig.get( 'toolbar.collapsed' );\\n\\t *\\n\\t * @param {String} name The configuration name. Configuration names are case-sensitive.\\n\\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\\n\\t */\\n\\tget( name ) {\\n\\t\\treturn this._getFromSource( this._config, name );\\n\\t}\\n\\n\\t/**\\n\\t * Saves passed configuration to the specified target (nested object).\\n\\t *\\n\\t * @private\\n\\t * @param {Object} target Nested config object.\\n\\t * @param {String|Object} name The configuration name or an object from which take properties as\\n\\t * configuration entries. Configuration names are case-sensitive.\\n\\t * @param {*} value The configuration value. Used if a name is passed.\\n\\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\\n\\t */\\n\\t_setToTarget( target, name, value, isDefine = false ) {\\n\\t\\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\\n\\t\\tif ( isPlainObject( name ) ) {\\n\\t\\t\\tthis._setObjectToTarget( target, name, isDefine );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\\n\\t\\tconst parts = name.split( '.' );\\n\\n\\t\\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\\n\\t\\tname = parts.pop();\\n\\n\\t\\t// Iterate over parts to check if currently stored configuration has proper structure.\\n\\t\\tfor ( const part of parts ) {\\n\\t\\t\\t// If there is no object for specified part then create one.\\n\\t\\t\\tif ( !isPlainObject( target[ part ] ) ) {\\n\\t\\t\\t\\ttarget[ part ] = {};\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Nested object becomes a target.\\n\\t\\t\\ttarget = target[ part ];\\n\\t\\t}\\n\\n\\t\\t// In case of value is an object.\\n\\t\\tif ( isPlainObject( value ) ) {\\n\\t\\t\\t// We take care of proper config structure.\\n\\t\\t\\tif ( !isPlainObject( target[ name ] ) ) {\\n\\t\\t\\t\\ttarget[ name ] = {};\\n\\t\\t\\t}\\n\\n\\t\\t\\ttarget = target[ name ];\\n\\n\\t\\t\\t// And iterate through this object calling `_setToTarget` again for each property.\\n\\t\\t\\tthis._setObjectToTarget( target, value, isDefine );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Do nothing if we are defining configuration for non empty name.\\n\\t\\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\ttarget[ name ] = value;\\n\\t}\\n\\n\\t/**\\n\\t * Get specified configuration from specified source (nested object).\\n\\t *\\n\\t * @private\\n\\t * @param {Object} source level of nested object.\\n\\t * @param {String} name The configuration name. Configuration names are case-sensitive.\\n\\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\\n\\t */\\n\\t_getFromSource( source, name ) {\\n\\t\\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\\n\\t\\tconst parts = name.split( '.' );\\n\\n\\t\\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\\n\\t\\tname = parts.pop();\\n\\n\\t\\t// Iterate over parts to check if currently stored configuration has proper structure.\\n\\t\\tfor ( const part of parts ) {\\n\\t\\t\\tif ( !isPlainObject( source[ part ] ) ) {\\n\\t\\t\\t\\tsource = null;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Nested object becomes a source.\\n\\t\\t\\tsource = source[ part ];\\n\\t\\t}\\n\\n\\t\\t// Always returns undefined for non existing configuration\\n\\t\\treturn source ? source[ name ] : undefined;\\n\\t}\\n\\n\\t/**\\n\\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} target Nested config object.\\n\\t * @param {Object} configuration Configuration data set\\n\\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\\n\\t */\\n\\t_setObjectToTarget( target, configuration, isDefine ) {\\n\\t\\tObject.keys( configuration ).forEach( key => {\\n\\t\\t\\tthis._setToTarget( target, key, configuration[ key ], isDefine );\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/ckeditorerror\\n */\\n\\n/**\\n * URL to the documentation with error codes.\\n */\\nexport const DOCUMENTATION_URL =\\n\\t'https://docs.ckeditor.com/ckeditor5/latest/framework/guides/support/error-codes.html';\\n\\n/**\\n * The CKEditor error class.\\n *\\n * All errors will be shortened during the minification process in order to reduce the code size.\\n * Therefore, all error messages should be documented in the same way as those in {@link module:utils/log}.\\n *\\n * Read more in the {@link module:utils/log} module.\\n *\\n * @extends Error\\n */\\nexport default class CKEditorError extends Error {\\n\\t/**\\n\\t * Creates an instance of the CKEditorError class.\\n\\t *\\n\\t * Read more about error logging in the {@link module:utils/log} module.\\n\\t *\\n\\t * @param {String} message The error message in an `error-name: Error message.` format.\\n\\t * During the minification process the \\\"Error message\\\" part will be removed to limit the code size\\n\\t * and a link to this error documentation will be added to the `message`.\\n\\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\\n\\t * will be appended to the error message, so the data are quickly visible in the console. The original\\n\\t * data object will also be later available under the {@link #data} property.\\n\\t */\\n\\tconstructor( message, data ) {\\n\\t\\tmessage = attachLinkToDocumentation( message );\\n\\n\\t\\tif ( data ) {\\n\\t\\t\\tmessage += ' ' + JSON.stringify( data );\\n\\t\\t}\\n\\n\\t\\tsuper( message );\\n\\n\\t\\t/**\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.name = 'CKEditorError';\\n\\n\\t\\t/**\\n\\t\\t * The additional error data passed to the constructor.\\n\\t\\t *\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis.data = data;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if error is an instance of CKEditorError class.\\n\\t *\\n\\t * @param {Object} error Object to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tstatic isCKEditorError( error ) {\\n\\t\\treturn error instanceof CKEditorError;\\n\\t}\\n}\\n\\n/**\\n * Attaches link to the documentation at the end of the error message.\\n *\\n * @param {String} message Message to be logged.\\n * @returns {String}\\n */\\nexport function attachLinkToDocumentation( message ) {\\n\\tconst matchedErrorName = message.match( /^([^:]+):/ );\\n\\n\\tif ( !matchedErrorName ) {\\n\\t\\treturn message;\\n\\t}\\n\\n\\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\\\n`;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/spy\\n */\\n\\n/**\\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\\n *\\n * The following are the present features:\\n *\\n * * spy.called: property set to `true` if the function has been called at least once.\\n *\\n * @returns {Function} The spy function.\\n */\\nfunction spy() {\\n\\treturn function spy() {\\n\\t\\tspy.called = true;\\n\\t};\\n}\\n\\nexport default spy;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/eventinfo\\n */\\n\\nimport spy from './spy';\\n\\n/**\\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\\n * manipulate it.\\n */\\nexport default class EventInfo {\\n\\t/**\\n\\t * @param {Object} source The emitter.\\n\\t * @param {String} name The event name.\\n\\t */\\n\\tconstructor( source, name ) {\\n\\t\\t/**\\n\\t\\t * The object that fired the event.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis.source = source;\\n\\n\\t\\t/**\\n\\t\\t * The event name.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.name = name;\\n\\n\\t\\t/**\\n\\t\\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<Object>}\\n\\t\\t */\\n\\t\\tthis.path = [];\\n\\n\\t\\t// The following methods are defined in the constructor because they must be re-created per instance.\\n\\n\\t\\t/**\\n\\t\\t * Stops the event emitter to call further callbacks for this event interaction.\\n\\t\\t *\\n\\t\\t * @method #stop\\n\\t\\t */\\n\\t\\tthis.stop = spy();\\n\\n\\t\\t/**\\n\\t\\t * Removes the current callback from future interactions of this event.\\n\\t\\t *\\n\\t\\t * @method #off\\n\\t\\t */\\n\\t\\tthis.off = spy();\\n\\n\\t\\t/**\\n\\t\\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\\n\\t\\t *\\n\\t\\t * It's `undefined` by default and can be changed by an event listener:\\n\\t\\t *\\n\\t\\t *\\t\\tdataController.fire( 'getSelectedContent', ( evt ) => {\\n\\t\\t *\\t\\t\\t// This listener will make `dataController.fire( 'getSelectedContent' )`\\n\\t\\t *\\t\\t\\t// always return an empty DocumentFragment.\\n\\t\\t *\\t\\t\\tevt.return = new DocumentFragment();\\n\\t\\t *\\n\\t\\t *\\t\\t\\t// Make sure no other listeners are executed.\\n\\t\\t *\\t\\t\\tevt.stop();\\n\\t\\t *\\t\\t} );\\n\\t\\t *\\n\\t\\t * @member #return\\n\\t\\t */\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/uid\\n */\\n\\n/**\\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\\n * Each character in uid string represents a hexadecimal digit (base 16).\\n *\\n * @returns {String} A hexadecimal number representing the id.\\n */\\nexport default function uid() {\\n\\tlet uuid = 'e'; // Make sure that id does not start with number.\\n\\n\\tfor ( let i = 0; i < 8; i++ ) {\\n\\t\\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\\n\\t}\\n\\n\\treturn uuid;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/priorities\\n */\\n\\n/**\\n * String representing a priority value.\\n *\\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\\n */\\n\\n/**\\n * Provides group of constants to use instead of hardcoding numeric priority values.\\n *\\n * @namespace\\n */\\nconst priorities = {\\n\\t/**\\n\\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\\n\\t *\\n\\t * @static\\n\\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\\n\\t * @returns {Number} Converted priority.\\n\\t */\\n\\tget( priority ) {\\n\\t\\tif ( typeof priority != 'number' ) {\\n\\t\\t\\treturn this[ priority ] || this.normal;\\n\\t\\t} else {\\n\\t\\t\\treturn priority;\\n\\t\\t}\\n\\t},\\n\\n\\thighest: 100000,\\n\\thigh: 1000,\\n\\tnormal: 0,\\n\\tlow: -1000,\\n\\tlowest: -100000\\n};\\n\\nexport default priorities;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/emittermixin\\n */\\n\\nimport EventInfo from './eventinfo';\\nimport uid from './uid';\\nimport priorities from './priorities';\\n\\nconst _listeningTo = Symbol( 'listeningTo' );\\nconst _emitterId = Symbol( 'emitterId' );\\n\\n/**\\n * Mixin that injects the {@link ~Emitter events API} into its host.\\n *\\n * @mixin EmitterMixin\\n * @implements module:utils/emittermixin~Emitter\\n */\\nconst EmitterMixin = {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\ton( event, callback, options = {} ) {\\n\\t\\tthis.listenTo( this, event, callback, options );\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tonce( event, callback, options ) {\\n\\t\\tconst onceCallback = function( event, ...args ) {\\n\\t\\t\\t// Go off() at the first call.\\n\\t\\t\\tevent.off();\\n\\n\\t\\t\\t// Go with the original callback.\\n\\t\\t\\tcallback.call( this, event, ...args );\\n\\t\\t};\\n\\n\\t\\t// Make a similar on() call, simply replacing the callback.\\n\\t\\tthis.listenTo( this, event, onceCallback, options );\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\toff( event, callback ) {\\n\\t\\tthis.stopListening( this, event, callback );\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tlistenTo( emitter, event, callback, options = {} ) {\\n\\t\\tlet emitterInfo, eventCallbacks;\\n\\n\\t\\t// _listeningTo contains a list of emitters that this object is listening to.\\n\\t\\t// This list has the following format:\\n\\t\\t//\\n\\t\\t// _listeningTo: {\\n\\t\\t//     emitterId: {\\n\\t\\t//         emitter: emitter,\\n\\t\\t//         callbacks: {\\n\\t\\t//             event1: [ callback1, callback2, ... ]\\n\\t\\t//             ....\\n\\t\\t//         }\\n\\t\\t//     },\\n\\t\\t//     ...\\n\\t\\t// }\\n\\n\\t\\tif ( !this[ _listeningTo ] ) {\\n\\t\\t\\tthis[ _listeningTo ] = {};\\n\\t\\t}\\n\\n\\t\\tconst emitters = this[ _listeningTo ];\\n\\n\\t\\tif ( !_getEmitterId( emitter ) ) {\\n\\t\\t\\t_setEmitterId( emitter );\\n\\t\\t}\\n\\n\\t\\tconst emitterId = _getEmitterId( emitter );\\n\\n\\t\\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\\n\\t\\t\\temitterInfo = emitters[ emitterId ] = {\\n\\t\\t\\t\\temitter,\\n\\t\\t\\t\\tcallbacks: {}\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\\n\\t\\t\\teventCallbacks = emitterInfo.callbacks[ event ] = [];\\n\\t\\t}\\n\\n\\t\\teventCallbacks.push( callback );\\n\\n\\t\\t// Finally register the callback to the event.\\n\\t\\tcreateEventNamespace( emitter, event );\\n\\t\\tconst lists = getCallbacksListsForNamespace( emitter, event );\\n\\t\\tconst priority = priorities.get( options.priority );\\n\\n\\t\\tconst callbackDefinition = {\\n\\t\\t\\tcallback,\\n\\t\\t\\tpriority\\n\\t\\t};\\n\\n\\t\\t// Add the callback to all callbacks list.\\n\\t\\tfor ( const callbacks of lists ) {\\n\\t\\t\\t// Add the callback to the list in the right priority position.\\n\\t\\t\\tlet added = false;\\n\\n\\t\\t\\tfor ( let i = 0; i < callbacks.length; i++ ) {\\n\\t\\t\\t\\tif ( callbacks[ i ].priority < priority ) {\\n\\t\\t\\t\\t\\tcallbacks.splice( i, 0, callbackDefinition );\\n\\t\\t\\t\\t\\tadded = true;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add at the end, if right place was not found.\\n\\t\\t\\tif ( !added ) {\\n\\t\\t\\t\\tcallbacks.push( callbackDefinition );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstopListening( emitter, event, callback ) {\\n\\t\\tconst emitters = this[ _listeningTo ];\\n\\t\\tlet emitterId = emitter && _getEmitterId( emitter );\\n\\t\\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\\n\\t\\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\\n\\n\\t\\t// Stop if nothing has been listened.\\n\\t\\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// All params provided. off() that single callback.\\n\\t\\tif ( callback ) {\\n\\t\\t\\tremoveCallback( emitter, event, callback );\\n\\t\\t}\\n\\t\\t// Only `emitter` and `event` provided. off() all callbacks for that event.\\n\\t\\telse if ( eventCallbacks ) {\\n\\t\\t\\twhile ( ( callback = eventCallbacks.pop() ) ) {\\n\\t\\t\\t\\tremoveCallback( emitter, event, callback );\\n\\t\\t\\t}\\n\\n\\t\\t\\tdelete emitterInfo.callbacks[ event ];\\n\\t\\t}\\n\\t\\t// Only `emitter` provided. off() all events for that emitter.\\n\\t\\telse if ( emitterInfo ) {\\n\\t\\t\\tfor ( event in emitterInfo.callbacks ) {\\n\\t\\t\\t\\tthis.stopListening( emitter, event );\\n\\t\\t\\t}\\n\\t\\t\\tdelete emitters[ emitterId ];\\n\\t\\t}\\n\\t\\t// No params provided. off() all emitters.\\n\\t\\telse {\\n\\t\\t\\tfor ( emitterId in emitters ) {\\n\\t\\t\\t\\tthis.stopListening( emitters[ emitterId ].emitter );\\n\\t\\t\\t}\\n\\t\\t\\tdelete this[ _listeningTo ];\\n\\t\\t}\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tfire( eventOrInfo, ...args ) {\\n\\t\\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\\n\\t\\tconst event = eventInfo.name;\\n\\t\\tlet callbacks = getCallbacksForEvent( this, event );\\n\\n\\t\\t// Record that the event passed this emitter on its path.\\n\\t\\teventInfo.path.push( this );\\n\\n\\t\\t// Handle event listener callbacks first.\\n\\t\\tif ( callbacks ) {\\n\\t\\t\\t// Arguments passed to each callback.\\n\\t\\t\\tconst callbackArgs = [ eventInfo, ...args ];\\n\\n\\t\\t\\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\\n\\t\\t\\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\\n\\t\\t\\t// failed if callbacks were added to the queue before currently processed callback.\\n\\t\\t\\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\\n\\t\\t\\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\\n\\t\\t\\tcallbacks = Array.from( callbacks );\\n\\n\\t\\t\\tfor ( let i = 0; i < callbacks.length; i++ ) {\\n\\t\\t\\t\\tcallbacks[ i ].callback.apply( this, callbackArgs );\\n\\n\\t\\t\\t\\t// Remove the callback from future requests if off() has been called.\\n\\t\\t\\t\\tif ( eventInfo.off.called ) {\\n\\t\\t\\t\\t\\t// Remove the called mark for the next calls.\\n\\t\\t\\t\\t\\tdelete eventInfo.off.called;\\n\\n\\t\\t\\t\\t\\tremoveCallback( this, event, callbacks[ i ].callback );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Do not execute next callbacks if stop() was called.\\n\\t\\t\\t\\tif ( eventInfo.stop.called ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Delegate event to other emitters if needed.\\n\\t\\tif ( this._delegations ) {\\n\\t\\t\\tconst destinations = this._delegations.get( event );\\n\\t\\t\\tconst passAllDestinations = this._delegations.get( '*' );\\n\\n\\t\\t\\tif ( destinations ) {\\n\\t\\t\\t\\tfireDelegatedEvents( destinations, eventInfo, args );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( passAllDestinations ) {\\n\\t\\t\\t\\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn eventInfo.return;\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdelegate( ...events ) {\\n\\t\\treturn {\\n\\t\\t\\tto: ( emitter, nameOrFunction ) => {\\n\\t\\t\\t\\tif ( !this._delegations ) {\\n\\t\\t\\t\\t\\tthis._delegations = new Map();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor ( const eventName of events ) {\\n\\t\\t\\t\\t\\tconst destinations = this._delegations.get( eventName );\\n\\n\\t\\t\\t\\t\\tif ( !destinations ) {\\n\\t\\t\\t\\t\\t\\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tdestinations.set( emitter, nameOrFunction );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstopDelegating( event, emitter ) {\\n\\t\\tif ( !this._delegations ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !event ) {\\n\\t\\t\\tthis._delegations.clear();\\n\\t\\t} else if ( !emitter ) {\\n\\t\\t\\tthis._delegations.delete( event );\\n\\t\\t} else {\\n\\t\\t\\tconst destinations = this._delegations.get( event );\\n\\n\\t\\t\\tif ( destinations ) {\\n\\t\\t\\t\\tdestinations.delete( emitter );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\\nexport default EmitterMixin;\\n\\n/**\\n * Emitter/listener interface.\\n *\\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\\n *\\n * @interface Emitter\\n */\\n\\n/**\\n * Registers a callback function to be executed when an event is fired.\\n *\\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\\n * listen on itself).\\n *\\n * @method #on\\n * @param {String} event The name of the event.\\n * @param {Function} callback The function to be called on event.\\n * @param {Object} [options={}] Additional options.\\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\\n * order they were added.\\n */\\n\\n/**\\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\\n * calling {@link #on} followed by {@link #off} in the callback.\\n *\\n * @method #once\\n * @param {String} event The name of the event.\\n * @param {Function} callback The function to be called on event.\\n * @param {Object} [options={}] Additional options.\\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\\n * order they were added.\\n */\\n\\n/**\\n * Stops executing the callback on the given event.\\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\\n *\\n * @method #off\\n * @param {String} event The name of the event.\\n * @param {Function} callback The function to stop being called.\\n */\\n\\n/**\\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\\n *\\n * Events can be grouped in namespaces using `:`.\\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\\n *\\n *\\t\\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\\n *\\t\\tmyEmitter.on( 'myGroup', genericCallback );\\n *\\t\\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\\n *\\n *\\t\\t// genericCallback is fired.\\n *\\t\\tmyEmitter.fire( 'myGroup' );\\n *\\t\\t// both genericCallback and specificCallback are fired.\\n *\\t\\tmyEmitter.fire( 'myGroup:myEvent' );\\n *\\t\\t// genericCallback is fired even though there are no callbacks for \\\"foo\\\".\\n *\\t\\tmyEmitter.fire( 'myGroup:foo' );\\n *\\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\\n *\\n * @method #listenTo\\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\\n * @param {String} event The name of the event.\\n * @param {Function} callback The function to be called on event.\\n * @param {Object} [options={}] Additional options.\\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\\n * order they were added.\\n */\\n\\n/**\\n * Stops listening for events. It can be used at different levels:\\n *\\n * * To stop listening to a specific callback.\\n * * To stop listening to a specific event.\\n * * To stop listening to all events fired by a specific object.\\n * * To stop listening to all events fired by all objects.\\n *\\n * @method #stopListening\\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\\n * for all events from `emitter`.\\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\\n * `event`.\\n */\\n\\n/**\\n * Fires an event, executing all callbacks registered for it.\\n *\\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\\n * followed by the optional `args` provided in the `fire()` method call.\\n *\\n * @method #fire\\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\\n * is the first param of every callback).\\n */\\n\\n/**\\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\\n *\\n *\\t\\temitterA.delegate( 'eventX' ).to( emitterB );\\n *\\t\\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\\n *\\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\\n *\\n *\\t\\temitterA.fire( 'eventX', data );\\n *\\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\\n *\\n *\\t\\temitterA.fire( 'eventY', data );\\n *\\n * @method #delegate\\n * @param {...String} events Event names that will be delegated to another emitter.\\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\\n */\\n\\n/**\\n * Stops delegating events. It can be used at different levels:\\n *\\n * * To stop delegating all events.\\n * * To stop delegating a specific event to all emitters.\\n * * To stop delegating a specific event to a specific emitter.\\n *\\n * @method #stopDelegating\\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\\n * If omitted, stops delegation of `event` to all emitters.\\n */\\n\\n/**\\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\\n * If not, returns `null`.\\n *\\n * @protected\\n * @param {module:utils/emittermixin~EmitterMixin} listeningEmitter Emitter that listens.\\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\\n * @returns {module:utils/emittermixin~EmitterMixin|null}\\n */\\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\\n\\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\\n\\t\\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/**\\n * Sets emitter's unique id.\\n *\\n * **Note:** `_emitterId` can be set only once.\\n *\\n * @protected\\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter for which id will be set.\\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\\n */\\nexport function _setEmitterId( emitter, id ) {\\n\\tif ( !emitter[ _emitterId ] ) {\\n\\t\\temitter[ _emitterId ] = id || uid();\\n\\t}\\n}\\n\\n/**\\n * Returns emitter's unique id.\\n *\\n * @protected\\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter which id will be returned.\\n */\\nexport function _getEmitterId( emitter ) {\\n\\treturn emitter[ _emitterId ];\\n}\\n\\n// Gets the internal `_events` property of the given object.\\n// `_events` property store all lists with callbacks for registered event names.\\n// If there were no events registered on the object, empty `_events` object is created.\\nfunction getEvents( source ) {\\n\\tif ( !source._events ) {\\n\\t\\tObject.defineProperty( source, '_events', {\\n\\t\\t\\tvalue: {}\\n\\t\\t} );\\n\\t}\\n\\n\\treturn source._events;\\n}\\n\\n// Creates event node for generic-specific events relation architecture.\\nfunction makeEventNode() {\\n\\treturn {\\n\\t\\tcallbacks: [],\\n\\t\\tchildEvents: []\\n\\t};\\n}\\n\\n// Creates an architecture for generic-specific events relation.\\n// If needed, creates all events for given eventName, i.e. if the first registered event\\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\\n// It also copies callbacks from more generic events to more specific events when\\n// specific events are created.\\nfunction createEventNamespace( source, eventName ) {\\n\\tconst events = getEvents( source );\\n\\n\\t// First, check if the event we want to add to the structure already exists.\\n\\tif ( events[ eventName ] ) {\\n\\t\\t// If it exists, we don't have to do anything.\\n\\t\\treturn;\\n\\t}\\n\\n\\t// In other case, we have to create the structure for the event.\\n\\t// Note, that we might need to create intermediate events too.\\n\\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\\n\\t// we need to also register foo:bar.\\n\\n\\t// Currently processed event name.\\n\\tlet name = eventName;\\n\\t// Name of the event that is a child event for currently processed event.\\n\\tlet childEventName = null;\\n\\n\\t// Array containing all newly created specific events.\\n\\tconst newEventNodes = [];\\n\\n\\t// While loop can't check for ':' index because we have to handle generic events too.\\n\\t// In each loop, we truncate event name, going from the most specific name to the generic one.\\n\\t// I.e. foo:bar:abc -> foo:bar -> foo.\\n\\twhile ( name !== '' ) {\\n\\t\\tif ( events[ name ] ) {\\n\\t\\t\\t// If the currently processed event name is already registered, we can be sure\\n\\t\\t\\t// that it already has all the structure created, so we can break the loop here\\n\\t\\t\\t// as no more events need to be registered.\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// If this event is not yet registered, create a new object for it.\\n\\t\\tevents[ name ] = makeEventNode();\\n\\t\\t// Add it to the array with newly created events.\\n\\t\\tnewEventNodes.push( events[ name ] );\\n\\n\\t\\t// Add previously processed event name as a child of this event.\\n\\t\\tif ( childEventName ) {\\n\\t\\t\\tevents[ name ].childEvents.push( childEventName );\\n\\t\\t}\\n\\n\\t\\tchildEventName = name;\\n\\t\\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\\n\\t\\tname = name.substr( 0, name.lastIndexOf( ':' ) );\\n\\t}\\n\\n\\tif ( name !== '' ) {\\n\\t\\t// If name is not empty, we found an already registered event that was a parent of the\\n\\t\\t// event we wanted to register.\\n\\n\\t\\t// Copy that event's callbacks to newly registered events.\\n\\t\\tfor ( const node of newEventNodes ) {\\n\\t\\t\\tnode.callbacks = events[ name ].callbacks.slice();\\n\\t\\t}\\n\\n\\t\\t// Add last newly created event to the already registered event.\\n\\t\\tevents[ name ].childEvents.push( childEventName );\\n\\t}\\n}\\n\\n// Gets an array containing callbacks list for a given event and it's more specific events.\\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\\n// return callback list of foo:bar and foo:bar:abc (but not foo).\\nfunction getCallbacksListsForNamespace( source, eventName ) {\\n\\tconst eventNode = getEvents( source )[ eventName ];\\n\\n\\tif ( !eventNode ) {\\n\\t\\treturn [];\\n\\t}\\n\\n\\tlet callbacksLists = [ eventNode.callbacks ];\\n\\n\\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\\n\\t\\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\\n\\n\\t\\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\\n\\t}\\n\\n\\treturn callbacksLists;\\n}\\n\\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\\n// for callbacks for it's more generic version.\\nfunction getCallbacksForEvent( source, eventName ) {\\n\\tlet event;\\n\\n\\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\\n\\t\\t// There are no callbacks registered for specified eventName.\\n\\t\\t// But this could be a specific-type event that is in a namespace.\\n\\t\\tif ( eventName.indexOf( ':' ) > -1 ) {\\n\\t\\t\\t// If the eventName is specific, try to find callback lists for more generic event.\\n\\t\\t\\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\\n\\t\\t} else {\\n\\t\\t\\t// If this is a top-level generic event, return null;\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\treturn event.callbacks;\\n}\\n\\n// Fires delegated events for given map of destinations.\\n//\\n// @private\\n// * @param {Map.<utils.Emitter>} destinations A map containing `[ {@link utils.Emitter}, \\\"event name\\\" ]` pair destinations.\\n// * @param {utils.EventInfo} eventInfo The original event info object.\\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\\n\\tfor ( let [ emitter, name ] of destinations ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\tname = eventInfo.name;\\n\\t\\t} else if ( typeof name == 'function' ) {\\n\\t\\t\\tname = name( eventInfo.name );\\n\\t\\t}\\n\\n\\t\\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\\n\\n\\t\\tdelegatedInfo.path = [ ...eventInfo.path ];\\n\\n\\t\\temitter.fire( delegatedInfo, ...fireArgs );\\n\\t}\\n}\\n\\n// Removes callback from emitter for given event.\\n//\\n// @param {module:utils/emittermixin~Emitter} emitter\\n// @param {String} event\\n// @param {Function} callback\\nfunction removeCallback( emitter, event, callback ) {\\n\\tconst lists = getCallbacksListsForNamespace( emitter, event );\\n\\n\\tfor ( const callbacks of lists ) {\\n\\t\\tfor ( let i = 0; i < callbacks.length; i++ ) {\\n\\t\\t\\tif ( callbacks[ i ].callback == callback ) {\\n\\t\\t\\t\\t// Remove the callback from the list (fixing the next index).\\n\\t\\t\\t\\tcallbacks.splice( i, 1 );\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * The return value of {@link ~EmitterMixin#delegate}.\\n *\\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\\n */\\n\\n/**\\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\\n *\\n * @method #to\\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\\n * @param {String|Function} nameOrFunction A custom event name or function which converts the original name string.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/mix\\n */\\n\\n/**\\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\\n * prototype of first object (a constructor).\\n *\\n *\\t\\tclass Editor {\\n *\\t\\t\\t...\\n *\\t\\t}\\n *\\n *\\t\\tconst SomeMixin = {\\n *\\t\\t\\ta() {\\n *\\t\\t\\t\\treturn 'a';\\n *\\t\\t\\t}\\n *\\t\\t};\\n *\\n *\\t\\tmix( Editor, SomeMixin, ... );\\n *\\n *\\t\\tnew Editor().a(); // -> 'a'\\n *\\n * Note: Properties which already exist in the base class will not be overriden.\\n *\\n * @param {Function} [baseClass] Class which prototype will be extended.\\n * @param {Object} [...mixins] Objects from which to get properties.\\n */\\nexport default function mix( baseClass, ...mixins ) {\\n\\tmixins.forEach( mixin => {\\n\\t\\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\\n\\t\\t\\t.forEach( key => {\\n\\t\\t\\t\\tif ( key in baseClass.prototype ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\\n\\t\\t\\t\\tsourceDescriptor.enumerable = false;\\n\\n\\t\\t\\t\\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\\n\\t\\t\\t} );\\n\\t} );\\n}\\n\",\"/**\\n * Removes all key-value entries from the list cache.\\n *\\n * @private\\n * @name clear\\n * @memberOf ListCache\\n */\\nfunction listCacheClear() {\\n  this.__data__ = [];\\n}\\n\\nexport default listCacheClear;\\n\",\"/**\\n * Performs a\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * comparison between two values to determine if they are equivalent.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n * @example\\n *\\n * var object = { 'user': 'fred' };\\n * var other = { 'user': 'fred' };\\n *\\n * _.eq(object, object);\\n * // => true\\n *\\n * _.eq(object, other);\\n * // => false\\n *\\n * _.eq('a', 'a');\\n * // => true\\n *\\n * _.eq('a', Object('a'));\\n * // => false\\n *\\n * _.eq(NaN, NaN);\\n * // => true\\n */\\nfunction eq(value, other) {\\n  return value === other || (value !== value && other !== other);\\n}\\n\\nexport default eq;\\n\",\"import eq from './eq';\\n\\n/**\\n * Gets the index at which the `key` is found in `array` of key-value pairs.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {*} key The key to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction assocIndexOf(array, key) {\\n  var length = array.length;\\n  while (length--) {\\n    if (eq(array[length][0], key)) {\\n      return length;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default assocIndexOf;\\n\",\"import assocIndexOf from './_assocIndexOf';\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * Removes `key` and its value from the list cache.\\n *\\n * @private\\n * @name delete\\n * @memberOf ListCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction listCacheDelete(key) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    return false;\\n  }\\n  var lastIndex = data.length - 1;\\n  if (index == lastIndex) {\\n    data.pop();\\n  } else {\\n    splice.call(data, index, 1);\\n  }\\n  return true;\\n}\\n\\nexport default listCacheDelete;\\n\",\"import assocIndexOf from './_assocIndexOf';\\n\\n/**\\n * Gets the list cache value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf ListCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction listCacheGet(key) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  return index < 0 ? undefined : data[index][1];\\n}\\n\\nexport default listCacheGet;\\n\",\"import assocIndexOf from './_assocIndexOf';\\n\\n/**\\n * Checks if a list cache value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf ListCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction listCacheHas(key) {\\n  return assocIndexOf(this.__data__, key) > -1;\\n}\\n\\nexport default listCacheHas;\\n\",\"import assocIndexOf from './_assocIndexOf';\\n\\n/**\\n * Sets the list cache `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf ListCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the list cache instance.\\n */\\nfunction listCacheSet(key, value) {\\n  var data = this.__data__,\\n      index = assocIndexOf(data, key);\\n\\n  if (index < 0) {\\n    data.push([key, value]);\\n  } else {\\n    data[index][1] = value;\\n  }\\n  return this;\\n}\\n\\nexport default listCacheSet;\\n\",\"import listCacheClear from './_listCacheClear';\\nimport listCacheDelete from './_listCacheDelete';\\nimport listCacheGet from './_listCacheGet';\\nimport listCacheHas from './_listCacheHas';\\nimport listCacheSet from './_listCacheSet';\\n\\n/**\\n * Creates an list cache object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction ListCache(entries) {\\n  var index = -1,\\n      length = entries ? entries.length : 0;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `ListCache`.\\nListCache.prototype.clear = listCacheClear;\\nListCache.prototype['delete'] = listCacheDelete;\\nListCache.prototype.get = listCacheGet;\\nListCache.prototype.has = listCacheHas;\\nListCache.prototype.set = listCacheSet;\\n\\nexport default ListCache;\\n\",\"import ListCache from './_ListCache';\\n\\n/**\\n * Removes all key-value entries from the stack.\\n *\\n * @private\\n * @name clear\\n * @memberOf Stack\\n */\\nfunction stackClear() {\\n  this.__data__ = new ListCache;\\n}\\n\\nexport default stackClear;\\n\",\"/**\\n * Removes `key` and its value from the stack.\\n *\\n * @private\\n * @name delete\\n * @memberOf Stack\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction stackDelete(key) {\\n  return this.__data__['delete'](key);\\n}\\n\\nexport default stackDelete;\\n\",\"/**\\n * Gets the stack value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Stack\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction stackGet(key) {\\n  return this.__data__.get(key);\\n}\\n\\nexport default stackGet;\\n\",\"/**\\n * Checks if a stack value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Stack\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction stackHas(key) {\\n  return this.__data__.has(key);\\n}\\n\\nexport default stackHas;\\n\",\"/**\\n * Checks if `value` is the\\n * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\\n * @example\\n *\\n * _.isObject({});\\n * // => true\\n *\\n * _.isObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isObject(_.noop);\\n * // => true\\n *\\n * _.isObject(null);\\n * // => false\\n */\\nfunction isObject(value) {\\n  var type = typeof value;\\n  return !!value && (type == 'object' || type == 'function');\\n}\\n\\nexport default isObject;\\n\",\"import isObject from './isObject';\\n\\n/** `Object#toString` result references. */\\nvar funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/**\\n * Checks if `value` is classified as a `Function` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isFunction(_);\\n * // => true\\n *\\n * _.isFunction(/abc/);\\n * // => false\\n */\\nfunction isFunction(value) {\\n  // The use of `Object#toString` avoids issues with the `typeof` operator\\n  // in Safari 8 which returns 'object' for typed array and weak map constructors,\\n  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\\n  var tag = isObject(value) ? objectToString.call(value) : '';\\n  return tag == funcTag || tag == genTag;\\n}\\n\\nexport default isFunction;\\n\",\"/** Used to resolve the decompiled source of functions. */\\nvar funcToString = Function.prototype.toString;\\n\\n/**\\n * Converts `func` to its source code.\\n *\\n * @private\\n * @param {Function} func The function to process.\\n * @returns {string} Returns the source code.\\n */\\nfunction toSource(func) {\\n  if (func != null) {\\n    try {\\n      return funcToString.call(func);\\n    } catch (e) {}\\n    try {\\n      return (func + '');\\n    } catch (e) {}\\n  }\\n  return '';\\n}\\n\\nexport default toSource;\\n\",\"import isFunction from './isFunction';\\nimport isHostObject from './_isHostObject';\\nimport isObject from './isObject';\\nimport toSource from './_toSource';\\n\\n/**\\n * Used to match `RegExp`\\n * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\\n */\\nvar reRegExpChar = /[\\\\\\\\^$.*+?()[\\\\]{}|]/g;\\n\\n/** Used to detect host constructors (Safari). */\\nvar reIsHostCtor = /^\\\\[object .+?Constructor\\\\]$/;\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to resolve the decompiled source of functions. */\\nvar funcToString = Function.prototype.toString;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/** Used to detect if a method is native. */\\nvar reIsNative = RegExp('^' +\\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\\\\\$&')\\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\\\\\\\()| for .+?(?=\\\\\\\\\\\\])/g, '$1.*?') + '$'\\n);\\n\\n/**\\n * Checks if `value` is a native function.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a native function,\\n *  else `false`.\\n * @example\\n *\\n * _.isNative(Array.prototype.push);\\n * // => true\\n *\\n * _.isNative(_);\\n * // => false\\n */\\nfunction isNative(value) {\\n  if (!isObject(value)) {\\n    return false;\\n  }\\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\\n  return pattern.test(toSource(value));\\n}\\n\\nexport default isNative;\\n\",\"import isNative from './isNative';\\n\\n/**\\n * Gets the native function at `key` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {string} key The key of the method to get.\\n * @returns {*} Returns the function if it's native, else `undefined`.\\n */\\nfunction getNative(object, key) {\\n  var value = object[key];\\n  return isNative(value) ? value : undefined;\\n}\\n\\nexport default getNative;\\n\",\"import getNative from './_getNative';\\n\\n/* Built-in method references that are verified to be native. */\\nvar nativeCreate = getNative(Object, 'create');\\n\\nexport default nativeCreate;\\n\",\"import nativeCreate from './_nativeCreate';\\n\\n/**\\n * Removes all key-value entries from the hash.\\n *\\n * @private\\n * @name clear\\n * @memberOf Hash\\n */\\nfunction hashClear() {\\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\\n}\\n\\nexport default hashClear;\\n\",\"/**\\n * Removes `key` and its value from the hash.\\n *\\n * @private\\n * @name delete\\n * @memberOf Hash\\n * @param {Object} hash The hash to modify.\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction hashDelete(key) {\\n  return this.has(key) && delete this.__data__[key];\\n}\\n\\nexport default hashDelete;\\n\",\"import nativeCreate from './_nativeCreate';\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Gets the hash value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf Hash\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction hashGet(key) {\\n  var data = this.__data__;\\n  if (nativeCreate) {\\n    var result = data[key];\\n    return result === HASH_UNDEFINED ? undefined : result;\\n  }\\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\\n}\\n\\nexport default hashGet;\\n\",\"import nativeCreate from './_nativeCreate';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Checks if a hash value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf Hash\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction hashHas(key) {\\n  var data = this.__data__;\\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\\n}\\n\\nexport default hashHas;\\n\",\"import nativeCreate from './_nativeCreate';\\n\\n/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Sets the hash `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Hash\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the hash instance.\\n */\\nfunction hashSet(key, value) {\\n  var data = this.__data__;\\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\\n  return this;\\n}\\n\\nexport default hashSet;\\n\",\"import hashClear from './_hashClear';\\nimport hashDelete from './_hashDelete';\\nimport hashGet from './_hashGet';\\nimport hashHas from './_hashHas';\\nimport hashSet from './_hashSet';\\n\\n/**\\n * Creates a hash object.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Hash(entries) {\\n  var index = -1,\\n      length = entries ? entries.length : 0;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `Hash`.\\nHash.prototype.clear = hashClear;\\nHash.prototype['delete'] = hashDelete;\\nHash.prototype.get = hashGet;\\nHash.prototype.has = hashHas;\\nHash.prototype.set = hashSet;\\n\\nexport default Hash;\\n\",\"import getNative from './_getNative';\\nimport root from './_root';\\n\\n/* Built-in method references that are verified to be native. */\\nvar Map = getNative(root, 'Map');\\n\\nexport default Map;\\n\",\"import Hash from './_Hash';\\nimport ListCache from './_ListCache';\\nimport Map from './_Map';\\n\\n/**\\n * Removes all key-value entries from the map.\\n *\\n * @private\\n * @name clear\\n * @memberOf MapCache\\n */\\nfunction mapCacheClear() {\\n  this.__data__ = {\\n    'hash': new Hash,\\n    'map': new (Map || ListCache),\\n    'string': new Hash\\n  };\\n}\\n\\nexport default mapCacheClear;\\n\",\"/**\\n * Checks if `value` is suitable for use as unique object key.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\\n */\\nfunction isKeyable(value) {\\n  var type = typeof value;\\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\\n    ? (value !== '__proto__')\\n    : (value === null);\\n}\\n\\nexport default isKeyable;\\n\",\"import isKeyable from './_isKeyable';\\n\\n/**\\n * Gets the data for `map`.\\n *\\n * @private\\n * @param {Object} map The map to query.\\n * @param {string} key The reference key.\\n * @returns {*} Returns the map data.\\n */\\nfunction getMapData(map, key) {\\n  var data = map.__data__;\\n  return isKeyable(key)\\n    ? data[typeof key == 'string' ? 'string' : 'hash']\\n    : data.map;\\n}\\n\\nexport default getMapData;\\n\",\"import getMapData from './_getMapData';\\n\\n/**\\n * Removes `key` and its value from the map.\\n *\\n * @private\\n * @name delete\\n * @memberOf MapCache\\n * @param {string} key The key of the value to remove.\\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\\n */\\nfunction mapCacheDelete(key) {\\n  return getMapData(this, key)['delete'](key);\\n}\\n\\nexport default mapCacheDelete;\\n\",\"import getMapData from './_getMapData';\\n\\n/**\\n * Gets the map value for `key`.\\n *\\n * @private\\n * @name get\\n * @memberOf MapCache\\n * @param {string} key The key of the value to get.\\n * @returns {*} Returns the entry value.\\n */\\nfunction mapCacheGet(key) {\\n  return getMapData(this, key).get(key);\\n}\\n\\nexport default mapCacheGet;\\n\",\"import getMapData from './_getMapData';\\n\\n/**\\n * Checks if a map value for `key` exists.\\n *\\n * @private\\n * @name has\\n * @memberOf MapCache\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction mapCacheHas(key) {\\n  return getMapData(this, key).has(key);\\n}\\n\\nexport default mapCacheHas;\\n\",\"import getMapData from './_getMapData';\\n\\n/**\\n * Sets the map `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf MapCache\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the map cache instance.\\n */\\nfunction mapCacheSet(key, value) {\\n  getMapData(this, key).set(key, value);\\n  return this;\\n}\\n\\nexport default mapCacheSet;\\n\",\"import mapCacheClear from './_mapCacheClear';\\nimport mapCacheDelete from './_mapCacheDelete';\\nimport mapCacheGet from './_mapCacheGet';\\nimport mapCacheHas from './_mapCacheHas';\\nimport mapCacheSet from './_mapCacheSet';\\n\\n/**\\n * Creates a map cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction MapCache(entries) {\\n  var index = -1,\\n      length = entries ? entries.length : 0;\\n\\n  this.clear();\\n  while (++index < length) {\\n    var entry = entries[index];\\n    this.set(entry[0], entry[1]);\\n  }\\n}\\n\\n// Add methods to `MapCache`.\\nMapCache.prototype.clear = mapCacheClear;\\nMapCache.prototype['delete'] = mapCacheDelete;\\nMapCache.prototype.get = mapCacheGet;\\nMapCache.prototype.has = mapCacheHas;\\nMapCache.prototype.set = mapCacheSet;\\n\\nexport default MapCache;\\n\",\"import ListCache from './_ListCache';\\nimport MapCache from './_MapCache';\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * Sets the stack `key` to `value`.\\n *\\n * @private\\n * @name set\\n * @memberOf Stack\\n * @param {string} key The key of the value to set.\\n * @param {*} value The value to set.\\n * @returns {Object} Returns the stack cache instance.\\n */\\nfunction stackSet(key, value) {\\n  var cache = this.__data__;\\n  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {\\n    cache = this.__data__ = new MapCache(cache.__data__);\\n  }\\n  cache.set(key, value);\\n  return this;\\n}\\n\\nexport default stackSet;\\n\",\"import ListCache from './_ListCache';\\nimport stackClear from './_stackClear';\\nimport stackDelete from './_stackDelete';\\nimport stackGet from './_stackGet';\\nimport stackHas from './_stackHas';\\nimport stackSet from './_stackSet';\\n\\n/**\\n * Creates a stack cache object to store key-value pairs.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [entries] The key-value pairs to cache.\\n */\\nfunction Stack(entries) {\\n  this.__data__ = new ListCache(entries);\\n}\\n\\n// Add methods to `Stack`.\\nStack.prototype.clear = stackClear;\\nStack.prototype['delete'] = stackDelete;\\nStack.prototype.get = stackGet;\\nStack.prototype.has = stackHas;\\nStack.prototype.set = stackSet;\\n\\nexport default Stack;\\n\",\"/**\\n * A specialized version of `_.forEach` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayEach(array, iteratee) {\\n  var index = -1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (iteratee(array[index], index, array) === false) {\\n      break;\\n    }\\n  }\\n  return array;\\n}\\n\\nexport default arrayEach;\\n\",\"import eq from './eq';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @private\\n * @param {Object} object The object to modify.\\n * @param {string} key The key of the property to assign.\\n * @param {*} value The value to assign.\\n */\\nfunction assignValue(object, key, value) {\\n  var objValue = object[key];\\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n      (value === undefined && !(key in object))) {\\n    object[key] = value;\\n  }\\n}\\n\\nexport default assignValue;\\n\",\"import assignValue from './_assignValue';\\n\\n/**\\n * Copies properties of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy properties from.\\n * @param {Array} props The property identifiers to copy.\\n * @param {Object} [object={}] The object to copy properties to.\\n * @param {Function} [customizer] The function to customize copied values.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copyObject(source, props, object, customizer) {\\n  object || (object = {});\\n\\n  var index = -1,\\n      length = props.length;\\n\\n  while (++index < length) {\\n    var key = props[index];\\n\\n    var newValue = customizer\\n      ? customizer(object[key], source[key], key, object, source)\\n      : source[key];\\n\\n    assignValue(object, key, newValue);\\n  }\\n  return object;\\n}\\n\\nexport default copyObject;\\n\",\"import getPrototype from './_getPrototype';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * The base implementation of `_.has` without support for deep paths.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} key The key to check.\\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\\n */\\nfunction baseHas(object, key) {\\n  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\\n  // that are composed entirely of index properties, return `false` for\\n  // `hasOwnProperty` checks of them.\\n  return hasOwnProperty.call(object, key) ||\\n    (typeof object == 'object' && key in object && getPrototype(object) === null);\\n}\\n\\nexport default baseHas;\\n\",\"/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeKeys = Object.keys;\\n\\n/**\\n * The base implementation of `_.keys` which doesn't skip the constructor\\n * property of prototypes or treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeys(object) {\\n  return nativeKeys(Object(object));\\n}\\n\\nexport default baseKeys;\\n\",\"/**\\n * The base implementation of `_.times` without support for iteratee shorthands\\n * or max array length checks.\\n *\\n * @private\\n * @param {number} n The number of times to invoke `iteratee`.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the array of results.\\n */\\nfunction baseTimes(n, iteratee) {\\n  var index = -1,\\n      result = Array(n);\\n\\n  while (++index < n) {\\n    result[index] = iteratee(index);\\n  }\\n  return result;\\n}\\n\\nexport default baseTimes;\\n\",\"/**\\n * The base implementation of `_.property` without support for deep paths.\\n *\\n * @private\\n * @param {string} key The key of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n */\\nfunction baseProperty(key) {\\n  return function(object) {\\n    return object == null ? undefined : object[key];\\n  };\\n}\\n\\nexport default baseProperty;\\n\",\"import baseProperty from './_baseProperty';\\n\\n/**\\n * Gets the \\\"length\\\" property value of `object`.\\n *\\n * **Note:** This function is used to avoid a\\n * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\\n * Safari on at least iOS 8.1-8.3 ARM64.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {*} Returns the \\\"length\\\" value.\\n */\\nvar getLength = baseProperty('length');\\n\\nexport default getLength;\\n\",\"/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/**\\n * Checks if `value` is a valid array-like length.\\n *\\n * **Note:** This function is loosely based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a valid length,\\n *  else `false`.\\n * @example\\n *\\n * _.isLength(3);\\n * // => true\\n *\\n * _.isLength(Number.MIN_VALUE);\\n * // => false\\n *\\n * _.isLength(Infinity);\\n * // => false\\n *\\n * _.isLength('3');\\n * // => false\\n */\\nfunction isLength(value) {\\n  return typeof value == 'number' &&\\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\\n}\\n\\nexport default isLength;\\n\",\"import getLength from './_getLength';\\nimport isFunction from './isFunction';\\nimport isLength from './isLength';\\n\\n/**\\n * Checks if `value` is array-like. A value is considered array-like if it's\\n * not a function and has a `value.length` that's an integer greater than or\\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\\n * @example\\n *\\n * _.isArrayLike([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLike(document.body.children);\\n * // => true\\n *\\n * _.isArrayLike('abc');\\n * // => true\\n *\\n * _.isArrayLike(_.noop);\\n * // => false\\n */\\nfunction isArrayLike(value) {\\n  return value != null && isLength(getLength(value)) && !isFunction(value);\\n}\\n\\nexport default isArrayLike;\\n\",\"import isArrayLike from './isArrayLike';\\nimport isObjectLike from './isObjectLike';\\n\\n/**\\n * This method is like `_.isArrayLike` except that it also checks if `value`\\n * is an object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is an array-like object,\\n *  else `false`.\\n * @example\\n *\\n * _.isArrayLikeObject([1, 2, 3]);\\n * // => true\\n *\\n * _.isArrayLikeObject(document.body.children);\\n * // => true\\n *\\n * _.isArrayLikeObject('abc');\\n * // => false\\n *\\n * _.isArrayLikeObject(_.noop);\\n * // => false\\n */\\nfunction isArrayLikeObject(value) {\\n  return isObjectLike(value) && isArrayLike(value);\\n}\\n\\nexport default isArrayLikeObject;\\n\",\"import isArrayLikeObject from './isArrayLikeObject';\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n\\n/**\\n * Checks if `value` is likely an `arguments` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isArguments(function() { return arguments; }());\\n * // => true\\n *\\n * _.isArguments([1, 2, 3]);\\n * // => false\\n */\\nfunction isArguments(value) {\\n  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\\n}\\n\\nexport default isArguments;\\n\",\"/**\\n * Checks if `value` is classified as an `Array` object.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @type {Function}\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isArray([1, 2, 3]);\\n * // => true\\n *\\n * _.isArray(document.body.children);\\n * // => false\\n *\\n * _.isArray('abc');\\n * // => false\\n *\\n * _.isArray(_.noop);\\n * // => false\\n */\\nvar isArray = Array.isArray;\\n\\nexport default isArray;\\n\",\"import isArray from './isArray';\\nimport isObjectLike from './isObjectLike';\\n\\n/** `Object#toString` result references. */\\nvar stringTag = '[object String]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/**\\n * Checks if `value` is classified as a `String` primitive or object.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isString('abc');\\n * // => true\\n *\\n * _.isString(1);\\n * // => false\\n */\\nfunction isString(value) {\\n  return typeof value == 'string' ||\\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\\n}\\n\\nexport default isString;\\n\",\"import baseTimes from './_baseTimes';\\nimport isArguments from './isArguments';\\nimport isArray from './isArray';\\nimport isLength from './isLength';\\nimport isString from './isString';\\n\\n/**\\n * Creates an array of index keys for `object` values of arrays,\\n * `arguments` objects, and strings, otherwise `null` is returned.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array|null} Returns index keys, else `null`.\\n */\\nfunction indexKeys(object) {\\n  var length = object ? object.length : undefined;\\n  if (isLength(length) &&\\n      (isArray(object) || isString(object) || isArguments(object))) {\\n    return baseTimes(length, String);\\n  }\\n  return null;\\n}\\n\\nexport default indexKeys;\\n\",\"/** Used as references for various `Number` constants. */\\nvar MAX_SAFE_INTEGER = 9007199254740991;\\n\\n/** Used to detect unsigned integer values. */\\nvar reIsUint = /^(?:0|[1-9]\\\\d*)$/;\\n\\n/**\\n * Checks if `value` is a valid array-like index.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\\n */\\nfunction isIndex(value, length) {\\n  length = length == null ? MAX_SAFE_INTEGER : length;\\n  return !!length &&\\n    (typeof value == 'number' || reIsUint.test(value)) &&\\n    (value > -1 && value % 1 == 0 && value < length);\\n}\\n\\nexport default isIndex;\\n\",\"/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Checks if `value` is likely a prototype object.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\\n */\\nfunction isPrototype(value) {\\n  var Ctor = value && value.constructor,\\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\\n\\n  return value === proto;\\n}\\n\\nexport default isPrototype;\\n\",\"import baseHas from './_baseHas';\\nimport baseKeys from './_baseKeys';\\nimport indexKeys from './_indexKeys';\\nimport isArrayLike from './isArrayLike';\\nimport isIndex from './_isIndex';\\nimport isPrototype from './_isPrototype';\\n\\n/**\\n * Creates an array of the own enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects. See the\\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\\n * for more details.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keys(new Foo);\\n * // => ['a', 'b'] (iteration order is not guaranteed)\\n *\\n * _.keys('hi');\\n * // => ['0', '1']\\n */\\nfunction keys(object) {\\n  var isProto = isPrototype(object);\\n  if (!(isProto || isArrayLike(object))) {\\n    return baseKeys(object);\\n  }\\n  var indexes = indexKeys(object),\\n      skipIndexes = !!indexes,\\n      result = indexes || [],\\n      length = result.length;\\n\\n  for (var key in object) {\\n    if (baseHas(object, key) &&\\n        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&\\n        !(isProto && key == 'constructor')) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default keys;\\n\",\"import copyObject from './_copyObject';\\nimport keys from './keys';\\n\\n/**\\n * The base implementation of `_.assign` without support for multiple sources\\n * or `customizer` functions.\\n *\\n * @private\\n * @param {Object} object The destination object.\\n * @param {Object} source The source object.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseAssign(object, source) {\\n  return object && copyObject(source, keys(source), object);\\n}\\n\\nexport default baseAssign;\\n\",\"/**\\n * Creates a clone of  `buffer`.\\n *\\n * @private\\n * @param {Buffer} buffer The buffer to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Buffer} Returns the cloned buffer.\\n */\\nfunction cloneBuffer(buffer, isDeep) {\\n  if (isDeep) {\\n    return buffer.slice();\\n  }\\n  var result = new buffer.constructor(buffer.length);\\n  buffer.copy(result);\\n  return result;\\n}\\n\\nexport default cloneBuffer;\\n\",\"/**\\n * Copies the values of `source` to `array`.\\n *\\n * @private\\n * @param {Array} source The array to copy values from.\\n * @param {Array} [array=[]] The array to copy values to.\\n * @returns {Array} Returns `array`.\\n */\\nfunction copyArray(source, array) {\\n  var index = -1,\\n      length = source.length;\\n\\n  array || (array = Array(length));\\n  while (++index < length) {\\n    array[index] = source[index];\\n  }\\n  return array;\\n}\\n\\nexport default copyArray;\\n\",\"/** Built-in value references. */\\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\\n\\n/**\\n * Creates an array of the own enumerable symbol properties of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of symbols.\\n */\\nfunction getSymbols(object) {\\n  // Coerce `object` to an object to avoid non-object errors in V8.\\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.\\n  return getOwnPropertySymbols(Object(object));\\n}\\n\\n// Fallback for IE < 11.\\nif (!getOwnPropertySymbols) {\\n  getSymbols = function() {\\n    return [];\\n  };\\n}\\n\\nexport default getSymbols;\\n\",\"import copyObject from './_copyObject';\\nimport getSymbols from './_getSymbols';\\n\\n/**\\n * Copies own symbol properties of `source` to `object`.\\n *\\n * @private\\n * @param {Object} source The object to copy symbols from.\\n * @param {Object} [object={}] The object to copy symbols to.\\n * @returns {Object} Returns `object`.\\n */\\nfunction copySymbols(source, object) {\\n  return copyObject(source, getSymbols(source), object);\\n}\\n\\nexport default copySymbols;\\n\",\"/**\\n * Appends the elements of `values` to `array`.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to append.\\n * @returns {Array} Returns `array`.\\n */\\nfunction arrayPush(array, values) {\\n  var index = -1,\\n      length = values.length,\\n      offset = array.length;\\n\\n  while (++index < length) {\\n    array[offset + index] = values[index];\\n  }\\n  return array;\\n}\\n\\nexport default arrayPush;\\n\",\"import arrayPush from './_arrayPush';\\nimport isArray from './isArray';\\n\\n/**\\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\\n * symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Function} keysFunc The function to get the keys of `object`.\\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\\n  var result = keysFunc(object);\\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\\n}\\n\\nexport default baseGetAllKeys;\\n\",\"import baseGetAllKeys from './_baseGetAllKeys';\\nimport getSymbols from './_getSymbols';\\nimport keys from './keys';\\n\\n/**\\n * Creates an array of own enumerable property names and symbols of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names and symbols.\\n */\\nfunction getAllKeys(object) {\\n  return baseGetAllKeys(object, keys, getSymbols);\\n}\\n\\nexport default getAllKeys;\\n\",\"import getNative from './_getNative';\\nimport root from './_root';\\n\\n/* Built-in method references that are verified to be native. */\\nvar DataView = getNative(root, 'DataView');\\n\\nexport default DataView;\\n\",\"import getNative from './_getNative';\\nimport root from './_root';\\n\\n/* Built-in method references that are verified to be native. */\\nvar Promise = getNative(root, 'Promise');\\n\\nexport default Promise;\\n\",\"import getNative from './_getNative';\\nimport root from './_root';\\n\\n/* Built-in method references that are verified to be native. */\\nvar Set = getNative(root, 'Set');\\n\\nexport default Set;\\n\",\"import getNative from './_getNative';\\nimport root from './_root';\\n\\n/* Built-in method references that are verified to be native. */\\nvar WeakMap = getNative(root, 'WeakMap');\\n\\nexport default WeakMap;\\n\",\"import DataView from './_DataView';\\nimport Map from './_Map';\\nimport Promise from './_Promise';\\nimport Set from './_Set';\\nimport WeakMap from './_WeakMap';\\nimport toSource from './_toSource';\\n\\n/** `Object#toString` result references. */\\nvar mapTag = '[object Map]',\\n    objectTag = '[object Object]',\\n    promiseTag = '[object Promise]',\\n    setTag = '[object Set]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar dataViewTag = '[object DataView]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/** Used to detect maps, sets, and weakmaps. */\\nvar dataViewCtorString = toSource(DataView),\\n    mapCtorString = toSource(Map),\\n    promiseCtorString = toSource(Promise),\\n    setCtorString = toSource(Set),\\n    weakMapCtorString = toSource(WeakMap);\\n\\n/**\\n * Gets the `toStringTag` of `value`.\\n *\\n * @private\\n * @param {*} value The value to query.\\n * @returns {string} Returns the `toStringTag`.\\n */\\nfunction getTag(value) {\\n  return objectToString.call(value);\\n}\\n\\n// Fallback for data views, maps, sets, and weak maps in IE 11,\\n// for data views in Edge, and promises in Node.js.\\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\\n    (Map && getTag(new Map) != mapTag) ||\\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\\n    (Set && getTag(new Set) != setTag) ||\\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\\n  getTag = function(value) {\\n    var result = objectToString.call(value),\\n        Ctor = result == objectTag ? value.constructor : undefined,\\n        ctorString = Ctor ? toSource(Ctor) : undefined;\\n\\n    if (ctorString) {\\n      switch (ctorString) {\\n        case dataViewCtorString: return dataViewTag;\\n        case mapCtorString: return mapTag;\\n        case promiseCtorString: return promiseTag;\\n        case setCtorString: return setTag;\\n        case weakMapCtorString: return weakMapTag;\\n      }\\n    }\\n    return result;\\n  };\\n}\\n\\nexport default getTag;\\n\",\"/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Initializes an array clone.\\n *\\n * @private\\n * @param {Array} array The array to clone.\\n * @returns {Array} Returns the initialized clone.\\n */\\nfunction initCloneArray(array) {\\n  var length = array.length,\\n      result = array.constructor(length);\\n\\n  // Add properties assigned by `RegExp#exec`.\\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\\n    result.index = array.index;\\n    result.input = array.input;\\n  }\\n  return result;\\n}\\n\\nexport default initCloneArray;\\n\",\"import root from './_root';\\n\\n/** Built-in value references. */\\nvar Uint8Array = root.Uint8Array;\\n\\nexport default Uint8Array;\\n\",\"import Uint8Array from './_Uint8Array';\\n\\n/**\\n * Creates a clone of `arrayBuffer`.\\n *\\n * @private\\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\\n * @returns {ArrayBuffer} Returns the cloned array buffer.\\n */\\nfunction cloneArrayBuffer(arrayBuffer) {\\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\\n  return result;\\n}\\n\\nexport default cloneArrayBuffer;\\n\",\"import cloneArrayBuffer from './_cloneArrayBuffer';\\n\\n/**\\n * Creates a clone of `dataView`.\\n *\\n * @private\\n * @param {Object} dataView The data view to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned data view.\\n */\\nfunction cloneDataView(dataView, isDeep) {\\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\\n}\\n\\nexport default cloneDataView;\\n\",\"/**\\n * Adds the key-value `pair` to `map`.\\n *\\n * @private\\n * @param {Object} map The map to modify.\\n * @param {Array} pair The key-value pair to add.\\n * @returns {Object} Returns `map`.\\n */\\nfunction addMapEntry(map, pair) {\\n  // Don't return `Map#set` because it doesn't return the map instance in IE 11.\\n  map.set(pair[0], pair[1]);\\n  return map;\\n}\\n\\nexport default addMapEntry;\\n\",\"/**\\n * A specialized version of `_.reduce` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @param {*} [accumulator] The initial value.\\n * @param {boolean} [initAccum] Specify using the first element of `array` as\\n *  the initial value.\\n * @returns {*} Returns the accumulated value.\\n */\\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\\n  var index = -1,\\n      length = array.length;\\n\\n  if (initAccum && length) {\\n    accumulator = array[++index];\\n  }\\n  while (++index < length) {\\n    accumulator = iteratee(accumulator, array[index], index, array);\\n  }\\n  return accumulator;\\n}\\n\\nexport default arrayReduce;\\n\",\"/**\\n * Converts `map` to its key-value pairs.\\n *\\n * @private\\n * @param {Object} map The map to convert.\\n * @returns {Array} Returns the key-value pairs.\\n */\\nfunction mapToArray(map) {\\n  var index = -1,\\n      result = Array(map.size);\\n\\n  map.forEach(function(value, key) {\\n    result[++index] = [key, value];\\n  });\\n  return result;\\n}\\n\\nexport default mapToArray;\\n\",\"import addMapEntry from './_addMapEntry';\\nimport arrayReduce from './_arrayReduce';\\nimport mapToArray from './_mapToArray';\\n\\n/**\\n * Creates a clone of `map`.\\n *\\n * @private\\n * @param {Object} map The map to clone.\\n * @param {Function} cloneFunc The function to clone values.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned map.\\n */\\nfunction cloneMap(map, isDeep, cloneFunc) {\\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\\n  return arrayReduce(array, addMapEntry, new map.constructor);\\n}\\n\\nexport default cloneMap;\\n\",\"/** Used to match `RegExp` flags from their coerced string values. */\\nvar reFlags = /\\\\w*$/;\\n\\n/**\\n * Creates a clone of `regexp`.\\n *\\n * @private\\n * @param {Object} regexp The regexp to clone.\\n * @returns {Object} Returns the cloned regexp.\\n */\\nfunction cloneRegExp(regexp) {\\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\\n  result.lastIndex = regexp.lastIndex;\\n  return result;\\n}\\n\\nexport default cloneRegExp;\\n\",\"/**\\n * Adds `value` to `set`.\\n *\\n * @private\\n * @param {Object} set The set to modify.\\n * @param {*} value The value to add.\\n * @returns {Object} Returns `set`.\\n */\\nfunction addSetEntry(set, value) {\\n  set.add(value);\\n  return set;\\n}\\n\\nexport default addSetEntry;\\n\",\"/**\\n * Converts `set` to an array of its values.\\n *\\n * @private\\n * @param {Object} set The set to convert.\\n * @returns {Array} Returns the values.\\n */\\nfunction setToArray(set) {\\n  var index = -1,\\n      result = Array(set.size);\\n\\n  set.forEach(function(value) {\\n    result[++index] = value;\\n  });\\n  return result;\\n}\\n\\nexport default setToArray;\\n\",\"import addSetEntry from './_addSetEntry';\\nimport arrayReduce from './_arrayReduce';\\nimport setToArray from './_setToArray';\\n\\n/**\\n * Creates a clone of `set`.\\n *\\n * @private\\n * @param {Object} set The set to clone.\\n * @param {Function} cloneFunc The function to clone values.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned set.\\n */\\nfunction cloneSet(set, isDeep, cloneFunc) {\\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\\n  return arrayReduce(array, addSetEntry, new set.constructor);\\n}\\n\\nexport default cloneSet;\\n\",\"import root from './_root';\\n\\n/** Built-in value references. */\\nvar Symbol = root.Symbol;\\n\\nexport default Symbol;\\n\",\"import Symbol from './_Symbol';\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * Creates a clone of the `symbol` object.\\n *\\n * @private\\n * @param {Object} symbol The symbol object to clone.\\n * @returns {Object} Returns the cloned symbol object.\\n */\\nfunction cloneSymbol(symbol) {\\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\\n}\\n\\nexport default cloneSymbol;\\n\",\"import cloneArrayBuffer from './_cloneArrayBuffer';\\n\\n/**\\n * Creates a clone of `typedArray`.\\n *\\n * @private\\n * @param {Object} typedArray The typed array to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the cloned typed array.\\n */\\nfunction cloneTypedArray(typedArray, isDeep) {\\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n}\\n\\nexport default cloneTypedArray;\\n\",\"import cloneArrayBuffer from './_cloneArrayBuffer';\\nimport cloneDataView from './_cloneDataView';\\nimport cloneMap from './_cloneMap';\\nimport cloneRegExp from './_cloneRegExp';\\nimport cloneSet from './_cloneSet';\\nimport cloneSymbol from './_cloneSymbol';\\nimport cloneTypedArray from './_cloneTypedArray';\\n\\n/** `Object#toString` result references. */\\nvar boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/**\\n * Initializes an object clone based on its `toStringTag`.\\n *\\n * **Note:** This function only supports cloning values with tags of\\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @param {string} tag The `toStringTag` of the object to clone.\\n * @param {Function} cloneFunc The function to clone values.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\\n  var Ctor = object.constructor;\\n  switch (tag) {\\n    case arrayBufferTag:\\n      return cloneArrayBuffer(object);\\n\\n    case boolTag:\\n    case dateTag:\\n      return new Ctor(+object);\\n\\n    case dataViewTag:\\n      return cloneDataView(object, isDeep);\\n\\n    case float32Tag: case float64Tag:\\n    case int8Tag: case int16Tag: case int32Tag:\\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\\n      return cloneTypedArray(object, isDeep);\\n\\n    case mapTag:\\n      return cloneMap(object, isDeep, cloneFunc);\\n\\n    case numberTag:\\n    case stringTag:\\n      return new Ctor(object);\\n\\n    case regexpTag:\\n      return cloneRegExp(object);\\n\\n    case setTag:\\n      return cloneSet(object, isDeep, cloneFunc);\\n\\n    case symbolTag:\\n      return cloneSymbol(object);\\n  }\\n}\\n\\nexport default initCloneByTag;\\n\",\"import isObject from './isObject';\\n\\n/** Built-in value references. */\\nvar objectCreate = Object.create;\\n\\n/**\\n * The base implementation of `_.create` without support for assigning\\n * properties to the created object.\\n *\\n * @private\\n * @param {Object} prototype The object to inherit from.\\n * @returns {Object} Returns the new object.\\n */\\nfunction baseCreate(proto) {\\n  return isObject(proto) ? objectCreate(proto) : {};\\n}\\n\\nexport default baseCreate;\\n\",\"import baseCreate from './_baseCreate';\\nimport getPrototype from './_getPrototype';\\nimport isPrototype from './_isPrototype';\\n\\n/**\\n * Initializes an object clone.\\n *\\n * @private\\n * @param {Object} object The object to clone.\\n * @returns {Object} Returns the initialized clone.\\n */\\nfunction initCloneObject(object) {\\n  return (typeof object.constructor == 'function' && !isPrototype(object))\\n    ? baseCreate(getPrototype(object))\\n    : {};\\n}\\n\\nexport default initCloneObject;\\n\",\"import Stack from './_Stack';\\nimport arrayEach from './_arrayEach';\\nimport assignValue from './_assignValue';\\nimport baseAssign from './_baseAssign';\\nimport cloneBuffer from './_cloneBuffer';\\nimport copyArray from './_copyArray';\\nimport copySymbols from './_copySymbols';\\nimport getAllKeys from './_getAllKeys';\\nimport getTag from './_getTag';\\nimport initCloneArray from './_initCloneArray';\\nimport initCloneByTag from './_initCloneByTag';\\nimport initCloneObject from './_initCloneObject';\\nimport isArray from './isArray';\\nimport isBuffer from './isBuffer';\\nimport isHostObject from './_isHostObject';\\nimport isObject from './isObject';\\nimport keys from './keys';\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    funcTag = '[object Function]',\\n    genTag = '[object GeneratorFunction]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    symbolTag = '[object Symbol]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values supported by `_.clone`. */\\nvar cloneableTags = {};\\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\\ncloneableTags[boolTag] = cloneableTags[dateTag] =\\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\\ncloneableTags[numberTag] = cloneableTags[objectTag] =\\ncloneableTags[regexpTag] = cloneableTags[setTag] =\\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\\ncloneableTags[errorTag] = cloneableTags[funcTag] =\\ncloneableTags[weakMapTag] = false;\\n\\n/**\\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\\n * traversed objects.\\n *\\n * @private\\n * @param {*} value The value to clone.\\n * @param {boolean} [isDeep] Specify a deep clone.\\n * @param {boolean} [isFull] Specify a clone including symbols.\\n * @param {Function} [customizer] The function to customize cloning.\\n * @param {string} [key] The key of `value`.\\n * @param {Object} [object] The parent object of `value`.\\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\\n * @returns {*} Returns the cloned value.\\n */\\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\\n  var result;\\n  if (customizer) {\\n    result = object ? customizer(value, key, object, stack) : customizer(value);\\n  }\\n  if (result !== undefined) {\\n    return result;\\n  }\\n  if (!isObject(value)) {\\n    return value;\\n  }\\n  var isArr = isArray(value);\\n  if (isArr) {\\n    result = initCloneArray(value);\\n    if (!isDeep) {\\n      return copyArray(value, result);\\n    }\\n  } else {\\n    var tag = getTag(value),\\n        isFunc = tag == funcTag || tag == genTag;\\n\\n    if (isBuffer(value)) {\\n      return cloneBuffer(value, isDeep);\\n    }\\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\\n      if (isHostObject(value)) {\\n        return object ? value : {};\\n      }\\n      result = initCloneObject(isFunc ? {} : value);\\n      if (!isDeep) {\\n        return copySymbols(value, baseAssign(result, value));\\n      }\\n    } else {\\n      if (!cloneableTags[tag]) {\\n        return object ? value : {};\\n      }\\n      result = initCloneByTag(value, tag, baseClone, isDeep);\\n    }\\n  }\\n  // Check for circular references and return its corresponding clone.\\n  stack || (stack = new Stack);\\n  var stacked = stack.get(value);\\n  if (stacked) {\\n    return stacked;\\n  }\\n  stack.set(value, result);\\n\\n  if (!isArr) {\\n    var props = isFull ? getAllKeys(value) : keys(value);\\n  }\\n  // Recursively populate clone (susceptible to call stack limits).\\n  arrayEach(props || value, function(subValue, key) {\\n    if (props) {\\n      key = subValue;\\n      subValue = value[key];\\n    }\\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\\n  });\\n  return result;\\n}\\n\\nexport default baseClone;\\n\",\"import baseClone from './_baseClone';\\n\\n/**\\n * Creates a shallow clone of `value`.\\n *\\n * **Note:** This method is loosely based on the\\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\\n * arrays. The own enumerable properties of `arguments` objects are cloned\\n * as plain objects. An empty object is returned for uncloneable values such\\n * as error objects, functions, DOM nodes, and WeakMaps.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to clone.\\n * @returns {*} Returns the cloned value.\\n * @see _.cloneDeep\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var shallow = _.clone(objects);\\n * console.log(shallow[0] === objects[0]);\\n * // => true\\n */\\nfunction clone(value) {\\n  return baseClone(value, false, true);\\n}\\n\\nexport default clone;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/node\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\\n\\n/**\\n * Abstract tree view node class.\\n *\\n * @abstract\\n */\\nexport default class Node {\\n\\t/**\\n\\t * Creates a tree view node.\\n\\t *\\n\\t * This is an abstract class, so this constructor should not be used directly.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChildren}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\\n\\t\\t */\\n\\t\\tthis.parent = null;\\n\\t}\\n\\n\\t/**\\n\\t * Index of the node in the parent element or null if the node has no parent.\\n\\t *\\n\\t * Accessing this property throws an error if this node's parent element does not contain it.\\n\\t * This means that view tree got broken.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number|null}\\n\\t */\\n\\tget index() {\\n\\t\\tlet pos;\\n\\n\\t\\tif ( !this.parent ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// No parent or child doesn't exist in parent's children.\\n\\t\\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The node's parent does not contain this node. It means that the document tree is corrupted.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-node-not-found-in-parent\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\\\'s parent does not contain this node.' );\\n\\t\\t}\\n\\n\\t\\treturn pos;\\n\\t}\\n\\n\\t/**\\n\\t * Node's next sibling, or `null` if it is the last child.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|null}\\n\\t */\\n\\tget nextSibling() {\\n\\t\\tconst index = this.index;\\n\\n\\t\\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Node's previous sibling, or `null` if it is the first child.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|null}\\n\\t */\\n\\tget previousSibling() {\\n\\t\\tconst index = this.index;\\n\\n\\t\\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\tlet root = this; // eslint-disable-line consistent-this\\n\\n\\t\\twhile ( root.parent ) {\\n\\t\\t\\troot = root.parent;\\n\\t\\t}\\n\\n\\t\\treturn root;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/document~Document|null}\\n\\t */\\n\\tget document() {\\n\\t\\t// Parent might be Node, null or DocumentFragment.\\n\\t\\tif ( this.parent instanceof Node ) {\\n\\t\\t\\treturn this.parent.document;\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this node.\\n\\t *\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\\n\\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\\n\\t * otherwise root element will be the first item in the array.\\n\\t * @returns {Array} Array with ancestors.\\n\\t */\\n\\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\\n\\t\\tconst ancestors = [];\\n\\t\\tlet parent = options.includeSelf ? this : this.parent;\\n\\n\\t\\twhile ( parent ) {\\n\\t\\t\\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn ancestors;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of both nodes.\\n\\t *\\n\\t * @param {module:engine/view/node~Node} node The second node.\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \\\"ancestors\\\" too.\\n\\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\\n\\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor( node, options = {} ) {\\n\\t\\tconst ancestorsA = this.getAncestors( options );\\n\\t\\tconst ancestorsB = node.getAncestors( options );\\n\\n\\t\\tlet i = 0;\\n\\n\\t\\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\treturn i === 0 ? null : ancestorsA[ i - 1 ];\\n\\t}\\n\\n\\t/**\\n\\t * Removes node from parent.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_remove() {\\n\\t\\tthis.parent._removeChildren( this.index );\\n\\t}\\n\\n\\t/**\\n\\t * @param {module:engine/view/document~ChangeType} type Type of the change.\\n\\t * @param {module:engine/view/node~Node} node Changed node.\\n\\t * @fires change\\n\\t */\\n\\t_fireChange( type, node ) {\\n\\t\\tthis.fire( 'change:' + type, node );\\n\\n\\t\\tif ( this.parent ) {\\n\\t\\t\\tthis.parent._fireChange( type, node );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Custom toJSON method to solve child-parent circular dependencies.\\n\\t *\\n\\t * @returns {Object} Clone of this object with the parent property removed.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = clone( this );\\n\\n\\t\\t// Due to circular references we need to remove parent reference.\\n\\t\\tdelete json.parent;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Clones this node.\\n\\t *\\n\\t * @method #clone\\n\\t * @returns {module:engine/view/node~Node} Clone of this node.\\n\\t */\\n\\n\\t/**\\n\\t * Checks if provided node is similar to this node.\\n\\t *\\n\\t * @method #isSimilar\\n\\t * @returns {Boolean} True if nodes are similar.\\n\\t */\\n\\n\\t/**\\n\\t * Checks whether given view tree object is of given type.\\n\\t *\\n\\t * This method is useful when processing view tree objects that are of unknown type. For example, a function\\n\\t * may return {@link module:engine/view/documentfragment~DocumentFragment} or {@link module:engine/view/node~Node}\\n\\t * that can be either text node or element. This method can be used to check what kind of object is returned.\\n\\t *\\n\\t *\\t\\tobj.is( 'node' ); // true for any node, false for document fragment\\n\\t *\\t\\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\\n\\t *\\t\\tobj.is( 'element' ); // true for any element, false for text node or document fragment\\n\\t *\\t\\tobj.is( 'element', 'p' ); // true only for element which name is 'p'\\n\\t *\\t\\tobj.is( 'p' ); // shortcut for obj.is( 'element', 'p' )\\n\\t *\\t\\tobj.is( 'text' ); // true for text node, false for element and document fragment\\n\\t *\\n\\t * @method #is\\n\\t * @param {'element'|'containerElement'|'attributeElement'|'emptyElement'|'uiElement'|\\n\\t * 'rootElement'|'documentFragment'|'text'|'textProxy'} type\\n\\t * @returns {Boolean}\\n\\t */\\n}\\n\\n/**\\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\\n *\\n * Change event is bubbled – it is fired on all ancestors.\\n *\\n * @event change:children\\n * @param {module:engine/view/node~Node} changedNode\\n */\\n\\n/**\\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\\n *\\n * Change event is bubbled – it is fired on all ancestors.\\n *\\n * @event change:attributes\\n * @param {module:engine/view/node~Node} changedNode\\n */\\n\\n/**\\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\\n *\\n * Change event is bubbled – it is fired on all ancestors.\\n *\\n * @event change:text\\n * @param {module:engine/view/node~Node} changedNode\\n */\\n\\n/**\\n * @event change\\n */\\n\\nmix( Node, EmitterMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/text\\n */\\n\\nimport Node from './node';\\n\\n/**\\n * Tree view text node.\\n *\\n * @extends module:engine/view/node~Node\\n */\\nexport default class Text extends Node {\\n\\t/**\\n\\t * Creates a tree view text node.\\n\\t *\\n\\t * **Note:** Constructor of this class shouldn't be used directly in the code.\\n\\t * Use the {@link module:engine/view/writer~Writer#createText} method instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} data Text.\\n\\t */\\n\\tconstructor( data ) {\\n\\t\\tsuper();\\n\\n\\t\\t/**\\n\\t\\t * The text content.\\n\\t\\t *\\n\\t\\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {String} module:engine/view/text~Text#_textData\\n\\t\\t */\\n\\t\\tthis._textData = data;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'text';\\n\\t}\\n\\n\\t/**\\n\\t * The text content.\\n\\t *\\n\\t * @returns {String}\\n\\t */\\n\\tget data() {\\n\\t\\treturn this._textData;\\n\\t}\\n\\n\\t/**\\n\\t * This getter is required when using the addition assignment operator on protected property:\\n\\t *\\n\\t *\\t\\tconst foo = new Text( 'foo' );\\n\\t *\\t\\tconst bar = new Text( 'bar' );\\n\\t *\\n\\t *\\t\\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\\n\\t *\\t\\tconsole.log( foo.data ); // prints: 'foobar'\\n\\t *\\n\\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\\n\\t *\\n\\t * @protected\\n\\t * @returns {String}\\n\\t */\\n\\tget _data() {\\n\\t\\treturn this.data;\\n\\t}\\n\\n\\t/**\\n\\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\\n\\t *\\n\\t * @protected\\n\\t * @fires change:text\\n\\t * @param {String} data New data for the text node.\\n\\t */\\n\\tset _data( data ) {\\n\\t\\tthis._fireChange( 'text', this );\\n\\n\\t\\tthis._textData = data;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if this text node is similar to other text node.\\n\\t * Both nodes should have the same data to be considered as similar.\\n\\t *\\n\\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisSimilar( otherNode ) {\\n\\t\\tif ( !( otherNode instanceof Text ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn this === otherNode || this.data === otherNode.data;\\n\\t}\\n\\n\\t/**\\n\\t * Clones this node.\\n\\t *\\n\\t * @protected\\n\\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\\n\\t */\\n\\t_clone() {\\n\\t\\treturn new Text( this.data );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/textproxy\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\\n *\\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\\n * on view nodes.\\n *\\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\\n *\\n * **Note:** `TextProxy` is a readonly interface.\\n *\\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\\n * inserted as a child of {@link module:engine/view/element~Element}.\\n *\\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\\n * an instance of this class by your own.\\n */\\nexport default class TextProxy {\\n\\t/**\\n\\t * Creates a text proxy.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\\n\\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\\n\\t * from which the text proxy starts.\\n\\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\\n\\t * @constructor\\n\\t */\\n\\tconstructor( textNode, offsetInText, length ) {\\n\\t\\t/**\\n\\t\\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\\n\\t\\t */\\n\\t\\tthis.textNode = textNode;\\n\\n\\t\\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given offsetInText value is incorrect.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-textproxy-wrong-offsetintext\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\\n\\t\\t}\\n\\n\\t\\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given length value is incorrect.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-textproxy-wrong-length\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Text data represented by this text proxy.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String} module:engine/view/textproxy~TextProxy#data\\n\\t\\t */\\n\\t\\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\\n\\n\\t\\t/**\\n\\t\\t * Offset in the `textNode` where this `TextProxy` instance starts.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\\n\\t\\t */\\n\\t\\tthis.offsetInText = offsetInText;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget offsetSize() {\\n\\t\\treturn this.data.length;\\n\\t}\\n\\n\\t/**\\n\\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\\n\\t * (`true`) or the whole text node (`false`).\\n\\t *\\n\\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\\n\\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\\n\\t * text node size.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isPartial() {\\n\\t\\treturn this.data.length !== this.textNode.data.length;\\n\\t}\\n\\n\\t/**\\n\\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tget parent() {\\n\\t\\treturn this.textNode.parent;\\n\\t}\\n\\n\\t/**\\n\\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this.textNode.root;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/document~Document|null}\\n\\t */\\n\\tget document() {\\n\\t\\treturn this.textNode.document;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given view tree object is of given type.\\n\\t *\\n\\t * Read more in {@link module:engine/view/node~Node#is}.\\n\\t *\\n\\t * @param {String} type\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'textProxy';\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this text proxy.\\n\\t *\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\\n\\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\\n\\t * root element, otherwise root element will be the first item in the array.\\n\\t * @returns {Array} Array with ancestors.\\n\\t */\\n\\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\\n\\t\\tconst ancestors = [];\\n\\t\\tlet parent = options.includeSelf ? this.textNode : this.parent;\\n\\n\\t\\twhile ( parent !== null ) {\\n\\t\\t\\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn ancestors;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/objecttomap\\n */\\n\\n/**\\n * Transforms object to map.\\n *\\n *\\t\\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\\n *\\t\\tmap.get( 'foo' ); // 1\\n *\\n * @param {Object} obj Object to transform.\\n * @returns {Map} Map created from object.\\n */\\nexport default function objectToMap( obj ) {\\n\\tconst map = new Map();\\n\\n\\tfor ( const key in obj ) {\\n\\t\\tmap.set( key, obj[ key ] );\\n\\t}\\n\\n\\treturn map;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/isiterable\\n */\\n\\n/**\\n * Checks if value implements iterator interface.\\n *\\n * @param {*} value The value to check.\\n * @returns {Boolean} True if value implements iterator interface.\\n */\\nexport default function isIterable( value ) {\\n\\treturn !!( value && value[ Symbol.iterator ] );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/matcher\\n */\\n\\n/**\\n * View matcher class.\\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\\n */\\nexport default class Matcher {\\n\\t/**\\n\\t * Creates new instance of Matcher.\\n\\t *\\n\\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\\n\\t * more information.\\n\\t */\\n\\tconstructor( ...pattern ) {\\n\\t\\t/**\\n\\t\\t * @private\\n\\t\\t * @type {Array<String|RegExp|Object>}\\n\\t\\t */\\n\\t\\tthis._patterns = [];\\n\\n\\t\\tthis.add( ...pattern );\\n\\t}\\n\\n\\t/**\\n\\t * Adds pattern or patterns to matcher instance.\\n\\t *\\n\\t *\\t\\t// String.\\n\\t *\\t\\tmatcher.add( 'div' );\\n\\t *\\n\\t *\\t\\t// Regular expression.\\n\\t *\\t\\tmatcher.add( /^\\\\w/ );\\n\\t *\\n\\t *\\t\\t// Single class.\\n\\t *\\t\\tmatcher.add( {\\n\\t *\\t\\t\\tclass: 'foobar'\\n\\t *\\t\\t} );\\n\\t *\\n\\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\\n\\t *\\n\\t * Multiple patterns can be added in one call:\\n\\t *\\n\\t * \\t\\tmatcher.add( 'div', { class: 'foobar' } );\\n\\t *\\n\\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\\n\\t * is provided it will be used to match element's name. Pattern can be also provided in a form\\n\\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\\n\\t * Function's return value will be stored under `match` key of the object returned from\\n\\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\\n\\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\\n\\t * @param {Object} [pattern.attribute] Object with key-value pairs representing attributes to match. Each object key\\n\\t * represents attribute name. Value under that key can be either:\\n\\t * * `true` - then attribute is just required (can be empty),\\n\\t * * a string - then attribute has to be equal, or\\n\\t * * a regular expression - then attribute has to match the expression.\\n\\t * @param {String|RegExp|Array} [pattern.class] Class name or array of class names to match. Each name can be\\n\\t * provided in a form of string or regular expression.\\n\\t * @param {Object} [pattern.style] Object with key-value pairs representing styles to match. Each object key\\n\\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\\n\\t * to match style value.\\n\\t */\\n\\tadd( ...pattern ) {\\n\\t\\tfor ( let item of pattern ) {\\n\\t\\t\\t// String or RegExp pattern is used as element's name.\\n\\t\\t\\tif ( typeof item == 'string' || item instanceof RegExp ) {\\n\\t\\t\\t\\titem = { name: item };\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Single class name/RegExp can be provided.\\n\\t\\t\\tif ( item.class && ( typeof item.class == 'string' || item.class instanceof RegExp ) ) {\\n\\t\\t\\t\\titem.class = [ item.class ];\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._patterns.push( item );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Matches elements for currently stored patterns. Returns match information about first found\\n\\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\\n\\t *\\n\\t * Example of returned object:\\n\\t *\\n\\t *\\t\\t{\\n\\t *\\t\\t\\telement: <instance of found element>,\\n\\t *\\t\\t\\tpattern: <pattern used to match found element>,\\n\\t *\\t\\t\\tmatch: {\\n\\t *\\t\\t\\t\\tname: true,\\n\\t *\\t\\t\\t\\tattribute: [ 'title', 'href' ],\\n\\t *\\t\\t\\t\\tclass: [ 'foo' ],\\n\\t *\\t\\t\\t\\tstyle: [ 'color', 'position' ]\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t * @see module:engine/view/matcher~Matcher#add\\n\\t * @see module:engine/view/matcher~Matcher#matchAll\\n\\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\\n\\t * @returns {Object|null} result\\n\\t * @returns {module:engine/view/element~Element} result.element Matched view element.\\n\\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\\n\\t * @returns {Object} result.match Object representing matched element parts.\\n\\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\\n\\t * @returns {Array} [result.match.attribute] Array with matched attribute names.\\n\\t * @returns {Array} [result.match.class] Array with matched class names.\\n\\t * @returns {Array} [result.match.style] Array with matched style names.\\n\\t */\\n\\tmatch( ...element ) {\\n\\t\\tfor ( const singleElement of element ) {\\n\\t\\t\\tfor ( const pattern of this._patterns ) {\\n\\t\\t\\t\\tconst match = isElementMatching( singleElement, pattern );\\n\\n\\t\\t\\t\\tif ( match ) {\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\telement: singleElement,\\n\\t\\t\\t\\t\\t\\tpattern,\\n\\t\\t\\t\\t\\t\\tmatch\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Matches elements for currently stored patterns. Returns array of match information with all found\\n\\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\\n\\t *\\n\\t * @see module:engine/view/matcher~Matcher#add\\n\\t * @see module:engine/view/matcher~Matcher#match\\n\\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\\n\\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\\n\\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\\n\\t */\\n\\tmatchAll( ...element ) {\\n\\t\\tconst results = [];\\n\\n\\t\\tfor ( const singleElement of element ) {\\n\\t\\t\\tfor ( const pattern of this._patterns ) {\\n\\t\\t\\t\\tconst match = isElementMatching( singleElement, pattern );\\n\\n\\t\\t\\t\\tif ( match ) {\\n\\t\\t\\t\\t\\tresults.push( {\\n\\t\\t\\t\\t\\t\\telement: singleElement,\\n\\t\\t\\t\\t\\t\\tpattern,\\n\\t\\t\\t\\t\\t\\tmatch\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn results.length > 0 ? results : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\\n\\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\\n\\t *\\n\\t * @returns {String|null} Element name trying to match.\\n\\t */\\n\\tgetElementName() {\\n\\t\\tif ( this._patterns.length !== 1 ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst pattern = this._patterns[ 0 ];\\n\\t\\tconst name = pattern.name;\\n\\n\\t\\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\\n\\t}\\n}\\n\\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\\n// If element cannot be matched to provided pattern - returns `null`.\\n//\\n// @param {module:engine/view/element~Element} element\\n// @param {Object|String|RegExp|Function} pattern\\n// @returns {Object|null} Returns object with match information or null if element is not matching.\\nfunction isElementMatching( element, pattern ) {\\n\\t// If pattern is provided as function - return result of that function;\\n\\tif ( typeof pattern == 'function' ) {\\n\\t\\treturn pattern( element );\\n\\t}\\n\\n\\tconst match = {};\\n\\t// Check element's name.\\n\\tif ( pattern.name ) {\\n\\t\\tmatch.name = matchName( pattern.name, element.name );\\n\\n\\t\\tif ( !match.name ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\t// Check element's attributes.\\n\\tif ( pattern.attribute ) {\\n\\t\\tmatch.attribute = matchAttributes( pattern.attribute, element );\\n\\n\\t\\tif ( !match.attribute ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\t// Check element's classes.\\n\\tif ( pattern.class ) {\\n\\t\\tmatch.class = matchClasses( pattern.class, element );\\n\\n\\t\\tif ( !match.class ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t// Check element's styles.\\n\\tif ( pattern.style ) {\\n\\t\\tmatch.style = matchStyles( pattern.style, element );\\n\\n\\t\\tif ( !match.style ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\treturn match;\\n}\\n\\n// Checks if name can be matched by provided pattern.\\n//\\n// @param {String|RegExp} pattern\\n// @param {String} name\\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\\nfunction matchName( pattern, name ) {\\n\\t// If pattern is provided as RegExp - test against this regexp.\\n\\tif ( pattern instanceof RegExp ) {\\n\\t\\treturn pattern.test( name );\\n\\t}\\n\\n\\treturn pattern === name;\\n}\\n\\n// Checks if attributes of provided element can be matched against provided patterns.\\n//\\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\\nfunction matchAttributes( patterns, element ) {\\n\\tconst match = [];\\n\\n\\tfor ( const name in patterns ) {\\n\\t\\tconst pattern = patterns[ name ];\\n\\n\\t\\tif ( element.hasAttribute( name ) ) {\\n\\t\\t\\tconst attribute = element.getAttribute( name );\\n\\n\\t\\t\\tif ( pattern === true ) {\\n\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t} else if ( pattern instanceof RegExp ) {\\n\\t\\t\\t\\tif ( pattern.test( attribute ) ) {\\n\\t\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( attribute === pattern ) {\\n\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\treturn match;\\n}\\n\\n// Checks if classes of provided element can be matched against provided patterns.\\n//\\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\\nfunction matchClasses( patterns, element ) {\\n\\tconst match = [];\\n\\n\\tfor ( const pattern of patterns ) {\\n\\t\\tif ( pattern instanceof RegExp ) {\\n\\t\\t\\tconst classes = element.getClassNames();\\n\\n\\t\\t\\tfor ( const name of classes ) {\\n\\t\\t\\t\\tif ( pattern.test( name ) ) {\\n\\t\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( match.length === 0 ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} else if ( element.hasClass( pattern ) ) {\\n\\t\\t\\tmatch.push( pattern );\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\treturn match;\\n}\\n\\n// Checks if styles of provided element can be matched against provided patterns.\\n//\\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\\n// used as style name. Value of each key can be a string or regular expression to match against style value.\\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\\nfunction matchStyles( patterns, element ) {\\n\\tconst match = [];\\n\\n\\tfor ( const name in patterns ) {\\n\\t\\tconst pattern = patterns[ name ];\\n\\n\\t\\tif ( element.hasStyle( name ) ) {\\n\\t\\t\\tconst style = element.getStyle( name );\\n\\n\\t\\t\\tif ( pattern instanceof RegExp ) {\\n\\t\\t\\t\\tif ( pattern.test( style ) ) {\\n\\t\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( style === pattern ) {\\n\\t\\t\\t\\tmatch.push( name );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\treturn match;\\n}\\n\\n/**\\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\\n * if a view element fits in a group of view elements described by the pattern.\\n *\\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\\n *\\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\\n *\\n *\\t\\t// Match any element with name equal to 'div'.\\n *\\t\\tconst pattern = 'div';\\n *\\n *\\t\\t// Match any element which name starts on 'p'.\\n *\\t\\tconst pattern = /^p/;\\n *\\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\\n *\\n *\\t\\t// Match view element's name.\\n *\\t\\tconst pattern = { name: /^p/ };\\n *\\n *\\t\\t// Match view element which has matching attributes.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tattribute: {\\n *\\t\\t\\t\\ttitle: 'foobar',\\t// Attribute title should equal 'foobar'.\\n *\\t\\t\\t\\tfoo: /^\\\\w+/,\\t\\t// Attribute foo should match /^\\\\w+/ regexp.\\n *\\t\\t\\t\\tbar: true\\t\\t\\t// Attribute bar should be set (can be empty).\\n *\\t\\t\\t}\\n *\\t\\t};\\n *\\n *\\t\\t// Match view element which has given class.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tclass: 'foobar'\\n *\\t\\t};\\n *\\n *\\t\\t// Match view element class using regular expression.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tclass: /foo.../\\n *\\t\\t};\\n *\\n *\\t\\t// Multiple classes to match.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tclass: [ 'baz', 'bar', /foo.../ ]\\n *\\t\\t}:\\n *\\n *\\t\\t// Match view element which has given styles.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tstyle: {\\n *\\t\\t\\t\\tposition: 'absolute',\\n *\\t\\t\\t\\tcolor: /^\\\\w*blue$/\\n *\\t\\t\\t}\\n *\\t\\t};\\n *\\n *\\t\\t// Pattern with multiple properties.\\n *\\t\\tconst pattern = {\\n *\\t\\t\\tname: 'span',\\n *\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t'font-weight': 'bold'\\n *\\t\\t\\t},\\n *\\t\\t\\tclass: 'highlighted'\\n *\\t\\t};\\n *\\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\\n * returned by {@link ~Matcher#match} call.\\n *\\n *\\t\\t// Match an empty <div> element.\\n *\\t\\tconst pattern = element => {\\n *\\t\\t\\tif ( element.name == 'div' && element.childCount > 0 ) {\\n *\\t\\t\\t\\t// Return which part of the element was matched.\\n *\\t\\t\\t\\treturn { name: true };\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\treturn null;\\n *\\t\\t};\\n *\\n *\\t\\t// Match a <p> element with big font (\\\"heading-like\\\" element).\\n *\\t\\tconst pattern = element => {\\n *\\t\\t\\tif ( element.name == 'p' ) {\\n *\\t\\t\\t\\tconst fontSize = element.getStyle( 'font-size' );\\n *\\t\\t\\t\\tconst size = fontSize.match( /(\\\\d+)/px );\\n *\\n *\\t\\t\\t\\tif ( size && Number( size[ 1 ] ) > 26 ) {\\n *\\t\\t\\t\\t\\treturn { name: true, attribute: [ 'font-size' ] };\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\treturn null;\\n *\\t\\t};\\n *\\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\\n *\\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\\n *\\n * @property {String|RegExp} [name] View element name to match.\\n * @property {String|RegExp|Array.<String|RegExp>} [class] View element's class name(s) to match.\\n * @property {Object} [style] Object with key-value pairs representing styles to match.\\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\\n * @property {Object} [attribute] Object with key-value pairs representing attributes to match.\\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/element\\n */\\n\\nimport Node from './node';\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\nimport isPlainObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isPlainObject';\\nimport Matcher from './matcher';\\n\\n/**\\n * View element.\\n *\\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\\n * be defined by the feature developer. Creating an element you should use {@link module:engine/view/containerelement~ContainerElement}\\n * class, {@link module:engine/view/attributeelement~AttributeElement} class or {@link module:engine/view/emptyelement~EmptyElement} class.\\n *\\n * Note that for view elements which are not created from model, like elements from mutations, paste or\\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element, so\\n * these will be instances of the {@link module:engine/view/element~Element}.\\n *\\n * @extends module:engine/view/node~Node\\n */\\nexport default class Element extends Node {\\n\\t/**\\n\\t * Creates a view element.\\n\\t *\\n\\t * Attributes can be passed in various formats:\\n\\t *\\n\\t *\\t\\tnew Element( 'div', { 'class': 'editor', 'contentEditable': 'true' } ); // object\\n\\t *\\t\\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\\n\\t *\\t\\tnew Element( 'div', mapOfAttributes ); // map\\n\\t *\\n\\t * **Note:** Constructor of this class shouldn't be used directly in the code. Use the\\n\\t * {@link module:engine/view/writer~Writer#createAttributeElement} for inline element,\\n\\t * {@link module:engine/view/writer~Writer#createContainerElement} for block element,\\n\\t * {@link module:engine/view/writer~Writer#createEditableElement} for editable element,\\n\\t * {@link module:engine/view/writer~Writer#createEmptyElement} for empty element or\\n\\t * {@link module:engine/view/writer~Writer#createUIElement} for UI element instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} name Node name.\\n\\t * @param {Object|Iterable} [attrs] Collection of attributes.\\n\\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\\n\\t * List of nodes to be inserted into created element.\\n\\t */\\n\\tconstructor( name, attrs, children ) {\\n\\t\\tsuper();\\n\\n\\t\\t/**\\n\\t\\t * Name of the element.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.name = name;\\n\\n\\t\\t/**\\n\\t\\t * Map of attributes, where attributes names are keys and attributes values are values.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Map} #_attrs\\n\\t\\t */\\n\\t\\tthis._attrs = parseAttributes( attrs );\\n\\n\\t\\t/**\\n\\t\\t * Array of child nodes.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Array.<module:engine/view/node~Node>}\\n\\t\\t */\\n\\t\\tthis._children = [];\\n\\n\\t\\tif ( children ) {\\n\\t\\t\\tthis._insertChildren( 0, children );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Set of classes associated with element instance.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Set}\\n\\t\\t */\\n\\t\\tthis._classes = new Set();\\n\\n\\t\\tif ( this._attrs.has( 'class' ) ) {\\n\\t\\t\\t// Remove class attribute and handle it by class set.\\n\\t\\t\\tconst classString = this._attrs.get( 'class' );\\n\\t\\t\\tparseClasses( this._classes, classString );\\n\\t\\t\\tthis._attrs.delete( 'class' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Map of styles.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Set} module:engine/view/element~Element#_styles\\n\\t\\t */\\n\\t\\tthis._styles = new Map();\\n\\n\\t\\tif ( this._attrs.has( 'style' ) ) {\\n\\t\\t\\t// Remove style attribute and handle it by styles map.\\n\\t\\t\\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\\n\\t\\t\\tthis._attrs.delete( 'style' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Map of custom properties.\\n\\t\\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @memeber {Map}\\n\\t\\t */\\n\\t\\tthis._customProperties = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Number of element's children.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget childCount() {\\n\\t\\treturn this._children.length;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if there are no nodes inside this element, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isEmpty() {\\n\\t\\treturn this._children.length === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given view tree object is of given type.\\n\\t *\\n\\t * Read more in {@link module:engine/view/node~Node#is}.\\n\\t *\\n\\t * @param {String} type\\n\\t * @param {String} [name] Element name.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'element' || type == this.name;\\n\\t\\t} else {\\n\\t\\t\\treturn type == 'element' && name == this.name;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets child at the given index.\\n\\t *\\n\\t * @param {Number} index Index of child.\\n\\t * @returns {module:engine/view/node~Node} Child node.\\n\\t */\\n\\tgetChild( index ) {\\n\\t\\treturn this._children[ index ];\\n\\t}\\n\\n\\t/**\\n\\t * Gets index of the given child node. Returns `-1` if child node is not found.\\n\\t *\\n\\t * @param {module:engine/view/node~Node} node Child node.\\n\\t * @returns {Number} Index of the child node.\\n\\t */\\n\\tgetChildIndex( node ) {\\n\\t\\treturn this._children.indexOf( node );\\n\\t}\\n\\n\\t/**\\n\\t * Gets child nodes iterator.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\\n\\t */\\n\\tgetChildren() {\\n\\t\\treturn this._children[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\\n\\t *\\n\\t * @returns {Iterable.<String>} Keys for attributes.\\n\\t */\\n\\t* getAttributeKeys() {\\n\\t\\tif ( this._classes.size > 0 ) {\\n\\t\\t\\tyield 'class';\\n\\t\\t}\\n\\n\\t\\tif ( this._styles.size > 0 ) {\\n\\t\\t\\tyield 'style';\\n\\t\\t}\\n\\n\\t\\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\\n\\t\\t// It can be simplified to `yield* this._attrs.keys();`.\\n\\t\\tfor ( const key of this._attrs.keys() ) {\\n\\t\\t\\tyield key;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over this element's attributes.\\n\\t *\\n\\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\\n\\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\t* getAttributes() {\\n\\t\\tyield* this._attrs.entries();\\n\\n\\t\\tif ( this._classes.size > 0 ) {\\n\\t\\t\\tyield [ 'class', this.getAttribute( 'class' ) ];\\n\\t\\t}\\n\\n\\t\\tif ( this._styles.size > 0 ) {\\n\\t\\t\\tyield [ 'style', this.getAttribute( 'style' ) ];\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets attribute by key. If attribute is not present - returns undefined.\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @returns {String|undefined} Attribute value.\\n\\t */\\n\\tgetAttribute( key ) {\\n\\t\\tif ( key == 'class' ) {\\n\\t\\t\\tif ( this._classes.size > 0 ) {\\n\\t\\t\\t\\treturn [ ...this._classes ].join( ' ' );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\tif ( key == 'style' ) {\\n\\t\\t\\tif ( this._styles.size > 0 ) {\\n\\t\\t\\t\\tlet styleString = '';\\n\\n\\t\\t\\t\\tfor ( const [ property, value ] of this._styles ) {\\n\\t\\t\\t\\t\\tstyleString += `${ property }:${ value };`;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn styleString;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\treturn this._attrs.get( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\\n\\t */\\n\\thasAttribute( key ) {\\n\\t\\tif ( key == 'class' ) {\\n\\t\\t\\treturn this._classes.size > 0;\\n\\t\\t}\\n\\n\\t\\tif ( key == 'style' ) {\\n\\t\\t\\treturn this._styles.size > 0;\\n\\t\\t}\\n\\n\\t\\treturn this._attrs.has( key );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if this element is similar to other element.\\n\\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\\n\\t * can contain different set of children nodes.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} otherElement\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisSimilar( otherElement ) {\\n\\t\\tif ( !( otherElement instanceof Element ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// If exactly the same Element is provided - return true immediately.\\n\\t\\tif ( this === otherElement ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Check element name.\\n\\t\\tif ( this.name != otherElement.name ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Check number of attributes, classes and styles.\\n\\t\\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\\n\\t\\t\\tthis._styles.size !== otherElement._styles.size ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Check if attributes are the same.\\n\\t\\tfor ( const [ key, value ] of this._attrs ) {\\n\\t\\t\\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check if classes are the same.\\n\\t\\tfor ( const className of this._classes ) {\\n\\t\\t\\tif ( !otherElement._classes.has( className ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check if styles are the same.\\n\\t\\tfor ( const [ property, value ] of this._styles ) {\\n\\t\\t\\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if class is present.\\n\\t * If more then one class is provided - returns true only when all classes are present.\\n\\t *\\n\\t *\\t\\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\\n\\t *\\t\\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\\n\\t *\\n\\t * @param {...String} className\\n\\t */\\n\\thasClass( ...className ) {\\n\\t\\tfor ( const name of className ) {\\n\\t\\t\\tif ( !this._classes.has( name ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that contains all class names.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetClassNames() {\\n\\t\\treturn this._classes.keys();\\n\\t}\\n\\n\\t/**\\n\\t * Returns style value for given property.\\n\\t * Undefined is returned if style does not exist.\\n\\t *\\n\\t * @param {String} property\\n\\t * @returns {String|undefined}\\n\\t */\\n\\tgetStyle( property ) {\\n\\t\\treturn this._styles.get( property );\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that contains all style names.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetStyleNames() {\\n\\t\\treturn this._styles.keys();\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if style keys are present.\\n\\t * If more then one style property is provided - returns true only when all properties are present.\\n\\t *\\n\\t *\\t\\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\\n\\t *\\t\\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\\n\\t *\\n\\t * @param {...String} property\\n\\t */\\n\\thasStyle( ...property ) {\\n\\t\\tfor ( const name of property ) {\\n\\t\\t\\tif ( !this._styles.has( name ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestor element that match specified pattern.\\n\\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\\n\\t *\\n\\t * @see module:engine/view/matcher~Matcher\\n\\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\\n\\t * See {@link module:engine/view/matcher~Matcher}.\\n\\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\\n\\t */\\n\\tfindAncestor( ...patterns ) {\\n\\t\\tconst matcher = new Matcher( ...patterns );\\n\\t\\tlet parent = this.parent;\\n\\n\\t\\twhile ( parent ) {\\n\\t\\t\\tif ( matcher.match( parent ) ) {\\n\\t\\t\\t\\treturn parent;\\n\\t\\t\\t}\\n\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the custom property value for the given key.\\n\\t *\\n\\t * @param {String|Symbol} key\\n\\t * @returns {*}\\n\\t */\\n\\tgetCustomProperty( key ) {\\n\\t\\treturn this._customProperties.get( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator which iterates over this element's custom properties.\\n\\t * Iterator provides `[ key, value ]` pairs for each stored property.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\t* getCustomProperties() {\\n\\t\\tyield* this._customProperties.entries();\\n\\t}\\n\\n\\t/**\\n\\t * Returns identity string based on element's name, styles, classes and other attributes.\\n\\t * Two elements that {@link #isSimilar are similar} will have same identity string.\\n\\t * It has the following format:\\n\\t *\\n\\t *\\t\\t'name class=\\\"class1,class2\\\" style=\\\"style1:value1;style2:value2\\\" attr1=\\\"val1\\\" attr2=\\\"val2\\\"'\\n \\t *\\n\\t * For example:\\n\\t *\\n\\t *\\t\\tconst element = writer.createContainerElement( 'foo', {\\n\\t *\\t\\t\\tbanana: '10',\\n\\t *\\t\\t\\tapple: '20',\\n\\t *\\t\\t\\tstyle: 'color: red; border-color: white;',\\n\\t *\\t\\t\\tclass: 'baz'\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// returns 'foo class=\\\"baz\\\" style=\\\"border-color:white;color:red\\\" apple=\\\"20\\\" banana=\\\"10\\\"'\\n\\t *\\t\\telement.getIdentity();\\n\\t *\\n\\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\\n\\t *\\n\\t * @returns {String}\\n\\t */\\n\\tgetIdentity() {\\n\\t\\tconst classes = Array.from( this._classes ).sort().join( ',' );\\n\\t\\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\\n\\t\\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\\\"${ i[ 1 ] }\\\"` ).sort().join( ' ' );\\n\\n\\t\\treturn this.name +\\n\\t\\t\\t( classes == '' ? '' : ` class=\\\"${ classes }\\\"` ) +\\n\\t\\t\\t( styles == '' ? '' : ` style=\\\"${ styles }\\\"` ) +\\n\\t\\t\\t( attributes == '' ? '' : ` ${ attributes }` );\\n\\t}\\n\\n\\t/**\\n\\t * Clones provided element.\\n\\t *\\n\\t * @protected\\n\\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\\n\\t * element will be cloned without any children.\\n\\t * @returns {module:engine/view/element~Element} Clone of this element.\\n\\t */\\n\\t_clone( deep = false ) {\\n\\t\\tconst childrenClone = [];\\n\\n\\t\\tif ( deep ) {\\n\\t\\t\\tfor ( const child of this.getChildren() ) {\\n\\t\\t\\t\\tchildrenClone.push( child._clone( deep ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// ContainerElement and AttributeElement should be also cloned properly.\\n\\t\\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\\n\\n\\t\\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\\n\\t\\t// parse once again in constructor.\\n\\t\\tcloned._classes = new Set( this._classes );\\n\\t\\tcloned._styles = new Map( this._styles );\\n\\n\\t\\t// Clone custom properties.\\n\\t\\tcloned._customProperties = new Map( this._customProperties );\\n\\n\\t\\t// Clone filler offset method.\\n\\t\\t// We can't define this method in a prototype because it's behavior which\\n\\t\\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\\n\\t\\tcloned.getFillerOffset = this.getFillerOffset;\\n\\n\\t\\treturn cloned;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/element~Element#_insertChildren Insert} a child node or a list of child nodes at the end of this node\\n\\t * and sets the parent of these nodes to this element.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#insert\\n\\t * @protected\\n\\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t * @returns {Number} Number of appended nodes.\\n\\t */\\n\\t_appendChildren( items ) {\\n\\t\\treturn this._insertChildren( this.childCount, items );\\n\\t}\\n\\n\\t/**\\n\\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\\n\\t * this element.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#insert\\n\\t * @protected\\n\\t * @param {Number} index Position where nodes should be inserted.\\n\\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t * @returns {Number} Number of inserted nodes.\\n\\t */\\n\\t_insertChildren( index, items ) {\\n\\t\\tthis._fireChange( 'children', this );\\n\\t\\tlet count = 0;\\n\\n\\t\\tconst nodes = normalize( items );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\\n\\t\\t\\tif ( node.parent !== null ) {\\n\\t\\t\\t\\tnode._remove();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode.parent = this;\\n\\n\\t\\t\\tthis._children.splice( index, 0, node );\\n\\t\\t\\tindex++;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\n\\t\\treturn count;\\n\\t}\\n\\n\\t/**\\n\\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#remove\\n\\t * @param {Number} index Number of the first node to remove.\\n\\t * @param {Number} [howMany=1] Number of nodes to remove.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\\n\\t */\\n\\t_removeChildren( index, howMany = 1 ) {\\n\\t\\tthis._fireChange( 'children', this );\\n\\n\\t\\tfor ( let i = index; i < index + howMany; i++ ) {\\n\\t\\t\\tthis._children[ i ].parent = null;\\n\\t\\t}\\n\\n\\t\\treturn this._children.splice( index, howMany );\\n\\t}\\n\\n\\t/**\\n\\t * Adds or overwrite attribute with a specified key and value.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#setAttribute\\n\\t * @protected\\n\\t * @param {String} key Attribute key.\\n\\t * @param {String} value Attribute value.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_setAttribute( key, value ) {\\n\\t\\tvalue = String( value );\\n\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\tif ( key == 'class' ) {\\n\\t\\t\\tparseClasses( this._classes, value );\\n\\t\\t} else if ( key == 'style' ) {\\n\\t\\t\\tparseInlineStyles( this._styles, value );\\n\\t\\t} else {\\n\\t\\t\\tthis._attrs.set( key, value );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes attribute from the element.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#removeAttribute\\n\\t * @protected\\n\\t * @param {String} key Attribute key.\\n\\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_removeAttribute( key ) {\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\t// Remove class attribute.\\n\\t\\tif ( key == 'class' ) {\\n\\t\\t\\tif ( this._classes.size > 0 ) {\\n\\t\\t\\t\\tthis._classes.clear();\\n\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Remove style attribute.\\n\\t\\tif ( key == 'style' ) {\\n\\t\\t\\tif ( this._styles.size > 0 ) {\\n\\t\\t\\t\\tthis._styles.clear();\\n\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Remove other attributes.\\n\\t\\treturn this._attrs.delete( key );\\n\\t}\\n\\n\\t/**\\n\\t * Adds specified class.\\n\\t *\\n\\t *\\t\\telement._addClass( 'foo' ); // Adds 'foo' class.\\n\\t *\\t\\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#addClass\\n\\t * @protected\\n\\t * @param {Array.<String>|String} className\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_addClass( className ) {\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\tclassName = Array.isArray( className ) ? className : [ className ];\\n\\t\\tclassName.forEach( name => this._classes.add( name ) );\\n\\t}\\n\\n\\t/**\\n\\t * Removes specified class.\\n\\t *\\n\\t *\\t\\telement._removeClass( 'foo' );  // Removes 'foo' class.\\n\\t *\\t\\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#removeClass\\n\\t * @param {Array.<String>|String} className\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_removeClass( className ) {\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\tclassName = Array.isArray( className ) ? className : [ className ];\\n\\t\\tclassName.forEach( name => this._classes.delete( name ) );\\n\\t}\\n\\n\\t/**\\n\\t * Adds style to the element.\\n\\t *\\n\\t *\\t\\telement._setStyle( 'color', 'red' );\\n\\t *\\t\\telement._setStyle( {\\n\\t *\\t\\t\\tcolor: 'red',\\n\\t *\\t\\t\\tposition: 'fixed'\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#setStyle\\n\\t * @protected\\n\\t * @param {String|Object} property Property name or object with key - value pairs.\\n\\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_setStyle( property, value ) {\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\tif ( isPlainObject( property ) ) {\\n\\t\\t\\tconst keys = Object.keys( property );\\n\\n\\t\\t\\tfor ( const key of keys ) {\\n\\t\\t\\t\\tthis._styles.set( key, property[ key ] );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tthis._styles.set( property, value );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes specified style.\\n\\t *\\n\\t *\\t\\telement._removeStyle( 'color' );  // Removes 'color' style.\\n\\t *\\t\\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#removeStyle\\n\\t * @protected\\n\\t * @param {Array.<String>|String} property\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_removeStyle( property ) {\\n\\t\\tthis._fireChange( 'attributes', this );\\n\\n\\t\\tproperty = Array.isArray( property ) ? property : [ property ];\\n\\t\\tproperty.forEach( name => this._styles.delete( name ) );\\n\\t}\\n\\n\\t/**\\n\\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\\n\\t * so they can be used to add special data to elements.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#setCustomProperty\\n\\t * @protected\\n\\t * @param {String|Symbol} key\\n\\t * @param {*} value\\n\\t */\\n\\t_setCustomProperty( key, value ) {\\n\\t\\tthis._customProperties.set( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes the custom property stored under the given key.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#removeCustomProperty\\n\\t * @protected\\n\\t * @param {String|Symbol} key\\n\\t * @returns {Boolean} Returns true if property was removed.\\n\\t */\\n\\t_removeCustomProperty( key ) {\\n\\t\\treturn this._customProperties.delete( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\\n\\t *\\n\\t * @abstract\\n\\t * @method module:engine/view/element~Element#getFillerOffset\\n\\t */\\n}\\n\\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\\n// Attributes with non-`String` value are converted to `String`.\\n//\\n// @param {Object|Map} attrs Attributes to parse.\\n// @returns {Map} Parsed attributes.\\nfunction parseAttributes( attrs ) {\\n\\tif ( isPlainObject( attrs ) ) {\\n\\t\\tattrs = objectToMap( attrs );\\n\\t} else {\\n\\t\\tattrs = new Map( attrs );\\n\\t}\\n\\n\\tfor ( const [ key, value ] of attrs ) {\\n\\t\\tif ( value === null ) {\\n\\t\\t\\tattrs.delete( key );\\n\\t\\t} else if ( typeof value != 'string' ) {\\n\\t\\t\\tattrs.set( key, String( value ) );\\n\\t\\t}\\n\\t}\\n\\n\\treturn attrs;\\n}\\n\\n// Parses inline styles and puts property - value pairs into styles map.\\n// Styles map is cleared before insertion.\\n//\\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\\n// @param {String} stylesString Styles to parse.\\nfunction parseInlineStyles( stylesMap, stylesString ) {\\n\\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\\n\\tlet quoteType = null;\\n\\tlet propertyNameStart = 0;\\n\\tlet propertyValueStart = 0;\\n\\tlet propertyName = null;\\n\\n\\tstylesMap.clear();\\n\\n\\t// Do not set anything if input string is empty.\\n\\tif ( stylesString === '' ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\\n\\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\\n\\t\\tstylesString = stylesString + ';';\\n\\t}\\n\\n\\t// Seek the whole string for \\\"special characters\\\".\\n\\tfor ( let i = 0; i < stylesString.length; i++ ) {\\n\\t\\tconst char = stylesString.charAt( i );\\n\\n\\t\\tif ( quoteType === null ) {\\n\\t\\t\\t// No quote found yet or last found quote was a closing quote.\\n\\t\\t\\tswitch ( char ) {\\n\\t\\t\\t\\tcase ':':\\n\\t\\t\\t\\t\\t// Most of time colon means that property name just ended.\\n\\t\\t\\t\\t\\t// Sometimes however `:` is found inside property value (for example in background image url).\\n\\t\\t\\t\\t\\tif ( !propertyName ) {\\n\\t\\t\\t\\t\\t\\t// Treat this as end of property only if property name is not already saved.\\n\\t\\t\\t\\t\\t\\t// Save property name.\\n\\t\\t\\t\\t\\t\\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\\n\\t\\t\\t\\t\\t\\t// Save this point as the start of property value.\\n\\t\\t\\t\\t\\t\\tpropertyValueStart = i + 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase '\\\"':\\n\\t\\t\\t\\tcase '\\\\'':\\n\\t\\t\\t\\t\\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\\n\\t\\t\\t\\t\\tquoteType = char;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t// eslint-disable-next-line no-case-declarations\\n\\t\\t\\t\\tcase ';':\\n\\t\\t\\t\\t\\t// Property value just ended.\\n\\t\\t\\t\\t\\t// Use previously stored property value start to obtain property value.\\n\\t\\t\\t\\t\\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\\n\\n\\t\\t\\t\\t\\tif ( propertyName ) {\\n\\t\\t\\t\\t\\t\\t// Save parsed part.\\n\\t\\t\\t\\t\\t\\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tpropertyName = null;\\n\\n\\t\\t\\t\\t\\t// Save this point as property name start. Property name starts immediately after previous property value ends.\\n\\t\\t\\t\\t\\tpropertyNameStart = i + 1;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} else if ( char === quoteType ) {\\n\\t\\t\\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\\n\\t\\t\\tquoteType = null;\\n\\t\\t}\\n\\t}\\n}\\n\\n// Parses class attribute and puts all classes into classes set.\\n// Classes set s cleared before insertion.\\n//\\n// @param {Set.<String>} classesSet Set to insert parsed classes.\\n// @param {String} classesString String with classes to parse.\\nfunction parseClasses( classesSet, classesString ) {\\n\\tconst classArray = classesString.split( /\\\\s+/ );\\n\\tclassesSet.clear();\\n\\tclassArray.forEach( name => classesSet.add( name ) );\\n}\\n\\n// Converts strings to Text and non-iterables to arrays.\\n//\\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\\n// @return {Iterable.<module:engine/view/node~Node>}\\nfunction normalize( nodes ) {\\n\\t// Separate condition because string is iterable.\\n\\tif ( typeof nodes == 'string' ) {\\n\\t\\treturn [ new Text( nodes ) ];\\n\\t}\\n\\n\\tif ( !isIterable( nodes ) ) {\\n\\t\\tnodes = [ nodes ];\\n\\t}\\n\\n\\t// Array.from to enable .map() on non-arrays.\\n\\treturn Array.from( nodes )\\n\\t\\t.map( node => {\\n\\t\\t\\tif ( typeof node == 'string' ) {\\n\\t\\t\\t\\treturn new Text( node );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( node instanceof TextProxy ) {\\n\\t\\t\\t\\treturn new Text( node.data );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn node;\\n\\t\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/containerelement\\n */\\n\\nimport Element from './element';\\n\\n/**\\n * Containers are elements which define document structure. They define boundaries for\\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly use for block elements like `<p>` or `<div>`.\\n *\\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\\n * be defined by the feature developer.\\n *\\n * Creating an element you should use `ContainerElement` class or {@link module:engine/view/attributeelement~AttributeElement}. This is\\n * important to define the type of the element because of two reasons:\\n *\\n * Firstly, {@link module:engine/view/domconverter~DomConverter} needs the information what is an editable block to convert elements to\\n * DOM properly. {@link module:engine/view/domconverter~DomConverter} will ensure that `ContainerElement` is editable and it is possible\\n * to put caret inside it, even if the container is empty.\\n *\\n * Secondly, {@link module:engine/view/writer~Writer view writer} uses this information.\\n * Nodes {@link module:engine/view/writer~Writer#breakAttributes breaking} and {@link module:engine/view/writer~Writer#mergeAttributes\\n * merging}\\n * is performed only in a bounds of a container nodes.\\n *\\n * For instance if `<p>` is an container and `<b>` is attribute:\\n *\\n *\\t\\t<p><b>fo^o</b></p>\\n *\\n * {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} will create:\\n *\\n *\\t\\t<p><b>fo</b><b>o</b></p>\\n *\\n * There might be a need to mark `<span>` element as a container node, for example in situation when it will be a\\n * container of an inline widget:\\n *\\n *\\t\\t<span color=\\\"red\\\">foobar</span>\\t\\t// attribute\\n *\\t\\t<span data-widget>foobar</span>\\t\\t// container\\n *\\n * @extends module:engine/view/element~Element\\n */\\nexport default class ContainerElement extends Element {\\n\\t/**\\n\\t * Creates a container element.\\n\\t *\\n\\t * @see module:engine/view/element~Element\\n\\t * @see module:engine/view/writer~Writer#createContainerElement\\n\\t * @protected\\n\\t */\\n\\tconstructor( name, attrs, children ) {\\n\\t\\tsuper( name, attrs, children );\\n\\n\\t\\t/**\\n\\t\\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\\n\\t\\t *\\n\\t\\t * @method #getFillerOffset\\n\\t\\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\\n\\t\\t */\\n\\t\\tthis.getFillerOffset = getFillerOffset;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'containerElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'containerElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\\n//\\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\\nfunction getFillerOffset() {\\n\\tfor ( const child of this.getChildren() ) {\\n\\t\\t// If there's any non-UI element – don't render the bogus.\\n\\t\\tif ( !child.is( 'uiElement' ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\t// If there are only UI elements – render the bogus at the end of the element.\\n\\treturn this.childCount;\\n}\\n\",\"import eq from './eq';\\nimport isArrayLike from './isArrayLike';\\nimport isIndex from './_isIndex';\\nimport isObject from './isObject';\\n\\n/**\\n * Checks if the given arguments are from an iteratee call.\\n *\\n * @private\\n * @param {*} value The potential iteratee value argument.\\n * @param {*} index The potential iteratee index or key argument.\\n * @param {*} object The potential iteratee object argument.\\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\\n *  else `false`.\\n */\\nfunction isIterateeCall(value, index, object) {\\n  if (!isObject(object)) {\\n    return false;\\n  }\\n  var type = typeof index;\\n  if (type == 'number'\\n        ? (isArrayLike(object) && isIndex(index, object.length))\\n        : (type == 'string' && index in object)\\n      ) {\\n    return eq(object[index], value);\\n  }\\n  return false;\\n}\\n\\nexport default isIterateeCall;\\n\",\"/**\\n * A faster alternative to `Function#apply`, this function invokes `func`\\n * with the `this` binding of `thisArg` and the arguments of `args`.\\n *\\n * @private\\n * @param {Function} func The function to invoke.\\n * @param {*} thisArg The `this` binding of `func`.\\n * @param {Array} args The arguments to invoke `func` with.\\n * @returns {*} Returns the result of `func`.\\n */\\nfunction apply(func, thisArg, args) {\\n  var length = args.length;\\n  switch (length) {\\n    case 0: return func.call(thisArg);\\n    case 1: return func.call(thisArg, args[0]);\\n    case 2: return func.call(thisArg, args[0], args[1]);\\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\\n  }\\n  return func.apply(thisArg, args);\\n}\\n\\nexport default apply;\\n\",\"import isObjectLike from './isObjectLike';\\n\\n/** `Object#toString` result references. */\\nvar symbolTag = '[object Symbol]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/**\\n * Checks if `value` is classified as a `Symbol` primitive or object.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isSymbol(Symbol.iterator);\\n * // => true\\n *\\n * _.isSymbol('abc');\\n * // => false\\n */\\nfunction isSymbol(value) {\\n  return typeof value == 'symbol' ||\\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\\n}\\n\\nexport default isSymbol;\\n\",\"import isFunction from './isFunction';\\nimport isObject from './isObject';\\nimport isSymbol from './isSymbol';\\n\\n/** Used as references for various `Number` constants. */\\nvar NAN = 0 / 0;\\n\\n/** Used to match leading and trailing whitespace. */\\nvar reTrim = /^\\\\s+|\\\\s+$/g;\\n\\n/** Used to detect bad signed hexadecimal string values. */\\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\\n\\n/** Used to detect binary string values. */\\nvar reIsBinary = /^0b[01]+$/i;\\n\\n/** Used to detect octal string values. */\\nvar reIsOctal = /^0o[0-7]+$/i;\\n\\n/** Built-in method references without a dependency on `root`. */\\nvar freeParseInt = parseInt;\\n\\n/**\\n * Converts `value` to a number.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to process.\\n * @returns {number} Returns the number.\\n * @example\\n *\\n * _.toNumber(3.2);\\n * // => 3.2\\n *\\n * _.toNumber(Number.MIN_VALUE);\\n * // => 5e-324\\n *\\n * _.toNumber(Infinity);\\n * // => Infinity\\n *\\n * _.toNumber('3.2');\\n * // => 3.2\\n */\\nfunction toNumber(value) {\\n  if (typeof value == 'number') {\\n    return value;\\n  }\\n  if (isSymbol(value)) {\\n    return NAN;\\n  }\\n  if (isObject(value)) {\\n    var other = isFunction(value.valueOf) ? value.valueOf() : value;\\n    value = isObject(other) ? (other + '') : other;\\n  }\\n  if (typeof value != 'string') {\\n    return value === 0 ? value : +value;\\n  }\\n  value = value.replace(reTrim, '');\\n  var isBinary = reIsBinary.test(value);\\n  return (isBinary || reIsOctal.test(value))\\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\\n    : (reIsBadHex.test(value) ? NAN : +value);\\n}\\n\\nexport default toNumber;\\n\",\"import toNumber from './toNumber';\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0,\\n    MAX_INTEGER = 1.7976931348623157e+308;\\n\\n/**\\n * Converts `value` to a finite number.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.12.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted number.\\n * @example\\n *\\n * _.toFinite(3.2);\\n * // => 3.2\\n *\\n * _.toFinite(Number.MIN_VALUE);\\n * // => 5e-324\\n *\\n * _.toFinite(Infinity);\\n * // => 1.7976931348623157e+308\\n *\\n * _.toFinite('3.2');\\n * // => 3.2\\n */\\nfunction toFinite(value) {\\n  if (!value) {\\n    return value === 0 ? value : 0;\\n  }\\n  value = toNumber(value);\\n  if (value === INFINITY || value === -INFINITY) {\\n    var sign = (value < 0 ? -1 : 1);\\n    return sign * MAX_INTEGER;\\n  }\\n  return value === value ? value : 0;\\n}\\n\\nexport default toFinite;\\n\",\"import toFinite from './toFinite';\\n\\n/**\\n * Converts `value` to an integer.\\n *\\n * **Note:** This function is loosely based on\\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted integer.\\n * @example\\n *\\n * _.toInteger(3.2);\\n * // => 3\\n *\\n * _.toInteger(Number.MIN_VALUE);\\n * // => 0\\n *\\n * _.toInteger(Infinity);\\n * // => 1.7976931348623157e+308\\n *\\n * _.toInteger('3.2');\\n * // => 3\\n */\\nfunction toInteger(value) {\\n  var result = toFinite(value),\\n      remainder = result % 1;\\n\\n  return result === result ? (remainder ? result - remainder : result) : 0;\\n}\\n\\nexport default toInteger;\\n\",\"import apply from './_apply';\\nimport toInteger from './toInteger';\\n\\n/** Used as the `TypeError` message for \\\"Functions\\\" methods. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * Creates a function that invokes `func` with the `this` binding of the\\n * created function and arguments from `start` and beyond provided as\\n * an array.\\n *\\n * **Note:** This method is based on the\\n * [rest parameter](https://mdn.io/rest_parameters).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Function\\n * @param {Function} func The function to apply a rest parameter to.\\n * @param {number} [start=func.length-1] The start position of the rest parameter.\\n * @returns {Function} Returns the new function.\\n * @example\\n *\\n * var say = _.rest(function(what, names) {\\n *   return what + ' ' + _.initial(names).join(', ') +\\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\\n * });\\n *\\n * say('hello', 'fred', 'barney', 'pebbles');\\n * // => 'hello fred, barney, & pebbles'\\n */\\nfunction rest(func, start) {\\n  if (typeof func != 'function') {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);\\n  return function() {\\n    var args = arguments,\\n        index = -1,\\n        length = nativeMax(args.length - start, 0),\\n        array = Array(length);\\n\\n    while (++index < length) {\\n      array[index] = args[start + index];\\n    }\\n    switch (start) {\\n      case 0: return func.call(this, array);\\n      case 1: return func.call(this, args[0], array);\\n      case 2: return func.call(this, args[0], args[1], array);\\n    }\\n    var otherArgs = Array(start + 1);\\n    index = -1;\\n    while (++index < start) {\\n      otherArgs[index] = args[index];\\n    }\\n    otherArgs[start] = array;\\n    return apply(func, this, otherArgs);\\n  };\\n}\\n\\nexport default rest;\\n\",\"import isIterateeCall from './_isIterateeCall';\\nimport rest from './rest';\\n\\n/**\\n * Creates a function like `_.assign`.\\n *\\n * @private\\n * @param {Function} assigner The function to assign values.\\n * @returns {Function} Returns the new assigner function.\\n */\\nfunction createAssigner(assigner) {\\n  return rest(function(object, sources) {\\n    var index = -1,\\n        length = sources.length,\\n        customizer = length > 1 ? sources[length - 1] : undefined,\\n        guard = length > 2 ? sources[2] : undefined;\\n\\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\\n      ? (length--, customizer)\\n      : undefined;\\n\\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\\n      customizer = length < 3 ? undefined : customizer;\\n      length = 1;\\n    }\\n    object = Object(object);\\n    while (++index < length) {\\n      var source = sources[index];\\n      if (source) {\\n        assigner(object, source, index, customizer);\\n      }\\n    }\\n    return object;\\n  });\\n}\\n\\nexport default createAssigner;\\n\",\"import root from './_root';\\n\\n/** Built-in value references. */\\nvar Reflect = root.Reflect;\\n\\nexport default Reflect;\\n\",\"/**\\n * Converts `iterator` to an array.\\n *\\n * @private\\n * @param {Object} iterator The iterator to convert.\\n * @returns {Array} Returns the converted array.\\n */\\nfunction iteratorToArray(iterator) {\\n  var data,\\n      result = [];\\n\\n  while (!(data = iterator.next()).done) {\\n    result.push(data.value);\\n  }\\n  return result;\\n}\\n\\nexport default iteratorToArray;\\n\",\"import Reflect from './_Reflect';\\nimport iteratorToArray from './_iteratorToArray';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar enumerate = Reflect ? Reflect.enumerate : undefined,\\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n\\n/**\\n * The base implementation of `_.keysIn` which doesn't skip the constructor\\n * property of prototypes or treat sparse arrays as dense.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n */\\nfunction baseKeysIn(object) {\\n  object = object == null ? object : Object(object);\\n\\n  var result = [];\\n  for (var key in object) {\\n    result.push(key);\\n  }\\n  return result;\\n}\\n\\n// Fallback for IE < 9 with es6-shim.\\nif (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\\n  baseKeysIn = function(object) {\\n    return iteratorToArray(enumerate(object));\\n  };\\n}\\n\\nexport default baseKeysIn;\\n\",\"import baseKeysIn from './_baseKeysIn';\\nimport indexKeys from './_indexKeys';\\nimport isIndex from './_isIndex';\\nimport isPrototype from './_isPrototype';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * Creates an array of the own and inherited enumerable property names of `object`.\\n *\\n * **Note:** Non-object values are coerced to objects.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the array of property names.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.keysIn(new Foo);\\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\\n */\\nfunction keysIn(object) {\\n  var index = -1,\\n      isProto = isPrototype(object),\\n      props = baseKeysIn(object),\\n      propsLength = props.length,\\n      indexes = indexKeys(object),\\n      skipIndexes = !!indexes,\\n      result = indexes || [],\\n      length = result.length;\\n\\n  while (++index < propsLength) {\\n    var key = props[index];\\n    if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&\\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\\n      result.push(key);\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default keysIn;\\n\",\"import assignValue from './_assignValue';\\nimport copyObject from './_copyObject';\\nimport createAssigner from './_createAssigner';\\nimport isArrayLike from './isArrayLike';\\nimport isPrototype from './_isPrototype';\\nimport keysIn from './keysIn';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Built-in value references. */\\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\\n\\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\\n\\n/**\\n * This method is like `_.assign` except that it iterates over own and\\n * inherited source properties.\\n *\\n * **Note:** This method mutates `object`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @alias extend\\n * @category Object\\n * @param {Object} object The destination object.\\n * @param {...Object} [sources] The source objects.\\n * @returns {Object} Returns `object`.\\n * @see _.assign\\n * @example\\n *\\n * function Foo() {\\n *   this.b = 2;\\n * }\\n *\\n * function Bar() {\\n *   this.d = 4;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n * Bar.prototype.e = 5;\\n *\\n * _.assignIn({ 'a': 1 }, new Foo, new Bar);\\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }\\n */\\nvar assignIn = createAssigner(function(object, source) {\\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\\n    copyObject(source, keysIn(source), object);\\n    return;\\n  }\\n  for (var key in source) {\\n    assignValue(object, key, source[key]);\\n  }\\n});\\n\\nexport default assignIn;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/observablemixin\\n */\\n\\nimport EmitterMixin from './emittermixin';\\nimport CKEditorError from './ckeditorerror';\\nimport extend from './lib/lodash/extend';\\nimport isObject from './lib/lodash/isObject';\\n\\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\\n\\n/**\\n * Mixin that injects the \\\"observable properties\\\" and data binding functionality described in the\\n * {@link ~Observable} interface.\\n *\\n * @mixin ObservableMixin\\n * @mixes module:utils/emittermixin~EmitterMixin\\n * @implements module:utils/observablemixin~Observable\\n */\\nconst ObservableMixin = {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tset( name, value ) {\\n\\t\\t// If the first parameter is an Object, iterate over its properties.\\n\\t\\tif ( isObject( name ) ) {\\n\\t\\t\\tObject.keys( name ).forEach( property => {\\n\\t\\t\\t\\tthis.set( property, name[ property ] );\\n\\t\\t\\t}, this );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tinitObservable( this );\\n\\n\\t\\tconst properties = this[ observablePropertiesSymbol ];\\n\\n\\t\\tif ( ( name in this ) && !properties.has( name ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot override an existing property.\\n\\t\\t\\t *\\n\\t\\t\\t * This error is thrown when trying to {@link ~Observable#set set} an property with\\n\\t\\t\\t * a name of an already existing property. For example:\\n\\t\\t\\t *\\n\\t\\t\\t *\\t\\tlet observable = new Model();\\n\\t\\t\\t *\\t\\tobservable.property = 1;\\n\\t\\t\\t *\\t\\tobservable.set( 'property', 2 );\\t\\t\\t// throws\\n\\t\\t\\t *\\n\\t\\t\\t *\\t\\tobservable.set( 'property', 1 );\\n\\t\\t\\t *\\t\\tobservable.set( 'property', 2 );\\t\\t\\t// ok, because this is an existing property.\\n\\t\\t\\t *\\n\\t\\t\\t * @error observable-set-cannot-override\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.' );\\n\\t\\t}\\n\\n\\t\\tObject.defineProperty( this, name, {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tconfigurable: true,\\n\\n\\t\\t\\tget() {\\n\\t\\t\\t\\treturn properties.get( name );\\n\\t\\t\\t},\\n\\n\\t\\t\\tset( value ) {\\n\\t\\t\\t\\tconst oldValue = properties.get( name );\\n\\n\\t\\t\\t\\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\\n\\t\\t\\t\\t// Note: When properties map has no such own property, then its value is undefined.\\n\\t\\t\\t\\tif ( oldValue !== value || !properties.has( name ) ) {\\n\\t\\t\\t\\t\\tproperties.set( name, value );\\n\\t\\t\\t\\t\\tthis.fire( 'change:' + name, name, value, oldValue );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis[ name ] = value;\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tbind( ...bindProperties ) {\\n\\t\\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * All properties must be strings.\\n\\t\\t\\t *\\n\\t\\t\\t * @error observable-bind-wrong-properties\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.' );\\n\\t\\t}\\n\\n\\t\\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Properties must be unique.\\n\\t\\t\\t *\\n\\t\\t\\t * @error observable-bind-duplicate-properties\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.' );\\n\\t\\t}\\n\\n\\t\\tinitObservable( this );\\n\\n\\t\\tconst boundProperties = this[ boundPropertiesSymbol ];\\n\\n\\t\\tbindProperties.forEach( propertyName => {\\n\\t\\t\\tif ( boundProperties.has( propertyName ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Cannot bind the same property more that once.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error observable-bind-rebind\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.' );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tconst bindings = new Map();\\n\\n\\t\\t// @typedef {Object} Binding\\n\\t\\t// @property {Array} property Property which is bound.\\n\\t\\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\\n\\t\\t// @property {Array} callback A function which processes `to` components.\\n\\t\\tbindProperties.forEach( a => {\\n\\t\\t\\tconst binding = { property: a, to: [] };\\n\\n\\t\\t\\tboundProperties.set( a, binding );\\n\\t\\t\\tbindings.set( a, binding );\\n\\t\\t} );\\n\\n\\t\\t// @typedef {Object} BindChain\\n\\t\\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\\n\\t\\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\\n\\t\\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\\n\\t\\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\\n\\t\\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\\n\\t\\t// @property {Map} _bindings Stores bindings to be kept in\\n\\t\\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\\n\\t\\t// initiated in this binding chain.\\n\\t\\treturn {\\n\\t\\t\\tto: bindTo,\\n\\t\\t\\ttoMany: bindToMany,\\n\\n\\t\\t\\t_observable: this,\\n\\t\\t\\t_bindProperties: bindProperties,\\n\\t\\t\\t_to: [],\\n\\t\\t\\t_bindings: bindings\\n\\t\\t};\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tunbind( ...unbindProperties ) {\\n\\t\\t// Nothing to do here if not inited yet.\\n\\t\\tif ( !( observablePropertiesSymbol in this ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst boundProperties = this[ boundPropertiesSymbol ];\\n\\t\\tconst boundObservables = this[ boundObservablesSymbol ];\\n\\n\\t\\tif ( unbindProperties.length ) {\\n\\t\\t\\tif ( !isStringArray( unbindProperties ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Properties must be strings.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error observable-unbind-wrong-properties\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\tunbindProperties.forEach( propertyName => {\\n\\t\\t\\t\\tconst binding = boundProperties.get( propertyName );\\n\\n\\t\\t\\t\\t// Nothing to do if the binding is not defined\\n\\t\\t\\t\\tif ( !binding ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlet toObservable, toProperty, toProperties, toPropertyBindings;\\n\\n\\t\\t\\t\\tbinding.to.forEach( to => {\\n\\t\\t\\t\\t\\t// TODO: ES6 destructuring.\\n\\t\\t\\t\\t\\ttoObservable = to[ 0 ];\\n\\t\\t\\t\\t\\ttoProperty = to[ 1 ];\\n\\t\\t\\t\\t\\ttoProperties = boundObservables.get( toObservable );\\n\\t\\t\\t\\t\\ttoPropertyBindings = toProperties[ toProperty ];\\n\\n\\t\\t\\t\\t\\ttoPropertyBindings.delete( binding );\\n\\n\\t\\t\\t\\t\\tif ( !toPropertyBindings.size ) {\\n\\t\\t\\t\\t\\t\\tdelete toProperties[ toProperty ];\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif ( !Object.keys( toProperties ).length ) {\\n\\t\\t\\t\\t\\t\\tboundObservables.delete( toObservable );\\n\\t\\t\\t\\t\\t\\tthis.stopListening( toObservable, 'change' );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tboundProperties.delete( propertyName );\\n\\t\\t\\t} );\\n\\t\\t} else {\\n\\t\\t\\tboundObservables.forEach( ( bindings, boundObservable ) => {\\n\\t\\t\\t\\tthis.stopListening( boundObservable, 'change' );\\n\\t\\t\\t} );\\n\\n\\t\\t\\tboundObservables.clear();\\n\\t\\t\\tboundProperties.clear();\\n\\t\\t}\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdecorate( methodName ) {\\n\\t\\tconst originalMethod = this[ methodName ];\\n\\n\\t\\tif ( !originalMethod ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot decorate an undefined method.\\n\\t\\t\\t *\\n\\t\\t\\t * @error observablemixin-cannot-decorate-undefined\\n\\t\\t\\t * @param {Object} object The object which method should be decorated.\\n\\t\\t\\t * @param {String} methodName Name of the method which does not exist.\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\\n\\t\\t\\t\\t{ object: this, methodName }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tthis.on( methodName, ( evt, args ) => {\\n\\t\\t\\tevt.return = originalMethod.apply( this, args );\\n\\t\\t} );\\n\\n\\t\\tthis[ methodName ] = function( ...args ) {\\n\\t\\t\\treturn this.fire( methodName, args );\\n\\t\\t};\\n\\t}\\n};\\n\\nextend( ObservableMixin, EmitterMixin );\\n\\nexport default ObservableMixin;\\n\\n// Init symbol properties needed to for the observable mechanism to work.\\n//\\n// @private\\n// @param {module:utils/observablemixin~ObservableMixin} observable\\nfunction initObservable( observable ) {\\n\\t// Do nothing if already inited.\\n\\tif ( observablePropertiesSymbol in observable ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// The internal hash containing the observable's state.\\n\\t//\\n\\t// @private\\n\\t// @type {Map}\\n\\tObject.defineProperty( observable, observablePropertiesSymbol, {\\n\\t\\tvalue: new Map()\\n\\t} );\\n\\n\\t// Map containing bindings to external observables. It shares the binding objects\\n\\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\\n\\t// it is used to observe external observables to update own properties accordingly.\\n\\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\\n\\t//\\n\\t//\\t\\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\\n\\t//\\t\\tconsole.log( A._boundObservables );\\n\\t//\\n\\t//\\t\\t\\tMap( {\\n\\t//\\t\\t\\t\\tB: {\\n\\t//\\t\\t\\t\\t\\tx: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\\n\\t//\\t\\t\\t\\t\\t] ),\\n\\t//\\t\\t\\t\\t\\ty: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\\n\\t//\\t\\t\\t\\t\\t] )\\n\\t//\\t\\t\\t\\t}\\n\\t//\\t\\t\\t} )\\n\\t//\\n\\t//\\t\\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\\n\\t//\\t\\tconsole.log( A._boundObservables );\\n\\t//\\n\\t//\\t\\t\\tMap( {\\n\\t//\\t\\t\\t\\tB: {\\n\\t//\\t\\t\\t\\t\\tx: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\\n\\t//\\t\\t\\t\\t\\t] ),\\n\\t//\\t\\t\\t\\t\\ty: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\\n\\t//\\t\\t\\t\\t\\t] ),\\n\\t//\\t\\t\\t\\t\\tz: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\\n\\t//\\t\\t\\t\\t\\t] )\\n\\t//\\t\\t\\t\\t},\\n\\t//\\t\\t\\t\\tC: {\\n\\t//\\t\\t\\t\\t\\tw: Set( [\\n\\t//\\t\\t\\t\\t\\t\\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\\n\\t//\\t\\t\\t\\t\\t] )\\n\\t//\\t\\t\\t\\t}\\n\\t//\\t\\t\\t} )\\n\\t//\\n\\t// @private\\n\\t// @type {Map}\\n\\tObject.defineProperty( observable, boundObservablesSymbol, {\\n\\t\\tvalue: new Map()\\n\\t} );\\n\\n\\t// Object that stores which properties of this observable are bound and how. It shares\\n\\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with {@link utils.ObservableMixin#_boundObservables}.\\n\\t// This data structure is a reverse of {@link utils.ObservableMixin#_boundObservables} and it is helpful for\\n\\t// {@link utils.ObservableMixin#unbind}.\\n\\t//\\n\\t// See {@link utils.ObservableMixin#bind}.\\n\\t//\\n\\t//\\t\\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\\n\\t//\\t\\tconsole.log( A._boundProperties );\\n\\t//\\n\\t//\\t\\t\\tMap( {\\n\\t//\\t\\t\\t\\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\\n\\t//\\t\\t\\t\\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\\n\\t//\\t\\t\\t\\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\\n\\t//\\t\\t\\t} )\\n\\t//\\n\\t//\\t\\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\\n\\t//\\t\\tconsole.log( A._boundProperties );\\n\\t//\\n\\t//\\t\\t\\tMap( {\\n\\t//\\t\\t\\t\\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\\n\\t//\\t\\t\\t\\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\\n\\t//\\t\\t\\t\\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\\n\\t//\\t\\t\\t\\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\\n\\t//\\t\\t\\t} )\\n\\t//\\n\\t// @private\\n\\t// @type {Map}\\n\\tObject.defineProperty( observable, boundPropertiesSymbol, {\\n\\t\\tvalue: new Map()\\n\\t} );\\n}\\n\\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\\n//\\n// @private\\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\\nfunction bindTo( ...args ) {\\n\\tconst parsedArgs = parseBindToArgs( ...args );\\n\\tconst bindingsKeys = Array.from( this._bindings.keys() );\\n\\tconst numberOfBindings = bindingsKeys.length;\\n\\n\\t// Eliminate A.bind( 'x' ).to( B, C )\\n\\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\\n\\t\\t/**\\n\\t\\t * Binding multiple observables only possible with callback.\\n\\t\\t *\\n\\t\\t * @error observable-bind-no-callback\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'observable-bind-to-no-callback: Binding multiple observables only possible with callback.' );\\n\\t}\\n\\n\\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\\n\\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\\n\\t\\t/**\\n\\t\\t * Cannot bind multiple properties and use a callback in one binding.\\n\\t\\t *\\n\\t\\t * @error observable-bind-to-extra-callback\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.' );\\n\\t}\\n\\n\\tparsedArgs.to.forEach( to => {\\n\\t\\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\\n\\t\\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The number of properties must match.\\n\\t\\t\\t *\\n\\t\\t\\t * @error observable-bind-to-properties-length\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.' );\\n\\t\\t}\\n\\n\\t\\t// When no to.properties specified, observing source properties instead i.e.\\n\\t\\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\\n\\t\\tif ( !to.properties.length ) {\\n\\t\\t\\tto.properties = this._bindProperties;\\n\\t\\t}\\n\\t} );\\n\\n\\tthis._to = parsedArgs.to;\\n\\n\\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\\n\\tif ( parsedArgs.callback ) {\\n\\t\\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\\n\\t}\\n\\n\\tattachBindToListeners( this._observable, this._to );\\n\\n\\t// Update observable._boundProperties and observable._boundObservables.\\n\\tupdateBindToBound( this );\\n\\n\\t// Set initial values of bound properties.\\n\\tthis._bindProperties.forEach( propertyName => {\\n\\t\\tupdateBoundObservableProperty( this._observable, propertyName );\\n\\t} );\\n}\\n\\n// Binds to an attribute in a set of iterable observables.\\n//\\n// @private\\n// @param {Array.<Observable>} observables\\n// @param {String} attribute\\n// @param {Function} callback\\nfunction bindToMany( observables, attribute, callback ) {\\n\\tif ( this._bindings.size > 1 ) {\\n\\t\\t/**\\n\\t\\t * Binding one attribute to many observables only possible with one attribute.\\n\\t\\t *\\n\\t\\t * @error observable-bind-to-many-not-one-binding\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().' );\\n\\t}\\n\\n\\tthis.to(\\n\\t\\t// Bind to #attribute of each observable...\\n\\t\\t...getBindingTargets( observables, attribute ),\\n\\t\\t// ...using given callback to parse attribute values.\\n\\t\\tcallback\\n\\t);\\n}\\n\\n// Returns an array of binding components for\\n// {@link Observable#bind} from a set of iterable observables.\\n//\\n// @param {Array.<Observable>} observables\\n// @param {String} attribute\\n// @returns {Array.<String|Observable>}\\nfunction getBindingTargets( observables, attribute ) {\\n\\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\\n\\n\\t// Merge pairs to one-dimension array of observables and attributes.\\n\\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\\n}\\n\\n// Check if all entries of the array are of `String` type.\\n//\\n// @private\\n// @param {Array} arr An array to be checked.\\n// @returns {Boolean}\\nfunction isStringArray( arr ) {\\n\\treturn arr.every( a => typeof a == 'string' );\\n}\\n\\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\\n// an object with a parsed structure. For example\\n//\\n//\\t\\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\\n//\\n// becomes\\n//\\n//\\t\\t{\\n//\\t\\t\\tto: [\\n//\\t\\t\\t\\t{ observable: B, properties: [ 'a' ] },\\n//\\t\\t\\t\\t{ observable: C, properties: [ 'b' ] },\\n//\\t\\t\\t],\\n//\\t\\t\\tcallback: call\\n// \\t\\t}\\n//\\n// @private\\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\\n// @returns {Object}\\nfunction parseBindToArgs( ...args ) {\\n\\t// Eliminate A.bind( 'x' ).to()\\n\\tif ( !args.length ) {\\n\\t\\t/**\\n\\t\\t * Invalid argument syntax in `to()`.\\n\\t\\t *\\n\\t\\t * @error observable-bind-to-parse-error\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\\n\\t}\\n\\n\\tconst parsed = { to: [] };\\n\\tlet lastObservable;\\n\\n\\tif ( typeof args[ args.length - 1 ] == 'function' ) {\\n\\t\\tparsed.callback = args.pop();\\n\\t}\\n\\n\\targs.forEach( a => {\\n\\t\\tif ( typeof a == 'string' ) {\\n\\t\\t\\tlastObservable.properties.push( a );\\n\\t\\t} else if ( typeof a == 'object' ) {\\n\\t\\t\\tlastObservable = { observable: a, properties: [] };\\n\\t\\t\\tparsed.to.push( lastObservable );\\n\\t\\t} else {\\n\\t\\t\\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\\n\\t\\t}\\n\\t} );\\n\\n\\treturn parsed;\\n}\\n\\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\\n//\\n// @private\\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\\n\\tconst boundObservables = observable[ boundObservablesSymbol ];\\n\\tconst bindingsToObservable = boundObservables.get( toObservable );\\n\\tconst bindings = bindingsToObservable || {};\\n\\n\\tif ( !bindings[ toPropertyName ] ) {\\n\\t\\tbindings[ toPropertyName ] = new Set();\\n\\t}\\n\\n\\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\\n\\tbindings[ toPropertyName ].add( binding );\\n\\n\\tif ( !bindingsToObservable ) {\\n\\t\\tboundObservables.set( toObservable, bindings );\\n\\t}\\n}\\n\\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\\n// with {@link BindChain}.\\n//\\n// Assuming the following binding being created\\n//\\n// \\t\\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\\n//\\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\\n//\\n// \\t\\t{\\n// \\t\\t\\ta: { observable: A, property: 'a', to: [] },\\n// \\t\\t\\tb: { observable: A, property: 'b', to: [] },\\n// \\t\\t}\\n//\\n// Iterate over all bindings in this chain and fill their `to` properties with\\n// corresponding to( ... ) arguments (components of the binding), so\\n//\\n// \\t\\t{\\n// \\t\\t\\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\\n// \\t\\t\\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\\n// \\t\\t}\\n//\\n// Then update the structure of {@link Observable#_boundObservables} with updated\\n// binding, so it becomes:\\n//\\n// \\t\\tMap( {\\n// \\t\\t\\tB: {\\n// \\t\\t\\t\\tx: Set( [\\n// \\t\\t\\t\\t\\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\\n// \\t\\t\\t\\t] ),\\n// \\t\\t\\t\\ty: Set( [\\n// \\t\\t\\t\\t\\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\\n// \\t\\t\\t\\t] )\\n//\\t\\t\\t}\\n// \\t\\t} )\\n//\\n// @private\\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\\nfunction updateBindToBound( chain ) {\\n\\tlet toProperty;\\n\\n\\tchain._bindings.forEach( ( binding, propertyName ) => {\\n\\t\\t// Note: For a binding without a callback, this will run only once\\n\\t\\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\\n\\t\\t// TODO: ES6 destructuring.\\n\\t\\tchain._to.forEach( to => {\\n\\t\\t\\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\\n\\n\\t\\t\\tbinding.to.push( [ to.observable, toProperty ] );\\n\\t\\t\\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\\n\\t\\t} );\\n\\t} );\\n}\\n\\n// Updates an property of a {@link Observable} with a value\\n// determined by an entry in {@link Observable#_boundProperties}.\\n//\\n// @private\\n// @param {Observable} observable A observable which property is to be updated.\\n// @param {String} propertyName An property to be updated.\\nfunction updateBoundObservableProperty( observable, propertyName ) {\\n\\tconst boundProperties = observable[ boundPropertiesSymbol ];\\n\\tconst binding = boundProperties.get( propertyName );\\n\\tlet propertyValue;\\n\\n\\t// When a binding with callback is created like\\n\\t//\\n\\t// \\t\\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\\n\\t//\\n\\t// collect B.b and C.c, then pass them to callback to set A.a.\\n\\tif ( binding.callback ) {\\n\\t\\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\\n\\t} else {\\n\\t\\tpropertyValue = binding.to[ 0 ];\\n\\t\\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\\n\\t}\\n\\n\\tif ( observable.hasOwnProperty( propertyName ) ) {\\n\\t\\tobservable[ propertyName ] = propertyValue;\\n\\t} else {\\n\\t\\tobservable.set( propertyName, propertyValue );\\n\\t}\\n}\\n\\n// Starts listening to changes in {@link BindChain._to} observables to update\\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\\n// initial state of {@link BindChain._observable}.\\n//\\n// @private\\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\\nfunction attachBindToListeners( observable, toBindings ) {\\n\\ttoBindings.forEach( to => {\\n\\t\\tconst boundObservables = observable[ boundObservablesSymbol ];\\n\\t\\tlet bindings;\\n\\n\\t\\t// If there's already a chain between the observables (`observable` listens to\\n\\t\\t// `to.observable`), there's no need to create another `change` event listener.\\n\\t\\tif ( !boundObservables.get( to.observable ) ) {\\n\\t\\t\\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\\n\\t\\t\\t\\tbindings = boundObservables.get( to.observable )[ propertyName ];\\n\\n\\t\\t\\t\\t// Note: to.observable will fire for any property change, react\\n\\t\\t\\t\\t// to changes of properties which are bound only.\\n\\t\\t\\t\\tif ( bindings ) {\\n\\t\\t\\t\\t\\tbindings.forEach( binding => {\\n\\t\\t\\t\\t\\t\\tupdateBoundObservableProperty( observable, binding.property );\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t} );\\n}\\n\\n/**\\n * Interface which adds \\\"observable properties\\\" and data binding functionality.\\n *\\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\\n *\\n * @interface Observable\\n * @extends module:utils/emittermixin~Emitter\\n */\\n\\n/**\\n * Fired when a property changed value.\\n *\\n *\\t\\tobservable.set( 'prop', 1 );\\n *\\n *\\t\\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\\n *\\t\\t\\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\\n *\\t\\t} )\\n *\\n *\\t\\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\\n *\\n * @event change:{property}\\n * @param {String} name The property name.\\n * @param {*} value The new property value.\\n * @param {*} oldValue The previous property value.\\n */\\n\\n/**\\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\\n * of the state and is be observable.\\n *\\n * It accepts also a single object literal containing key/value pairs with properties to be set.\\n *\\n * This method throws the `observable-set-cannot-override` error if the observable instance already\\n * have a property with the given property name. This prevents from mistakenly overriding existing\\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\\n *\\n * @method #set\\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\\n */\\n\\n/**\\n * Binds observable properties to another objects implementing {@link module:utils/observablemixin~Observable}\\n * interface (like {@link module:ui/model~Model}).\\n *\\n * Once bound, the observable will immediately share the current state of properties\\n * of the observable it is bound to and react to the changes to these properties\\n * in the future.\\n *\\n * **Note**: To release the binding use {@link module:utils/observablemixin~Observable#unbind}.\\n *\\n * Using `bind().to()` chain:\\n *\\n *\\t\\tA.bind( 'a' ).to( B );\\n *\\t\\tA.bind( 'a' ).to( B, 'b' );\\n *\\t\\tA.bind( 'a', 'b' ).to( B, 'c', 'd' );\\n *\\t\\tA.bind( 'a' ).to( B, 'b', C, 'd', ( b, d ) => b + d );\\n *\\n * It is also possible to bind to the same property in a observables collection using `bind().toMany()` chain:\\n *\\n *\\t\\tA.bind( 'a' ).toMany( [ B, C, D ], 'x', ( a, b, c ) => a + b + c );\\n *\\t\\tA.bind( 'a' ).toMany( [ B, C, D ], 'x', ( ...x ) => x.every( x => x ) );\\n *\\n * @method #bind\\n * @param {...String} bindProperties Observable properties that will be bound to another observable(s).\\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\\n */\\n\\n/**\\n * Removes the binding created with {@link #bind}.\\n *\\n *\\t\\tA.unbind( 'a' );\\n *\\t\\tA.unbind();\\n *\\n * @method #unbind\\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\\n * be released if no properties provided.\\n */\\n\\n/**\\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\\n * (named after the method) and the original action will be plugged as a listener to that event.\\n *\\n * This is a very simplified method decoration. Itself it doesn't change the behavior of a method (expect adding the event),\\n * but it allows to modify it later on by listening to the method's event.\\n *\\n * For example, in order to cancel the method execution one can stop the event:\\n *\\n *\\t\\tclass Foo {\\n *\\t\\t\\tconstructor() {\\n *\\t\\t\\t\\tthis.decorate( 'method' );\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\tmethod() {\\n *\\t\\t\\t\\tconsole.log( 'called!' );\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n *\\t\\tconst foo = new Foo();\\n *\\t\\tfoo.on( 'method', ( evt ) => {\\n *\\t\\t\\tevt.stop();\\n *\\t\\t}, { priority: 'high' } );\\n *\\n *\\t\\tfoo.method(); // Nothing is logged.\\n *\\n *\\n * Note: we used a high priority listener here to execute this callback before the one which\\n * calls the original method (which used the default priority).\\n *\\n * It's also possible to change the return value:\\n *\\n *\\t\\tfoo.on( 'method', ( evt ) => {\\n *\\t\\t\\tevt.return = 'Foo!';\\n *\\t\\t} );\\n *\\n *\\t\\tfoo.method(); // -> 'Foo'\\n *\\n * Finally, it's possible to access and modify the parameters:\\n *\\n *\\t\\tmethod( a, b ) {\\n *\\t\\t\\tconsole.log( `${ a }, ${ b }`  );\\n *\\t\\t}\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tfoo.on( 'method', ( evt, args ) => {\\n *\\t\\t\\targs[ 0 ] = 3;\\n *\\n *\\t\\t\\tconsole.log( args[ 1 ] ); // -> 2\\n *\\t\\t}, { priority: 'high' } );\\n *\\n *\\t\\tfoo.method( 1, 2 ); // -> '3, 2'\\n *\\n * @method #decorate\\n * @param {String} methodName Name of the method to decorate.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/editableelement\\n */\\n\\nimport ContainerElement from './containerelement';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\n\\nconst documentSymbol = Symbol( 'document' );\\n\\n/**\\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\\n * or nested editable area in the editor.\\n *\\n * Editable is automatically read-only when its {module:engine/view/document~Document Document} is read-only.\\n *\\n * @extends module:engine/view/containerelement~ContainerElement\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class EditableElement extends ContainerElement {\\n\\t/**\\n\\t * Creates an editable element.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#createEditableElement\\n\\t * @protected\\n\\t */\\n\\tconstructor( name, attrs, children ) {\\n\\t\\tsuper( name, attrs, children );\\n\\n\\t\\t/**\\n\\t\\t * Whether the editable is in read-write or read-only mode.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\t/**\\n\\t\\t * Whether the editable is focused.\\n\\t\\t *\\n\\t\\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\\n\\t\\t * selection is changed.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\\n\\t\\t */\\n\\t\\tthis.set( 'isFocused', false );\\n\\n\\t\\t/**\\n\\t\\t * The {@link module:engine/view/document~Document} which is an owner of this root.\\n\\t\\t * Can only by set once.\\n\\t\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\\n\\t\\t * when document is already set.\\n\\t\\t *\\n\\t\\t * @member {module:engine/view/document~Document} #document\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Returns document associated with the editable.\\n\\t *\\n\\t * @readonly\\n\\t * @return {module:engine/view/document~Document}\\n\\t */\\n\\tget document() {\\n\\t\\treturn this.getCustomProperty( documentSymbol );\\n\\t}\\n\\n\\t/**\\n\\t * Sets document of this editable element.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/view/document~Document} document\\n\\t */\\n\\tset _document( document ) {\\n\\t\\tif ( this.getCustomProperty( documentSymbol ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * View document is already set. It can only be set once.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-editableelement-document-already-set\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.' );\\n\\t\\t}\\n\\n\\t\\tthis._setCustomProperty( documentSymbol, document );\\n\\n\\t\\tthis.bind( 'isReadOnly' ).to( document );\\n\\n\\t\\tthis.bind( 'isFocused' ).to(\\n\\t\\t\\tdocument,\\n\\t\\t\\t'isFocused',\\n\\t\\t\\tisFocused => isFocused && document.selection.editableElement == this\\n\\t\\t);\\n\\n\\t\\t// Update focus state based on selection changes.\\n\\t\\tthis.listenTo( document.selection, 'change', () => {\\n\\t\\t\\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\\n\\t\\t} );\\n\\t}\\n}\\n\\nmix( EditableElement, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/rooteditableelement\\n */\\n\\nimport EditableElement from './editableelement';\\n\\nconst rootNameSymbol = Symbol( 'rootName' );\\n\\n/**\\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\\n * but in both cases it is called \\\"an editable\\\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\\n * editable elements} making them \\\"nested editables\\\".\\n *\\n * @extends module:engine/view/editableelement~EditableElement\\n */\\nexport default class RootEditableElement extends EditableElement {\\n\\t/**\\n\\t * Creates root editable element.\\n\\t *\\n\\t * @param {String} name Node name.\\n\\t */\\n\\tconstructor( name ) {\\n\\t\\tsuper( name );\\n\\n\\t\\t/**\\n\\t\\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\\n\\t\\t * other name is set, `main` name is used.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.rootName = 'main';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'rootElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n\\n\\tget rootName() {\\n\\t\\treturn this.getCustomProperty( rootNameSymbol );\\n\\t}\\n\\n\\tset rootName( rootName ) {\\n\\t\\tthis._setCustomProperty( rootNameSymbol, rootName );\\n\\t}\\n\\n\\t/**\\n\\t * Overrides old element name and sets new one.\\n\\t * This is needed because view roots are created before they are attached to the DOM.\\n\\t * The name of the root element is temporary at this stage. It has to be changed when the\\n\\t * view root element is attached to the DOM element.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} name The new name of element.\\n\\t */\\n\\tset _name( name ) {\\n\\t\\tthis.name = name;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/treewalker\\n */\\n\\nimport Element from './element';\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport Position from './position';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Position iterator class. It allows to iterate forward and backward over the document.\\n */\\nexport default class TreeWalker {\\n\\t/**\\n\\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\\n\\t *\\n\\t * @constructor\\n\\t * @param {Object} options Object with configuration.\\n\\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\\n\\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\\n\\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\\n\\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\\n\\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\\n\\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\\n\\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\\n\\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\\n\\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\\n\\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\\n\\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\\n\\t * twice: for `'elementStart'` and `'elementEnd'`.\\n\\t */\\n\\tconstructor( options = {} ) {\\n\\t\\tif ( !options.boundaries && !options.startPosition ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Neither boundaries nor starting position have been defined.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-tree-walker-no-start-position\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\\n\\t\\t}\\n\\n\\t\\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\\n\\t\\t\\t\\t{ direction: options.direction }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Iterator boundaries.\\n\\t\\t *\\n\\t\\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\\n\\t\\t * on the start of boundary, then `{ done: true }` is returned.\\n\\t\\t *\\n\\t\\t * If boundaries are not defined they are set before first and after last child of the root node.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\\n\\t\\t */\\n\\t\\tthis.boundaries = options.boundaries || null;\\n\\n\\t\\t/**\\n\\t\\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\\n\\t\\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\\n\\t\\t */\\n\\t\\tif ( options.startPosition ) {\\n\\t\\t\\tthis.position = Position.createFromPosition( options.startPosition );\\n\\t\\t} else {\\n\\t\\t\\tthis.position = Position.createFromPosition( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Walking direction. Defaults `'forward'`.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\\n\\t\\t */\\n\\t\\tthis.direction = options.direction || 'forward';\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\\n\\t\\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\\n\\t\\t */\\n\\t\\tthis.singleCharacters = !!options.singleCharacters;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\\n\\t\\t * iterated node will not be returned along with `elementEnd` tag.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\\n\\t\\t */\\n\\t\\tthis.shallow = !!options.shallow;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\\n\\t\\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\\n\\t\\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\\n\\t\\t */\\n\\t\\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\\n\\n\\t\\t/**\\n\\t\\t * Start boundary parent.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\\n\\t\\t */\\n\\t\\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\\n\\n\\t\\t/**\\n\\t\\t * End boundary parent.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\\n\\t\\t */\\n\\t\\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\\n\\t * \\t\\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\\n\\t * \\t\\twalker.skip( value => false ); // Do not move the position.\\n\\t *\\n\\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\\n\\t * return `true` if the value should be skipped or `false` if not.\\n\\t */\\n\\tskip( skip ) {\\n\\t\\tlet done, value, prevPosition;\\n\\n\\t\\tdo {\\n\\t\\t\\tprevPosition = this.position;\\n\\n\\t\\t\\t( { done, value } = this.next() );\\n\\t\\t} while ( !done && skip( value ) );\\n\\n\\t\\tif ( !done ) {\\n\\t\\t\\tthis.position = prevPosition;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the next tree walker's value.\\n\\t *\\n\\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\\n\\t * information about taken step.\\n\\t */\\n\\tnext() {\\n\\t\\tif ( this.direction == 'forward' ) {\\n\\t\\t\\treturn this._next();\\n\\t\\t} else {\\n\\t\\t\\treturn this._previous();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\\n\\t *\\n\\t * @private\\n\\t * @returns {Object}\\n\\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\\n\\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\\n\\t */\\n\\t_next() {\\n\\t\\tlet position = Position.createFromPosition( this.position );\\n\\t\\tconst previousPosition = this.position;\\n\\t\\tconst parent = position.parent;\\n\\n\\t\\t// We are at the end of the root.\\n\\t\\tif ( parent.parent === null && position.offset === parent.childCount ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// We reached the walker boundary.\\n\\t\\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// Get node just after current position.\\n\\t\\tlet node;\\n\\n\\t\\t// Text is a specific parent because it contains string instead of child nodes.\\n\\t\\tif ( parent instanceof Text ) {\\n\\t\\t\\tif ( position.isAtEnd ) {\\n\\t\\t\\t\\t// Prevent returning \\\"elementEnd\\\" for Text node. Skip that value and return the next walker step.\\n\\t\\t\\t\\tthis.position = Position.createAfter( parent );\\n\\n\\t\\t\\t\\treturn this._next();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode = parent.data[ position.offset ];\\n\\t\\t} else {\\n\\t\\t\\tnode = parent.getChild( position.offset );\\n\\t\\t}\\n\\n\\t\\tif ( node instanceof Element ) {\\n\\t\\t\\tif ( !this.shallow ) {\\n\\t\\t\\t\\tposition = new Position( node, 0 );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tposition.offset++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\\n\\t\\t} else if ( node instanceof Text ) {\\n\\t\\t\\tif ( this.singleCharacters ) {\\n\\t\\t\\t\\tposition = new Position( node, 0 );\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn this._next();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet charactersCount = node.data.length;\\n\\t\\t\\t\\tlet item;\\n\\n\\t\\t\\t\\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\\n\\t\\t\\t\\tif ( node == this._boundaryEndParent ) {\\n\\t\\t\\t\\t\\tcharactersCount = this.boundaries.end.offset;\\n\\t\\t\\t\\t\\titem = new TextProxy( node, 0, charactersCount );\\n\\t\\t\\t\\t\\tposition = Position.createAfter( item );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\titem = new TextProxy( node, 0, node.data.length );\\n\\t\\t\\t\\t\\t// If not just keep moving forward.\\n\\t\\t\\t\\t\\tposition.offset++;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\\n\\t\\t\\t}\\n\\t\\t} else if ( typeof node == 'string' ) {\\n\\t\\t\\tlet textLength;\\n\\n\\t\\t\\tif ( this.singleCharacters ) {\\n\\t\\t\\t\\ttextLength = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Check if text stick out of walker range.\\n\\t\\t\\t\\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\\n\\n\\t\\t\\t\\ttextLength = endOffset - position.offset;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst textProxy = new TextProxy( parent, position.offset, textLength );\\n\\n\\t\\t\\tposition.offset += textLength;\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\\n\\t\\t} else {\\n\\t\\t\\t// `node` is not set, we reached the end of current `parent`.\\n\\t\\t\\tposition = Position.createAfter( parent );\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\tif ( this.ignoreElementEnd ) {\\n\\t\\t\\t\\treturn this._next();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\\n\\t *\\n\\t * @private\\n\\t * @returns {Object}\\n\\t * @returns {Boolean} return.done True if iterator is done.\\n\\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\\n\\t */\\n\\t_previous() {\\n\\t\\tlet position = Position.createFromPosition( this.position );\\n\\t\\tconst previousPosition = this.position;\\n\\t\\tconst parent = position.parent;\\n\\n\\t\\t// We are at the beginning of the root.\\n\\t\\tif ( parent.parent === null && position.offset === 0 ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// We reached the walker boundary.\\n\\t\\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// Get node just before current position.\\n\\t\\tlet node;\\n\\n\\t\\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\\n\\t\\tif ( parent instanceof Text ) {\\n\\t\\t\\tif ( position.isAtStart ) {\\n\\t\\t\\t\\t// Prevent returning \\\"elementStart\\\" for Text node. Skip that value and return the next walker step.\\n\\t\\t\\t\\tthis.position = Position.createBefore( parent );\\n\\n\\t\\t\\t\\treturn this._previous();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode = parent.data[ position.offset - 1 ];\\n\\t\\t} else {\\n\\t\\t\\tnode = parent.getChild( position.offset - 1 );\\n\\t\\t}\\n\\n\\t\\tif ( node instanceof Element ) {\\n\\t\\t\\tif ( !this.shallow ) {\\n\\t\\t\\t\\tposition = new Position( node, node.childCount );\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\tif ( this.ignoreElementEnd ) {\\n\\t\\t\\t\\t\\treturn this._previous();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tposition.offset--;\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\\n\\t\\t\\t}\\n\\t\\t} else if ( node instanceof Text ) {\\n\\t\\t\\tif ( this.singleCharacters ) {\\n\\t\\t\\t\\tposition = new Position( node, node.data.length );\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn this._previous();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet charactersCount = node.data.length;\\n\\t\\t\\t\\tlet item;\\n\\n\\t\\t\\t\\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\\n\\t\\t\\t\\tif ( node == this._boundaryStartParent ) {\\n\\t\\t\\t\\t\\tconst offset = this.boundaries.start.offset;\\n\\n\\t\\t\\t\\t\\titem = new TextProxy( node, offset, node.data.length - offset );\\n\\t\\t\\t\\t\\tcharactersCount = item.data.length;\\n\\t\\t\\t\\t\\tposition = Position.createBefore( item );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\titem = new TextProxy( node, 0, node.data.length );\\n\\t\\t\\t\\t\\t// If not just keep moving backward.\\n\\t\\t\\t\\t\\tposition.offset--;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\\n\\t\\t\\t}\\n\\t\\t} else if ( typeof node == 'string' ) {\\n\\t\\t\\tlet textLength;\\n\\n\\t\\t\\tif ( !this.singleCharacters ) {\\n\\t\\t\\t\\t// Check if text stick out of walker range.\\n\\t\\t\\t\\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\\n\\n\\t\\t\\t\\ttextLength = position.offset - startOffset;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttextLength = 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tposition.offset -= textLength;\\n\\n\\t\\t\\tconst textProxy = new TextProxy( parent, position.offset, textLength );\\n\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\\n\\t\\t} else {\\n\\t\\t\\t// `node` is not set, we reached the beginning of current `parent`.\\n\\t\\t\\tposition = Position.createBefore( parent );\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\\n\\t * @param {module:engine/view/item~Item} item Item between old and new position.\\n\\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\\n\\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\\n\\t * @param {Number} [length] Length of the item.\\n\\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\\n\\t */\\n\\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\\n\\t\\t// Text is a specific parent, because contains string instead of children.\\n\\t\\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\\n\\t\\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\\n\\t\\t// we move it just before or just after Text.\\n\\t\\tif ( item instanceof TextProxy ) {\\n\\t\\t\\t// Position is at the end of Text.\\n\\t\\t\\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\\n\\t\\t\\t\\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\\n\\t\\t\\t\\t\\tnextPosition = Position.createAfter( item.textNode );\\n\\t\\t\\t\\t\\t// When we change nextPosition of returned value we need also update walker current position.\\n\\t\\t\\t\\t\\tthis.position = nextPosition;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpreviousPosition = Position.createAfter( item.textNode );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Position is at the begining ot the text.\\n\\t\\t\\tif ( item.offsetInText === 0 ) {\\n\\t\\t\\t\\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\\n\\t\\t\\t\\t\\tnextPosition = Position.createBefore( item.textNode );\\n\\t\\t\\t\\t\\t// When we change nextPosition of returned value we need also update walker current position.\\n\\t\\t\\t\\t\\tthis.position = nextPosition;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpreviousPosition = Position.createBefore( item.textNode );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tdone: false,\\n\\t\\t\\tvalue: {\\n\\t\\t\\t\\ttype,\\n\\t\\t\\t\\titem,\\n\\t\\t\\t\\tpreviousPosition,\\n\\t\\t\\t\\tnextPosition,\\n\\t\\t\\t\\tlength\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n}\\n\\n/**\\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\\n * of node, or `'text'` if walker traversed over single and multiple characters.\\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\\n *\\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\\n */\\n\\n/**\\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\\n *\\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\\n * @property {module:engine/view/item~Item} item Item between old and new positions of {@link module:engine/view/treewalker~TreeWalker}.\\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\\n * position before the item. Note that it is more efficient to use this position then calculate the position before\\n * the node using {@link module:engine/view/position~Position.createBefore}.\\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\\n * the position after item.\\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\\n * inside of the Text to its parent just before or just after Text.\\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\\n * the position after the item.\\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\\n * before the item.\\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\\n * inside of the Text to its parent just before or just after Text.\\n * @property {Number} [length] Length of the item. For `'elementStart'` it is 1. For `'text'` it is\\n * the length of the text. For `'elementEnd'` it is undefined.\\n */\\n\\n/**\\n * Tree walking directions.\\n *\\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/comparearrays\\n */\\n\\n/**\\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\\n * it means that arrays differ.\\n *\\n *\\t\\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\\t\\t// 'same'\\n *\\t\\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\\t\\t// 'prefix'\\n *\\t\\tcompareArrays( [ 0, 2 ], [ 0 ] );\\t\\t\\t// 'extension'\\n *\\t\\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\\t\\t// 0\\n *\\t\\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\\t\\t// 1\\n *\\n * @param {Array} a Array that is compared.\\n * @param {Array} b Array to compare with.\\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\\n */\\nexport default function compareArrays( a, b ) {\\n\\tconst minLen = Math.min( a.length, b.length );\\n\\n\\tfor ( let i = 0; i < minLen; i++ ) {\\n\\t\\tif ( a[ i ] != b[ i ] ) {\\n\\t\\t\\t// The arrays are different.\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n\\n\\t// Both arrays were same at all points.\\n\\tif ( a.length == b.length ) {\\n\\t\\t// If their length is also same, they are the same.\\n\\t\\treturn 'same';\\n\\t} else if ( a.length < b.length ) {\\n\\t\\t// Compared array is shorter so it is a prefix of the other array.\\n\\t\\treturn 'prefix';\\n\\t} else {\\n\\t\\t// Compared array is longer so it is an extension of the other array.\\n\\t\\treturn 'extension';\\n\\t}\\n}\\n\\n/**\\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/position\\n */\\n\\nimport TreeWalker from './treewalker';\\n\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport EditableElement from './editableelement';\\n\\n/**\\n * Position in the tree. Position is always located before or after a node.\\n */\\nexport default class Position {\\n\\t/**\\n\\t * Creates a position.\\n\\t *\\n\\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\\n\\t * @param {Number} offset Position offset.\\n\\t */\\n\\tconstructor( parent, offset ) {\\n\\t\\t/**\\n\\t\\t * Position parent.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\\n\\t\\t * module:engine/view/position~Position#parent\\n\\t\\t */\\n\\t\\tthis.parent = parent;\\n\\n\\t\\t/**\\n\\t\\t * Position offset.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} module:engine/view/position~Position#offset\\n\\t\\t */\\n\\t\\tthis.offset = offset;\\n\\t}\\n\\n\\t/**\\n\\t * Node directly after the position. Equals `null` when there is no node after position or position is located\\n\\t * inside text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|null}\\n\\t */\\n\\tget nodeAfter() {\\n\\t\\tif ( this.parent.is( 'text' ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn this.parent.getChild( this.offset ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Node directly before the position. Equals `null` when there is no node before position or position is located\\n\\t * inside text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|null}\\n\\t */\\n\\tget nodeBefore() {\\n\\t\\tif ( this.parent.is( 'text' ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn this.parent.getChild( this.offset - 1 ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isAtStart() {\\n\\t\\treturn this.offset === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isAtEnd() {\\n\\t\\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\\n\\n\\t\\treturn this.offset === endOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Position's root, that is the root of the position's parent element.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this.parent.root;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\\n\\t * position is not inside an editable element.\\n\\t *\\n\\t * @type {module:engine/view/editableelement~EditableElement|null}\\n\\t */\\n\\tget editableElement() {\\n\\t\\tlet editable = this.parent;\\n\\n\\t\\twhile ( !( editable instanceof EditableElement ) ) {\\n\\t\\t\\tif ( editable.parent ) {\\n\\t\\t\\t\\teditable = editable.parent;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn editable;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a new instance of Position with offset incremented by `shift` value.\\n\\t *\\n\\t * @param {Number} shift How position offset should get changed. Accepts negative values.\\n\\t * @returns {module:engine/view/position~Position} Shifted position.\\n\\t */\\n\\tgetShiftedBy( shift ) {\\n\\t\\tconst shifted = Position.createFromPosition( this );\\n\\n\\t\\tconst offset = shifted.offset + shift;\\n\\t\\tshifted.offset = offset < 0 ? 0 : offset;\\n\\n\\t\\treturn shifted;\\n\\t}\\n\\n\\t/**\\n\\t * Gets the farthest position which matches the callback using\\n\\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\\n\\t * \\t\\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\\n\\t * \\t\\tgetLastMatchingPosition( value => false ); // Do not move the position.\\n\\t *\\n\\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\\n\\t * return `true` if the value should be skipped or `false` if not.\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\\n\\t *\\n\\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\\n\\t */\\n\\tgetLastMatchingPosition( skip, options = {} ) {\\n\\t\\toptions.startPosition = this;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\t\\ttreeWalker.skip( skip );\\n\\n\\t\\treturn treeWalker.position;\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\\n\\t *\\n\\t * @returns {Array} Array with ancestors.\\n\\t */\\n\\tgetAncestors() {\\n\\t\\tif ( this.parent.is( 'documentFragment' ) ) {\\n\\t\\t\\treturn [ this.parent ];\\n\\t\\t} else {\\n\\t\\t\\treturn this.parent.getAncestors( { includeSelf: true } );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of both positions.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} position\\n\\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor( position ) {\\n\\t\\tconst ancestorsA = this.getAncestors();\\n\\t\\tconst ancestorsB = position.getAncestors();\\n\\n\\t\\tlet i = 0;\\n\\n\\t\\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\treturn i === 0 ? null : ancestorsA[ i - 1 ];\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position equals given position.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} True if positions are same.\\n\\t */\\n\\tisEqual( otherPosition ) {\\n\\t\\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\\n\\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\\n\\t * method will still return `false`.\\n\\t *\\n\\t * @see module:engine/view/position~Position#isAfter\\n\\t * @see module:engine/view/position~Position#compareWith\\n\\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} Returns `true` if this position is before given position.\\n\\t */\\n\\tisBefore( otherPosition ) {\\n\\t\\treturn this.compareWith( otherPosition ) == 'before';\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\\n\\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\\n\\t * method will still return `false`.\\n\\t *\\n\\t * @see module:engine/view/position~Position#isBefore\\n\\t * @see module:engine/view/position~Position#compareWith\\n\\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} Returns `true` if this position is after given position.\\n\\t */\\n\\tisAfter( otherPosition ) {\\n\\t\\treturn this.compareWith( otherPosition ) == 'after';\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\\n\\t * different when they are located in separate roots.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\\n\\t * @returns {module:engine/view/position~PositionRelation}\\n\\t */\\n\\tcompareWith( otherPosition ) {\\n\\t\\tif ( this.isEqual( otherPosition ) ) {\\n\\t\\t\\treturn 'same';\\n\\t\\t}\\n\\n\\t\\t// If positions have same parent.\\n\\t\\tif ( this.parent === otherPosition.parent ) {\\n\\t\\t\\treturn this.offset - otherPosition.offset < 0 ? 'before' : 'after';\\n\\t\\t}\\n\\n\\t\\t// Get path from root to position's parent element.\\n\\t\\tconst path = this.getAncestors();\\n\\t\\tconst otherPath = otherPosition.getAncestors();\\n\\n\\t\\t// Compare both path arrays to find common ancestor.\\n\\t\\tconst result = compareArrays( path, otherPath );\\n\\n\\t\\tlet commonAncestorIndex;\\n\\n\\t\\tswitch ( result ) {\\n\\t\\t\\tcase 0:\\n\\t\\t\\t\\t// No common ancestors found.\\n\\t\\t\\t\\treturn 'different';\\n\\n\\t\\t\\tcase 'prefix':\\n\\t\\t\\t\\tcommonAncestorIndex = path.length - 1;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'extension':\\n\\t\\t\\t\\tcommonAncestorIndex = otherPath.length - 1;\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tcommonAncestorIndex = result - 1;\\n\\t\\t}\\n\\n\\t\\t// Common ancestor of two positions.\\n\\t\\tconst commonAncestor = path[ commonAncestorIndex ];\\n\\t\\tconst nextAncestor1 = path[ commonAncestorIndex + 1 ];\\n\\t\\tconst nextAncestor2 = otherPath[ commonAncestorIndex + 1 ];\\n\\n\\t\\t// Check if common ancestor is not one of the parents.\\n\\t\\tif ( commonAncestor === this.parent ) {\\n\\t\\t\\tconst index = this.offset - nextAncestor2.index;\\n\\n\\t\\t\\treturn index <= 0 ? 'before' : 'after';\\n\\t\\t} else if ( commonAncestor === otherPosition.parent ) {\\n\\t\\t\\tconst index = nextAncestor1.index - otherPosition.offset;\\n\\n\\t\\t\\treturn index < 0 ? 'before' : 'after';\\n\\t\\t}\\n\\n\\t\\tconst index = nextAncestor1.index - nextAncestor2.index;\\n\\n\\t\\t// Compare indexes of next ancestors inside common one.\\n\\t\\treturn index < 0 ? 'before' : 'after';\\n\\t}\\n\\n\\t/**\\n\\t * Creates position at the given location. The location can be specified as:\\n\\t *\\n\\t * * a {@link module:engine/view/position~Position position},\\n\\t * * parent element and offset (offset defaults to `0`),\\n\\t * * parent element and `'end'` (sets position at the end of that element),\\n\\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\\n\\t *\\n\\t * This method is a shortcut to other constructors such as:\\n\\t *\\n\\t * * {@link module:engine/view/position~Position.createBefore},\\n\\t * * {@link module:engine/view/position~Position.createAfter},\\n\\t * * {@link module:engine/view/position~Position.createFromPosition}.\\n\\t *\\n\\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/view/item~Item view item}.\\n\\t */\\n\\tstatic createAt( itemOrPosition, offset ) {\\n\\t\\tif ( itemOrPosition instanceof Position ) {\\n\\t\\t\\treturn this.createFromPosition( itemOrPosition );\\n\\t\\t} else {\\n\\t\\t\\tconst node = itemOrPosition;\\n\\n\\t\\t\\tif ( offset == 'end' ) {\\n\\t\\t\\t\\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\\n\\t\\t\\t} else if ( offset == 'before' ) {\\n\\t\\t\\t\\treturn this.createBefore( node );\\n\\t\\t\\t} else if ( offset == 'after' ) {\\n\\t\\t\\t\\treturn this.createAfter( node );\\n\\t\\t\\t} else if ( !offset ) {\\n\\t\\t\\t\\toffset = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new Position( node, offset );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position after given view item.\\n\\t *\\n\\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\\n\\t * @returns {module:engine/view/position~Position}\\n\\t */\\n\\tstatic createAfter( item ) {\\n\\t\\t// TextProxy is not a instance of Node so we need do handle it in specific way.\\n\\t\\tif ( item.is( 'textProxy' ) ) {\\n\\t\\t\\treturn new Position( item.textNode, item.offsetInText + item.data.length );\\n\\t\\t}\\n\\n\\t\\tif ( !item.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * You can not make a position after a root.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-position-after-root\\n\\t\\t\\t * @param {module:engine/view/node~Node} root\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', { root: item } );\\n\\t\\t}\\n\\n\\t\\treturn new Position( item.parent, item.index + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position before given view item.\\n\\t *\\n\\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\\n\\t * @returns {module:engine/view/position~Position}\\n\\t */\\n\\tstatic createBefore( item ) {\\n\\t\\t// TextProxy is not a instance of Node so we need do handle it in specific way.\\n\\t\\tif ( item.is( 'textProxy' ) ) {\\n\\t\\t\\treturn new Position( item.textNode, item.offsetInText );\\n\\t\\t}\\n\\n\\t\\tif ( !item.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * You cannot make a position before a root.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-position-before-root\\n\\t\\t\\t * @param {module:engine/view/node~Node} root\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', { root: item } );\\n\\t\\t}\\n\\n\\t\\treturn new Position( item.parent, item.index );\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns a new instance of `Position`, which is equal to the passed position.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} position Position to be cloned.\\n\\t * @returns {module:engine/view/position~Position}\\n\\t */\\n\\tstatic createFromPosition( position ) {\\n\\t\\treturn new this( position.parent, position.offset );\\n\\t}\\n}\\n\\n/**\\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\\n * If positions are in different roots `'different'` flag is returned.\\n *\\n * @typedef {String} module:engine/view/position~PositionRelation\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/range\\n */\\n\\nimport Position from './position';\\nimport TreeWalker from './treewalker';\\n\\n/**\\n * Tree view range.\\n */\\nexport default class Range {\\n\\t/**\\n\\t * Creates a range spanning from `start` position to `end` position.\\n\\t *\\n\\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} start Start position.\\n\\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\\n\\t */\\n\\tconstructor( start, end = null ) {\\n\\t\\t/**\\n\\t\\t * Start position.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/position~Position}\\n\\t\\t */\\n\\t\\tthis.start = Position.createFromPosition( start );\\n\\n\\t\\t/**\\n\\t\\t * End position.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/position~Position}\\n\\t\\t */\\n\\t\\tthis.end = end ? Position.createFromPosition( end ) : Position.createFromPosition( start );\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\\n\\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\\n\\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\\n\\t *\\n\\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\\n\\t * `ignoreElementEnd` option\\n\\t * set to `true`.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\\n\\t */\\n\\t* [ Symbol.iterator ]() {\\n\\t\\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether the range is collapsed, that is it start and end positions are equal.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isCollapsed() {\\n\\t\\treturn this.start.isEqual( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\\n\\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isFlat() {\\n\\t\\treturn this.start.parent === this.end.parent;\\n\\t}\\n\\n\\t/**\\n\\t * Range root element.\\n\\t *\\n\\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this.start.root;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\\n\\t * and at the end).\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\\n\\t * \\t\\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\\n\\t *\\n\\t * Note that in the sample above:\\n\\t *  - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\\n\\t *  - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\\n\\t *  - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\\n\\t *\\n\\t * @returns {module:engine/view/range~Range} Enlarged range.\\n\\t */\\n\\tgetEnlarged() {\\n\\t\\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\\n\\t\\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\\n\\n\\t\\t// Fix positions, in case if they are in Text node.\\n\\t\\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\\n\\t\\t\\tstart = Position.createBefore( start.parent );\\n\\t\\t}\\n\\n\\t\\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\\n\\t\\t\\tend = Position.createAfter( end.parent );\\n\\t\\t}\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\\n\\t * and at the end).\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\\n\\t * \\t\\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\\n\\t *\\n\\t * Note that in the sample above:\\n\\t *  - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\\n\\t *  - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\\n\\t *  - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\\n\\t *\\n\\t * @returns {module:engine/view/range~Range} Shrink range.\\n\\t */\\n\\tgetTrimmed() {\\n\\t\\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\\n\\n\\t\\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\\n\\t\\t\\treturn new Range( start, start );\\n\\t\\t}\\n\\n\\t\\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\\n\\t\\tconst nodeAfterStart = start.nodeAfter;\\n\\t\\tconst nodeBeforeEnd = end.nodeBefore;\\n\\n\\t\\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\\n\\t\\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\\n\\t\\t\\tstart = new Position( nodeAfterStart, 0 );\\n\\t\\t}\\n\\n\\t\\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\\n\\t\\t\\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\\n\\t\\t}\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n\\n\\t/**\\n\\t * Two ranges are equal if their start and end positions are equal.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\\n\\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\\n\\t */\\n\\tisEqual( otherRange ) {\\n\\t\\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} position Position to check.\\n\\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\\n\\t * `false` otherwise.\\n\\t */\\n\\tcontainsPosition( position ) {\\n\\t\\treturn position.isAfter( this.start ) && position.isBefore( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} otherRange Range to check.\\n\\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\\n\\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\\n\\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\\n\\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\\n\\t * otherwise.\\n\\t */\\n\\tcontainsRange( otherRange, loose = false ) {\\n\\t\\tif ( otherRange.isCollapsed ) {\\n\\t\\t\\tloose = false;\\n\\t\\t}\\n\\n\\t\\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\\n\\t\\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\\n\\n\\t\\treturn containsStart && containsEnd;\\n\\t}\\n\\n\\t/**\\n\\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\\n\\t * {@link module:engine/view/range~Range range}.\\n\\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tlet foo = new Text( 'foo' );\\n\\t *\\t\\tlet img = new ContainerElement( 'img' );\\n\\t *\\t\\tlet bar = new Text( 'bar' );\\n\\t *\\t\\tlet p = new ContainerElement( 'p', null, [ foo, img, bar ] );\\n\\t *\\n\\t *\\t\\tlet range = new Range( new Position( foo, 2 ), new Position( bar, 1 ); // \\\"o\\\", img, \\\"b\\\" are in range.\\n\\t *\\t\\tlet otherRange = new Range( new Position( foo, 1 ), new Position( bar, 2 ); \\\"oo\\\", img, \\\"ba\\\" are in range.\\n\\t *\\t\\tlet transformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has no ranges because `otherRange` contains `range`\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( foo, 1 ), new Position( p, 2 ); // \\\"oo\\\", img are in range.\\n\\t *\\t\\ttransformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( p, 1 ), new Position( p, 2 ) ); // img is in range.\\n\\t *\\t\\ttransformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\\n\\t *\\n\\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\\n\\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\\n\\t */\\n\\tgetDifference( otherRange ) {\\n\\t\\tconst ranges = [];\\n\\n\\t\\tif ( this.isIntersecting( otherRange ) ) {\\n\\t\\t\\t// Ranges intersect.\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.start ) ) {\\n\\t\\t\\t\\t// Given range start is inside this range. This means that we have to\\n\\t\\t\\t\\t// add shrunken range - from the start to the middle of this range.\\n\\t\\t\\t\\tranges.push( new Range( this.start, otherRange.start ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.end ) ) {\\n\\t\\t\\t\\t// Given range end is inside this range. This means that we have to\\n\\t\\t\\t\\t// add shrunken range - from the middle of this range to the end.\\n\\t\\t\\t\\tranges.push( new Range( otherRange.end, this.end ) );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Ranges do not intersect, return the original range.\\n\\t\\t\\tranges.push( Range.createFromRange( this ) );\\n\\t\\t}\\n\\n\\t\\treturn ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\\n\\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tlet foo = new Text( 'foo' );\\n\\t *\\t\\tlet img = new ContainerElement( 'img' );\\n\\t *\\t\\tlet bar = new Text( 'bar' );\\n\\t *\\t\\tlet p = new ContainerElement( 'p', null, [ foo, img, bar ] );\\n\\t *\\n\\t *\\t\\tlet range = new Range( new Position( foo, 2 ), new Position( bar, 1 ); // \\\"o\\\", img, \\\"b\\\" are in range.\\n\\t *\\t\\tlet otherRange = new Range( new Position( foo, 1 ), new Position( p, 2 ); // \\\"oo\\\", img are in range.\\n\\t *\\t\\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( bar, 1 ), new Position( bar, 3 ); \\\"ar\\\" is in range.\\n\\t *\\t\\ttransformed = range.getIntersection( otherRange ); // null - no common part.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\\n\\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\\n\\t */\\n\\tgetIntersection( otherRange ) {\\n\\t\\tif ( this.isIntersecting( otherRange ) ) {\\n\\t\\t\\t// Ranges intersect, so a common range will be returned.\\n\\t\\t\\t// At most, it will be same as this range.\\n\\t\\t\\tlet commonRangeStart = this.start;\\n\\t\\t\\tlet commonRangeEnd = this.end;\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.start ) ) {\\n\\t\\t\\t\\t// Given range start is inside this range. This means thaNt we have to\\n\\t\\t\\t\\t// shrink common range to the given range start.\\n\\t\\t\\t\\tcommonRangeStart = otherRange.start;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.end ) ) {\\n\\t\\t\\t\\t// Given range end is inside this range. This means that we have to\\n\\t\\t\\t\\t// shrink common range to the given range end.\\n\\t\\t\\t\\tcommonRangeEnd = otherRange.end;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new Range( commonRangeStart, commonRangeEnd );\\n\\t\\t}\\n\\n\\t\\t// Ranges do not intersect, so they do not have common part.\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\\n\\t *\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\\n\\t * @param {module:engine/view/position~Position} [options.startPosition]\\n\\t * @param {Boolean} [options.singleCharacters=false]\\n\\t * @param {Boolean} [options.shallow=false]\\n\\t * @param {Boolean} [options.ignoreElementEnd=false]\\n\\t */\\n\\tgetWalker( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\n\\t\\treturn new TreeWalker( options );\\n\\t}\\n\\n\\t/**\\n\\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of range's both ends (in which the entire range is contained).\\n\\t *\\n\\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor() {\\n\\t\\treturn this.start.getCommonAncestor( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\\n\\t * them.\\n\\t *\\n\\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\\n\\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\\n\\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\\n\\t *\\n\\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\\n\\t * a full list of available options.\\n\\t *\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\\n\\t * @returns {Iterable.<module:engine/view/item~Item>}\\n\\t */\\n\\t* getItems( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\t\\toptions.ignoreElementEnd = true;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\n\\t\\tfor ( const value of treeWalker ) {\\n\\t\\t\\tyield value.item;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\\n\\t * contained in this range.\\n\\t *\\n\\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\\n\\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\\n\\t *\\n\\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\\n\\t * a full list of available options.\\n\\t *\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\\n\\t * @returns {Iterable.<module:engine/view/position~Position>}\\n\\t */\\n\\t* getPositions( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\n\\t\\tyield treeWalker.position;\\n\\n\\t\\tfor ( const value of treeWalker ) {\\n\\t\\t\\tyield value.nextPosition;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks and returns whether this range intersects with given range.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\\n\\t * @returns {Boolean} True if ranges intersect.\\n\\t */\\n\\tisIntersecting( otherRange ) {\\n\\t\\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range from given parents and offsets.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} startElement Start position parent element.\\n\\t * @param {Number} startOffset Start position offset.\\n\\t * @param {module:engine/view/element~Element} endElement End position parent element.\\n\\t * @param {Number} endOffset End position offset.\\n\\t * @returns {module:engine/view/range~Range} Created range.\\n\\t */\\n\\tstatic createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\\n\\t\\treturn new this(\\n\\t\\t\\tnew Position( startElement, startOffset ),\\n\\t\\t\\tnew Position( endElement, endOffset )\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns a new instance of Range which is equal to passed range.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} range Range to clone.\\n\\t * @returns {module:engine/view/range~Range}\\n\\t */\\n\\tstatic createFromRange( range ) {\\n\\t\\treturn new this( range.start, range.end );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\\n\\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} position Beginning of the range.\\n\\t * @param {Number} shift How long the range should be.\\n\\t * @returns {module:engine/view/range~Range}\\n\\t */\\n\\tstatic createFromPositionAndShift( position, shift ) {\\n\\t\\tconst start = position;\\n\\t\\tconst end = position.getShiftedBy( shift );\\n\\n\\t\\treturn shift > 0 ? new this( start, end ) : new this( end, start );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\\n\\t * that element and ends after the last child of that element.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\\n\\t * @returns {module:engine/view/range~Range}\\n\\t */\\n\\tstatic createIn( element ) {\\n\\t\\treturn this.createFromParentsAndOffsets( element, 0, element, element.childCount );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\\n\\t *\\n\\t * @param {module:engine/view/item~Item} item\\n\\t * @returns {module:engine/view/range~Range}\\n\\t */\\n\\tstatic createOn( item ) {\\n\\t\\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\\n\\n\\t\\treturn this.createFromPositionAndShift( Position.createBefore( item ), size );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a collapsed range at given {@link module:engine/view/position~Position position}\\n\\t * or on the given {@link module:engine/view/item~Item item}.\\n\\t *\\n\\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/view/item~Item view item}.\\n\\t */\\n\\tstatic createCollapsedAt( itemOrPosition, offset ) {\\n\\t\\tconst start = Position.createAt( itemOrPosition, offset );\\n\\t\\tconst end = Position.createFromPosition( start );\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n}\\n\\n// Function used by getEnlarged and getTrimmed methods.\\nfunction enlargeTrimSkip( value ) {\\n\\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/count\\n */\\n\\n/**\\n * Returns the number of items return by the iterator.\\n *\\n *\\t\\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\\n *\\n * @param {Iterable.<*>} iterator Any iterator.\\n * @returns {Number} Number of items returned by that iterator.\\n */\\nexport default function count( iterator ) {\\n\\tlet count = 0;\\n\\n\\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\\n\\t\\tcount++;\\n\\t}\\n\\n\\treturn count;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/selection\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport Range from './range';\\nimport Position from './position';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport Node from './node';\\nimport Element from './element';\\nimport count from '@ckeditor/ckeditor5-utils/src/count';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\n\\n/**\\n * Class representing selection in tree view.\\n *\\n * Selection can consist of {@link module:engine/view/range~Range ranges} that can be set using\\n * {@link module:engine/view/selection~Selection#_setTo} method.\\n * That method create copies of provided ranges and store those copies internally. Further modifications to passed\\n * ranges will not change selection's state.\\n * Selection's ranges can be obtained via {@link module:engine/view/selection~Selection#getRanges getRanges},\\n * {@link module:engine/view/selection~Selection#getFirstRange getFirstRange}\\n * and {@link module:engine/view/selection~Selection#getLastRange getLastRange}\\n * methods, which return copies of ranges stored inside selection. Modifications made on these copies will not change\\n * selection's state. Similar situation occurs when getting {@link module:engine/view/selection~Selection#anchor anchor},\\n * {@link module:engine/view/selection~Selection#focus focus}, {@link module:engine/view/selection~Selection#getFirstPosition first} and\\n * {@link module:engine/view/selection~Selection#getLastPosition last} positions - all will return copies of requested positions.\\n */\\nexport default class Selection {\\n\\t/**\\n\\t * Creates new selection instance.\\n\\t *\\n\\t * \\t\\t// Creates empty selection without ranges.\\n\\t *\\t\\tconst selection = new Selection();\\n\\t *\\n\\t *\\t\\t// Creates selection at the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\tconst selection = new Selection( range );\\n\\t *\\n\\t *\\t\\t// Creates selection at the given ranges\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\tconst selection = new Selection( ranges );\\n\\t *\\n\\t *\\t\\t// Creates selection from the other selection.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\tconst selection = new Selection( otherSelection );\\n\\t *\\n\\t * \\t\\t// Creates selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\tconst selection = new Selection( position );\\n\\t *\\n\\t *\\t\\t// Creates collapsed selection at the position of given item and offset.\\n\\t *\\t\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\t *\\t\\tconst selection = new Selection( paragraph, offset );\\n\\t *\\n\\t *\\t\\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\\n\\t *\\t\\t// first child of that element and ends after the last child of that element.\\n\\t *\\t\\tconst selection = new Selection( paragraph, 'in' );\\n\\t *\\n\\t *\\t\\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\\n\\t *\\t\\t// just after the item.\\n\\t *\\t\\tconst selection = new Selection( paragraph, 'on' );\\n\\t *\\n\\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\\n\\t *\\n\\t *\\t\\t// Creates backward selection.\\n\\t *\\t\\tconst selection = new Selection( range, { backward: true } );\\n\\t *\\n\\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\\n\\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\\n\\t * represented in other way, for example by applying proper CSS class.\\n\\t *\\n\\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\\n\\t * (and be  properly handled by screen readers).\\n\\t *\\n\\t *\\t\\t// Creates fake selection with label.\\n\\t *\\t\\tconst selection = new Selection( range, { fake: true, label: 'foo' } );\\n\\t *\\n\\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\\n\\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} [selectable=null]\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\\n\\t * @param {String} [options.label] Label for the fake selection.\\n\\t */\\n\\tconstructor( selectable = null, placeOrOffset, options ) {\\n\\t\\t/**\\n\\t\\t * Stores all ranges that are selected.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Array.<module:engine/view/range~Range>}\\n\\t\\t */\\n\\t\\tthis._ranges = [];\\n\\n\\t\\t/**\\n\\t\\t * Specifies whether the last added range was added as a backward or forward range.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis._lastRangeBackward = false;\\n\\n\\t\\t/**\\n\\t\\t * Specifies whether selection instance is fake.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis._isFake = false;\\n\\n\\t\\t/**\\n\\t\\t * Fake selection's label.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis._fakeSelectionLabel = '';\\n\\n\\t\\tthis._setTo( selectable, placeOrOffset, options );\\n\\t}\\n\\n\\t/**\\n\\t * Returns true if selection instance is marked as `fake`.\\n\\t *\\n\\t * @see #_setTo\\n\\t * @returns {Boolean}\\n\\t */\\n\\tget isFake() {\\n\\t\\treturn this._isFake;\\n\\t}\\n\\n\\t/**\\n\\t * Returns fake selection label.\\n\\t *\\n\\t * @see #_setTo\\n\\t * @returns {String}\\n\\t */\\n\\tget fakeSelectionLabel() {\\n\\t\\treturn this._fakeSelectionLabel;\\n\\t}\\n\\n\\t/**\\n\\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\\n\\t * {@link #focus focus} they define the direction of selection, which is important\\n\\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\\n\\t * It may be a bit unintuitive when there are multiple ranges in selection.\\n\\t *\\n\\t * @see #focus\\n\\t * @type {module:engine/view/position~Position}\\n\\t */\\n\\tget anchor() {\\n\\t\\tif ( !this._ranges.length ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tconst range = this._ranges[ this._ranges.length - 1 ];\\n\\t\\tconst anchor = this._lastRangeBackward ? range.end : range.start;\\n\\n\\t\\treturn Position.createFromPosition( anchor );\\n\\t}\\n\\n\\t/**\\n\\t * Selection focus. Focus is a position where the selection ends.\\n\\t *\\n\\t * @see #anchor\\n\\t * @type {module:engine/view/position~Position}\\n\\t */\\n\\tget focus() {\\n\\t\\tif ( !this._ranges.length ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tconst range = this._ranges[ this._ranges.length - 1 ];\\n\\t\\tconst focus = this._lastRangeBackward ? range.start : range.end;\\n\\n\\t\\treturn Position.createFromPosition( focus );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\\n\\t * collapsed.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isCollapsed() {\\n\\t\\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\\n\\t}\\n\\n\\t/**\\n\\t * Returns number of ranges in selection.\\n\\t *\\n\\t * @type {Number}\\n\\t */\\n\\tget rangeCount() {\\n\\t\\treturn this._ranges.length;\\n\\t}\\n\\n\\t/**\\n\\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isBackward() {\\n\\t\\treturn !this.isCollapsed && this._lastRangeBackward;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\\n\\t * if the selection is not inside an editable element.\\n\\t *\\n\\t * @type {module:engine/view/editableelement~EditableElement|null}\\n\\t */\\n\\tget editableElement() {\\n\\t\\tif ( this.anchor ) {\\n\\t\\t\\treturn this.anchor.editableElement;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterable that contains copies of all ranges added to the selection.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/range~Range>}\\n\\t */\\n\\t* getRanges() {\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tyield Range.createFromRange( range );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns copy of the first range in the selection. First range is the one which\\n\\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\\n\\t * position of all other ranges (not to confuse with the first range added to the selection).\\n\\t * Returns `null` if no ranges are added to selection.\\n\\t *\\n\\t * @returns {module:engine/view/range~Range|null}\\n\\t */\\n\\tgetFirstRange() {\\n\\t\\tlet first = null;\\n\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tif ( !first || range.start.isBefore( first.start ) ) {\\n\\t\\t\\t\\tfirst = range;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn first ? Range.createFromRange( first ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\\n\\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\\n\\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\\n\\t *\\n\\t * @returns {module:engine/view/range~Range|null}\\n\\t */\\n\\tgetLastRange() {\\n\\t\\tlet last = null;\\n\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tif ( !last || range.end.isAfter( last.end ) ) {\\n\\t\\t\\t\\tlast = range;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn last ? Range.createFromRange( last ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns copy of the first position in the selection. First position is the position that\\n\\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\\n\\t * Returns `null` if no ranges are added to selection.\\n\\t *\\n\\t * @returns {module:engine/view/position~Position|null}\\n\\t */\\n\\tgetFirstPosition() {\\n\\t\\tconst firstRange = this.getFirstRange();\\n\\n\\t\\treturn firstRange ? Position.createFromPosition( firstRange.start ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns copy of the last position in the selection. Last position is the position that\\n\\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\\n\\t * Returns `null` if no ranges are added to selection.\\n\\t *\\n\\t * @returns {module:engine/view/position~Position|null}\\n\\t */\\n\\tgetLastPosition() {\\n\\t\\tconst lastRange = this.getLastRange();\\n\\n\\t\\treturn lastRange ? Position.createFromPosition( lastRange.end ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\\n\\t * same number of ranges and all ranges from one selection equal to a range from other selection.\\n\\t *\\n\\t * @param {module:engine/view/selection~Selection} otherSelection Selection to compare with.\\n\\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\\n\\t */\\n\\tisEqual( otherSelection ) {\\n\\t\\tif ( this.isFake != otherSelection.isFake ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( this.rangeCount != otherSelection.rangeCount ) {\\n\\t\\t\\treturn false;\\n\\t\\t} else if ( this.rangeCount === 0 ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tfor ( const thisRange of this._ranges ) {\\n\\t\\t\\tlet found = false;\\n\\n\\t\\t\\tfor ( const otherRange of otherSelection._ranges ) {\\n\\t\\t\\t\\tif ( thisRange.isEqual( otherRange ) ) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( !found ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\\n\\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\\n\\t * equal to any trimmed range from other selection.\\n\\t *\\n\\t * @param {module:engine/view/selection~Selection} otherSelection Selection to compare with.\\n\\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\\n\\t */\\n\\tisSimilar( otherSelection ) {\\n\\t\\tif ( this.isBackward != otherSelection.isBackward ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst numOfRangesA = count( this.getRanges() );\\n\\t\\tconst numOfRangesB = count( otherSelection.getRanges() );\\n\\n\\t\\t// If selections have different number of ranges, they cannot be similar.\\n\\t\\tif ( numOfRangesA != numOfRangesB ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// If both selections have no ranges, they are similar.\\n\\t\\tif ( numOfRangesA == 0 ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Check if each range in one selection has a similar range in other selection.\\n\\t\\tfor ( let rangeA of this.getRanges() ) {\\n\\t\\t\\trangeA = rangeA.getTrimmed();\\n\\n\\t\\t\\tlet found = false;\\n\\n\\t\\t\\tfor ( let rangeB of otherSelection.getRanges() ) {\\n\\t\\t\\t\\trangeB = rangeB.getTrimmed();\\n\\n\\t\\t\\t\\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\\n\\t\\t\\tif ( !found ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// There were no ranges that weren't matched. Selections are similar.\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\\n\\t * one range in the selection, and that range contains exactly one element.\\n\\t * Returns `null` if there is no selected element.\\n\\t *\\n\\t * @returns {module:engine/view/element~Element|null}\\n\\t */\\n\\tgetSelectedElement() {\\n\\t\\tif ( this.rangeCount !== 1 ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst range = this.getFirstRange();\\n\\t\\tconst nodeAfterStart = range.start.nodeAfter;\\n\\t\\tconst nodeBeforeEnd = range.end.nodeBefore;\\n\\n\\t\\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\\n\\t}\\n\\n\\t/**\\n\\t * Sets this selection's ranges and direction to the specified location based on the given\\n\\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\\n\\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\\n\\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\\n\\t *\\n\\t *\\t\\t// Sets selection to the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\tselection._setTo( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to given ranges.\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\tselection._setTo( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to the other selection.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\tselection._setTo( otherSelection );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\tselection._setTo( position );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the position of given item and offset.\\n\\t *\\t\\tselection._setTo( paragraph, offset );\\n\\t *\\n\\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\\n\\t * that element and ends after the last child of that element.\\n\\t *\\n\\t *\\t\\tselection._setTo( paragraph, 'in' );\\n\\t *\\n\\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\\n\\t *\\n\\t *\\t\\tselection._setTo( paragraph, 'on' );\\n\\t *\\n\\t * \\t\\t// Clears selection. Removes all ranges.\\n\\t *\\t\\tselection._setTo( null );\\n\\t *\\n\\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\\n\\t *\\n\\t *\\t\\t// Sets selection as backward.\\n\\t *\\t\\tselection._setTo( range, { backward: true } );\\n\\t *\\n\\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\\n\\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\\n\\t * represented in other way, for example by applying proper CSS class.\\n\\t *\\n\\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\\n\\t * (and be  properly handled by screen readers).\\n\\t *\\n\\t *\\t\\t// Creates fake selection with label.\\n\\t *\\t\\tselection._setTo( range, { fake: true, label: 'foo' } );\\n\\t *\\n\\t * @protected\\n\\t * @fires change\\n\\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\\n\\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\\n\\t * @param {String} [options.label] Label for the fake selection.\\n\\t */\\n\\t_setTo( selectable, placeOrOffset, options ) {\\n\\t\\tif ( selectable === null ) {\\n\\t\\t\\tthis._setRanges( [] );\\n\\t\\t\\tthis._setFakeOptions( placeOrOffset );\\n\\t\\t} else if ( selectable instanceof Selection ) {\\n\\t\\t\\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\\n\\t\\t\\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\\n\\t\\t} else if ( selectable instanceof Range ) {\\n\\t\\t\\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\\n\\t\\t\\tthis._setFakeOptions( placeOrOffset );\\n\\t\\t} else if ( selectable instanceof Position ) {\\n\\t\\t\\tthis._setRanges( [ new Range( selectable ) ] );\\n\\t\\t\\tthis._setFakeOptions( placeOrOffset );\\n\\t\\t} else if ( selectable instanceof Node ) {\\n\\t\\t\\tconst backward = !!options && !!options.backward;\\n\\t\\t\\tlet range;\\n\\n\\t\\t\\tif ( placeOrOffset === undefined ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * selection.setTo requires the second parameter when the first parameter is a node.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error view-selection-setTo-required-second-parameter\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'view-selection-setTo-required-second-parameter: ' +\\n\\t\\t\\t\\t\\t'selection.setTo requires the second parameter when the first parameter is a node.'\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else if ( placeOrOffset == 'in' ) {\\n\\t\\t\\t\\trange = Range.createIn( selectable );\\n\\t\\t\\t} else if ( placeOrOffset == 'on' ) {\\n\\t\\t\\t\\trange = Range.createOn( selectable );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trange = Range.createCollapsedAt( selectable, placeOrOffset );\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._setRanges( [ range ], backward );\\n\\t\\t\\tthis._setFakeOptions( options );\\n\\t\\t} else if ( isIterable( selectable ) ) {\\n\\t\\t\\t// We assume that the selectable is an iterable of ranges.\\n\\t\\t\\t// Array.from() is used to prevent setting ranges to the old iterable\\n\\t\\t\\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\\n\\t\\t\\tthis._setFakeOptions( placeOrOffset );\\n\\t\\t} else {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot set selection to given place.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-selection-setTo-not-selectable\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.' );\\n\\t\\t}\\n\\n\\t\\tthis.fire( 'change' );\\n\\t}\\n\\n\\t/**\\n\\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\\n\\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\\n\\t * Accepts a flag describing in which way the selection is made.\\n\\t *\\n\\t * @private\\n\\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\\n\\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\\n\\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\\n\\t */\\n\\t_setRanges( newRanges, isLastBackward = false ) {\\n\\t\\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\\n\\t\\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\\n\\t\\tnewRanges = Array.from( newRanges );\\n\\n\\t\\tthis._ranges = [];\\n\\n\\t\\tfor ( const range of newRanges ) {\\n\\t\\t\\tthis._addRange( range );\\n\\t\\t}\\n\\n\\t\\tthis._lastRangeBackward = !!isLastBackward;\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link #focus} to the specified location.\\n\\t *\\n\\t * The location can be specified in the same form as {@link module:engine/view/position~Position.createAt} parameters.\\n\\t *\\n\\t * @protected\\n\\t * @fires change\\n\\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/view/item~Item view item}.\\n\\t */\\n\\t_setFocus( itemOrPosition, offset ) {\\n\\t\\tif ( this.anchor === null ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot set selection focus if there are no ranges in selection.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-selection-setFocus-no-ranges\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst newFocus = Position.createAt( itemOrPosition, offset );\\n\\n\\t\\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst anchor = this.anchor;\\n\\n\\t\\tthis._ranges.pop();\\n\\n\\t\\tif ( newFocus.compareWith( anchor ) == 'before' ) {\\n\\t\\t\\tthis._addRange( new Range( newFocus, anchor ), true );\\n\\t\\t} else {\\n\\t\\t\\tthis._addRange( new Range( anchor, newFocus ) );\\n\\t\\t}\\n\\n\\t\\tthis.fire( 'change' );\\n\\t}\\n\\n\\t/**\\n\\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\\n\\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\\n\\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\\n\\t *\\n\\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\\n\\t * properly handled by screen readers).\\n\\t *\\n\\t * @private\\n\\t * @param {Object} [options] Options.\\n\\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\\n\\t * @param {String} [options.label=''] Fake selection label.\\n\\t */\\n\\t_setFakeOptions( options = {} ) {\\n\\t\\tthis._isFake = !!options.fake;\\n\\t\\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\\n\\t}\\n\\n\\t/**\\n\\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\\n\\t * selection instance and you can safely operate on it.\\n\\t *\\n\\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\\n\\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\\n\\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\\n\\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\\n\\t * with ranges already stored in Selection instance.\\n\\t *\\n\\t * @private\\n\\t * @fires change\\n\\t * @param {module:engine/view/range~Range} range\\n\\t * @param {Boolean} [isBackward]\\n\\t */\\n\\t_addRange( range, isBackward = false ) {\\n\\t\\tif ( !( range instanceof Range ) ) {\\n\\t\\t\\tthrow new CKEditorError( 'view-selection-invalid-range: Invalid Range.' );\\n\\t\\t}\\n\\n\\t\\tthis._pushRange( range );\\n\\t\\tthis._lastRangeBackward = !!isBackward;\\n\\t}\\n\\n\\t/**\\n\\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\\n\\t * with ranges already stored in selection instance.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/range~Range} range\\n\\t */\\n\\t_pushRange( range ) {\\n\\t\\tfor ( const storedRange of this._ranges ) {\\n\\t\\t\\tif ( range.isIntersecting( storedRange ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Trying to add a range that intersects with another range from selection.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error view-selection-range-intersects\\n\\t\\t\\t\\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\\n\\t\\t\\t\\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\\n\\t\\t\\t\\t\\t{ addedRange: range, intersectingRange: storedRange }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._ranges.push( Range.createFromRange( range ) );\\n\\t}\\n}\\n\\nmix( Selection, EmitterMixin );\\n\\n/**\\n * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\\n *\\n * @event change\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/collection\\n */\\n\\nimport EmitterMixin from './emittermixin';\\nimport CKEditorError from './ckeditorerror';\\nimport uid from './uid';\\nimport mix from './mix';\\n\\n/**\\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\\n * in the collection (like in an array) or by their ids.\\n *\\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\\n *\\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\\n * configured through the constructor of the collection.\\n *\\n * @mixes module:utils/emittermixin~EmitterMixin\\n */\\nexport default class Collection {\\n\\t/**\\n\\t * Creates a new Collection instance.\\n\\t *\\n\\t * @param {Object} [options={}] The options object.\\n\\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\\n\\t */\\n\\tconstructor( options = {} ) {\\n\\t\\t/**\\n\\t\\t * The internal list of items in the collection.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Object[]}\\n\\t\\t */\\n\\t\\tthis._items = [];\\n\\n\\t\\t/**\\n\\t\\t * The internal map of items in the collection.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map}\\n\\t\\t */\\n\\t\\tthis._itemMap = new Map();\\n\\n\\t\\t/**\\n\\t\\t * The name of the property which is considered to identify an item.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis._idProperty = options.idProperty || 'id';\\n\\n\\t\\t/**\\n\\t\\t * A helper mapping external items of a bound collection ({@link #bindTo})\\n\\t\\t * and actual items of this collection. It provides information\\n\\t\\t * necessary to properly remove items bound to another collection.\\n\\t\\t *\\n\\t\\t * See {@link #_bindToInternalToExternalMap}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {WeakMap}\\n\\t\\t */\\n\\t\\tthis._bindToExternalToInternalMap = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * A helper mapping items of this collection to external items of a bound collection\\n\\t\\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\\n\\t\\t * to avoid loops in two–way bindings.\\n\\t\\t *\\n\\t\\t * See {@link #_bindToExternalToInternalMap}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {WeakMap}\\n\\t\\t */\\n\\t\\tthis._bindToInternalToExternalMap = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * Stores indexes of skipped items from bound external collection.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Array}\\n\\t\\t */\\n\\t\\tthis._skippedIndexesFromExternal = [];\\n\\n\\t\\t/**\\n\\t\\t * A collection instance this collection is bound to as a result\\n\\t\\t * of calling {@link #bindTo} method.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:utils/collection~Collection} #_bindToCollection\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * The number of items available in the collection.\\n\\t *\\n\\t * @member {Number} #length\\n\\t */\\n\\tget length() {\\n\\t\\treturn this._items.length;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the first item from the collection or null when collection is empty.\\n\\t *\\n\\t * @returns {Object|null} The first item or `null` if collection is empty.\\n\\t */\\n\\tget first() {\\n\\t\\treturn this._items[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the last item from the collection or null when collection is empty.\\n\\t *\\n\\t * @returns {Object|null} The last item or `null` if collection is empty.\\n\\t */\\n\\tget last() {\\n\\t\\treturn this._items[ this.length - 1 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Adds an item into the collection.\\n\\t *\\n\\t * If the item does not have an id, then it will be automatically generated and set on the item.\\n\\t *\\n\\t * @chainable\\n\\t * @param {Object} item\\n\\t * @param {Number} [index] The position of the item in the collection. The item\\n\\t * is pushed to the collection when `index` not specified.\\n\\t * @fires add\\n\\t */\\n\\tadd( item, index ) {\\n\\t\\tlet itemId;\\n\\t\\tconst idProperty = this._idProperty;\\n\\n\\t\\tif ( ( idProperty in item ) ) {\\n\\t\\t\\titemId = item[ idProperty ];\\n\\n\\t\\t\\tif ( typeof itemId != 'string' ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * This item's id should be a string.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error collection-add-invalid-id\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'collection-add-invalid-id' );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.get( itemId ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * This item already exists in the collection.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error collection-add-item-already-exists\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'collection-add-item-already-exists' );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\titem[ idProperty ] = itemId = uid();\\n\\t\\t}\\n\\n\\t\\t// TODO: Use ES6 default function argument.\\n\\t\\tif ( index === undefined ) {\\n\\t\\t\\tindex = this._items.length;\\n\\t\\t} else if ( index > this._items.length || index < 0 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The index number has invalid value.\\n\\t\\t\\t *\\n\\t\\t\\t * @error collection-add-item-bad-index\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'collection-add-item-invalid-index' );\\n\\t\\t}\\n\\n\\t\\tthis._items.splice( index, 0, item );\\n\\n\\t\\tthis._itemMap.set( itemId, item );\\n\\n\\t\\tthis.fire( 'add', item, index );\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Gets item by its id or index.\\n\\t *\\n\\t * @param {String|Number} idOrIndex The item id or index in the collection.\\n\\t * @returns {Object|null} The requested item or `null` if such item does not exist.\\n\\t */\\n\\tget( idOrIndex ) {\\n\\t\\tlet item;\\n\\n\\t\\tif ( typeof idOrIndex == 'string' ) {\\n\\t\\t\\titem = this._itemMap.get( idOrIndex );\\n\\t\\t} else if ( typeof idOrIndex == 'number' ) {\\n\\t\\t\\titem = this._items[ idOrIndex ];\\n\\t\\t} else {\\n\\t\\t\\t/**\\n\\t\\t\\t * Index or id must be given.\\n\\t\\t\\t *\\n\\t\\t\\t * @error collection-get-invalid-arg\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.' );\\n\\t\\t}\\n\\n\\t\\treturn item || null;\\n\\t}\\n\\n\\t/**\\n\\t * Gets index of item in the collection.\\n\\t * When item is not defined in the collection then index will be equal -1.\\n\\t *\\n\\t * @param {String|Object} idOrItem The item or its id in the collection.\\n\\t * @returns {Number} Index of given item.\\n\\t */\\n\\tgetIndex( idOrItem ) {\\n\\t\\tlet item;\\n\\n\\t\\tif ( typeof idOrItem == 'string' ) {\\n\\t\\t\\titem = this._itemMap.get( idOrItem );\\n\\t\\t} else {\\n\\t\\t\\titem = idOrItem;\\n\\t\\t}\\n\\n\\t\\treturn this._items.indexOf( item );\\n\\t}\\n\\n\\t/**\\n\\t * Removes an item from the collection.\\n\\t *\\n\\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\\n\\t * @returns {Object} The removed item.\\n\\t * @fires remove\\n\\t */\\n\\tremove( subject ) {\\n\\t\\tlet index, id, item;\\n\\t\\tlet itemDoesNotExist = false;\\n\\t\\tconst idProperty = this._idProperty;\\n\\n\\t\\tif ( typeof subject == 'string' ) {\\n\\t\\t\\tid = subject;\\n\\t\\t\\titem = this._itemMap.get( id );\\n\\t\\t\\titemDoesNotExist = !item;\\n\\n\\t\\t\\tif ( item ) {\\n\\t\\t\\t\\tindex = this._items.indexOf( item );\\n\\t\\t\\t}\\n\\t\\t} else if ( typeof subject == 'number' ) {\\n\\t\\t\\tindex = subject;\\n\\t\\t\\titem = this._items[ index ];\\n\\t\\t\\titemDoesNotExist = !item;\\n\\n\\t\\t\\tif ( item ) {\\n\\t\\t\\t\\tid = item[ idProperty ];\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\titem = subject;\\n\\t\\t\\tid = item[ idProperty ];\\n\\t\\t\\tindex = this._items.indexOf( item );\\n\\t\\t\\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\\n\\t\\t}\\n\\n\\t\\tif ( itemDoesNotExist ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Item not found.\\n\\t\\t\\t *\\n\\t\\t\\t * @error collection-remove-404\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'collection-remove-404: Item not found.' );\\n\\t\\t}\\n\\n\\t\\tthis._items.splice( index, 1 );\\n\\t\\tthis._itemMap.delete( id );\\n\\n\\t\\tconst externalItem = this._bindToInternalToExternalMap.get( item );\\n\\t\\tthis._bindToInternalToExternalMap.delete( item );\\n\\t\\tthis._bindToExternalToInternalMap.delete( externalItem );\\n\\n\\t\\tthis.fire( 'remove', item, index );\\n\\n\\t\\treturn item;\\n\\t}\\n\\n\\t/**\\n\\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\\n\\t *\\n\\t * @param {Function} callback\\n\\t * @param {Object} callback.item\\n\\t * @param {Number} callback.index\\n\\t * @params {Object} ctx Context in which the `callback` will be called.\\n\\t * @returns {Array} The result of mapping.\\n\\t */\\n\\tmap( callback, ctx ) {\\n\\t\\treturn this._items.map( callback, ctx );\\n\\t}\\n\\n\\t/**\\n\\t * Finds the first item in the collection for which the `callback` returns a true value.\\n\\t *\\n\\t * @param {Function} callback\\n\\t * @param {Object} callback.item\\n\\t * @param {Number} callback.index\\n\\t * @returns {Object} The item for which `callback` returned a true value.\\n\\t * @params {Object} ctx Context in which the `callback` will be called.\\n\\t */\\n\\tfind( callback, ctx ) {\\n\\t\\treturn this._items.find( callback, ctx );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array with items for which the `callback` returned a true value.\\n\\t *\\n\\t * @param {Function} callback\\n\\t * @param {Object} callback.item\\n\\t * @param {Number} callback.index\\n\\t * @params {Object} ctx Context in which the `callback` will be called.\\n\\t * @returns {Object[]} The array with matching items.\\n\\t */\\n\\tfilter( callback, ctx ) {\\n\\t\\treturn this._items.filter( callback, ctx );\\n\\t}\\n\\n\\t/**\\n\\t * Removes all items from the collection and destroys the binding created using\\n\\t * {@link #bindTo}.\\n\\t */\\n\\tclear() {\\n\\t\\tif ( this._bindToCollection ) {\\n\\t\\t\\tthis.stopListening( this._bindToCollection );\\n\\t\\t\\tthis._bindToCollection = null;\\n\\t\\t}\\n\\n\\t\\twhile ( this.length ) {\\n\\t\\t\\tthis.remove( 0 );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Binds and synchronizes the collection with another one.\\n\\t *\\n\\t * The binding can be a simple factory:\\n\\t *\\n\\t *\\t\\tclass FactoryClass {\\n\\t *\\t\\t\\tconstructor( data ) {\\n\\t *\\t\\t\\t\\tthis.label = data.label;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tconst source = new Collection( { idProperty: 'label' } );\\n\\t *\\t\\tconst target = new Collection();\\n\\t *\\n\\t *\\t\\ttarget.bindTo( source ).as( FactoryClass );\\n\\t *\\n\\t *\\t\\tsource.add( { label: 'foo' } );\\n\\t *\\t\\tsource.add( { label: 'bar' } );\\n\\t *\\n\\t *\\t\\tconsole.log( target.length ); // 2\\n\\t *\\t\\tconsole.log( target.get( 1 ).label ); // 'bar'\\n\\t *\\n\\t *\\t\\tsource.remove( 0 );\\n\\t *\\t\\tconsole.log( target.length ); // 1\\n\\t *\\t\\tconsole.log( target.get( 0 ).label ); // 'bar'\\n\\t *\\n\\t * or the factory driven by a custom callback:\\n\\t *\\n\\t *\\t\\tclass FooClass {\\n\\t *\\t\\t\\tconstructor( data ) {\\n\\t *\\t\\t\\t\\tthis.label = data.label;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tclass BarClass {\\n\\t *\\t\\t\\tconstructor( data ) {\\n\\t *\\t\\t\\t\\tthis.label = data.label;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tconst source = new Collection( { idProperty: 'label' } );\\n\\t *\\t\\tconst target = new Collection();\\n\\t *\\n\\t *\\t\\ttarget.bindTo( source ).using( ( item ) => {\\n\\t *\\t\\t\\tif ( item.label == 'foo' ) {\\n\\t *\\t\\t\\t\\treturn new FooClass( item );\\n\\t *\\t\\t\\t} else {\\n\\t *\\t\\t\\t\\treturn new BarClass( item );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\tsource.add( { label: 'foo' } );\\n\\t *\\t\\tsource.add( { label: 'bar' } );\\n\\t *\\n\\t *\\t\\tconsole.log( target.length ); // 2\\n\\t *\\t\\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\\n\\t *\\t\\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\\n\\t *\\n\\t * or the factory out of property name:\\n\\t *\\n\\t *\\t\\tconst source = new Collection( { idProperty: 'label' } );\\n\\t *\\t\\tconst target = new Collection();\\n\\t *\\n\\t *\\t\\ttarget.bindTo( source ).using( 'label' );\\n\\t *\\n\\t *\\t\\tsource.add( { label: { value: 'foo' } } );\\n\\t *\\t\\tsource.add( { label: { value: 'bar' } } );\\n\\t *\\n\\t *\\t\\tconsole.log( target.length ); // 2\\n\\t *\\t\\tconsole.log( target.get( 0 ).value ); // 'foo'\\n\\t *\\t\\tconsole.log( target.get( 1 ).value ); // 'bar'\\n\\t *\\n\\t * It's possible to skip specified items by returning falsy value:\\n\\t *\\n\\t *\\t\\tconst source = new Collection();\\n\\t *\\t\\tconst target = new Collection();\\n\\t *\\n\\t *\\t\\ttarget.bindTo( source ).using( item => {\\n\\t *\\t\\t\\tif ( item.hidden ) {\\n\\t *\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\treturn item;\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\tsource.add( { hidden: true } );\\n\\t *\\t\\tsource.add( { hidden: false } );\\n\\t *\\n\\t *\\t\\tconsole.log( source.length ); // 2\\n\\t *\\t\\tconsole.log( target.length ); // 1\\n\\t *\\n\\t * **Note**: {@link #clear} can be used to break the binding.\\n\\t *\\n\\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\\n\\t * @returns {Object}\\n\\t * @returns {module:utils/collection~Collection#bindTo#as} return.as\\n\\t * @returns {module:utils/collection~Collection#bindTo#using} return.using\\n\\t */\\n\\tbindTo( externalCollection ) {\\n\\t\\tif ( this._bindToCollection ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The collection cannot be bound more than once.\\n\\t\\t\\t *\\n\\t\\t\\t * @error collection-bind-to-rebind\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.' );\\n\\t\\t}\\n\\n\\t\\tthis._bindToCollection = externalCollection;\\n\\n\\t\\treturn {\\n\\t\\t\\t/**\\n\\t\\t\\t * Creates the class factory binding.\\n\\t\\t\\t *\\n\\t\\t\\t * @static\\n\\t\\t\\t * @param {Function} Class Specifies which class factory is to be initialized.\\n\\t\\t\\t */\\n\\t\\t\\tas: Class => {\\n\\t\\t\\t\\tthis._setUpBindToBinding( item => new Class( item ) );\\n\\t\\t\\t},\\n\\n\\t\\t\\t/**\\n\\t\\t\\t * Creates callback or property binding.\\n\\t\\t\\t *\\n\\t\\t\\t * @static\\n\\t\\t\\t * @param {Function|String} callbackOrProperty When the function is passed, it is used to\\n\\t\\t\\t * produce the items. When the string is provided, the property value is used to create\\n\\t\\t\\t * the bound collection items.\\n\\t\\t\\t */\\n\\t\\t\\tusing: callbackOrProperty => {\\n\\t\\t\\t\\tif ( typeof callbackOrProperty == 'function' ) {\\n\\t\\t\\t\\t\\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Finalizes and activates a binding initiated by {#bindTo}.\\n\\t *\\n\\t * @protected\\n\\t * @param {Function} factory A function which produces collection items.\\n\\t */\\n\\t_setUpBindToBinding( factory ) {\\n\\t\\tconst externalCollection = this._bindToCollection;\\n\\n\\t\\t// Adds the item to the collection once a change has been done to the external collection.\\n\\t\\t//\\n\\t\\t// @private\\n\\t\\tconst addItem = ( evt, externalItem, index ) => {\\n\\t\\t\\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\\n\\t\\t\\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\\n\\n\\t\\t\\t// If an external collection is bound to this collection, which makes it a 2–way binding,\\n\\t\\t\\t// and the particular external collection item is already bound, don't add it here.\\n\\t\\t\\t// The external item has been created **out of this collection's item** and (re)adding it will\\n\\t\\t\\t// cause a loop.\\n\\t\\t\\tif ( isExternalBoundToThis && externalItemBound ) {\\n\\t\\t\\t\\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\\n\\t\\t\\t\\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst item = factory( externalItem );\\n\\n\\t\\t\\t\\t// When there is no item we need to remember skipped index first and then we can skip this item.\\n\\t\\t\\t\\tif ( !item ) {\\n\\t\\t\\t\\t\\tthis._skippedIndexesFromExternal.push( index );\\n\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Lets try to put item at the same index as index in external collection\\n\\t\\t\\t\\t// but when there are a skipped items in one or both collections we need to recalculate this index.\\n\\t\\t\\t\\tlet finalIndex = index;\\n\\n\\t\\t\\t\\t// When we try to insert item after some skipped items from external collection we need\\n\\t\\t\\t\\t// to include this skipped items and decrease index.\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// For the following example:\\n\\t\\t\\t\\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\\n\\t\\t\\t\\t// internal -> [ A ]\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// Another item is been added at the end of external collection:\\n\\t\\t\\t\\t// external.add( 'D' )\\n\\t\\t\\t\\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// We can't just add 'D' to internal at the same index as index in external because\\n\\t\\t\\t\\t// this will produce empty indexes what is invalid:\\n\\t\\t\\t\\t// internal -> [ 'A', empty, empty, 'D' ]\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// So we need to include skipped items and decrease index\\n\\t\\t\\t\\t// internal -> [ 'A', 'D' ]\\n\\t\\t\\t\\tfor ( const skipped of this._skippedIndexesFromExternal ) {\\n\\t\\t\\t\\t\\tif ( index > skipped ) {\\n\\t\\t\\t\\t\\t\\tfinalIndex--;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// We need to take into consideration that external collection could skip some items from\\n\\t\\t\\t\\t// internal collection.\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// For the following example:\\n\\t\\t\\t\\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\\n\\t\\t\\t\\t// external -> [ A ]\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// Another item is been added at the end of external collection:\\n\\t\\t\\t\\t// external.add( 'D' )\\n\\t\\t\\t\\t// external -> [ 'A', 'D' ]\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// We need to include skipped items and place new item after them:\\n\\t\\t\\t\\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\\n\\t\\t\\t\\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\\n\\t\\t\\t\\t\\tif ( finalIndex >= skipped ) {\\n\\t\\t\\t\\t\\t\\tfinalIndex++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis._bindToExternalToInternalMap.set( externalItem, item );\\n\\t\\t\\t\\tthis._bindToInternalToExternalMap.set( item, externalItem );\\n\\t\\t\\t\\tthis.add( item, finalIndex );\\n\\n\\t\\t\\t\\t// After adding new element to internal collection we need update indexes\\n\\t\\t\\t\\t// of skipped items in external collection.\\n\\t\\t\\t\\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\\n\\t\\t\\t\\t\\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\\n\\t\\t\\t\\t\\t\\texternalCollection._skippedIndexesFromExternal[ i ]++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Load the initial content of the collection.\\n\\t\\tfor ( const externalItem of externalCollection ) {\\n\\t\\t\\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\\n\\t\\t}\\n\\n\\t\\t// Synchronize the with collection as new items are added.\\n\\t\\tthis.listenTo( externalCollection, 'add', addItem );\\n\\n\\t\\t// Synchronize the with collection as new items are removed.\\n\\t\\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\\n\\t\\t\\tconst item = this._bindToExternalToInternalMap.get( externalItem );\\n\\n\\t\\t\\tif ( item ) {\\n\\t\\t\\t\\tthis.remove( item );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// After removing element from external collection we need update/remove indexes\\n\\t\\t\\t// of skipped items in internal collection.\\n\\t\\t\\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\\n\\t\\t\\t\\tif ( index < skipped ) {\\n\\t\\t\\t\\t\\tresult.push( skipped - 1 );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( index > skipped ) {\\n\\t\\t\\t\\t\\tresult.push( skipped );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}, [] );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._items[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Fired when an item is added to the collection.\\n\\t *\\n\\t * @event add\\n\\t * @param {Object} item The added item.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when an item is removed from the collection.\\n\\t *\\n\\t * @event remove\\n\\t * @param {Object} item The removed item.\\n\\t * @param {Number} index Index from which item was removed.\\n\\t */\\n}\\n\\nmix( Collection, EmitterMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/document\\n */\\n\\nimport Selection from './selection';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\n\\n/**\\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\\n * {@link module:engine/view/selection~Selection view selection} associated with this document.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Document {\\n\\t/**\\n\\t * Creates a Document instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Selection done on this document.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/selection~Selection} module:engine/view/document~Document#selection\\n\\t\\t */\\n\\t\\tthis.selection = new Selection();\\n\\n\\t\\t/**\\n\\t\\t * Roots of the view tree. Collection of the {module:engine/view/element~Element view elements}.\\n\\t\\t *\\n\\t\\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\\n\\t\\t * {@link module:engine/model/document~Document#roots} and this is handled by\\n\\t\\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\\n\\t\\t * model root using {@link module:engine/model/document~Document#createRoot}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Collection} module:engine/view/document~Document#roots\\n\\t\\t */\\n\\t\\tthis.roots = new Collection( { idProperty: 'rootName' } );\\n\\n\\t\\t/**\\n\\t\\t * Defines whether document is in read-only mode.\\n\\t\\t *\\n\\t\\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\t/**\\n\\t\\t * True if document is focused.\\n\\t\\t *\\n\\t\\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\\n\\t\\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} module:engine/view/document~Document#isFocused\\n\\t\\t */\\n\\t\\tthis.set( 'isFocused', false );\\n\\n\\t\\t/**\\n\\t\\t * True if composition is in progress inside the document.\\n\\t\\t *\\n\\t\\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\\n\\t\\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} module:engine/view/document~Document#isComposing\\n\\t\\t */\\n\\t\\tthis.set( 'isComposing', false );\\n\\n\\t\\t/**\\n\\t\\t * Post-fixer callbacks registered to the view document.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Set}\\n\\t\\t */\\n\\t\\tthis._postFixers = new Set();\\n\\t}\\n\\n\\t/**\\n\\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\\n\\t * specific \\\"main\\\" root is returned.\\n\\t *\\n\\t * @param {String} [name='main'] Name of the root.\\n\\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\\n\\t * or null when there is no root of given name.\\n\\t */\\n\\tgetRoot( name = 'main' ) {\\n\\t\\treturn this.roots.get( name );\\n\\t}\\n\\n\\t/**\\n\\t * Used to register a post-fixer callback. A post-fixers mechanism allows to update view tree just before rendering\\n\\t * to the DOM.\\n\\t *\\n\\t * Post-fixers are fired just after all changes from the outermost change block were applied but\\n\\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\\n\\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\\n\\t * not be fixed in the new document tree state.\\n\\t *\\n\\t * View post-fixers are useful when you wants to update view structure whenever it changes, for instance add some classes\\n\\t * to elements based on the view structure or selection. However, is you need DOM elements to be already updated, use\\n\\t * {@link module:engine/view/view~View#event:render render event}.\\n\\t *\\n\\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/writer~Writer writer} instance connected with the\\n\\t * executed changes block.\\n\\t *\\n\\t * @param {Function} postFixer\\n\\t */\\n\\tregisterPostFixer( postFixer ) {\\n\\t\\tthis._postFixers.add( postFixer );\\n\\t}\\n\\n\\t/**\\n\\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/view/writer~Writer} writer\\n\\t */\\n\\t_callPostFixers( writer ) {\\n\\t\\tlet wasFixed = false;\\n\\n\\t\\tdo {\\n\\t\\t\\tfor ( const callback of this._postFixers ) {\\n\\t\\t\\t\\twasFixed = callback( writer );\\n\\n\\t\\t\\t\\tif ( wasFixed ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} while ( wasFixed );\\n\\t}\\n}\\n\\nmix( Document, ObservableMixin );\\n\\n/**\\n * Enum representing type of the change.\\n *\\n * Possible values:\\n *\\n * * `children` - for child list changes,\\n * * `attributes` - for element attributes changes,\\n * * `text` - for text nodes changes.\\n *\\n * @typedef {String} module:engine/view/document~ChangeType\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/attributeelement\\n */\\n\\nimport Element from './element';\\n\\n// Default attribute priority.\\nconst DEFAULT_PRIORITY = 10;\\n\\n/**\\n * Attributes are elements which define document presentation. They are mostly elements like `<b>` or `<span>`.\\n * Attributes can be broken and merged by the {@link module:engine/view/writer~Writer view writer}.\\n *\\n * Editing engine does not define fixed HTML DTD. This is why the type of the {@link module:engine/view/element~Element} need to\\n * be defined by the feature developer. Creating an element you should use {@link module:engine/view/containerelement~ContainerElement}\\n * class or `AttributeElement`.\\n *\\n * @extends module:engine/view/element~Element\\n */\\nexport default class AttributeElement extends Element {\\n\\t/**\\n\\t * Creates a attribute element.\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#createAttributeElement\\n\\t * @protected\\n\\t * @see module:engine/view/element~Element\\n\\t */\\n\\tconstructor( name, attrs, children ) {\\n\\t\\tsuper( name, attrs, children );\\n\\n\\t\\t/**\\n\\t\\t * Element priority. Attributes have to have the same priority to be\\n\\t\\t * {@link module:engine/view/element~Element#isSimilar similar}. Setting different priorities on similar\\n \\t\\t * nodes may prevent merging, e.g. two `<abbr>` nodes next each other shouldn't be merged.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis._priority = DEFAULT_PRIORITY;\\n\\n\\t\\t/**\\n\\t\\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\\n\\t\\t *\\n\\t\\t * @method #getFillerOffset\\n\\t\\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\\n\\t\\t */\\n\\t\\tthis.getFillerOffset = getFillerOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Priority of this element.\\n\\t *\\n\\t * @readonly\\n\\t * @return {Number}\\n\\t */\\n\\tget priority() {\\n\\t\\treturn this._priority;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'attributeElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'attributeElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if this element is similar to other element.\\n\\t * Both elements should have the same name, attributes and priority to be considered as similar.\\n\\t * Two similar elements can contain different set of children nodes.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} otherElement\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisSimilar( otherElement ) {\\n\\t\\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\\n\\t}\\n\\n\\t/**\\n\\t * Clones provided element with priority.\\n\\t *\\n\\t * @protected\\n\\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\\n\\t * element will be cloned without any children.\\n\\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\\n\\t */\\n\\t_clone( deep ) {\\n\\t\\tconst cloned = super._clone( deep );\\n\\n\\t\\t// Clone priority too.\\n\\t\\tcloned._priority = this._priority;\\n\\n\\t\\treturn cloned;\\n\\t}\\n}\\n\\n/**\\n * Default attribute priority.\\n *\\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\\n */\\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\\n\\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\\n//\\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\\nfunction getFillerOffset() {\\n\\t// <b>foo</b> does not need filler.\\n\\tif ( nonUiChildrenCount( this ) ) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\tlet element = this.parent;\\n\\n\\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\\n\\twhile ( element && element.is( 'attributeElement' ) ) {\\n\\t\\tif ( nonUiChildrenCount( element ) > 1 ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\telement = element.parent;\\n\\t}\\n\\n\\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\t// Render block filler at the end of element (after all ui elements).\\n\\treturn this.childCount;\\n}\\n\\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\\n//\\n// @param {module:engine/view/element~Element} element\\n// @return {Number}\\nfunction nonUiChildrenCount( element ) {\\n\\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/emptyelement\\n */\\n\\nimport Element from './element';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport Node from './node';\\n\\n/**\\n * EmptyElement class. It is used to represent elements that cannot contain any child nodes.\\n */\\nexport default class EmptyElement extends Element {\\n\\t/**\\n\\t * Creates new instance of EmptyElement.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\\n\\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#createEmptyElement\\n\\t * @protected\\n\\t * @param {String} name Node name.\\n\\t * @param {Object|Iterable} [attributes] Collection of attributes.\\n\\t */\\n\\tconstructor( name, attributes, children ) {\\n\\t\\tsuper( name, attributes, children );\\n\\n\\t\\t/**\\n\\t\\t * Returns `null` because filler is not needed for EmptyElements.\\n\\t\\t *\\n\\t\\t * @method #getFillerOffset\\n\\t\\t * @returns {null} Always returns null.\\n\\t\\t */\\n\\t\\tthis.getFillerOffset = getFillerOffset;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'emptyElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'emptyElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Overrides {@link module:engine/view/element~Element#_insertChildren} method.\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\\n\\t * adding any child nodes to EmptyElement.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_insertChildren( index, nodes ) {\\n\\t\\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-emptyelement-cannot-add\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.' );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Returns `null` because block filler is not needed for EmptyElements.\\n//\\n// @returns {null}\\nfunction getFillerOffset() {\\n\\treturn null;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals navigator:false */\\n\\n/**\\n * @module utils/env\\n */\\n\\nconst userAgent = navigator.userAgent.toLowerCase();\\n\\n/**\\n * A namespace containing environment and browser information.\\n *\\n * @namespace\\n */\\nconst env = {\\n\\t/**\\n\\t * Indicates that application is running on Macintosh.\\n\\t *\\n\\t * @static\\n\\t * @member {Boolean} module:utils/env~env#isMac\\n\\t */\\n\\tisMac: isMac( userAgent )\\n};\\n\\nexport default env;\\n\\n/**\\n * Checks if User Agent represented by the string is running on Macintosh.\\n *\\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\\n */\\nexport function isMac( userAgent ) {\\n\\treturn userAgent.indexOf( 'macintosh' ) > -1;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * Set of utils related to keyboard support.\\n *\\n * @module utils/keyboard\\n */\\n\\nimport CKEditorError from './ckeditorerror';\\nimport env from './env';\\n\\nconst macGlyphsToModifiers = {\\n\\t'⌘': 'ctrl',\\n\\t'⇧': 'shift',\\n\\t'⌥': 'alt'\\n};\\n\\nconst modifiersToMacGlyphs = {\\n\\t'ctrl': '⌘',\\n\\t'shift': '⇧',\\n\\t'alt': '⌥'\\n};\\n\\n/**\\n * Object with `keyName => keyCode` pairs for a set of known keys.\\n *\\n * Contains:\\n *\\n * * `a-z`,\\n * * `0-9`,\\n * * `f1-f12`,\\n * * `arrow(left|up|right|bottom)`,\\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\\n * * `ctrl`, `cmd`, `shift`, `alt`.\\n */\\nexport const keyCodes = generateKnownKeyCodes();\\n\\n/**\\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\\n *\\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\\n *\\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\\n * or a keystroke data object.\\n * @returns {Number} Key or keystroke code.\\n */\\nexport function getCode( key ) {\\n\\tlet keyCode;\\n\\n\\tif ( typeof key == 'string' ) {\\n\\t\\tkeyCode = keyCodes[ key.toLowerCase() ];\\n\\n\\t\\tif ( !keyCode ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\\n\\t\\t\\t *\\n\\t\\t\\t * @errror keyboard-unknown-key\\n\\t\\t\\t * @param {String} key\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'keyboard-unknown-key: Unknown key name.', { key } );\\n\\t\\t}\\n\\t} else {\\n\\t\\tkeyCode = key.keyCode +\\n\\t\\t\\t( key.altKey ? keyCodes.alt : 0 ) +\\n\\t\\t\\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\\n\\t\\t\\t( key.shiftKey ? keyCodes.shift : 0 );\\n\\t}\\n\\n\\treturn keyCode;\\n}\\n\\n/**\\n * Parses keystroke and returns a keystroke code that will match the code returned by\\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\\n *\\n * The keystroke can be passed in two formats:\\n *\\n * * as a single string – e.g. `ctrl + A`,\\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\\n *\\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\\n *\\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\\n *\\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\\n * @returns {Number} Keystroke code.\\n */\\nexport function parseKeystroke( keystroke ) {\\n\\tif ( typeof keystroke == 'string' ) {\\n\\t\\tkeystroke = splitKeystrokeText( keystroke );\\n\\t}\\n\\n\\treturn keystroke\\n\\t\\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\\n\\t\\t.reduce( ( key, sum ) => sum + key, 0 );\\n}\\n\\n/**\\n * It translates any keystroke string text like `\\\"CTRL+A\\\"` to an\\n * environment–specific keystroke, i.e. `\\\"⌘A\\\"` on Mac OSX.\\n *\\n * @param {String} keystroke Keystroke text.\\n * @returns {String} Keystroke text specific for the environment.\\n */\\nexport function getEnvKeystrokeText( keystroke ) {\\n\\tif ( !env.isMac ) {\\n\\t\\treturn keystroke;\\n\\t}\\n\\n\\treturn splitKeystrokeText( keystroke )\\n\\t\\t// Replace modifiers (e.g. \\\"ctrl\\\") with Mac glyphs (e.g. \\\"⌘\\\") first.\\n\\t\\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\\n\\n\\t\\t// Decide whether to put \\\"+\\\" between keys in the keystroke or not.\\n\\t\\t.reduce( ( value, key ) => {\\n\\t\\t\\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\\n\\t\\t\\t\\treturn value + key;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn value + '+' + key;\\n\\t\\t\\t}\\n\\t\\t} );\\n}\\n\\nfunction generateKnownKeyCodes() {\\n\\tconst keyCodes = {\\n\\t\\tarrowleft: 37,\\n\\t\\tarrowup: 38,\\n\\t\\tarrowright: 39,\\n\\t\\tarrowdown: 40,\\n\\t\\tbackspace: 8,\\n\\t\\tdelete: 46,\\n\\t\\tenter: 13,\\n\\t\\tspace: 32,\\n\\t\\tesc: 27,\\n\\t\\ttab: 9,\\n\\n\\t\\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\\n\\t\\t// like bit masks.\\n\\t\\tctrl: 0x110000,\\n\\t\\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\\n\\t\\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\\n\\t\\tcmd: 0x110000,\\n\\t\\tshift: 0x220000,\\n\\t\\talt: 0x440000\\n\\t};\\n\\n\\t// a-z\\n\\tfor ( let code = 65; code <= 90; code++ ) {\\n\\t\\tconst letter = String.fromCharCode( code );\\n\\n\\t\\tkeyCodes[ letter.toLowerCase() ] = code;\\n\\t}\\n\\n\\t// 0-9\\n\\tfor ( let code = 48; code <= 57; code++ ) {\\n\\t\\tkeyCodes[ code - 48 ] = code;\\n\\t}\\n\\n\\t// F1-F12\\n\\tfor ( let code = 112; code <= 123; code++ ) {\\n\\t\\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\\n\\t}\\n\\n\\treturn keyCodes;\\n}\\n\\nfunction splitKeystrokeText( keystroke ) {\\n\\treturn keystroke.split( /\\\\s*\\\\+\\\\s*/ );\\n}\\n\\n/**\\n * Information about a keystroke.\\n *\\n * @interface module:utils/keyboard~KeystrokeInfo\\n */\\n\\n/**\\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\\n *\\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\\n */\\n\\n/**\\n * Whether the <kbd>Alt</kbd> modifier was pressed.\\n *\\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\\n */\\n\\n/**\\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\\n *\\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\\n */\\n\\n/**\\n * Whether the <kbd>Shift</kbd> modifier was pressed.\\n *\\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/uielement\\n */\\n\\nimport Element from './element';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport Node from './node';\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\n/**\\n * UIElement class. It is used to represent UI not a content of the document.\\n * This element can't be split and selection can't be placed inside this element.\\n */\\nexport default class UIElement extends Element {\\n\\t/**\\n\\t * Creates new instance of UIElement.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\\n\\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\\n\\t *\\n\\t * @see module:engine/view/writer~Writer#createUIElement\\n\\t * @protected\\n\\t * @param {String} name Node name.\\n\\t * @param {Object|Iterable} [attributes] Collection of attributes.\\n\\t */\\n\\tconstructor( name, attributes, children ) {\\n\\t\\tsuper( name, attributes, children );\\n\\n\\t\\t/**\\n\\t\\t * Returns `null` because filler is not needed for UIElements.\\n\\t\\t *\\n\\t\\t * @method #getFillerOffset\\n\\t\\t * @returns {null} Always returns null.\\n\\t\\t */\\n\\t\\tthis.getFillerOffset = getFillerOffset;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'uiElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'uiElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Overrides {@link module:engine/view/element~Element#_insertChildren} method.\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\\n\\t * to UIElement.\\n\\t */\\n\\t_insertChildren( index, nodes ) {\\n\\t\\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-uielement-cannot-add\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\\n\\t * {@link module:engine/view/domconverter~DomConverter}.\\n\\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\\n\\t *\\n\\t *\\t\\tconst myUIElement = new UIElement( 'span' );\\n\\t *\\t\\tmyUIElement.render = function( domDocument ) {\\n\\t *\\t\\t\\tconst domElement = this.toDomElement( domDocument );\\n\\t *\\t\\t\\tdomElement.innerHTML = '<b>this is ui element</b>';\\n\\t *\\n\\t *\\t\\t\\treturn domElement;\\n\\t *\\t\\t};\\n\\t *\\n\\t * @param {Document} domDocument\\n\\t * @return {HTMLElement}\\n\\t */\\n\\trender( domDocument ) {\\n\\t\\treturn this.toDomElement( domDocument );\\n\\t}\\n\\n\\t/**\\n\\t * Creates DOM element based on this view UIElement.\\n\\t * Note that each time this method is called new DOM element is created.\\n\\t *\\n\\t * @param {Document} domDocument\\n\\t * @returns {HTMLElement}\\n\\t */\\n\\ttoDomElement( domDocument ) {\\n\\t\\tconst domElement = domDocument.createElement( this.name );\\n\\n\\t\\tfor ( const key of this.getAttributeKeys() ) {\\n\\t\\t\\tdomElement.setAttribute( key, this.getAttribute( key ) );\\n\\t\\t}\\n\\n\\t\\treturn domElement;\\n\\t}\\n}\\n\\n/**\\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\\n *\\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\\n * Without this handler, it would be impossible to \\\"jump over\\\" UI element using right arrow key.\\n *\\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\\n */\\nexport function injectUiElementHandling( view ) {\\n\\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\\n}\\n\\n// Returns `null` because block filler is not needed for UIElements.\\n//\\n// @returns {null}\\nfunction getFillerOffset() {\\n\\treturn null;\\n}\\n\\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\\nfunction jumpOverUiElement( evt, data, domConverter ) {\\n\\tif ( data.keyCode == keyCodes.arrowright ) {\\n\\t\\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\\n\\t\\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\\n\\n\\t\\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\\n\\t\\tif ( domSelectionCollapsed || data.shiftKey ) {\\n\\t\\t\\tconst domParent = domSelection.focusNode;\\n\\t\\t\\tconst domOffset = domSelection.focusOffset;\\n\\n\\t\\t\\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\\n\\n\\t\\t\\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\\n\\t\\t\\tif ( viewPosition === null ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Skip all following ui elements.\\n\\t\\t\\tlet jumpedOverAnyUiElement = false;\\n\\n\\t\\t\\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\\n\\t\\t\\t\\tif ( value.item.is( 'uiElement' ) ) {\\n\\t\\t\\t\\t\\t// Remember that there was at least one ui element.\\n\\t\\t\\t\\t\\tjumpedOverAnyUiElement = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\\n\\t\\t\\t\\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Don't jump over text or don't get out of container element.\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// If anything has been skipped, fix position.\\n\\t\\t\\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\\n\\t\\t\\tif ( jumpedOverAnyUiElement ) {\\n\\t\\t\\t\\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\\n\\n\\t\\t\\t\\tif ( domSelectionCollapsed ) {\\n\\t\\t\\t\\t\\t// Selection was collapsed, so collapse it at further position.\\n\\t\\t\\t\\t\\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Selection was not collapse, so extend it instead of collapsing.\\n\\t\\t\\t\\t\\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/documentfragment\\n */\\n\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\n\\n/**\\n * DocumentFragment class.\\n */\\nexport default class DocumentFragment {\\n\\t/**\\n\\t * Creates new DocumentFragment instance.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children] List of nodes to be inserted into\\n\\t * created document fragment.\\n\\t */\\n\\tconstructor( children ) {\\n\\t\\t/**\\n\\t\\t * Array of child nodes.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\\n\\t\\t */\\n\\t\\tthis._children = [];\\n\\n\\t\\tif ( children ) {\\n\\t\\t\\tthis._insertChildren( 0, children );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over nodes added to this document fragment.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/node~Node>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._children[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Number of child nodes in this document fragment.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget childCount() {\\n\\t\\treturn this._children.length;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isEmpty() {\\n\\t\\treturn this.childCount === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\\n\\t *\\n\\t * @readonly\\n\\t * @type {null}\\n\\t */\\n\\tget parent() {\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given view tree object is of given type.\\n\\t *\\n\\t * Read more in {@link module:engine/view/node~Node#is}.\\n\\t *\\n\\t * @param {String} type\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'documentFragment';\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment#_insertChildren Insert} a child node or a list of child nodes at the end\\n\\t * and sets the parent of these nodes to this fragment.\\n\\t *\\n\\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\\n\\t * @returns {Number} Number of appended nodes.\\n\\t */\\n\\t_appendChildren( items ) {\\n\\t\\treturn this._insertChildren( this.childCount, items );\\n\\t}\\n\\n\\t/**\\n\\t * Gets child at the given index.\\n\\t *\\n\\t * @param {Number} index Index of child.\\n\\t * @returns {module:engine/view/node~Node} Child node.\\n\\t */\\n\\tgetChild( index ) {\\n\\t\\treturn this._children[ index ];\\n\\t}\\n\\n\\t/**\\n\\t * Gets index of the given child node. Returns `-1` if child node is not found.\\n\\t *\\n\\t * @param {module:engine/view/node~Node} node Child node.\\n\\t * @returns {Number} Index of the child node.\\n\\t */\\n\\tgetChildIndex( node ) {\\n\\t\\treturn this._children.indexOf( node );\\n\\t}\\n\\n\\t/**\\n\\t * Gets child nodes iterator.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\\n\\t */\\n\\tgetChildren() {\\n\\t\\treturn this._children[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\\n\\t * this fragment.\\n\\t *\\n\\t * @param {Number} index Position where nodes should be inserted.\\n\\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\\n\\t * @returns {Number} Number of inserted nodes.\\n\\t */\\n\\t_insertChildren( index, items ) {\\n\\t\\tthis._fireChange( 'children', this );\\n\\t\\tlet count = 0;\\n\\n\\t\\tconst nodes = normalize( items );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\\n\\t\\t\\tif ( node.parent !== null ) {\\n\\t\\t\\t\\tnode._remove();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode.parent = this;\\n\\n\\t\\t\\tthis._children.splice( index, 0, node );\\n\\t\\t\\tindex++;\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\n\\t\\treturn count;\\n\\t}\\n\\n\\t/**\\n\\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\\n\\t *\\n\\t * @param {Number} index Number of the first node to remove.\\n\\t * @param {Number} [howMany=1] Number of nodes to remove.\\n\\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\\n\\t */\\n\\t_removeChildren( index, howMany = 1 ) {\\n\\t\\tthis._fireChange( 'children', this );\\n\\n\\t\\tfor ( let i = index; i < index + howMany; i++ ) {\\n\\t\\t\\tthis._children[ i ].parent = null;\\n\\t\\t}\\n\\n\\t\\treturn this._children.splice( index, howMany );\\n\\t}\\n\\n\\t/**\\n\\t * Fires `change` event with given type of the change.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/document~ChangeType} type Type of the change.\\n\\t * @param {module:engine/view/node~Node} node Changed node.\\n\\t * @fires module:engine/view/node~Node#change\\n\\t */\\n\\t_fireChange( type, node ) {\\n\\t\\tthis.fire( 'change:' + type, node );\\n\\t}\\n}\\n\\nmix( DocumentFragment, EmitterMixin );\\n\\n// Converts strings to Text and non-iterables to arrays.\\n//\\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\\n// @return {Iterable.<module:engine/view/node~Node>}\\nfunction normalize( nodes ) {\\n\\t// Separate condition because string is iterable.\\n\\tif ( typeof nodes == 'string' ) {\\n\\t\\treturn [ new Text( nodes ) ];\\n\\t}\\n\\n\\tif ( !isIterable( nodes ) ) {\\n\\t\\tnodes = [ nodes ];\\n\\t}\\n\\n\\t// Array.from to enable .map() on non-arrays.\\n\\treturn Array.from( nodes )\\n\\t\\t.map( node => {\\n\\t\\t\\tif ( typeof node == 'string' ) {\\n\\t\\t\\t\\treturn new Text( node );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( node instanceof TextProxy ) {\\n\\t\\t\\t\\treturn new Text( node.data );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn node;\\n\\t\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module module:engine/view/writer\\n */\\n\\nimport Position from './position';\\nimport ContainerElement from './containerelement';\\nimport AttributeElement from './attributeelement';\\nimport EmptyElement from './emptyelement';\\nimport UIElement from './uielement';\\nimport Range from './range';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport DocumentFragment from './documentfragment';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\nimport isPlainObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isPlainObject';\\nimport Text from './text';\\nimport EditableElement from './editableelement';\\n\\n/**\\n * View writer class. Provides set of methods used to properly manipulate nodes attached to\\n * {@link module:engine/view/document~Document view document}. It is not recommended to use it directly. To get an instance\\n * of view writer associated with the document use {@link module:engine/view/view~View#change view.change()) method.\\n */\\nexport default class Writer {\\n\\tconstructor( document ) {\\n\\t\\t/**\\n\\t\\t * @readonly\\n\\t\\t * @type {module:engine/view/document~Document}\\n\\t\\t */\\n\\t\\tthis.document = document;\\n\\t}\\n\\n\\t/**\\n\\t * Sets {@link module:engine/view/selection~Selection selection's} ranges and direction to the specified location based on the given\\n\\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\\n\\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\\n\\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\\n\\t *\\n\\t * ### Usage:\\n\\t *\\n\\t *\\t\\t// Sets selection to the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\twriter.setSelection( range );\\n\\t *\\n\\t *\\t\\t// Sets backward selection to the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\twriter.setSelection( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to given ranges.\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\twriter.setSelection( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to the other selection.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\twriter.setSelection( otherSelection );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\twriter.setSelection( position );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the position of given item and offset.\\n\\t *\\t\\twriter.setSelection( paragraph, offset );\\n\\t *\\n\\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\\n \\t * that element and ends after the last child of that element.\\n\\t *\\n\\t * \\t\\twriter.setSelection( paragraph, 'in' );\\n\\t *\\n\\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\\n\\t *\\n\\t *\\t\\twriter.setSelection( paragraph, 'on' );\\n\\t *\\n\\t * \\t\\t// Removes all ranges.\\n\\t *\\t\\twriter.setSelection( null );\\n\\t *\\n\\t * `Writer#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\\n\\t *\\n\\t *\\t\\t// Sets selection as backward.\\n\\t *\\t\\twriter.setSelection( range, { backward: true } );\\n\\t *\\n\\t *\\t\\t// Sets selection as fake.\\n\\t *\\t\\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\\n\\t * \\t\\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\\n\\t * \\t\\t// represented in other way, for example by applying proper CSS class.\\n\\t *\\t\\twriter.setSelection( range, { fake: true } );\\n\\t *\\n\\t * \\t\\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\\n\\t * \\t\\t// (and be  properly handled by screen readers).\\n\\t *\\t\\twriter.setSelection( range, { fake: true, label: 'foo' } );\\n\\t *\\n\\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\\n\\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\\n\\t * @param {String} [options.label] Label for the fake selection.\\n\\t */\\n\\tsetSelection( selectable, placeOrOffset, options ) {\\n\\t\\tthis.document.selection._setTo( selectable, placeOrOffset, options );\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link module:engine/view/selection~Selection#focus selection's focus} to the specified location.\\n\\t *\\n\\t * The location can be specified in the same form as {@link module:engine/view/position~Position.createAt} parameters.\\n\\t *\\n\\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/view/item~Item view item}.\\n\\t */\\n\\tsetSelectionFocus( itemOrPosition, offset ) {\\n\\t\\tthis.document.selection._setFocus( itemOrPosition, offset );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new {@link module:engine/view/text~Text text node}.\\n\\t *\\n\\t *\\t\\twriter.createText( 'foo' );\\n\\t *\\n\\t * @param {String} data Text data.\\n\\t * @returns {module:engine/view/text~Text} Created text node.\\n\\t */\\n\\tcreateText( data ) {\\n\\t\\treturn new Text( data );\\n\\t}\\n\\n\\t/**\\n\\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\\n\\t *\\n\\t *\\t\\twriter.createAttributeElement( 'strong' );\\n\\t *\\t\\twriter.createAttributeElement( 'strong', { 'alignment': 'center' } );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\\n\\t */\\n\\tcreateAttributeElement( name, attributes, priority ) {\\n\\t\\tconst attributeElement = new AttributeElement( name, attributes );\\n\\n\\t\\tif ( priority ) {\\n\\t\\t\\tattributeElement._priority = priority;\\n\\t\\t}\\n\\n\\t\\treturn attributeElement;\\n\\t}\\n\\n\\t/**\\n\\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\\n\\t *\\n\\t *\\t\\twriter.createContainerElement( 'paragraph' );\\n\\t *\\t\\twriter.createContainerElement( 'paragraph', { 'alignment': 'center' } );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\\n\\t */\\n\\tcreateContainerElement( name, attributes ) {\\n\\t\\treturn new ContainerElement( name, attributes );\\n\\t}\\n\\n\\t/**\\n\\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\\n\\t *\\n\\t *\\t\\twriter.createEditableElement( document, 'div' );\\n\\t *\\t\\twriter.createEditableElement( document, 'div', { 'alignment': 'center' } );\\n\\t *\\n\\t * @param {module:engine/view/document~Document} document View document.\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\\n\\t */\\n\\tcreateEditableElement( name, attributes ) {\\n\\t\\tconst editableElement = new EditableElement( name, attributes );\\n\\t\\teditableElement._document = this.document;\\n\\n\\t\\treturn editableElement;\\n\\t}\\n\\n\\t/**\\n\\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\\n\\t *\\n\\t *\\t\\twriter.createEmptyElement( 'img' );\\n\\t *\\t\\twriter.createEmptyElement( 'img', { 'alignment': 'center' } );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\\n\\t */\\n\\tcreateEmptyElement( name, attributes ) {\\n\\t\\treturn new EmptyElement( name, attributes );\\n\\t}\\n\\n\\t/**\\n\\t * Creates new {@link module:engine/view/uielement~UIElement}.\\n\\t *\\n\\t *\\t\\twriter.createUIElement( 'span' );\\n\\t *\\t\\twriter.createUIElement( 'span', { 'alignment': 'center' } );\\n\\t *\\n\\t * Custom render function can be provided as third parameter:\\n\\t *\\n\\t *\\t\\twriter.createUIElement( 'span', null, function( domDocument ) {\\n\\t *\\t\\t\\tconst domElement = this.toDomElement( domDocument );\\n\\t *\\t\\t\\tdomElement.innerHTML = '<b>this is ui element</b>';\\n\\t *\\n\\t *\\t\\t\\treturn domElement;\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @param {Function} [renderFunction] Custom render function.\\n\\t * @returns {module:engine/view/uielement~UIElement} Created element.\\n\\t */\\n\\tcreateUIElement( name, attributes, renderFunction ) {\\n\\t\\tconst uiElement = new UIElement( name, attributes );\\n\\n\\t\\tif ( renderFunction ) {\\n\\t\\t\\tuiElement.render = renderFunction;\\n\\t\\t}\\n\\n\\t\\treturn uiElement;\\n\\t}\\n\\n\\t/**\\n\\t * Sets the text content for the specified `textNode`.\\n\\t *\\n\\t * @param {String} value New value.\\n\\t * @param {module:engine/view/text~Text} textNode Text node that will be updated.\\n\\t */\\n\\tsetTextData( value, textNode ) {\\n\\t\\ttextNode._data = value;\\n\\t}\\n\\n\\t/**\\n\\t * Adds or overwrite element's attribute with a specified key and value.\\n\\t *\\n\\t *\\t\\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @param {String} value Attribute value.\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\tsetAttribute( key, value, element ) {\\n\\t\\telement._setAttribute( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes attribute from the element.\\n\\t *\\n\\t *\\t\\twriter.removeAttribute( 'href', linkElement );\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\tremoveAttribute( key, element ) {\\n\\t\\telement._removeAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Adds specified class to the element.\\n\\t *\\n\\t *\\t\\twriter.addClass( 'foo', linkElement );\\n\\t *\\t\\twriter.addClass( [ 'foo', 'bar' ], linkElement );\\n\\t *\\n\\t * @param {Array.<String>|String} className\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\taddClass( className, element ) {\\n\\t\\telement._addClass( className );\\n\\t}\\n\\n\\t/**\\n\\t * Removes specified class from the element.\\n\\t *\\n\\t *\\t\\twriter.removeClass( 'foo', linkElement );\\n\\t *\\t\\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\\n\\t *\\n\\t * @param {Array.<String>|String} className\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\tremoveClass( className, element ) {\\n\\t\\telement._removeClass( className );\\n\\t}\\n\\n\\t/**\\n\\t * Adds style to the element.\\n\\t *\\n\\t *\\t\\twriter.setStyle( 'color', 'red', element );\\n\\t *\\t\\twriter.setStyle( {\\n\\t *\\t\\t\\tcolor: 'red',\\n\\t *\\t\\t\\tposition: 'fixed'\\n\\t *\\t\\t}, element );\\n\\t *\\n\\t * @param {String|Object} property Property name or object with key - value pairs.\\n\\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\\n\\t * @param {module:engine/view/element~Element} element Element to set styles on.\\n\\t */\\n\\tsetStyle( property, value, element ) {\\n\\t\\tif ( isPlainObject( property ) && element === undefined ) {\\n\\t\\t\\telement = value;\\n\\t\\t}\\n\\n\\t\\telement._setStyle( property, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes specified style from the element.\\n\\t *\\n\\t *\\t\\twriter.removeStyle( 'color', element );  // Removes 'color' style.\\n\\t *\\t\\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\\n\\t *\\n\\t * @param {Array.<String>|String} property\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\tremoveStyle( property, element ) {\\n\\t\\telement._removeStyle( property );\\n\\t}\\n\\n\\t/**\\n\\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\\n\\t * so they can be used to add special data to elements.\\n\\t *\\n\\t * @param {String|Symbol} key\\n\\t * @param {*} value\\n\\t * @param {module:engine/view/element~Element} element\\n\\t */\\n\\tsetCustomProperty( key, value, element ) {\\n\\t\\telement._setCustomProperty( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes a custom property stored under the given key.\\n\\t *\\n\\t * @param {String|Symbol} key\\n\\t * @param {module:engine/view/element~Element} element\\n\\t * @returns {Boolean} Returns true if property was removed.\\n\\t */\\n\\tremoveCustomProperty( key, element ) {\\n\\t\\treturn element._removeCustomProperty( key );\\n\\t}\\n\\n\\t/**\\n\\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\\n\\t * up to a container element.\\n\\t *\\n\\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\\n\\t *\\n\\t *        <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\\n\\t *        <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\\n\\t *        <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\\n\\t *        <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\\n\\t *\\n\\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\\n\\t *\\n\\t * **Note:** Difference between {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} and\\n\\t * {@link module:engine/view/writer~Writer#breakContainer breakContainer} is that `breakAttributes` breaks all\\n\\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\\n\\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\\n\\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\\n\\t * when {@link module:engine/view/range~Range#start start}\\n\\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\\n\\t * when trying to break attributes\\n\\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\\n\\t * when trying to break attributes\\n\\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\\n\\t *\\n\\t * @see module:engine/view/attributeelement~AttributeElement\\n\\t * @see module:engine/view/containerelement~ContainerElement\\n\\t * @see module:engine/view/writer~Writer#breakContainer\\n\\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\\n\\t * to break attribute elements.\\n\\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\\n\\t * elements.\\n\\t */\\n\\tbreakAttributes( positionOrRange ) {\\n\\t\\tif ( positionOrRange instanceof Position ) {\\n\\t\\t\\treturn _breakAttributes( positionOrRange );\\n\\t\\t} else {\\n\\t\\t\\treturn _breakAttributesRange( positionOrRange );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\\n\\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\\n\\t * or at the end of it's parent element.\\n\\t *\\n\\t *        <p>foo^bar</p> -> <p>foo</p><p>bar</p>\\n\\t *        <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\\n\\t *        <p>^foobar</p> -> ^<p>foobar</p>\\n\\t *        <p>foobar^</p> -> <p>foobar</p>^\\n\\t *\\n\\t * **Note:** Difference between {@link module:engine/view/writer~Writer#breakAttributes breakAttributes} and\\n\\t * {@link module:engine/view/writer~Writer#breakContainer breakContainer} is that `breakAttributes` breaks all\\n\\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\\n\\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\\n\\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\\n\\t *\\n\\t * @see module:engine/view/attributeelement~AttributeElement\\n\\t * @see module:engine/view/containerelement~ContainerElement\\n\\t * @see module:engine/view/writer~Writer#breakAttributes\\n\\t * @param {module:engine/view/position~Position} position Position where to break element.\\n\\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\\n\\t * the returned position is placed either before it or after it.\\n\\t */\\n\\tbreakContainer( position ) {\\n\\t\\tconst element = position.parent;\\n\\n\\t\\tif ( !( element.is( 'containerElement' ) ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to break an element which is not a container element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-break-non-container-element\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif ( !element.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to break root element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-break-root\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.' );\\n\\t\\t}\\n\\n\\t\\tif ( position.isAtStart ) {\\n\\t\\t\\treturn Position.createBefore( element );\\n\\t\\t} else if ( !position.isAtEnd ) {\\n\\t\\t\\tconst newElement = element._clone( false );\\n\\n\\t\\t\\tthis.insert( Position.createAfter( element ), newElement );\\n\\n\\t\\t\\tconst sourceRange = new Range( position, Position.createAt( element, 'end' ) );\\n\\t\\t\\tconst targetPosition = new Position( newElement, 0 );\\n\\n\\t\\t\\tthis.move( sourceRange, targetPosition );\\n\\t\\t}\\n\\n\\t\\treturn Position.createAfter( element );\\n\\t}\\n\\n\\t/**\\n\\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\\n\\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\\n\\t *\\n\\t * In following examples `<p>` is a container and `<b>` is an attribute element:\\n\\t *\\n\\t *        <p>foo[]bar</p> -> <p>foo{}bar</p>\\n\\t *        <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\\n\\t *        <p><b foo=\\\"bar\\\">a</b>[]<b foo=\\\"baz\\\">b</b></p> -> <p><b foo=\\\"bar\\\">a</b>[]<b foo=\\\"baz\\\">b</b></p>\\n\\t *\\n\\t * It will also take care about empty attributes when merging:\\n\\t *\\n\\t *        <p><b>[]</b></p> -> <p>[]</p>\\n\\t *        <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\\n\\t *\\n\\t * **Note:** Difference between {@link module:engine/view/writer~Writer#mergeAttributes mergeAttributes} and\\n\\t * {@link module:engine/view/writer~Writer#mergeContainers mergeContainers} is that `mergeAttributes` merges two\\n\\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\\n\\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\\n\\t *\\n\\t * @see module:engine/view/attributeelement~AttributeElement\\n\\t * @see module:engine/view/containerelement~ContainerElement\\n\\t * @see module:engine/view/writer~Writer#mergeContainers\\n\\t * @param {module:engine/view/position~Position} position Merge position.\\n\\t * @returns {module:engine/view/position~Position} Position after merge.\\n\\t */\\n\\tmergeAttributes( position ) {\\n\\t\\tconst positionOffset = position.offset;\\n\\t\\tconst positionParent = position.parent;\\n\\n\\t\\t// When inside text node - nothing to merge.\\n\\t\\tif ( positionParent.is( 'text' ) ) {\\n\\t\\t\\treturn position;\\n\\t\\t}\\n\\n\\t\\t// When inside empty attribute - remove it.\\n\\t\\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\\n\\t\\t\\tconst parent = positionParent.parent;\\n\\t\\t\\tconst offset = positionParent.index;\\n\\t\\t\\tpositionParent._remove();\\n\\n\\t\\t\\treturn this.mergeAttributes( new Position( parent, offset ) );\\n\\t\\t}\\n\\n\\t\\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\\n\\t\\tconst nodeAfter = positionParent.getChild( positionOffset );\\n\\n\\t\\t// Position should be placed between two nodes.\\n\\t\\tif ( !nodeBefore || !nodeAfter ) {\\n\\t\\t\\treturn position;\\n\\t\\t}\\n\\n\\t\\t// When position is between two text nodes.\\n\\t\\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\\n\\t\\t\\treturn mergeTextNodes( nodeBefore, nodeAfter );\\n\\t\\t}\\n\\t\\t// When selection is between two same attribute elements.\\n\\t\\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\\n\\t\\t\\t// Move all children nodes from node placed after selection and remove that node.\\n\\t\\t\\tconst count = nodeBefore.childCount;\\n\\t\\t\\tnodeBefore._appendChildren( nodeAfter.getChildren() );\\n\\t\\t\\tnodeAfter._remove();\\n\\n\\t\\t\\t// New position is located inside the first node, before new nodes.\\n\\t\\t\\t// Call this method recursively to merge again if needed.\\n\\t\\t\\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\\n\\t\\t}\\n\\n\\t\\treturn position;\\n\\t}\\n\\n\\t/**\\n\\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\\n\\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\\n\\t *\\n\\t *        <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\\n\\t *        <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\\n\\t *\\n\\t * **Note:** Difference between {@link module:engine/view/writer~Writer#mergeAttributes mergeAttributes} and\\n\\t * {@link module:engine/view/writer~Writer#mergeContainers mergeContainers} is that `mergeAttributes` merges two\\n\\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\\n\\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\\n\\t *\\n\\t * @see module:engine/view/attributeelement~AttributeElement\\n\\t * @see module:engine/view/containerelement~ContainerElement\\n\\t * @see module:engine/view/writer~Writer#mergeAttributes\\n\\t * @param {module:engine/view/position~Position} position Merge position.\\n\\t * @returns {module:engine/view/position~Position} Position after merge.\\n\\t */\\n\\tmergeContainers( position ) {\\n\\t\\tconst prev = position.nodeBefore;\\n\\t\\tconst next = position.nodeAfter;\\n\\n\\t\\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Element before and after given position cannot be merged.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-merge-containers-invalid-position\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\\n\\t\\t\\t\\t'Element before and after given position cannot be merged.' );\\n\\t\\t}\\n\\n\\t\\tconst lastChild = prev.getChild( prev.childCount - 1 );\\n\\t\\tconst newPosition = lastChild instanceof Text ? Position.createAt( lastChild, 'end' ) : Position.createAt( prev, 'end' );\\n\\n\\t\\tthis.move( Range.createIn( next ), Position.createAt( prev, 'end' ) );\\n\\t\\tthis.remove( Range.createOn( next ) );\\n\\n\\t\\treturn newPosition;\\n\\t}\\n\\n\\t/**\\n\\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\\n\\t * and merging them afterwards.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\\n\\t * contains instances that are not {@link module:engine/view/text~Text Texts},\\n\\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\\n\\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\\n\\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\\n\\t * {@link module:engine/view/uielement~UIElement UIElements}.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} position Insertion position.\\n\\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\\n\\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\\n\\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\\n\\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\\n\\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\\n\\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\\n\\t */\\n\\tinsert( position, nodes ) {\\n\\t\\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\\n\\n\\t\\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\\n\\t\\tvalidateNodesToInsert( nodes );\\n\\n\\t\\tconst container = getParentContainer( position );\\n\\n\\t\\tif ( !container ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Position's parent container cannot be found.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-invalid-position-container\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-invalid-position-container' );\\n\\t\\t}\\n\\n\\t\\tconst insertionPosition = _breakAttributes( position, true );\\n\\n\\t\\tconst length = container._insertChildren( insertionPosition.offset, nodes );\\n\\t\\tconst endPosition = insertionPosition.getShiftedBy( length );\\n\\t\\tconst start = this.mergeAttributes( insertionPosition );\\n\\n\\t\\t// When no nodes were inserted - return collapsed range.\\n\\t\\tif ( length === 0 ) {\\n\\t\\t\\treturn new Range( start, start );\\n\\t\\t} else {\\n\\t\\t\\t// If start position was merged - move end position.\\n\\t\\t\\tif ( !start.isEqual( insertionPosition ) ) {\\n\\t\\t\\t\\tendPosition.offset--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst end = this.mergeAttributes( endPosition );\\n\\n\\t\\t\\treturn new Range( start, end );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes provided range from the container.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\\n\\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\\n\\t * same parent container.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} range Range to remove from container. After removing, it will be updated\\n\\t * to a collapsed range showing the new position.\\n\\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\\n\\t */\\n\\tremove( range ) {\\n\\t\\tvalidateRangeContainer( range );\\n\\n\\t\\t// If range is collapsed - nothing to remove.\\n\\t\\tif ( range.isCollapsed ) {\\n\\t\\t\\treturn new DocumentFragment();\\n\\t\\t}\\n\\n\\t\\t// Break attributes at range start and end.\\n\\t\\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\\n\\t\\tconst parentContainer = breakStart.parent;\\n\\n\\t\\tconst count = breakEnd.offset - breakStart.offset;\\n\\n\\t\\t// Remove nodes in range.\\n\\t\\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\\n\\n\\t\\t// Merge after removing.\\n\\t\\tconst mergePosition = this.mergeAttributes( breakStart );\\n\\t\\trange.start = mergePosition;\\n\\t\\trange.end = Position.createFromPosition( mergePosition );\\n\\n\\t\\t// Return removed nodes.\\n\\t\\treturn new DocumentFragment( removed );\\n\\t}\\n\\n\\t/**\\n\\t * Removes matching elements from given range.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\\n\\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\\n\\t * same parent container.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} range Range to clear.\\n\\t * @param {module:engine/view/element~Element} element Element to remove.\\n\\t */\\n\\tclear( range, element ) {\\n\\t\\tvalidateRangeContainer( range );\\n\\n\\t\\t// Create walker on given range.\\n\\t\\t// We walk backward because when we remove element during walk it modifies range end position.\\n\\t\\tconst walker = range.getWalker( {\\n\\t\\t\\tdirection: 'backward',\\n\\t\\t\\tignoreElementEnd: true\\n\\t\\t} );\\n\\n\\t\\t// Let's walk.\\n\\t\\tfor ( const current of walker ) {\\n\\t\\t\\tconst item = current.item;\\n\\t\\t\\tlet rangeToRemove;\\n\\n\\t\\t\\t// When current item matches to the given element.\\n\\t\\t\\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\\n\\t\\t\\t\\t// Create range on this element.\\n\\t\\t\\t\\trangeToRemove = Range.createOn( item );\\n\\t\\t\\t\\t// When range starts inside Text or TextProxy element.\\n\\t\\t\\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\\n\\t\\t\\t\\t// We need to check if parent of this text matches to given element.\\n\\t\\t\\t\\tconst parentElement = item.getAncestors().find( ancestor => {\\n\\t\\t\\t\\t\\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t// If it is then create range inside this element.\\n\\t\\t\\t\\tif ( parentElement ) {\\n\\t\\t\\t\\t\\trangeToRemove = Range.createIn( parentElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we have found element to remove.\\n\\t\\t\\tif ( rangeToRemove ) {\\n\\t\\t\\t\\t// We need to check if element range stick out of the given range and truncate if it is.\\n\\t\\t\\t\\tif ( rangeToRemove.end.isAfter( range.end ) ) {\\n\\t\\t\\t\\t\\trangeToRemove.end = range.end;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( rangeToRemove.start.isBefore( range.start ) ) {\\n\\t\\t\\t\\t\\trangeToRemove.start = range.start;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// At the end we remove range with found element.\\n\\t\\t\\t\\tthis.remove( rangeToRemove );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Moves nodes from provided range to target position.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\\n\\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\\n\\t * same parent container.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\\n\\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\\n\\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\\n\\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\\n\\t */\\n\\tmove( sourceRange, targetPosition ) {\\n\\t\\tlet nodes;\\n\\n\\t\\tif ( targetPosition.isAfter( sourceRange.end ) ) {\\n\\t\\t\\ttargetPosition = _breakAttributes( targetPosition, true );\\n\\n\\t\\t\\tconst parent = targetPosition.parent;\\n\\t\\t\\tconst countBefore = parent.childCount;\\n\\n\\t\\t\\tsourceRange = _breakAttributesRange( sourceRange, true );\\n\\n\\t\\t\\tnodes = this.remove( sourceRange );\\n\\n\\t\\t\\ttargetPosition.offset += ( parent.childCount - countBefore );\\n\\t\\t} else {\\n\\t\\t\\tnodes = this.remove( sourceRange );\\n\\t\\t}\\n\\n\\t\\treturn this.insert( targetPosition, nodes );\\n\\t}\\n\\n\\t/**\\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\\n     *\\n     * If a collapsed range was passed and is same as selection, the selection\\n     * will be moved to the inside of the wrapped attribute element.\\n     *\\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\\n     * when {@link module:engine/view/range~Range#start}\\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\\n     *\\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\\n     * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\\n     *\\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\\n     * is collapsed and different than view selection.\\n     *\\n     * @param {module:engine/view/range~Range} range Range to wrap.\\n     * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\\n     * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\\n    */\\n\\twrap( range, attribute ) {\\n\\t\\tif ( !( attribute instanceof AttributeElement ) ) {\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute' );\\n\\t\\t}\\n\\n\\t\\tvalidateRangeContainer( range );\\n\\n\\t\\tif ( !range.isCollapsed ) {\\n\\t\\t\\t// Non-collapsed range. Wrap it with the attribute element.\\n\\t\\t\\treturn this._wrapRange( range, attribute );\\n\\t\\t} else {\\n\\t\\t\\t// Collapsed range. Wrap position.\\n\\t\\t\\tlet position = range.start;\\n\\n\\t\\t\\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\\n\\t\\t\\t\\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tposition = this._wrapPosition( position, attribute );\\n\\t\\t\\tconst viewSelection = this.document.selection;\\n\\n\\t\\t\\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\\n\\t\\t\\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\\n\\t\\t\\t\\tthis.setSelection( position );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new Range( position );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Unwraps nodes within provided range from attribute element.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\\n\\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\\n\\t * same parent container.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} range\\n\\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\\n\\t */\\n\\tunwrap( range, attribute ) {\\n\\t\\tif ( !( attribute instanceof AttributeElement ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Attribute element need to be instance of attribute element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-unwrap-invalid-attribute\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute' );\\n\\t\\t}\\n\\n\\t\\tvalidateRangeContainer( range );\\n\\n\\t\\t// If range is collapsed - nothing to unwrap.\\n\\t\\tif ( range.isCollapsed ) {\\n\\t\\t\\treturn range;\\n\\t\\t}\\n\\n\\t\\t// Break attributes at range start and end.\\n\\t\\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\\n\\n\\t\\t// Range around one element - check if AttributeElement can be unwrapped partially when it's not similar.\\n\\t\\t// For example:\\n\\t\\t// <b class=\\\"foo bar\\\" title=\\\"baz\\\"></b> unwrap with:\\t<b class=\\\"foo\\\"></p> result: <b class\\\"bar\\\" title=\\\"baz\\\"></b>\\n\\t\\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\\n\\t\\t\\tconst node = breakStart.nodeAfter;\\n\\n\\t\\t\\t// Unwrap single attribute element.\\n\\t\\t\\tif ( !attribute.isSimilar( node ) && node instanceof AttributeElement && this._unwrapAttributeElement( attribute, node ) ) {\\n\\t\\t\\t\\tconst start = this.mergeAttributes( breakStart );\\n\\n\\t\\t\\t\\tif ( !start.isEqual( breakStart ) ) {\\n\\t\\t\\t\\t\\tbreakEnd.offset--;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst end = this.mergeAttributes( breakEnd );\\n\\n\\t\\t\\t\\treturn new Range( start, end );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst parentContainer = breakStart.parent;\\n\\n\\t\\t// Unwrap children located between break points.\\n\\t\\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\\n\\n\\t\\t// Merge attributes at the both ends and return a new range.\\n\\t\\tconst start = this.mergeAttributes( newRange.start );\\n\\n\\t\\t// If start position was merged - move end position back.\\n\\t\\tif ( !start.isEqual( newRange.start ) ) {\\n\\t\\t\\tnewRange.end.offset--;\\n\\t\\t}\\n\\n\\t\\tconst end = this.mergeAttributes( newRange.end );\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n\\n\\t/**\\n\\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\\n\\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\\n\\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\\n\\t *\\n\\t * New element has to be created because `Element#tagName` property in DOM is readonly.\\n\\t *\\n\\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\\n\\t *\\n\\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\\n\\t * @param {String} newName New name for element.\\n\\t */\\n\\trename( viewElement, newName ) {\\n\\t\\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\\n\\n\\t\\tthis.insert( Position.createAfter( viewElement ), newElement );\\n\\t\\tthis.move( Range.createIn( viewElement ), Position.createAt( newElement ) );\\n\\t\\tthis.remove( Range.createOn( viewElement ) );\\n\\n\\t\\treturn newElement;\\n\\t}\\n\\n\\t/**\\n\\t * Wraps children with provided `attribute`. Only children contained in `parent` element between\\n\\t * `startOffset` and `endOffset` will be wrapped.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} parent\\n\\t * @param {Number} startOffset\\n\\t * @param {Number} endOffset\\n\\t * @param {module:engine/view/element~Element} attribute\\n\\t */\\n\\t_wrapChildren( parent, startOffset, endOffset, attribute ) {\\n\\t\\tlet i = startOffset;\\n\\t\\tconst wrapPositions = [];\\n\\n\\t\\twhile ( i < endOffset ) {\\n\\t\\t\\tconst child = parent.getChild( i );\\n\\t\\t\\tconst isText = child.is( 'text' );\\n\\t\\t\\tconst isAttribute = child.is( 'attributeElement' );\\n\\t\\t\\tconst isEmpty = child.is( 'emptyElement' );\\n\\t\\t\\tconst isUI = child.is( 'uiElement' );\\n\\n\\t\\t\\t// Wrap text, empty elements, ui elements or attributes with higher or equal priority.\\n\\t\\t\\tif ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( attribute, child ) ) ) {\\n\\t\\t\\t\\t// Clone attribute.\\n\\t\\t\\t\\tconst newAttribute = attribute._clone();\\n\\n\\t\\t\\t\\t// Wrap current node with new attribute;\\n\\t\\t\\t\\tchild._remove();\\n\\t\\t\\t\\tnewAttribute._appendChildren( child );\\n\\t\\t\\t\\tparent._insertChildren( i, newAttribute );\\n\\n\\t\\t\\t\\twrapPositions.push(\\tnew Position( parent, i ) );\\n\\t\\t\\t}\\n\\t\\t\\t// If other nested attribute is found start wrapping there.\\n\\t\\t\\telse if ( isAttribute ) {\\n\\t\\t\\t\\tthis._wrapChildren( child, 0, child.childCount, attribute );\\n\\t\\t\\t}\\n\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\t// Merge at each wrap.\\n\\t\\tlet offsetChange = 0;\\n\\n\\t\\tfor ( const position of wrapPositions ) {\\n\\t\\t\\tposition.offset -= offsetChange;\\n\\n\\t\\t\\t// Do not merge with elements outside selected children.\\n\\t\\t\\tif ( position.offset == startOffset ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst newPosition = this.mergeAttributes( position );\\n\\n\\t\\t\\t// If nodes were merged - other merge offsets will change.\\n\\t\\t\\tif ( !newPosition.isEqual( position ) ) {\\n\\t\\t\\t\\toffsetChange++;\\n\\t\\t\\t\\tendOffset--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn Range.createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Unwraps children from provided `attribute`. Only children contained in `parent` element between\\n\\t * `startOffset` and `endOffset` will be unwrapped.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} parent\\n\\t * @param {Number} startOffset\\n\\t * @param {Number} endOffset\\n\\t * @param {module:engine/view/element~Element} attribute\\n\\t */\\n\\t_unwrapChildren( parent, startOffset, endOffset, attribute ) {\\n\\t\\tlet i = startOffset;\\n\\t\\tconst unwrapPositions = [];\\n\\n\\t\\t// Iterate over each element between provided offsets inside parent.\\n\\t\\twhile ( i < endOffset ) {\\n\\t\\t\\tconst child = parent.getChild( i );\\n\\n\\t\\t\\t// If attributes are the similar, then unwrap.\\n\\t\\t\\tif ( child.isSimilar( attribute ) ) {\\n\\t\\t\\t\\tconst unwrapped = child.getChildren();\\n\\t\\t\\t\\tconst count = child.childCount;\\n\\n\\t\\t\\t\\t// Replace wrapper element with its children\\n\\t\\t\\t\\tchild._remove();\\n\\t\\t\\t\\tparent._insertChildren( i, unwrapped );\\n\\n\\t\\t\\t\\t// Save start and end position of moved items.\\n\\t\\t\\t\\tunwrapPositions.push(\\n\\t\\t\\t\\t\\tnew Position( parent, i ),\\n\\t\\t\\t\\t\\tnew Position( parent, i + count )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// Skip elements that were unwrapped. Assuming that there won't be another element to unwrap in child\\n\\t\\t\\t\\t// elements.\\n\\t\\t\\t\\ti += count;\\n\\t\\t\\t\\tendOffset += count - 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If other nested attribute is found start unwrapping there.\\n\\t\\t\\t\\tif ( child.is( 'attributeElement' ) ) {\\n\\t\\t\\t\\t\\tthis._unwrapChildren( child, 0, child.childCount, attribute );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Merge at each unwrap.\\n\\t\\tlet offsetChange = 0;\\n\\n\\t\\tfor ( const position of unwrapPositions ) {\\n\\t\\t\\tposition.offset -= offsetChange;\\n\\n\\t\\t\\t// Do not merge with elements outside selected children.\\n\\t\\t\\tif ( position.offset == startOffset || position.offset == endOffset ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst newPosition = this.mergeAttributes( position );\\n\\n\\t\\t\\t// If nodes were merged - other merge offsets will change.\\n\\t\\t\\tif ( !newPosition.isEqual( position ) ) {\\n\\t\\t\\t\\toffsetChange++;\\n\\t\\t\\t\\tendOffset--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn Range.createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\\n\\t * This method will also merge newly added attribute element with its siblings whenever possible.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\\n\\t * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/range~Range} range\\n\\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\\n\\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\\n\\t */\\n\\t_wrapRange( range, attribute ) {\\n\\t\\t// Range is inside single attribute and spans on all children.\\n\\t\\tif ( rangeSpansOnAllChildren( range ) && this._wrapAttributeElement( attribute, range.start.parent ) ) {\\n\\t\\t\\tconst parent = range.start.parent;\\n\\n\\t\\t\\tconst end = this.mergeAttributes( Position.createAfter( parent ) );\\n\\t\\t\\tconst start = this.mergeAttributes( Position.createBefore( parent ) );\\n\\n\\t\\t\\treturn new Range( start, end );\\n\\t\\t}\\n\\n\\t\\t// Break attributes at range start and end.\\n\\t\\tconst { start: breakStart, end: breakEnd } = _breakAttributesRange( range, true );\\n\\n\\t\\t// Range around one element.\\n\\t\\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\\n\\t\\t\\tconst node = breakStart.nodeAfter;\\n\\n\\t\\t\\tif ( node instanceof AttributeElement && this._wrapAttributeElement( attribute, node ) ) {\\n\\t\\t\\t\\tconst start = this.mergeAttributes( breakStart );\\n\\n\\t\\t\\t\\tif ( !start.isEqual( breakStart ) ) {\\n\\t\\t\\t\\t\\tbreakEnd.offset--;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst end = this.mergeAttributes( breakEnd );\\n\\n\\t\\t\\t\\treturn new Range( start, end );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst parentContainer = breakStart.parent;\\n\\n\\t\\t// Unwrap children located between break points.\\n\\t\\tconst unwrappedRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\\n\\n\\t\\t// Wrap all children with attribute.\\n\\t\\tconst newRange = this._wrapChildren( parentContainer, unwrappedRange.start.offset, unwrappedRange.end.offset, attribute );\\n\\n\\t\\t// Merge attributes at the both ends and return a new range.\\n\\t\\tconst start = this.mergeAttributes( newRange.start );\\n\\n\\t\\t// If start position was merged - move end position back.\\n\\t\\tif ( !start.isEqual( newRange.start ) ) {\\n\\t\\t\\tnewRange.end.offset--;\\n\\t\\t}\\n\\t\\tconst end = this.mergeAttributes( newRange.end );\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n\\n\\t/**\\n\\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\\n\\t * This method will also merge newly added attribute element with its siblings whenever possible.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\\n\\t * an instance of {module:engine/view/attributeelement~AttributeElement AttributeElement}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/position~Position} position\\n\\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\\n\\t * @returns {module:engine/view/position~Position} New position after wrapping.\\n\\t */\\n\\t_wrapPosition( position, attribute ) {\\n\\t\\t// Return same position when trying to wrap with attribute similar to position parent.\\n\\t\\tif ( attribute.isSimilar( position.parent ) ) {\\n\\t\\t\\treturn movePositionToTextNode( Position.createFromPosition( position ) );\\n\\t\\t}\\n\\n\\t\\t// When position is inside text node - break it and place new position between two text nodes.\\n\\t\\tif ( position.parent.is( 'text' ) ) {\\n\\t\\t\\tposition = breakTextNode( position );\\n\\t\\t}\\n\\n\\t\\t// Create fake element that will represent position, and will not be merged with other attributes.\\n\\t\\tconst fakePosition = this.createAttributeElement();\\n\\t\\tfakePosition._priority = Number.POSITIVE_INFINITY;\\n\\t\\tfakePosition.isSimilar = () => false;\\n\\n\\t\\t// Insert fake element in position location.\\n\\t\\tposition.parent._insertChildren( position.offset, fakePosition );\\n\\n\\t\\t// Range around inserted fake attribute element.\\n\\t\\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\\n\\n\\t\\t// Wrap fake element with attribute (it will also merge if possible).\\n\\t\\tthis.wrap( wrapRange, attribute );\\n\\n\\t\\t// Remove fake element and place new position there.\\n\\t\\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\\n\\t\\tfakePosition._remove();\\n\\n\\t\\t// If position is placed between text nodes - merge them and return position inside.\\n\\t\\tconst nodeBefore = newPosition.nodeBefore;\\n\\t\\tconst nodeAfter = newPosition.nodeAfter;\\n\\n\\t\\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\\n\\t\\t\\treturn mergeTextNodes( nodeBefore, nodeAfter );\\n\\t\\t}\\n\\n\\t\\t// If position is next to text node - move position inside.\\n\\t\\treturn movePositionToTextNode( newPosition );\\n\\t}\\n\\n\\t/**\\n\\t * \\tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\\n\\t * \\tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\\n\\t * \\telement to element being wrapped.\\n\\t *\\n\\t * \\t@private\\n\\t * \\t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\\n\\t * \\t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\\n\\t * \\t@returns {Boolean} Returns `true` if elements are merged.\\n\\t */\\n\\t_wrapAttributeElement( wrapper, toWrap ) {\\n\\t\\t// Can't merge if name or priority differs.\\n\\t\\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Check if attributes can be merged.\\n\\t\\tfor ( const key of wrapper.getAttributeKeys() ) {\\n\\t\\t\\t// Classes and styles should be checked separately.\\n\\t\\t\\tif ( key === 'class' || key === 'style' ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If some attributes are different we cannot wrap.\\n\\t\\t\\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check if styles can be merged.\\n\\t\\tfor ( const key of wrapper.getStyleNames() ) {\\n\\t\\t\\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\\n\\t\\tfor ( const key of wrapper.getAttributeKeys() ) {\\n\\t\\t\\t// Classes and styles should be checked separately.\\n\\t\\t\\tif ( key === 'class' || key === 'style' ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Move only these attributes that are not present - other are similar.\\n\\t\\t\\tif ( !toWrap.hasAttribute( key ) ) {\\n\\t\\t\\t\\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( const key of wrapper.getStyleNames() ) {\\n\\t\\t\\tif ( !toWrap.hasStyle( key ) ) {\\n\\t\\t\\t\\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( const key of wrapper.getClassNames() ) {\\n\\t\\t\\tif ( !toWrap.hasClass( key ) ) {\\n\\t\\t\\t\\tthis.addClass( key, toWrap );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\\n\\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\\n\\t * inside element being unwrapped.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\\n\\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\\n\\t * @returns {Boolean} Returns `true` if elements are unwrapped.\\n\\t **/\\n\\t_unwrapAttributeElement( wrapper, toUnwrap ) {\\n\\t\\t// Can't unwrap if name or priority differs.\\n\\t\\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Check if AttributeElement has all wrapper attributes.\\n\\t\\tfor ( const key of wrapper.getAttributeKeys() ) {\\n\\t\\t\\t// Classes and styles should be checked separately.\\n\\t\\t\\tif ( key === 'class' || key === 'style' ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If some attributes are missing or different we cannot unwrap.\\n\\t\\t\\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check if AttributeElement has all wrapper classes.\\n\\t\\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Check if AttributeElement has all wrapper styles.\\n\\t\\tfor ( const key of wrapper.getStyleNames() ) {\\n\\t\\t\\t// If some styles are missing or different we cannot unwrap.\\n\\t\\t\\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove all wrapper's attributes from unwrapped element.\\n\\t\\tfor ( const key of wrapper.getAttributeKeys() ) {\\n\\t\\t\\t// Classes and styles should be checked separately.\\n\\t\\t\\tif ( key === 'class' || key === 'style' ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.removeAttribute( key, toUnwrap );\\n\\t\\t}\\n\\n\\t\\t// Remove all wrapper's classes from unwrapped element.\\n\\t\\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\\n\\n\\t\\t// Remove all wrapper's styles from unwrapped element.\\n\\t\\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\\n\\n\\t\\treturn true;\\n\\t}\\n}\\n\\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\\nfunction _hasNonUiChildren( parent ) {\\n\\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\\n}\\n\\n/**\\n * Attribute element need to be instance of attribute element.\\n *\\n * @error view-writer-wrap-invalid-attribute\\n */\\n\\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\\n// Position's parent node is checked as first, then next parents are checked.\\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\\n//\\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\\n// Parent container element or `undefined` if container is not found.\\nfunction getParentContainer( position ) {\\n\\tlet parent = position.parent;\\n\\n\\twhile ( !isContainerOrFragment( parent ) ) {\\n\\t\\tif ( !parent ) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tparent = parent.parent;\\n\\t}\\n\\n\\treturn parent;\\n}\\n\\n// Function used by both public breakAttributes (without splitting text nodes) and by other methods (with\\n// splitting text nodes).\\n//\\n// @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\\n// @param {Boolean} [forceSplitText = false] If set to `true`, will break text nodes even if they are directly in\\n// container element. This behavior will result in incorrect view state, but is needed by other view writing methods\\n// which then fixes view state. Defaults to `false`.\\n// @returns {module:engine/view/range~Range} New range with located at break positions.\\nfunction _breakAttributesRange( range, forceSplitText = false ) {\\n\\tconst rangeStart = range.start;\\n\\tconst rangeEnd = range.end;\\n\\n\\tvalidateRangeContainer( range );\\n\\n\\t// Break at the collapsed position. Return new collapsed range.\\n\\tif ( range.isCollapsed ) {\\n\\t\\tconst position = _breakAttributes( range.start, forceSplitText );\\n\\n\\t\\treturn new Range( position, position );\\n\\t}\\n\\n\\tconst breakEnd = _breakAttributes( rangeEnd, forceSplitText );\\n\\tconst count = breakEnd.parent.childCount;\\n\\tconst breakStart = _breakAttributes( rangeStart, forceSplitText );\\n\\n\\t// Calculate new break end offset.\\n\\tbreakEnd.offset += breakEnd.parent.childCount - count;\\n\\n\\treturn new Range( breakStart, breakEnd );\\n}\\n\\n// Function used by public breakAttributes (without splitting text nodes) and by other methods (with\\n// splitting text nodes).\\n//\\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\\n// is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\\n//\\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\\n// is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\\n//\\n// @param {module:engine/view/position~Position} position Position where to break attributes.\\n// @param {Boolean} [forceSplitText = false] If set to `true`, will break text nodes even if they are directly in\\n// container element. This behavior will result in incorrect view state, but is needed by other view writing methods\\n// which then fixes view state. Defaults to `false`.\\n// @returns {module:engine/view/position~Position} New position after breaking the attributes.\\nfunction _breakAttributes( position, forceSplitText = false ) {\\n\\tconst positionOffset = position.offset;\\n\\tconst positionParent = position.parent;\\n\\n\\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\\n\\tif ( position.parent.is( 'emptyElement' ) ) {\\n\\t\\t/**\\n\\t\\t * Cannot break inside EmptyElement instance.\\n\\t\\t *\\n\\t\\t * @error view-writer-cannot-break-empty-element\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element' );\\n\\t}\\n\\n\\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\\n\\tif ( position.parent.is( 'uiElement' ) ) {\\n\\t\\t/**\\n\\t\\t * Cannot break inside UIElement instance.\\n\\t\\t *\\n\\t\\t * @error view-writer-cannot-break-ui-element\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element' );\\n\\t}\\n\\n\\t// There are no attributes to break and text nodes breaking is not forced.\\n\\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\\n\\t\\treturn Position.createFromPosition( position );\\n\\t}\\n\\n\\t// Position's parent is container, so no attributes to break.\\n\\tif ( isContainerOrFragment( positionParent ) ) {\\n\\t\\treturn Position.createFromPosition( position );\\n\\t}\\n\\n\\t// Break text and start again in new position.\\n\\tif ( positionParent.is( 'text' ) ) {\\n\\t\\treturn _breakAttributes( breakTextNode( position ), forceSplitText );\\n\\t}\\n\\n\\tconst length = positionParent.childCount;\\n\\n\\t// <p>foo<b><u>bar{}</u></b></p>\\n\\t// <p>foo<b><u>bar</u>[]</b></p>\\n\\t// <p>foo<b><u>bar</u></b>[]</p>\\n\\tif ( positionOffset == length ) {\\n\\t\\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\\n\\n\\t\\treturn _breakAttributes( newPosition, forceSplitText );\\n\\t} else\\n\\t// <p>foo<b><u>{}bar</u></b></p>\\n\\t// <p>foo<b>[]<u>bar</u></b></p>\\n\\t// <p>foo{}<b><u>bar</u></b></p>\\n\\tif ( positionOffset === 0 ) {\\n\\t\\tconst newPosition = new Position( positionParent.parent, positionParent.index );\\n\\n\\t\\treturn _breakAttributes( newPosition, forceSplitText );\\n\\t}\\n\\t// <p>foo<b><u>b{}ar</u></b></p>\\n\\t// <p>foo<b><u>b[]ar</u></b></p>\\n\\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\\n\\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\\n\\telse {\\n\\t\\tconst offsetAfter = positionParent.index + 1;\\n\\n\\t\\t// Break element.\\n\\t\\tconst clonedNode = positionParent._clone();\\n\\n\\t\\t// Insert cloned node to position's parent node.\\n\\t\\tpositionParent.parent._insertChildren( offsetAfter, clonedNode );\\n\\n\\t\\t// Get nodes to move.\\n\\t\\tconst count = positionParent.childCount - positionOffset;\\n\\t\\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\\n\\n\\t\\t// Move nodes to cloned node.\\n\\t\\tclonedNode._appendChildren( nodesToMove );\\n\\n\\t\\t// Create new position to work on.\\n\\t\\tconst newPosition = new Position( positionParent.parent, offsetAfter );\\n\\n\\t\\treturn _breakAttributes( newPosition, forceSplitText );\\n\\t}\\n}\\n\\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\\n// can be wrapped otuside second element. It is done by comparing elements'\\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\\n//\\n// @param {module:engine/view/attributeelement~AttributeElement} a\\n// @param {module:engine/view/attributeelement~AttributeElement} b\\n// @returns {Boolean}\\nfunction shouldABeOutsideB( a, b ) {\\n\\tif ( a.priority < b.priority ) {\\n\\t\\treturn true;\\n\\t} else if ( a.priority > b.priority ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// When priorities are equal and names are different - use identities.\\n\\treturn a.getIdentity() < b.getIdentity();\\n}\\n\\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\\n// specified position.\\n//\\n//\\t\\t<p>foo[]</p>  ->  <p>foo{}</p>\\n//\\t\\t<p>[]foo</p>  ->  <p>{}foo</p>\\n//\\n// @param {module:engine/view/position~Position} position\\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\\n// before or after position location.\\nfunction movePositionToTextNode( position ) {\\n\\tconst nodeBefore = position.nodeBefore;\\n\\n\\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\\n\\t\\treturn new Position( nodeBefore, nodeBefore.data.length );\\n\\t}\\n\\n\\tconst nodeAfter = position.nodeAfter;\\n\\n\\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\\n\\t\\treturn new Position( nodeAfter, 0 );\\n\\t}\\n\\n\\treturn position;\\n}\\n\\n// Breaks text node into two text nodes when possible.\\n//\\n//\\t\\t<p>foo{}bar</p> -> <p>foo[]bar</p>\\n//\\t\\t<p>{}foobar</p> -> <p>[]foobar</p>\\n//\\t\\t<p>foobar{}</p> -> <p>foobar[]</p>\\n//\\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\\n// @returns {module:engine/view/position~Position} New position after breaking text node.\\nfunction breakTextNode( position ) {\\n\\tif ( position.offset == position.parent.data.length ) {\\n\\t\\treturn new Position( position.parent.parent, position.parent.index + 1 );\\n\\t}\\n\\n\\tif ( position.offset === 0 ) {\\n\\t\\treturn new Position( position.parent.parent, position.parent.index );\\n\\t}\\n\\n\\t// Get part of the text that need to be moved.\\n\\tconst textToMove = position.parent.data.slice( position.offset );\\n\\n\\t// Leave rest of the text in position's parent.\\n\\tposition.parent._data = position.parent.data.slice( 0, position.offset );\\n\\n\\t// Insert new text node after position's parent text node.\\n\\tposition.parent.parent._insertChildren( position.parent.index + 1, new Text( textToMove ) );\\n\\n\\t// Return new position between two newly created text nodes.\\n\\treturn new Position( position.parent.parent, position.parent.index + 1 );\\n}\\n\\n// Merges two text nodes into first node. Removes second node and returns merge position.\\n//\\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\\n// this text node.\\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\\nfunction mergeTextNodes( t1, t2 ) {\\n\\t// Merge text data into first text node and remove second one.\\n\\tconst nodeBeforeLength = t1.data.length;\\n\\tt1._data += t2.data;\\n\\tt2._remove();\\n\\n\\treturn new Position( t1, nodeBeforeLength );\\n}\\n\\n// Returns `true` if range is located in same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}\\n// (`start` and `end` positions are located inside same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}),\\n// starts on 0 offset and ends after last child node.\\n//\\n// @param {module:engine/view/range~Range} Range\\n// @returns {Boolean}\\nfunction rangeSpansOnAllChildren( range ) {\\n\\treturn range.start.parent == range.end.parent && range.start.parent.is( 'attributeElement' ) &&\\n\\t\\trange.start.offset === 0 && range.end.offset === range.start.parent.childCount;\\n}\\n\\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\\n// {@link module:engine/view/uielement~UIElement UIElement}.\\n//\\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\\n// contains instances that are not {@link module:engine/view/text~Text Texts},\\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\\n// {@link module:engine/view/uielement~UIElement UIElements},\\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\\n//\\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\\n// |module:engine/view/containerelement~ContainerElement> nodes\\nfunction validateNodesToInsert( nodes ) {\\n\\tfor ( const node of nodes ) {\\n\\t\\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\\n\\t\\t\\t/**\\n\\t\\t\\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\\n\\t\\t\\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\\n\\t\\t\\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\\n\\t\\t\\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-writer-insert-invalid-node\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-writer-insert-invalid-node' );\\n\\t\\t}\\n\\n\\t\\tif ( !node.is( 'text' ) ) {\\n\\t\\t\\tvalidateNodesToInsert( node.getChildren() );\\n\\t\\t}\\n\\t}\\n}\\n\\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\\n\\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\\n//\\n// @param {module:engine/view/node~Node} node\\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\\nfunction isContainerOrFragment( node ) {\\n\\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\\n}\\n\\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\\n//\\n// @param {module:engine/view/range~Range} range\\nfunction validateRangeContainer( range ) {\\n\\tconst startContainer = getParentContainer( range.start );\\n\\tconst endContainer = getParentContainer( range.end );\\n\\n\\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\\n\\t\\t/**\\n\\t\\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\\n\\t\\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\\n\\t\\t * parent container for these positions cannot be found.\\n\\t\\t *\\n\\t\\t * @error view-writer-invalid-range-container\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'view-writer-invalid-range-container' );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals window, Text */\\n\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\n/**\\n * Set of utils related to block and inline fillers handling.\\n *\\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\\n * empty elements which should be selectable with elements or characters called \\\"fillers\\\". Unfortunately there is no one\\n * universal filler, this is why two types are uses:\\n *\\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\\n *\\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\\n * code is needed to handle the caret.\\n *\\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\\n * view.\\n *\\n * @module engine/view/filler\\n */\\n\\n/**\\n * `<br> filler creator. This is a function which creates `<br data-cke-filler=\\\"true\\\">` element.\\n * It defines how the filler is created.\\n *\\n * @see module:engine/view/filler~NBSP_FILLER\\n * @function\\n */\\nexport const BR_FILLER = domDocument => {\\n\\tconst fillerBr = domDocument.createElement( 'br' );\\n\\tfillerBr.dataset.ckeFiller = true;\\n\\n\\treturn fillerBr;\\n};\\n\\n/**\\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\\n * It defines how the filler is created.\\n *\\n * @see module:engine/view/filler~BR_FILLER\\n * @function\\n */\\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\\\u00A0' );\\n\\n/**\\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\\n */\\nexport const INLINE_FILLER_LENGTH = 7;\\n\\n/**\\n * Inline filler which is sequence of the zero width spaces.\\n */\\nexport let INLINE_FILLER = '';\\n\\nfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\\n\\tINLINE_FILLER += '\\\\u200b';\\n}\\n\\n/**\\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\\n *\\n *\\t\\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\\n *\\t\\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\\n *\\t\\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\\n *\\t\\tstartsWithFiller( document.createElement( 'p' ) ); // false\\n *\\n * @param {Node} domNode DOM node.\\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\\n */\\nexport function startsWithFiller( domNode ) {\\n\\treturn ( domNode instanceof Text ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\\n}\\n\\n/**\\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\\n *\\n *\\t\\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\\n *\\t\\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\\n *\\n * @param {Text} domText DOM text node.\\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\\n */\\nexport function isInlineFiller( domText ) {\\n\\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\\n}\\n\\n/**\\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\\n * if text node contains it.\\n *\\n *\\t\\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\\n *\\t\\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\\n *\\n * @param {Text} domText DOM text node, possible with inline filler.\\n * @returns {String} Data without filler.\\n */\\nexport function getDataWithoutFiller( domText ) {\\n\\tif ( startsWithFiller( domText ) ) {\\n\\t\\treturn domText.data.slice( INLINE_FILLER_LENGTH );\\n\\t} else {\\n\\t\\treturn domText.data;\\n\\t}\\n}\\n\\n// Cache block fillers templates to improve performance.\\nconst templateBlockFillers = new WeakMap();\\n\\n/**\\n * Checks if the node is an instance of the block filler of the given type.\\n *\\n *\\t\\tconst brFillerInstance = BR_FILLER( document );\\n *\\t\\tisBlockFiller( brFillerInstance, BR_FILLER ); // true\\n *\\n * @param {Node} domNode DOM node to check.\\n * @param {Function} blockFiller Block filler creator.\\n * @returns {Boolean} True if text node contains only {@link module:engine/view/filler~INLINE_FILLER inline filler}.\\n */\\nexport function isBlockFiller( domNode, blockFiller ) {\\n\\tlet templateBlockFiller = templateBlockFillers.get( blockFiller );\\n\\n\\tif ( !templateBlockFiller ) {\\n\\t\\ttemplateBlockFiller = blockFiller( window.document );\\n\\t\\ttemplateBlockFillers.set( blockFiller, templateBlockFiller );\\n\\t}\\n\\n\\treturn domNode.isEqualNode( templateBlockFiller );\\n}\\n\\n/**\\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\\n * the left arrow is pressed, so the filler does not break navigation.\\n *\\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\\n */\\nexport function injectQuirksHandling( view ) {\\n\\tview.document.on( 'keydown', jumpOverInlineFiller );\\n}\\n\\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\\nfunction jumpOverInlineFiller( evt, data ) {\\n\\tif ( data.keyCode == keyCodes.arrowleft ) {\\n\\t\\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\\n\\n\\t\\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\\n\\t\\t\\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\\n\\t\\t\\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\\n\\n\\t\\t\\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\\n\\t\\t\\t\\tdomSelection.collapse( domParent, 0 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/diff\\n */\\n\\n// The following code is based on the \\\"O(NP) Sequence Comparison Algorithm\\\"\\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\\n\\n/**\\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\\n * necessary to transform input into output.\\n *\\n *\\t\\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\\n *\\n * @param {Array|String} a Input array or string.\\n * @param {Array|String} b Output array or string.\\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\\n * @returns {Array} Array of changes.\\n */\\nexport default function diff( a, b, cmp ) {\\n\\t// Set the comparator function.\\n\\tcmp = cmp || function( a, b ) {\\n\\t\\treturn a === b;\\n\\t};\\n\\n\\t// Temporary action type statics.\\n\\tlet _insert, _delete;\\n\\n\\t// Swapped the arrays to use the shorter one as the first one.\\n\\tif ( b.length < a.length ) {\\n\\t\\tconst tmp = a;\\n\\n\\t\\ta = b;\\n\\t\\tb = tmp;\\n\\n\\t\\t// We swap the action types as well.\\n\\t\\t_insert = 'delete';\\n\\t\\t_delete = 'insert';\\n\\t} else {\\n\\t\\t_insert = 'insert';\\n\\t\\t_delete = 'delete';\\n\\t}\\n\\n\\tconst m = a.length;\\n\\tconst n = b.length;\\n\\tconst delta = n - m;\\n\\n\\t// Edit scripts, for each diagonal.\\n\\tconst es = {};\\n\\t// Furthest points, the furthest y we can get on each diagonal.\\n\\tconst fp = {};\\n\\n\\tfunction snake( k ) {\\n\\t\\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\\n\\t\\t// Furthest points (y) on the diagonal below k.\\n\\t\\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\\n\\t\\t// Furthest points (y) on the diagonal above k.\\n\\t\\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\\n\\t\\t// The way we should go to get further.\\n\\t\\tconst dir = y1 > y2 ? -1 : 1;\\n\\n\\t\\t// Clone previous changes array (if any).\\n\\t\\tif ( es[ k + dir ] ) {\\n\\t\\t\\tes[ k ] = es[ k + dir ].slice( 0 );\\n\\t\\t}\\n\\n\\t\\t// Create changes array.\\n\\t\\tif ( !es[ k ] ) {\\n\\t\\t\\tes[ k ] = [];\\n\\t\\t}\\n\\n\\t\\t// Push the action.\\n\\t\\tes[ k ].push( y1 > y2 ? _insert : _delete );\\n\\n\\t\\t// Set the beginning coordinates.\\n\\t\\tlet y = Math.max( y1, y2 );\\n\\t\\tlet x = y - k;\\n\\n\\t\\t// Traverse the diagonal as long as the values match.\\n\\t\\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\\n\\t\\t\\tx++;\\n\\t\\t\\ty++;\\n\\t\\t\\t// Push no change action.\\n\\t\\t\\tes[ k ].push( 'equal' );\\n\\t\\t}\\n\\n\\t\\treturn y;\\n\\t}\\n\\n\\tlet p = 0;\\n\\tlet k;\\n\\n\\t// Traverse the graph until we reach the end of the longer string.\\n\\tdo {\\n\\t\\t// Updates furthest points and edit scripts for diagonals below delta.\\n\\t\\tfor ( k = -p; k < delta; k++ ) {\\n\\t\\t\\tfp[ k ] = snake( k );\\n\\t\\t}\\n\\n\\t\\t// Updates furthest points and edit scripts for diagonals above delta.\\n\\t\\tfor ( k = delta + p; k > delta; k-- ) {\\n\\t\\t\\tfp[ k ] = snake( k );\\n\\t\\t}\\n\\n\\t\\t// Updates furthest point and edit script for the delta diagonal.\\n\\t\\t// note that the delta diagonal is the one which goes through the sink (m, n).\\n\\t\\tfp[ delta ] = snake( delta );\\n\\n\\t\\tp++;\\n\\t} while ( fp[ delta ] !== n );\\n\\n\\t// Return the final list of edit changes.\\n\\t// We remove the first item that represents the action for the injected nulls.\\n\\treturn es[ delta ].slice( 1 );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/insertat\\n */\\n\\n/**\\n * Inserts node to the parent at given index.\\n *\\n * @param {Element} parentElement Parent element.\\n * @param {Number} index Insertions index.\\n * @param {Node} nodeToInsert Node to insert.\\n */\\nexport default function insertAt( parentElement, index, nodeToInsert ) {\\n\\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/remove\\n */\\n\\n/**\\n * Removes given node from parent.\\n *\\n * @param {Node} node Node to remove.\\n */\\nexport default function remove( node ) {\\n\\tconst parent = node.parentNode;\\n\\n\\tif ( parent ) {\\n\\t\\tparent.removeChild( node );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/istext\\n */\\n\\n/**\\n * Checks if the object is a native DOM Text node.\\n *\\n * @param {*} obj\\n * @returns {Boolean}\\n */\\nexport default function isText( obj ) {\\n\\treturn Object.prototype.toString.call( obj ) == '[object Text]';\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/renderer\\n */\\n\\nimport ViewText from './text';\\nimport ViewPosition from './position';\\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller, isBlockFiller } from './filler';\\n\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\\n\\n/**\\n * Renderer updates DOM structure and selection, to make them a reflection of the view structure and selection.\\n *\\n * View nodes which may need to be rendered needs to be {@link module:engine/view/renderer~Renderer#markToSync marked}.\\n * Then, on {@link module:engine/view/renderer~Renderer#render render}, renderer compares view nodes with DOM nodes\\n * in order to check which ones really need to be refreshed. Finally, it creates DOM nodes from these view nodes,\\n * {@link module:engine/view/domconverter~DomConverter#bindElements binds} them and inserts into the DOM tree.\\n *\\n * Every time {@link module:engine/view/renderer~Renderer#render render} is called, renderer additionally checks if\\n * {@link module:engine/view/renderer~Renderer#selection selection} needs update and updates it if so.\\n *\\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform and bind nodes.\\n */\\nexport default class Renderer {\\n\\t/**\\n\\t * Creates a renderer instance.\\n\\t *\\n\\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\\n\\t * @param {module:engine/view/selection~Selection} selection View selection.\\n\\t */\\n\\tconstructor( domConverter, selection ) {\\n\\t\\t/**\\n\\t\\t * Set of DOM Documents instances.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Set.<Document>}\\n\\t\\t */\\n\\t\\tthis.domDocuments = new Set();\\n\\n\\t\\t/**\\n\\t\\t * Converter instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/domconverter~DomConverter}\\n\\t\\t */\\n\\t\\tthis.domConverter = domConverter;\\n\\n\\t\\t/**\\n\\t\\t * Set of nodes which attributes changed and may need to be rendered.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Set.<module:engine/view/node~Node>}\\n\\t\\t */\\n\\t\\tthis.markedAttributes = new Set();\\n\\n\\t\\t/**\\n\\t\\t * Set of elements which child lists changed and may need to be rendered.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Set.<module:engine/view/node~Node>}\\n\\t\\t */\\n\\t\\tthis.markedChildren = new Set();\\n\\n\\t\\t/**\\n\\t\\t * Set of text nodes which text data changed and may need to be rendered.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Set.<module:engine/view/node~Node>}\\n\\t\\t */\\n\\t\\tthis.markedTexts = new Set();\\n\\n\\t\\t/**\\n\\t\\t * View selection. Renderer updates DOM selection based on the view selection.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/selection~Selection}\\n\\t\\t */\\n\\t\\tthis.selection = selection;\\n\\n\\t\\t/**\\n\\t\\t * The text node in which the inline filler was rendered.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Text}\\n\\t\\t */\\n\\t\\tthis._inlineFiller = null;\\n\\n\\t\\t/**\\n\\t\\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\\n\\t\\t * this is set to `false`.\\n\\t\\t *\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis.isFocused = false;\\n\\n\\t\\t/**\\n\\t\\t * DOM element containing fake selection.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {null|HTMLElement}\\n\\t\\t */\\n\\t\\tthis._fakeSelectionContainer = null;\\n\\t}\\n\\n\\t/**\\n\\t * Mark node to be synchronized.\\n\\t *\\n\\t * Note that only view nodes which parents have corresponding DOM elements need to be marked to be synchronized.\\n\\t *\\n\\t * @see #markedAttributes\\n\\t * @see #markedChildren\\n\\t * @see #markedTexts\\n\\t *\\n\\t * @param {module:engine/view/document~ChangeType} type Type of the change.\\n\\t * @param {module:engine/view/node~Node} node Node to be marked.\\n\\t */\\n\\tmarkToSync( type, node ) {\\n\\t\\tif ( type === 'text' ) {\\n\\t\\t\\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\\n\\t\\t\\t\\tthis.markedTexts.add( node );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// If the node has no DOM element it is not rendered yet,\\n\\t\\t\\t// its children/attributes do not need to be marked to be sync.\\n\\t\\t\\tif ( !this.domConverter.mapViewToDom( node ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( type === 'attributes' ) {\\n\\t\\t\\t\\tthis.markedAttributes.add( node );\\n\\t\\t\\t} else if ( type === 'children' ) {\\n\\t\\t\\t\\tthis.markedChildren.add( node );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Unknown type passed to Renderer.markToSync.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error renderer-unknown-type\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.' );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Render method checks {@link #markedAttributes},\\n\\t * {@link #markedChildren} and {@link #markedTexts} and updates all\\n\\t * nodes which need to be updated. Then it clears all three sets. Also, every time render is called it compares and\\n\\t * if needed updates the selection.\\n\\t *\\n\\t * Renderer tries not to break text composition (e.g. IME) and x-index of the selection,\\n\\t * so it does as little as it is needed to update the DOM.\\n\\t *\\n\\t * For attributes it adds new attributes to DOM elements, updates values and removes\\n\\t * attributes which do not exist in the view element.\\n\\t *\\n\\t * For text nodes it updates the text string if it is different. Note that if parent element is marked as an element\\n\\t * which changed child list, text node update will not be done, because it may not be possible to\\n\\t * {@link module:engine/view/domconverter~DomConverter#findCorrespondingDomText find a corresponding DOM text}.\\n\\t * The change will be handled in the parent element.\\n\\t *\\n\\t * For elements, which child lists have changed, it calculates a {@link module:utils/diff~diff} and adds or removes children which have\\n\\t * changed.\\n\\t *\\n\\t * Rendering also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\\n\\t * at selection position and adds or removes it. To prevent breaking text composition inline filler will not be\\n\\t * removed as long selection is in the text node which needed it at first.\\n\\t */\\n\\trender() {\\n\\t\\tlet inlineFillerPosition;\\n\\n\\t\\t// There was inline filler rendered in the DOM but it's not\\n\\t\\t// at the selection position any more, so we can remove it\\n\\t\\t// (cause even if it's needed, it must be placed in another location).\\n\\t\\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\\n\\t\\t\\tthis._removeInlineFiller();\\n\\t\\t}\\n\\n\\t\\t// If we've got the filler, let's try to guess its position in the view.\\n\\t\\tif ( this._inlineFiller ) {\\n\\t\\t\\tinlineFillerPosition = this._getInlineFillerPosition();\\n\\t\\t}\\n\\t\\t// Otherwise, if it's needed, create it at the selection position.\\n\\t\\telse if ( this._needsInlineFillerAtSelection() ) {\\n\\t\\t\\tinlineFillerPosition = this.selection.getFirstPosition();\\n\\n\\t\\t\\t// Do not use `markToSync` so it will be added even if the parent is already added.\\n\\t\\t\\tthis.markedChildren.add( inlineFillerPosition.parent );\\n\\t\\t}\\n\\n\\t\\tfor ( const node of this.markedTexts ) {\\n\\t\\t\\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\\n\\t\\t\\t\\tthis._updateText( node, { inlineFillerPosition } );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( const element of this.markedAttributes ) {\\n\\t\\t\\tthis._updateAttrs( element );\\n\\t\\t}\\n\\n\\t\\tfor ( const element of this.markedChildren ) {\\n\\t\\t\\tthis._updateChildren( element, { inlineFillerPosition } );\\n\\t\\t}\\n\\n\\t\\t// Check whether the inline filler is required and where it really is in the DOM.\\n\\t\\t// At this point in most cases it will be in the DOM, but there are exceptions.\\n\\t\\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\\n\\t\\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\\n\\t\\t// it will not be present.\\n\\t\\t// Fix those and similar scenarios.\\n\\t\\tif ( inlineFillerPosition ) {\\n\\t\\t\\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\\n\\t\\t\\tconst domDocument = fillerDomPosition.parent.ownerDocument;\\n\\n\\t\\t\\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\\n\\t\\t\\t\\t// Filler has not been created at filler position. Create it now.\\n\\t\\t\\t\\tthis._inlineFiller = this._addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Filler has been found, save it.\\n\\t\\t\\t\\tthis._inlineFiller = fillerDomPosition.parent;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// There is no filler needed.\\n\\t\\t\\tthis._inlineFiller = null;\\n\\t\\t}\\n\\n\\t\\tthis._updateSelection();\\n\\t\\tthis._updateFocus();\\n\\n\\t\\tthis.markedTexts.clear();\\n\\t\\tthis.markedAttributes.clear();\\n\\t\\tthis.markedChildren.clear();\\n\\t}\\n\\n\\t/**\\n\\t * Adds inline filler at given position.\\n\\t *\\n\\t * The position can be given as an array of DOM nodes and an offset in that array,\\n\\t * or a DOM parent element and offset in that element.\\n\\t *\\n\\t * @private\\n\\t * @param {Document} domDocument\\n\\t * @param {Element|Array.<Node>} domParentOrArray\\n\\t * @param {Number} offset\\n\\t * @returns {Text} The DOM text node that contains inline filler.\\n\\t */\\n\\t_addInlineFiller( domDocument, domParentOrArray, offset ) {\\n\\t\\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\\n\\t\\tconst nodeAfterFiller = childNodes[ offset ];\\n\\n\\t\\tif ( isText( nodeAfterFiller ) ) {\\n\\t\\t\\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\\n\\n\\t\\t\\treturn nodeAfterFiller;\\n\\t\\t} else {\\n\\t\\t\\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\\n\\n\\t\\t\\tif ( Array.isArray( domParentOrArray ) ) {\\n\\t\\t\\t\\tchildNodes.splice( offset, 0, fillerNode );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinsertAt( domParentOrArray, offset, fillerNode );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn fillerNode;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the position of the inline filler based on the current selection.\\n\\t * Here, we assume that we know that the filler is needed and\\n\\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it's needed,\\n\\t * it's somewhere at the selection postion.\\n\\t *\\n\\t * Note: we cannot restore the filler position based on the filler's DOM text node, because\\n\\t * when this method is called (before rendering) the bindings will often be broken. View to DOM\\n\\t * bindings are only dependable after rendering.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:engine/view/position~Position}\\n\\t */\\n\\t_getInlineFillerPosition() {\\n\\t\\tconst firstPos = this.selection.getFirstPosition();\\n\\n\\t\\tif ( firstPos.parent.is( 'text' ) ) {\\n\\t\\t\\treturn ViewPosition.createBefore( this.selection.getFirstPosition().parent );\\n\\t\\t} else {\\n\\t\\t\\treturn firstPos;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if the selection hasn't left the inline filler's text node.\\n\\t * If it is `true` it means that the filler had been added for a reason and the selection does not\\n\\t * left the filler's text node. E.g. the user can be in the middle of a composition so it should not be touched.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} True if the inline filler and selection are in the same place.\\n\\t */\\n\\t_isSelectionInInlineFiller() {\\n\\t\\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Note, we can't check if selection's position equals position of the\\n\\t\\t// this._inlineFiller node, because of #663. We may not be able to calculate\\n\\t\\t// the filler's position in the view at this stage.\\n\\t\\t// Instead, we check it the other way – whether selection is anchored in\\n\\t\\t// that text node or next to it.\\n\\n\\t\\t// Possible options are:\\n\\t\\t// \\\"FILLER{}\\\"\\n\\t\\t// \\\"FILLERadded-text{}\\\"\\n\\t\\tconst selectionPosition = this.selection.getFirstPosition();\\n\\t\\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\\n\\n\\t\\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Removes the inline filler.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_removeInlineFiller() {\\n\\t\\tconst domFillerNode = this._inlineFiller;\\n\\n\\t\\t// Something weird happened and the stored node doesn't contain the filler's text.\\n\\t\\tif ( !startsWithFiller( domFillerNode ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The inline filler node was lost. Most likely, something overwrote the filler text node\\n\\t\\t\\t * in the DOM.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-renderer-filler-was-lost\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.' );\\n\\t\\t}\\n\\n\\t\\tif ( isInlineFiller( domFillerNode ) ) {\\n\\t\\t\\tdomFillerNode.parentNode.removeChild( domFillerNode );\\n\\t\\t} else {\\n\\t\\t\\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\\n\\t\\t}\\n\\n\\t\\tthis._inlineFiller = null;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} True if the inline fillers should be added.\\n\\t */\\n\\t_needsInlineFillerAtSelection() {\\n\\t\\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst selectionPosition = this.selection.getFirstPosition();\\n\\t\\tconst selectionParent = selectionPosition.parent;\\n\\t\\tconst selectionOffset = selectionPosition.offset;\\n\\n\\t\\t// If there is no DOM root we do not care about fillers.\\n\\t\\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( !( selectionParent.is( 'element' ) ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Prevent adding inline filler inside elements with contenteditable=false.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\\n\\t\\tif ( !_isEditable( selectionParent ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// We have block filler, we do not need inline one.\\n\\t\\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst nodeBefore = selectionPosition.nodeBefore;\\n\\t\\tconst nodeAfter = selectionPosition.nodeAfter;\\n\\n\\t\\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if text needs to be updated and possibly updates it.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/text~Text} viewText View text to update.\\n\\t * @param {Object} options\\n\\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position on which the inline\\n\\t * filler should be rendered.\\n\\t */\\n\\t_updateText( viewText, options ) {\\n\\t\\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\\n\\t\\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\\n\\n\\t\\tconst actualText = domText.data;\\n\\t\\tlet expectedText = newDomText.data;\\n\\n\\t\\tconst filler = options.inlineFillerPosition;\\n\\n\\t\\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\\n\\t\\t\\texpectedText = INLINE_FILLER + expectedText;\\n\\t\\t}\\n\\n\\t\\tif ( actualText != expectedText ) {\\n\\t\\t\\tdomText.data = expectedText;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if attributes list needs to be updated and possibly updates it.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} viewElement View element to update.\\n\\t */\\n\\t_updateAttrs( viewElement ) {\\n\\t\\tconst domElement = this.domConverter.mapViewToDom( viewElement );\\n\\t\\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\\n\\t\\tconst viewAttrKeys = viewElement.getAttributeKeys();\\n\\n\\t\\t// Add or overwrite attributes.\\n\\t\\tfor ( const key of viewAttrKeys ) {\\n\\t\\t\\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\\n\\t\\t}\\n\\n\\t\\t// Remove from DOM attributes which do not exists in the view.\\n\\t\\tfor ( const key of domAttrKeys ) {\\n\\t\\t\\tif ( !viewElement.hasAttribute( key ) ) {\\n\\t\\t\\t\\tdomElement.removeAttribute( key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if elements child list needs to be updated and possibly updates it.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} viewElement View element to update.\\n\\t * @param {Object} options\\n\\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position on which the inline\\n\\t * filler should be rendered.\\n\\t */\\n\\t_updateChildren( viewElement, options ) {\\n\\t\\tconst domConverter = this.domConverter;\\n\\t\\tconst domElement = domConverter.mapViewToDom( viewElement );\\n\\n\\t\\tif ( !domElement ) {\\n\\t\\t\\t// If there is no `domElement` it means that it was already removed from DOM.\\n\\t\\t\\t// There is no need to update it. It will be updated when re-inserted.\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst domDocument = domElement.ownerDocument;\\n\\t\\tconst filler = options.inlineFillerPosition;\\n\\t\\tconst actualDomChildren = domElement.childNodes;\\n\\t\\tconst expectedDomChildren = Array.from( domConverter.viewChildrenToDom( viewElement, domDocument, { bind: true } ) );\\n\\n\\t\\t// Inline filler element has to be created during children update because we need it to diff actual dom\\n\\t\\t// elements with expected dom elements. We need inline filler in expected dom elements so we won't re-render\\n\\t\\t// text node if it is not necessary.\\n\\t\\tif ( filler && filler.parent == viewElement ) {\\n\\t\\t\\tthis._addInlineFiller( domDocument, expectedDomChildren, filler.offset );\\n\\t\\t}\\n\\n\\t\\tconst actions = diff( actualDomChildren, expectedDomChildren, sameNodes );\\n\\n\\t\\tlet i = 0;\\n\\t\\tconst nodesToUnbind = new Set();\\n\\n\\t\\tfor ( const action of actions ) {\\n\\t\\t\\tif ( action === 'insert' ) {\\n\\t\\t\\t\\tinsertAt( domElement, i, expectedDomChildren[ i ] );\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t} else if ( action === 'delete' ) {\\n\\t\\t\\t\\tnodesToUnbind.add( actualDomChildren[ i ] );\\n\\t\\t\\t\\tremove( actualDomChildren[ i ] );\\n\\t\\t\\t} else { // 'equal'\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\\n\\t\\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\\n\\t\\t// it was moved to DOM tree out of the removed node.\\n\\t\\tfor ( const node of nodesToUnbind ) {\\n\\t\\t\\tif ( !node.parentNode ) {\\n\\t\\t\\t\\tthis.domConverter.unbindDomElement( node );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction sameNodes( actualDomChild, expectedDomChild ) {\\n\\t\\t\\t// Elements.\\n\\t\\t\\tif ( actualDomChild === expectedDomChild ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\t// Texts.\\n\\t\\t\\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\\n\\t\\t\\t\\treturn actualDomChild.data === expectedDomChild.data;\\n\\t\\t\\t}\\n\\t\\t\\t// Block fillers.\\n\\t\\t\\telse if ( isBlockFiller( actualDomChild, domConverter.blockFiller ) &&\\n\\t\\t\\t\\tisBlockFiller( expectedDomChild, domConverter.blockFiller ) ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Not matching types.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if selection needs to be updated and possibly updates it.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_updateSelection() {\\n\\t\\t// If there is no selection - remove DOM and fake selections.\\n\\t\\tif ( this.selection.rangeCount === 0 ) {\\n\\t\\t\\tthis._removeDomSelection();\\n\\t\\t\\tthis._removeFakeSelection();\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\\n\\n\\t\\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\\n\\t\\tif ( !this.isFocused || !domRoot ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Render selection.\\n\\t\\tif ( this.selection.isFake ) {\\n\\t\\t\\tthis._updateFakeSelection( domRoot );\\n\\t\\t} else {\\n\\t\\t\\tthis._removeFakeSelection();\\n\\t\\t\\tthis._updateDomSelection( domRoot );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Updates fake selection.\\n\\t *\\n\\t * @private\\n\\t * @param {HTMLElement} domRoot Valid DOM root where fake selection container should be added.\\n\\t */\\n\\t_updateFakeSelection( domRoot ) {\\n\\t\\tconst domDocument = domRoot.ownerDocument;\\n\\t\\tlet container = this._fakeSelectionContainer;\\n\\n\\t\\t// Create fake selection container if one does not exist.\\n\\t\\tif ( !container ) {\\n\\t\\t\\tthis._fakeSelectionContainer = container = domDocument.createElement( 'div' );\\n\\n\\t\\t\\tObject.assign( container.style, {\\n\\t\\t\\t\\tposition: 'fixed',\\n\\t\\t\\t\\ttop: 0,\\n\\t\\t\\t\\tleft: '-9999px',\\n\\t\\t\\t\\t// See https://github.com/ckeditor/ckeditor5/issues/752.\\n\\t\\t\\t\\twidth: '42px'\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Fill it with a text node so we can update it later.\\n\\t\\t\\tcontainer.appendChild( domDocument.createTextNode( '\\\\u00A0' ) );\\n\\t\\t}\\n\\n\\t\\t// Add fake container if not already added.\\n\\t\\tif ( !container.parentElement ) {\\n\\t\\t\\tdomRoot.appendChild( container );\\n\\t\\t}\\n\\n\\t\\t// Update contents.\\n\\t\\tcontainer.firstChild.data = this.selection.fakeSelectionLabel || '\\\\u00A0';\\n\\n\\t\\t// Update selection.\\n\\t\\tconst domSelection = domDocument.getSelection();\\n\\t\\tconst domRange = domDocument.createRange();\\n\\n\\t\\tdomSelection.removeAllRanges();\\n\\t\\tdomRange.selectNodeContents( container );\\n\\t\\tdomSelection.addRange( domRange );\\n\\n\\t\\t// Bind fake selection container with current selection.\\n\\t\\tthis.domConverter.bindFakeSelection( container, this.selection );\\n\\t}\\n\\n\\t/**\\n\\t * Updates DOM selection.\\n\\t *\\n\\t * @private\\n\\t * @param {HTMLElement} domRoot Valid DOM root where DOM selection should be rendered.\\n\\t */\\n\\t_updateDomSelection( domRoot ) {\\n\\t\\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\\n\\n\\t\\t// Let's check whether DOM selection needs updating at all.\\n\\t\\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\\n\\t\\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\\n\\t\\t// and focus of view selection.\\n\\t\\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\\n\\t\\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\\n\\t\\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\\n\\t\\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\\n\\n\\t\\t// Focus the new editing host.\\n\\t\\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\\n\\t\\tdomRoot.focus();\\n\\n\\t\\tdomSelection.collapse( anchor.parent, anchor.offset );\\n\\t\\tdomSelection.extend( focus.parent, focus.offset );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given DOM selection needs to be updated.\\n\\t *\\n\\t * @private\\n\\t * @param {Selection} domSelection DOM selection to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_domSelectionNeedsUpdate( domSelection ) {\\n\\t\\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\\n\\t\\t\\t// Current DOM selection is in incorrect position. We need to update it.\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\\n\\n\\t\\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// If selection is not collapsed, it does not need to be updated if it is similar.\\n\\t\\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\\n\\t\\t\\t// Selection did not changed and is correct, do not update.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Selections are not similar.\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Removes DOM selection.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_removeDomSelection() {\\n\\t\\tfor ( const doc of this.domDocuments ) {\\n\\t\\t\\tconst domSelection = doc.getSelection();\\n\\n\\t\\t\\tif ( domSelection.rangeCount ) {\\n\\t\\t\\t\\tconst activeDomElement = doc.activeElement;\\n\\t\\t\\t\\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\\n\\n\\t\\t\\t\\tif ( activeDomElement && viewElement ) {\\n\\t\\t\\t\\t\\tdoc.getSelection().removeAllRanges();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes fake selection.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_removeFakeSelection() {\\n\\t\\tconst container = this._fakeSelectionContainer;\\n\\n\\t\\tif ( container ) {\\n\\t\\t\\tcontainer.remove();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if focus needs to be updated and possibly updates it.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_updateFocus() {\\n\\t\\tif ( this.isFocused ) {\\n\\t\\t\\tconst editable = this.selection.editableElement;\\n\\n\\t\\t\\tif ( editable ) {\\n\\t\\t\\t\\tthis.domConverter.focus( editable );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nmix( Renderer, ObservableMixin );\\n\\n// Checks if provided element is editable.\\n//\\n// @private\\n// @param {module:engine/view/element~Element} element\\n// @returns {Boolean}\\nfunction _isEditable( element ) {\\n\\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\\n\\n\\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals window, document */\\n\\n/**\\n * @module utils/dom/global\\n */\\n\\n/**\\n * A helper (module) giving an access to the global DOM objects such as `window` and\\n * `document`. Accessing these objects using this helper allows easy and bulletproof\\n * testing, i.e. stubbing native properties:\\n *\\n *\\t\\timport global from 'ckeditor5/utils/dom/global.js';\\n *\\n *\\t\\t// This stub will work for any code using global module.\\n *\\t\\ttestUtils.sinon.stub( global, 'window', {\\n *\\t\\t\\tinnerWidth: 10000\\n *\\t\\t} );\\n *\\n *\\t\\tconsole.log( global.window.innerWidth );\\n */\\nexport default { window, document };\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/indexof\\n */\\n\\n/**\\n * Returns index of the node in the parent element.\\n *\\n * @param {Node} node Node which index is tested.\\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\\n */\\nexport default function indexOf( node ) {\\n\\tlet index = 0;\\n\\n\\twhile ( node.previousSibling ) {\\n\\t\\tnode = node.previousSibling;\\n\\t\\tindex++;\\n\\t}\\n\\n\\treturn index;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals Node */\\n\\n/**\\n * @module utils/dom/getancestors\\n */\\n\\n/**\\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\\n * at most, which will be returned).\\n *\\n * @param {Node} node DOM node.\\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\\n */\\nexport default function getAncestors( node ) {\\n\\tconst nodes = [];\\n\\n\\t// We are interested in `Node`s `DocumentFragment`s only.\\n\\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\\n\\t\\tnodes.unshift( node );\\n\\t\\tnode = node.parentNode;\\n\\t}\\n\\n\\treturn nodes;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/domconverter\\n */\\n\\n/* globals document, Node, NodeFilter, Text */\\n\\nimport ViewText from './text';\\nimport ViewElement from './element';\\nimport ViewPosition from './position';\\nimport ViewRange from './range';\\nimport ViewSelection from './selection';\\nimport ViewDocumentFragment from './documentfragment';\\nimport ViewTreeWalker from './treewalker';\\nimport { BR_FILLER, INLINE_FILLER_LENGTH, isBlockFiller, isInlineFiller, startsWithFiller, getDataWithoutFiller } from './filler';\\n\\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\\n\\n/**\\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\\n *\\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\\n *\\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\\n */\\nexport default class DomConverter {\\n\\t/**\\n\\t * Creates DOM converter.\\n\\t *\\n\\t * @param {Object} options Object with configuration options.\\n\\t * @param {Function} [options.blockFiller=module:engine/view/filler~BR_FILLER] Block filler creator.\\n\\t */\\n\\tconstructor( options = {} ) {\\n\\t\\t// Using WeakMap prevent memory leaks: when the converter will be destroyed all referenced between View and DOM\\n\\t\\t// will be removed. Also because it is a *Weak*Map when both view and DOM elements will be removed referenced\\n\\t\\t// will be also removed, isn't it brilliant?\\n\\t\\t//\\n\\t\\t// Yes, PJ. It is.\\n\\t\\t//\\n\\t\\t// You guys so smart.\\n\\t\\t//\\n\\t\\t// I've been here. Seen stuff. Afraid of code now.\\n\\n\\t\\t/**\\n\\t\\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\\n\\t\\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Function} module:engine/view/domconverter~DomConverter#blockFiller\\n\\t\\t */\\n\\t\\tthis.blockFiller = options.blockFiller || BR_FILLER;\\n\\n\\t\\t/**\\n\\t\\t * Tag names of DOM `Element`s which are considered pre-formatted elements.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\\n\\t\\t */\\n\\t\\tthis.preElements = [ 'pre' ];\\n\\n\\t\\t/**\\n\\t\\t * Tag names of DOM `Element`s which are considered block elements.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\\n\\t\\t */\\n\\t\\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ];\\n\\n\\t\\t/**\\n\\t\\t * DOM to View mapping.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\\n\\t\\t */\\n\\t\\tthis._domToViewMapping = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * View to DOM mapping.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\\n\\t\\t */\\n\\t\\tthis._viewToDomMapping = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * Holds mapping between fake selection containers and corresponding view selections.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\\n\\t\\t */\\n\\t\\tthis._fakeSelectionMapping = new WeakMap();\\n\\t}\\n\\n\\t/**\\n\\t * Binds given DOM element that represents fake selection to {@link module:engine/view/selection~Selection view selection}.\\n\\t * View selection copy is stored and can be retrieved by {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView}\\n\\t * method.\\n\\t *\\n\\t * @param {HTMLElement} domElement\\n\\t * @param {module:engine/view/selection~Selection} viewSelection\\n\\t */\\n\\tbindFakeSelection( domElement, viewSelection ) {\\n\\t\\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewSelection ) );\\n\\t}\\n\\n\\t/**\\n\\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to given DOM element that represents\\n\\t * fake selection. Returns `undefined` if binding to given DOM element does not exists.\\n\\t *\\n\\t * @param {HTMLElement} domElement\\n\\t * @returns {module:engine/view/selection~Selection|undefined}\\n\\t */\\n\\tfakeSelectionToView( domElement ) {\\n\\t\\treturn this._fakeSelectionMapping.get( domElement );\\n\\t}\\n\\n\\t/**\\n\\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\\n\\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\\n\\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\\n\\t *\\n\\t * @param {HTMLElement} domElement DOM element to bind.\\n\\t * @param {module:engine/view/element~Element} viewElement View element to bind.\\n\\t */\\n\\tbindElements( domElement, viewElement ) {\\n\\t\\tthis._domToViewMapping.set( domElement, viewElement );\\n\\t\\tthis._viewToDomMapping.set( viewElement, domElement );\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\\n\\t * `domElement` will be unbound too.\\n\\t *\\n\\t * @param {HTMLElement} domElement DOM element to unbind.\\n\\t */\\n\\tunbindDomElement( domElement ) {\\n\\t\\tconst viewElement = this._domToViewMapping.get( domElement );\\n\\n\\t\\tif ( viewElement ) {\\n\\t\\t\\tthis._domToViewMapping.delete( domElement );\\n\\t\\t\\tthis._viewToDomMapping.delete( viewElement );\\n\\n\\t\\t\\t// Use Array.from because of MS Edge (#923).\\n\\t\\t\\tfor ( const child of Array.from( domElement.childNodes ) ) {\\n\\t\\t\\t\\tthis.unbindDomElement( child );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\\n\\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\\n\\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\\n\\t *\\n\\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\\n\\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\\n\\t */\\n\\tbindDocumentFragments( domFragment, viewFragment ) {\\n\\t\\tthis._domToViewMapping.set( domFragment, viewFragment );\\n\\t\\tthis._viewToDomMapping.set( viewFragment, domFragment );\\n\\t}\\n\\n\\t/**\\n\\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\\n\\t * be created. For bound elements and document fragments function will return corresponding items.\\n\\t *\\n\\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\\n\\t * View node or document fragment to transform.\\n\\t * @param {Document} domDocument Document which will be used to create DOM nodes.\\n\\t * @param {Object} [options] Conversion options.\\n\\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\\n\\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\\n\\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\\n\\t */\\n\\tviewToDom( viewNode, domDocument, options = {} ) {\\n\\t\\tif ( viewNode.is( 'text' ) ) {\\n\\t\\t\\tconst textData = this._processDataFromViewText( viewNode );\\n\\n\\t\\t\\treturn domDocument.createTextNode( textData );\\n\\t\\t} else {\\n\\t\\t\\tif ( this.mapViewToDom( viewNode ) ) {\\n\\t\\t\\t\\treturn this.mapViewToDom( viewNode );\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet domElement;\\n\\n\\t\\t\\tif ( viewNode.is( 'documentFragment' ) ) {\\n\\t\\t\\t\\t// Create DOM document fragment.\\n\\t\\t\\t\\tdomElement = domDocument.createDocumentFragment();\\n\\n\\t\\t\\t\\tif ( options.bind ) {\\n\\t\\t\\t\\t\\tthis.bindDocumentFragments( domElement, viewNode );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( viewNode.is( 'uiElement' ) ) {\\n\\t\\t\\t\\t// UIElement has its own render() method (see #799).\\n\\t\\t\\t\\tdomElement = viewNode.render( domDocument );\\n\\n\\t\\t\\t\\tif ( options.bind ) {\\n\\t\\t\\t\\t\\tthis.bindElements( domElement, viewNode );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn domElement;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Create DOM element.\\n\\t\\t\\t\\tdomElement = domDocument.createElement( viewNode.name );\\n\\n\\t\\t\\t\\tif ( options.bind ) {\\n\\t\\t\\t\\t\\tthis.bindElements( domElement, viewNode );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Copy element's attributes.\\n\\t\\t\\t\\tfor ( const key of viewNode.getAttributeKeys() ) {\\n\\t\\t\\t\\t\\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( options.withChildren || options.withChildren === undefined ) {\\n\\t\\t\\t\\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\\n\\t\\t\\t\\t\\tdomElement.appendChild( child );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn domElement;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts children of the view element to DOM using the\\n\\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\\n\\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\\n\\t * @param {Document} domDocument Document which will be used to create DOM nodes.\\n\\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\\n\\t * @returns {Iterable.<Node>} DOM nodes.\\n\\t */\\n\\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\\n\\t\\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\\n\\t\\tlet offset = 0;\\n\\n\\t\\tfor ( const childView of viewElement.getChildren() ) {\\n\\t\\t\\tif ( fillerPositionOffset === offset ) {\\n\\t\\t\\t\\tyield this.blockFiller( domDocument );\\n\\t\\t\\t}\\n\\n\\t\\t\\tyield this.viewToDom( childView, domDocument, options );\\n\\n\\t\\t\\toffset++;\\n\\t\\t}\\n\\n\\t\\tif ( fillerPositionOffset === offset ) {\\n\\t\\t\\tyield this.blockFiller( domDocument );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts view {@link module:engine/view/range~Range} to DOM range.\\n\\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} viewRange View range.\\n\\t * @returns {Range} DOM range.\\n\\t */\\n\\tviewRangeToDom( viewRange ) {\\n\\t\\tconst domStart = this.viewPositionToDom( viewRange.start );\\n\\t\\tconst domEnd = this.viewPositionToDom( viewRange.end );\\n\\n\\t\\tconst domRange = document.createRange();\\n\\t\\tdomRange.setStart( domStart.parent, domStart.offset );\\n\\t\\tdomRange.setEnd( domEnd.parent, domEnd.offset );\\n\\n\\t\\treturn domRange;\\n\\t}\\n\\n\\t/**\\n\\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\\n\\t *\\n\\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\\n\\t * If the converted position is directly before inline filler it is moved inside the filler.\\n\\t *\\n\\t * @param {module:engine/view/position~Position} viewPosition View position.\\n\\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\\n\\t * @returns {Node} position.parent DOM position parent.\\n\\t * @returns {Number} position.offset DOM position offset.\\n\\t */\\n\\tviewPositionToDom( viewPosition ) {\\n\\t\\tconst viewParent = viewPosition.parent;\\n\\n\\t\\tif ( viewParent.is( 'text' ) ) {\\n\\t\\t\\tconst domParent = this.findCorrespondingDomText( viewParent );\\n\\n\\t\\t\\tif ( !domParent ) {\\n\\t\\t\\t\\t// Position is in a view text node that has not been rendered to DOM yet.\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet offset = viewPosition.offset;\\n\\n\\t\\t\\tif ( startsWithFiller( domParent ) ) {\\n\\t\\t\\t\\toffset += INLINE_FILLER_LENGTH;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn { parent: domParent, offset };\\n\\t\\t} else {\\n\\t\\t\\t// viewParent is instance of ViewElement.\\n\\t\\t\\tlet domParent, domBefore, domAfter;\\n\\n\\t\\t\\tif ( viewPosition.offset === 0 ) {\\n\\t\\t\\t\\tdomParent = this.mapViewToDom( viewParent );\\n\\n\\t\\t\\t\\tif ( !domParent ) {\\n\\t\\t\\t\\t\\t// Position is in a view element that has not been rendered to DOM yet.\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdomAfter = domParent.childNodes[ 0 ];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst nodeBefore = viewPosition.nodeBefore;\\n\\n\\t\\t\\t\\tdomBefore = nodeBefore.is( 'text' ) ?\\n\\t\\t\\t\\t\\tthis.findCorrespondingDomText( nodeBefore ) :\\n\\t\\t\\t\\t\\tthis.mapViewToDom( viewPosition.nodeBefore );\\n\\n\\t\\t\\t\\tif ( !domBefore ) {\\n\\t\\t\\t\\t\\t// Position is after a view element that has not been rendered to DOM yet.\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdomParent = domBefore.parentNode;\\n\\t\\t\\t\\tdomAfter = domBefore.nextSibling;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If there is an inline filler at position return position inside the filler. We should never return\\n\\t\\t\\t// the position before the inline filler.\\n\\t\\t\\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\\n\\t\\t\\t\\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\\n\\n\\t\\t\\treturn { parent: domParent, offset };\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\\n\\t * be created. For bound elements and document fragments function will return corresponding items. For\\n\\t * {@link module:engine/view/filler fillers} `null` will be returned.\\n\\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\\n\\t *\\n\\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\\n\\t * @param {Object} [options] Conversion options.\\n\\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\\n\\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\\n\\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\\n\\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\\n\\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\\n\\t */\\n\\tdomToView( domNode, options = {} ) {\\n\\t\\tif ( isBlockFiller( domNode, this.blockFiller ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// When node is inside UIElement return that UIElement as it's view representation.\\n\\t\\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\\n\\n\\t\\tif ( uiElement ) {\\n\\t\\t\\treturn uiElement;\\n\\t\\t}\\n\\n\\t\\tif ( isText( domNode ) ) {\\n\\t\\t\\tif ( isInlineFiller( domNode ) ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst textData = this._processDataFromDomText( domNode );\\n\\n\\t\\t\\t\\treturn textData === '' ? null : new ViewText( textData );\\n\\t\\t\\t}\\n\\t\\t} else if ( this.isComment( domNode ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t} else {\\n\\t\\t\\tif ( this.mapDomToView( domNode ) ) {\\n\\t\\t\\t\\treturn this.mapDomToView( domNode );\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet viewElement;\\n\\n\\t\\t\\tif ( this.isDocumentFragment( domNode ) ) {\\n\\t\\t\\t\\t// Create view document fragment.\\n\\t\\t\\t\\tviewElement = new ViewDocumentFragment();\\n\\n\\t\\t\\t\\tif ( options.bind ) {\\n\\t\\t\\t\\t\\tthis.bindDocumentFragments( domNode, viewElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Create view element.\\n\\t\\t\\t\\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\\n\\t\\t\\t\\tviewElement = new ViewElement( viewName );\\n\\n\\t\\t\\t\\tif ( options.bind ) {\\n\\t\\t\\t\\t\\tthis.bindElements( domNode, viewElement );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Copy element's attributes.\\n\\t\\t\\t\\tconst attrs = domNode.attributes;\\n\\n\\t\\t\\t\\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\\n\\t\\t\\t\\t\\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( options.withChildren || options.withChildren === undefined ) {\\n\\t\\t\\t\\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\\n\\t\\t\\t\\t\\tviewElement._appendChildren( child );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn viewElement;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts children of the DOM element to view nodes using\\n\\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\\n\\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\\n\\t *\\n\\t * @param {HTMLElement} domElement Parent DOM element.\\n\\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\\n\\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\\n\\t */\\n\\t* domChildrenToView( domElement, options = {} ) {\\n\\t\\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\\n\\t\\t\\tconst domChild = domElement.childNodes[ i ];\\n\\t\\t\\tconst viewChild = this.domToView( domChild, options );\\n\\n\\t\\t\\tif ( viewChild !== null ) {\\n\\t\\t\\t\\tyield viewChild;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\\n\\t * Ranges which cannot be converted will be omitted.\\n\\t *\\n\\t * @param {Selection} domSelection DOM selection.\\n\\t * @returns {module:engine/view/selection~Selection} View selection.\\n\\t */\\n\\tdomSelectionToView( domSelection ) {\\n\\t\\t// DOM selection might be placed in fake selection container.\\n\\t\\t// If container contains fake selection - return corresponding view selection.\\n\\t\\tif ( domSelection.rangeCount === 1 ) {\\n\\t\\t\\tlet container = domSelection.getRangeAt( 0 ).startContainer;\\n\\n\\t\\t\\t// The DOM selection might be moved to the text node inside the fake selection container.\\n\\t\\t\\tif ( isText( container ) ) {\\n\\t\\t\\t\\tcontainer = container.parentNode;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewSelection = this.fakeSelectionToView( container );\\n\\n\\t\\t\\tif ( viewSelection ) {\\n\\t\\t\\t\\treturn viewSelection;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst isBackward = this.isDomSelectionBackward( domSelection );\\n\\n\\t\\tconst viewRanges = [];\\n\\n\\t\\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\\n\\t\\t\\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\\n\\t\\t\\tconst domRange = domSelection.getRangeAt( i );\\n\\t\\t\\tconst viewRange = this.domRangeToView( domRange );\\n\\n\\t\\t\\tif ( viewRange ) {\\n\\t\\t\\t\\tviewRanges.push( viewRange );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn new ViewSelection( viewRanges, { backward: isBackward } );\\n\\t}\\n\\n\\t/**\\n\\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\\n\\t * If the start or end position can not be converted `null` is returned.\\n\\t *\\n\\t * @param {Range} domRange DOM range.\\n\\t * @returns {module:engine/view/range~Range|null} View range.\\n\\t */\\n\\tdomRangeToView( domRange ) {\\n\\t\\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\\n\\t\\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\\n\\n\\t\\tif ( viewStart && viewEnd ) {\\n\\t\\t\\treturn new ViewRange( viewStart, viewEnd );\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\\n\\t *\\n\\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\\n\\t * position of the filler will be converted and returned.\\n\\t *\\n\\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\\n\\t * that position will be converted to view position before that UIElement.\\n\\t *\\n\\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\\n\\t *\\n\\t * @param {Node} domParent DOM position parent.\\n\\t * @param {Number} domOffset DOM position offset.\\n\\t * @returns {module:engine/view/position~Position} viewPosition View position.\\n\\t */\\n\\tdomPositionToView( domParent, domOffset ) {\\n\\t\\tif ( isBlockFiller( domParent, this.blockFiller ) ) {\\n\\t\\t\\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\\n\\t\\t}\\n\\n\\t\\t// If position is somewhere inside UIElement - return position before that element.\\n\\t\\tconst viewElement = this.mapDomToView( domParent );\\n\\n\\t\\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\\n\\t\\t\\treturn ViewPosition.createBefore( viewElement );\\n\\t\\t}\\n\\n\\t\\tif ( isText( domParent ) ) {\\n\\t\\t\\tif ( isInlineFiller( domParent ) ) {\\n\\t\\t\\t\\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewParent = this.findCorrespondingViewText( domParent );\\n\\t\\t\\tlet offset = domOffset;\\n\\n\\t\\t\\tif ( !viewParent ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( startsWithFiller( domParent ) ) {\\n\\t\\t\\t\\toffset -= INLINE_FILLER_LENGTH;\\n\\t\\t\\t\\toffset = offset < 0 ? 0 : offset;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new ViewPosition( viewParent, offset );\\n\\t\\t}\\n\\t\\t// domParent instanceof HTMLElement.\\n\\t\\telse {\\n\\t\\t\\tif ( domOffset === 0 ) {\\n\\t\\t\\t\\tconst viewParent = this.mapDomToView( domParent );\\n\\n\\t\\t\\t\\tif ( viewParent ) {\\n\\t\\t\\t\\t\\treturn new ViewPosition( viewParent, 0 );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\\n\\t\\t\\t\\tconst viewBefore = isText( domBefore ) ?\\n\\t\\t\\t\\t\\tthis.findCorrespondingViewText( domBefore ) :\\n\\t\\t\\t\\t\\tthis.mapDomToView( domBefore );\\n\\n\\t\\t\\t\\t// TODO #663\\n\\t\\t\\t\\tif ( viewBefore && viewBefore.parent ) {\\n\\t\\t\\t\\t\\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\\n\\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\\n\\t * to the given DOM - `undefined` is returned.\\n\\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\\n\\t *\\n\\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\\n\\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\\n\\t * Corresponding view element, document fragment or `undefined` if no element was bound.\\n\\t */\\n\\tmapDomToView( domElementOrDocumentFragment ) {\\n\\t\\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\\n\\t}\\n\\n\\t/**\\n\\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\\n\\t * corresponding text node is returned based on the sibling or parent.\\n\\t *\\n\\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\\n\\t * to find the corresponding text node.\\n\\t *\\n\\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\\n\\t * element, it is used to find the corresponding text node.\\n\\t *\\n\\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\\n\\t *\\n\\t * Otherwise `null` is returned.\\n\\t *\\n\\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\\n\\t *\\n\\t * @param {Text} domText DOM text node.\\n\\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\\n\\t * corresponding node.\\n\\t */\\n\\tfindCorrespondingViewText( domText ) {\\n\\t\\tif ( isInlineFiller( domText ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// If DOM text was rendered by UIElement - return that element.\\n\\t\\tconst uiElement = this.getParentUIElement( domText );\\n\\n\\t\\tif ( uiElement ) {\\n\\t\\t\\treturn uiElement;\\n\\t\\t}\\n\\n\\t\\tconst previousSibling = domText.previousSibling;\\n\\n\\t\\t// Try to use previous sibling to find the corresponding text node.\\n\\t\\tif ( previousSibling ) {\\n\\t\\t\\tif ( !( this.isElement( previousSibling ) ) ) {\\n\\t\\t\\t\\t// The previous is text or comment.\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewElement = this.mapDomToView( previousSibling );\\n\\n\\t\\t\\tif ( viewElement ) {\\n\\t\\t\\t\\tconst nextSibling = viewElement.nextSibling;\\n\\n\\t\\t\\t\\t// It might be filler which has no corresponding view node.\\n\\t\\t\\t\\tif ( nextSibling instanceof ViewText ) {\\n\\t\\t\\t\\t\\treturn viewElement.nextSibling;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Try to use parent to find the corresponding text node.\\n\\t\\telse {\\n\\t\\t\\tconst viewElement = this.mapDomToView( domText.parentNode );\\n\\n\\t\\t\\tif ( viewElement ) {\\n\\t\\t\\t\\tconst firstChild = viewElement.getChild( 0 );\\n\\n\\t\\t\\t\\t// It might be filler which has no corresponding view node.\\n\\t\\t\\t\\tif ( firstChild instanceof ViewText ) {\\n\\t\\t\\t\\t\\treturn firstChild;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\\n\\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\\n\\t * use {@link #findCorrespondingDomText}.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\\n\\t * View element or document fragment.\\n\\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\\n\\t */\\n\\tmapViewToDom( documentFragmentOrElement ) {\\n\\t\\treturn this._viewToDomMapping.get( documentFragmentOrElement );\\n\\t}\\n\\n\\t/**\\n\\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\\n\\t * corresponding text node is returned based on the sibling or parent.\\n\\t *\\n\\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\\n\\t * to find the corresponding text node.\\n\\t *\\n\\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\\n\\t * element, it is used to find the corresponding text node.\\n\\t *\\n\\t * Otherwise `null` is returned.\\n\\t *\\n\\t * @param {module:engine/view/text~Text} viewText View text node.\\n\\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\\n\\t */\\n\\tfindCorrespondingDomText( viewText ) {\\n\\t\\tconst previousSibling = viewText.previousSibling;\\n\\n\\t\\t// Try to use previous sibling to find the corresponding text node.\\n\\t\\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\\n\\t\\t\\treturn this.mapViewToDom( previousSibling ).nextSibling;\\n\\t\\t}\\n\\n\\t\\t// If this is a first node, try to use parent to find the corresponding text node.\\n\\t\\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\\n\\t\\t\\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\\n\\t *\\n\\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\\n\\t */\\n\\tfocus( viewEditable ) {\\n\\t\\tconst domEditable = this.mapViewToDom( viewEditable );\\n\\n\\t\\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\\n\\t\\t\\t// Save the scrollX and scrollY positions before the focus.\\n\\t\\t\\tconst { scrollX, scrollY } = global.window;\\n\\t\\t\\tconst scrollPositions = [];\\n\\n\\t\\t\\t// Save all scrollLeft and scrollTop values starting from domEditable up to\\n\\t\\t\\t// document#documentElement.\\n\\t\\t\\tforEachDomNodeAncestor( domEditable, node => {\\n\\t\\t\\t\\tconst { scrollLeft, scrollTop } = node;\\n\\n\\t\\t\\t\\tscrollPositions.push( [ scrollLeft, scrollTop ] );\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdomEditable.focus();\\n\\n\\t\\t\\t// Restore scrollLeft and scrollTop values starting from domEditable up to\\n\\t\\t\\t// document#documentElement.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\\n\\t\\t\\tforEachDomNodeAncestor( domEditable, node => {\\n\\t\\t\\t\\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\\n\\n\\t\\t\\t\\tnode.scrollLeft = scrollLeft;\\n\\t\\t\\t\\tnode.scrollTop = scrollTop;\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Restore the scrollX and scrollY positions after the focus.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\\n\\t\\t\\tglobal.window.scrollTo( scrollX, scrollY );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\\n\\t *\\n\\t * @param {Node} node Node to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisElement( node ) {\\n\\t\\treturn node && node.nodeType == Node.ELEMENT_NODE;\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\\n\\t *\\n\\t * @param {Node} node Node to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisDocumentFragment( node ) {\\n\\t\\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\\n\\t *\\n\\t * @param {Node} node Node to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisComment( node ) {\\n\\t\\treturn node && node.nodeType == Node.COMMENT_NODE;\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\\n\\t *\\n\\t * @param {Selection} DOM Selection instance to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tisDomSelectionBackward( selection ) {\\n\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Since it takes multiple lines of code to check whether a \\\"DOM Position\\\" is before/after another \\\"DOM Position\\\",\\n\\t\\t// we will use the fact that range will collapse if it's end is before it's start.\\n\\t\\tconst range = document.createRange();\\n\\n\\t\\trange.setStart( selection.anchorNode, selection.anchorOffset );\\n\\t\\trange.setEnd( selection.focusNode, selection.focusOffset );\\n\\n\\t\\tconst backward = range.collapsed;\\n\\n\\t\\trange.detach();\\n\\n\\t\\treturn backward;\\n\\t}\\n\\n\\t/**\\n\\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\\n\\t * parent UIElement.\\n\\t *\\n\\t * @param {Node} domNode\\n\\t * @return {module:engine/view/uielement~UIElement|null}\\n\\t */\\n\\tgetParentUIElement( domNode ) {\\n\\t\\tconst ancestors = getAncestors( domNode );\\n\\n\\t\\t// Remove domNode from the list.\\n\\t\\tancestors.pop();\\n\\n\\t\\twhile ( ancestors.length ) {\\n\\t\\t\\tconst domNode = ancestors.pop();\\n\\t\\t\\tconst viewNode = this._domToViewMapping.get( domNode );\\n\\n\\t\\t\\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\\n\\t\\t\\t\\treturn viewNode;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if given selection's boundaries are at correct places.\\n\\t *\\n\\t * The following places are considered as incorrect for selection boundaries:\\n\\t * * before or in the middle of the inline filler sequence,\\n\\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\\n\\t *\\n\\t * @param {Selection} domSelection DOM Selection object to be checked.\\n\\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\\n\\t */\\n\\tisDomSelectionCorrect( domSelection ) {\\n\\t\\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\\n\\t\\t\\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\\n\\t *\\n\\t * @private\\n\\t * @param {Element} domParent Position parent.\\n\\t * @param {Number} offset Position offset.\\n\\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\\n\\t */\\n\\t_isDomSelectionPositionCorrect( domParent, offset ) {\\n\\t\\t// If selection is before or in the middle of inline filler string, it is incorrect.\\n\\t\\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\\n\\t\\t\\t// Selection in a text node, at wrong position (before or in the middle of filler).\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\\n\\t\\t\\t// Selection in an element node, before filler text node.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst viewParent = this.mapDomToView( domParent );\\n\\n\\t\\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\\n\\t\\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\\n\\t\\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\\n\\t * it is correctly displayed in the DOM.\\n\\t *\\n\\t * Following changes are done:\\n\\t *\\n\\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\\n\\t * element or if a previous text node ends with a space character,\\n\\t * * space at the end of the text node is changed to `&nbsp;` if this is the last text node in its container,\\n\\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\\n\\t *\\n\\t * Content of {@link #preElements} is not processed.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/text~Text} node View text node to process.\\n\\t * @returns {String} Processed text data.\\n\\t */\\n\\t_processDataFromViewText( node ) {\\n\\t\\tlet data = node.data;\\n\\n\\t\\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\\n\\t\\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\\n\\t\\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\\n\\t\\t\\treturn data;\\n\\t\\t}\\n\\n\\t\\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\\n\\t\\t// (container element boundary).\\n\\t\\tif ( data.charAt( 0 ) == ' ' ) {\\n\\t\\t\\tconst prevNode = this._getTouchingViewTextNode( node, false );\\n\\t\\t\\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\\n\\n\\t\\t\\tif ( prevEndsWithSpace || !prevNode ) {\\n\\t\\t\\t\\tdata = '\\\\u00A0' + data.substr( 1 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// 2. Replace the last space with a nbsp if this is the last text node (container element boundary).\\n\\t\\tif ( data.charAt( data.length - 1 ) == ' ' ) {\\n\\t\\t\\tconst nextNode = this._getTouchingViewTextNode( node, true );\\n\\n\\t\\t\\tif ( !nextNode ) {\\n\\t\\t\\t\\tdata = data.substr( 0, data.length - 1 ) + '\\\\u00A0';\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn data.replace( / {2}/g, ' \\\\u00A0' );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/text~Text} node Node to check.\\n\\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\\n\\t */\\n\\t_nodeEndsWithSpace( node ) {\\n\\t\\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst data = this._processDataFromViewText( node );\\n\\n\\t\\treturn data.charAt( data.length - 1 ) == ' ';\\n\\t}\\n\\n\\t/**\\n\\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\\n\\t *\\n\\t * Following changes are done:\\n\\t * * multiple whitespaces are replaced to a single space,\\n\\t * * space at the beginning of the text node is removed, if it is a first text node in it's container\\n\\t * element or if previous text node ends by space character,\\n\\t * * space at the end of the text node is removed, if it is a last text node in it's container.\\n\\t *\\n\\t * @param {Node} node DOM text node to process.\\n\\t * @returns {String} Processed data.\\n\\t * @private\\n\\t */\\n\\t_processDataFromDomText( node ) {\\n\\t\\tlet data = node.data;\\n\\n\\t\\tif ( _hasDomParentOfType( node, this.preElements ) ) {\\n\\t\\t\\treturn getDataWithoutFiller( node );\\n\\t\\t}\\n\\n\\t\\t// Change all consecutive whitespace characters (from the [ \\\\n\\\\t\\\\r] set –\\n\\t\\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\\n\\t\\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\\n\\t\\t// We're replacing 1+ (and not 2+) to also normalize singular \\\\n\\\\t\\\\r characters (#822).\\n\\t\\tdata = data.replace( /[ \\\\n\\\\t\\\\r]{1,}/g, ' ' );\\n\\n\\t\\tconst prevNode = this._getTouchingDomTextNode( node, false );\\n\\t\\tconst nextNode = this._getTouchingDomTextNode( node, true );\\n\\n\\t\\t// If previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\\n\\t\\t// of this text node. Such space character is treated as a whitespace.\\n\\t\\tif ( !prevNode || /[^\\\\S\\\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) ) ) {\\n\\t\\t\\tdata = data.replace( /^ /, '' );\\n\\t\\t}\\n\\n\\t\\t// If next text node does not exist remove space character from the end of this text node.\\n\\t\\tif ( !nextNode && !startsWithFiller( node ) ) {\\n\\t\\t\\tdata = data.replace( / $/, '' );\\n\\t\\t}\\n\\n\\t\\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\\n\\t\\t// This means that the text node starts/end with normal space instead of non-breaking space.\\n\\t\\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\\n\\t\\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\\n\\t\\tdata = getDataWithoutFiller( new Text( data ) );\\n\\n\\t\\t// At this point we should have removed all whitespaces from DOM text data.\\n\\n\\t\\t// Now we have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\\n\\t\\t// First, change all ` \\\\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view as\\n\\t\\t// ` \\\\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them\\n\\t\\t// to `  ` which is what we expect to have in model/view.\\n\\t\\tdata = data.replace( / \\\\u00A0/g, '  ' );\\n\\n\\t\\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\\n\\t\\t// As above, that &nbsp; was created for rendering reasons but it's real meaning is just a space character.\\n\\t\\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\\n\\t\\tif ( !prevNode || /[^\\\\S\\\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) ) ) {\\n\\t\\t\\tdata = data.replace( /^\\\\u00A0/, ' ' );\\n\\t\\t}\\n\\n\\t\\t// Since input text data could be: `x_ _`, we would not replace the first &nbsp; after `x` character.\\n\\t\\t// We have to fix it. Since we already change all ` &nbsp;`, we will have something like this at the end of text data:\\n\\t\\t// `x_ _ _` -> `x_    `. Find &nbsp; at the end of string (can be followed only by spaces).\\n\\t\\t// We do that replacement only if this is the last node or the next node starts by &nbsp;.\\n\\t\\tif ( !nextNode || nextNode.data.charAt( 0 ) == '\\\\u00A0' ) {\\n\\t\\t\\tdata = data.replace( /\\\\u00A0( *)$/, ' $1' );\\n\\t\\t}\\n\\n\\t\\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\\n\\t\\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\\n\\t\\treturn data;\\n\\t}\\n\\n\\t/**\\n\\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\\n\\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\\n\\t *\\n\\t * @param {module:engine/view/text~Text} node Reference node.\\n\\t * @param {Boolean} getNext\\n\\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\\n\\t */\\n\\t_getTouchingViewTextNode( node, getNext ) {\\n\\t\\tconst treeWalker = new ViewTreeWalker( {\\n\\t\\t\\tstartPosition: getNext ? ViewPosition.createAfter( node ) : ViewPosition.createBefore( node ),\\n\\t\\t\\tdirection: getNext ? 'forward' : 'backward'\\n\\t\\t} );\\n\\n\\t\\tfor ( const value of treeWalker ) {\\n\\t\\t\\tif ( value.item.is( 'containerElement' ) ) {\\n\\t\\t\\t\\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\\n\\t\\t\\t\\t// text node in its container element.\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t} else if ( value.item.is( 'textProxy' ) ) {\\n\\t\\t\\t\\t// Found a text node in the same container element.\\n\\t\\t\\t\\treturn value.item;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Helper function. For given `Text` node, it finds previous or next sibling that is contained in the same block element.\\n\\t * If there is no such sibling, `null` is returned.\\n\\t *\\n\\t * @private\\n\\t * @param {Text} node\\n\\t * @param {Boolean} getNext\\n\\t * @returns {Text|null}\\n\\t */\\n\\t_getTouchingDomTextNode( node, getNext ) {\\n\\t\\tif ( !node.parentNode ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst direction = getNext ? 'nextNode' : 'previousNode';\\n\\t\\tconst document = node.ownerDocument;\\n\\t\\tconst topmostParent = getAncestors( node )[ 0 ];\\n\\n\\t\\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT );\\n\\n\\t\\ttreeWalker.currentNode = node;\\n\\n\\t\\tconst touchingNode = treeWalker[ direction ]();\\n\\n\\t\\tif ( touchingNode !== null ) {\\n\\t\\t\\tconst lca = getCommonAncestor( node, touchingNode );\\n\\n\\t\\t\\t// If there is common ancestor between the text node and next/prev text node,\\n\\t\\t\\t// and there are no block elements on a way from the text node to that ancestor,\\n\\t\\t\\t// and there are no block elements on a way from next/prev text node to that ancestor...\\n\\t\\t\\tif (\\n\\t\\t\\t\\tlca &&\\n\\t\\t\\t\\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\\n\\t\\t\\t\\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\\n\\t\\t\\t) {\\n\\t\\t\\t\\t// Then they are in the same container element.\\n\\t\\t\\t\\treturn touchingNode;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n}\\n\\n// Helper function.\\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\\n//\\n// @param {Node} node\\n// @param {Array.<String>} types\\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\\n\\tlet parents = getAncestors( node );\\n\\n\\tif ( boundaryParent ) {\\n\\t\\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\\n\\t}\\n\\n\\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\\n}\\n\\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\\n// and ending in document#documentElement.\\n//\\n// @param {Node} node\\n// @param {Function} callback A callback to be executed for each ancestor.\\nfunction forEachDomNodeAncestor( node, callback ) {\\n\\twhile ( node && node != global.document ) {\\n\\t\\tcallback( node );\\n\\t\\tnode = node.parentNode;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/getcommonancestor\\n */\\n\\nimport getAncestors from './getancestors';\\n\\n/**\\n * Searches and returns the lowest common ancestor of two given nodes.\\n *\\n * @param {Node} nodeA First node.\\n * @param {Node} nodeB Second node.\\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\\n */\\nexport default function getCommonAncestor( nodeA, nodeB ) {\\n\\tconst ancestorsA = getAncestors( nodeA );\\n\\tconst ancestorsB = getAncestors( nodeB );\\n\\n\\tlet i = 0;\\n\\n\\t// It does not matter which array is shorter.\\n\\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\\n\\t\\ti++;\\n\\t}\\n\\n\\treturn i === 0 ? null : ancestorsA[ i - 1 ];\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/isnode\\n */\\n\\n/**\\n * Checks if the object is a native DOM Node.\\n *\\n * @param {*} obj\\n * @returns {Boolean}\\n */\\nexport default function isNode( obj ) {\\n\\tif ( obj ) {\\n\\t\\tif ( obj.defaultView ) {\\n\\t\\t\\treturn obj instanceof obj.defaultView.Document;\\n\\t\\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\\n\\t\\t\\treturn obj instanceof obj.ownerDocument.defaultView.Node;\\n\\t\\t}\\n\\t}\\n\\n\\treturn false;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/iswindow\\n */\\n\\n/**\\n * Checks if the object is a native DOM Window.\\n *\\n * @param {*} obj\\n * @returns {Boolean}\\n */\\nexport default function isWindow( obj ) {\\n\\treturn Object.prototype.toString.apply( obj ) == '[object Window]';\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/emittermixin\\n */\\n\\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\\nimport uid from '../uid';\\nimport extend from '../lib/lodash/extend';\\nimport isNode from './isnode';\\nimport isWindow from './iswindow';\\n\\n/**\\n * Mixin that injects the DOM events API into its host. It provides the API\\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\\n *\\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\\n * but it can also be mixed into any other class:\\n *\\n *\\t\\timport mix from '../utils/mix.js';\\n *\\t\\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\\n *\\n *\\t\\tclass SomeView {}\\n *\\t\\tmix( SomeView, DomEmitterMixin );\\n *\\n *\\t\\tconst view = new SomeView();\\n *\\t\\tview.listenTo( domElement, ( evt, domEvt ) => {\\n *\\t\\t\\tconsole.log( evt, domEvt );\\n *\\t\\t} );\\n *\\n * @mixin EmitterMixin\\n * @mixes module:utils/emittermixin~EmitterMixin\\n * @implements module:utils/dom/emittermixin~Emitter\\n */\\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\\n\\t/**\\n\\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\\n\\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\\n\\t *\\n\\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\\n\\t * @param {String} event The name of the event.\\n\\t * @param {Function} callback The function to be called on event.\\n\\t * @param {Object} [options={}] Additional options.\\n\\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\\n\\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\\n\\t * order they were added.\\n\\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\\n\\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\\n\\t */\\n\\tlistenTo( emitter, ...rest ) {\\n\\t\\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\\n\\t\\t// corresponding ProxyEmitter (or create one if not existing).\\n\\t\\tif ( isNode( emitter ) || isWindow( emitter ) ) {\\n\\t\\t\\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\\n\\n\\t\\t\\tproxy.attach( ...rest );\\n\\n\\t\\t\\temitter = proxy;\\n\\t\\t}\\n\\n\\t\\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\\n\\t\\tEmitterMixin.listenTo.call( this, emitter, ...rest );\\n\\t},\\n\\n\\t/**\\n\\t * Stops listening for events. It can be used at different levels:\\n\\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\\n\\t *\\n\\t * * To stop listening to a specific callback.\\n\\t * * To stop listening to a specific event.\\n\\t * * To stop listening to all events fired by a specific object.\\n\\t * * To stop listening to all events fired by all object.\\n\\t *\\n\\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\\n\\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\\n\\t * for all events from `emitter`.\\n\\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\\n\\t * `event`.\\n\\t */\\n\\tstopListening( emitter, event, callback ) {\\n\\t\\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\\n\\t\\tif ( isNode( emitter ) || isWindow( emitter ) ) {\\n\\t\\t\\tconst proxy = this._getProxyEmitter( emitter );\\n\\n\\t\\t\\t// Element has no listeners.\\n\\t\\t\\tif ( !proxy ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\temitter = proxy;\\n\\t\\t}\\n\\n\\t\\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\\n\\t\\tEmitterMixin.stopListening.call( this, emitter, event, callback );\\n\\n\\t\\tif ( emitter instanceof ProxyEmitter ) {\\n\\t\\t\\temitter.detach( event );\\n\\t\\t}\\n\\t},\\n\\n\\t/**\\n\\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\\n\\t *\\n\\t * @pivate\\n\\t * @param {Node} node DOM Node of the ProxyEmitter.\\n\\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\\n\\t */\\n\\t_getProxyEmitter( node ) {\\n\\t\\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\\n\\t}\\n} );\\n\\nexport default DomEmitterMixin;\\n\\n/**\\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\\n *\\n *                                  listenTo( click, ... )\\n *                    +-----------------------------------------+\\n *                    |              stopListening( ... )       |\\n *     +----------------------------+                           |             addEventListener( click, ... )\\n *     | Host                       |                           |   +---------------------------------------------+\\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\\n *     | _listeningTo: {            |                +----------v-------------+                                   |\\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\\n *     | }                          |                | _domListeners: {},     |                                   |\\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\\n *     | +------------------------+ |                           |   |                                             |\\n *     +--------------^-------------+                           |   +---------------------------------------------+\\n *                    |                                         |                  click (DOM Event)\\n *                    +-----------------------------------------+\\n *                                fire( click, DOM Event )\\n *\\n * @mixes module:utils/emittermixin~EmitterMixin\\n * @implements module:utils/dom/emittermixin~Emitter\\n * @private\\n */\\nclass ProxyEmitter {\\n\\t/**\\n\\t * @param {Node} node DOM Node that fires events.\\n\\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\\n\\t */\\n\\tconstructor( node ) {\\n\\t\\t// Set emitter ID to match DOM Node \\\"expando\\\" property.\\n\\t\\t_setEmitterId( this, getNodeUID( node ) );\\n\\n\\t\\t// Remember the DOM Node this ProxyEmitter is bound to.\\n\\t\\tthis._domNode = node;\\n\\t}\\n}\\n\\nextend( ProxyEmitter.prototype, EmitterMixin, {\\n\\t/**\\n\\t * Collection of native DOM listeners.\\n\\t *\\n\\t * @private\\n\\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\\n\\t */\\n\\n\\t/**\\n\\t * Registers a callback function to be executed when an event is fired.\\n\\t *\\n\\t * It attaches a native DOM listener to the DOM Node. When fired,\\n\\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\\n\\t *\\n\\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\\n\\t * @param {String} event The name of the event.\\n\\t * @param {Function} callback The function to be called on event.\\n\\t * @param {Object} [options={}] Additional options.\\n\\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\\n\\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\\n\\t */\\n\\tattach( event, callback, options = {} ) {\\n\\t\\t// If the DOM Listener for given event already exist it is pointless\\n\\t\\t// to attach another one.\\n\\t\\tif ( this._domListeners && this._domListeners[ event ] ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst domListener = this._createDomListener( event, !!options.useCapture );\\n\\n\\t\\t// Attach the native DOM listener to DOM Node.\\n\\t\\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\\n\\n\\t\\tif ( !this._domListeners ) {\\n\\t\\t\\tthis._domListeners = {};\\n\\t\\t}\\n\\n\\t\\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\\n\\t\\t// when stopping listening to the event.\\n\\t\\tthis._domListeners[ event ] = domListener;\\n\\t},\\n\\n\\t/**\\n\\t * Stops executing the callback on the given event.\\n\\t *\\n\\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\\n\\t * @param {String} event The name of the event.\\n\\t */\\n\\tdetach( event ) {\\n\\t\\tlet events;\\n\\n\\t\\t// Remove native DOM listeners which are orphans. If no callbacks\\n\\t\\t// are awaiting given event, detach native DOM listener from DOM Node.\\n\\t\\t// See: {@link attach}.\\n\\n\\t\\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\\n\\t\\t\\tthis._domListeners[ event ].removeListener();\\n\\t\\t}\\n\\t},\\n\\n\\t/**\\n\\t * Creates a native DOM listener callback. When the native DOM event\\n\\t * is fired it will fire corresponding event on this ProxyEmitter.\\n\\t * Note: A native DOM Event is passed as an argument.\\n\\t *\\n\\t * @private\\n\\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\\n\\t * @param {String} event The name of the event.\\n\\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\\n\\t * @returns {Function} The DOM listener callback.\\n\\t */\\n\\t_createDomListener( event, useCapture ) {\\n\\t\\tconst domListener = domEvt => {\\n\\t\\t\\tthis.fire( event, domEvt );\\n\\t\\t};\\n\\n\\t\\t// Supply the DOM listener callback with a function that will help\\n\\t\\t// detach it from the DOM Node, when it is no longer necessary.\\n\\t\\t// See: {@link detach}.\\n\\t\\tdomListener.removeListener = () => {\\n\\t\\t\\tthis._domNode.removeEventListener( event, domListener, useCapture );\\n\\t\\t\\tdelete this._domListeners[ event ];\\n\\t\\t};\\n\\n\\t\\treturn domListener;\\n\\t}\\n} );\\n\\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\\n//\\n// @private\\n// @param {Node} node\\n// @return {String} UID for given DOM Node.\\nfunction getNodeUID( node ) {\\n\\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\\n}\\n\\n/**\\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\\n *\\n * @interface Emitter\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/observer\\n */\\n\\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Abstract base observer class. Observers are classes which observe changes on DOM elements, do the preliminary\\n * processing and fire events on the {@link module:engine/view/document~Document} objects. Observers can also add features to the view,\\n * for instance by updating its status or marking elements which need refresh on DOM events.\\n *\\n * @abstract\\n */\\nexport default class Observer {\\n\\t/**\\n\\t * Creates an instance of the observer.\\n\\t *\\n\\t * @param {module:engine/view/view~View} view\\n\\t */\\n\\tconstructor( view ) {\\n\\t\\t/**\\n\\t\\t * Instance of the view controller.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/view~View}\\n\\t\\t */\\n\\t\\tthis.view = view;\\n\\n\\t\\t/**\\n\\t\\t * Reference to the {@link module:engine/view/document~Document} object.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/document~Document}\\n\\t\\t */\\n\\t\\tthis.document = view.document;\\n\\n\\t\\t/**\\n\\t\\t * State of the observer. If it is disabled events will not be fired.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis.isEnabled = false;\\n\\t}\\n\\n\\t/**\\n\\t * Enables the observer. This method is called when the observer is registered to the\\n\\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#render rendering}\\n\\t * (all observers are {@link #disable disabled} before rendering).\\n\\t *\\n\\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\\n\\t * However, a child class may not need to be disabled, so it can implement an empty method.\\n\\t *\\n\\t * @see module:engine/view/observer/observer~Observer#disable\\n\\t */\\n\\tenable() {\\n\\t\\tthis.isEnabled = true;\\n\\t}\\n\\n\\t/**\\n\\t * Disables the observer. This method is called before\\n\\t * {@link module:engine/view/view~View#render rendering} to prevent firing events during rendering.\\n\\t *\\n\\t * @see module:engine/view/observer/observer~Observer#enable\\n\\t */\\n\\tdisable() {\\n\\t\\tthis.isEnabled = false;\\n\\t}\\n\\n\\t/**\\n\\t * Disables and destroys the observer, among others removes event listeners created by the observer.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.disable();\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Starts observing the given root element.\\n\\t *\\n\\t * @method #observe\\n\\t * @param {HTMLElement} domElement\\n\\t * @param {String} name The name of the root element.\\n\\t */\\n}\\n\\nmix( Observer, DomEmitterMixin );\\n\",\"/** Used to stand-in for `undefined` hash values. */\\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\\n\\n/**\\n * Adds `value` to the array cache.\\n *\\n * @private\\n * @name add\\n * @memberOf SetCache\\n * @alias push\\n * @param {*} value The value to cache.\\n * @returns {Object} Returns the cache instance.\\n */\\nfunction setCacheAdd(value) {\\n  this.__data__.set(value, HASH_UNDEFINED);\\n  return this;\\n}\\n\\nexport default setCacheAdd;\\n\",\"/**\\n * Checks if `value` is in the array cache.\\n *\\n * @private\\n * @name has\\n * @memberOf SetCache\\n * @param {*} value The value to search for.\\n * @returns {number} Returns `true` if `value` is found, else `false`.\\n */\\nfunction setCacheHas(value) {\\n  return this.__data__.has(value);\\n}\\n\\nexport default setCacheHas;\\n\",\"import MapCache from './_MapCache';\\nimport setCacheAdd from './_setCacheAdd';\\nimport setCacheHas from './_setCacheHas';\\n\\n/**\\n *\\n * Creates an array cache object to store unique values.\\n *\\n * @private\\n * @constructor\\n * @param {Array} [values] The values to cache.\\n */\\nfunction SetCache(values) {\\n  var index = -1,\\n      length = values ? values.length : 0;\\n\\n  this.__data__ = new MapCache;\\n  while (++index < length) {\\n    this.add(values[index]);\\n  }\\n}\\n\\n// Add methods to `SetCache`.\\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\\nSetCache.prototype.has = setCacheHas;\\n\\nexport default SetCache;\\n\",\"/**\\n * A specialized version of `_.some` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} array The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {boolean} Returns `true` if any element passes the predicate check,\\n *  else `false`.\\n */\\nfunction arraySome(array, predicate) {\\n  var index = -1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (predicate(array[index], index, array)) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nexport default arraySome;\\n\",\"import SetCache from './_SetCache';\\nimport arraySome from './_arraySome';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar UNORDERED_COMPARE_FLAG = 1,\\n    PARTIAL_COMPARE_FLAG = 2;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for arrays with support for\\n * partial deep comparisons.\\n *\\n * @private\\n * @param {Array} array The array to compare.\\n * @param {Array} other The other array to compare.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\\n *  for more details.\\n * @param {Object} stack Tracks traversed `array` and `other` objects.\\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\\n */\\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\\n      arrLength = array.length,\\n      othLength = other.length;\\n\\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n    return false;\\n  }\\n  // Assume cyclic values are equal.\\n  var stacked = stack.get(array);\\n  if (stacked) {\\n    return stacked == other;\\n  }\\n  var index = -1,\\n      result = true,\\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\\n\\n  stack.set(array, other);\\n\\n  // Ignore non-index properties.\\n  while (++index < arrLength) {\\n    var arrValue = array[index],\\n        othValue = other[index];\\n\\n    if (customizer) {\\n      var compared = isPartial\\n        ? customizer(othValue, arrValue, index, other, array, stack)\\n        : customizer(arrValue, othValue, index, array, other, stack);\\n    }\\n    if (compared !== undefined) {\\n      if (compared) {\\n        continue;\\n      }\\n      result = false;\\n      break;\\n    }\\n    // Recursively compare arrays (susceptible to call stack limits).\\n    if (seen) {\\n      if (!arraySome(other, function(othValue, othIndex) {\\n            if (!seen.has(othIndex) &&\\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\\n              return seen.add(othIndex);\\n            }\\n          })) {\\n        result = false;\\n        break;\\n      }\\n    } else if (!(\\n          arrValue === othValue ||\\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\\n        )) {\\n      result = false;\\n      break;\\n    }\\n  }\\n  stack['delete'](array);\\n  return result;\\n}\\n\\nexport default equalArrays;\\n\",\"import Symbol from './_Symbol';\\nimport Uint8Array from './_Uint8Array';\\nimport equalArrays from './_equalArrays';\\nimport mapToArray from './_mapToArray';\\nimport setToArray from './_setToArray';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar UNORDERED_COMPARE_FLAG = 1,\\n    PARTIAL_COMPARE_FLAG = 2;\\n\\n/** `Object#toString` result references. */\\nvar boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    symbolTag = '[object Symbol]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]';\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for comparing objects of\\n * the same `toStringTag`.\\n *\\n * **Note:** This function only supports comparing values with tags of\\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {string} tag The `toStringTag` of the objects to compare.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\\n *  for more details.\\n * @param {Object} stack Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\\n  switch (tag) {\\n    case dataViewTag:\\n      if ((object.byteLength != other.byteLength) ||\\n          (object.byteOffset != other.byteOffset)) {\\n        return false;\\n      }\\n      object = object.buffer;\\n      other = other.buffer;\\n\\n    case arrayBufferTag:\\n      if ((object.byteLength != other.byteLength) ||\\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\\n        return false;\\n      }\\n      return true;\\n\\n    case boolTag:\\n    case dateTag:\\n      // Coerce dates and booleans to numbers, dates to milliseconds and\\n      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as\\n      // not equal.\\n      return +object == +other;\\n\\n    case errorTag:\\n      return object.name == other.name && object.message == other.message;\\n\\n    case numberTag:\\n      // Treat `NaN` vs. `NaN` as equal.\\n      return (object != +object) ? other != +other : object == +other;\\n\\n    case regexpTag:\\n    case stringTag:\\n      // Coerce regexes to strings and treat strings, primitives and objects,\\n      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring\\n      // for more details.\\n      return object == (other + '');\\n\\n    case mapTag:\\n      var convert = mapToArray;\\n\\n    case setTag:\\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\\n      convert || (convert = setToArray);\\n\\n      if (object.size != other.size && !isPartial) {\\n        return false;\\n      }\\n      // Assume cyclic values are equal.\\n      var stacked = stack.get(object);\\n      if (stacked) {\\n        return stacked == other;\\n      }\\n      bitmask |= UNORDERED_COMPARE_FLAG;\\n      stack.set(object, other);\\n\\n      // Recursively compare objects (susceptible to call stack limits).\\n      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\\n\\n    case symbolTag:\\n      if (symbolValueOf) {\\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\\n      }\\n  }\\n  return false;\\n}\\n\\nexport default equalByTag;\\n\",\"import baseHas from './_baseHas';\\nimport keys from './keys';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar PARTIAL_COMPARE_FLAG = 2;\\n\\n/**\\n * A specialized version of `baseIsEqualDeep` for objects with support for\\n * partial deep comparisons.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Function} customizer The function to customize comparisons.\\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\\n *  for more details.\\n * @param {Object} stack Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\\n      objProps = keys(object),\\n      objLength = objProps.length,\\n      othProps = keys(other),\\n      othLength = othProps.length;\\n\\n  if (objLength != othLength && !isPartial) {\\n    return false;\\n  }\\n  var index = objLength;\\n  while (index--) {\\n    var key = objProps[index];\\n    if (!(isPartial ? key in other : baseHas(other, key))) {\\n      return false;\\n    }\\n  }\\n  // Assume cyclic values are equal.\\n  var stacked = stack.get(object);\\n  if (stacked) {\\n    return stacked == other;\\n  }\\n  var result = true;\\n  stack.set(object, other);\\n\\n  var skipCtor = isPartial;\\n  while (++index < objLength) {\\n    key = objProps[index];\\n    var objValue = object[key],\\n        othValue = other[key];\\n\\n    if (customizer) {\\n      var compared = isPartial\\n        ? customizer(othValue, objValue, key, other, object, stack)\\n        : customizer(objValue, othValue, key, object, other, stack);\\n    }\\n    // Recursively compare objects (susceptible to call stack limits).\\n    if (!(compared === undefined\\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\\n          : compared\\n        )) {\\n      result = false;\\n      break;\\n    }\\n    skipCtor || (skipCtor = key == 'constructor');\\n  }\\n  if (result && !skipCtor) {\\n    var objCtor = object.constructor,\\n        othCtor = other.constructor;\\n\\n    // Non `Object` object instances with different constructors are not equal.\\n    if (objCtor != othCtor &&\\n        ('constructor' in object && 'constructor' in other) &&\\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\\n      result = false;\\n    }\\n  }\\n  stack['delete'](object);\\n  return result;\\n}\\n\\nexport default equalObjects;\\n\",\"import isLength from './isLength';\\nimport isObjectLike from './isObjectLike';\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    boolTag = '[object Boolean]',\\n    dateTag = '[object Date]',\\n    errorTag = '[object Error]',\\n    funcTag = '[object Function]',\\n    mapTag = '[object Map]',\\n    numberTag = '[object Number]',\\n    objectTag = '[object Object]',\\n    regexpTag = '[object RegExp]',\\n    setTag = '[object Set]',\\n    stringTag = '[object String]',\\n    weakMapTag = '[object WeakMap]';\\n\\nvar arrayBufferTag = '[object ArrayBuffer]',\\n    dataViewTag = '[object DataView]',\\n    float32Tag = '[object Float32Array]',\\n    float64Tag = '[object Float64Array]',\\n    int8Tag = '[object Int8Array]',\\n    int16Tag = '[object Int16Array]',\\n    int32Tag = '[object Int32Array]',\\n    uint8Tag = '[object Uint8Array]',\\n    uint8ClampedTag = '[object Uint8ClampedArray]',\\n    uint16Tag = '[object Uint16Array]',\\n    uint32Tag = '[object Uint32Array]';\\n\\n/** Used to identify `toStringTag` values of typed arrays. */\\nvar typedArrayTags = {};\\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\\ntypedArrayTags[uint32Tag] = true;\\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\\ntypedArrayTags[weakMapTag] = false;\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/**\\n * Used to resolve the\\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\\n * of values.\\n */\\nvar objectToString = objectProto.toString;\\n\\n/**\\n * Checks if `value` is classified as a typed array.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is correctly classified,\\n *  else `false`.\\n * @example\\n *\\n * _.isTypedArray(new Uint8Array);\\n * // => true\\n *\\n * _.isTypedArray([]);\\n * // => false\\n */\\nfunction isTypedArray(value) {\\n  return isObjectLike(value) &&\\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\\n}\\n\\nexport default isTypedArray;\\n\",\"import Stack from './_Stack';\\nimport equalArrays from './_equalArrays';\\nimport equalByTag from './_equalByTag';\\nimport equalObjects from './_equalObjects';\\nimport getTag from './_getTag';\\nimport isArray from './isArray';\\nimport isHostObject from './_isHostObject';\\nimport isTypedArray from './isTypedArray';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar PARTIAL_COMPARE_FLAG = 2;\\n\\n/** `Object#toString` result references. */\\nvar argsTag = '[object Arguments]',\\n    arrayTag = '[object Array]',\\n    objectTag = '[object Object]';\\n\\n/** Used for built-in method references. */\\nvar objectProto = Object.prototype;\\n\\n/** Used to check objects for own properties. */\\nvar hasOwnProperty = objectProto.hasOwnProperty;\\n\\n/**\\n * A specialized version of `baseIsEqual` for arrays and objects which performs\\n * deep comparisons and tracks traversed objects enabling objects with circular\\n * references to be compared.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {Function} equalFunc The function to determine equivalents of values.\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\\n *  for more details.\\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\\n */\\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\\n  var objIsArr = isArray(object),\\n      othIsArr = isArray(other),\\n      objTag = arrayTag,\\n      othTag = arrayTag;\\n\\n  if (!objIsArr) {\\n    objTag = getTag(object);\\n    objTag = objTag == argsTag ? objectTag : objTag;\\n  }\\n  if (!othIsArr) {\\n    othTag = getTag(other);\\n    othTag = othTag == argsTag ? objectTag : othTag;\\n  }\\n  var objIsObj = objTag == objectTag && !isHostObject(object),\\n      othIsObj = othTag == objectTag && !isHostObject(other),\\n      isSameTag = objTag == othTag;\\n\\n  if (isSameTag && !objIsObj) {\\n    stack || (stack = new Stack);\\n    return (objIsArr || isTypedArray(object))\\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\\n  }\\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\\n\\n    if (objIsWrapped || othIsWrapped) {\\n      var objUnwrapped = objIsWrapped ? object.value() : object,\\n          othUnwrapped = othIsWrapped ? other.value() : other;\\n\\n      stack || (stack = new Stack);\\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\\n    }\\n  }\\n  if (!isSameTag) {\\n    return false;\\n  }\\n  stack || (stack = new Stack);\\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\\n}\\n\\nexport default baseIsEqualDeep;\\n\",\"import baseIsEqualDeep from './_baseIsEqualDeep';\\nimport isObject from './isObject';\\nimport isObjectLike from './isObjectLike';\\n\\n/**\\n * The base implementation of `_.isEqual` which supports partial comparisons\\n * and tracks traversed objects.\\n *\\n * @private\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @param {boolean} [bitmask] The bitmask of comparison flags.\\n *  The bitmask may be composed of the following flags:\\n *     1 - Unordered comparison\\n *     2 - Partial comparison\\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\\n */\\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\\n  if (value === other) {\\n    return true;\\n  }\\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\\n    return value !== value && other !== other;\\n  }\\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\\n}\\n\\nexport default baseIsEqual;\\n\",\"import baseIsEqual from './_baseIsEqual';\\n\\n/**\\n * This method is like `_.isEqual` except that it accepts `customizer` which\\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\\n * are handled by the method instead. The `customizer` is invoked with up to\\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @returns {boolean} Returns `true` if the values are equivalent,\\n *  else `false`.\\n * @example\\n *\\n * function isGreeting(value) {\\n *   return /^h(?:i|ello)$/.test(value);\\n * }\\n *\\n * function customizer(objValue, othValue) {\\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\\n *     return true;\\n *   }\\n * }\\n *\\n * var array = ['hello', 'goodbye'];\\n * var other = ['hi', 'goodbye'];\\n *\\n * _.isEqualWith(array, other, customizer);\\n * // => true\\n */\\nfunction isEqualWith(value, other, customizer) {\\n  customizer = typeof customizer == 'function' ? customizer : undefined;\\n  var result = customizer ? customizer(value, other) : undefined;\\n  return result === undefined ? baseIsEqual(value, other, customizer) : !!result;\\n}\\n\\nexport default isEqualWith;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/mutationobserver\\n */\\n\\n/* globals window */\\n\\nimport Observer from './observer';\\nimport ViewSelection from '../selection';\\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\\nimport isEqualWith from '@ckeditor/ckeditor5-utils/src/lib/lodash/isEqualWith';\\n\\n/**\\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\\n * Because all mutated nodes are marked as \\\"to be rendered\\\" and the\\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\\n * will block all changes which are not handled.\\n *\\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\\n * mutations on elements which do not have corresponding view elements. Also\\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\\n *\\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\\n *\\n * @extends module:engine/view/observer/observer~Observer\\n */\\nexport default class MutationObserver extends Observer {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\t/**\\n\\t\\t * Native mutation observer config.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis._config = {\\n\\t\\t\\tchildList: true,\\n\\t\\t\\tcharacterData: true,\\n\\t\\t\\tcharacterDataOldValue: true,\\n\\t\\t\\tsubtree: true\\n\\t\\t};\\n\\n\\t\\t/**\\n\\t\\t * Reference to the {@link module:engine/view/view~View#domConverter}.\\n\\t\\t *\\n\\t\\t * @member {module:engine/view/domconverter~DomConverter}\\n\\t\\t */\\n\\t\\tthis.domConverter = view.domConverter;\\n\\n\\t\\t/**\\n\\t\\t * Reference to the {@link module:engine/view/view~View#renderer}.\\n\\t\\t *\\n\\t\\t * @member {module:engine/view/renderer~Renderer}\\n\\t\\t */\\n\\t\\tthis.renderer = view._renderer;\\n\\n\\t\\t/**\\n\\t\\t * Observed DOM elements.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Array.<HTMLElement>}\\n\\t\\t */\\n\\t\\tthis._domElements = [];\\n\\n\\t\\t/**\\n\\t\\t * Native mutation observer.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {MutationObserver}\\n\\t\\t */\\n\\t\\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\\n\\t}\\n\\n\\t/**\\n\\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\\n\\t * At the same time empties the queue so mutations will not be fired twice.\\n\\t */\\n\\tflush() {\\n\\t\\tthis._onMutations( this._mutationObserver.takeRecords() );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve( domElement ) {\\n\\t\\tthis._domElements.push( domElement );\\n\\n\\t\\tif ( this.isEnabled ) {\\n\\t\\t\\tthis._mutationObserver.observe( domElement, this._config );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tenable() {\\n\\t\\tsuper.enable();\\n\\n\\t\\tfor ( const domElement of this._domElements ) {\\n\\t\\t\\tthis._mutationObserver.observe( domElement, this._config );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdisable() {\\n\\t\\tsuper.disable();\\n\\n\\t\\tthis._mutationObserver.disconnect();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tsuper.destroy();\\n\\n\\t\\tthis._mutationObserver.disconnect();\\n\\t}\\n\\n\\t/**\\n\\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\\n\\t *\\n\\t * @private\\n\\t * @param {Array.<Object>} domMutations Array of native mutations.\\n\\t */\\n\\t_onMutations( domMutations ) {\\n\\t\\t// As a result of this.flush() we can have an empty collection.\\n\\t\\tif ( domMutations.length === 0 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst domConverter = this.domConverter;\\n\\n\\t\\t// Use map and set for deduplication.\\n\\t\\tconst mutatedTexts = new Map();\\n\\t\\tconst mutatedElements = new Set();\\n\\n\\t\\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\\n\\t\\t// element with changed structure anyway.\\n\\t\\tfor ( const mutation of domMutations ) {\\n\\t\\t\\tif ( mutation.type === 'childList' ) {\\n\\t\\t\\t\\tconst element = domConverter.mapDomToView( mutation.target );\\n\\n\\t\\t\\t\\t// Do not collect mutations from UIElements.\\n\\t\\t\\t\\tif ( element && element.is( 'uiElement' ) ) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( element && !this._isBogusBrMutation( mutation ) ) {\\n\\t\\t\\t\\t\\tmutatedElements.add( element );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\\n\\t\\tfor ( const mutation of domMutations ) {\\n\\t\\t\\tconst element = domConverter.mapDomToView( mutation.target );\\n\\n\\t\\t\\t// Do not collect mutations from UIElements.\\n\\t\\t\\tif ( element && element.is( 'uiElement' ) ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( mutation.type === 'characterData' ) {\\n\\t\\t\\t\\tconst text = domConverter.findCorrespondingViewText( mutation.target );\\n\\n\\t\\t\\t\\tif ( text && !mutatedElements.has( text.parent ) ) {\\n\\t\\t\\t\\t\\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\\n\\t\\t\\t\\t\\t// we will have only one in the map.\\n\\t\\t\\t\\t\\tmutatedTexts.set( text, {\\n\\t\\t\\t\\t\\t\\ttype: 'text',\\n\\t\\t\\t\\t\\t\\toldText: text.data,\\n\\t\\t\\t\\t\\t\\tnewText: getDataWithoutFiller( mutation.target ),\\n\\t\\t\\t\\t\\t\\tnode: text\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\\n\\t\\t\\t\\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\\n\\t\\t\\t\\t// need to fire 'children' mutation instead of 'text'.\\n\\t\\t\\t\\telse if ( !text && startsWithFiller( mutation.target ) ) {\\n\\t\\t\\t\\t\\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\\n\\t\\t// same node multiple times in case of duplication.\\n\\n\\t\\t// List of mutations we will fire.\\n\\t\\tconst viewMutations = [];\\n\\n\\t\\tfor ( const mutatedText of mutatedTexts.values() ) {\\n\\t\\t\\tthis.renderer.markToSync( 'text', mutatedText.node );\\n\\t\\t\\tviewMutations.push( mutatedText );\\n\\t\\t}\\n\\n\\t\\tfor ( const viewElement of mutatedElements ) {\\n\\t\\t\\tconst domElement = domConverter.mapViewToDom( viewElement );\\n\\t\\t\\tconst viewChildren = Array.from( viewElement.getChildren() );\\n\\t\\t\\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement ) );\\n\\n\\t\\t\\t// It may happen that as a result of many changes (sth was inserted and then removed),\\n\\t\\t\\t// both elements haven't really changed. #1031\\n\\t\\t\\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\\n\\t\\t\\t\\tthis.renderer.markToSync( 'children', viewElement );\\n\\n\\t\\t\\t\\tviewMutations.push( {\\n\\t\\t\\t\\t\\ttype: 'children',\\n\\t\\t\\t\\t\\toldChildren: viewChildren,\\n\\t\\t\\t\\t\\tnewChildren: newViewChildren,\\n\\t\\t\\t\\t\\tnode: viewElement\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\\n\\t\\t// There should not be simultaneous mutation in multiple documents, so it's fine.\\n\\t\\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\\n\\n\\t\\tlet viewSelection = null;\\n\\n\\t\\tif ( domSelection && domSelection.anchorNode ) {\\n\\t\\t\\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\\n\\t\\t\\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\\n\\t\\t\\t// be used by features handling mutations.\\n\\t\\t\\t// Only one range is supported.\\n\\n\\t\\t\\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\\n\\t\\t\\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\\n\\n\\t\\t\\t// Anchor and focus has to be properly mapped to view.\\n\\t\\t\\tif ( viewSelectionAnchor && viewSelectionFocus ) {\\n\\t\\t\\t\\tviewSelection = new ViewSelection( viewSelectionAnchor );\\n\\t\\t\\t\\tviewSelection._setFocus( viewSelectionFocus );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.document.fire( 'mutations', viewMutations, viewSelection );\\n\\n\\t\\t// If nothing changes on `mutations` event, at this point we have \\\"dirty DOM\\\" (changed) and de-synched\\n\\t\\t// view (which has not been changed). In order to \\\"reset DOM\\\" we render the view again.\\n\\t\\tthis.view.render();\\n\\n\\t\\tfunction sameNodes( child1, child2 ) {\\n\\t\\t\\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\\n\\t\\t\\tif ( Array.isArray( child1 ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Elements.\\n\\t\\t\\tif ( child1 === child2 ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\t// Texts.\\n\\t\\t\\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\\n\\t\\t\\t\\treturn child1.data === child2.data;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Not matching types.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\\n\\t * Such mutations are generated while pressing space or performing native spellchecker correction\\n\\t * on the end of the block element in Firefox browser.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} mutation Native mutation object.\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_isBogusBrMutation( mutation ) {\\n\\t\\tlet addedNode = null;\\n\\n\\t\\t// Check if mutation added only one node on the end of its parent.\\n\\t\\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\\n\\t\\t\\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\\n\\t\\t\\t\\twithChildren: false\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn addedNode && addedNode.is( 'element', 'br' );\\n\\t}\\n}\\n\\n/**\\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\\n * mutation, so all changes which should be applied, should be handled on this event.\\n *\\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/mutationobserver~MutationObserver\\n * @event module:engine/view/document~Document#event:mutations\\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\\n * viewMutations Array of mutations.\\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\\n * Keep in\\n * mind that the DOM selection is already \\\"updated\\\", meaning that it already acknowledges changes done in mutation.\\n */\\n\\n/**\\n * Mutation item for text.\\n *\\n * @see module:engine/view/document~Document#event:mutations\\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\\n *\\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\\n *\\n * @property {String} type For text mutations it is always 'text'.\\n * @property {module:engine/view/text~Text} node Mutated text node.\\n * @property {String} oldText Old text.\\n * @property {String} newText New text.\\n */\\n\\n/**\\n * Mutation item for child nodes.\\n *\\n * @see module:engine/view/document~Document#event:mutations\\n * @see module:engine/view/observer/mutationobserver~MutatedText\\n *\\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\\n *\\n * @property {String} type For child nodes mutations it is always 'children'.\\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/domeventdata\\n */\\n\\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\\n\\n/**\\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\\n * It wraps the native event, which usually should not be used as the wrapper contains\\n * additional data (like key code for keyboard events).\\n */\\nexport default class DomEventData {\\n\\t/**\\n\\t * @param {module:engine/view/view~View} view The instance of the view controller.\\n\\t * @param {Event} domEvent The DOM event.\\n\\t * @param {Object} [additionalData] Additional properties that the instance should contain.\\n\\t */\\n\\tconstructor( view, domEvent, additionalData ) {\\n\\t\\t/**\\n\\t\\t * Instance of the view controller.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\\n\\t\\t */\\n\\t\\tthis.view = view;\\n\\n\\t\\t/**\\n\\t\\t * The instance of the document.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\\n\\t\\t */\\n\\t\\tthis.document = view.document;\\n\\n\\t\\t/**\\n\\t\\t * The DOM event.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\\n\\t\\t */\\n\\t\\tthis.domEvent = domEvent;\\n\\n\\t\\t/**\\n\\t\\t * The DOM target.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\\n\\t\\t */\\n\\t\\tthis.domTarget = domEvent.target;\\n\\n\\t\\textend( this, additionalData );\\n\\t}\\n\\n\\t/**\\n\\t * The tree view element representing the target.\\n\\t *\\n\\t * @readonly\\n\\t * @type module:engine/view/element~Element\\n\\t */\\n\\tget target() {\\n\\t\\treturn this.view.domConverter.mapDomToView( this.domTarget );\\n\\t}\\n\\n\\t/**\\n\\t * Prevents the native's event default action.\\n\\t */\\n\\tpreventDefault() {\\n\\t\\tthis.domEvent.preventDefault();\\n\\t}\\n\\n\\t/**\\n\\t * Stops native event propagation.\\n\\t */\\n\\tstopPropagation() {\\n\\t\\tthis.domEvent.stopPropagation();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/domeventobserver\\n */\\n\\nimport Observer from './observer';\\nimport DomEventData from './domeventdata';\\n\\n/**\\n * Base class for DOM event observers. This class handles\\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\\n * Child class needs to define\\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\\n *\\n * For instance:\\n *\\n *\\t\\tclass ClickObserver extends DomEventObserver {\\n *\\t\\t\\t// It can also be defined as a normal property in the constructor.\\n *\\t\\t\\tget domEventType() {\\n *\\t\\t\\t\\treturn 'click';\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\tonDomEvent( domEvent ) {\\n *\\t\\t\\t\\tthis.fire( 'click', domEvent );\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n * @extends module:engine/view/observer/observer~Observer\\n */\\nexport default class DomEventObserver extends Observer {\\n\\t/**\\n\\t * Type of the DOM event the observer should listen on. Array of types can be defined\\n\\t * if the obsever should listen to multiple DOM events.\\n\\t *\\n\\t * @readonly\\n\\t * @member {String|Array.<String>} #domEventType\\n\\t */\\n\\n\\t/**\\n\\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\\n\\t * observer {@link #isEnabled is not enabled}.\\n\\t *\\n\\t * @see #domEventType\\n\\t * @abstract\\n\\t * @method #onDomEvent\\n\\t */\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\t/**\\n\\t\\t * If set to `true` DOM events will be listened on the capturing phase.\\n\\t\\t * Default value is `false`.\\n\\t\\t *\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis.useCapture = false;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve( domElement ) {\\n\\t\\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\\n\\n\\t\\ttypes.forEach( type => {\\n\\t\\t\\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\\n\\t\\t\\t\\tif ( this.isEnabled ) {\\n\\t\\t\\t\\t\\tthis.onDomEvent( domEvent );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, { useCapture: this.useCapture } );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\\n\\t *\\n\\t * @see module:utils/emittermixin~EmitterMixin#fire\\n\\t * @param {String} eventType The event type (name).\\n\\t * @param {Event} domEvent The DOM event.\\n\\t * @param {Object} [additionalData] The additional data which should extend the\\n\\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\\n\\t */\\n\\tfire( eventType, domEvent, additionalData ) {\\n\\t\\tif ( this.isEnabled ) {\\n\\t\\t\\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/keyobserver\\n */\\n\\nimport DomEventObserver from './domeventobserver';\\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\n/**\\n * {@link module:engine/view/document~Document#event:keydown Key down} event observer.\\n *\\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class KeyObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tthis.domEventType = [ 'keydown', 'keyup' ];\\n\\t}\\n\\n\\tonDomEvent( domEvt ) {\\n\\t\\tthis.fire( domEvt.type, domEvt, {\\n\\t\\t\\tkeyCode: domEvt.keyCode,\\n\\n\\t\\t\\taltKey: domEvt.altKey,\\n\\t\\t\\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\\n\\t\\t\\tshiftKey: domEvt.shiftKey,\\n\\n\\t\\t\\tget keystroke() {\\n\\t\\t\\t\\treturn getCode( this );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\\n/**\\n * Fired when a key has been pressed.\\n *\\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/keyobserver~KeyObserver\\n * @event module:engine/view/document~Document#event:keydown\\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\\n */\\n\\n/**\\n * Fired when a key has been released.\\n *\\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/keyobserver~KeyObserver\\n * @event module:engine/view/document~Document#event:keyup\\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\\n */\\n\\n/**\\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\\n * {@link module:engine/view/document~Document#event:keyup}.\\n *\\n * @class module:engine/view/observer/keyobserver~KeyEventData\\n * @extends module:engine/view/observer/domeventdata~DomEventData\\n * @implements module:utils/keyboard~KeystrokeInfo\\n */\\n\\n/**\\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\\n *\\n * @readonly\\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\\n */\\n\",\"/**\\n * Gets the timestamp of the number of milliseconds that have elapsed since\\n * the Unix epoch (1 January 1970 00:00:00 UTC).\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @type {Function}\\n * @category Date\\n * @returns {number} Returns the timestamp.\\n * @example\\n *\\n * _.defer(function(stamp) {\\n *   console.log(_.now() - stamp);\\n * }, _.now());\\n * // => Logs the number of milliseconds it took for the deferred function to be invoked.\\n */\\nvar now = Date.now;\\n\\nexport default now;\\n\",\"import isObject from './isObject';\\nimport now from './now';\\nimport toNumber from './toNumber';\\n\\n/** Used as the `TypeError` message for \\\"Functions\\\" methods. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max,\\n    nativeMin = Math.min;\\n\\n/**\\n * Creates a debounced function that delays invoking `func` until after `wait`\\n * milliseconds have elapsed since the last time the debounced function was\\n * invoked. The debounced function comes with a `cancel` method to cancel\\n * delayed `func` invocations and a `flush` method to immediately invoke them.\\n * Provide an options object to indicate whether `func` should be invoked on\\n * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked\\n * with the last arguments provided to the debounced function. Subsequent calls\\n * to the debounced function return the result of the last `func` invocation.\\n *\\n * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\\n * on the trailing edge of the timeout only if the debounced function is\\n * invoked more than once during the `wait` timeout.\\n *\\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n * for details over the differences between `_.debounce` and `_.throttle`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to debounce.\\n * @param {number} [wait=0] The number of milliseconds to delay.\\n * @param {Object} [options={}] The options object.\\n * @param {boolean} [options.leading=false]\\n *  Specify invoking on the leading edge of the timeout.\\n * @param {number} [options.maxWait]\\n *  The maximum time `func` is allowed to be delayed before it's invoked.\\n * @param {boolean} [options.trailing=true]\\n *  Specify invoking on the trailing edge of the timeout.\\n * @returns {Function} Returns the new debounced function.\\n * @example\\n *\\n * // Avoid costly calculations while the window size is in flux.\\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\\n *\\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\\n *   'leading': true,\\n *   'trailing': false\\n * }));\\n *\\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\\n * var source = new EventSource('/stream');\\n * jQuery(source).on('message', debounced);\\n *\\n * // Cancel the trailing debounced invocation.\\n * jQuery(window).on('popstate', debounced.cancel);\\n */\\nfunction debounce(func, wait, options) {\\n  var lastArgs,\\n      lastThis,\\n      maxWait,\\n      result,\\n      timerId,\\n      lastCallTime = 0,\\n      lastInvokeTime = 0,\\n      leading = false,\\n      maxing = false,\\n      trailing = true;\\n\\n  if (typeof func != 'function') {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  wait = toNumber(wait) || 0;\\n  if (isObject(options)) {\\n    leading = !!options.leading;\\n    maxing = 'maxWait' in options;\\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\\n  }\\n\\n  function invokeFunc(time) {\\n    var args = lastArgs,\\n        thisArg = lastThis;\\n\\n    lastArgs = lastThis = undefined;\\n    lastInvokeTime = time;\\n    result = func.apply(thisArg, args);\\n    return result;\\n  }\\n\\n  function leadingEdge(time) {\\n    // Reset any `maxWait` timer.\\n    lastInvokeTime = time;\\n    // Start the timer for the trailing edge.\\n    timerId = setTimeout(timerExpired, wait);\\n    // Invoke the leading edge.\\n    return leading ? invokeFunc(time) : result;\\n  }\\n\\n  function remainingWait(time) {\\n    var timeSinceLastCall = time - lastCallTime,\\n        timeSinceLastInvoke = time - lastInvokeTime,\\n        result = wait - timeSinceLastCall;\\n\\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\\n  }\\n\\n  function shouldInvoke(time) {\\n    var timeSinceLastCall = time - lastCallTime,\\n        timeSinceLastInvoke = time - lastInvokeTime;\\n\\n    // Either this is the first call, activity has stopped and we're at the\\n    // trailing edge, the system time has gone backwards and we're treating\\n    // it as the trailing edge, or we've hit the `maxWait` limit.\\n    return (!lastCallTime || (timeSinceLastCall >= wait) ||\\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n  }\\n\\n  function timerExpired() {\\n    var time = now();\\n    if (shouldInvoke(time)) {\\n      return trailingEdge(time);\\n    }\\n    // Restart the timer.\\n    timerId = setTimeout(timerExpired, remainingWait(time));\\n  }\\n\\n  function trailingEdge(time) {\\n    clearTimeout(timerId);\\n    timerId = undefined;\\n\\n    // Only invoke if we have `lastArgs` which means `func` has been\\n    // debounced at least once.\\n    if (trailing && lastArgs) {\\n      return invokeFunc(time);\\n    }\\n    lastArgs = lastThis = undefined;\\n    return result;\\n  }\\n\\n  function cancel() {\\n    if (timerId !== undefined) {\\n      clearTimeout(timerId);\\n    }\\n    lastCallTime = lastInvokeTime = 0;\\n    lastArgs = lastThis = timerId = undefined;\\n  }\\n\\n  function flush() {\\n    return timerId === undefined ? result : trailingEdge(now());\\n  }\\n\\n  function debounced() {\\n    var time = now(),\\n        isInvoking = shouldInvoke(time);\\n\\n    lastArgs = arguments;\\n    lastThis = this;\\n    lastCallTime = time;\\n\\n    if (isInvoking) {\\n      if (timerId === undefined) {\\n        return leadingEdge(lastCallTime);\\n      }\\n      if (maxing) {\\n        // Handle invocations in a tight loop.\\n        clearTimeout(timerId);\\n        timerId = setTimeout(timerExpired, wait);\\n        return invokeFunc(lastCallTime);\\n      }\\n    }\\n    if (timerId === undefined) {\\n      timerId = setTimeout(timerExpired, wait);\\n    }\\n    return result;\\n  }\\n  debounced.cancel = cancel;\\n  debounced.flush = flush;\\n  return debounced;\\n}\\n\\nexport default debounce;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/fakeselectionobserver\\n */\\n\\nimport Observer from './observer';\\nimport ViewSelection from '../selection';\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\nimport debounce from '@ckeditor/ckeditor5-utils/src/lib/lodash/debounce';\\n\\n/**\\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\\n * if arrow keys are pressed.\\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\\n *\\n * @extends module:engine/view/observer/observer~Observer.Observer\\n */\\nexport default class FakeSelectionObserver extends Observer {\\n\\t/**\\n\\t * Creates new FakeSelectionObserver instance.\\n\\t *\\n\\t * @param {module:engine/view/view~View} view\\n\\t */\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\t/**\\n\\t\\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @param {Object} data Selection change data.\\n\\t\\t * @method #_fireSelectionChangeDoneDebounced\\n\\t\\t */\\n\\t\\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve() {\\n\\t\\tconst document = this.document;\\n\\n\\t\\tdocument.on( 'keydown', ( eventInfo, data ) => {\\n\\t\\t\\tconst selection = document.selection;\\n\\n\\t\\t\\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\\n\\t\\t\\t\\t// Prevents default key down handling - no selection change will occur.\\n\\t\\t\\t\\tdata.preventDefault();\\n\\n\\t\\t\\t\\tthis._handleSelectionMove( data.keyCode );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'lowest' } );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tsuper.destroy();\\n\\n\\t\\tthis._fireSelectionChangeDoneDebounced.cancel();\\n\\t}\\n\\n\\t/**\\n\\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\\n\\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\\n\\t *\\n\\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\\n\\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\\n\\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\\n\\t *\\n\\t * @private\\n\\t * @param {Number} keyCode\\n\\t * @fires module:engine/view/document~Document#event:selectionChange\\n\\t * @fires module:engine/view/document~Document#event:selectionChangeDone\\n\\t */\\n\\t_handleSelectionMove( keyCode ) {\\n\\t\\tconst selection = this.document.selection;\\n\\t\\tconst newSelection = new ViewSelection( selection.getRanges(), { backward: selection.isBackward, fake: false } );\\n\\n\\t\\t// Left or up arrow pressed - move selection to start.\\n\\t\\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\\n\\t\\t\\tnewSelection._setTo( newSelection.getFirstPosition() );\\n\\t\\t}\\n\\n\\t\\t// Right or down arrow pressed - move selection to end.\\n\\t\\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\\n\\t\\t\\tnewSelection._setTo( newSelection.getLastPosition() );\\n\\t\\t}\\n\\n\\t\\tconst data = {\\n\\t\\t\\toldSelection: selection,\\n\\t\\t\\tnewSelection,\\n\\t\\t\\tdomSelection: null\\n\\t\\t};\\n\\n\\t\\t// Fire dummy selection change event.\\n\\t\\tthis.document.fire( 'selectionChange', data );\\n\\n\\t\\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\\n\\t\\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\\n\\t\\t// defined int the function time will elapse since the last time the function was called.\\n\\t\\t// So `selectionChangeDone` will be fired when selection will stop changing.\\n\\t\\tthis._fireSelectionChangeDoneDebounced( data );\\n\\t}\\n}\\n\\n// Checks if one of the arrow keys is pressed.\\n//\\n// @private\\n// @param {Number} keyCode\\n// @returns {Boolean}\\nfunction _isArrowKeyCode( keyCode ) {\\n\\treturn keyCode == keyCodes.arrowright ||\\n\\t\\tkeyCode == keyCodes.arrowleft ||\\n\\t\\tkeyCode == keyCodes.arrowup ||\\n\\t\\tkeyCode == keyCodes.arrowdown;\\n}\\n\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* global console */\\n\\n/**\\n * @module utils/log\\n */\\n\\nimport { attachLinkToDocumentation } from './ckeditorerror';\\n\\n/**\\n * The logging module.\\n *\\n * This object features two functions that should be used across CKEditor code base to log errors and warnings.\\n * Despite being an overridable interface for native `console.*` this module serves also the goal to limit the\\n * code size of a minified CKEditor package. During minification process the messages will be shortened and\\n * links to their documentation will be logged to the console.\\n *\\n * All errors and warning should be documented in the following way:\\n *\\n *\\t\\t/**\\n *\\t\\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\\n *\\t\\t *\\n *\\t\\t * @error plugin-load\\n *\\t\\t * @param pluginName The name of the plugin that could not be loaded.\\n *\\t\\t * @param moduleName The name of the module which tried to load this plugin.\\n *\\t\\t * /\\n *\\t\\tlog.error( 'plugin-load: It was not possible to load the \\\"{$pluginName}\\\" plugin in module \\\"{$moduleName}', {\\n *\\t\\t\\tpluginName: 'foo',\\n *\\t\\t\\tmoduleName: 'bar'\\n *\\t\\t} );\\n *\\n * ### Warning vs Error vs Throw\\n *\\n * * Whenever a potentially incorrect situation occurs, which does not directly lead to an incorrect behavior,\\n * log a warning.\\n * * Whenever an incorrect situation occurs, but the app may continue working (although perhaps incorrectly),\\n * log an error.\\n * * Whenever it's really bad and it does not make sense to continue working, throw a {@link module:utils/ckeditorerror~CKEditorError}.\\n *\\n * @namespace\\n */\\nconst log = {\\n\\t/**\\n\\t * Logs an error to the console.\\n\\t *\\n\\t * Read more about error logging in the {@link module:utils/log} module.\\n\\t *\\n\\t * @param {String} message The error message in an `error-name: Error message.` format.\\n\\t * During the minification process the \\\"Error message\\\" part will be removed to limit the code size\\n\\t * and a link to this error documentation will be logged to the console.\\n\\t * @param {Object} [data] Additional data describing the error.\\n\\t */\\n\\terror( message, data ) {\\n\\t\\tconsole.error( attachLinkToDocumentation( message ), data );\\n\\t},\\n\\n\\t/**\\n\\t * Logs a warning to the console.\\n\\t *\\n\\t * Read more about error logging in the {@link module:utils/log} module.\\n\\t *\\n\\t * @param {String} message The warning message in a `warning-name: Warning message.` format.\\n\\t * During the minification process the \\\"Warning message\\\" part will be removed to limit the code size\\n\\t * and a link to this error documentation will be logged to the console.\\n\\t * @param {Object} [data] Additional data describing the warning.\\n\\t */\\n\\twarn( message, data ) {\\n\\t\\tconsole.warn( attachLinkToDocumentation( message ), data );\\n\\t}\\n};\\n\\nexport default log;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/selectionobserver\\n */\\n\\n/* global setInterval, clearInterval */\\n\\nimport Observer from './observer';\\nimport MutationObserver from './mutationobserver';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\nimport debounce from '@ckeditor/ckeditor5-utils/src/lib/lodash/debounce';\\n\\n/**\\n * Selection observer class observes selection changes in the document. If selection changes on the document this\\n * observer checks if there are any mutations and if DOM selection is different than the\\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\\n * and DOM selection is different then the view selection.\\n *\\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\\n *\\n * @see module:engine/view/observer/mutationobserver~MutationObserver\\n * @extends module:engine/view/observer/observer~Observer\\n */\\nexport default class SelectionObserver extends Observer {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\t/**\\n\\t\\t * Instance of the mutation observer. Selection observer calls\\n\\t\\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\\n\\t\\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\\n\\t\\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\\n\\t\\t */\\n\\t\\tthis.mutationObserver = view.getObserver( MutationObserver );\\n\\n\\t\\t/**\\n\\t\\t * Reference to the view {@link module:engine/view/selection~Selection} object used to compare new selection with it.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/selection~Selection} module:engine/view/observer/selectionobserver~SelectionObserver#selection\\n\\t\\t */\\n\\t\\tthis.selection = this.document.selection;\\n\\n\\t\\t/* eslint-disable max-len */\\n\\t\\t/**\\n\\t\\t * Reference to the {@link module:engine/view/view~View#domConverter}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\\n\\t\\t */\\n\\t\\t/* eslint-enable max-len */\\n\\t\\tthis.domConverter = view.domConverter;\\n\\n\\t\\t/**\\n\\t\\t * Set of documents which have added \\\"selectionchange\\\" listener to avoid adding listener twice to the same\\n\\t\\t * document.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\\n\\t\\t */\\n\\t\\tthis._documents = new WeakSet();\\n\\n\\t\\t/**\\n\\t\\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @param {Object} data Selection change data.\\n\\t\\t * @method #_fireSelectionChangeDoneDebounced\\n\\t\\t */\\n\\t\\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\\n\\n\\t\\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\\n\\n\\t\\t/**\\n\\t\\t * Private property to check if the code does not enter infinite loop.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\\n\\t\\t */\\n\\t\\tthis._loopbackCounter = 0;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve( domElement ) {\\n\\t\\tconst domDocument = domElement.ownerDocument;\\n\\n\\t\\t// Add listener once per each document.\\n\\t\\tif ( this._documents.has( domDocument ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.listenTo( domDocument, 'selectionchange', () => {\\n\\t\\t\\tthis._handleSelectionChange( domDocument );\\n\\t\\t} );\\n\\n\\t\\tthis._documents.add( domDocument );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tsuper.destroy();\\n\\n\\t\\tclearInterval( this._clearInfiniteLoopInterval );\\n\\t\\tthis._fireSelectionChangeDoneDebounced.cancel();\\n\\t}\\n\\n\\t/**\\n\\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\\n\\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\\n\\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\\n\\t *\\n\\t * @private\\n\\t * @param {Document} domDocument DOM document.\\n\\t */\\n\\t_handleSelectionChange( domDocument ) {\\n\\t\\t// Selection is handled when document is not focused but is read-only. This is because in read-only\\n\\t\\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\\n\\t\\t// selection position.\\n\\t\\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Ensure the mutation event will be before selection event on all browsers.\\n\\t\\tthis.mutationObserver.flush();\\n\\n\\t\\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\\n\\t\\t// will be updated, so selections will equal and event will not be fired, as expected.\\n\\t\\tconst domSelection = domDocument.defaultView.getSelection();\\n\\t\\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\\n\\n\\t\\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Ensure we are not in the infinite loop (#400).\\n\\t\\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\\n\\t\\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\\n\\t\\tif ( ++this._loopbackCounter > 60 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Selection change observer detected an infinite rendering loop.\\n\\t\\t\\t * Most probably you try to put the selection in the position which is not allowed\\n\\t\\t\\t * by the browser and browser fixes it automatically what causes `selectionchange` event on\\n\\t\\t\\t * which a loopback through a model tries to re-render the wrong selection and again.\\n\\t\\t\\t *\\n\\t\\t\\t * @error selectionchange-infinite-loop\\n\\t\\t\\t */\\n\\t\\t\\tlog.warn( 'selectionchange-infinite-loop: Selection change observer detected an infinite rendering loop.' );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( this.selection.isSimilar( newViewSelection ) ) {\\n\\t\\t\\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\\n\\t\\t\\t// Just re-render it, no need to fire any events, etc.\\n\\t\\t\\tthis.view.render();\\n\\t\\t} else {\\n\\t\\t\\tconst data = {\\n\\t\\t\\t\\toldSelection: this.selection,\\n\\t\\t\\t\\tnewSelection: newViewSelection,\\n\\t\\t\\t\\tdomSelection\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Prepare data for new selection and fire appropriate events.\\n\\t\\t\\tthis.document.fire( 'selectionChange', data );\\n\\n\\t\\t\\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\\n\\t\\t\\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\\n\\t\\t\\t// defined int the function time will elapse since the last time the function was called.\\n\\t\\t\\t// So `selectionChangeDone` will be fired when selection will stop changing.\\n\\t\\t\\tthis._fireSelectionChangeDoneDebounced( data );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_clearInfiniteLoop() {\\n\\t\\tthis._loopbackCounter = 0;\\n\\t}\\n}\\n\\n/**\\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\\n * in the document, and old selection is different then the new selection.\\n *\\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\\n * @event module:engine/view/document~Document#event:selectionChange\\n * @param {Object} data\\n * @param {module:engine/view/selection~Selection} data.oldSelection Old View selection which is\\n * {@link module:engine/view/document~Document#selection}.\\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\\n * @param {Selection} data.domSelection Native DOM selection.\\n */\\n\\n/**\\n * Fired when selection stops changing.\\n *\\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\\n * @event module:engine/view/document~Document#event:selectionChangeDone\\n * @param {Object} data\\n * @param {module:engine/view/selection~Selection} data.oldSelection Old View selection which is\\n * {@link module:engine/view/document~Document#selection}.\\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\\n * @param {Selection} data.domSelection Native DOM selection.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/focusobserver\\n */\\n\\n/* globals setTimeout, clearTimeout */\\n\\nimport DomEventObserver from './domeventobserver';\\n\\n/**\\n * {@link module:engine/view/document~Document#event:focus Focus}\\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\\n *\\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class FocusObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tthis.domEventType = [ 'focus', 'blur' ];\\n\\t\\tthis.useCapture = true;\\n\\t\\tconst document = this.document;\\n\\n\\t\\tdocument.on( 'focus', () => {\\n\\t\\t\\tdocument.isFocused = true;\\n\\n\\t\\t\\t// Unfortunately native `selectionchange` event is fired asynchronously.\\n\\t\\t\\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\\n\\t\\t\\t// overwrite new DOM selection with selection from the view.\\n\\t\\t\\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\\n\\t\\t\\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\\n\\t\\t\\tthis._renderTimeoutId = setTimeout( () => view.render(), 50 );\\n\\t\\t} );\\n\\n\\t\\tdocument.on( 'blur', ( evt, data ) => {\\n\\t\\t\\tconst selectedEditable = document.selection.editableElement;\\n\\n\\t\\t\\tif ( selectedEditable === null || selectedEditable === data.target ) {\\n\\t\\t\\t\\tdocument.isFocused = false;\\n\\n\\t\\t\\t\\t// Re-render the document to update view elements.\\n\\t\\t\\t\\tview.render();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Number} #_renderTimeoutId\\n\\t\\t */\\n\\t}\\n\\n\\tonDomEvent( domEvent ) {\\n\\t\\tthis.fire( domEvent.type, domEvent );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tif ( this._renderTimeoutId ) {\\n\\t\\t\\tclearTimeout( this._renderTimeoutId );\\n\\t\\t}\\n\\n\\t\\tsuper.destroy();\\n\\t}\\n}\\n\\n/**\\n * Fired when one of the editables gets focus.\\n *\\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/focusobserver~FocusObserver\\n * @event module:engine/view/document~Document#event:focus\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\\n/**\\n * Fired when one of the editables loses focus.\\n *\\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/focusobserver~FocusObserver\\n * @event module:engine/view/document~Document#event:blur\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/compositionobserver\\n */\\n\\nimport DomEventObserver from './domeventobserver';\\n\\n/**\\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\\n *\\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class CompositionObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\\n\\t\\tconst document = this.document;\\n\\n\\t\\tdocument.on( 'compositionstart', () => {\\n\\t\\t\\tdocument.isComposing = true;\\n\\t\\t} );\\n\\n\\t\\tdocument.on( 'compositionend', () => {\\n\\t\\t\\tdocument.isComposing = false;\\n\\t\\t} );\\n\\t}\\n\\n\\tonDomEvent( domEvent ) {\\n\\t\\tthis.fire( domEvent.type, domEvent );\\n\\t}\\n}\\n\\n/**\\n * Fired when composition starts inside one of the editables.\\n *\\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\\n * @event module:engine/view/document~Document#event:compositionstart\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\\n/**\\n * Fired when composition is updated inside one of the editables.\\n *\\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\\n * @event module:engine/view/document~Document#event:compositionupdate\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\\n/**\\n * Fired when composition ends inside one of the editables.\\n *\\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\\n *\\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\\n * {@link module:engine/view/view~View} this event is available by default.\\n *\\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\\n * @event module:engine/view/document~Document#event:compositionend\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/isrange\\n */\\n\\n/**\\n * Checks if the object is a native DOM Range.\\n *\\n * @param {*} obj\\n * @returns {Boolean}\\n */\\nexport default function isRange( obj ) {\\n\\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\\n}\\n\",\"import isObjectLike from './isObjectLike';\\nimport isPlainObject from './isPlainObject';\\n\\n/**\\n * Checks if `value` is likely a DOM element.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is a DOM element,\\n *  else `false`.\\n * @example\\n *\\n * _.isElement(document.body);\\n * // => true\\n *\\n * _.isElement('<body>');\\n * // => false\\n */\\nfunction isElement(value) {\\n  return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);\\n}\\n\\nexport default isElement;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/getborderwidths\\n */\\n\\n/**\\n * Returns an object containing CSS border widths of a specified HTML element.\\n *\\n * @param {HTMLElement} element An element which has CSS borders.\\n * @param {Object} An object containing `top`, `left`, `right` and `bottom` properties\\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\\n */\\nexport default function getBorderWidths( element ) {\\n\\t// Call getComputedStyle on the window the element document belongs to.\\n\\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\\n\\n\\treturn {\\n\\t\\ttop: parseInt( style.borderTopWidth, 10 ),\\n\\t\\tright: parseInt( style.borderRightWidth, 10 ),\\n\\t\\tbottom: parseInt( style.borderBottomWidth, 10 ),\\n\\t\\tleft: parseInt( style.borderLeftWidth, 10 )\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/rect\\n */\\n\\nimport isRange from './isrange';\\nimport isWindow from './iswindow';\\nimport isElement from '../lib/lodash/isElement';\\nimport getBorderWidths from './getborderwidths';\\nimport log from '../log';\\nimport isText from './istext';\\n\\n/**\\n * A helper class representing a `ClientRect` object, e.g. value returned by\\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\\n * to manipulate the rect and compare it against other rect instances.\\n */\\nexport default class Rect {\\n\\t/**\\n\\t * Creates an instance of rect.\\n\\t *\\n\\t *\\t\\t// Rect of an HTMLElement.\\n\\t *\\t\\tconst rectA = new Rect( document.body );\\n\\t *\\n\\t *\\t\\t// Rect of a DOM Range.\\n\\t *\\t\\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\\n\\t *\\n\\t *\\t\\t// Rect of a window (web browser viewport).\\n\\t *\\t\\tconst rectC = new Rect( window );\\n\\t *\\n\\t *\\t\\t// Rect out of an object.\\n\\t *\\t\\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\\n\\t *\\n\\t *\\t\\t// Rect out of another Rect instance.\\n\\t *\\t\\tconst rectE = new Rect( rectD );\\n\\t *\\n\\t *\\t\\t// Rect out of a ClientRect.\\n\\t *\\t\\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\\n\\t *\\n\\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\\n\\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\\n\\t * to get the inner part of the rect.\\n\\t *\\n\\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\\n\\t */\\n\\tconstructor( source ) {\\n\\t\\tconst isSourceRange = isRange( source );\\n\\n\\t\\t/**\\n\\t\\t * The object this rect is for.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @readonly\\n\\t\\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\\n\\t\\t */\\n\\t\\tObject.defineProperty( this, '_source', {\\n\\t\\t\\t// If the source is a Rect instance, copy it's #_source.\\n\\t\\t\\tvalue: source._source || source,\\n\\t\\t\\twritable: true,\\n\\t\\t\\tenumerable: false\\n\\t\\t} );\\n\\n\\t\\tif ( isElement( source ) || isSourceRange ) {\\n\\t\\t\\tconst sourceNode = isSourceRange ? source.startContainer : source;\\n\\n\\t\\t\\tif ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods.\\n\\t\\t\\t\\t * If the {@link #constructor source} of a rect in an HTML element or a DOM range but it does\\n\\t\\t\\t\\t * not belong to any rendered DOM tree, these methods will fail to obtain the geometry and\\n\\t\\t\\t\\t * the rect instance makes little sense to the features using it.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * To get rid of this warning make sure the source passed to the constructor\\n\\t\\t\\t\\t * is a descendant of `window.document.body`.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error rect-source-not-in-dom\\n\\t\\t\\t\\t * @param {String} source The source of the Rect instance.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tlog.warn(\\n\\t\\t\\t\\t\\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\\n\\t\\t\\t\\t\\t{ source }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( isSourceRange ) {\\n\\t\\t\\t\\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcopyRectProperties( this, source.getBoundingClientRect() );\\n\\t\\t\\t}\\n\\t\\t} else if ( isWindow( source ) ) {\\n\\t\\t\\tconst { innerWidth, innerHeight } = source;\\n\\n\\t\\t\\tcopyRectProperties( this, {\\n\\t\\t\\t\\ttop: 0,\\n\\t\\t\\t\\tright: innerWidth,\\n\\t\\t\\t\\tbottom: innerHeight,\\n\\t\\t\\t\\tleft: 0,\\n\\t\\t\\t\\twidth: innerWidth,\\n\\t\\t\\t\\theight: innerHeight\\n\\t\\t\\t} );\\n\\t\\t} else {\\n\\t\\t\\tcopyRectProperties( this, source );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * The \\\"top\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #top\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The \\\"right\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #right\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The \\\"bottom\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #bottom\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The \\\"left\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #left\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The \\\"width\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #width\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The \\\"height\\\" value of the rect.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #height\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Returns a clone of the rect.\\n\\t *\\n\\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new Rect( this );\\n\\t}\\n\\n\\t/**\\n\\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\\n\\t *\\n\\t * @param {Number} x Desired horizontal location.\\n\\t * @param {Number} y Desired vertical location.\\n\\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\\n\\t */\\n\\tmoveTo( x, y ) {\\n\\t\\tthis.top = y;\\n\\t\\tthis.right = x + this.width;\\n\\t\\tthis.bottom = y + this.height;\\n\\t\\tthis.left = x;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Moves the rect in–place by a dedicated offset.\\n\\t *\\n\\t * @param {Number} x A horizontal offset.\\n\\t * @param {Number} y A vertical offset\\n\\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\\n\\t */\\n\\tmoveBy( x, y ) {\\n\\t\\tthis.top += y;\\n\\t\\tthis.right += x;\\n\\t\\tthis.left += x;\\n\\t\\tthis.bottom += y;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a new rect a a result of intersection with another rect.\\n\\t *\\n\\t * @param {module:utils/dom/rect~Rect} anotherRect\\n\\t * @returns {module:utils/dom/rect~Rect}\\n\\t */\\n\\tgetIntersection( anotherRect ) {\\n\\t\\tconst rect = {\\n\\t\\t\\ttop: Math.max( this.top, anotherRect.top ),\\n\\t\\t\\tright: Math.min( this.right, anotherRect.right ),\\n\\t\\t\\tbottom: Math.min( this.bottom, anotherRect.bottom ),\\n\\t\\t\\tleft: Math.max( this.left, anotherRect.left )\\n\\t\\t};\\n\\n\\t\\trect.width = rect.right - rect.left;\\n\\t\\trect.height = rect.bottom - rect.top;\\n\\n\\t\\tif ( rect.width < 0 || rect.height < 0 ) {\\n\\t\\t\\treturn null;\\n\\t\\t} else {\\n\\t\\t\\treturn new Rect( rect );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the area of intersection with another rect.\\n\\t *\\n\\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\\n\\t * @returns {Number} Area of intersection.\\n\\t */\\n\\tgetIntersectionArea( anotherRect ) {\\n\\t\\tconst rect = this.getIntersection( anotherRect );\\n\\n\\t\\tif ( rect ) {\\n\\t\\t\\treturn rect.getArea();\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the area of the rect.\\n\\t *\\n\\t * @returns {Number}\\n\\t */\\n\\tgetArea() {\\n\\t\\treturn this.width * this.height;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\\n\\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\\n\\t * other than `\\\"visible\\\"`.\\n\\t *\\n\\t * If there's no such visible rect, which is when the rect is limited by one or many of\\n\\t * the ancestors, `null` is returned.\\n\\t *\\n\\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\\n\\t */\\n\\tgetVisible() {\\n\\t\\tconst source = this._source;\\n\\t\\tlet visibleRect = this.clone();\\n\\n\\t\\t// There's no ancestor to crop <body> with the overflow.\\n\\t\\tif ( !isBody( source ) ) {\\n\\t\\t\\tlet parent = source.parentNode || source.commonAncestorContainer;\\n\\n\\t\\t\\t// Check the ancestors all the way up to the <body>.\\n\\t\\t\\twhile ( parent && !isBody( parent ) ) {\\n\\t\\t\\t\\tconst parentRect = new Rect( parent );\\n\\t\\t\\t\\tconst intersectionRect = visibleRect.getIntersection( parentRect );\\n\\n\\t\\t\\t\\tif ( intersectionRect ) {\\n\\t\\t\\t\\t\\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\\n\\t\\t\\t\\t\\t\\t// Reduce the visible rect to the intersection.\\n\\t\\t\\t\\t\\t\\tvisibleRect = intersectionRect;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// There's no intersection, the rect is completely invisible.\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tparent = parent.parentNode;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn visibleRect;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\\n\\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\\n\\t * instances.\\n\\t *\\n\\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\\n\\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\\n\\t */\\n\\tisEqual( anotherRect ) {\\n\\t\\tfor ( const prop of rectProperties ) {\\n\\t\\t\\tif ( this[ prop ] !== anotherRect[ prop ] ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether a rect fully contains another rect instance.\\n\\t *\\n\\t * @param {module:utils/dom/rect~Rect} anotherRect\\n\\t * @returns {Boolean} `true` if contains, `false` otherwise.\\n\\t */\\n\\tcontains( anotherRect ) {\\n\\t\\tconst intersectRect = this.getIntersection( anotherRect );\\n\\n\\t\\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\\n\\t}\\n\\n\\t/**\\n\\t * Excludes scrollbars and CSS borders from the rect.\\n\\t *\\n\\t * * Borders are removed when {@link #_source} is an HTML element.\\n\\t * * Scrollbars are excluded from HTML elements and the `window`.\\n\\t *\\n\\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\\n\\t */\\n\\texcludeScrollbarsAndBorders() {\\n\\t\\tconst source = this._source;\\n\\t\\tlet scrollBarWidth, scrollBarHeight;\\n\\n\\t\\tif ( isWindow( source ) ) {\\n\\t\\t\\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\\n\\t\\t\\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\\n\\t\\t} else {\\n\\t\\t\\tconst borderWidths = getBorderWidths( this._source );\\n\\n\\t\\t\\tscrollBarWidth = source.offsetWidth - source.clientWidth;\\n\\t\\t\\tscrollBarHeight = source.offsetHeight - source.clientHeight;\\n\\n\\t\\t\\tthis.moveBy( borderWidths.left, borderWidths.top );\\n\\t\\t}\\n\\n\\t\\t// Assuming LTR scrollbars. TODO: RTL.\\n\\t\\tthis.width -= scrollBarWidth;\\n\\t\\tthis.right -= scrollBarWidth;\\n\\n\\t\\tthis.height -= scrollBarHeight;\\n\\t\\tthis.bottom -= scrollBarHeight;\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of rects of the given native DOM Range.\\n\\t *\\n\\t * @param {Range} range A native DOM range.\\n\\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\\n\\t */\\n\\tstatic getDomRangeRects( range ) {\\n\\t\\tconst rects = [];\\n\\t\\t// Safari does not iterate over ClientRectList using for...of loop.\\n\\t\\tconst clientRects = Array.from( range.getClientRects() );\\n\\n\\t\\tif ( clientRects.length ) {\\n\\t\\t\\tfor ( const rect of clientRects ) {\\n\\t\\t\\t\\trects.push( new Rect( rect ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// If there's no client rects for the Range, use parent container's bounding rect\\n\\t\\t// instead and adjust rect's width to simulate the actual geometry of such range.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\\n\\t\\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\\n\\t\\telse {\\n\\t\\t\\tlet startContainer = range.startContainer;\\n\\n\\t\\t\\tif ( isText( startContainer ) ) {\\n\\t\\t\\t\\tstartContainer = startContainer.parentNode;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst rect = new Rect( startContainer.getBoundingClientRect() );\\n\\t\\t\\trect.right = rect.left;\\n\\t\\t\\trect.width = 0;\\n\\n\\t\\t\\trects.push( rect );\\n\\t\\t}\\n\\n\\t\\treturn rects;\\n\\t}\\n}\\n\\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\\n\\n// Acquires all the rect properties from the passed source.\\n//\\n// @private\\n// @param {module:utils/dom/rect~Rect} rect\\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\\nfunction copyRectProperties( rect, source ) {\\n\\tfor ( const p of rectProperties ) {\\n\\t\\trect[ p ] = source[ p ];\\n\\t}\\n}\\n\\n// Checks if provided object is a <body> HTML element.\\n//\\n// @private\\n// @param {HTMLElement|Range} elementOrRange\\n// @returns {Boolean}\\nfunction isBody( elementOrRange ) {\\n\\tif ( !isElement( elementOrRange ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn elementOrRange === elementOrRange.ownerDocument.body;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/scroll\\n */\\n\\nimport isRange from './isrange';\\nimport Rect from './rect';\\nimport isText from './istext';\\n\\nconst utils = {};\\n\\n/**\\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\\n * the user. If the `target` is already visible, nothing will happen.\\n *\\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\\n * read or edit by the user.\\n */\\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\\n\\tconst targetWindow = getWindow( target );\\n\\tlet currentWindow = targetWindow;\\n\\tlet currentFrame = null;\\n\\n\\t// Iterate over all windows, starting from target's parent window up to window#top.\\n\\twhile ( currentWindow ) {\\n\\t\\tlet firstAncestorToScroll;\\n\\n\\t\\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\\n\\t\\t// settled down, the algorithm can eventually scroll the viewport of the current window.\\n\\t\\t//\\n\\t\\t// Note: If the current window is target's **original** window (e.g. the first one),\\n\\t\\t// start scrolling the closest parent of the target. If not, scroll the closest parent\\n\\t\\t// of an iframe that resides in the current window.\\n\\t\\tif ( currentWindow == targetWindow ) {\\n\\t\\t\\tfirstAncestorToScroll = getParentElement( target );\\n\\t\\t} else {\\n\\t\\t\\tfirstAncestorToScroll = getParentElement( currentFrame );\\n\\t\\t}\\n\\n\\t\\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\\n\\t\\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\\n\\t\\t\\t// Note: If the target does not belong to the current window **directly**,\\n\\t\\t\\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\\n\\t\\t\\t// in the coordinates of the current window. By default, a Rect returns geometry\\n\\t\\t\\t// relative to the current window's viewport. To make it work in a parent window,\\n\\t\\t\\t// it must be shifted.\\n\\t\\t\\treturn getRectRelativeToWindow( target, currentWindow );\\n\\t\\t} );\\n\\n\\t\\t// Obtain the rect of the target after it has been scrolled within its ancestors.\\n\\t\\t// It's time to scroll the viewport.\\n\\t\\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\\n\\n\\t\\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\\n\\n\\t\\tif ( currentWindow.parent != currentWindow ) {\\n\\t\\t\\t// Keep the reference to the <iframe> element the \\\"previous current window\\\" was\\n\\t\\t\\t// rendered within. It will be useful to re–calculate the rect of the target\\n\\t\\t\\t// in the parent window's relative geometry. The target's rect must be shifted\\n\\t\\t\\t// by it's iframe's position.\\n\\t\\t\\tcurrentFrame = currentWindow.frameElement;\\n\\t\\t\\tcurrentWindow = currentWindow.parent;\\n\\t\\t} else {\\n\\t\\t\\tcurrentWindow = null;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\\n * e.g. if they have `overflow: scroll` CSS style.\\n *\\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\\n */\\nexport function scrollAncestorsToShowTarget( target ) {\\n\\tconst targetParent = getParentElement( target );\\n\\n\\tscrollAncestorsToShowRect( targetParent, () => {\\n\\t\\treturn new Rect( target );\\n\\t} );\\n}\\n\\n// TODO: Using a property value shorthand in the top of the file\\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\\nObject.assign( utils, {\\n\\tscrollViewportToShowTarget,\\n\\tscrollAncestorsToShowTarget\\n} );\\n\\n// Makes a given rect visible within its parent window.\\n//\\n// Note: Avoid the situation where the caret is still in the viewport, but totally\\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\\n// and it all would look like the caret visually moved up/down:\\n//\\n// 1.\\n//\\t\\t| foo[]\\n//\\t\\t|                                    <--- N px of space below the caret\\n//\\t\\t+---------------------------------...\\n//\\n// 2. *paste*\\n// 3.\\n//\\t\\t|\\n//\\t\\t|\\n//\\t\\t+-foo-----------------------------...\\n//\\t\\t  bar[]                              <--- caret below viewport, scrolling...\\n//\\n// 4. *scrolling*\\n// 5.\\n//\\t\\t|\\n//\\t\\t| foo\\n//\\t\\t| bar[]                              <--- caret precisely at the edge\\n//\\t\\t+---------------------------------...\\n//\\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\\n// no twitching – it's a purely visual improvement:\\n//\\n// 5. (after fix)\\n//\\t\\t|\\n//\\t\\t| foo\\n//\\t\\t| bar[]\\n//\\t\\t|                                    <--- N px of space below the caret\\n//\\t\\t+---------------------------------...\\n//\\n// @private\\n// @param {Window} window A window which is scrolled to reveal the rect.\\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\\n\\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\\n\\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\\n\\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\\n\\n\\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\\n\\n\\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\\n\\t\\tlet { scrollX, scrollY } = window;\\n\\n\\t\\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\\n\\t\\t\\tscrollY -= viewportRect.top - rect.top + viewportOffset;\\n\\t\\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\\n\\t\\t\\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\\n\\t\\t}\\n\\n\\t\\t// TODO: Web browsers scroll natively to place the target in the middle\\n\\t\\t// of the viewport. It's not a very popular case, though.\\n\\t\\tif ( isLeftOf( rect, viewportRect ) ) {\\n\\t\\t\\tscrollX -= viewportRect.left - rect.left + viewportOffset;\\n\\t\\t} else if ( isRightOf( rect, viewportRect ) ) {\\n\\t\\t\\tscrollX += rect.right - viewportRect.right + viewportOffset;\\n\\t\\t}\\n\\n\\t\\twindow.scrollTo( scrollX, scrollY );\\n\\t}\\n}\\n\\n// Recursively scrolls element ancestors to visually reveal a rect.\\n//\\n// @private\\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\\nfunction scrollAncestorsToShowRect( parent, getRect ) {\\n\\tconst parentWindow = getWindow( parent );\\n\\tlet parentRect, targetRect;\\n\\n\\twhile ( parent != parentWindow.document.body ) {\\n\\t\\ttargetRect = getRect();\\n\\t\\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\\n\\n\\t\\tif ( !parentRect.contains( targetRect ) ) {\\n\\t\\t\\tif ( isAbove( targetRect, parentRect ) ) {\\n\\t\\t\\t\\tparent.scrollTop -= parentRect.top - targetRect.top;\\n\\t\\t\\t} else if ( isBelow( targetRect, parentRect ) ) {\\n\\t\\t\\t\\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( isLeftOf( targetRect, parentRect ) ) {\\n\\t\\t\\t\\tparent.scrollLeft -= parentRect.left - targetRect.left;\\n\\t\\t\\t} else if ( isRightOf( targetRect, parentRect ) ) {\\n\\t\\t\\t\\tparent.scrollLeft += targetRect.right - parentRect.right;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tparent = parent.parentNode;\\n\\t}\\n}\\n\\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\\n//\\n// @private\\n// @param {module:utils/dom/rect~Rect} firstRect\\n// @param {module:utils/dom/rect~Rect} secondRect\\nfunction isBelow( firstRect, secondRect ) {\\n\\treturn firstRect.bottom > secondRect.bottom;\\n}\\n\\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\\n//\\n// @private\\n// @param {module:utils/dom/rect~Rect} firstRect\\n// @param {module:utils/dom/rect~Rect} secondRect\\nfunction isAbove( firstRect, secondRect ) {\\n\\treturn firstRect.top < secondRect.top;\\n}\\n\\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\\n//\\n// @private\\n// @param {module:utils/dom/rect~Rect} firstRect\\n// @param {module:utils/dom/rect~Rect} secondRect\\nfunction isLeftOf( firstRect, secondRect ) {\\n\\treturn firstRect.left < secondRect.left;\\n}\\n\\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\\n//\\n// @private\\n// @param {module:utils/dom/rect~Rect} firstRect\\n// @param {module:utils/dom/rect~Rect} secondRect\\nfunction isRightOf( firstRect, secondRect ) {\\n\\treturn firstRect.right > secondRect.right;\\n}\\n\\n// Returns the closest window of an element or range.\\n//\\n// @private\\n// @param {HTMLElement|Range} firstRect\\n// @returns {Window}\\nfunction getWindow( elementOrRange ) {\\n\\tif ( isRange( elementOrRange ) ) {\\n\\t\\treturn elementOrRange.startContainer.ownerDocument.defaultView;\\n\\t} else {\\n\\t\\treturn elementOrRange.ownerDocument.defaultView;\\n\\t}\\n}\\n\\n// Returns the closest parent of an element or DOM range.\\n//\\n// @private\\n// @param {HTMLElement|Range} firstRect\\n// @returns {HTMLelement}\\nfunction getParentElement( elementOrRange ) {\\n\\tif ( isRange( elementOrRange ) ) {\\n\\t\\tlet parent = elementOrRange.commonAncestorContainer;\\n\\n\\t\\t// If a Range is attached to the Text, use the closest element ancestor.\\n\\t\\tif ( isText( parent ) ) {\\n\\t\\t\\tparent = parent.parentNode;\\n\\t\\t}\\n\\n\\t\\treturn parent;\\n\\t} else {\\n\\t\\treturn elementOrRange.parentNode;\\n\\t}\\n}\\n\\n// Returns the rect of an element or range residing in an iframe.\\n// The result rect is relative to the geometry of the passed window instance.\\n//\\n// @private\\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\\n// @param {Window} relativeWindow A window the rect should be relative to.\\n// @returns {module:utils/dom/rect~Rect}\\nfunction getRectRelativeToWindow( target, relativeWindow ) {\\n\\tconst targetWindow = getWindow( target );\\n\\tconst rect = new Rect( target );\\n\\n\\tif ( targetWindow === relativeWindow ) {\\n\\t\\treturn rect;\\n\\t} else {\\n\\t\\tlet currentWindow = targetWindow;\\n\\n\\t\\twhile ( currentWindow != relativeWindow ) {\\n\\t\\t\\tconst frame = currentWindow.frameElement;\\n\\t\\t\\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\\n\\n\\t\\t\\trect.moveBy( frameRect.left, frameRect.top );\\n\\n\\t\\t\\tcurrentWindow = currentWindow.parent;\\n\\t\\t}\\n\\t}\\n\\n\\treturn rect;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/view\\n */\\n\\nimport Document from './document';\\nimport Writer from './writer';\\nimport Renderer from './renderer';\\nimport DomConverter from './domconverter';\\n\\nimport MutationObserver from './observer/mutationobserver';\\nimport KeyObserver from './observer/keyobserver';\\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\\nimport SelectionObserver from './observer/selectionobserver';\\nimport FocusObserver from './observer/focusobserver';\\nimport CompositionObserver from './observer/compositionobserver';\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\\nimport { injectUiElementHandling } from './uielement';\\nimport { injectQuirksHandling } from './filler';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\\n * abstraction over the DOM structure and events and hide all browsers quirks.\\n *\\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\\n * {@link module:engine/view/writer~Writer}:\\n *\\n *\\t\\tview.change( writer => {\\n *\\t\\t\\twriter.insert( position, writer.createText( 'foo' ) );\\n *\\t\\t} );\\n *\\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\\n * Note that the following observers are added by the class constructor and are always available:\\n *\\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\\n *\\n * This class also {@link module:engine/view/view~View#attachDomRoot bind DOM and View elements}.\\n *\\n * If you do not need full DOM - View management, and want to only transform the tree of view elements to the DOM\\n * elements you do not need this controller, you can use the {@link module:engine/view/domconverter~DomConverter DomConverter}.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class View {\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/document~Document} module:engine/view/view~View#document\\n\\t\\t */\\n\\t\\tthis.document = new Document();\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} use by\\n\\t\\t * {@link module:engine/view/view~View#renderer renderer}\\n\\t\\t * and {@link module:engine/view/observer/observer~Observer observers}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/view~View#domConverter\\n\\t\\t */\\n\\t\\tthis.domConverter = new DomConverter();\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:engine/view/renderer~Renderer} module:engine/view/view~View#renderer\\n\\t\\t */\\n\\t\\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\\n\\t\\tthis._renderer.bind( 'isFocused' ).to( this.document );\\n\\n\\t\\t/**\\n\\t\\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Map} module:engine/view/view~View#domRoots\\n\\t\\t */\\n\\t\\tthis.domRoots = new Map();\\n\\n\\t\\t/**\\n\\t\\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map.<Function, module:engine/view/observer/observer~Observer>} module:engine/view/view~View#_observers\\n\\t\\t */\\n\\t\\tthis._observers = new Map();\\n\\n\\t\\t/**\\n\\t\\t * Is set to `true` when {@link #change view changes} are currently in progress.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Boolean} module:engine/view/view~View#_ongoingChange\\n\\t\\t */\\n\\t\\tthis._ongoingChange = false;\\n\\n\\t\\t/**\\n\\t\\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\\n\\t\\t */\\n\\t\\tthis._renderingInProgress = false;\\n\\n\\t\\t/**\\n\\t\\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\\n\\t\\t */\\n\\t\\tthis._postFixersInProgress = false;\\n\\n\\t\\t/**\\n\\t\\t * Writer instance used in {@link #change change method) callbacks.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/view/writer~Writer} module:engine/view/view~View#_writer\\n\\t\\t */\\n\\t\\tthis._writer = new Writer( this.document );\\n\\n\\t\\t// Add default observers.\\n\\t\\tthis.addObserver( MutationObserver );\\n\\t\\tthis.addObserver( SelectionObserver );\\n\\t\\tthis.addObserver( FocusObserver );\\n\\t\\tthis.addObserver( KeyObserver );\\n\\t\\tthis.addObserver( FakeSelectionObserver );\\n\\t\\tthis.addObserver( CompositionObserver );\\n\\n\\t\\t// Inject quirks handlers.\\n\\t\\tinjectQuirksHandling( this );\\n\\t\\tinjectUiElementHandling( this );\\n\\n\\t\\t// Use 'normal' priority so that rendering is performed as first when using that priority.\\n\\t\\tthis.on( 'render', () => {\\n\\t\\t\\tthis._render();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Attaches DOM root element to the view element and enable all observers on that element.\\n\\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized with the view\\n\\t * what means that all child nodes will be removed and replaced with content of the view root.\\n\\t *\\n\\t * This method also will change view element name as the same as tag name of given dom root.\\n\\t * Name is always transformed to lower case.\\n\\t *\\n\\t * @param {Element} domRoot DOM root element.\\n\\t * @param {String} [name='main'] Name of the root.\\n\\t */\\n\\tattachDomRoot( domRoot, name = 'main' ) {\\n\\t\\tconst viewRoot = this.document.getRoot( name );\\n\\n\\t\\t// Set view root name the same as DOM root tag name.\\n\\t\\tviewRoot._name = domRoot.tagName.toLowerCase();\\n\\n\\t\\tthis.domRoots.set( name, domRoot );\\n\\t\\tthis.domConverter.bindElements( domRoot, viewRoot );\\n\\t\\tthis._renderer.markToSync( 'children', viewRoot );\\n\\t\\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\\n\\n\\t\\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\\n\\t\\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\\n\\t\\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\\n\\n\\t\\tfor ( const observer of this._observers.values() ) {\\n\\t\\t\\tobserver.observe( domRoot, name );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets DOM root element.\\n\\t *\\n\\t * @param {String} [name='main']  Name of the root.\\n\\t * @returns {Element} DOM root element instance.\\n\\t */\\n\\tgetDomRoot( name = 'main' ) {\\n\\t\\treturn this.domRoots.get( name );\\n\\t}\\n\\n\\t/**\\n\\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\\n\\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\\n\\t * {@link #domRoots DOM roots}.\\n\\t *\\n\\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\\n\\t * when registered for the first time. This means that features and other components can register a single observer\\n\\t * multiple times without caring whether it has been already added or not.\\n\\t *\\n\\t * @param {Function} Observer The constructor of an observer to add.\\n\\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\\n\\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\\n\\t */\\n\\taddObserver( Observer ) {\\n\\t\\tlet observer = this._observers.get( Observer );\\n\\n\\t\\tif ( observer ) {\\n\\t\\t\\treturn observer;\\n\\t\\t}\\n\\n\\t\\tobserver = new Observer( this );\\n\\n\\t\\tthis._observers.set( Observer, observer );\\n\\n\\t\\tfor ( const [ name, domElement ] of this.domRoots ) {\\n\\t\\t\\tobserver.observe( domElement, name );\\n\\t\\t}\\n\\n\\t\\tobserver.enable();\\n\\n\\t\\treturn observer;\\n\\t}\\n\\n\\t/**\\n\\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\\n\\t *\\n\\t * @param {Function} Observer The constructor of an observer to get.\\n\\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\\n\\t */\\n\\tgetObserver( Observer ) {\\n\\t\\treturn this._observers.get( Observer );\\n\\t}\\n\\n\\t/**\\n\\t * Disables all added observers.\\n\\t */\\n\\tdisableObservers() {\\n\\t\\tfor ( const observer of this._observers.values() ) {\\n\\t\\t\\tobserver.disable();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Enables all added observers.\\n\\t */\\n\\tenableObservers() {\\n\\t\\tfor ( const observer of this._observers.values() ) {\\n\\t\\t\\tobserver.enable();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\\n\\t * caret, if not already visible to the user.\\n\\t */\\n\\tscrollToTheSelection() {\\n\\t\\tconst range = this.document.selection.getFirstRange();\\n\\n\\t\\tif ( range ) {\\n\\t\\t\\tscrollViewportToShowTarget( {\\n\\t\\t\\t\\ttarget: this.domConverter.viewRangeToDom( range ),\\n\\t\\t\\t\\tviewportOffset: 20\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\\n\\t * that is currently having selection inside.\\n\\t */\\n\\tfocus() {\\n\\t\\tif ( !this.document.isFocused ) {\\n\\t\\t\\tconst editable = this.document.selection.editableElement;\\n\\n\\t\\t\\tif ( editable ) {\\n\\t\\t\\t\\tthis.domConverter.focus( editable );\\n\\t\\t\\t\\tthis.render();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Before focusing view document, selection should be placed inside one of the view's editables.\\n\\t\\t\\t\\t * Normally its selection will be converted from model document (which have default selection), but\\n\\t\\t\\t\\t * when using view document on its own, we need to manually place selection before focusing it.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error view-focus-no-selection\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tlog.warn( 'view-focus-no-selection: There is no selection in any editable to focus.' );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Change method is the primary way of changing the view. You should use it to modify any node in the view tree.\\n\\t * It makes sure that after all changes are made view is rendered to DOM. It prevents situations when DOM is updated\\n\\t * when view state is not yet correct. It allows to nest calls one inside another and still perform single rendering\\n\\t * after all changes are applied.\\n\\t *\\n\\t *\\t\\tview.change( writer => {\\n\\t *\\t\\t\\twriter.insert( position1, writer.createText( 'foo' ) );\\n\\t *\\n\\t *\\t\\t\\tview.change( writer => {\\n\\t *\\t\\t\\t\\twriter.insert( position2, writer.createText( 'bar' ) );\\n\\t *\\t\\t\\t} );\\n\\t *\\n\\t * \\t\\t\\twriter.remove( range );\\n\\t *\\t\\t} );\\n\\t *\\n\\t * Change block is executed immediately.\\n\\t *\\n\\t * When the outermost change block is done and rendering to DOM is over it fires\\n\\t * {@link module:engine/view/view~View#event:render} event.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\\n\\t * change block is used after rendering to DOM has started.\\n\\t *\\n\\t * @param {Function} callback Callback function which may modify the view.\\n\\t */\\n\\tchange( callback ) {\\n\\t\\tif ( this._renderingInProgress || this._postFixersInProgress ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\\n\\t\\t\\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\\n\\t\\t\\t * This may be caused by:\\n\\t\\t\\t *   * calling {@link #change} or {@link #render} during rendering process,\\n\\t\\t\\t *   * calling {@link #change} or {@link #render} inside of\\n\\t\\t\\t *   {@link module:engine/view/document~Document#registerPostFixer post fixer function}.\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'cannot-change-view-tree: ' +\\n\\t\\t\\t\\t'Attempting to make changes to the view when it is in incorrect state: rendering or post fixers are in progress. ' +\\n\\t\\t\\t\\t'This may cause some unexpected behaviour and inconsistency between the DOM and the view.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Recursive call to view.change() method - execute listener immediately.\\n\\t\\tif ( this._ongoingChange ) {\\n\\t\\t\\tcallback( this._writer );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \\\"render\\\"\\n\\t\\t// event for all nested calls.\\n\\t\\tthis._ongoingChange = true;\\n\\t\\tcallback( this._writer );\\n\\t\\tthis._ongoingChange = false;\\n\\n\\t\\t// Execute all document post fixers after the change.\\n\\t\\tthis._postFixersInProgress = true;\\n\\t\\tthis.document._callPostFixers( this._writer );\\n\\t\\tthis._postFixersInProgress = false;\\n\\n\\t\\tthis.fire( 'render' );\\n\\t}\\n\\n\\t/**\\n\\t * Renders {@link module:engine/view/document~Document view document} to DOM. If any view changes are\\n\\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\\n\\t * trying to re-render when rendering to DOM has already started.\\n\\t */\\n\\trender() {\\n\\t\\tthis.change( () => {} );\\n\\t}\\n\\n\\t/**\\n\\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\\n\\t */\\n\\tdestroy() {\\n\\t\\tfor ( const observer of this._observers.values() ) {\\n\\t\\t\\tobserver.destroy();\\n\\t\\t}\\n\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\\n\\t * before rendering and re-enabled after that.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_render() {\\n\\t\\tthis._renderingInProgress = true;\\n\\t\\tthis.disableObservers();\\n\\t\\tthis._renderer.render();\\n\\t\\tthis.enableObservers();\\n\\t\\tthis._renderingInProgress = false;\\n\\t}\\n\\n\\t/**\\n\\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\\n\\t * {@link module:engine/view/document~Document#registerPostFixer post fixers} are executed.\\n\\t *\\n\\t * Actual rendering is performed as a first listener on 'normal' priority.\\n\\t *\\n\\t *\\t\\tview.on( 'render', () => {\\n\\t *\\t\\t\\t// Rendering to the DOM is complete.\\n\\t *\\t\\t} );\\n\\t *\\n\\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\\n\\t * balloon panel. If you wants to change view structure use\\n\\t * {@link module:engine/view/document~Document#registerPostFixer post fixers}.\\n\\t *\\n\\t * @event module:engine/view/view~View#event:render\\n\\t */\\n}\\n\\nmix( View, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/tomap\\n */\\n\\nimport isPlainObject from './lib/lodash/isPlainObject';\\nimport objectToMap from './objecttomap';\\n\\n/**\\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\\n *\\n *\\t\\tmap = toMap( { 'foo': 1, 'bar': 2 } );\\n *\\t\\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\\n *\\t\\tmap = toMap( anotherMap );\\n *\\n * @param {Object|Iterable} data Object or iterable to transform.\\n * @returns {Map} Map created from data.\\n */\\nexport default function toMap( data ) {\\n\\tif ( isPlainObject( data ) ) {\\n\\t\\treturn objectToMap( data );\\n\\t} else {\\n\\t\\treturn new Map( data );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/node\\n */\\n\\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Model node. Most basic structure of model tree.\\n *\\n * This is an abstract class that is a base for other classes representing different nodes in model.\\n *\\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\\n * However, it is **very important** that nodes already attached to model tree should be only changed through\\n * {@link module:engine/model/writer~Writer Writer API}.\\n *\\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChildren _insertChildren} or\\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\\n *\\n * The flow of working on `Node` (and classes that inherits from it) is as such:\\n * 1. You can create a `Node` instance, modify it using it's API.\\n * 2. Add `Node` to the model using `Batch` API.\\n * 3. Change `Node` that was already added to the model using `Batch` API.\\n *\\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\\n *\\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\\n * the information about `Node` is still kept in model document.\\n *\\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\\n * follows same rules.\\n */\\nexport default class Node {\\n\\t/**\\n\\t * Creates a model node.\\n\\t *\\n\\t * This is an abstract class, so this constructor should not be used directly.\\n\\t *\\n\\t * @abstract\\n\\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\\n\\t */\\n\\tconstructor( attrs ) {\\n\\t\\t/**\\n\\t\\t * Parent of this node. It could be {@link module:engine/model/element~Element}\\n\\t\\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\\n\\t\\t * Equals to `null` if the node has no parent.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\\n\\t\\t */\\n\\t\\tthis.parent = null;\\n\\n\\t\\t/**\\n\\t\\t * Attributes set on this node.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} module:engine/model/node~Node#_attrs\\n\\t\\t */\\n\\t\\tthis._attrs = toMap( attrs );\\n\\t}\\n\\n\\t/**\\n\\t * Index of this node in it's parent or `null` if the node has no parent.\\n\\t *\\n\\t * Accessing this property throws an error if this node's parent element does not contain it.\\n\\t * This means that model tree got broken.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number|null}\\n\\t */\\n\\tget index() {\\n\\t\\tlet pos;\\n\\n\\t\\tif ( !this.parent ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\\n\\t\\t\\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\\\'s parent does not contain this node.' );\\n\\t\\t}\\n\\n\\t\\treturn pos;\\n\\t}\\n\\n\\t/**\\n\\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\\n\\t * of all it's previous siblings. Equals to `null` if node has no parent.\\n\\t *\\n\\t * Accessing this property throws an error if this node's parent element does not contain it.\\n\\t * This means that model tree got broken.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number|Null}\\n\\t */\\n\\tget startOffset() {\\n\\t\\tlet pos;\\n\\n\\t\\tif ( !this.parent ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\\n\\t\\t\\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\\\'s parent does not contain this node.' );\\n\\t\\t}\\n\\n\\t\\treturn pos;\\n\\t}\\n\\n\\t/**\\n\\t * Offset size of this node. Represents how much \\\"offset space\\\" is occupied by the node in it's parent.\\n\\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\\n\\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\\n\\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget offsetSize() {\\n\\t\\treturn 1;\\n\\t}\\n\\n\\t/**\\n\\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\\n\\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\\n\\t * Equals to `null` if the node has no parent.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number|null}\\n\\t */\\n\\tget endOffset() {\\n\\t\\tif ( !this.parent ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn this.startOffset + this.offsetSize;\\n\\t}\\n\\n\\t/**\\n\\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/node~Node|null}\\n\\t */\\n\\tget nextSibling() {\\n\\t\\tconst index = this.index;\\n\\n\\t\\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/node~Node|null}\\n\\t */\\n\\tget previousSibling() {\\n\\t\\tconst index = this.index;\\n\\n\\t\\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\\n\\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\tlet root = this; // eslint-disable-line consistent-this\\n\\n\\t\\twhile ( root.parent ) {\\n\\t\\t\\troot = root.parent;\\n\\t\\t}\\n\\n\\t\\treturn root;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\\n\\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/document~Document|null}\\n\\t */\\n\\tget document() {\\n\\t\\t// This is a top element of a sub-tree.\\n\\t\\tif ( this.root == this ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// Root may be `DocumentFragment` which does not have document property.\\n\\t\\treturn this.root.document || null;\\n\\t}\\n\\n\\t/**\\n\\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\\n\\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\\n\\t * create {@link module:engine/model/position~Position Position} instance.\\n\\t *\\n\\t *\\t\\tconst abc = new Text( 'abc' );\\n\\t *\\t\\tconst foo = new Text( 'foo' );\\n\\t *\\t\\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\\n\\t *\\t\\tconst p = new Element( 'p', null, [ abc, foo ] );\\n\\t *\\t\\tconst div = new Element( 'div', null, [ h1, p ] );\\n\\t *\\t\\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\\n\\t *\\t\\th1.getPath(); // Returns [ 0 ].\\n\\t *\\t\\tdiv.getPath(); // Returns [].\\n\\t *\\n\\t * @returns {Array.<Number>} The path.\\n\\t */\\n\\tgetPath() {\\n\\t\\tconst path = [];\\n\\t\\tlet node = this; // eslint-disable-line consistent-this\\n\\n\\t\\twhile ( node.parent ) {\\n\\t\\t\\tpath.unshift( node.startOffset );\\n\\t\\t\\tnode = node.parent;\\n\\t\\t}\\n\\n\\t\\treturn path;\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this node.\\n\\t *\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\\n\\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\\n\\t * otherwise root element will be the first item in the array.\\n\\t * @returns {Array} Array with ancestors.\\n\\t */\\n\\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\\n\\t\\tconst ancestors = [];\\n\\t\\tlet parent = options.includeSelf ? this : this.parent;\\n\\n\\t\\twhile ( parent ) {\\n\\t\\t\\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn ancestors;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of both nodes.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node The second node.\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \\\"ancestors\\\" too.\\n\\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\\n\\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor( node, options = {} ) {\\n\\t\\tconst ancestorsA = this.getAncestors( options );\\n\\t\\tconst ancestorsB = node.getAncestors( options );\\n\\n\\t\\tlet i = 0;\\n\\n\\t\\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\treturn i === 0 ? null : ancestorsA[ i - 1 ];\\n\\t}\\n\\n\\t/**\\n\\t * Checks if the node has an attribute with given key.\\n\\t *\\n\\t * @param {String} key Key of attribute to check.\\n\\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\\n\\t */\\n\\thasAttribute( key ) {\\n\\t\\treturn this._attrs.has( key );\\n\\t}\\n\\n\\t/**\\n\\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\\n\\t *\\n\\t * @param {String} key Key of attribute to look for.\\n\\t * @returns {*} Attribute value or `undefined`.\\n\\t */\\n\\tgetAttribute( key ) {\\n\\t\\treturn this._attrs.get( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over this node's attributes.\\n\\t *\\n\\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\\n\\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\tgetAttributes() {\\n\\t\\treturn this._attrs.entries();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over this node's attribute keys.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetAttributeKeys() {\\n\\t\\treturn this._attrs.keys();\\n\\t}\\n\\n\\t/**\\n\\t * Converts `Node` to plain object and returns it.\\n\\t *\\n\\t * @returns {Object} `Node` converted to plain object.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = {};\\n\\n\\t\\tif ( this._attrs.size ) {\\n\\t\\t\\tjson.attributes = [ ...this._attrs ];\\n\\t\\t}\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\\n\\t *\\n\\t * @protected\\n\\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\\n\\t */\\n\\t_clone() {\\n\\t\\treturn new Node( this._attrs );\\n\\t}\\n\\n\\t/**\\n\\t * Removes this node from it's parent.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#remove\\n\\t * @protected\\n\\t */\\n\\t_remove() {\\n\\t\\tthis.parent._removeChildren( this.index );\\n\\t}\\n\\n\\t/**\\n\\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#setAttribute\\n\\t * @protected\\n\\t * @param {String} key Key of attribute to set.\\n\\t * @param {*} value Attribute value.\\n\\t */\\n\\t_setAttribute( key, value ) {\\n\\t\\tthis._attrs.set( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes all attributes from the node and sets given attributes.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#setAttributes\\n\\t * @protected\\n\\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\\n\\t */\\n\\t_setAttributesTo( attrs ) {\\n\\t\\tthis._attrs = toMap( attrs );\\n\\t}\\n\\n\\t/**\\n\\t * Removes an attribute with given key from the node.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#removeAttribute\\n\\t * @protected\\n\\t * @param {String} key Key of attribute to remove.\\n\\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\\n\\t */\\n\\t_removeAttribute( key ) {\\n\\t\\treturn this._attrs.delete( key );\\n\\t}\\n\\n\\t/**\\n\\t * Removes all attributes from the node.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#clearAttributes\\n\\t * @protected\\n\\t */\\n\\t_clearAttributes() {\\n\\t\\tthis._attrs.clear();\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given model tree object is of given type.\\n\\t *\\n\\t * This method is useful when processing model tree objects that are of unknown type. For example, a function\\n\\t * may return {@link module:engine/model/documentfragment~DocumentFragment} or {@link module:engine/model/node~Node}\\n\\t * that can be either text node or element. This method can be used to check what kind of object is returned.\\n\\t *\\n\\t *\\t\\tobj.is( 'node' ); // true for any node, false for document fragment\\n\\t *\\t\\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\\n\\t *\\t\\tobj.is( 'element' ); // true for any element, false for text node or document fragment\\n\\t *\\t\\tobj.is( 'element', 'paragraph' ); // true only for element which name is 'paragraph'\\n\\t *\\t\\tobj.is( 'paragraph' ); // shortcut for obj.is( 'element', 'paragraph' )\\n\\t *\\t\\tobj.is( 'text' ); // true for text node, false for element and document fragment\\n\\t *\\t\\tobj.is( 'textProxy' ); // true for text proxy object\\n\\t *\\n\\t * @method #is\\n\\t * @param {'element'|'rootElement'|'text'|'textProxy'|'documentFragment'} type\\n\\t * @returns {Boolean}\\n\\t */\\n}\\n\\n/**\\n * The node's parent does not contain this node.\\n *\\n * This error may be thrown from corrupted trees.\\n *\\n * @error model-node-not-found-in-parent\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/text\\n */\\n\\nimport Node from './node';\\n\\n/**\\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\\n *\\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\\n *\\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\\n *\\n * @extends {module:engine/model/node~Node}\\n */\\nexport default class Text extends Node {\\n\\t/**\\n\\t * Creates a text node.\\n\\t *\\n\\t * **Note:** Constructor of this class shouldn't be used directly in the code.\\n\\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} data Node's text.\\n\\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\\n\\t */\\n\\tconstructor( data, attrs ) {\\n\\t\\tsuper( attrs );\\n\\n\\t\\t/**\\n\\t\\t * Text data contained in this text node.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @type {String}\\n\\t\\t */\\n\\t\\tthis._data = data || '';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget offsetSize() {\\n\\t\\treturn this.data.length;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a text data contained in the node.\\n\\t *\\n\\t * @returns {String}\\n\\t */\\n\\tget data() {\\n\\t\\treturn this._data;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'text';\\n\\t}\\n\\n\\t/**\\n\\t * Converts `Text` instance to plain object and returns it.\\n\\t *\\n\\t * @returns {Object} `Text` instance converted to plain object.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = super.toJSON();\\n\\n\\t\\tjson.data = this.data;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\\n\\t *\\n\\t * @protected\\n\\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\\n\\t */\\n\\t_clone() {\\n\\t\\treturn new Text( this.data, this.getAttributes() );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\\n\\t *\\n\\t * @param {Object} json Plain object to be converted to `Text`.\\n\\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\\n\\t */\\n\\tstatic fromJSON( json ) {\\n\\t\\treturn new Text( json.data, json.attributes );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/textproxy\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\\n *\\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\\n * getting items}\\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\\n * `TextProxy` solves this issue.\\n *\\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\\n * on model nodes.\\n *\\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\\n *\\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\\n * parameter of methods.\\n *\\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\\n * use {@link module:engine/model/writer~Writer model writer API}.\\n *\\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\\n * position}.\\n *\\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\\n * an instance of this class by your own.\\n */\\nexport default class TextProxy {\\n\\t/**\\n\\t * Creates a text proxy.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\\n\\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\\n\\t * starts.\\n\\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\\n\\t * @constructor\\n\\t */\\n\\tconstructor( textNode, offsetInText, length ) {\\n\\t\\t/**\\n\\t\\t * Text node which part is represented by this text proxy.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/text~Text}\\n\\t\\t */\\n\\t\\tthis.textNode = textNode;\\n\\n\\t\\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given `offsetInText` value is incorrect.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-textproxy-wrong-offsetintext\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\\n\\t\\t}\\n\\n\\t\\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given `length` value is incorrect.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-textproxy-wrong-length\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Text data represented by this text proxy.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\\n\\n\\t\\t/**\\n\\t\\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis.offsetInText = offsetInText;\\n\\t}\\n\\n\\t/**\\n\\t * Offset at which this text proxy starts in it's parent.\\n\\t *\\n\\t * @see module:engine/model/node~Node#startOffset\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget startOffset() {\\n\\t\\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\\n\\t}\\n\\n\\t/**\\n\\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\\n\\t *\\n\\t * @see module:engine/model/node~Node#offsetSize\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget offsetSize() {\\n\\t\\treturn this.data.length;\\n\\t}\\n\\n\\t/**\\n\\t * Offset at which this text proxy ends in it's parent.\\n\\t *\\n\\t * @see module:engine/model/node~Node#endOffset\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget endOffset() {\\n\\t\\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\\n\\t}\\n\\n\\t/**\\n\\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\\n\\t * (`true`) or the whole text node (`false`).\\n\\t *\\n\\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\\n\\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\\n\\t * text node size.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isPartial() {\\n\\t\\treturn this.offsetSize !== this.textNode.offsetSize;\\n\\t}\\n\\n\\t/**\\n\\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tget parent() {\\n\\t\\treturn this.textNode.parent;\\n\\t}\\n\\n\\t/**\\n\\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this.textNode.root;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\\n\\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/document~Document|null}\\n\\t */\\n\\tget document() {\\n\\t\\treturn this.textNode.document;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given model tree object is of given type.\\n\\t *\\n\\t * Read more in {@link module:engine/model/node~Node#is}.\\n\\t *\\n\\t * @param {String} type\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'textProxy';\\n\\t}\\n\\n\\t/**\\n\\t * Gets path to this text proxy.\\n\\t *\\n\\t * @see module:engine/model/node~Node#getPath\\n\\t * @returns {Array.<Number>}\\n\\t */\\n\\tgetPath() {\\n\\t\\tconst path = this.textNode.getPath();\\n\\n\\t\\tif ( path.length > 0 ) {\\n\\t\\t\\tpath[ path.length - 1 ] += this.offsetInText;\\n\\t\\t}\\n\\n\\t\\treturn path;\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this text proxy.\\n\\t *\\n\\t * @param {Object} options Options object.\\n\\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\\n\\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\\n\\t * otherwise root element will be the first item in the array.\\n\\t * @returns {Array} Array with ancestors.\\n\\t */\\n\\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\\n\\t\\tconst ancestors = [];\\n\\t\\tlet parent = options.includeSelf ? this : this.parent;\\n\\n\\t\\twhile ( parent ) {\\n\\t\\t\\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn ancestors;\\n\\t}\\n\\n\\t/**\\n\\t * Checks if this text proxy has an attribute for given key.\\n\\t *\\n\\t * @param {String} key Key of attribute to check.\\n\\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\\n\\t */\\n\\thasAttribute( key ) {\\n\\t\\treturn this.textNode.hasAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\\n\\t *\\n\\t * @param {String} key Key of attribute to look for.\\n\\t * @returns {*} Attribute value or `undefined`.\\n\\t */\\n\\tgetAttribute( key ) {\\n\\t\\treturn this.textNode.getAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\\n\\t * items. First one is attribute key and second is attribute value.\\n\\t *\\n\\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\tgetAttributes() {\\n\\t\\treturn this.textNode.getAttributes();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over this node's attribute keys.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetAttributeKeys() {\\n\\t\\treturn this.textNode.getAttributeKeys();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/nodelist\\n */\\n\\nimport Node from './node';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\\n * in classes like {@link module:engine/model/element~Element Element}\\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\\n */\\nexport default class NodeList {\\n\\t/**\\n\\t * Creates an empty node list.\\n\\t *\\n\\t * @protected\\n\\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\\n\\t */\\n\\tconstructor( nodes ) {\\n\\t\\t/**\\n\\t\\t * Nodes contained in this node list.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Array.<module:engine/model/node~Node>}\\n\\t\\t */\\n\\t\\tthis._nodes = [];\\n\\n\\t\\tif ( nodes ) {\\n\\t\\t\\tthis._insertNodes( 0, nodes );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over all nodes contained inside this node list.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/node~Node>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._nodes[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Number of nodes contained inside this node list.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget length() {\\n\\t\\treturn this._nodes.length;\\n\\t}\\n\\n\\t/**\\n\\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget maxOffset() {\\n\\t\\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\\n\\t *\\n\\t * @param {Number} index Index of node.\\n\\t * @returns {module:engine/model/node~Node|null} Node at given index.\\n\\t */\\n\\tgetNode( index ) {\\n\\t\\treturn this._nodes[ index ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Child node to look for.\\n\\t * @returns {Number|null} Child node's index.\\n\\t */\\n\\tgetNodeIndex( node ) {\\n\\t\\tconst index = this._nodes.indexOf( node );\\n\\n\\t\\treturn index == -1 ? null : index;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the starting offset of given node. Starting offset is equal to the sum of\\n\\t * {module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Node to look for.\\n\\t * @returns {Number|null} Node's starting offset.\\n\\t */\\n\\tgetNodeStartOffset( node ) {\\n\\t\\tconst index = this.getNodeIndex( node );\\n\\n\\t\\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\\n\\t}\\n\\n\\t/**\\n\\t * Converts index to offset in node list.\\n\\t *\\n\\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\\n\\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\\n\\t *\\n\\t * @param {Number} index Node's index.\\n\\t * @returns {Number} Node's starting offset.\\n\\t */\\n\\tindexToOffset( index ) {\\n\\t\\tif ( index == this._nodes.length ) {\\n\\t\\t\\treturn this.maxOffset;\\n\\t\\t}\\n\\n\\t\\tconst node = this._nodes[ index ];\\n\\n\\t\\tif ( !node ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given index cannot be found in the node list.\\n\\t\\t\\t *\\n\\t\\t\\t * @error nodelist-index-out-of-bounds\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.' );\\n\\t\\t}\\n\\n\\t\\treturn this.getNodeStartOffset( node );\\n\\t}\\n\\n\\t/**\\n\\t * Converts offset in node list to index.\\n\\t *\\n\\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\\n\\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\\n\\t *\\n\\t * @param {Number} offset Offset to look for.\\n\\t * @returns {Number} Index of a node that occupies given offset.\\n\\t */\\n\\toffsetToIndex( offset ) {\\n\\t\\tlet totalOffset = 0;\\n\\n\\t\\tfor ( const node of this._nodes ) {\\n\\t\\t\\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\\n\\t\\t\\t\\treturn this.getNodeIndex( node );\\n\\t\\t\\t}\\n\\n\\t\\t\\ttotalOffset += node.offsetSize;\\n\\t\\t}\\n\\n\\t\\tif ( totalOffset != offset ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given offset cannot be found in the node list.\\n\\t\\t\\t *\\n\\t\\t\\t * @error nodelist-offset-out-of-bounds\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.' );\\n\\t\\t}\\n\\n\\t\\treturn this.length;\\n\\t}\\n\\n\\t/**\\n\\t * Inserts given nodes at given index.\\n\\t *\\n\\t * @protected\\n\\t * @param {Number} index Index at which nodes should be inserted.\\n\\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\\n\\t */\\n\\t_insertNodes( index, nodes ) {\\n\\t\\t// Validation.\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\tif ( !( node instanceof Node ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Trying to insert an object which is not a Node instance.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error nodelist-insertNodes-not-node\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.' );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._nodes.splice( index, 0, ...nodes );\\n\\t}\\n\\n\\t/**\\n\\t * Removes one or more nodes starting at the given index.\\n\\t *\\n\\t * @protected\\n\\t * @param {Number} indexStart Index of the first node to remove.\\n\\t * @param {Number} [howMany=1] Number of nodes to remove.\\n\\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\\n\\t */\\n\\t_removeNodes( indexStart, howMany = 1 ) {\\n\\t\\treturn this._nodes.splice( indexStart, howMany );\\n\\t}\\n\\n\\t/**\\n\\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\\n\\t * are also converted to their plain object representation.\\n\\t *\\n\\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\\n\\t */\\n\\ttoJSON() {\\n\\t\\treturn this._nodes.map( node => node.toJSON() );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/element\\n */\\n\\nimport Node from './node';\\nimport NodeList from './nodelist';\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\n\\n/**\\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\\n * {@link module:engine/model/element~Element#getChildren child nodes}.\\n *\\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\\n *\\n * @extends {module:engine/model/node~Node}\\n */\\nexport default class Element extends Node {\\n\\t/**\\n\\t * Creates a model element.\\n\\t *\\n\\t * **Note:** Constructor of this class shouldn't be used directly in the code.\\n\\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} name Element's name.\\n\\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\\n\\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\\n\\t * One or more nodes to be inserted as children of created element.\\n\\t */\\n\\tconstructor( name, attrs, children ) {\\n\\t\\tsuper( attrs );\\n\\n\\t\\t/**\\n\\t\\t * Element name.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String} module:engine/model/element~Element#name\\n\\t\\t */\\n\\t\\tthis.name = name;\\n\\n\\t\\t/**\\n\\t\\t * List of children nodes.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\\n\\t\\t */\\n\\t\\tthis._children = new NodeList();\\n\\n\\t\\tif ( children ) {\\n\\t\\t\\tthis._insertChildren( 0, children );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Number of this element's children.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget childCount() {\\n\\t\\treturn this._children.length;\\n\\t}\\n\\n\\t/**\\n\\t * Sum of {module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget maxOffset() {\\n\\t\\treturn this._children.maxOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if there are no nodes inside this element, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isEmpty() {\\n\\t\\treturn this.childCount === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given model tree object is of given type.\\n\\t *\\n\\t *\\t\\tobj.name; // 'listItem'\\n\\t *\\t\\tobj instanceof Element; // true\\n\\t *\\n\\t *\\t\\tobj.is( 'element' ); // true\\n\\t *\\t\\tobj.is( 'listItem' ); // true\\n\\t *\\t\\tobj.is( 'element', 'listItem' ); // true\\n\\t *\\t\\tobj.is( 'text' ); // false\\n\\t *\\t\\tobj.is( 'element', 'image' ); // false\\n\\t *\\n\\t * Read more in {@link module:engine/model/node~Node#is}.\\n\\t *\\n\\t * @param {String} type Type to check when `name` parameter is present.\\n\\t * Otherwise, it acts like the `name` parameter.\\n\\t * @param {String} [name] Element name.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type, name = null ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'element' || type == this.name;\\n\\t\\t} else {\\n\\t\\t\\treturn type == 'element' && name == this.name;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the child at the given index.\\n\\t *\\n\\t * @param {Number} index Index of child.\\n\\t * @returns {module:engine/model/node~Node} Child node.\\n\\t */\\n\\tgetChild( index ) {\\n\\t\\treturn this._children.getNode( index );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all of this element's children.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/node~Node>}\\n\\t */\\n\\tgetChildren() {\\n\\t\\treturn this._children[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Child node to look for.\\n\\t * @returns {Number} Child node's index in this element.\\n\\t */\\n\\tgetChildIndex( node ) {\\n\\t\\treturn this._children.getNodeIndex( node );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the starting offset of given child. Starting offset is equal to the sum of\\n\\t * {module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\\n\\t * given node is not a child of this element.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Child node to look for.\\n\\t * @returns {Number} Child node's starting offset.\\n\\t */\\n\\tgetChildStartOffset( node ) {\\n\\t\\treturn this._children.getNodeStartOffset( node );\\n\\t}\\n\\n\\t/**\\n\\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\\n\\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\\n\\t *\\n\\t *\\t\\tconst textNode = new Text( 'foo' );\\n\\t *\\t\\tconst pElement = new Element( 'p' );\\n\\t *\\t\\tconst divElement = new Element( [ textNode, pElement ] );\\n\\t *\\t\\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\\n\\t *\\t\\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\\n\\t *\\t\\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\\n\\t *\\t\\tdivElement.offsetToIndex( 2 ); // Returns 0.\\n\\t *\\t\\tdivElement.offsetToIndex( 3 ); // Returns 1.\\n\\t *\\t\\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\\n\\t *\\n\\t * @param {Number} offset Offset to look for.\\n\\t * @returns {Number}\\n\\t */\\n\\toffsetToIndex( offset ) {\\n\\t\\treturn this._children.offsetToIndex( offset );\\n\\t}\\n\\n\\t/**\\n\\t * Returns a descendant node by its path relative to this element.\\n\\t *\\n\\t *\\t\\t// <this>a<b>c</b></this>\\n\\t *\\t\\tthis.getNodeByPath( [ 0 ] );     // -> \\\"a\\\"\\n\\t *\\t\\tthis.getNodeByPath( [ 1 ] );     // -> <b>\\n\\t *\\t\\tthis.getNodeByPath( [ 1, 0 ] );  // -> \\\"c\\\"\\n\\t *\\n\\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\\n\\t * @returns {module:engine/model/node~Node}\\n\\t */\\n\\tgetNodeByPath( relativePath ) {\\n\\t\\tlet node = this; // eslint-disable-line consistent-this\\n\\n\\t\\tfor ( const index of relativePath ) {\\n\\t\\t\\tnode = node.getChild( node.offsetToIndex( index ) );\\n\\t\\t}\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\\n\\t *\\n\\t * @returns {Object} `Element` instance converted to plain object.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = super.toJSON();\\n\\n\\t\\tjson.name = this.name;\\n\\n\\t\\tif ( this._children.length > 0 ) {\\n\\t\\t\\tjson.children = [];\\n\\n\\t\\t\\tfor ( const node of this._children ) {\\n\\t\\t\\t\\tjson.children.push( node.toJSON() );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\\n\\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\\n\\t *\\n\\t * @protected\\n\\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\\n\\t * element will be cloned without any child.\\n\\t */\\n\\t_clone( deep = false ) {\\n\\t\\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\\n\\n\\t\\treturn new Element( this.name, this.getAttributes(), children );\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/element~Element#_insertChildren Inserts} one or more nodes at the end of this element.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#append\\n\\t * @protected\\n\\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\\n\\t */\\n\\t_appendChildren( nodes ) {\\n\\t\\tthis._insertChildren( this.childCount, nodes );\\n\\t}\\n\\n\\t/**\\n\\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\\n\\t * to this element.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#insert\\n\\t * @protected\\n\\t * @param {Number} index Index at which nodes should be inserted.\\n\\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\\n\\t */\\n\\t_insertChildren( index, items ) {\\n\\t\\tconst nodes = normalize( items );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\\n\\t\\t\\tif ( node.parent !== null ) {\\n\\t\\t\\t\\tnode._remove();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode.parent = this;\\n\\t\\t}\\n\\n\\t\\tthis._children._insertNodes( index, nodes );\\n\\t}\\n\\n\\t/**\\n\\t * Removes one or more nodes starting at the given index and sets\\n\\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#remove\\n\\t * @protected\\n\\t * @param {Number} index Index of the first node to remove.\\n\\t * @param {Number} [howMany=1] Number of nodes to remove.\\n\\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\\n\\t */\\n\\t_removeChildren( index, howMany = 1 ) {\\n\\t\\tconst nodes = this._children._removeNodes( index, howMany );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\tnode.parent = null;\\n\\t\\t}\\n\\n\\t\\treturn nodes;\\n\\t}\\n\\n\\t/**\\n\\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\\n\\t * Converts `Element` children to proper nodes.\\n\\t *\\n\\t * @param {Object} json Plain object to be converted to `Element`.\\n\\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\\n\\t */\\n\\tstatic fromJSON( json ) {\\n\\t\\tlet children = null;\\n\\n\\t\\tif ( json.children ) {\\n\\t\\t\\tchildren = [];\\n\\n\\t\\t\\tfor ( const child of json.children ) {\\n\\t\\t\\t\\tif ( child.name ) {\\n\\t\\t\\t\\t\\t// If child has name property, it is an Element.\\n\\t\\t\\t\\t\\tchildren.push( Element.fromJSON( child ) );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Otherwise, it is a Text node.\\n\\t\\t\\t\\t\\tchildren.push( Text.fromJSON( child ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn new Element( json.name, json.attributes, children );\\n\\t}\\n}\\n\\n// Converts strings to Text and non-iterables to arrays.\\n//\\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\\n// @return {Iterable.<module:engine/model/node~Node>}\\nfunction normalize( nodes ) {\\n\\t// Separate condition because string is iterable.\\n\\tif ( typeof nodes == 'string' ) {\\n\\t\\treturn [ new Text( nodes ) ];\\n\\t}\\n\\n\\tif ( !isIterable( nodes ) ) {\\n\\t\\tnodes = [ nodes ];\\n\\t}\\n\\n\\t// Array.from to enable .map() on non-arrays.\\n\\treturn Array.from( nodes )\\n\\t\\t.map( node => {\\n\\t\\t\\tif ( typeof node == 'string' ) {\\n\\t\\t\\t\\treturn new Text( node );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( node instanceof TextProxy ) {\\n\\t\\t\\t\\treturn new Text( node.data, node.getAttributes() );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn node;\\n\\t\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/treewalker\\n */\\n\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport Element from './element';\\nimport Position from './position';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Position iterator class. It allows to iterate forward and backward over the document.\\n */\\nexport default class TreeWalker {\\n\\t/**\\n\\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\\n\\t *\\n\\t * @constructor\\n\\t * @param {Object} [options={}] Object with configuration.\\n\\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\\n\\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\\n\\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\\n\\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\\n\\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\\n\\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\\n\\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\\n\\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\\n\\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\\n\\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\\n\\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\\n\\t * twice: for `'elementStart'` and `'elementEnd'`.\\n\\t */\\n\\tconstructor( options = {} ) {\\n\\t\\tif ( !options.boundaries && !options.startPosition ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-tree-walker-no-start-position\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\\n\\t\\t}\\n\\n\\t\\tconst direction = options.direction || 'forward';\\n\\n\\t\\tif ( direction != 'forward' && direction != 'backward' ) {\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\\n\\t\\t\\t\\t{ direction }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Walking direction. Defaults `'forward'`.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\\n\\t\\t */\\n\\t\\tthis.direction = direction;\\n\\n\\t\\t/**\\n\\t\\t * Iterator boundaries.\\n\\t\\t *\\n\\t\\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\\n\\t\\t * on the start of boundary, then `{ done: true }` is returned.\\n\\t\\t *\\n\\t\\t * If boundaries are not defined they are set before first and after last child of the root node.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\\n\\t\\t */\\n\\t\\tthis.boundaries = options.boundaries || null;\\n\\n\\t\\t/**\\n\\t\\t * Iterator position. This is always static position, even if the initial position was a\\n\\t\\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\\n\\t\\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\\n\\t\\t * is `'backward'` position starts from the end.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\\n\\t\\t */\\n\\t\\tif ( options.startPosition ) {\\n\\t\\t\\tthis.position = Position.createFromPosition( options.startPosition );\\n\\t\\t} else {\\n\\t\\t\\tthis.position = Position.createFromPosition( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether all consecutive characters with the same attributes should be\\n\\t\\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\\n\\t\\t */\\n\\t\\tthis.singleCharacters = !!options.singleCharacters;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\\n\\t\\t * iterated node will not be returned along with `elementEnd` tag.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\\n\\t\\t */\\n\\t\\tthis.shallow = !!options.shallow;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\\n\\t\\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\\n\\t\\t * be returned once, while if the option is `false` they might be returned twice:\\n\\t\\t * for `'elementStart'` and `'elementEnd'`.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\\n\\t\\t */\\n\\t\\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\\n\\n\\t\\t/**\\n\\t\\t * Start boundary cached for optimization purposes.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\\n\\t\\t */\\n\\t\\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\\n\\n\\t\\t/**\\n\\t\\t * End boundary cached for optimization purposes.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\\n\\t\\t */\\n\\t\\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\\n\\n\\t\\t/**\\n\\t\\t * Parent of the most recently visited node. Cached for optimization purposes.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\\n\\t\\t * module:engine/model/treewalker~TreeWalker#_visitedParent\\n\\t\\t */\\n\\t\\tthis._visitedParent = this.position.parent;\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\\n\\t * \\t\\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\\n\\t * \\t\\twalker.skip( () => false ); // Do not move the position.\\n\\t *\\n\\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\\n\\t * return `true` if the value should be skipped or `false` if not.\\n\\t */\\n\\tskip( skip ) {\\n\\t\\tlet done, value, prevPosition, prevVisitedParent;\\n\\n\\t\\tdo {\\n\\t\\t\\tprevPosition = this.position;\\n\\t\\t\\tprevVisitedParent = this._visitedParent;\\n\\n\\t\\t\\t( { done, value } = this.next() );\\n\\t\\t} while ( !done && skip( value ) );\\n\\n\\t\\tif ( !done ) {\\n\\t\\t\\tthis.position = prevPosition;\\n\\t\\t\\tthis._visitedParent = prevVisitedParent;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the next tree walker's value.\\n\\t *\\n\\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\\n\\t */\\n\\tnext() {\\n\\t\\tif ( this.direction == 'forward' ) {\\n\\t\\t\\treturn this._next();\\n\\t\\t} else {\\n\\t\\t\\treturn this._previous();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\\n\\t *\\n\\t * @private\\n\\t * @returns {Object}\\n\\t * @returns {Boolean} return.done True if iterator is done.\\n\\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\\n\\t */\\n\\t_next() {\\n\\t\\tconst previousPosition = this.position;\\n\\t\\tconst position = Position.createFromPosition( this.position );\\n\\t\\tconst parent = this._visitedParent;\\n\\n\\t\\t// We are at the end of the root.\\n\\t\\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// We reached the walker boundary.\\n\\t\\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\tconst node = position.textNode ? position.textNode : position.nodeAfter;\\n\\n\\t\\tif ( node instanceof Element ) {\\n\\t\\t\\tif ( !this.shallow ) {\\n\\t\\t\\t\\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\\n\\t\\t\\t\\tposition.path.push( 0 );\\n\\t\\t\\t\\tthis._visitedParent = node;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tposition.offset++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\\n\\t\\t} else if ( node instanceof Text ) {\\n\\t\\t\\tlet charactersCount;\\n\\n\\t\\t\\tif ( this.singleCharacters ) {\\n\\t\\t\\t\\tcharactersCount = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet offset = node.endOffset;\\n\\n\\t\\t\\t\\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\\n\\t\\t\\t\\t\\toffset = this.boundaries.end.offset;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcharactersCount = offset - position.offset;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst offsetInTextNode = position.offset - node.startOffset;\\n\\t\\t\\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\\n\\n\\t\\t\\tposition.offset += charactersCount;\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\\n\\t\\t} else {\\n\\t\\t\\t// `node` is not set, we reached the end of current `parent`.\\n\\t\\t\\tposition.path.pop();\\n\\t\\t\\tposition.offset++;\\n\\t\\t\\tthis.position = position;\\n\\t\\t\\tthis._visitedParent = parent.parent;\\n\\n\\t\\t\\tif ( this.ignoreElementEnd ) {\\n\\t\\t\\t\\treturn this._next();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\\n\\t *\\n\\t * @private\\n\\t * @returns {Object}\\n\\t * @returns {Boolean} return.done True if iterator is done.\\n\\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\\n\\t */\\n\\t_previous() {\\n\\t\\tconst previousPosition = this.position;\\n\\t\\tconst position = Position.createFromPosition( this.position );\\n\\t\\tconst parent = this._visitedParent;\\n\\n\\t\\t// We are at the beginning of the root.\\n\\t\\tif ( parent.parent === null && position.offset === 0 ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// We reached the walker boundary.\\n\\t\\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\\n\\t\\t\\treturn { done: true };\\n\\t\\t}\\n\\n\\t\\t// Get node just before current position\\n\\t\\tconst node = position.textNode ? position.textNode : position.nodeBefore;\\n\\n\\t\\tif ( node instanceof Element ) {\\n\\t\\t\\tposition.offset--;\\n\\n\\t\\t\\tif ( !this.shallow ) {\\n\\t\\t\\t\\tposition.path.push( node.maxOffset );\\n\\t\\t\\t\\tthis.position = position;\\n\\t\\t\\t\\tthis._visitedParent = node;\\n\\n\\t\\t\\t\\tif ( this.ignoreElementEnd ) {\\n\\t\\t\\t\\t\\treturn this._previous();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\t\\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\\n\\t\\t\\t}\\n\\t\\t} else if ( node instanceof Text ) {\\n\\t\\t\\tlet charactersCount;\\n\\n\\t\\t\\tif ( this.singleCharacters ) {\\n\\t\\t\\t\\tcharactersCount = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet offset = node.startOffset;\\n\\n\\t\\t\\t\\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\\n\\t\\t\\t\\t\\toffset = this.boundaries.start.offset;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcharactersCount = position.offset - offset;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst offsetInTextNode = position.offset - node.startOffset;\\n\\t\\t\\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\\n\\n\\t\\t\\tposition.offset -= charactersCount;\\n\\t\\t\\tthis.position = position;\\n\\n\\t\\t\\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\\n\\t\\t} else {\\n\\t\\t\\t// `node` is not set, we reached the beginning of current `parent`.\\n\\t\\t\\tposition.path.pop();\\n\\t\\t\\tthis.position = position;\\n\\t\\t\\tthis._visitedParent = parent.parent;\\n\\n\\t\\t\\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\\n\\treturn {\\n\\t\\tdone: false,\\n\\t\\tvalue: {\\n\\t\\t\\ttype,\\n\\t\\t\\titem,\\n\\t\\t\\tpreviousPosition,\\n\\t\\t\\tnextPosition,\\n\\t\\t\\tlength\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\\n *\\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\\n */\\n\\n/**\\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\\n *\\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\\n * position before the item. Note that it is more efficient to use this position then calculate the position before\\n * the node using {@link module:engine/model/position~Position.createBefore}. It is also more efficient to get the\\n * position after node by shifting `previousPosition` by `length`, using {@link module:engine/model/position~Position#getShiftedBy},\\n * then calculate the position using {@link module:engine/model/position~Position.createAfter}.\\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\\n * the position after item.\\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\\n * the position after the item.\\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\\n * before the item.\\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\\n * the length of the text. For `'elementEnd'` it is undefined.\\n */\\n\\n/**\\n * Tree walking directions.\\n *\\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\\n */\\n\",\"/**\\n * Gets the last element of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @returns {*} Returns the last element of `array`.\\n * @example\\n *\\n * _.last([1, 2, 3]);\\n * // => 3\\n */\\nfunction last(array) {\\n  var length = array ? array.length : 0;\\n  return length ? array[length - 1] : undefined;\\n}\\n\\nexport default last;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/position\\n */\\n\\nimport TreeWalker from './treewalker';\\nimport last from '@ckeditor/ckeditor5-utils/src/lib/lodash/last';\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport Text from './text';\\n\\n/**\\n * Represents a position in the model tree.\\n *\\n * **Note:** Position is based on offsets, not indexes. This means that position in element containing two text nodes\\n * with data `foo` and `bar`, position between them has offset `3`, not `1`.\\n * See {@link module:engine/model/position~Position#path} for more.\\n *\\n * Since position in a model is represented by a {@link module:engine/model/position~Position#root position root} and\\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing elements.\\n * This requirement is important for {@link module:engine/model/operation/transform~transform operational transformation}.\\n *\\n * Also, {@link module:engine/model/operation/operation~Operation operations}\\n * kept in {@link module:engine/model/document~Document#history document history}\\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\\n * after document got changed.\\n *\\n * When changes are applied to model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\\n *\\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\\n */\\nexport default class Position {\\n\\t/**\\n\\t * Creates a position.\\n\\t *\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\\n\\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\\n\\t */\\n\\tconstructor( root, path ) {\\n\\t\\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Position root is invalid.\\n\\t\\t\\t *\\n\\t\\t\\t * Positions can only be anchored in elements or document fragments.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-root-invalid\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-position-root-invalid: Position root invalid.' );\\n\\t\\t}\\n\\n\\t\\tif ( !( path instanceof Array ) || path.length === 0 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Position path must be an array with at least one item.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-path-incorrect\\n\\t\\t\\t * @param path\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-position-path-incorrect: Position path must be an array with at least one item.', { path } );\\n\\t\\t}\\n\\n\\t\\t// Normalize the root and path (if element was passed).\\n\\t\\tpath = root.getPath().concat( path );\\n\\t\\troot = root.root;\\n\\n\\t\\t/**\\n\\t\\t * Root of the position path.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\\n\\t\\t * module:engine/model/position~Position#root\\n\\t\\t */\\n\\t\\tthis.root = root;\\n\\n\\t\\t/**\\n\\t\\t * Position of the node in the tree. **Path contains offsets, not indexes.**\\n\\t\\t *\\n\\t\\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\\n\\t\\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\\n\\t\\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\\n\\t\\t * down to the position offset in it's parent.\\n\\t\\t *\\n\\t\\t *\\t\\t ROOT\\n\\t\\t *\\t\\t  |- P            before: [ 0 ]         after: [ 1 ]\\n\\t\\t *\\t\\t  |- UL           before: [ 1 ]         after: [ 2 ]\\n\\t\\t *\\t\\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\\n\\t\\t *\\t\\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\\n\\t\\t *\\t\\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\\n\\t\\t *\\t\\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\\n\\t\\t *\\n\\t\\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\\n\\t\\t * greater than `1` you can place position offset between their start and end:\\n\\t\\t *\\n\\t\\t *\\t\\t ROOT\\n\\t\\t *\\t\\t  |- P\\n\\t\\t *\\t\\t  |- UL\\n\\t\\t *\\t\\t     |- LI\\n\\t\\t *\\t\\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\\n\\t\\t *\\t\\t     |- LI\\n\\t\\t *\\t\\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<Number>} module:engine/model/position~Position#path\\n\\t\\t */\\n\\t\\tthis.path = path;\\n\\t}\\n\\n\\t/**\\n\\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\\n\\t * to the last item in position {@link module:engine/model/position~Position#path path}.\\n\\t *\\n\\t * @type {Number}\\n\\t */\\n\\tget offset() {\\n\\t\\treturn last( this.path );\\n\\t}\\n\\n\\t/**\\n\\t * @param {Number} newOffset\\n\\t */\\n\\tset offset( newOffset ) {\\n\\t\\tthis.path[ this.path.length - 1 ] = newOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Parent element of this position.\\n\\t *\\n\\t * Keep in mind that `parent` value is calculated when the property is accessed.\\n\\t * If {@link module:engine/model/position~Position#path position path}\\n\\t * leads to a non-existing element, `parent` property will throw error.\\n\\t *\\n\\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/element~Element}\\n\\t */\\n\\tget parent() {\\n\\t\\tlet parent = this.root;\\n\\n\\t\\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\\n\\t\\t\\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\\n\\t\\t}\\n\\n\\t\\treturn parent;\\n\\t}\\n\\n\\t/**\\n\\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\\n\\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\\n\\t * in text node, position index is equal to the index of that text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget index() {\\n\\t\\treturn this.parent.offsetToIndex( this.offset );\\n\\t}\\n\\n\\t/**\\n\\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\\n\\t * position is not in a text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/text~Text|null}\\n\\t */\\n\\tget textNode() {\\n\\t\\tconst node = this.parent.getChild( this.index );\\n\\n\\t\\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\\n\\t}\\n\\n\\t/**\\n\\t * Node directly after this position or `null` if this position is in text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/node~Node|null}\\n\\t */\\n\\tget nodeAfter() {\\n\\t\\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Node directly before this position or `null` if this position is in text node.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Node}\\n\\t */\\n\\tget nodeBefore() {\\n\\t\\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isAtStart() {\\n\\t\\treturn this.offset === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isAtEnd() {\\n\\t\\treturn this.offset == this.parent.maxOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is before or after given position.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\\n\\t * @returns {module:engine/model/position~PositionRelation}\\n\\t */\\n\\tcompareWith( otherPosition ) {\\n\\t\\tif ( this.root != otherPosition.root ) {\\n\\t\\t\\treturn 'different';\\n\\t\\t}\\n\\n\\t\\tconst result = compareArrays( this.path, otherPosition.path );\\n\\n\\t\\tswitch ( result ) {\\n\\t\\t\\tcase 'same':\\n\\t\\t\\t\\treturn 'same';\\n\\n\\t\\t\\tcase 'prefix':\\n\\t\\t\\t\\treturn 'before';\\n\\n\\t\\t\\tcase 'extension':\\n\\t\\t\\t\\treturn 'after';\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tif ( this.path[ result ] < otherPosition.path[ result ] ) {\\n\\t\\t\\t\\t\\treturn 'before';\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn 'after';\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the farthest position which matches the callback using\\n\\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\\n\\t *\\n\\t * For example:\\n\\t *\\n\\t * \\t\\tgetLastMatchingPosition( value => value.type == 'text' );\\n\\t * \\t\\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\\n\\t *\\n\\t * \\t\\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\\n\\t * \\t\\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\\n\\t *\\n\\t * \\t\\tgetLastMatchingPosition( value => false );\\n\\t * \\t\\t// Do not move the position.\\n\\t *\\n\\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\\n\\t * return `true` if the value should be skipped or `false` if not.\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\\n\\t */\\n\\tgetLastMatchingPosition( skip, options = {} ) {\\n\\t\\toptions.startPosition = this;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\t\\ttreeWalker.skip( skip );\\n\\n\\t\\treturn treeWalker.position;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\\n\\t * but without the last item.\\n\\t *\\n\\t * This method returns the parent path even if the parent does not exists.\\n\\t *\\n\\t * @returns {Array.<Number>} Path to the parent.\\n\\t */\\n\\tgetParentPath() {\\n\\t\\treturn this.path.slice( 0, -1 );\\n\\t}\\n\\n\\t/**\\n\\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\\n\\t *\\n\\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\\n\\t */\\n\\tgetAncestors() {\\n\\t\\tif ( this.parent.is( 'documentFragment' ) ) {\\n\\t\\t\\treturn [ this.parent ];\\n\\t\\t} else {\\n\\t\\t\\treturn this.parent.getAncestors( { includeSelf: true } );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\\n\\t * of these two paths must be identical.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position The second position.\\n\\t * @returns {Array.<Number>} The common path.\\n\\t */\\n\\tgetCommonPath( position ) {\\n\\t\\tif ( this.root != position.root ) {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\n\\t\\t// We find on which tree-level start and end have the lowest common ancestor\\n\\t\\tconst cmp = compareArrays( this.path, position.path );\\n\\t\\t// If comparison returned string it means that arrays are same.\\n\\t\\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\\n\\n\\t\\treturn this.path.slice( 0, diffAt );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position The second position.\\n\\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor( position ) {\\n\\t\\tconst ancestorsA = this.getAncestors();\\n\\t\\tconst ancestorsB = position.getAncestors();\\n\\n\\t\\tlet i = 0;\\n\\n\\t\\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\treturn i === 0 ? null : ancestorsA[ i - 1 ];\\n\\t}\\n\\n\\t/**\\n\\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\\n\\t * is shifted by `shift` value (can be a negative value).\\n\\t *\\n\\t * @param {Number} shift Offset shift. Can be a negative value.\\n\\t * @returns {module:engine/model/position~Position} Shifted position.\\n\\t */\\n\\tgetShiftedBy( shift ) {\\n\\t\\tconst shifted = Position.createFromPosition( this );\\n\\n\\t\\tconst offset = shifted.offset + shift;\\n\\t\\tshifted.offset = offset < 0 ? 0 : offset;\\n\\n\\t\\treturn shifted;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is after given position.\\n\\t *\\n\\t * @see module:engine/model/position~Position#isBefore\\n\\t *\\n\\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} True if this position is after given position.\\n\\t */\\n\\tisAfter( otherPosition ) {\\n\\t\\treturn this.compareWith( otherPosition ) == 'after';\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is before given position.\\n\\t *\\n\\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\\n\\t * be `true` if positions are in different roots and you might not expect this. You should probably use\\n\\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\\n\\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\\n\\t *\\n\\t *\\t\\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\\n\\t *\\t\\t\\t// do A.\\n\\t *\\t\\t} else {\\n\\t *\\t\\t\\t// do B.\\n\\t *\\t\\t}\\n\\t *\\n\\t * or, if you have only one if-branch:\\n\\t *\\n\\t *\\t\\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\\n\\t *\\t\\t\\t// do B.\\n\\t *\\t\\t}\\n\\t *\\n\\t * rather than:\\n\\t *\\n\\t *\\t\\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\\n\\t *\\t\\t\\t// do B.\\n\\t *\\t\\t} else {\\n\\t *\\t\\t\\t// do A.\\n\\t *\\t\\t}\\n\\t *\\n\\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} True if this position is before given position.\\n\\t */\\n\\tisBefore( otherPosition ) {\\n\\t\\treturn this.compareWith( otherPosition ) == 'before';\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is equal to given position.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} True if positions are same.\\n\\t */\\n\\tisEqual( otherPosition ) {\\n\\t\\treturn this.compareWith( otherPosition ) == 'same';\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\\n\\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\\n\\t * they are very similar or even indistinguishable.\\n\\t *\\n\\t * **Note:** this method traverses model document so it can be only used when range is up-to-date with model document.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\\n\\t * @returns {Boolean} True if positions touch.\\n\\t */\\n\\tisTouching( otherPosition ) {\\n\\t\\tlet left = null;\\n\\t\\tlet right = null;\\n\\t\\tconst compare = this.compareWith( otherPosition );\\n\\n\\t\\tswitch ( compare ) {\\n\\t\\t\\tcase 'same':\\n\\t\\t\\t\\treturn true;\\n\\n\\t\\t\\tcase 'before':\\n\\t\\t\\t\\tleft = Position.createFromPosition( this );\\n\\t\\t\\t\\tright = Position.createFromPosition( otherPosition );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase 'after':\\n\\t\\t\\t\\tleft = Position.createFromPosition( otherPosition );\\n\\t\\t\\t\\tright = Position.createFromPosition( this );\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Cached for optimization purposes.\\n\\t\\tlet leftParent = left.parent;\\n\\n\\t\\twhile ( left.path.length + right.path.length ) {\\n\\t\\t\\tif ( left.isEqual( right ) ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( left.path.length > right.path.length ) {\\n\\t\\t\\t\\tif ( left.offset !== leftParent.maxOffset ) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tleft.path = left.path.slice( 0, -1 );\\n\\t\\t\\t\\tleftParent = leftParent.parent;\\n\\t\\t\\t\\tleft.offset++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ( right.offset !== 0 ) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tright.path = right.path.slice( 0, -1 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\\n\\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\\n\\t * @param {Number} howMany How many nodes are removed.\\n\\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\\n\\t */\\n\\t_getTransformedByDeletion( deletePosition, howMany ) {\\n\\t\\tconst transformed = Position.createFromPosition( this );\\n\\n\\t\\t// This position can't be affected if deletion was in a different root.\\n\\t\\tif ( this.root != deletePosition.root ) {\\n\\t\\t\\treturn transformed;\\n\\t\\t}\\n\\n\\t\\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\\n\\t\\t\\t// If nodes are removed from the node that is pointed by this position...\\n\\t\\t\\tif ( deletePosition.offset < this.offset ) {\\n\\t\\t\\t\\t// And are removed from before an offset of that position...\\n\\t\\t\\t\\tif ( deletePosition.offset + howMany > this.offset ) {\\n\\t\\t\\t\\t\\t// Position is in removed range, it's no longer in the tree.\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Decrement the offset accordingly.\\n\\t\\t\\t\\t\\ttransformed.offset -= howMany;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\\n\\t\\t\\t// If nodes are removed from a node that is on a path to this position...\\n\\t\\t\\tconst i = deletePosition.path.length - 1;\\n\\n\\t\\t\\tif ( deletePosition.offset <= this.path[ i ] ) {\\n\\t\\t\\t\\t// And are removed from before next node of that path...\\n\\t\\t\\t\\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\\n\\t\\t\\t\\t\\t// If the next node of that path is removed return null\\n\\t\\t\\t\\t\\t// because the node containing this position got removed.\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Otherwise, decrement index on that path.\\n\\t\\t\\t\\t\\ttransformed.path[ i ] -= howMany;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn transformed;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\\n\\t * @param {Number} howMany How many nodes are inserted.\\n\\t * @param {Boolean} insertBefore Flag indicating whether nodes are inserted before or after `insertPosition`.\\n\\t * This is important only when `insertPosition` and this position are same. If that is the case and the flag is\\n\\t * set to `true`, this position will get transformed. If the flag is set to `false`, it won't.\\n\\t * @returns {module:engine/model/position~Position} Transformed position.\\n\\t */\\n\\t_getTransformedByInsertion( insertPosition, howMany, insertBefore ) {\\n\\t\\tconst transformed = Position.createFromPosition( this );\\n\\n\\t\\t// This position can't be affected if insertion was in a different root.\\n\\t\\tif ( this.root != insertPosition.root ) {\\n\\t\\t\\treturn transformed;\\n\\t\\t}\\n\\n\\t\\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\\n\\t\\t\\t// If nodes are inserted in the node that is pointed by this position...\\n\\t\\t\\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && insertBefore ) ) {\\n\\t\\t\\t\\t// And are inserted before an offset of that position...\\n\\t\\t\\t\\t// \\\"Push\\\" this positions offset.\\n\\t\\t\\t\\ttransformed.offset += howMany;\\n\\t\\t\\t}\\n\\t\\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\\n\\t\\t\\t// If nodes are inserted in a node that is on a path to this position...\\n\\t\\t\\tconst i = insertPosition.path.length - 1;\\n\\n\\t\\t\\tif ( insertPosition.offset <= this.path[ i ] ) {\\n\\t\\t\\t\\t// And are inserted before next node of that path...\\n\\t\\t\\t\\t// \\\"Push\\\" the index on that path.\\n\\t\\t\\t\\ttransformed.path[ i ] += howMany;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn transformed;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\\n\\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\\n\\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\\n\\t * @param {Boolean} insertBefore Flag indicating whether moved nodes are pasted before or after `insertPosition`.\\n\\t * This is important only when `targetPosition` and this position are same. If that is the case and the flag is\\n\\t * set to `true`, this position will get transformed by range insertion. If the flag is set to `false`, it won't.\\n\\t * @param {Boolean} [sticky] Flag indicating whether this position \\\"sticks\\\" to range, that is if it should be moved\\n\\t * with the moved range if it is equal to one of range's boundaries.\\n\\t * @returns {module:engine/model/position~Position} Transformed position.\\n\\t */\\n\\t_getTransformedByMove( sourcePosition, targetPosition, howMany, insertBefore, sticky ) {\\n\\t\\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\\n\\t\\tlet transformed = this._getTransformedByDeletion( sourcePosition, howMany );\\n\\n\\t\\t// Then we update target position, as it could be affected by nodes removal too.\\n\\t\\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\\n\\n\\t\\tif ( transformed === null || ( sticky && transformed.isEqual( sourcePosition ) ) ) {\\n\\t\\t\\t// This position is inside moved range (or sticks to it).\\n\\t\\t\\t// In this case, we calculate a combination of this position, move source position and target position.\\n\\t\\t\\ttransformed = this._getCombined( sourcePosition, targetPosition );\\n\\t\\t} else {\\n\\t\\t\\t// This position is not inside a removed range.\\n\\t\\t\\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\\n\\t\\t\\ttransformed = transformed._getTransformedByInsertion( targetPosition, howMany, insertBefore );\\n\\t\\t}\\n\\n\\t\\treturn transformed;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a new position that is a combination of this position and given positions.\\n\\t *\\n\\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\\n\\t * to the `target` position. It is expected that this position is inside the moved range.\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *\\t\\tlet original = new Position( root, [ 2, 3, 1 ] );\\n\\t *\\t\\tlet source = new Position( root, [ 2, 2 ] );\\n\\t *\\t\\tlet target = new Position( otherRoot, [ 1, 1, 3 ] );\\n\\t *\\t\\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\\n\\t *\\n\\t * Explanation:\\n\\t *\\n\\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\\n\\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\\n\\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\\n\\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\\n\\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\\n\\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\\n\\t * @param {module:engine/model/position~Position} target Position where the range is moved.\\n\\t * @returns {module:engine/model/position~Position} Combined position.\\n\\t */\\n\\t_getCombined( source, target ) {\\n\\t\\tconst i = source.path.length - 1;\\n\\n\\t\\t// The first part of a path to combined position is a path to the place where nodes were moved.\\n\\t\\tconst combined = Position.createFromPosition( target );\\n\\n\\t\\t// Then we have to update the rest of the path.\\n\\n\\t\\t// Fix the offset because this position might be after `from` position and we have to reflect that.\\n\\t\\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\\n\\n\\t\\t// Then, add the rest of the path.\\n\\t\\t// If this position is at the same level as `from` position nothing will get added.\\n\\t\\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\\n\\n\\t\\treturn combined;\\n\\t}\\n\\n\\t/**\\n\\t * Creates position at the given location. The location can be specified as:\\n\\t *\\n\\t * * a {@link module:engine/model/position~Position position},\\n\\t * * parent element and offset (offset defaults to `0`),\\n\\t * * parent element and `'end'` (sets position at the end of that element),\\n\\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\\n\\t *\\n\\t * This method is a shortcut to other constructors such as:\\n\\t *\\n\\t * * {@link module:engine/model/position~Position.createBefore},\\n\\t * * {@link module:engine/model/position~Position.createAfter},\\n\\t * * {@link module:engine/model/position~Position.createFromParentAndOffset},\\n\\t * * {@link module:engine/model/position~Position.createFromPosition}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tstatic createAt( itemOrPosition, offset ) {\\n\\t\\tif ( itemOrPosition instanceof Position ) {\\n\\t\\t\\treturn this.createFromPosition( itemOrPosition );\\n\\t\\t} else {\\n\\t\\t\\tconst node = itemOrPosition;\\n\\n\\t\\t\\tif ( offset == 'end' ) {\\n\\t\\t\\t\\toffset = node.maxOffset;\\n\\t\\t\\t} else if ( offset == 'before' ) {\\n\\t\\t\\t\\treturn this.createBefore( node );\\n\\t\\t\\t} else if ( offset == 'after' ) {\\n\\t\\t\\t\\treturn this.createAfter( node );\\n\\t\\t\\t} else if ( !offset ) {\\n\\t\\t\\t\\toffset = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.createFromParentAndOffset( node, offset );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tstatic createAfter( item ) {\\n\\t\\tif ( !item.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * You can not make a position after a root element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-after-root\\n\\t\\t\\t * @param {module:engine/model/item~Item} root\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-position-after-root: You cannot make a position after root.', { root: item } );\\n\\t\\t}\\n\\n\\t\\treturn this.createFromParentAndOffset( item.parent, item.endOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tstatic createBefore( item ) {\\n\\t\\tif ( !item.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * You can not make a position before a root element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-before-root\\n\\t\\t\\t * @param {module:engine/model/item~Item} root\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-position-before-root: You cannot make a position before root.', { root: item } );\\n\\t\\t}\\n\\n\\t\\treturn this.createFromParentAndOffset( item.parent, item.startOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position from the parent element and an offset in that element.\\n\\t *\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent Position's parent.\\n\\t * @param {Number} offset Position's offset.\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tstatic createFromParentAndOffset( parent, offset ) {\\n\\t\\tif ( !parent.is( 'element' ) && !parent.is( 'documentFragment' ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Position parent have to be a model element or model document fragment.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-parent-incorrect\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-position-parent-incorrect: Position parent have to be a element or document fragment.' );\\n\\t\\t}\\n\\n\\t\\tconst path = parent.getPath();\\n\\n\\t\\tpath.push( offset );\\n\\n\\t\\treturn new this( parent.root, path );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new position, which is equal to passed position.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position to be cloned.\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tstatic createFromPosition( position ) {\\n\\t\\treturn new this( position.root, position.path.slice() );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\\n\\t *\\n\\t * @param {Object} json Plain object to be converted to `Position`.\\n\\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\\n\\t */\\n\\tstatic fromJSON( json, doc ) {\\n\\t\\tif ( json.root === '$graveyard' ) {\\n\\t\\t\\treturn new Position( doc.graveyard, json.path );\\n\\t\\t}\\n\\n\\t\\tif ( !doc.getRoot( json.root ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot create position for document. Root with specified name does not exist.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-position-fromjson-no-root\\n\\t\\t\\t * @param {String} rootName\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\\n\\t\\t\\t\\t{ rootName: json.root }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn new Position( doc.getRoot( json.root ), json.path );\\n\\t}\\n}\\n\\n/**\\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\\n * If positions are in different roots `'different'` flag is returned.\\n *\\n * @typedef {String} module:engine/model/position~PositionRelation\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/range\\n */\\n\\nimport Position from './position';\\nimport TreeWalker from './treewalker';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Range class. Range is iterable.\\n */\\nexport default class Range {\\n\\t/**\\n\\t * Creates a range spanning from `start` position to `end` position.\\n\\t *\\n\\t * **Note:** Constructor creates it's own {@link module:engine/model/position~Position Position} instances basing on passed values.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} start Start position.\\n\\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\\n\\t */\\n\\tconstructor( start, end = null ) {\\n\\t\\t/**\\n\\t\\t * Start position.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/position~Position}\\n\\t\\t */\\n\\t\\tthis.start = Position.createFromPosition( start );\\n\\n\\t\\t/**\\n\\t\\t * End position.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/position~Position}\\n\\t\\t */\\n\\t\\tthis.end = end ? Position.createFromPosition( end ) : Position.createFromPosition( start );\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\\n\\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\\n\\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\\n\\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\\n\\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\\n\\t *\\n\\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\\n\\t * and `ignoreElementEnd` option set to `true`.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\\n\\t */\\n\\t* [ Symbol.iterator ]() {\\n\\t\\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether the range is collapsed, that is if {@link #start} and\\n\\t * {@link #end} positions are equal.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isCollapsed() {\\n\\t\\treturn this.start.isEqual( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether this range is flat, that is if {@link #start} position and\\n\\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\\n\\t *\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isFlat() {\\n\\t\\treturn this.start.parent === this.end.parent;\\n\\t}\\n\\n\\t/**\\n\\t * Range root element.\\n\\t *\\n\\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this.start.root;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position to check.\\n\\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\\n\\t * in this range,`false` otherwise.\\n\\t */\\n\\tcontainsPosition( position ) {\\n\\t\\treturn position.isAfter( this.start ) && position.isBefore( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this range contains given {@link ~Range range}.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} otherRange Range to check.\\n\\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\\n\\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\\n\\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\\n\\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\\n\\t */\\n\\tcontainsRange( otherRange, loose = false ) {\\n\\t\\tif ( otherRange.isCollapsed ) {\\n\\t\\t\\tloose = false;\\n\\t\\t}\\n\\n\\t\\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\\n\\t\\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\\n\\n\\t\\treturn containsStart && containsEnd;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\\n\\t *\\n\\t * @param {module:engine/model/item~Item} item Model item to check.\\n\\t */\\n\\tcontainsItem( item ) {\\n\\t\\tconst pos = Position.createBefore( item );\\n\\n\\t\\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\\n\\t}\\n\\n\\t/**\\n\\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\\n\\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\\n\\t */\\n\\tisEqual( otherRange ) {\\n\\t\\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\\n\\t}\\n\\n\\t/**\\n\\t * Checks and returns whether this range intersects with given range.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\\n\\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\\n\\t */\\n\\tisIntersecting( otherRange ) {\\n\\t\\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\\n\\t}\\n\\n\\t/**\\n\\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\\n\\t * Returned array contains zero, one or two {@link ~Range ranges}.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\\n\\t *\\t\\tlet otherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 5 ] ) );\\n\\t *\\t\\tlet transformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has no ranges because `otherRange` contains `range`\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 3 ] ) );\\n\\t *\\t\\ttransformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( root, [ 3 ] ), new Position( root, [ 4 ] ) );\\n\\t *\\t\\ttransformed = range.getDifference( otherRange );\\n\\t *\\t\\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\\n\\t *\\n\\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\\n\\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\\n\\t */\\n\\tgetDifference( otherRange ) {\\n\\t\\tconst ranges = [];\\n\\n\\t\\tif ( this.isIntersecting( otherRange ) ) {\\n\\t\\t\\t// Ranges intersect.\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.start ) ) {\\n\\t\\t\\t\\t// Given range start is inside this range. This means that we have to\\n\\t\\t\\t\\t// add shrunken range - from the start to the middle of this range.\\n\\t\\t\\t\\tranges.push( new Range( this.start, otherRange.start ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.end ) ) {\\n\\t\\t\\t\\t// Given range end is inside this range. This means that we have to\\n\\t\\t\\t\\t// add shrunken range - from the middle of this range to the end.\\n\\t\\t\\t\\tranges.push( new Range( otherRange.end, this.end ) );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Ranges do not intersect, return the original range.\\n\\t\\t\\tranges.push( Range.createFromRange( this ) );\\n\\t\\t}\\n\\n\\t\\treturn ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\\n\\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\\n\\t *\\t\\tlet otherRange = new Range( new Position( root, [ 1 ] ), new Position( root, [ 2 ] ) );\\n\\t *\\t\\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\\n\\t *\\n\\t *\\t\\totherRange = new Range( new Position( root, [ 3 ] ), new Position( root, [ 5 ] ) );\\n\\t *\\t\\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\\n\\t *\\n\\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\\n\\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\\n\\t */\\n\\tgetIntersection( otherRange ) {\\n\\t\\tif ( this.isIntersecting( otherRange ) ) {\\n\\t\\t\\t// Ranges intersect, so a common range will be returned.\\n\\t\\t\\t// At most, it will be same as this range.\\n\\t\\t\\tlet commonRangeStart = this.start;\\n\\t\\t\\tlet commonRangeEnd = this.end;\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.start ) ) {\\n\\t\\t\\t\\t// Given range start is inside this range. This means thaNt we have to\\n\\t\\t\\t\\t// shrink common range to the given range start.\\n\\t\\t\\t\\tcommonRangeStart = otherRange.start;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.containsPosition( otherRange.end ) ) {\\n\\t\\t\\t\\t// Given range end is inside this range. This means that we have to\\n\\t\\t\\t\\t// shrink common range to the given range end.\\n\\t\\t\\t\\tcommonRangeEnd = otherRange.end;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn new Range( commonRangeStart, commonRangeEnd );\\n\\t\\t}\\n\\n\\t\\t// Ranges do not intersect, so they do not have common part.\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\\n\\t *\\n\\t * See an example of a model structure (`[` and `]` are range boundaries):\\n\\t *\\n\\t *\\t\\troot                                                            root\\n\\t *\\t\\t |- element DIV                         DIV             P2              P3             DIV\\n\\t *\\t\\t |   |- element H                   H        P1        f o o           b a r       H         P4\\n\\t *\\t\\t |   |   |- \\\"fir[st\\\"             fir[st     lorem                               se]cond     ipsum\\n\\t *\\t\\t |   |- element P1\\n\\t *\\t\\t |   |   |- \\\"lorem\\\"                                              ||\\n\\t *\\t\\t |- element P2                                                   ||\\n\\t *\\t\\t |   |- \\\"foo\\\"                                                    VV\\n\\t *\\t\\t |- element P3\\n\\t *\\t\\t |   |- \\\"bar\\\"                                                   root\\n\\t *\\t\\t |- element DIV                         DIV             [P2             P3]             DIV\\n\\t *\\t\\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\\n\\t *\\t\\t |   |   |- \\\"se]cond\\\"            fir[st]    lorem                               [se]cond     ipsum\\n\\t *\\t\\t |   |- element P4\\n\\t *\\t\\t |   |   |- \\\"ipsum\\\"\\n\\t *\\n\\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\\n\\t * We are looking for minimal set of flat ranges that contains the same nodes.\\n\\t *\\n\\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\\n\\t *\\n\\t *\\t\\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \\\"st\\\"\\n\\t *\\t\\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\\\"lorem\\\")\\n\\t *\\t\\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\\\"foobar\\\")\\n\\t *\\t\\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \\\"se\\\"\\n\\t *\\n\\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\\n\\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\\n\\t * were omitted. Only their parts that were wholly in the range were returned.\\n\\t *\\n\\t * **Note:** this method is not returning flat ranges that contain no nodes.\\n\\t *\\n\\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\\n\\t */\\n\\tgetMinimalFlatRanges() {\\n\\t\\tconst ranges = [];\\n\\t\\tconst diffAt = this.start.getCommonPath( this.end ).length;\\n\\n\\t\\tconst pos = Position.createFromPosition( this.start );\\n\\t\\tlet posParent = pos.parent;\\n\\n\\t\\t// Go up.\\n\\t\\twhile ( pos.path.length > diffAt + 1 ) {\\n\\t\\t\\tconst howMany = posParent.maxOffset - pos.offset;\\n\\n\\t\\t\\tif ( howMany !== 0 ) {\\n\\t\\t\\t\\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tpos.path = pos.path.slice( 0, -1 );\\n\\t\\t\\tpos.offset++;\\n\\t\\t\\tposParent = posParent.parent;\\n\\t\\t}\\n\\n\\t\\t// Go down.\\n\\t\\twhile ( pos.path.length <= this.end.path.length ) {\\n\\t\\t\\tconst offset = this.end.path[ pos.path.length - 1 ];\\n\\t\\t\\tconst howMany = offset - pos.offset;\\n\\n\\t\\t\\tif ( howMany !== 0 ) {\\n\\t\\t\\t\\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tpos.offset = offset;\\n\\t\\t\\tpos.path.push( 0 );\\n\\t\\t}\\n\\n\\t\\treturn ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\\n\\t *\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\\n\\t * @param {module:engine/model/position~Position} [options.startPosition]\\n\\t * @param {Boolean} [options.singleCharacters=false]\\n\\t * @param {Boolean} [options.shallow=false]\\n\\t * @param {Boolean} [options.ignoreElementEnd=false]\\n\\t */\\n\\tgetWalker( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\n\\t\\treturn new TreeWalker( options );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\\n\\t * them.\\n\\t *\\n\\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\\n\\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\\n\\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\\n\\t *\\n\\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\\n\\t * a full list of available options.\\n\\t *\\n\\t * @method getItems\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\\n\\t * @returns {Iterable.<module:engine/model/item~Item>}\\n\\t */\\n\\t* getItems( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\t\\toptions.ignoreElementEnd = true;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\n\\t\\tfor ( const value of treeWalker ) {\\n\\t\\t\\tyield value.item;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\\n\\t * contained in this range.\\n\\t *\\n\\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\\n\\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\\n\\t *\\n\\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\\n\\t * a full list of available options.\\n\\t *\\n\\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\\n\\t * @returns {Iterable.<module:engine/model/position~Position>}\\n\\t */\\n\\t* getPositions( options = {} ) {\\n\\t\\toptions.boundaries = this;\\n\\n\\t\\tconst treeWalker = new TreeWalker( options );\\n\\n\\t\\tyield treeWalker.position;\\n\\n\\t\\tfor ( const value of treeWalker ) {\\n\\t\\t\\tyield value.nextPosition;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns a range that is a result of transforming this range by given `delta`.\\n\\t *\\n\\t * **Note:** transformation may break one range into multiple ranges (e.g. when a part of the range is\\n\\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\\n\\t * may contain one or more `Range` instances.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} delta Delta to transform range by.\\n\\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\\n\\t */\\n\\tgetTransformedByDelta( delta ) {\\n\\t\\tconst ranges = [ Range.createFromRange( this ) ];\\n\\n\\t\\t// Operation types that a range can be transformed by.\\n\\t\\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\\n\\n\\t\\tfor ( const operation of delta.operations ) {\\n\\t\\t\\tif ( supportedTypes.has( operation.type ) ) {\\n\\t\\t\\t\\tfor ( let i = 0; i < ranges.length; i++ ) {\\n\\t\\t\\t\\t\\tconst result = ranges[ i ]._getTransformedByDocumentChange(\\n\\t\\t\\t\\t\\t\\toperation.type,\\n\\t\\t\\t\\t\\t\\tdelta.type,\\n\\t\\t\\t\\t\\t\\toperation.targetPosition || operation.position,\\n\\t\\t\\t\\t\\t\\toperation.howMany || operation.nodes.maxOffset,\\n\\t\\t\\t\\t\\t\\toperation.sourcePosition\\n\\t\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t\\tranges.splice( i, 1, ...result );\\n\\n\\t\\t\\t\\t\\ti += result.length - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a range that is a result of transforming this range by multiple `deltas`.\\n\\t *\\n\\t * **Note:** transformation may break one range into multiple ranges (e.g. when a part of the range is\\n\\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\\n\\t * may contain one or more `Range` instances.\\n\\t *\\n\\t * @param {Iterable.<module:engine/model/delta/delta~Delta>} deltas Deltas to transform the range by.\\n\\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\\n\\t */\\n\\tgetTransformedByDeltas( deltas ) {\\n\\t\\tconst ranges = [ Range.createFromRange( this ) ];\\n\\n\\t\\tfor ( const delta of deltas ) {\\n\\t\\t\\tfor ( let i = 0; i < ranges.length; i++ ) {\\n\\t\\t\\t\\tconst result = ranges[ i ].getTransformedByDelta( delta );\\n\\n\\t\\t\\t\\tranges.splice( i, 1, ...result );\\n\\t\\t\\t\\ti += result.length - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// It may happen that a range is split into two, and then the part of second \\\"piece\\\" is moved into first\\n\\t\\t// \\\"piece\\\". In this case we will have incorrect third range, which should not be included in the result --\\n\\t\\t// because it is already included in the first \\\"piece\\\". In this loop we are looking for all such ranges that\\n\\t\\t// are inside other ranges and we simply remove them.\\n\\t\\tfor ( let i = 0; i < ranges.length; i++ ) {\\n\\t\\t\\tconst range = ranges[ i ];\\n\\n\\t\\t\\tfor ( let j = i + 1; j < ranges.length; j++ ) {\\n\\t\\t\\t\\tconst next = ranges[ j ];\\n\\n\\t\\t\\t\\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\\n\\t\\t\\t\\t\\tranges.splice( j, 1 );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\\n\\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\\n\\t *\\n\\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\\n\\t */\\n\\tgetCommonAncestor() {\\n\\t\\treturn this.start.getCommonAncestor( this.end );\\n\\t}\\n\\n\\t/**\\n\\t * Returns a range that is a result of transforming this range by a change in the model document.\\n\\t *\\n\\t * @protected\\n\\t * @param {'insert'|'move'|'remove'|'reinsert'} type Change type.\\n\\t * @param {String} deltaType Type of delta that introduced the change.\\n\\t * @param {module:engine/model/position~Position} targetPosition Position before the first changed node.\\n\\t * @param {Number} howMany How many nodes has been changed.\\n\\t * @param {module:engine/model/position~Position} sourcePosition Source position of changes.\\n\\t * @returns {Array.<module:engine/model/range~Range>}\\n\\t */\\n\\t_getTransformedByDocumentChange( type, deltaType, targetPosition, howMany, sourcePosition ) {\\n\\t\\tif ( type == 'insert' ) {\\n\\t\\t\\treturn this._getTransformedByInsertion( targetPosition, howMany, false, false );\\n\\t\\t} else {\\n\\t\\t\\tconst sourceRange = Range.createFromPositionAndShift( sourcePosition, howMany );\\n\\n\\t\\t\\t// Edge case for merge delta.\\n\\t\\t\\tif (\\n\\t\\t\\t\\tdeltaType == 'merge' &&\\n\\t\\t\\t\\tthis.isCollapsed &&\\n\\t\\t\\t\\t( this.start.isEqual( sourceRange.start ) || this.start.isEqual( sourceRange.end ) )\\n\\t\\t\\t) {\\n\\t\\t\\t\\t// Collapsed range is in merged element, at the beginning or at the end of it.\\n\\t\\t\\t\\t// Without fix, the range would end up in the graveyard, together with removed element.\\n\\t\\t\\t\\t// <p>foo</p><p>[]bar</p> -> <p>foobar</p><p>[]</p> -> <p>foobar</p> -> <p>foo[]bar</p>\\n\\t\\t\\t\\t// <p>foo</p><p>bar[]</p> -> <p>foobar</p><p>[]</p> -> <p>foobar</p> -> <p>foobar[]</p>\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// In most cases, `sourceRange.start.offset` for merge delta's move operation would be 0,\\n\\t\\t\\t\\t// so this formula might look overcomplicated.\\n\\t\\t\\t\\t// However in some scenarios, after operational transformation, move operation might not\\n\\t\\t\\t\\t// in fact start from 0 and we need to properly count new offset.\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-engine/pull/1133#issuecomment-329080668.\\n\\t\\t\\t\\tconst offset = this.start.offset - sourceRange.start.offset;\\n\\n\\t\\t\\t\\treturn [ new Range( targetPosition.getShiftedBy( offset ) ) ];\\n\\t\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\t// Edge case for split delta.\\n\\t\\t\\t//\\n\\t\\t\\tif ( deltaType == 'split' && this.isCollapsed && this.end.isEqual( sourceRange.end ) ) {\\n\\t\\t\\t\\t// Collapsed range is at the end of split element.\\n\\t\\t\\t\\t// Without fix, the range would end up at the end of split (old) element instead of at the end of new element.\\n\\t\\t\\t\\t// That would happen because this range is not technically inside moved range. Last step below shows the fix.\\n\\t\\t\\t\\t// <p>foobar[]</p> -> <p>foobar[]</p><p></p> -> <p>foo[]</p><p>bar</p> -> <p>foo</p><p>bar[]</p>\\n\\t\\t\\t\\treturn [ new Range( targetPosition.getShiftedBy( howMany ) ) ];\\n\\t\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\t// Other edge cases:\\n\\t\\t\\t//\\n\\t\\t\\t// In all examples `[]` is `this` and `{}` is `sourceRange`, while `^` is move target position.\\n\\t\\t\\t//\\n\\t\\t\\t// Example:\\n\\t\\t\\t// <p>xx</p>^<w>{<p>a[b</p>}</w><p>c]d</p>   -->   <p>xx</p><p>a[b</p><w></w><p>c]d</p>\\n\\t\\t\\t// ^<p>xx</p><w>{<p>a[b</p>}</w><p>c]d</p>   -->   <p>a[b</p><p>xx</p><w></w><p>c]d</p>  // Note <p>xx</p> inclusion.\\n\\t\\t\\t// <w>{<p>a[b</p>}</w>^<p>c]d</p>            -->   <w></w><p>a[b</p><p>c]d</p>\\n\\t\\t\\tif (\\n\\t\\t\\t\\t( sourceRange.containsPosition( this.start ) || sourceRange.start.isEqual( this.start ) ) &&\\n\\t\\t\\t\\tthis.containsPosition( sourceRange.end ) &&\\n\\t\\t\\t\\tthis.end.isAfter( targetPosition )\\n\\t\\t\\t) {\\n\\t\\t\\t\\tconst start = this.start._getCombined(\\n\\t\\t\\t\\t\\tsourcePosition,\\n\\t\\t\\t\\t\\ttargetPosition._getTransformedByDeletion( sourcePosition, howMany )\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany, false, false );\\n\\n\\t\\t\\t\\treturn [ new Range( start, end ) ];\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Example:\\n\\t\\t\\t// <p>c[d</p><w>{<p>a]b</p>}</w>^<p>xx</p>   -->   <p>c[d</p><w></w><p>a]b</p><p>xx</p>\\n\\t\\t\\t// <p>c[d</p><w>{<p>a]b</p>}</w><p>xx</p>^   -->   <p>c[d</p><w></w><p>xx</p><p>a]b</p>  // Note <p>xx</p> inclusion.\\n\\t\\t\\t// <p>c[d</p>^<w>{<p>a]b</p>}</w>            -->   <p>c[d</p><p>a]b</p><w></w>\\n\\t\\t\\tif (\\n\\t\\t\\t\\t( sourceRange.containsPosition( this.end ) || sourceRange.end.isEqual( this.end ) ) &&\\n\\t\\t\\t\\tthis.containsPosition( sourceRange.start ) &&\\n\\t\\t\\t\\tthis.start.isBefore( targetPosition )\\n\\t\\t\\t) {\\n\\t\\t\\t\\tconst start = this.start._getTransformedByMove(\\n\\t\\t\\t\\t\\tsourcePosition,\\n\\t\\t\\t\\t\\ttargetPosition,\\n\\t\\t\\t\\t\\thowMany,\\n\\t\\t\\t\\t\\ttrue,\\n\\t\\t\\t\\t\\tfalse\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tconst end = this.end._getCombined(\\n\\t\\t\\t\\t\\tsourcePosition,\\n\\t\\t\\t\\t\\ttargetPosition._getTransformedByDeletion( sourcePosition, howMany )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\treturn [ new Range( start, end ) ];\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\\n\\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\\n\\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tlet range = new Range( new Position( root, [ 2, 7 ] ), new Position( root, [ 4, 0, 1 ] ) );\\n\\t *\\t\\tlet transformed = range._getTransformedByInsertion( new Position( root, [ 1 ] ), 2 );\\n\\t *\\t\\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\\n\\t *\\n\\t *\\t\\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 0 ] ), 4 );\\n\\t *\\t\\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\\n\\t *\\n\\t *\\t\\ttransformed = range._getTransformedByInsertion( new Position( root, [ 3, 2 ] ), 4 );\\n\\t *\\t\\t// transformed array has one range, which is equal to original range\\n\\t *\\n\\t *\\t\\ttransformed = range._getTransformedByInsertion( new Position( root, [ 3, 2 ] ), 4, true );\\n\\t *\\t\\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\\n\\t *\\n\\t *\\t\\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 1 ] ), 4, false, false );\\n\\t *\\t\\t// transformed array has one range which is equal to original range because insertion is after the range boundary\\n\\t *\\n\\t *\\t\\ttransformed = range._getTransformedByInsertion( new Position( root, [ 4, 0, 1 ] ), 4, false, true );\\n\\t *\\t\\t// transformed array has one range: from [ 2, 7 ] to [ 4, 0, 5 ] because range was expanded\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\\n\\t * @param {Number} howMany How many nodes are inserted.\\n\\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\\n\\t * was inside the range. Defaults to `false`.\\n\\t * @param {Boolean} [isSticky] Flag indicating whether insertion should expand a range if it is in a place of\\n\\t * range boundary. Defaults to `false`.\\n\\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\\n\\t */\\n\\t_getTransformedByInsertion( insertPosition, howMany, spread = false, isSticky = false ) {\\n\\t\\tif ( spread && this.containsPosition( insertPosition ) ) {\\n\\t\\t\\t// Range has to be spread. The first part is from original start to the spread point.\\n\\t\\t\\t// The other part is from spread point to the original end, but transformed by\\n\\t\\t\\t// insertion to reflect insertion changes.\\n\\n\\t\\t\\treturn [\\n\\t\\t\\t\\tnew Range( this.start, insertPosition ),\\n\\t\\t\\t\\tnew Range(\\n\\t\\t\\t\\t\\tinsertPosition._getTransformedByInsertion( insertPosition, howMany, true ),\\n\\t\\t\\t\\t\\tthis.end._getTransformedByInsertion( insertPosition, howMany, this.isCollapsed )\\n\\t\\t\\t\\t)\\n\\t\\t\\t];\\n\\t\\t} else {\\n\\t\\t\\tconst range = Range.createFromRange( this );\\n\\n\\t\\t\\tconst insertBeforeStart = !isSticky;\\n\\t\\t\\tconst insertBeforeEnd = range.isCollapsed ? true : isSticky;\\n\\n\\t\\t\\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany, insertBeforeStart );\\n\\t\\t\\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany, insertBeforeEnd );\\n\\n\\t\\t\\treturn [ range ];\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\\n\\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\\n\\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\\n\\t * @param {Number} howMany How many nodes are moved.\\n\\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\\n\\t */\\n\\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\\n\\t\\tif ( this.isCollapsed ) {\\n\\t\\t\\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany, true, false );\\n\\n\\t\\t\\treturn [ new Range( newPos ) ];\\n\\t\\t}\\n\\n\\t\\tlet result;\\n\\n\\t\\tconst moveRange = new Range( sourcePosition, sourcePosition.getShiftedBy( howMany ) );\\n\\n\\t\\tconst differenceSet = this.getDifference( moveRange );\\n\\t\\tlet difference = null;\\n\\n\\t\\tconst common = this.getIntersection( moveRange );\\n\\n\\t\\tif ( differenceSet.length == 1 ) {\\n\\t\\t\\t// `moveRange` and this range may intersect.\\n\\t\\t\\tdifference = new Range(\\n\\t\\t\\t\\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\\n\\t\\t\\t\\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\\n\\t\\t\\t);\\n\\t\\t} else if ( differenceSet.length == 2 ) {\\n\\t\\t\\t// `moveRange` is inside this range.\\n\\t\\t\\tdifference = new Range(\\n\\t\\t\\t\\tthis.start,\\n\\t\\t\\t\\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\\n\\t\\t\\t);\\n\\t\\t} // else, `moveRange` contains this range.\\n\\n\\t\\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\\n\\n\\t\\tif ( difference ) {\\n\\t\\t\\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null );\\n\\t\\t} else {\\n\\t\\t\\tresult = [];\\n\\t\\t}\\n\\n\\t\\tif ( common ) {\\n\\t\\t\\tresult.push( new Range(\\n\\t\\t\\t\\tcommon.start._getCombined( moveRange.start, insertPosition ),\\n\\t\\t\\t\\tcommon.end._getCombined( moveRange.start, insertPosition )\\n\\t\\t\\t) );\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\\n\\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Beginning of the range.\\n\\t * @param {Number} shift How long the range should be.\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tstatic createFromPositionAndShift( position, shift ) {\\n\\t\\tconst start = position;\\n\\t\\tconst end = position.getShiftedBy( shift );\\n\\n\\t\\treturn shift > 0 ? new this( start, end ) : new this( end, start );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range from given parents and offsets.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} startElement Start position parent element.\\n\\t * @param {Number} startOffset Start position offset.\\n\\t * @param {module:engine/model/element~Element} endElement End position parent element.\\n\\t * @param {Number} endOffset End position offset.\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tstatic createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\\n\\t\\treturn new this(\\n\\t\\t\\tPosition.createFromParentAndOffset( startElement, startOffset ),\\n\\t\\t\\tPosition.createFromParentAndOffset( endElement, endOffset )\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new instance of `Range` which is equal to passed range.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} range Range to clone.\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tstatic createFromRange( range ) {\\n\\t\\treturn new this( range.start, range.end );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\\n\\t * that element and ends after the last child of that element.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tstatic createIn( element ) {\\n\\t\\treturn this.createFromParentsAndOffsets( element, 0, element, element.maxOffset );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\\n\\t *\\n\\t * @param {module:engine/model/item~Item} item\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tstatic createOn( item ) {\\n\\t\\treturn this.createFromPositionAndShift( Position.createBefore( item ), item.offsetSize );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a collapsed range at given {@link module:engine/model/position~Position position}\\n\\t * or on the given {@link module:engine/model/item~Item item}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tstatic createCollapsedAt( itemOrPosition, offset ) {\\n\\t\\tconst start = Position.createAt( itemOrPosition, offset );\\n\\t\\tconst end = Position.createFromPosition( start );\\n\\n\\t\\treturn new Range( start, end );\\n\\t}\\n\\n\\t/**\\n\\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\\n\\t * Passed ranges must not have common parts.\\n\\t *\\n\\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\\n\\t * the reference range, they get combined into one range.\\n\\t *\\n\\t *\\t\\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\\n\\t *\\t\\t[    ]                                       // The result of the function if the first range was a reference range.\\n\\t *\\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\\n\\t *\\t                                           [  ]  // The result of the function if the last range was a reference range.\\n\\t *\\n\\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\\n\\t * @returns {module:engine/model/range~Range} Combined range.\\n\\t */\\n\\tstatic createFromRanges( ranges ) {\\n\\t\\tif ( ranges.length === 0 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * At least one range has to be passed to\\n\\t\\t\\t * {@link module:engine/model/range~Range.createFromRanges `Range.createFromRanges()`}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error range-create-from-ranges-empty-array\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'range-create-from-ranges-empty-array: At least one range has to be passed.' );\\n\\t\\t} else if ( ranges.length == 1 ) {\\n\\t\\t\\treturn this.createFromRange( ranges[ 0 ] );\\n\\t\\t}\\n\\n\\t\\t// 1. Set the first range in `ranges` array as a reference range.\\n\\t\\t// If we are going to return just a one range, one of the ranges need to be the reference one.\\n\\t\\t// Other ranges will be stuck to that range, if possible.\\n\\t\\tconst ref = ranges[ 0 ];\\n\\n\\t\\t// 2. Sort all the ranges so it's easier to process them.\\n\\t\\tranges.sort( ( a, b ) => {\\n\\t\\t\\treturn a.start.isAfter( b.start ) ? 1 : -1;\\n\\t\\t} );\\n\\n\\t\\t// 3. Check at which index the reference range is now.\\n\\t\\tconst refIndex = ranges.indexOf( ref );\\n\\n\\t\\t// 4. At this moment we don't need the original range.\\n\\t\\t// We are going to modify the result and we need to return a new instance of Range.\\n\\t\\t// We have to create a copy of the reference range.\\n\\t\\tconst result = new this( ref.start, ref.end );\\n\\n\\t\\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\\n\\t\\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\\n\\t\\tfor ( let i = refIndex - 1; i >= 0; i++ ) {\\n\\t\\t\\tif ( ranges[ i ].end.isEqual( result.start ) ) {\\n\\t\\t\\t\\tresult.start = Position.createFromPosition( ranges[ i ].start );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If ranges are not starting/ending at the same position there is no point in looking further.\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\\n\\t\\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\\n\\t\\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\\n\\t\\t\\tif ( ranges[ i ].start.isEqual( result.end ) ) {\\n\\t\\t\\t\\tresult.end = Position.createFromPosition( ranges[ i ].end );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If ranges are not starting/ending at the same position there is no point in looking further.\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\\n\\t *\\n\\t * @param {Object} json Plain object to be converted to `Range`.\\n\\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\\n\\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\\n\\t */\\n\\tstatic fromJSON( json, doc ) {\\n\\t\\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/mapper\\n */\\n\\nimport ModelPosition from '../model/position';\\nimport ModelRange from '../model/range';\\n\\nimport ViewPosition from '../view/position';\\nimport ViewRange from '../view/range';\\nimport ViewText from '../view/text';\\n\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Maps elements and positions between {@link module:engine/view/document~Document view} and {@link module:engine/model/model model}.\\n *\\n * Mapper use bound elements to find corresponding elements and positions, so, to get proper results,\\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\\n *\\n * To map complex model to/from view relations, you may provide custom callbacks for\\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\\n * a position mapping request occurs.\\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\\n * stop the event.\\n */\\nexport default class Mapper {\\n\\t/**\\n\\t * Creates an instance of the mapper.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Model element to view element mapping.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakMap}\\n\\t\\t */\\n\\t\\tthis._modelToViewMapping = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * View element to model element mapping.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakMap}\\n\\t\\t */\\n\\t\\tthis._viewToModelMapping = new WeakMap();\\n\\n\\t\\t/**\\n\\t\\t * A map containing callbacks between view element names and functions evaluating length of view elements\\n\\t\\t * in model.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map}\\n\\t\\t */\\n\\t\\tthis._viewToModelLengthCallbacks = new Map();\\n\\n\\t\\t// Default mapper algorithm for mapping model position to view position.\\n\\t\\tthis.on( 'modelToViewPosition', ( evt, data ) => {\\n\\t\\t\\tif ( data.viewPosition ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\\n\\n\\t\\t\\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// Default mapper algorithm for mapping view position to model position.\\n\\t\\tthis.on( 'viewToModelPosition', ( evt, data ) => {\\n\\t\\t\\tif ( data.modelPosition ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet viewBlock = data.viewPosition.parent;\\n\\t\\t\\tlet modelParent = this._viewToModelMapping.get( viewBlock );\\n\\n\\t\\t\\twhile ( !modelParent ) {\\n\\t\\t\\t\\tviewBlock = viewBlock.parent;\\n\\t\\t\\t\\tmodelParent = this._viewToModelMapping.get( viewBlock );\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\\n\\n\\t\\t\\tdata.modelPosition = ModelPosition.createFromParentAndOffset( modelParent, modelOffset );\\n\\t\\t}, { priority: 'low' } );\\n\\t}\\n\\n\\t/**\\n\\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\\n\\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\\n\\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\\n\\t * The information that elements are bound is also used to translate positions.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} modelElement Model element.\\n\\t * @param {module:engine/view/element~Element} viewElement View element.\\n\\t */\\n\\tbindElements( modelElement, viewElement ) {\\n\\t\\tthis._modelToViewMapping.set( modelElement, viewElement );\\n\\t\\tthis._viewToModelMapping.set( viewElement, modelElement );\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\\n\\t *\\n\\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\\n\\t * will be removed only if model element is still bound to passed `viewElement`.\\n\\t *\\n\\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\\n\\t * when the previously bound view element is unbound.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\\n\\t */\\n\\tunbindViewElement( viewElement ) {\\n\\t\\tconst modelElement = this.toModelElement( viewElement );\\n\\n\\t\\tthis._viewToModelMapping.delete( viewElement );\\n\\n\\t\\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\\n\\t\\t\\tthis._modelToViewMapping.delete( modelElement );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\\n\\t *\\n\\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\\n\\t * will be removed only if view element is still bound to passed `modelElement`.\\n\\t *\\n\\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\\n\\t * when the previously bound model element is unbound.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\\n\\t */\\n\\tunbindModelElement( modelElement ) {\\n\\t\\tconst viewElement = this.toViewElement( modelElement );\\n\\n\\t\\tthis._modelToViewMapping.delete( modelElement );\\n\\n\\t\\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\\n\\t\\t\\tthis._viewToModelMapping.delete( viewElement );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes all model to view and view to model bindings.\\n\\t */\\n\\tclearBindings() {\\n\\t\\tthis._modelToViewMapping = new WeakMap();\\n\\t\\tthis._viewToModelMapping = new WeakMap();\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding model element.\\n\\t *\\n\\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} viewElement View element.\\n\\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\\n\\t */\\n\\ttoModelElement( viewElement ) {\\n\\t\\treturn this._viewToModelMapping.get( viewElement );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding view element.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} modelElement Model element.\\n\\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\\n\\t */\\n\\ttoViewElement( modelElement ) {\\n\\t\\treturn this._modelToViewMapping.get( modelElement );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding model range.\\n\\t *\\n\\t * @param {module:engine/view/range~Range} viewRange View range.\\n\\t * @returns {module:engine/model/range~Range} Corresponding model range.\\n\\t */\\n\\ttoModelRange( viewRange ) {\\n\\t\\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding view range.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} modelRange Model range.\\n\\t * @returns {module:engine/view/range~Range} Corresponding view range.\\n\\t */\\n\\ttoViewRange( modelRange ) {\\n\\t\\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding model position.\\n\\t *\\n\\t * @fires viewToModelPosition\\n\\t * @param {module:engine/view/position~Position} viewPosition View position.\\n\\t * @returns {module:engine/model/position~Position} Corresponding model position.\\n\\t */\\n\\ttoModelPosition( viewPosition ) {\\n\\t\\tconst data = {\\n\\t\\t\\tviewPosition,\\n\\t\\t\\tmapper: this\\n\\t\\t};\\n\\n\\t\\tthis.fire( 'viewToModelPosition', data );\\n\\n\\t\\treturn data.modelPosition;\\n\\t}\\n\\n\\t/**\\n\\t * Gets the corresponding view position.\\n\\t *\\n\\t * @fires modelToViewPosition\\n\\t * @param {module:engine/model/position~Position} modelPosition Model position.\\n\\t * @param {Object} [options] Additional options for position mapping process.\\n\\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\\n\\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\\n\\t * @returns {module:engine/view/position~Position} Corresponding view position.\\n\\t */\\n\\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\\n\\t\\tconst data = {\\n\\t\\t\\tmodelPosition,\\n\\t\\t\\tmapper: this,\\n\\t\\t\\tisPhantom: options.isPhantom\\n\\t\\t};\\n\\n\\t\\tthis.fire( 'modelToViewPosition', data );\\n\\n\\t\\treturn data.viewPosition;\\n\\t}\\n\\n\\t/**\\n\\t * Registers a callback that evaluates the length in the model of a view element with given name.\\n\\t *\\n\\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\\n\\t * a number representing the length of view element in model.\\n\\t *\\n\\t *\\t\\t// List item in view may contain nested list, which have other list items. In model though,\\n\\t *\\t\\t// the lists are represented by flat structure. Because of those differences, length of list view element\\n\\t *\\t\\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\\n\\t *\\n\\t *\\t\\tfunction getViewListItemLength( element ) {\\n\\t *\\t\\t\\tlet length = 1;\\n\\t *\\n\\t *\\t\\t\\tfor ( let child of element.getChildren() ) {\\n\\t *\\t\\t\\t\\tif ( child.name == 'ul' || child.name == 'ol' ) {\\n\\t *\\t\\t\\t\\t\\tfor ( let item of child.getChildren() ) {\\n\\t *\\t\\t\\t\\t\\t\\tlength += getViewListItemLength( item );\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\treturn length;\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\\n\\t *\\n\\t * @param {String} viewElementName Name of view element for which callback is registered.\\n\\t * @param {Function} lengthCallback Function return a length of view element instance in model.\\n\\t */\\n\\tregisterViewToModelLength( viewElementName, lengthCallback ) {\\n\\t\\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\\n\\t}\\n\\n\\t/**\\n\\t * Calculates model offset based on the view position and the block element.\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *\\t\\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\\n\\t *\\n\\t * Is a sum of:\\n\\t *\\n\\t *\\t\\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\\n\\t *\\t\\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} viewParent Position parent.\\n\\t * @param {Number} viewOffset Position offset.\\n\\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\\n\\t * @returns {Number} Offset in the model.\\n\\t */\\n\\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\\n\\t\\tif ( viewBlock != viewParent ) {\\n\\t\\t\\t// See example.\\n\\t\\t\\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\\n\\t\\t\\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\\n\\n\\t\\t\\treturn offsetToParentStart + offsetInParent;\\n\\t\\t}\\n\\n\\t\\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\\n\\n\\t\\t// If the position is a text it is simple (\\\"ba|r\\\" -> 2).\\n\\t\\tif ( viewParent.is( 'text' ) ) {\\n\\t\\t\\treturn viewOffset;\\n\\t\\t}\\n\\n\\t\\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\\n\\t\\tlet modelOffset = 0;\\n\\n\\t\\tfor ( let i = 0; i < viewOffset; i++ ) {\\n\\t\\t\\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\\n\\t\\t}\\n\\n\\t\\treturn modelOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Gets the length of the view element in the model.\\n\\t *\\n\\t * The length is calculated as follows:\\n\\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\\n\\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\\n\\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\\n\\t * {@link module:engine/view/text~Text#data data},\\n\\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\\n\\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\\n\\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\\n\\t *\\n\\t * Examples:\\n\\t *\\n\\t *\\t\\tfoo                          -> 3 // Text length is equal to it's data length.\\n\\t *\\t\\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\\n\\t *\\t\\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\\n\\t *\\t\\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\\n\\t *\\n\\t * @param {module:engine/view/element~Element} viewNode View node.\\n\\t * @returns {Number} Length of the node in the tree model.\\n\\t */\\n\\tgetModelLength( viewNode ) {\\n\\t\\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\\n\\t\\t\\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\\n\\n\\t\\t\\treturn callback( viewNode );\\n\\t\\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\\n\\t\\t\\treturn 1;\\n\\t\\t} else if ( viewNode.is( 'text' ) ) {\\n\\t\\t\\treturn viewNode.data.length;\\n\\t\\t} else if ( viewNode.is( 'uiElement' ) ) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else {\\n\\t\\t\\tlet len = 0;\\n\\n\\t\\t\\tfor ( const child of viewNode.getChildren() ) {\\n\\t\\t\\t\\tlen += this.getModelLength( child );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn len;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Finds the position in the view node (or its children) with the expected model offset.\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *\\t\\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\\n\\t *\\n\\t *\\t\\t_findPositionIn( p, 4 ):\\n\\t *\\t\\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\\n\\t *\\t\\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\\n\\t *\\t\\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\\n\\t *\\n\\t *\\t\\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\\n\\t *\\t\\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\\n\\t *\\t\\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\\n\\t *\\n\\t *\\t\\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\\n\\t *\\t\\tWe are in the text node so we can simple find the offset.\\n\\t *\\t\\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\\n\\t * @param {Number} expectedOffset Expected offset.\\n\\t * @returns {module:engine/view/position~Position} Found position.\\n\\t */\\n\\t_findPositionIn( viewParent, expectedOffset ) {\\n\\t\\t// Last scanned view node.\\n\\t\\tlet viewNode;\\n\\t\\t// Length of the last scanned view node.\\n\\t\\tlet lastLength = 0;\\n\\n\\t\\tlet modelOffset = 0;\\n\\t\\tlet viewOffset = 0;\\n\\n\\t\\t// In the text node it is simple: offset in the model equals offset in the text.\\n\\t\\tif ( viewParent.is( 'text' ) ) {\\n\\t\\t\\treturn new ViewPosition( viewParent, expectedOffset );\\n\\t\\t}\\n\\n\\t\\t// In other cases we add lengths of child nodes to find the proper offset.\\n\\n\\t\\t// If it is smaller we add the length.\\n\\t\\twhile ( modelOffset < expectedOffset ) {\\n\\t\\t\\tviewNode = viewParent.getChild( viewOffset );\\n\\t\\t\\tlastLength = this.getModelLength( viewNode );\\n\\t\\t\\tmodelOffset += lastLength;\\n\\t\\t\\tviewOffset++;\\n\\t\\t}\\n\\n\\t\\t// If it equals we found the position.\\n\\t\\tif ( modelOffset == expectedOffset ) {\\n\\t\\t\\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\\n\\t\\t}\\n\\t\\t// If it is higher we need to enter last child.\\n\\t\\telse {\\n\\t\\t\\t// ( modelOffset - lastLength ) is the offset to the child we enter,\\n\\t\\t\\t// so we subtract it from the expected offset to fine the offset in the child.\\n\\t\\t\\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\\n\\t * if it was next to it.\\n\\t *\\n\\t *\\t\\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\\n\\t *\\t\\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\\n\\t *\\t\\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\\n\\t * @returns {module:engine/view/position~Position} Position in text node if possible.\\n\\t */\\n\\t_moveViewPositionToTextNode( viewPosition ) {\\n\\t\\t// If the position is just after text node, put it at the end of that text node.\\n\\t\\t// If the position is just before text node, put it at the beginning of that text node.\\n\\t\\tconst nodeBefore = viewPosition.nodeBefore;\\n\\t\\tconst nodeAfter = viewPosition.nodeAfter;\\n\\n\\t\\tif ( nodeBefore instanceof ViewText ) {\\n\\t\\t\\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\\n\\t\\t} else if ( nodeAfter instanceof ViewText ) {\\n\\t\\t\\treturn new ViewPosition( nodeAfter, 0 );\\n\\t\\t}\\n\\n\\t\\t// Otherwise, just return the given position.\\n\\t\\treturn viewPosition;\\n\\t}\\n\\n\\t/**\\n\\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\\n\\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\\n\\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\\n\\t * value in `data` object that is passed as one of parameters to the event callback.\\n\\t *\\n\\t * \\t\\t// Assume that \\\"captionedImage\\\" model element is converted to <img> and following <span> elements in view,\\n\\t * \\t\\t// and the model element is bound to <img> element. Force mapping model positions inside \\\"captionedImage\\\" to that\\n\\t * \\t\\t// <span> element.\\n\\t *\\t\\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\\n\\t *\\t\\t\\tconst positionParent = modelPosition.parent;\\n\\t *\\n\\t *\\t\\t\\tif ( positionParent.name == 'captionedImage' ) {\\n\\t *\\t\\t\\t\\tconst viewImg = data.mapper.toViewElement( positionParent );\\n\\t *\\t\\t\\t\\tconst viewCaption = viewImg.nextSibling; // The <span> element.\\n\\t *\\n\\t *\\t\\t\\t\\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\\n\\t *\\n\\t *\\t\\t\\t\\t// Stop the event if other callbacks should not modify calculated value.\\n\\t *\\t\\t\\t\\tevt.stop();\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * **Note:** keep in mind that sometimes a \\\"phantom\\\" model position is being converted. \\\"Phantom\\\" model position is\\n\\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\\n\\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\\n\\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\\n\\t * handle such situation, check `data.isPhantom` flag:\\n\\t *\\n\\t * \\t\\t// Assume that there is \\\"customElement\\\" model element and whenever position is before it, we want to move it\\n\\t * \\t\\t// to the inside of the view element bound to \\\"customElement\\\".\\n\\t *\\t\\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\\n\\t *\\t\\t\\tif ( data.isPhantom ) {\\n\\t *\\t\\t\\t\\treturn;\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t// Below line might crash for phantom position that does not exist in model.\\n\\t *\\t\\t\\tconst sibling = data.modelPosition.nodeBefore;\\n\\t *\\n\\t *\\t\\t\\t// Check if this is the element we are interested in.\\n\\t *\\t\\t\\tif ( !sibling.is( 'customElement' ) ) {\\n\\t *\\t\\t\\t\\treturn;\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\tconst viewElement = data.mapper.toViewElement( sibling );\\n\\t *\\n\\t *\\t\\t\\tdata.viewPosition = new ViewPosition( sibling, 0 );\\n\\t *\\n\\t *\\t\\t\\tevt.stop();\\n\\t *\\t\\t} );\\n\\t *\\n\\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\\n\\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\\n\\t * (for example to fix it).\\n\\t *\\n\\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\\n\\t *\\n\\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\\n\\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\\n\\t * the condition that checks if special case scenario happened should be as simple as possible.\\n\\t *\\n\\t * @event modelToViewPosition\\n\\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\\n\\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\\n\\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\\n\\t */\\n\\n\\t/**\\n\\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\\n\\t *\\n\\t * \\t\\t// See example in `modelToViewPosition` event description.\\n\\t * \\t\\t// This custom mapping will map positions from <span> element next to <img> to the \\\"captionedImage\\\" element.\\n\\t *\\t\\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\\n\\t *\\t\\t\\tconst positionParent = viewPosition.parent;\\n\\t *\\n\\t *\\t\\t\\tif ( positionParent.hasClass( 'image-caption' ) ) {\\n\\t *\\t\\t\\t\\tconst viewImg = positionParent.previousSibling;\\n\\t *\\t\\t\\t\\tconst modelImg = data.mapper.toModelElement( viewImg );\\n\\t *\\n\\t *\\t\\t\\t\\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\\n\\t *\\t\\t\\t\\tevt.stop();\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\\n\\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\\n\\t * (for example to fix it).\\n\\t *\\n\\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\\n\\t *\\n\\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\\n\\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\\n\\t * the condition that checks if special case scenario happened should be as simple as possible.\\n\\t *\\n\\t * @event viewToModelPosition\\n\\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\\n\\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\\n\\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\\n\\t */\\n}\\n\\nmix( Mapper, EmitterMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/modelconsumable\\n */\\n\\nimport TextProxy from '../model/textproxy';\\n\\n/**\\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\\n *\\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\\n * taken into consideration when converting that item.\\n *\\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\\n * but without attributes), consumable value is removed from `ModelConsumable`.\\n *\\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addAttribute:<attributeKey>`,\\n * `changeAttribute:<attributeKey>`, `removeAttribute:<attributeKey>`.\\n *\\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\\n * gather consumable values, so there is no need to use\\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\\n * However, it is important to understand how consumable values can be\\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\\n * See {@link module:engine/conversion/downcast-selection-converters default downcast converters} for more information.\\n *\\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\\n *\\n * Consuming multiple values in a single callback:\\n *\\n *\\t\\t// Converter for custom `image` element that might have a `caption` element inside which changes\\n *\\t\\t// how the image is displayed in the view:\\n *\\t\\t//\\n *\\t\\t// Model:\\n *\\t\\t//\\n *\\t\\t// [image]\\n *\\t\\t//   └─ [caption]\\n *\\t\\t//       └─ foo\\n *\\t\\t//\\n *\\t\\t// View:\\n *\\t\\t//\\n *\\t\\t// <figure>\\n *\\t\\t//   ├─ <img />\\n *\\t\\t//   └─ <caption>\\n *\\t\\t//       └─ foo\\n *\\t\\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\\n *\\t\\t\\t// First, consume the `image` element.\\n *\\t\\t\\tconversionApi.consumable.consume( data.item, 'insert' );\\n *\\n *\\t\\t\\t// Just create normal image element for the view.\\n *\\t\\t\\t// Maybe it will be \\\"decorated\\\" later.\\n *\\t\\t\\tconst viewImage = new ViewElement( 'img' );\\n *\\t\\t\\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\\n *\\n *\\t\\t\\t// Check if the `image` element has children.\\n *\\t\\t\\tif ( data.item.childCount > 0 ) {\\n *\\t\\t\\t\\tconst modelCaption = data.item.getChild( 0 );\\n *\\n *\\t\\t\\t\\t// `modelCaption` insertion change is consumed from consumable values.\\n *\\t\\t\\t\\t// It will not be converted by other converters, but it's children (probably some text) will be.\\n *\\t\\t\\t\\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\\n *\\t\\t\\t\\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\\n *\\t\\t\\t\\t\\tconst viewCaption = new ViewElement( 'figcaption' );\\n *\\n *\\t\\t\\t\\t\\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\\n *\\n *\\t\\t\\t\\t\\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\\n *\\t\\t\\t\\t\\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\\n *\\t\\t\\t\\t\\tviewWriter.insert( insertPosition, viewImageHolder );\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t} else {\\n *\\t\\t\\t\\tconversionApi.mapper.bindElements( data.item, viewImage );\\n *\\t\\t\\t\\tviewWriter.insert( insertPosition, viewImage );\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\tevt.stop();\\n *\\t\\t} );\\n */\\nexport default class ModelConsumable {\\n\\t/**\\n\\t * Creates an empty consumables list.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Contains list of consumable values.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\\n\\t\\t */\\n\\t\\tthis._consumable = new Map();\\n\\n\\t\\t/**\\n\\t\\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\\n\\t\\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\\n\\t\\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\\n\\t\\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\\n\\t\\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\\n\\t\\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\\n\\t\\t */\\n\\t\\tthis._textProxyRegistry = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Adds a consumable value to the consumables list and links it with given model item.\\n\\t *\\n\\t *\\t\\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\\n\\t *\\t\\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\\n\\t *\\t\\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\\n\\t * Model item, range or selection that has the consumable.\\n\\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\\n\\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\\n\\t */\\n\\tadd( item, type ) {\\n\\t\\ttype = _normalizeConsumableType( type );\\n\\n\\t\\tif ( item instanceof TextProxy ) {\\n\\t\\t\\titem = this._getSymbolForTextProxy( item );\\n\\t\\t}\\n\\n\\t\\tif ( !this._consumable.has( item ) ) {\\n\\t\\t\\tthis._consumable.set( item, new Map() );\\n\\t\\t}\\n\\n\\t\\tthis._consumable.get( item ).set( type, true );\\n\\t}\\n\\n\\t/**\\n\\t * Removes given consumable value from given model item.\\n\\t *\\n\\t *\\t\\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\\n\\t *\\t\\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\\n\\t *\\t\\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\\n\\t * Model item, range or selection from which consumable will be consumed.\\n\\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\\n\\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\\n\\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\\n\\t */\\n\\tconsume( item, type ) {\\n\\t\\ttype = _normalizeConsumableType( type );\\n\\n\\t\\tif ( item instanceof TextProxy ) {\\n\\t\\t\\titem = this._getSymbolForTextProxy( item );\\n\\t\\t}\\n\\n\\t\\tif ( this.test( item, type ) ) {\\n\\t\\t\\tthis._consumable.get( item ).set( type, false );\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Tests whether there is a consumable value of given type connected with given model item.\\n\\t *\\n\\t *\\t\\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\\n\\t *\\t\\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\\n\\t *\\t\\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\\n\\t *\\t\\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\\n\\t * Model item, range or selection to be tested.\\n\\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\\n\\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\\n\\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\\n\\t * already consumed or `true` if it was added and not consumed yet.\\n\\t */\\n\\ttest( item, type ) {\\n\\t\\ttype = _normalizeConsumableType( type );\\n\\n\\t\\tif ( item instanceof TextProxy ) {\\n\\t\\t\\titem = this._getSymbolForTextProxy( item );\\n\\t\\t}\\n\\n\\t\\tconst itemConsumables = this._consumable.get( item );\\n\\n\\t\\tif ( itemConsumables === undefined ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst value = itemConsumables.get( type );\\n\\n\\t\\tif ( value === undefined ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\treturn value;\\n\\t}\\n\\n\\t/**\\n\\t * Reverts consuming of consumable value.\\n\\t *\\n\\t *\\t\\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\\n\\t *\\t\\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\\n\\t *\\t\\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\\n\\t *\\t\\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\\n\\t *\\t\\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\\n\\t * Model item, range or selection to be reverted.\\n\\t * @param {String} type Consumable type.\\n\\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\\n\\t * never been added.\\n\\t */\\n\\trevert( item, type ) {\\n\\t\\ttype = _normalizeConsumableType( type );\\n\\n\\t\\tif ( item instanceof TextProxy ) {\\n\\t\\t\\titem = this._getSymbolForTextProxy( item );\\n\\t\\t}\\n\\n\\t\\tconst test = this.test( item, type );\\n\\n\\t\\tif ( test === false ) {\\n\\t\\t\\tthis._consumable.get( item ).set( type, true );\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else if ( test === true ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\\n\\t * have same parent, same start index and same end index will get the same symbol.\\n\\t *\\n\\t * Used internally to correctly consume `TextProxy` instances.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\\n\\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\\n\\t */\\n\\t_getSymbolForTextProxy( textProxy ) {\\n\\t\\tlet symbol = null;\\n\\n\\t\\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\\n\\n\\t\\tif ( startMap ) {\\n\\t\\t\\tconst endMap = startMap.get( textProxy.endOffset );\\n\\n\\t\\t\\tif ( endMap ) {\\n\\t\\t\\t\\tsymbol = endMap.get( textProxy.parent );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( !symbol ) {\\n\\t\\t\\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\\n\\t\\t}\\n\\n\\t\\treturn symbol;\\n\\t}\\n\\n\\t/**\\n\\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\\n\\t *\\n\\t * Used internally to correctly consume `TextProxy` instances.\\n\\t *\\n\\t * @private\\n\\t * @param {Number} startIndex Text proxy start index in it's parent.\\n\\t * @param {Number} endIndex Text proxy end index in it's parent.\\n\\t * @param {module:engine/model/element~Element} parent Text proxy parent.\\n\\t * @returns {Symbol} Symbol generated for given properties.\\n\\t */\\n\\t_addSymbolForTextProxy( start, end, parent ) {\\n\\t\\tconst symbol = Symbol( 'textProxySymbol' );\\n\\t\\tlet startMap, endMap;\\n\\n\\t\\tstartMap = this._textProxyRegistry.get( start );\\n\\n\\t\\tif ( !startMap ) {\\n\\t\\t\\tstartMap = new Map();\\n\\t\\t\\tthis._textProxyRegistry.set( start, startMap );\\n\\t\\t}\\n\\n\\t\\tendMap = startMap.get( end );\\n\\n\\t\\tif ( !endMap ) {\\n\\t\\t\\tendMap = new Map();\\n\\t\\t\\tstartMap.set( end, endMap );\\n\\t\\t}\\n\\n\\t\\tendMap.set( parent, symbol );\\n\\n\\t\\treturn symbol;\\n\\t}\\n}\\n\\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \\\"parts\\\" (more colons),\\n// the other parts are dropped, for example: `addAttribute:bold:$text` -> `addAttribute:bold`.\\n//\\n// @param {String} type Consumable type.\\n// @returns {String} Normalized consumable type.\\nfunction _normalizeConsumableType( type ) {\\n\\tconst parts = type.split( ':' );\\n\\n\\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/downcastdispatcher\\n */\\n\\nimport Consumable from './modelconsumable';\\nimport Range from '../model/range';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\\n\\n/**\\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\\n * changing attributes on view elements).\\n *\\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\\n * data for those events. It is important to understand that those events are connected with changes done on model,\\n * for example: \\\"node has been inserted\\\" or \\\"attribute has changed\\\". This is in a contrary to upcasting (view to model conversion),\\n * where we convert view state (view nodes) to a model tree.\\n *\\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\\n *\\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\\n *\\n * `DowncastDispatcher` fires following events for model tree changes:\\n *\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\\n * if a range of nodes has been inserted to the model tree,\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\\n * if a range of nodes has been removed from the model tree,\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\\n * if attribute has been added, changed or removed from a model node.\\n *\\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\\n * element's attributes during insertion).\\n *\\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\\n *\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\\n *\\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\\n * so both those events are fired.\\n *\\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\\n * conversion:\\n *\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\\n * which converts selection from model to view,\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\\n * which is fired for every selection attribute,\\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\\n * which is fired for every marker which contains selection.\\n *\\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\\n *\\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\\n *\\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\\n * converted the change should also stop the event (for efficiency purposes).\\n *\\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\\n * {@link module:engine/view/writer~Writer view writer} to apply changes to the view document.\\n *\\n * Example of a custom converter for `DowncastDispatcher`:\\n *\\n *\\t\\t// We will convert inserting \\\"paragraph\\\" model element into the model.\\n *\\t\\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\\n *\\t\\t\\t// Remember to check whether the change has not been consumed yet and consume it.\\n *\\t\\t\\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\\n *\\t\\t\\t\\treturn;\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\t// Translate position in model to position in view.\\n *\\t\\t\\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\\n *\\n *\\t\\t\\t// Create <p> element that will be inserted in view at `viewPosition`.\\n *\\t\\t\\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\\n *\\n *\\t\\t\\t// Bind the newly created view element to model element so positions will map accordingly in future.\\n *\\t\\t\\tconversionApi.mapper.bindElements( data.item, viewElement );\\n *\\n *\\t\\t\\t// Add the newly created view element to the view.\\n *\\t\\t\\tconversionApi.writer.insert( viewPosition, viewElement );\\n *\\n *\\t\\t\\t// Remember to stop the event propagation.\\n *\\t\\t\\tevt.stop();\\n *\\t\\t} );\\n */\\nexport default class DowncastDispatcher {\\n\\t/**\\n\\t * Creates a `DowncastDispatcher` instance.\\n\\t *\\n\\t * @param {Object} [conversionApi] Interface passed by dispatcher to the events calls.\\n\\t */\\n\\tconstructor( conversionApi = {} ) {\\n\\t\\t/**\\n\\t\\t * Interface passed by dispatcher to the events callbacks.\\n\\t\\t *\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\\n\\t}\\n\\n\\t/**\\n\\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\\n\\t *\\n\\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertChanges( differ, writer ) {\\n\\t\\t// Convert changes that happened on model tree.\\n\\t\\tfor ( const entry of differ.getChanges() ) {\\n\\t\\t\\tif ( entry.type == 'insert' ) {\\n\\t\\t\\t\\tthis.convertInsert( Range.createFromPositionAndShift( entry.position, entry.length ), writer );\\n\\t\\t\\t} else if ( entry.type == 'remove' ) {\\n\\t\\t\\t\\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// entry.type == 'attribute'.\\n\\t\\t\\t\\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// After the view is updated, convert markers which has changed.\\n\\t\\tfor ( const change of differ.getMarkersToAdd() ) {\\n\\t\\t\\tthis.convertMarkerAdd( change.name, change.range, writer );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Starts conversion of a range insertion.\\n\\t *\\n\\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\\n\\t * {@link #event:attribute attribute event is fired}.\\n\\t *\\n\\t * @fires insert\\n\\t * @fires attribute\\n\\t * @param {module:engine/model/range~Range} range Inserted range.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertInsert( range, writer ) {\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\\n\\t\\tthis.conversionApi.consumable = this._createInsertConsumable( range );\\n\\n\\t\\t// Fire a separate insert event for each node and text fragment contained in the range.\\n\\t\\tfor ( const value of range ) {\\n\\t\\t\\tconst item = value.item;\\n\\t\\t\\tconst itemRange = Range.createFromPositionAndShift( value.previousPosition, value.length );\\n\\t\\t\\tconst data = {\\n\\t\\t\\t\\titem,\\n\\t\\t\\t\\trange: itemRange\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis._testAndFire( 'insert', data );\\n\\n\\t\\t\\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\\n\\t\\t\\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\\n\\t\\t\\t// If we would not add this part, attributes on inserted nodes would not be converted.\\n\\t\\t\\tfor ( const key of item.getAttributeKeys() ) {\\n\\t\\t\\t\\tdata.attributeKey = key;\\n\\t\\t\\t\\tdata.attributeOldValue = null;\\n\\t\\t\\t\\tdata.attributeNewValue = item.getAttribute( key );\\n\\n\\t\\t\\t\\tthis._testAndFire( `attribute:${ key }`, data );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position from which node was removed.\\n\\t * @param {Number} length Offset size of removed node.\\n\\t * @param {String} name Name of removed node.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertRemove( position, length, name, writer ) {\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Starts conversion of attribute change on given `range`.\\n\\t *\\n\\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\\n\\t *\\n\\t * @fires attribute\\n\\t * @param {module:engine/model/range~Range} range Changed range.\\n\\t * @param {String} key Key of the attribute that has changed.\\n\\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\\n\\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertAttribute( range, key, oldValue, newValue, writer ) {\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\t// Create a list with attributes to consume.\\n\\t\\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\\n\\n\\t\\t// Create a separate attribute event for each node in the range.\\n\\t\\tfor ( const value of range ) {\\n\\t\\t\\tconst item = value.item;\\n\\t\\t\\tconst itemRange = Range.createFromPositionAndShift( value.previousPosition, value.length );\\n\\t\\t\\tconst data = {\\n\\t\\t\\t\\titem,\\n\\t\\t\\t\\trange: itemRange,\\n\\t\\t\\t\\tattributeKey: key,\\n\\t\\t\\t\\tattributeOldValue: oldValue,\\n\\t\\t\\t\\tattributeNewValue: newValue\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis._testAndFire( `attribute:${ key }`, data );\\n\\t\\t}\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Starts model selection conversion.\\n\\t *\\n\\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\\n\\t *\\n\\t * @fires selection\\n\\t * @fires addMarker\\n\\t * @fires attribute\\n\\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\\n\\t * @param {Array.<module:engine/model/markercollection~Marker>} markers Array of markers containing model markers.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertSelection( selection, markers, writer ) {\\n\\t\\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\\n\\n\\t\\tthis.conversionApi.writer = writer;\\n\\t\\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\\n\\n\\t\\tthis.fire( 'selection', { selection }, this.conversionApi );\\n\\n\\t\\tif ( !selection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor ( const marker of markersAtSelection ) {\\n\\t\\t\\tconst markerRange = marker.getRange();\\n\\n\\t\\t\\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst data = {\\n\\t\\t\\t\\titem: selection,\\n\\t\\t\\t\\tmarkerName: marker.name,\\n\\t\\t\\t\\tmarkerRange\\n\\t\\t\\t};\\n\\n\\t\\t\\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\\n\\t\\t\\t\\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( const key of selection.getAttributeKeys() ) {\\n\\t\\t\\tconst data = {\\n\\t\\t\\t\\titem: selection,\\n\\t\\t\\t\\trange: selection.getFirstRange(),\\n\\t\\t\\t\\tattributeKey: key,\\n\\t\\t\\t\\tattributeOldValue: null,\\n\\t\\t\\t\\tattributeNewValue: selection.getAttribute( key )\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Do not fire event if the attribute has been consumed.\\n\\t\\t\\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\\n\\t\\t\\t\\tthis.fire( 'attribute:' + data.attributeKey, data, this.conversionApi );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\\n\\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\\n\\t *\\n\\t * @fires addMarker\\n\\t * @param {String} markerName Marker name.\\n\\t * @param {module:engine/model/range~Range} markerRange Marker range.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertMarkerAdd( markerName, markerRange, writer ) {\\n\\t\\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\\n\\t\\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\t// In markers' case, event name == consumable name.\\n\\t\\tconst eventName = 'addMarker:' + markerName;\\n\\n\\t\\t// When range is collapsed - fire single event with collapsed range in consumable.\\n\\t\\tif ( markerRange.isCollapsed ) {\\n\\t\\t\\tconst consumable = new Consumable();\\n\\t\\t\\tconsumable.add( markerRange, eventName );\\n\\n\\t\\t\\tthis.conversionApi.consumable = consumable;\\n\\n\\t\\t\\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Create consumable for each item in range.\\n\\t\\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\\n\\n\\t\\t// Create separate event for each node in the range.\\n\\t\\tfor ( const item of markerRange.getItems() ) {\\n\\t\\t\\t// Do not fire event for already consumed items.\\n\\t\\t\\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst data = { item, range: Range.createOn( item ), markerName, markerRange };\\n\\n\\t\\t\\tthis.fire( eventName, data, this.conversionApi );\\n\\t\\t}\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\\n\\t *\\n\\t * @fires removeMarker\\n\\t * @param {String} markerName Marker name.\\n\\t * @param {module:engine/model/range~Range} markerRange Marker range.\\n\\t * @param {module:engine/view/writer~Writer} writer View writer that should be used to modify view document.\\n\\t */\\n\\tconvertMarkerRemove( markerName, markerRange, writer ) {\\n\\t\\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\\n\\t\\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\\n\\n\\t\\tthis._clearConversionApi();\\n\\t}\\n\\n\\t/**\\n\\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\\n\\t * assuming that the range has just been inserted to the model.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/range~Range} range Inserted range.\\n\\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\\n\\t */\\n\\t_createInsertConsumable( range ) {\\n\\t\\tconst consumable = new Consumable();\\n\\n\\t\\tfor ( const value of range ) {\\n\\t\\t\\tconst item = value.item;\\n\\n\\t\\t\\tconsumable.add( item, 'insert' );\\n\\n\\t\\t\\tfor ( const key of item.getAttributeKeys() ) {\\n\\t\\t\\t\\tconsumable.add( item, 'attribute:' + key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn consumable;\\n\\t}\\n\\n\\t/**\\n\\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/range~Range} range Affected range.\\n\\t * @param {String} type Consumable type.\\n\\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\\n\\t */\\n\\t_createConsumableForRange( range, type ) {\\n\\t\\tconst consumable = new Consumable();\\n\\n\\t\\tfor ( const item of range.getItems() ) {\\n\\t\\t\\tconsumable.add( item, type );\\n\\t\\t}\\n\\n\\t\\treturn consumable;\\n\\t}\\n\\n\\t/**\\n\\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\\n\\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\\n\\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\\n\\t */\\n\\t_createSelectionConsumable( selection, markers ) {\\n\\t\\tconst consumable = new Consumable();\\n\\n\\t\\tconsumable.add( selection, 'selection' );\\n\\n\\t\\tfor ( const marker of markers ) {\\n\\t\\t\\tconsumable.add( selection, 'addMarker:' + marker.name );\\n\\t\\t}\\n\\n\\t\\tfor ( const key of selection.getAttributeKeys() ) {\\n\\t\\t\\tconsumable.add( selection, 'attribute:' + key );\\n\\t\\t}\\n\\n\\t\\treturn consumable;\\n\\t}\\n\\n\\t/**\\n\\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\\n\\t *\\n\\t * @private\\n\\t * @fires insert\\n\\t * @fires attribute\\n\\t * @param {String} type Event type.\\n\\t * @param {Object} data Event data.\\n\\t */\\n\\t_testAndFire( type, data ) {\\n\\t\\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\\n\\t\\t\\t// Do not fire event if the item was consumed.\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst name = data.item.name || '$text';\\n\\n\\t\\tthis.fire( type + ':' + name, data, this.conversionApi );\\n\\t}\\n\\n\\t/**\\n\\t * Clears conversion API object.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_clearConversionApi() {\\n\\t\\tdelete this.conversionApi.writer;\\n\\t\\tdelete this.conversionApi.consumable;\\n\\t}\\n\\n\\t/**\\n\\t * Fired for inserted nodes.\\n\\t *\\n\\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\\n\\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\\n\\t * or {@link module:engine/model/element~Element#name name} of inserted element.\\n\\t *\\n\\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\\n\\t *\\n\\t * @event insert\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/model/item~Item} data.item Inserted item.\\n\\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n\\n\\t/**\\n\\t * Fired for removed nodes.\\n\\t *\\n\\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\\n\\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\\n\\t * or the {@link module:engine/model/element~Element#name name} of removed element.\\n\\t *\\n\\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\\n\\t *\\n\\t * @event remove\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/model/position~Position} data.sourcePosition Position from where the range has been removed.\\n\\t * @param {module:engine/model/range~Range} data.range Removed range (in {@link module:engine/model/document~Document#graveyard\\n\\t * graveyard root}).\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when attribute has been added/changed/removed from a node. Also fired when collapsed model selection attribute is converted.\\n\\t *\\n\\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\\n\\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\\n\\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\\n\\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\\n\\t *\\n\\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\\n\\t *\\n\\t * @event attribute\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\\n\\t * or converted selection.\\n\\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\\n\\t * @param {String} data.attributeKey Attribute key.\\n\\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\\n\\t * @param {*} data.attributeNewValue New attribute value.\\n\\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n\\n\\t/**\\n\\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\\n\\t *\\n\\t * @event selection\\n\\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\\n\\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\\n\\t *\\n\\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\\n\\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\\n\\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\\n\\t * `addMarker:foo:bar` events.\\n\\t *\\n\\t * If the marker range is not collapsed:\\n\\t *\\n\\t * * the event is fired for each item in the marker range one by one,\\n\\t * * consumables object includes each item of the marker range and the consumable value is same as event name.\\n\\t *\\n\\t * If the marker range is collapsed:\\n\\t *\\n\\t * * there is only one event,\\n\\t * * consumables object includes marker range with event name.\\n\\t *\\n\\t * If selection inside a marker is converted:\\n\\t *\\n\\t * * there is only one event,\\n\\t * * consumables object includes selection instance with event name.\\n\\t *\\n\\t * @event addMarker\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\\n\\t * the selection that is being converted.\\n\\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\\n\\t * the marker range was not collapsed.\\n\\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\\n\\t * @param {String} data.markerName Marker name.\\n\\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when marker is removed from the model.\\n\\t *\\n\\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\\n\\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\\n\\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\\n\\t * `removeMarker:foo:bar` events.\\n\\t *\\n\\t * @event removeMarker\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\\n\\t * @param {String} data.markerName Marker name.\\n\\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\\n\\t */\\n}\\n\\nmix( DowncastDispatcher, EmitterMixin );\\n\\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\\n// converted if they happen inside an element with custom conversion method.\\n//\\n// @param {module:engine/model/position~Position} modelPosition\\n// @param {module:engine/model/markercollection~Marker} marker\\n// @param {module:engine/conversion/mapper~Mapper} mapper\\n// @returns {Boolean}\\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\\n\\tconst range = marker.getRange();\\n\\tconst ancestors = Array.from( modelPosition.getAncestors() );\\n\\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\\n\\tancestors.reverse();\\n\\n\\tconst hasCustomHandling = ancestors.some( element => {\\n\\t\\tif ( range.containsItem( element ) ) {\\n\\t\\t\\tconst viewElement = mapper.toViewElement( element );\\n\\n\\t\\t\\treturn !!viewElement.getCustomProperty( 'addHighlight' );\\n\\t\\t}\\n\\t} );\\n\\n\\treturn !hasCustomHandling;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/selection\\n */\\n\\nimport Position from './position';\\nimport Element from './element';\\nimport Node from './node';\\nimport Range from './range';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\n\\n/**\\n * `Selection` is a group of {@link module:engine/model/range~Range ranges} which has a direction specified by\\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}.\\n * Additionally, `Selection` may have it's own attributes.\\n *\\n * @mixes {module:utils/emittermixin~EmitterMixin}\\n */\\nexport default class Selection {\\n\\t/**\\n\\t * Creates new selection instance on the given\\n\\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges}\\n\\t * or creates an empty selection if no arguments passed.\\n\\t *\\n\\t * \\t\\t// Creates empty selection without ranges.\\n\\t *\\t\\tconst selection = new Selection();\\n\\t *\\n\\t *\\t\\t// Creates selection at the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\tconst selection = new Selection( range );\\n\\t *\\n\\t *\\t\\t// Creates selection at the given ranges\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\tconst selection = new Selection( ranges );\\n\\t *\\n\\t *\\t\\t// Creates selection from the other selection.\\n\\t *\\t\\t// Note: It doesn't copies selection attributes.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\tconst selection = new Selection( otherSelection );\\n\\t *\\n\\t * \\t\\t// Creates selection from the given document selection.\\n\\t *\\t\\t// Note: It doesn't copies selection attributes.\\n\\t *\\t\\tconst documentSelection = new DocumentSelection( doc );\\n\\t *\\t\\tconst selection = new Selection( documentSelection );\\n\\t *\\n\\t * \\t\\t// Creates selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\tconst selection = new Selection( position );\\n\\t *\\n\\t * \\t\\t// Creates selection at the start position of the given element.\\n\\t *\\t\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\t *\\t\\tconst selection = new Selection( paragraph, offset );\\n\\t *\\n\\t * \\t\\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\\n\\t * \\t\\t// first child of that element and ends after the last child of that element.\\n\\t *\\t\\tconst selection = new Selection( paragraph, 'in' );\\n\\t *\\n\\t * \\t\\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\\n\\t * \\t\\t// just after the item.\\n\\t *\\t\\tconst selection = new Selection( paragraph, 'on' );\\n\\t *\\n\\t * `Selection`'s constructor allow passing additional options (`backward`) as the last argument.\\n\\t *\\n\\t * \\t\\t// Creates backward selection.\\n\\t *\\t\\tconst selection = new Selection( range, { backward: true } );\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\\n\\t * module:engine/model/position~Position|module:engine/model/element~Element|\\n\\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t */\\n\\tconstructor( selectable, placeOrOffset, options ) {\\n\\t\\t/**\\n\\t\\t * Specifies whether the last added range was added as a backward or forward range.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Boolean}\\n\\t\\t */\\n\\t\\tthis._lastRangeBackward = false;\\n\\n\\t\\t/**\\n\\t\\t * Stores selection ranges.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @type {Array.<module:engine/model/range~Range>}\\n\\t\\t */\\n\\t\\tthis._ranges = [];\\n\\n\\t\\t/**\\n\\t\\t * List of attributes set on current selection.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @type {Map.<String,*>}\\n\\t\\t */\\n\\t\\tthis._attrs = new Map();\\n\\n\\t\\tif ( selectable ) {\\n\\t\\t\\tthis.setTo( selectable, placeOrOffset, options );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\\n\\t * Together with {@link #focus} they define the direction of selection, which is important\\n\\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\\n\\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\\n\\t *\\n\\t * Is set to `null` if there are no ranges in selection.\\n\\t *\\n\\t * @see #focus\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget anchor() {\\n\\t\\tif ( this._ranges.length > 0 ) {\\n\\t\\t\\tconst range = this._ranges[ this._ranges.length - 1 ];\\n\\n\\t\\t\\treturn this._lastRangeBackward ? range.end : range.start;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Selection focus. Focus is a position where the selection ends.\\n\\t *\\n\\t * Is set to `null` if there are no ranges in selection.\\n\\t *\\n\\t * @see #anchor\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget focus() {\\n\\t\\tif ( this._ranges.length > 0 ) {\\n\\t\\t\\tconst range = this._ranges[ this._ranges.length - 1 ];\\n\\n\\t\\t\\treturn this._lastRangeBackward ? range.start : range.end;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\\n\\t * collapsed.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isCollapsed() {\\n\\t\\tconst length = this._ranges.length;\\n\\n\\t\\tif ( length === 1 ) {\\n\\t\\t\\treturn this._ranges[ 0 ].isCollapsed;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns number of ranges in selection.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget rangeCount() {\\n\\t\\treturn this._ranges.length;\\n\\t}\\n\\n\\t/**\\n\\t * Specifies whether the {@link #focus}\\n\\t * precedes {@link #anchor}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isBackward() {\\n\\t\\treturn !this.isCollapsed && this._lastRangeBackward;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether this selection is equal to given selection. Selections are equal if they have same directions,\\n\\t * same number of ranges and all ranges from one selection equal to a range from other selection.\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection} otherSelection Selection to compare with.\\n\\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\\n\\t */\\n\\tisEqual( otherSelection ) {\\n\\t\\tif ( this.rangeCount != otherSelection.rangeCount ) {\\n\\t\\t\\treturn false;\\n\\t\\t} else if ( this.rangeCount === 0 ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tfor ( const thisRange of this._ranges ) {\\n\\t\\t\\tlet found = false;\\n\\n\\t\\t\\tfor ( const otherRange of otherSelection._ranges ) {\\n\\t\\t\\t\\tif ( thisRange.isEqual( otherRange ) ) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( !found ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterable that iterates over copies of selection ranges.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/range~Range>}\\n\\t */\\n\\t* getRanges() {\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tyield Range.createFromRange( range );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of the first range in the selection.\\n\\t * First range is the one which {@link module:engine/model/range~Range#start start} position\\n\\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\\n\\t * (not to confuse with the first range added to the selection).\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range|null}\\n\\t */\\n\\tgetFirstRange() {\\n\\t\\tlet first = null;\\n\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tif ( !first || range.start.isBefore( first.start ) ) {\\n\\t\\t\\t\\tfirst = range;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn first ? Range.createFromRange( first ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of the last range in the selection.\\n\\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\\n\\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\\n\\t * recently added to the selection).\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range|null}\\n\\t */\\n\\tgetLastRange() {\\n\\t\\tlet last = null;\\n\\n\\t\\tfor ( const range of this._ranges ) {\\n\\t\\t\\tif ( !last || range.end.isAfter( last.end ) ) {\\n\\t\\t\\t\\tlast = range;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn last ? Range.createFromRange( last ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the first position in the selection.\\n\\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\\n\\t * any other position in the selection.\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position|null}\\n\\t */\\n\\tgetFirstPosition() {\\n\\t\\tconst first = this.getFirstRange();\\n\\n\\t\\treturn first ? Position.createFromPosition( first.start ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the last position in the selection.\\n\\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\\n\\t * any other position in the selection.\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position|null}\\n\\t */\\n\\tgetLastPosition() {\\n\\t\\tconst lastRange = this.getLastRange();\\n\\n\\t\\treturn lastRange ? Position.createFromPosition( lastRange.end ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Sets this selection's ranges and direction to the specified location based on the given\\n\\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\\n\\t *\\n\\t * \\t\\t// Removes all selection's ranges.\\n\\t *\\t\\tselection.setTo( null );\\n\\t *\\n\\t *\\t\\t// Sets selection to the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\tselection.setTo( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to given ranges.\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\tselection.setTo( ranges );\\n\\t *\\n\\t *\\t\\t// Sets selection to other selection.\\n\\t *\\t\\t// Note: It doesn't copies selection attributes.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\tselection.setTo( otherSelection );\\n\\t *\\n\\t * \\t\\t// Sets selection to the given document selection.\\n\\t *\\t\\t// Note: It doesn't copies selection attributes.\\n\\t *\\t\\tconst documentSelection = new DocumentSelection( doc );\\n\\t *\\t\\tselection.setTo( documentSelection );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\tselection.setTo( position );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the position of the given node and an offset.\\n\\t *\\t\\tselection.setTo( paragraph, offset );\\n\\t *\\n\\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\\n \\t * that element and ends after the last child of that element.\\n\\t *\\n\\t *\\t\\tselection.setTo( paragraph, 'in' );\\n\\t *\\n\\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\\n\\t *\\n\\t *\\t\\tselection.setTo( paragraph, 'on' );\\n\\t *\\n\\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\\n\\t *\\n\\t * \\t\\t// Sets backward selection.\\n\\t *\\t\\tconst selection = new Selection( range, { backward: true } );\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\\n\\t * module:engine/model/position~Position|module:engine/model/node~Node|\\n\\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t */\\n\\tsetTo( selectable, placeOrOffset, options ) {\\n\\t\\tif ( selectable === null ) {\\n\\t\\t\\tthis._setRanges( [] );\\n\\t\\t} else if ( selectable instanceof Selection ) {\\n\\t\\t\\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\\n\\t\\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\\n\\t\\t\\t// We assume that the selectable is a DocumentSelection.\\n\\t\\t\\t// It can't be imported here, because it would lead to circular imports.\\n\\t\\t\\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\\n\\t\\t} else if ( selectable instanceof Range ) {\\n\\t\\t\\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\\n\\t\\t} else if ( selectable instanceof Position ) {\\n\\t\\t\\tthis._setRanges( [ new Range( selectable ) ] );\\n\\t\\t} else if ( selectable instanceof Node ) {\\n\\t\\t\\tconst backward = !!options && !!options.backward;\\n\\t\\t\\tlet range;\\n\\n\\t\\t\\tif ( placeOrOffset == 'in' ) {\\n\\t\\t\\t\\trange = Range.createIn( selectable );\\n\\t\\t\\t} else if ( placeOrOffset == 'on' ) {\\n\\t\\t\\t\\trange = Range.createOn( selectable );\\n\\t\\t\\t} else if ( placeOrOffset !== undefined ) {\\n\\t\\t\\t\\trange = Range.createCollapsedAt( selectable, placeOrOffset );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * selection.setTo requires the second parameter when the first parameter is a node.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error model-selection-setTo-required-second-parameter\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'model-selection-setTo-required-second-parameter: ' +\\n\\t\\t\\t\\t\\t'selection.setTo requires the second parameter when the first parameter is a node.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._setRanges( [ range ], backward );\\n\\t\\t} else if ( isIterable( selectable ) ) {\\n\\t\\t\\t// We assume that the selectable is an iterable of ranges.\\n\\t\\t\\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\\n\\t\\t} else {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot set selection to given place.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-selection-setTo-not-selectable\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-selection-setTo-not-selectable: Cannot set selection to given place.' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\\n\\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\\n\\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\\n\\t *\\n\\t * @protected\\n\\t * @fires change:range\\n\\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\\n\\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\\n\\t * or backward - from end to start (`true`).\\n\\t */\\n\\t_setRanges( newRanges, isLastBackward = false ) {\\n\\t\\tnewRanges = Array.from( newRanges );\\n\\n\\t\\t// Check whether there is any range in new ranges set that is different than all already added ranges.\\n\\t\\tconst anyNewRange = newRanges.some( newRange => {\\n\\t\\t\\tif ( !( newRange instanceof Range ) ) {\\n\\t\\t\\t\\tthrow new CKEditorError( 'model-selection-added-not-range: Trying to add an object that is not an instance of Range.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this._ranges.every( oldRange => {\\n\\t\\t\\t\\treturn !oldRange.isEqual( newRange );\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\n\\t\\t// Don't do anything if nothing changed.\\n\\t\\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis._removeAllRanges();\\n\\n\\t\\tfor ( const range of newRanges ) {\\n\\t\\t\\tthis._pushRange( range );\\n\\t\\t}\\n\\n\\t\\tthis._lastRangeBackward = !!isLastBackward;\\n\\n\\t\\tthis.fire( 'change:range', { directChange: true } );\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\\n\\t *\\n\\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\\n\\t *\\n\\t * @fires change:range\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tsetFocus( itemOrPosition, offset ) {\\n\\t\\tif ( this.anchor === null ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot set selection focus if there are no ranges in selection.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-selection-setFocus-no-ranges\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst newFocus = Position.createAt( itemOrPosition, offset );\\n\\n\\t\\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst anchor = this.anchor;\\n\\n\\t\\tif ( this._ranges.length ) {\\n\\t\\t\\tthis._popRange();\\n\\t\\t}\\n\\n\\t\\tif ( newFocus.compareWith( anchor ) == 'before' ) {\\n\\t\\t\\tthis._pushRange( new Range( newFocus, anchor ) );\\n\\t\\t\\tthis._lastRangeBackward = true;\\n\\t\\t} else {\\n\\t\\t\\tthis._pushRange( new Range( anchor, newFocus ) );\\n\\t\\t\\tthis._lastRangeBackward = false;\\n\\t\\t}\\n\\n\\t\\tthis.fire( 'change:range', { directChange: true } );\\n\\t}\\n\\n\\t/**\\n\\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\\n\\t *\\n\\t * @param {String} key Key of attribute to look for.\\n\\t * @returns {*} Attribute value or `undefined`.\\n\\t */\\n\\tgetAttribute( key ) {\\n\\t\\treturn this._attrs.get( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterable that iterates over this selection's attributes.\\n\\t *\\n\\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\\n\\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\tgetAttributes() {\\n\\t\\treturn this._attrs.entries();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterable that iterates over this selection's attribute keys.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetAttributeKeys() {\\n\\t\\treturn this._attrs.keys();\\n\\t}\\n\\n\\t/**\\n\\t * Checks if the selection has an attribute for given key.\\n\\t *\\n\\t * @param {String} key Key of attribute to check.\\n\\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\\n\\t */\\n\\thasAttribute( key ) {\\n\\t\\treturn this._attrs.has( key );\\n\\t}\\n\\n\\t/**\\n\\t * Removes an attribute with given key from the selection.\\n\\t *\\n\\t * If given attribute was set on the selection, fires the {@link #event:change} event with\\n\\t * removed attribute key.\\n\\t *\\n\\t * @fires change:attribute\\n\\t * @param {String} key Key of attribute to remove.\\n\\t */\\n\\tremoveAttribute( key ) {\\n\\t\\tif ( this.hasAttribute( key ) ) {\\n\\t\\t\\tthis._attrs.delete( key );\\n\\n\\t\\t\\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\\n\\t *\\n\\t * If the attribute value has changed, fires the {@link #event:change} event with\\n\\t * the attribute key.\\n\\t *\\n\\t * @fires change:attribute\\n\\t * @param {String} key Key of attribute to set.\\n\\t * @param {*} value Attribute value.\\n\\t */\\n\\tsetAttribute( key, value ) {\\n\\t\\tif ( this.getAttribute( key ) !== value ) {\\n\\t\\t\\tthis._attrs.set( key, value );\\n\\n\\t\\t\\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\\n\\t * one range in the selection, and that range contains exactly one element.\\n\\t * Returns `null` if there is no selected element.\\n\\t *\\n\\t * @returns {module:engine/model/element~Element|null}\\n\\t */\\n\\tgetSelectedElement() {\\n\\t\\tif ( this.rangeCount !== 1 ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst range = this.getFirstRange();\\n\\t\\tconst nodeAfterStart = range.start.nodeAfter;\\n\\t\\tconst nodeBeforeEnd = range.end.nodeBefore;\\n\\n\\t\\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\\n\\t}\\n\\n\\t/**\\n\\t * Gets elements of type \\\"block\\\" touched by the selection.\\n\\t *\\n\\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\\n\\t *\\n\\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\\n\\t *\\n\\t * In this case the function will return exactly all 3 paragraphs:\\n\\t *\\n\\t *\\t\\t<paragraph>[a</paragraph>\\n\\t *\\t\\t<quote>\\n\\t *\\t\\t\\t<paragraph>b</paragraph>\\n\\t *\\t\\t</quote>\\n\\t *\\t\\t<paragraph>c]d</paragraph>\\n\\t *\\n\\t * In this case the paragraph will also be returned, despite the collapsed selection:\\n\\t *\\n\\t *\\t\\t<paragraph>[]a</paragraph>\\n\\t *\\n\\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\\n\\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\\n\\t *\\n\\t *\\t\\t<paragraph>[a</paragraph>\\n\\t *\\t\\t<paragraph>b</paragraph>\\n\\t *\\t\\t<paragraph>]c</paragraph> // this block will not be returned\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/element~Element>}\\n\\t */\\n\\t* getSelectedBlocks() {\\n\\t\\tconst visited = new WeakSet();\\n\\n\\t\\tfor ( const range of this.getRanges() ) {\\n\\t\\t\\tconst startBlock = getParentBlock( range.start, visited );\\n\\n\\t\\t\\tif ( startBlock ) {\\n\\t\\t\\t\\tyield startBlock;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( const value of range.getWalker() ) {\\n\\t\\t\\t\\tif ( value.type == 'elementEnd' && isUnvisitedBlockContainer( value.item, visited ) ) {\\n\\t\\t\\t\\t\\tyield value.item;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst endBlock = getParentBlock( range.end, visited );\\n\\n\\t\\t\\t// #984. Don't return the end block if the range ends right at its beginning.\\n\\t\\t\\tif ( endBlock && !range.end.isTouching( Position.createAt( endBlock ) ) ) {\\n\\t\\t\\t\\tyield endBlock;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\\n\\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\\n\\t * touching the element's end.\\n\\t *\\n\\t * By default, this method will check whether the entire content of the selection's current root is selected.\\n\\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\\n\\t * @returns {Boolean}\\n\\t */\\n\\tcontainsEntireContent( element = this.anchor.root ) {\\n\\t\\tconst limitStartPosition = Position.createAt( element );\\n\\t\\tconst limitEndPosition = Position.createAt( element, 'end' );\\n\\n\\t\\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\\n\\t\\t\\tlimitEndPosition.isTouching( this.getLastPosition() );\\n\\t}\\n\\n\\t/**\\n\\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\\n\\t * if given range is intersecting with any range that is already stored in this selection.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/range~Range} range Range to add.\\n\\t */\\n\\t_pushRange( range ) {\\n\\t\\tthis._checkRange( range );\\n\\t\\tthis._ranges.push( Range.createFromRange( range ) );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/range~Range} range Range to check.\\n\\t */\\n\\t_checkRange( range ) {\\n\\t\\tfor ( let i = 0; i < this._ranges.length; i++ ) {\\n\\t\\t\\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Trying to add a range that intersects with another range from selection.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error model-selection-range-intersects\\n\\t\\t\\t\\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\\n\\t\\t\\t\\t * @param {module:engine/model/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'model-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\\n\\t\\t\\t\\t\\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\\n\\t * ensure proper ranges removal.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_removeAllRanges() {\\n\\t\\twhile ( this._ranges.length > 0 ) {\\n\\t\\t\\tthis._popRange();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes most recently added range from the selection.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_popRange() {\\n\\t\\tthis._ranges.pop();\\n\\t}\\n\\n\\t/**\\n\\t * @event change\\n\\t */\\n\\n\\t/**\\n\\t * Fired whenever selection ranges are changed.\\n\\t *\\n\\t * @event change:range\\n\\t * @param {Boolean} directChange Specifies whether the range change was caused by direct usage of `Selection` API (`true`)\\n\\t * or by changes done to {@link module:engine/model/document~Document model document}\\n\\t * using {@link module:engine/model/batch~Batch Batch} API (`false`).\\n\\t */\\n\\n\\t/**\\n\\t * Fired whenever selection attributes are changed.\\n\\t *\\n\\t * @event change:attribute\\n\\t * @param {Boolean} directChange Specifies whether the attributes changed by direct usage of the Selection API (`true`)\\n\\t * or by changes done to the {@link module:engine/model/document~Document model document}\\n\\t * using the {@link module:engine/model/batch~Batch Batch} API (`false`).\\n\\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\\n\\t */\\n}\\n\\nmix( Selection, EmitterMixin );\\n\\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\\n// Marks it as already visited.\\nfunction isUnvisitedBlockContainer( element, visited ) {\\n\\tif ( visited.has( element ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tvisited.add( element );\\n\\n\\treturn element.document.model.schema.isBlock( element ) && element.parent;\\n}\\n\\n// Finds the lowest element in position's ancestors which is a block.\\n// Marks all ancestors as already visited to not include any of them later on.\\nfunction getParentBlock( position, visited ) {\\n\\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\\n\\tconst block = ancestors.find( element => isUnvisitedBlockContainer( element, visited ) );\\n\\n\\t// Mark all ancestors of this position's parent, because find() might've stopped early and\\n\\t// the found block may be a child of another block.\\n\\tancestors.forEach( element => visited.add( element ) );\\n\\n\\treturn block;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/liverange\\n */\\n\\nimport Range from './range';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\\n * that updates itself as {@link module:engine/model/document~Document document}\\n * is changed through operations. It may be used as a bookmark.\\n *\\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\\n */\\nexport default class LiveRange extends Range {\\n\\t/**\\n\\t * Creates a live range.\\n\\t *\\n\\t * @see module:engine/model/range~Range\\n\\t */\\n\\tconstructor( start, end ) {\\n\\t\\tsuper( start, end );\\n\\n\\t\\tbindWithDocument.call( this );\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\\n\\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\\n\\t * referring to it).\\n\\t */\\n\\tdetach() {\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * @see module:engine/model/range~Range.createIn\\n\\t * @static\\n\\t * @method module:engine/model/liverange~LiveRange.createIn\\n\\t * @param {module:engine/model/element~Element} element\\n\\t * @returns {module:engine/model/liverange~LiveRange}\\n\\t */\\n\\n\\t/**\\n\\t * @see module:engine/model/range~Range.createFromPositionAndShift\\n\\t * @static\\n\\t * @method module:engine/model/liverange~LiveRange.createFromPositionAndShift\\n\\t * @param {module:engine/model/position~Position} position\\n\\t * @param {Number} shift\\n\\t * @returns {module:engine/model/liverange~LiveRange}\\n\\t */\\n\\n\\t/**\\n\\t * @see module:engine/model/range~Range.createFromParentsAndOffsets\\n\\t * @static\\n\\t * @method module:engine/model/liverange~LiveRange.createFromParentsAndOffsets\\n\\t * @param {module:engine/model/element~Element} startElement\\n\\t * @param {Number} startOffset\\n\\t * @param {module:engine/model/element~Element} endElement\\n\\t * @param {Number} endOffset\\n\\t * @returns {module:engine/model/liverange~LiveRange}\\n\\t */\\n\\n\\t/**\\n\\t * @see module:engine/model/range~Range.createFromRange\\n\\t * @static\\n\\t * @method module:engine/model/liverange~LiveRange.createFromRange\\n\\t * @param {module:engine/model/range~Range} range\\n\\t * @returns {module:engine/model/liverange~LiveRange}\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\\n\\t * {@link module:engine/model/document~Document document}.\\n\\t *\\n\\t * @event change:range\\n\\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\\n\\t * range before it got changed.\\n\\t * @param {Object} data Object with additional information about the change. Those parameters are passed from\\n\\t * {@link module:engine/model/document~Document#event:change document change event}.\\n\\t * @param {String} data.type Change type.\\n\\t * @param {module:engine/model/batch~Batch} data.batch Batch which changed the live range.\\n\\t * @param {module:engine/model/range~Range} data.range Range containing the result of applied change.\\n\\t * @param {module:engine/model/position~Position} data.sourcePosition Source position for move, remove and reinsert change types.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\\n\\t * but the change took place inside the range, effectively changing its content.\\n\\t *\\n\\t * @event change:content\\n\\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\\n\\t * change range.\\n\\t * @param {Object} data Object with additional information about the change. Those parameters are passed from\\n\\t * {@link module:engine/model/document~Document#event:change document change event}.\\n\\t * @param {String} data.type Change type.\\n\\t * @param {module:engine/model/batch~Batch} data.batch Batch which changed the live range.\\n\\t * @param {module:engine/model/range~Range} data.range Range containing the result of applied change.\\n\\t * @param {module:engine/model/position~Position} data.sourcePosition Source position for move, remove and reinsert change types.\\n\\t */\\n}\\n\\n/**\\n * Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\\n * that owns this range's {@link module:engine/model/range~Range#root root}.\\n *\\n * @ignore\\n * @private\\n * @method module:engine/model/liverange~LiveRange#bindWithDocument\\n */\\nfunction bindWithDocument() {\\n\\t// Operation types that a range can be transformed by.\\n\\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\\n\\n\\tthis.listenTo(\\n\\t\\tthis.root.document.model,\\n\\t\\t'applyOperation',\\n\\t\\t( event, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tif ( !operation.isDocumentOperation ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( supportedTypes.has( operation.type ) ) {\\n\\t\\t\\t\\ttransform.call( this, operation );\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{ priority: 'low' }\\n\\t);\\n}\\n\\n/**\\n * Updates this range accordingly to the updates applied to the model. Bases on change events.\\n *\\n * @ignore\\n * @private\\n * @method transform\\n * @param {module:engine/model/operation/operation~Operation} operation Executed operation.\\n */\\nfunction transform( operation ) {\\n\\tconst changeType = operation.type;\\n\\tconst batch = operation.delta.batch;\\n\\n\\tlet targetRange;\\n\\tlet sourcePosition;\\n\\n\\tif ( changeType == 'insert' ) {\\n\\t\\ttargetRange = Range.createFromPositionAndShift( operation.position, operation.nodes.maxOffset );\\n\\t} else {\\n\\t\\ttargetRange = Range.createFromPositionAndShift( operation.getMovedRangeStart(), operation.howMany );\\n\\t\\tsourcePosition = operation.sourcePosition;\\n\\t}\\n\\n\\tconst howMany = targetRange.end.offset - targetRange.start.offset;\\n\\tlet targetPosition = targetRange.start;\\n\\n\\tif ( changeType == 'move' || changeType == 'remove' || changeType == 'reinsert' ) {\\n\\t\\t// Range._getTransformedByDocumentChange is expecting `targetPosition` to be \\\"before\\\" move\\n\\t\\t// (before transformation). `targetRange.start` is already after the move happened.\\n\\t\\t// We have to revert `targetPosition` to the state before the move.\\n\\t\\ttargetPosition = targetPosition._getTransformedByInsertion( sourcePosition, howMany );\\n\\t}\\n\\n\\tconst result = this._getTransformedByDocumentChange( changeType, operation.delta.type, targetPosition, howMany, sourcePosition );\\n\\n\\t// Decide whether moved part should be included in the range.\\n\\t//\\n\\t// First, this concerns only `move` change, because insert change includes inserted part always (changeType == 'move').\\n\\t// Second, this is a case only if moved range was intersecting with this range and was inserted into this range (result.length == 3).\\n\\tif ( ( changeType == 'move' || changeType == 'remove' || changeType == 'reinsert' ) && result.length == 3 ) {\\n\\t\\t// `result[ 2 ]` is a \\\"common part\\\" of this range and moved range. We substitute that common part with the whole\\n\\t\\t// `targetRange` because we want to include whole `targetRange` in this range.\\n\\t\\tresult[ 2 ] = targetRange;\\n\\t}\\n\\n\\tconst updated = Range.createFromRanges( result );\\n\\n\\tconst boundariesChanged = !updated.isEqual( this );\\n\\n\\tconst rangeExpanded = this.containsPosition( targetPosition );\\n\\tconst rangeShrunk = sourcePosition && ( this.containsPosition( sourcePosition ) || this.start.isEqual( sourcePosition ) );\\n\\tconst contentChanged = rangeExpanded || rangeShrunk;\\n\\n\\tif ( boundariesChanged ) {\\n\\t\\t// If range boundaries have changed, fire `change:range` event.\\n\\t\\tconst oldRange = Range.createFromRange( this );\\n\\n\\t\\tthis.start = updated.start;\\n\\t\\tthis.end = updated.end;\\n\\n\\t\\tthis.fire( 'change:range', oldRange, {\\n\\t\\t\\ttype: changeType,\\n\\t\\t\\tbatch,\\n\\t\\t\\trange: targetRange,\\n\\t\\t\\tsourcePosition\\n\\t\\t} );\\n\\t} else if ( contentChanged ) {\\n\\t\\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\\n\\t\\tthis.fire( 'change:content', Range.createFromRange( this ), {\\n\\t\\t\\ttype: changeType,\\n\\t\\t\\tbatch,\\n\\t\\t\\trange: targetRange,\\n\\t\\t\\tsourcePosition\\n\\t\\t} );\\n\\t}\\n}\\n\\nmix( LiveRange, EmitterMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/documentselection\\n */\\n\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\n\\nimport Selection from './selection';\\nimport Position from './position';\\nimport LiveRange from './liverange';\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\nconst storePrefix = 'selection:';\\n\\n/**\\n * `DocumentSelection` is a special selection which is used as the\\n * {@link module:engine/model/document~Document#selection document's selection}.\\n * There can be only one instance of `DocumentSelection` per document.\\n *\\n * All selection modifiers should be used from the {@link module:engine/model/writer~Writer} instance\\n * inside the {@link module:engine/model/model~Model#change} block, as it provides a secure way to modify model.\\n *\\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\\n *\\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \\\"default range\\\"\\n * present in the selection,\\n * * ranges added to this selection updates automatically when the document changes,\\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\\n *\\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\\n * and is updated when {@link module:engine/model/document~Document document}\\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\\n * If you need to represent a selection in document fragment,\\n * use {@link module:engine/model/selection~Selection Selection class} instead.\\n */\\nexport default class DocumentSelection {\\n\\t/**\\n\\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\\n\\t *\\n\\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\\n\\t */\\n\\tconstructor( doc ) {\\n\\t\\t/**\\n\\t\\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t */\\n\\t\\tthis._selection = new LiveSelection( doc );\\n\\n\\t\\tthis._selection.delegate( 'change:range' ).to( this );\\n\\t\\tthis._selection.delegate( 'change:attribute' ).to( this );\\n\\t}\\n\\n\\t/**\\n\\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\\n\\t * collapsed.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isCollapsed() {\\n\\t\\treturn this._selection.isCollapsed;\\n\\t}\\n\\n\\t/**\\n\\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\\n\\t * Together with {@link #focus} they define the direction of selection, which is important\\n\\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\\n\\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\\n\\t *\\n\\t * Is set to `null` if there are no ranges in selection.\\n\\t *\\n\\t * @see #focus\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget anchor() {\\n\\t\\treturn this._selection.anchor;\\n\\t}\\n\\n\\t/**\\n\\t * Selection focus. Focus is a position where the selection ends.\\n\\t *\\n\\t * Is set to `null` if there are no ranges in selection.\\n\\t *\\n\\t * @see #anchor\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget focus() {\\n\\t\\treturn this._selection.focus;\\n\\t}\\n\\n\\t/**\\n\\t * Returns number of ranges in selection.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget rangeCount() {\\n\\t\\treturn this._selection.rangeCount;\\n\\t}\\n\\n\\t/**\\n\\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\\n\\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget hasOwnRange() {\\n\\t\\treturn this._selection.hasOwnRange;\\n\\t}\\n\\n\\t/**\\n\\t * Specifies whether the {@link #focus}\\n\\t * precedes {@link #anchor}.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isBackward() {\\n\\t\\treturn this._selection.isBackward;\\n\\t}\\n\\n\\t/**\\n\\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\\n\\t *\\n\\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\\n\\t *\\n\\t * @readonly\\n\\t * @return {Boolean}\\n\\t */\\n\\tget isGravityOverridden() {\\n\\t\\treturn this._selection.isGravityOverridden;\\n\\t}\\n\\n\\t/**\\n\\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\tget _ranges() {\\n\\t\\treturn this._selection._ranges;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterable that iterates over copies of selection ranges.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/range~Range>}\\n\\t */\\n\\tgetRanges() {\\n\\t\\treturn this._selection.getRanges();\\n\\t}\\n\\n\\t/**\\n\\t * Returns the first position in the selection.\\n\\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\\n\\t * any other position in the selection.\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position|null}\\n\\t */\\n\\tgetFirstPosition() {\\n\\t\\treturn this._selection.getFirstPosition();\\n\\t}\\n\\n\\t/**\\n\\t * Returns the last position in the selection.\\n\\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\\n\\t * any other position in the selection.\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position|null}\\n\\t */\\n\\tgetLastPosition() {\\n\\t\\treturn this._selection.getLastPosition();\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of the first range in the selection.\\n\\t * First range is the one which {@link module:engine/model/range~Range#start start} position\\n\\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\\n\\t * (not to confuse with the first range added to the selection).\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range|null}\\n\\t */\\n\\tgetFirstRange() {\\n\\t\\treturn this._selection.getFirstRange();\\n\\t}\\n\\n\\t/**\\n\\t * Returns a copy of the last range in the selection.\\n\\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\\n\\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\\n\\t * recently added to the selection).\\n\\t *\\n\\t * Returns `null` if there are no ranges in selection.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range|null}\\n\\t */\\n\\tgetLastRange() {\\n\\t\\treturn this._selection.getLastRange();\\n\\t}\\n\\n\\t/**\\n\\t * Gets elements of type \\\"block\\\" touched by the selection.\\n\\t *\\n\\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\\n\\t *\\n\\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\\n\\t *\\n\\t * In this case the function will return exactly all 3 paragraphs:\\n\\t *\\n\\t *\\t\\t<paragraph>[a</paragraph>\\n\\t *\\t\\t<quote>\\n\\t *\\t\\t\\t<paragraph>b</paragraph>\\n\\t *\\t\\t</quote>\\n\\t *\\t\\t<paragraph>c]d</paragraph>\\n\\t *\\n\\t * In this case the paragraph will also be returned, despite the collapsed selection:\\n\\t *\\n\\t *\\t\\t<paragraph>[]a</paragraph>\\n\\t *\\n\\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\\n\\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\\n\\t *\\n\\t *\\t\\t<paragraph>[a</paragraph>\\n\\t *\\t\\t<paragraph>b</paragraph>\\n\\t *\\t\\t<paragraph>]c</paragraph> // this block will not be returned\\n\\t *\\n\\t * @returns {Iterator.<module:engine/model/element~Element>}\\n\\t */\\n\\tgetSelectedBlocks() {\\n\\t\\treturn this._selection.getSelectedBlocks();\\n\\t}\\n\\n\\t/**\\n\\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\\n\\t * one range in the selection, and that range contains exactly one element.\\n\\t * Returns `null` if there is no selected element.\\n\\t *\\n\\t * @returns {module:engine/model/element~Element|null}\\n\\t */\\n\\tgetSelectedElement() {\\n\\t\\treturn this._selection.getSelectedElement();\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\\n\\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\\n\\t * touching the element's end.\\n\\t *\\n\\t * By default, this method will check whether the entire content of the selection's current root is selected.\\n\\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\\n\\t * @returns {Boolean}\\n\\t */\\n\\tcontainsEntireContent( element ) {\\n\\t\\treturn this._selection.containsEntireContent( element );\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds all events previously bound by document selection.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis._selection.destroy();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterable that iterates over this selection's attribute keys.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\tgetAttributeKeys() {\\n\\t\\treturn this._selection.getAttributeKeys();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterable that iterates over this selection's attributes.\\n\\t *\\n\\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\\n\\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\\n\\t *\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\tgetAttributes() {\\n\\t\\treturn this._selection.getAttributes();\\n\\t}\\n\\n\\t/**\\n\\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\\n\\t *\\n\\t * @param {String} key Key of attribute to look for.\\n\\t * @returns {*} Attribute value or `undefined`.\\n\\t */\\n\\tgetAttribute( key ) {\\n\\t\\treturn this._selection.getAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if the selection has an attribute for given key.\\n\\t *\\n\\t * @param {String} key Key of attribute to check.\\n\\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\\n\\t */\\n\\thasAttribute( key ) {\\n\\t\\treturn this._selection.hasAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\\n\\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\\n\\t *\\n\\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#setSelectionFocus\\n\\t * @protected\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\t_setFocus( itemOrPosition, offset ) {\\n\\t\\tthis._selection.setFocus( itemOrPosition, offset );\\n\\t}\\n\\n\\t/**\\n\\t * Sets this selection's ranges and direction to the specified location based on the given\\n\\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/node~Node node}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\\n\\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#setSelection\\n\\t * @protected\\n\\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\\n\\t * module:engine/model/position~Position|module:engine/model/node~Node|\\n\\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t */\\n\\t_setTo( selectable, placeOrOffset, options ) {\\n\\t\\tthis._selection.setTo( selectable, placeOrOffset, options );\\n\\t}\\n\\n\\t/**\\n\\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\\n\\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#setSelectionAttribute\\n\\t * @protected\\n\\t * @param {String} key Key of the attribute to set.\\n\\t * @param {*} value Attribute value.\\n\\t */\\n\\t_setAttribute( key, value ) {\\n\\t\\tthis._selection.setAttribute( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * Removes an attribute with given key from the selection.\\n\\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change}\\n\\t * event with removed attribute key.\\n\\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\\n\\t * @protected\\n\\t * @param {String} key Key of the attribute to remove.\\n\\t */\\n\\t_removeAttribute( key ) {\\n\\t\\tthis._selection.removeAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\\n\\t *\\n\\t * @protected\\n\\t * @returns {Iterable.<*>}\\n\\t */\\n\\t_getStoredAttributes() {\\n\\t\\treturn this._selection._getStoredAttributes();\\n\\t}\\n\\n\\t/**\\n\\t * Temporarily changes the gravity of the selection from left to right. The gravity defines from which direction\\n\\t * the selection inherits its attributes. If it's the default left gravity, the selection (after being moved by\\n\\t * the user) inherits attributes from its left hand side. This method allows to temporarily override this behavior\\n\\t * by forcing the gravity to the right.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\\n\\t * @protected\\n\\t * @param {Boolean} [customRestore=false] When `true` then gravity won't be restored until\\n\\t * {@link ~DocumentSelection#_restoreGravity} will be called directly. When `false` then gravity is restored\\n\\t * after selection is moved by user.\\n\\t */\\n\\t_overrideGravity( customRestore ) {\\n\\t\\tthis._selection.overrideGravity( customRestore );\\n\\t}\\n\\n\\t/**\\n\\t * Restores {@link ~DocumentSelection#_overrideGravity overridden gravity}.\\n\\t *\\n\\t * Note that gravity remains overridden as long as won't be restored the same number of times as was overridden.\\n\\t *\\n\\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\\n\\t * @protected\\n\\t */\\n\\t_restoreGravity() {\\n\\t\\tthis._selection.restoreGravity();\\n\\t}\\n\\n\\t/**\\n\\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} key Attribute key to convert.\\n\\t * @returns {String} Converted attribute key, applicable for selection store.\\n\\t */\\n\\tstatic _getStoreAttributeKey( key ) {\\n\\t\\treturn storePrefix + key;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the given attribute key is an attribute stored on an element.\\n\\t *\\n\\t * @protected\\n\\t * @param {String} key\\n\\t * @returns {Boolean}\\n\\t */\\n\\tstatic _isStoreAttributeKey( key ) {\\n\\t\\treturn key.startsWith( storePrefix );\\n\\t}\\n}\\n\\nmix( DocumentSelection, EmitterMixin );\\n\\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\\n//\\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\\n//\\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \\\"default range\\\"\\n// present in the selection,\\n// * ranges added to this selection updates automatically when the document changes,\\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\\n//\\n// @extends module:engine/model/selection~Selection\\n//\\n\\nclass LiveSelection extends Selection {\\n\\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\\n\\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\\n\\tconstructor( doc ) {\\n\\t\\tsuper();\\n\\n\\t\\t// Document which owns this selection.\\n\\t\\t//\\n\\t\\t// @protected\\n\\t\\t// @member {module:engine/model/model~Model}\\n\\t\\tthis._model = doc.model;\\n\\n\\t\\t// Document which owns this selection.\\n\\t\\t//\\n\\t\\t// @protected\\n\\t\\t// @member {module:engine/model/document~Document}\\n\\t\\tthis._document = doc;\\n\\n\\t\\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\\n\\t\\t// last time. Possible values of priority are: `'low'` and `'normal'`.\\n\\t\\t//\\n\\t\\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\\n\\t\\t// attributes API are set with `'normal'` priority.\\n\\t\\t//\\n\\t\\t// @private\\n\\t\\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\\n\\t\\tthis._attributePriority = new Map();\\n\\n\\t\\t// Contains data required to fix ranges which have been moved to the graveyard.\\n\\t\\t// @private\\n\\t\\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\\n\\t\\tthis._fixGraveyardRangesData = [];\\n\\n\\t\\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\\n\\t\\t// @private\\n\\t\\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\\n\\t\\tthis._hasChangedRange = false;\\n\\n\\t\\t// Each overriding gravity increase the counter and each restoring decrease it.\\n\\t\\t// Gravity is overridden when counter is greater than 0. This is to prevent conflicts when\\n\\t\\t// gravity is overridden by more than one feature at the same time.\\n\\t\\t// @private\\n\\t\\t// @type {Number}\\n\\t\\tthis._overriddenGravityCounter = 0;\\n\\n\\t\\t// Add events that will ensure selection correctness.\\n\\t\\tthis.on( 'change:range', () => {\\n\\t\\t\\tfor ( const range of this.getRanges() ) {\\n\\t\\t\\t\\tif ( !this._document._validateSelectionRange( range ) ) {\\n\\t\\t\\t\\t\\t/**\\n\\t\\t\\t\\t\\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\\n\\t\\t\\t\\t\\t * starts or ends at incorrect position.\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t * @error document-selection-wrong-position\\n\\t\\t\\t\\t\\t * @param {module:engine/model/range~Range} range\\n\\t\\t\\t\\t\\t */\\n\\t\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t\\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\\n\\t\\t\\t\\t\\t\\t{ range }\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\\n\\t\\t\\t// Update selection's attributes.\\n\\t\\t\\tthis._updateAttributes( false );\\n\\n\\t\\t\\t// Clear selection attributes from element if no longer empty.\\n\\t\\t\\tclearAttributesStoredInElement( this._model, batch );\\n\\t\\t} );\\n\\n\\t\\tthis.listenTo( this._model, 'applyOperation', () => {\\n\\t\\t\\twhile ( this._fixGraveyardRangesData.length ) {\\n\\t\\t\\t\\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\\n\\n\\t\\t\\t\\tthis._fixGraveyardSelection( liveRange, sourcePosition );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this._hasChangedRange ) {\\n\\t\\t\\t\\tthis._hasChangedRange = false;\\n\\n\\t\\t\\t\\tthis.fire( 'change:range', { directChange: false } );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'lowest' } );\\n\\t}\\n\\n\\tget isCollapsed() {\\n\\t\\tconst length = this._ranges.length;\\n\\n\\t\\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\\n\\t}\\n\\n\\tget anchor() {\\n\\t\\treturn super.anchor || this._document._getDefaultRange().start;\\n\\t}\\n\\n\\tget focus() {\\n\\t\\treturn super.focus || this._document._getDefaultRange().end;\\n\\t}\\n\\n\\tget rangeCount() {\\n\\t\\treturn this._ranges.length ? this._ranges.length : 1;\\n\\t}\\n\\n\\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\\n\\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\\n\\t//\\n\\t// @readonly\\n\\t// @type {Boolean}\\n\\tget hasOwnRange() {\\n\\t\\treturn this._ranges.length > 0;\\n\\t}\\n\\n\\t// When set to `true` then selection attributes on node before the caret won't be taken\\n\\t// into consideration while updating selection attributes.\\n\\t//\\n\\t// @protected\\n\\t// @type {Boolean}\\n\\tget isGravityOverridden() {\\n\\t\\treturn this._overriddenGravityCounter > 0;\\n\\t}\\n\\n\\t// Unbinds all events previously bound by live selection.\\n\\tdestroy() {\\n\\t\\tfor ( let i = 0; i < this._ranges.length; i++ ) {\\n\\t\\t\\tthis._ranges[ i ].detach();\\n\\t\\t}\\n\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t* getRanges() {\\n\\t\\tif ( this._ranges.length ) {\\n\\t\\t\\tyield* super.getRanges();\\n\\t\\t} else {\\n\\t\\t\\tyield this._document._getDefaultRange();\\n\\t\\t}\\n\\t}\\n\\n\\tgetFirstRange() {\\n\\t\\treturn super.getFirstRange() || this._document._getDefaultRange();\\n\\t}\\n\\n\\tgetLastRange() {\\n\\t\\treturn super.getLastRange() || this._document._getDefaultRange();\\n\\t}\\n\\n\\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\\n\\t\\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\\n\\t\\tthis._refreshAttributes();\\n\\t}\\n\\n\\tsetFocus( itemOrPosition, offset ) {\\n\\t\\tsuper.setFocus( itemOrPosition, offset );\\n\\t\\tthis._refreshAttributes();\\n\\t}\\n\\n\\tsetAttribute( key, value ) {\\n\\t\\tif ( this._setAttribute( key, value ) ) {\\n\\t\\t\\t// Fire event with exact data.\\n\\t\\t\\tconst attributeKeys = [ key ];\\n\\t\\t\\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\\n\\t\\t}\\n\\t}\\n\\n\\tremoveAttribute( key ) {\\n\\t\\tif ( this._removeAttribute( key ) ) {\\n\\t\\t\\t// Fire event with exact data.\\n\\t\\t\\tconst attributeKeys = [ key ];\\n\\t\\t\\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\\n\\t\\t}\\n\\t}\\n\\n\\toverrideGravity( customRestore ) {\\n\\t\\tthis._overriddenGravityCounter++;\\n\\n\\t\\tif ( this._overriddenGravityCounter == 1 ) {\\n\\t\\t\\tif ( !customRestore ) {\\n\\t\\t\\t\\tthis.on( 'change:range', ( evt, data ) => {\\n\\t\\t\\t\\t\\tif ( data.directChange ) {\\n\\t\\t\\t\\t\\t\\tthis.restoreGravity();\\n\\t\\t\\t\\t\\t\\tevt.off();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._updateAttributes();\\n\\t\\t}\\n\\t}\\n\\n\\trestoreGravity() {\\n\\t\\tthis._overriddenGravityCounter--;\\n\\n\\t\\tif ( !this.isGravityOverridden ) {\\n\\t\\t\\tthis._updateAttributes();\\n\\t\\t}\\n\\t}\\n\\n\\t// Removes all attributes from the selection and sets attributes according to the surrounding nodes.\\n\\t_refreshAttributes() {\\n\\t\\tthis._updateAttributes( true );\\n\\t}\\n\\n\\t_popRange() {\\n\\t\\tthis._ranges.pop().detach();\\n\\t}\\n\\n\\t_pushRange( range ) {\\n\\t\\tconst liveRange = this._prepareRange( range );\\n\\n\\t\\t// `undefined` is returned when given `range` is in graveyard root.\\n\\t\\tif ( liveRange ) {\\n\\t\\t\\tthis._ranges.push( liveRange );\\n\\t\\t}\\n\\t}\\n\\n\\t// Prepares given range to be added to selection. Checks if it is correct,\\n\\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\\n\\t// and sets listeners listening to the range's change event.\\n\\t//\\n\\t// @private\\n\\t// @param {module:engine/model/range~Range} range\\n\\t_prepareRange( range ) {\\n\\t\\tthis._checkRange( range );\\n\\n\\t\\tif ( range.root == this._document.graveyard ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to add a Range that is in the graveyard root. Range rejected.\\n\\t\\t\\t *\\n\\t\\t\\t * @warning model-selection-range-in-graveyard\\n\\t\\t\\t */\\n\\t\\t\\tlog.warn( 'model-selection-range-in-graveyard: Trying to add a Range that is in the graveyard root. Range rejected.' );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst liveRange = LiveRange.createFromRange( range );\\n\\n\\t\\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\\n\\t\\t\\tthis._hasChangedRange = true;\\n\\n\\t\\t\\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\\n\\t\\t\\tif ( liveRange.root == this._document.graveyard ) {\\n\\t\\t\\t\\tthis._fixGraveyardRangesData.push( {\\n\\t\\t\\t\\t\\tliveRange,\\n\\t\\t\\t\\t\\tsourcePosition: data.sourcePosition\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\treturn liveRange;\\n\\t}\\n\\n\\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\\n\\t//\\n\\t// @protected\\n\\t// @param {Boolean} clearAll\\n\\t// @fires change:attribute\\n\\t_updateAttributes( clearAll ) {\\n\\t\\tconst newAttributes = toMap( this._getSurroundingAttributes() );\\n\\t\\tconst oldAttributes = toMap( this.getAttributes() );\\n\\n\\t\\tif ( clearAll ) {\\n\\t\\t\\t// If `clearAll` remove all attributes and reset priorities.\\n\\t\\t\\tthis._attributePriority = new Map();\\n\\t\\t\\tthis._attrs = new Map();\\n\\t\\t} else {\\n\\t\\t\\t// If not, remove only attributes added with `low` priority.\\n\\t\\t\\tfor ( const [ key, priority ] of this._attributePriority ) {\\n\\t\\t\\t\\tif ( priority == 'low' ) {\\n\\t\\t\\t\\t\\tthis._attrs.delete( key );\\n\\t\\t\\t\\t\\tthis._attributePriority.delete( key );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._setAttributesTo( newAttributes );\\n\\n\\t\\t// Let's evaluate which attributes really changed.\\n\\t\\tconst changed = [];\\n\\n\\t\\t// First, loop through all attributes that are set on selection right now.\\n\\t\\t// Check which of them are different than old attributes.\\n\\t\\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\\n\\t\\t\\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\\n\\t\\t\\t\\tchanged.push( newKey );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Then, check which of old attributes got removed.\\n\\t\\tfor ( const [ oldKey ] of oldAttributes ) {\\n\\t\\t\\tif ( !this.hasAttribute( oldKey ) ) {\\n\\t\\t\\t\\tchanged.push( oldKey );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Fire event with exact data (fire only if anything changed).\\n\\t\\tif ( changed.length > 0 ) {\\n\\t\\t\\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\\n\\t\\t}\\n\\t}\\n\\n\\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\\n\\t// parameter).\\n\\t//\\n\\t// @private\\n\\t// @param {String} key Attribute key.\\n\\t// @param {*} value Attribute value.\\n\\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\\n\\t// is caused by `Batch` API.\\n\\t// @returns {Boolean} Whether value has changed.\\n\\t_setAttribute( key, value, directChange = true ) {\\n\\t\\tconst priority = directChange ? 'normal' : 'low';\\n\\n\\t\\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\\n\\t\\t\\t// Priority too low.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst oldValue = super.getAttribute( key );\\n\\n\\t\\t// Don't do anything if value has not changed.\\n\\t\\tif ( oldValue === value ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tthis._attrs.set( key, value );\\n\\n\\t\\t// Update priorities map.\\n\\t\\tthis._attributePriority.set( key, priority );\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\\n\\t// parameter).\\n\\t//\\n\\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\\n\\t// be changed according to `directChange` parameter.\\n\\t//\\n\\t// @private\\n\\t// @param {String} key Attribute key.\\n\\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\\n\\t// is caused by `Batch` API.\\n\\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\\n\\t// existing attribute had higher priority.\\n\\t_removeAttribute( key, directChange = true ) {\\n\\t\\tconst priority = directChange ? 'normal' : 'low';\\n\\n\\t\\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\\n\\t\\t\\t// Priority too low.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Update priorities map.\\n\\t\\tthis._attributePriority.set( key, priority );\\n\\n\\t\\t// Don't do anything if value has not changed.\\n\\t\\tif ( !super.hasAttribute( key ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tthis._attrs.delete( key );\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\\n\\t// `directChange` parameter).\\n\\t//\\n\\t// @private\\n\\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\\n\\t// @returns {Set.<String>} Changed attribute keys.\\n\\t_setAttributesTo( attrs ) {\\n\\t\\tconst changed = new Set();\\n\\n\\t\\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\\n\\t\\t\\t// Do not remove attribute if attribute with same key and value is about to be set.\\n\\t\\t\\tif ( attrs.get( oldKey ) === oldValue ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// All rest attributes will be removed so changed attributes won't change .\\n\\t\\t\\tthis._removeAttribute( oldKey, false );\\n\\t\\t}\\n\\n\\t\\tfor ( const [ key, value ] of attrs ) {\\n\\t\\t\\t// Attribute may not be set because of attributes or because same key/value is already added.\\n\\t\\t\\tconst gotAdded = this._setAttribute( key, value, false );\\n\\n\\t\\t\\tif ( gotAdded ) {\\n\\t\\t\\t\\tchanged.add( key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn changed;\\n\\t}\\n\\n\\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\\n\\t//\\n\\t// @protected\\n\\t// @returns {Iterable.<*>}\\n\\t* _getStoredAttributes() {\\n\\t\\tconst selectionParent = this.getFirstPosition().parent;\\n\\n\\t\\tif ( this.isCollapsed && selectionParent.isEmpty ) {\\n\\t\\t\\tfor ( const key of selectionParent.getAttributeKeys() ) {\\n\\t\\t\\t\\tif ( key.startsWith( storePrefix ) ) {\\n\\t\\t\\t\\t\\tconst realKey = key.substr( storePrefix.length );\\n\\n\\t\\t\\t\\t\\tyield [ realKey, selectionParent.getAttribute( key ) ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\\n\\t// found element. If there are no text nodes in selection's first position parent, it returns selection\\n\\t// attributes stored in that parent.\\n\\t//\\n\\t// @private\\n\\t// @returns {Iterable.<*>} Collection of attributes.\\n\\t_getSurroundingAttributes() {\\n\\t\\tconst position = this.getFirstPosition();\\n\\t\\tconst schema = this._model.schema;\\n\\n\\t\\tlet attrs = null;\\n\\n\\t\\tif ( !this.isCollapsed ) {\\n\\t\\t\\t// 1. If selection is a range...\\n\\t\\t\\tconst range = this.getFirstRange();\\n\\n\\t\\t\\t// ...look for a first character node in that range and take attributes from it.\\n\\t\\t\\tfor ( const value of range ) {\\n\\t\\t\\t\\t// If the item is an object, we don't want to get attributes from its children.\\n\\t\\t\\t\\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\\n\\t\\t\\t\\t// It can be done better by using `break;` instead of checking `attrs === null`.\\n\\t\\t\\t\\tif ( value.type == 'text' && attrs === null ) {\\n\\t\\t\\t\\t\\tattrs = value.item.getAttributes();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// 2. If the selection is a caret or the range does not contain a character node...\\n\\n\\t\\t\\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\\n\\t\\t\\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\\n\\n\\t\\t\\t// When gravity is overridden then don't take node before into consideration.\\n\\t\\t\\tif ( !this.isGravityOverridden ) {\\n\\t\\t\\t\\t// ...look at the node before caret and take attributes from it if it is a character node.\\n\\t\\t\\t\\tattrs = getAttrsIfCharacter( nodeBefore );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 3. If not, look at the node after caret...\\n\\t\\t\\tif ( !attrs ) {\\n\\t\\t\\t\\tattrs = getAttrsIfCharacter( nodeAfter );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 4. If not, try to find the first character on the left, that is in the same node.\\n\\t\\t\\t// When gravity is overridden then don't take node before into consideration.\\n\\t\\t\\tif ( !this.isGravityOverridden && !attrs ) {\\n\\t\\t\\t\\tlet node = nodeBefore;\\n\\n\\t\\t\\t\\twhile ( node && !attrs ) {\\n\\t\\t\\t\\t\\tnode = node.previousSibling;\\n\\t\\t\\t\\t\\tattrs = getAttrsIfCharacter( node );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 5. If not found, try to find the first character on the right, that is in the same node.\\n\\t\\t\\tif ( !attrs ) {\\n\\t\\t\\t\\tlet node = nodeAfter;\\n\\n\\t\\t\\t\\twhile ( node && !attrs ) {\\n\\t\\t\\t\\t\\tnode = node.nextSibling;\\n\\t\\t\\t\\t\\tattrs = getAttrsIfCharacter( node );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// 6. If not found, selection should retrieve attributes from parent.\\n\\t\\t\\tif ( !attrs ) {\\n\\t\\t\\t\\tattrs = this._getStoredAttributes();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn attrs;\\n\\t}\\n\\n\\t// Fixes a selection range after it ends up in graveyard root.\\n\\t//\\n\\t// @private\\n\\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\\n\\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\\n\\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\\n\\t\\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\\n\\t\\t// This is a good candidate for a fixed selection range.\\n\\t\\tconst positionCandidate = Position.createFromPosition( removedRangeStart );\\n\\n\\t\\t// Find a range that is a correct selection range and is closest to the start of removed range.\\n\\t\\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\\n\\n\\t\\t// Remove the old selection range before preparing and adding new selection range. This order is important,\\n\\t\\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\\n\\t\\tconst index = this._ranges.indexOf( liveRange );\\n\\t\\tthis._ranges.splice( index, 1 );\\n\\t\\tliveRange.detach();\\n\\n\\t\\t// If nearest valid selection range has been found - add it in the place of old range.\\n\\t\\tif ( selectionRange ) {\\n\\t\\t\\t// Check the range, convert it to live range, bind events, etc.\\n\\t\\t\\tconst newRange = this._prepareRange( selectionRange );\\n\\n\\t\\t\\t// Add new range in the place of old range.\\n\\t\\t\\tthis._ranges.splice( index, 0, newRange );\\n\\t\\t}\\n\\t\\t// If nearest valid selection range cannot be found - just removing the old range is fine.\\n\\t}\\n}\\n\\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\\n//\\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\\n//\\n// @param {module:engine/model/item~Item|null}  node\\n// @returns {Boolean}\\nfunction getAttrsIfCharacter( node ) {\\n\\tif ( node instanceof TextProxy || node instanceof Text ) {\\n\\t\\treturn node.getAttributes();\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n// Removes selection attributes from element which is not empty anymore.\\n//\\n// @private\\n// @param {module:engine/model/model~Model} model\\n// @param {module:engine/model/batch~Batch} batch\\nfunction clearAttributesStoredInElement( model, batch ) {\\n\\tconst differ = model.document.differ;\\n\\n\\tfor ( const entry of differ.getChanges() ) {\\n\\t\\tif ( entry.type != 'insert' ) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tconst changeParent = entry.position.parent;\\n\\t\\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\\n\\n\\t\\tif ( isNoLongerEmpty ) {\\n\\t\\t\\tmodel.enqueueChange( batch, writer => {\\n\\t\\t\\t\\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\\n\\t\\t\\t\\t\\t.filter( key => key.startsWith( storePrefix ) );\\n\\n\\t\\t\\t\\tfor ( const key of storedAttributes ) {\\n\\t\\t\\t\\t\\twriter.removeAttribute( key, changeParent );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n}\\n\",\"import baseClone from './_baseClone';\\n\\n/**\\n * This method is like `_.clone` except that it recursively clones `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.0.0\\n * @category Lang\\n * @param {*} value The value to recursively clone.\\n * @returns {*} Returns the deep cloned value.\\n * @see _.clone\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var deep = _.cloneDeep(objects);\\n * console.log(deep[0] === objects[0]);\\n * // => false\\n */\\nfunction cloneDeep(value) {\\n  return baseClone(value, true, true);\\n}\\n\\nexport default cloneDeep;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport ModelRange from '../model/range';\\nimport ModelSelection from '../model/selection';\\nimport ModelElement from '../model/element';\\n\\nimport ViewAttributeElement from '../view/attributeelement';\\nimport ViewRange from '../view/range';\\nimport DocumentSelection from '../model/documentselection';\\n\\nimport cloneDeep from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeep';\\n\\n/**\\n * Contains downcast (model to view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\\n *\\n * @module engine/conversion/downcast-converters\\n */\\n\\n/**\\n * Model element to view element conversion helper.\\n *\\n * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\\n *\\n *\\t\\tdowncastElementToElement( { model: 'paragraph', view: 'p' } );\\n *\\n *\\t\\tdowncastElementToElement( { model: 'paragraph', view: 'div', priority: 'high' } );\\n *\\n *\\t\\tdowncastElementToElement( {\\n *\\t\\t\\tmodel: 'fancyParagraph',\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'p',\\n *\\t\\t\\t\\tclass: 'fancy'\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * \\t\\tdowncastElementToElement( {\\n * \\t\\t\\tmodel: 'heading',\\n * \\t\\t\\tview: ( modelElement, viewWriter ) => viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\\n * \\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String} config.model Name of the model element to convert.\\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view View element definition or a function\\n * that takes model element and view writer as a parameters and returns a view container element.\\n * @returns {Function} Conversion helper.\\n */\\nexport function downcastElementToElement( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tconfig.view = _normalizeToElementConfig( config.view, 'container' );\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * Model attribute to view element conversion helper.\\n *\\n * This conversion results in wrapping view nodes in a view attribute element. For example, model text node with data\\n * `\\\"Foo\\\"` and `bold` attribute becomes `<strong>Foo</strong>` in the view.\\n *\\n *\\t\\tdowncastAttributeToElement( { model: 'bold', view: 'strong' } );\\n *\\n *\\t\\tdowncastAttributeToElement( { model: 'bold', view: 'b', priority: 'high' } );\\n *\\n *\\t\\tdowncastAttributeToElement( {\\n *\\t\\t\\tmodel: 'invert',\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tclass: [ 'font-light', 'bg-dark' ]\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n *\\t\\tdowncastAttributeToElement( {\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tkey: 'fontSize',\\n *\\t\\t\\t\\tvalues: [ 'big', 'small' ]\\n *\\t\\t\\t},\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tbig: {\\n *\\t\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t\\t\\t'font-size': '1.2em'\\n *\\t\\t\\t\\t\\t}\\n *\\t\\t\\t\\t},\\n *\\t\\t\\t\\tsmall: {\\n *\\t\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t\\t\\t'font-size': '0.8em'\\n *\\t\\t\\t\\t\\t}\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * \\t\\tdowncastAttributeToElement( {\\n * \\t\\t\\tmodel: 'bold',\\n * \\t\\t\\tview: ( modelAttributeValue, viewWriter ) => {\\n * \\t\\t\\t\\treturn viewWriter.createAttributeElement( 'span', { style: 'font-weight:' + modelAttributeValue } );\\n * \\t\\t\\t}\\n * \\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String|Object} config.model Key of the attribute to convert from or a `{ key, values }` object. `values` is an array\\n * of `String`s with possible values if the model attribute is enumerable.\\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view View element definition or a function\\n * that takes model attribute value and view writer as parameters and returns a view attribute element. If `config.model.values` is\\n * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function downcastAttributeToElement( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tconst modelKey = config.model.key ? config.model.key : config.model;\\n\\n\\tif ( config.model.values ) {\\n\\t\\tfor ( const modelValue of config.model.values ) {\\n\\t\\t\\tconfig.view[ modelValue ] = _normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\\n\\t\\t}\\n\\t} else {\\n\\t\\tconfig.view = _normalizeToElementConfig( config.view, 'attribute' );\\n\\t}\\n\\n\\tconst elementCreator = _getFromAttributeCreator( config );\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'attribute:' + modelKey, wrap( elementCreator ), { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * Model attribute to view attribute conversion helper.\\n *\\n * This conversion results in adding an attribute on a view node, basing on an attribute from a model node. For example,\\n * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\\n *\\n *\\t\\tdowncastAttributeToAttribute( { model: 'source', view: 'src' } );\\n *\\n *\\t\\tdowncastAttributeToAttribute( { model: 'source', view: 'href', priority: 'high' } );\\n *\\n *\\t\\tdowncastAttributeToAttribute( {\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tname: 'image',\\n *\\t\\t\\t\\tkey: 'source'\\n *\\t\\t\\t},\\n *\\t\\t\\tview: 'src'\\n *\\t\\t} );\\n *\\n *\\t\\tdowncastAttributeToAttribute( {\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tname: 'styled',\\n *\\t\\t\\t\\tvalues: [ 'dark', 'light' ]\\n *\\t\\t\\t},\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tdark: {\\n *\\t\\t\\t\\t\\tkey: 'class',\\n *\\t\\t\\t\\t\\tvalue: [ 'styled', 'styled-dark' ]\\n *\\t\\t\\t\\t},\\n *\\t\\t\\t\\tlight: {\\n *\\t\\t\\t\\t\\tkey: 'class',\\n *\\t\\t\\t\\t\\tvalue: [ 'styled', 'styled-light' ]\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n *\\t\\tdowncastAttributeToAttribute( {\\n *\\t\\t\\tmodel: 'styled',\\n *\\t\\t\\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\\n *\\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String|Object} config.model Key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\\n * the attribute key, possible values and, optionally, an element name to convert from.\\n * @param {String|Object|Function} config.view View attribute key, or a `{ key, value }` object or a function that takes\\n * model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\\n * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\\n * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\\n * `{ key, value }` objects or a functions.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function downcastAttributeToAttribute( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tconst modelKey = config.model.key ? config.model.key : config.model;\\n\\tlet eventName = 'attribute:' + modelKey;\\n\\n\\tif ( config.model.name ) {\\n\\t\\teventName += ':' + config.model.name;\\n\\t}\\n\\n\\tif ( config.model.values ) {\\n\\t\\tfor ( const modelValue of config.model.values ) {\\n\\t\\t\\tconfig.view[ modelValue ] = _normalizeToAttributeConfig( config.view[ modelValue ] );\\n\\t\\t}\\n\\t} else {\\n\\t\\tconfig.view = _normalizeToAttributeConfig( config.view );\\n\\t}\\n\\n\\tconst elementCreator = _getFromAttributeCreator( config );\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * Model marker to view element conversion helper.\\n *\\n * This conversion results in creating a view element on the boundaries of the converted marker. If converted marker\\n * is collapsed, only one element is created. For example, model marker set like this `<paragraph>F[oo b]ar</paragraph>`\\n * becomes `<p>F<span data-marker=\\\"search\\\"></span>oo b<span data-marker=\\\"search\\\"></span>ar</p>` in the view.\\n *\\n *\\t\\tdowncastMarkerToElement( { model: 'search', view: 'marker-search' } );\\n *\\n *\\t\\tdowncastMarkerToElement( { model: 'search', view: 'search-result', priority: 'high' } );\\n *\\n *\\t\\tdowncastMarkerToElement( {\\n *\\t\\t\\tmodel: 'search',\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tattribute: {\\n *\\t\\t\\t\\t\\t'data-marker': 'search'\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * \\t\\tdowncastMarkerToElement( {\\n * \\t\\t\\tmodel: 'search',\\n * \\t\\t\\tview: ( markerData, viewWriter ) => {\\n *\\t \\t\\t\\treturn viewWriter.createUIElement( 'span', { 'data-marker': 'search', 'data-start': markerData.isOpening } );\\n * \\t\\t\\t}\\n * \\t\\t} );\\n *\\n * If function is passed as `config.view` parameter, it will be used to generate both boundary elements. The function\\n * receives `data` object as parameter and should return an instance of {@link module:engine/view/uielement~UIElement view.UIElement}.\\n * The `data` and `conversionApi` objects are passed from\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\\n * `data.isOpening` parameter is passed, which is set to `true` for marker start boundary element, and `false` to\\n * marker end boundary element.\\n *\\n * This kind of conversion is useful for saving data into data base, so it should be used in data conversion pipeline.\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String} config.model Name of the model marker (or model marker group) to convert.\\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view View element definition or a function\\n * that takes model marker data as a parameter and returns view ui element.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function downcastMarkerToElement( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tconfig.view = _normalizeToElementConfig( config.view, 'ui' );\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.priority || 'normal' } );\\n\\t\\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * Model marker to highlight conversion helper.\\n *\\n * This conversion results in creating a highlight on view nodes. For this kind of conversion,\\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor} should be provided.\\n *\\n * For text nodes, a `span` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\\n * in the converted marker range. For example, model marker set like this `<paragraph>F[oo b]ar</paragraph>` becomes\\n * `<p>F<span class=\\\"comment\\\">oo b</span>ar</p>` in the view.\\n *\\n * {@link module:engine/view/containerelement~ContainerElement} may provide custom way of handling highlight. Most often,\\n * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `span`).\\n * For example, model marker set like this `[<image src=\\\"foo.jpg\\\"></image>]` becomes `<img src=\\\"foo.jpg\\\" class=\\\"comment\\\"></img>`\\n * in the view.\\n *\\n * For container elements, the conversion is two-step. While the converter processes highlight descriptor and passes it\\n * to a container element, it is the container element instance itself which applies values from highlight descriptor.\\n * So, in a sense, converter takes care of stating what should be applied on what, while element decides how to apply that.\\n *\\n *\\t\\tdowncastMarkerToHighlight( { model: 'comment', view: { class: 'comment' } } );\\n *\\n *\\t\\tdowncastMarkerToHighlight( { model: 'comment', view: { class: 'new-comment' }, priority: 'high' } );\\n *\\n * \\t\\tdowncastMarkerToHighlight( {\\n * \\t\\t\\tmodel: 'comment',\\n * \\t\\t\\tview: data => {\\n * \\t\\t\\t\\t// Assuming that marker name is in a form of comment:commentType.\\n *\\t \\t\\t\\tconst commentType = data.markerName.split( ':' )[ 1 ];\\n *\\n *\\t \\t\\t\\treturn {\\n *\\t \\t\\t\\t\\tclass: [ 'comment', 'comment-' + commentType ]\\n *\\t \\t\\t\\t};\\n * \\t\\t\\t}\\n * \\t\\t} );\\n *\\n * If function is passed as `config.view` parameter, it will be used to generate highlight descriptor. The function\\n * receives `data` object as parameter and should return a {@link module:engine/conversion/downcast-converters~HighlightDescriptor}.\\n * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String} config.model Name of the model marker (or model marker group) to convert.\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} config.view Highlight descriptor\\n * which will be used for highlighting or a function that takes model marker data as a parameter and returns a highlight descriptor.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function downcastMarkerToHighlight( config ) {\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.priority || 'normal' } );\\n\\t\\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.priority || 'normal' } );\\n\\t\\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n// Takes `config.view`, and if it is a {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\\n// to a function (because lower level converters accepts only element creator functions).\\n//\\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\\n// @returns {Function} Element creator function to use in lower level converters.\\nfunction _normalizeToElementConfig( view, viewElementType ) {\\n\\tif ( typeof view == 'function' ) {\\n\\t\\t// If `view` is already a function, don't do anything.\\n\\t\\treturn view;\\n\\t}\\n\\n\\treturn ( modelData, viewWriter ) => _createViewElementFromDefinition( view, viewWriter, viewElementType );\\n}\\n\\n// Creates view element instance from provided viewElementDefinition and class.\\n//\\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\\n// @param {module:engine/view/writer~Writer} viewWriter\\n// @param {'container'|'attribute'|'ui'} viewElementType\\n// @returns {module:engine/view/element~Element}\\nfunction _createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\\n\\tif ( typeof viewElementDefinition == 'string' ) {\\n\\t\\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\\n\\t\\tviewElementDefinition = { name: viewElementDefinition };\\n\\t}\\n\\n\\tlet element;\\n\\n\\tif ( viewElementType == 'container' ) {\\n\\t\\telement = viewWriter.createContainerElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\\n\\t} else if ( viewElementType == 'attribute' ) {\\n\\t\\telement = viewWriter.createAttributeElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\\n\\t} else {\\n\\t\\t// 'ui'.\\n\\t\\telement = viewWriter.createUIElement( viewElementDefinition.name, Object.assign( {}, viewElementDefinition.attribute ) );\\n\\t}\\n\\n\\tif ( viewElementDefinition.style ) {\\n\\t\\tconst keys = Object.keys( viewElementDefinition.style );\\n\\n\\t\\tfor ( const key of keys ) {\\n\\t\\t\\tviewWriter.setStyle( key, viewElementDefinition.style[ key ], element );\\n\\t\\t}\\n\\t}\\n\\n\\tif ( viewElementDefinition.class ) {\\n\\t\\tconst classes = viewElementDefinition.class;\\n\\n\\t\\tif ( typeof classes == 'string' ) {\\n\\t\\t\\tviewWriter.addClass( classes, element );\\n\\t\\t} else {\\n\\t\\t\\tfor ( const className of classes ) {\\n\\t\\t\\t\\tviewWriter.addClass( className, element );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn element;\\n}\\n\\nfunction _getFromAttributeCreator( config ) {\\n\\tif ( config.model.values ) {\\n\\t\\treturn ( modelAttributeValue, viewWriter ) => {\\n\\t\\t\\tconst view = config.view[ modelAttributeValue ];\\n\\n\\t\\t\\tif ( view ) {\\n\\t\\t\\t\\treturn view( modelAttributeValue, viewWriter );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn null;\\n\\t\\t};\\n\\t} else {\\n\\t\\treturn config.view;\\n\\t}\\n}\\n\\n// Takes config and adds default parameters if they don't exist and normalizes other parameters to be used in downcast converters\\n// for generating view attribute.\\n//\\n// @param {Object} view View configuration.\\nfunction _normalizeToAttributeConfig( view ) {\\n\\tif ( typeof view == 'string' ) {\\n\\t\\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\\n\\t} else if ( typeof view == 'object' ) {\\n\\t\\treturn () => view;\\n\\t} else {\\n\\t\\t// function.\\n\\t\\treturn view;\\n\\t}\\n}\\n\\n/**\\n * Function factory, creates a converter that converts node insertion changes from the model to the view.\\n * Passed function will be provided with all the parameters of the dispatcher's\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert event}.\\n * It's expected that the function returns a {@link module:engine/view/element~Element}.\\n * The result of the function will be inserted to the view.\\n *\\n * The converter automatically consumes corresponding value from consumables list, stops the event (see\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and bind model and view elements.\\n *\\n *\\t\\tdowncastDispatcher.on(\\n *\\t\\t\\t'insert:myElem',\\n *\\t\\t\\tinsertElement( ( modelItem, viewWriter ) => {\\n *\\t\\t\\t\\tconst text = viewWriter.createText( 'myText' );\\n *\\t\\t\\t\\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\\n *\\n *\\t\\t\\t\\t// Do something fancy with myElem using `modelItem` or other parameters.\\n *\\n *\\t\\t\\t\\treturn myElem;\\n *\\t\\t\\t}\\n *\\t\\t) );\\n *\\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\\n * @returns {Function} Insert element event converter.\\n */\\nexport function insertElement( elementCreator ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst viewElement = elementCreator( data.item, conversionApi.writer );\\n\\n\\t\\tif ( !viewElement ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\\n\\n\\t\\tconversionApi.mapper.bindElements( data.item, viewElement );\\n\\t\\tconversionApi.writer.insert( viewPosition, viewElement );\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a default downcast converter for text insertion changes.\\n *\\n * The converter automatically consumes corresponding value from consumables list and stops the event (see\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\\n *\\n *\\t\\tmodelDispatcher.on( 'insert:$text', insertText() );\\n *\\n * @returns {Function} Insert text event converter.\\n */\\nexport function insertText() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\\n\\t\\tconst viewText = viewWriter.createText( data.item.data );\\n\\n\\t\\tviewWriter.insert( viewPosition, viewText );\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a default downcast converter for node remove changes.\\n *\\n *\\t\\tmodelDispatcher.on( 'remove', remove() );\\n *\\n * @returns {Function} Remove event converter.\\n */\\nexport function remove() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// Find view range start position by mapping model position at which the remove happened.\\n\\t\\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\\n\\n\\t\\tconst modelEnd = data.position.getShiftedBy( data.length );\\n\\t\\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\\n\\n\\t\\tconst viewRange = new ViewRange( viewStart, viewEnd );\\n\\n\\t\\t// Trim the range to remove in case some UI elements are on the view range boundaries.\\n\\t\\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\\n\\n\\t\\t// After the range is removed, unbind all view elements from the model.\\n\\t\\t// Range inside view document fragment is used to unbind deeply.\\n\\t\\tfor ( const child of ViewRange.createIn( removed ).getItems() ) {\\n\\t\\t\\tconversionApi.mapper.unbindViewElement( child );\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts marker adding change to the view ui element.\\n * The view ui element that will be added to the view depends on passed parameter. See {@link ~insertElement}.\\n * In a case of collapsed range element will not wrap range but separate elements will be placed at the beginning\\n * and at the end of the range.\\n *\\n * **Note:** unlike {@link ~insertElement}, the converter does not bind view element to model, because this converter\\n * uses marker as \\\"model source of data\\\". This means that view ui element does not have corresponding model element.\\n *\\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator View ui element, or function returning a view element, which\\n * will be inserted.\\n * @returns {Function} Insert element event converter.\\n */\\nexport function insertUIElement( elementCreator ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\\n\\t\\t// If marker is collapsed, only \\\"opening\\\" element will be inserted.\\n\\t\\tdata.isOpening = true;\\n\\t\\tconst viewStartElement = elementCreator( data, conversionApi.writer );\\n\\n\\t\\tdata.isOpening = false;\\n\\t\\tconst viewEndElement = elementCreator( data, conversionApi.writer );\\n\\n\\t\\tif ( !viewStartElement || !viewEndElement ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst markerRange = data.markerRange;\\n\\n\\t\\t// Marker that is collapsed has consumable build differently that non-collapsed one.\\n\\t\\t// For more information see `addMarker` event description.\\n\\t\\t// If marker's range is collapsed - check if it can be consumed.\\n\\t\\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// If marker's range is not collapsed - consume all items inside.\\n\\t\\tfor ( const value of markerRange ) {\\n\\t\\t\\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst mapper = conversionApi.mapper;\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t// Add \\\"opening\\\" element.\\n\\t\\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\\n\\n\\t\\t// Add \\\"closing\\\" element only if range is not collapsed.\\n\\t\\tif ( !markerRange.isCollapsed ) {\\n\\t\\t\\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\\n\\t\\t}\\n\\n\\t\\tevt.stop();\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a default downcast converter for removing {@link module:engine/view/uielement~UIElement ui element}\\n * basing on marker remove change.\\n *\\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator View ui element, or function returning\\n * a view ui element, which will be used as a pattern when look for element to remove at the marker start position.\\n * @returns {Function} Remove ui element converter.\\n */\\nexport function removeUIElement( elementCreator ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// Create two view elements. One will be used to remove \\\"opening element\\\", the other for \\\"closing element\\\".\\n\\t\\t// If marker was collapsed, only \\\"opening\\\" element will be removed.\\n\\t\\tdata.isOpening = true;\\n\\t\\tconst viewStartElement = elementCreator( data, conversionApi.writer );\\n\\n\\t\\tdata.isOpening = false;\\n\\t\\tconst viewEndElement = elementCreator( data, conversionApi.writer );\\n\\n\\t\\tif ( !viewStartElement || !viewEndElement ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst markerRange = data.markerRange;\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t// When removing the ui elements, we map the model range to view twice, because that view range\\n\\t\\t// may change after the first clearing.\\n\\t\\tif ( !markerRange.isCollapsed ) {\\n\\t\\t\\tviewWriter.clear( conversionApi.mapper.toViewRange( markerRange ).getEnlarged(), viewEndElement );\\n\\t\\t}\\n\\n\\t\\t// Remove \\\"opening\\\" element.\\n\\t\\tviewWriter.clear( conversionApi.mapper.toViewRange( markerRange ).getEnlarged(), viewStartElement );\\n\\n\\t\\tevt.stop();\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts set/change/remove attribute changes from the model to the view.\\n *\\n * Attributes from model are converted to the view element attributes in the view. You may provide a custom function to generate\\n * a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view elements\\n * attributes on 1-to-1 basis.\\n *\\n * **Note:** Provided attribute creator should always return the same `key` for given attribute from the model.\\n *\\n * The converter automatically consumes corresponding value from consumables list and stops the event (see\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\\n *\\n *\\t\\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\\n *\\t\\t\\t// Change attribute key from `customAttr` to `class` in view.\\n *\\t\\t\\tconst key = 'class';\\n *\\t\\t\\tlet value = data.attributeNewValue;\\n *\\n *\\t\\t\\t// Force attribute value to 'empty' if the model element is empty.\\n *\\t\\t\\tif ( data.item.childCount === 0 ) {\\n *\\t\\t\\t\\tvalue = 'empty';\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\t// Return key-value pair.\\n *\\t\\t\\treturn { key, value };\\n *\\t\\t} ) );\\n *\\n * @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\\n * represents attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\\n * The function is passed model attribute value as first parameter and additional data about the change as a second parameter.\\n * @returns {Function} Set/change attribute converter.\\n */\\nexport function changeAttribute( attributeCreator ) {\\n\\tattributeCreator = attributeCreator || ( ( value, data ) => ( { value, key: data.attributeKey } ) );\\n\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t// First remove the old attribute if there was one.\\n\\t\\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\\n\\n\\t\\tif ( data.attributeOldValue !== null && oldAttribute ) {\\n\\t\\t\\tif ( oldAttribute.key == 'class' ) {\\n\\t\\t\\t\\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\\n\\n\\t\\t\\t\\tfor ( const className of classes ) {\\n\\t\\t\\t\\t\\tviewWriter.removeClass( className, viewElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( oldAttribute.key == 'style' ) {\\n\\t\\t\\t\\tconst keys = Object.keys( oldAttribute.value );\\n\\n\\t\\t\\t\\tfor ( const key of keys ) {\\n\\t\\t\\t\\t\\tviewWriter.removeStyle( key, viewElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Then, if conversion was successful, set the new attribute.\\n\\t\\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\\n\\n\\t\\tif ( data.attributeNewValue !== null && newAttribute ) {\\n\\t\\t\\tif ( newAttribute.key == 'class' ) {\\n\\t\\t\\t\\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\\n\\n\\t\\t\\t\\tfor ( const className of classes ) {\\n\\t\\t\\t\\t\\tviewWriter.addClass( className, viewElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( newAttribute.key == 'style' ) {\\n\\t\\t\\t\\tconst keys = Object.keys( newAttribute.value );\\n\\n\\t\\t\\t\\tfor ( const key of keys ) {\\n\\t\\t\\t\\t\\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts set/change/remove attribute changes from the model to the view.\\n * Also can be used to convert selection attributes. In that case, an empty attribute element will be created and the\\n * selection will be put inside it.\\n *\\n * Attributes from model are converted to a view element that will be wrapping those view nodes that are bound to\\n * model elements having given attribute. This is useful for attributes like `bold`, which may be set on text nodes in model\\n * but are represented as an element in the view:\\n *\\n *\\t\\t[paragraph]              MODEL ====> VIEW        <p>\\n *\\t\\t\\t|- a {bold: true}                             |- <b>\\n *\\t\\t\\t|- b {bold: true}                             |   |- ab\\n *\\t\\t\\t|- c                                          |- c\\n *\\n * Passed `Function` will be provided with attribute value and then all the parameters of the\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute event}.\\n * It's expected that the function returns a {@link module:engine/view/element~Element}.\\n * The result of the function will be the wrapping element.\\n * When provided `Function` does not return element, then will be no conversion.\\n *\\n * The converter automatically consumes corresponding value from consumables list, stops the event (see\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\\n *\\n *\\t\\tmodelDispatcher.on( 'attribute:bold', wrapItem( ( modelAttributeValue, viewWriter ) => {\\n *\\t\\t\\treturn viewWriter.createAttributeElement( 'strong' );\\n *\\t\\t} );\\n *\\n * @param {Function} elementCreator Function returning a view element, which will be used for wrapping.\\n * @returns {Function} Set/change attribute converter.\\n */\\nexport function wrap( elementCreator ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\\n\\t\\t// or the attribute was removed.\\n\\t\\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\\n\\n\\t\\t// Create node to wrap with.\\n\\t\\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\\n\\n\\t\\tif ( !oldViewElement && !newViewElement ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst viewSelection = viewWriter.document.selection;\\n\\n\\t\\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\\n\\t\\t\\t// Selection attribute conversion.\\n\\t\\t\\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\\n\\t\\t} else {\\n\\t\\t\\t// Node attribute conversion.\\n\\t\\t\\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\\n\\n\\t\\t\\t// First, unwrap the range from current wrapper.\\n\\t\\t\\tif ( data.attributeOldValue !== null && oldViewElement ) {\\n\\t\\t\\t\\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( data.attributeNewValue !== null && newViewElement ) {\\n\\t\\t\\t\\tviewWriter.wrap( viewRange, newViewElement );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates converter that converts text inside marker's range. Converter wraps the text with\\n * {@link module:engine/view/attributeelement~AttributeElement} created from provided descriptor.\\n * See {link module:engine/conversion/downcast-converters~createViewElementFromHighlightDescriptor}.\\n *\\n * Also can be used to convert selection that is inside a marker. In that case, an empty attribute element will be\\n * created and the selection will be put inside it.\\n *\\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\\n *\\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\\n *\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\\n * @return {Function}\\n */\\nexport function highlightText( highlightDescriptor ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( data.markerRange.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\\n\\n\\t\\tif ( !descriptor ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst viewSelection = viewWriter.document.selection;\\n\\n\\t\\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\\n\\t\\t\\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\\n\\t\\t} else {\\n\\t\\t\\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\\n\\t\\t\\tviewWriter.wrap( viewRange, viewElement );\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Converter function factory. Creates a function which applies the marker's highlight to an element inside the marker's range.\\n *\\n * The converter checks if an element has `addHighlight` function stored as\\n * {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\\n * In such case converter will consume all element's children, assuming that they were handled by element itself.\\n *\\n * When `addHighlight` custom property is not present, element is not converted in any special way.\\n * This means that converters will proceed to convert element's child nodes.\\n *\\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\\n *\\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\\n *\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\\n * @return {Function}\\n */\\nexport function highlightElement( highlightDescriptor ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( data.markerRange.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !( data.item instanceof ModelElement ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\\n\\n\\t\\tif ( !descriptor ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\\n\\n\\t\\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\\n\\t\\t\\t// Consume element itself.\\n\\t\\t\\tconversionApi.consumable.consume( data.item, evt.name );\\n\\n\\t\\t\\t// Consume all children nodes.\\n\\t\\t\\tfor ( const value of ModelRange.createIn( data.item ) ) {\\n\\t\\t\\t\\tconversionApi.consumable.consume( value.item, evt.name );\\n\\t\\t\\t}\\n\\n\\t\\t\\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts model marker remove to the view.\\n *\\n * Both text nodes and elements are handled by this converter by they are handled a bit differently.\\n *\\n * Text nodes are unwrapped using {@link module:engine/view/attributeelement~AttributeElement} created from provided\\n * highlight descriptor. See {link module:engine/conversion/downcast-converters~highlightDescriptorToAttributeElement}.\\n *\\n * For elements, the converter checks if an element has `removeHighlight` function stored as\\n * {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\\n * In such case, children of that element will not be converted.\\n *\\n * When `removeHighlight` is not present, element is not converted in any special way.\\n * Instead converter will proceed to convert element's child nodes.\\n *\\n * If the highlight descriptor will not provide `priority` property, `10` will be used.\\n *\\n * If the highlight descriptor will not provide `id` property, name of the marker will be used.\\n *\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\\n * @return {Function}\\n */\\nexport function removeHighlight( highlightDescriptor ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// This conversion makes sense only for non-collapsed range.\\n\\t\\tif ( data.markerRange.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\\n\\n\\t\\tif ( !descriptor ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewRange = conversionApi.mapper.toViewRange( data.markerRange );\\n\\n\\t\\t// Retrieve all items in the affected range. We will process them and remove highlight from them appropriately.\\n\\t\\tconst items = new Set( viewRange.getItems() );\\n\\n\\t\\t// First, iterate through all items and remove highlight from those container elements that have custom highlight handling.\\n\\t\\tfor ( const item of items ) {\\n\\t\\t\\tif ( item.is( 'containerElement' ) && item.getCustomProperty( 'removeHighlight' ) ) {\\n\\t\\t\\t\\titem.getCustomProperty( 'removeHighlight' )( item, descriptor.id, conversionApi.writer );\\n\\n\\t\\t\\t\\t// If container element had custom handling, remove all it's children from further processing.\\n\\t\\t\\t\\tfor ( const descendant of ViewRange.createIn( item ) ) {\\n\\t\\t\\t\\t\\titems.delete( descendant );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Then, iterate through all other items. Look for text nodes and unwrap them. Start from the end\\n\\t\\t// to prevent errors when view structure changes when unwrapping (and, for example, some attributes are merged).\\n\\t\\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\tfor ( const item of Array.from( items ).reverse() ) {\\n\\t\\t\\tif ( item.is( 'textProxy' ) ) {\\n\\t\\t\\t\\tviewWriter.unwrap( ViewRange.createOn( item ), viewHighlightElement );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\\nfunction _prepareDescriptor( highlightDescriptor, data, conversionApi ) {\\n\\t// If passed descriptor is a creator function, call it. If not, just use passed value.\\n\\tconst descriptor = typeof highlightDescriptor == 'function' ?\\n\\t\\thighlightDescriptor( data, conversionApi ) :\\n\\t\\thighlightDescriptor;\\n\\n\\tif ( !descriptor ) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\t// Apply default descriptor priority.\\n\\tif ( !descriptor.priority ) {\\n\\t\\tdescriptor.priority = 10;\\n\\t}\\n\\n\\t// Default descriptor id is marker name.\\n\\tif ( !descriptor.id ) {\\n\\t\\tdescriptor.id = data.markerName;\\n\\t}\\n\\n\\treturn descriptor;\\n}\\n\\n/**\\n * Creates `span` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from information\\n * provided by {@link module:engine/conversion/downcast-converters~HighlightDescriptor} object. If priority\\n * is not provided in descriptor - default priority will be used.\\n *\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\\n * @return {module:engine/conversion/downcast-converters~HighlightAttributeElement}\\n */\\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\\n\\tconst viewElement = new HighlightAttributeElement( 'span', descriptor.attributes );\\n\\n\\tif ( descriptor.class ) {\\n\\t\\tviewElement._addClass( descriptor.class );\\n\\t}\\n\\n\\tif ( descriptor.priority ) {\\n\\t\\tviewElement._priority = descriptor.priority;\\n\\t}\\n\\n\\tviewElement._setCustomProperty( 'highlightDescriptorId', descriptor.id );\\n\\n\\treturn viewElement;\\n}\\n\\n/**\\n * Special kind of {@link module:engine/view/attributeelement~AttributeElement} that is created and used in\\n * marker-to-highlight conversion.\\n *\\n * The difference between `HighlightAttributeElement` and {@link module:engine/view/attributeelement~AttributeElement}\\n * is {@link module:engine/view/attributeelement~AttributeElement#isSimilar} method.\\n *\\n * For `HighlightAttributeElement` it checks just `highlightDescriptorId` custom property, that is set during marker-to-highlight\\n * conversion basing on {@link module:engine/conversion/downcast-converters~HighlightDescriptor} object.\\n * `HighlightAttributeElement`s with same `highlightDescriptorId` property are considered similar.\\n */\\nclass HighlightAttributeElement extends ViewAttributeElement {\\n\\tisSimilar( otherElement ) {\\n\\t\\tif ( otherElement.is( 'attributeElement' ) ) {\\n\\t\\t\\treturn this.getCustomProperty( 'highlightDescriptorId' ) === otherElement.getCustomProperty( 'highlightDescriptorId' );\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/**\\n * Object describing how the marker highlight should be represented in the view.\\n *\\n * Each text node contained in a highlighted range will be wrapped in a `span` {@link module:engine/view/attributeelement~AttributeElement}\\n * with CSS class(es), attributes and priority described by this object.\\n *\\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement} can handle displaying the highlight separately\\n * by providing `addHighlight` and `removeHighlight` custom properties. In this case:\\n *\\n *  * `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\\n *  the element,\\n *  * descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight of given\\n *  id from the element.\\n *\\n * @typedef {Object} module:engine/conversion/downcast-converters~HighlightDescriptor\\n *\\n * @property {String|Array.<String>} class CSS class or array of classes to set. If descriptor is used to\\n * create {@link module:engine/view/attributeelement~AttributeElement} over text nodes, those classes will be set\\n * on that {@link module:engine/view/attributeelement~AttributeElement}. If descriptor is applied to an element,\\n * usually those class will be set on that element, however this depends on how the element converts the descriptor.\\n *\\n * @property {String} [id] Descriptor identifier. If not provided, defaults to converted marker's name.\\n *\\n * @property {Number} [priority] Descriptor priority. If not provided, defaults to `10`. If descriptor is used to create\\n * {@link module:engine/view/attributeelement~AttributeElement}, it will be that element's\\n * {@link module:engine/view/attributeelement~AttributeElement#priority}. If descriptor is applied to an element,\\n * the priority will be used to determine which descriptor is more important.\\n *\\n * @property {Object} [attributes] Attributes to set. If descriptor is used to create\\n * {@link module:engine/view/attributeelement~AttributeElement} over text nodes, those attributes will be set on that\\n * {@link module:engine/view/attributeelement~AttributeElement}. If descriptor is applied to an element, usually those\\n * attributes will be set on that element, however this depends on how the element converts the descriptor.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/controller/editingcontroller\\n */\\n\\nimport RootEditableElement from '../view/rooteditableelement';\\nimport View from '../view/view';\\nimport ViewWriter from '../view/writer';\\nimport Mapper from '../conversion/mapper';\\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\\nimport {\\n\\tinsertText,\\n\\tremove\\n} from '../conversion/downcast-converters';\\nimport { convertSelectionChange } from '../conversion/upcast-selection-converters';\\nimport {\\n\\tconvertRangeSelection,\\n\\tconvertCollapsedSelection,\\n\\tclearAttributes\\n} from '../conversion/downcast-selection-converters';\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\\n * including selection handling. It also creates the {@link ~EditingController#view view document} which builds a\\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class EditingController {\\n\\t/**\\n\\t * Creates an editing controller instance.\\n\\t *\\n\\t * @param {module:engine/model/model~Model} model Editing model.\\n\\t */\\n\\tconstructor( model ) {\\n\\t\\t/**\\n\\t\\t * Editing model.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/model~Model}\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * Editing view controller.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/view/view~View}\\n\\t\\t */\\n\\t\\tthis.view = new View();\\n\\n\\t\\t/**\\n\\t\\t * Mapper which describes the model-view binding.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/mapper~Mapper}\\n\\t\\t */\\n\\t\\tthis.mapper = new Mapper();\\n\\n\\t\\t/**\\n\\t\\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\\n\\t\\t */\\n\\t\\tthis.downcastDispatcher = new DowncastDispatcher( {\\n\\t\\t\\tmapper: this.mapper\\n\\t\\t} );\\n\\n\\t\\tconst doc = this.model.document;\\n\\t\\tconst selection = doc.selection;\\n\\t\\tconst markers = this.model.markers;\\n\\n\\t\\tthis.listenTo( doc, 'change', () => {\\n\\t\\t\\tthis.view.change( writer => {\\n\\t\\t\\t\\tthis.downcastDispatcher.convertChanges( doc.differ, writer );\\n\\t\\t\\t\\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\\n\\t\\t\\t} );\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// Convert selection from view to model.\\n\\t\\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\\n\\n\\t\\t// Attach default model converters.\\n\\t\\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\\n\\t\\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\\n\\n\\t\\t// Attach default model selection converters.\\n\\t\\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\\n\\t\\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\\n\\t\\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\\n\\n\\t\\t// Convert markers removal.\\n\\t\\t//\\n\\t\\t// Markers should be removed from the view before changes to the model are applied. This is because otherwise\\n\\t\\t// it would be impossible to map some markers to the view (if, for example, the marker's boundary parent got removed).\\n\\t\\t//\\n\\t\\t// `removedMarkers` keeps information which markers already has been removed to prevent removing them twice.\\n\\t\\tconst removedMarkers = new Set();\\n\\n\\t\\t// We don't want to render view when markers are converted, so we need to create view writer\\n\\t\\t// manually instead of using `View#change` block. See https://github.com/ckeditor/ckeditor5-engine/issues/1323.\\n\\t\\tconst viewWriter = new ViewWriter( this.view.document );\\n\\n\\t\\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\\n\\t\\t\\t// Before operation is applied...\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tfor ( const marker of model.markers ) {\\n\\t\\t\\t\\t// Check all markers, that aren't already removed...\\n\\t\\t\\t\\tif ( removedMarkers.has( marker.name ) ) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst markerRange = marker.getRange();\\n\\n\\t\\t\\t\\tif ( _operationAffectsMarker( operation, marker ) ) {\\n\\t\\t\\t\\t\\t// And if the operation in any way modifies the marker, remove the marker from the view.\\n\\t\\t\\t\\t\\tremovedMarkers.add( marker.name );\\n\\t\\t\\t\\t\\tthis.downcastDispatcher.convertMarkerRemove( marker.name, markerRange, viewWriter );\\n\\t\\t\\t\\t\\t// TODO: This stinks but this is the safest place to have this code.\\n\\t\\t\\t\\t\\tthis.model.document.differ.bufferMarkerChange( marker.name, markerRange, markerRange );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\n\\t\\t// If an existing marker is updated through `model.Model#markers` directly (not through operation), just remove it.\\n\\t\\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange ) => {\\n\\t\\t\\tif ( oldRange && !removedMarkers.has( marker.name ) ) {\\n\\t\\t\\t\\tremovedMarkers.add( marker.name );\\n\\t\\t\\t\\tthis.downcastDispatcher.convertMarkerRemove( marker.name, oldRange, viewWriter );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// When all changes are done, clear `removedMarkers` set.\\n\\t\\tthis.listenTo( model, '_change', () => {\\n\\t\\t\\tremovedMarkers.clear();\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\\n\\t\\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\\n\\t\\t// model root automatically creates corresponding view root.\\n\\t\\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\\n\\t\\t\\t// $graveyard is a special root that has no reflection in the view.\\n\\t\\t\\tif ( root.rootName == '$graveyard' ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewRoot = new RootEditableElement( root.name );\\n\\n\\t\\t\\tviewRoot.rootName = root.rootName;\\n\\t\\t\\tviewRoot._document = this.view.document;\\n\\t\\t\\tthis.mapper.bindElements( root, viewRoot );\\n\\n\\t\\t\\treturn viewRoot;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\\n\\t * by `EditingController` that need to be destroyed.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.view.destroy();\\n\\t\\tthis.stopListening();\\n\\t}\\n}\\n\\nmix( EditingController, ObservableMixin );\\n\\n// Helper function which checks whether given operation will affect given marker after the operation is applied.\\nfunction _operationAffectsMarker( operation, marker ) {\\n\\tconst range = marker.getRange();\\n\\n\\tif ( operation.type == 'insert' || operation.type == 'rename' ) {\\n\\t\\treturn _positionAffectsRange( operation.position, range );\\n\\t} else if ( operation.type == 'move' || operation.type == 'remove' || operation.type == 'reinsert' ) {\\n\\t\\treturn _positionAffectsRange( operation.targetPosition, range ) || _positionAffectsRange( operation.sourcePosition, range );\\n\\t} else if ( operation.type == 'marker' && operation.name == marker.name ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\\n// Helper function which checks whether change at given position affects given range.\\nfunction _positionAffectsRange( position, range ) {\\n\\treturn range.containsPosition( position ) || !range.start._getTransformedByInsertion( position, 1, true ).isEqual( range.start );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * Contains {@link module:engine/view/selection~Selection view selection}\\n * to {@link module:engine/model/selection~Selection model selection} conversion helpers.\\n *\\n * @module engine/conversion/upcast-selection-converters\\n */\\n\\nimport ModelSelection from '../model/selection';\\n\\n/**\\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection view selection} taken\\n * from the {@link module:engine/view/document~Document#event:selectionChange} event\\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\\n *\\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\\n * conversion mechanism, the callback should be set directly on view document.\\n *\\n *\\t\\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\\n *\\n * @param {module:engine/model/model~Model} model Data model.\\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\\n */\\nexport function convertSelectionChange( model, mapper ) {\\n\\treturn ( evt, data ) => {\\n\\t\\tconst viewSelection = data.newSelection;\\n\\t\\tconst modelSelection = new ModelSelection();\\n\\n\\t\\tconst ranges = [];\\n\\n\\t\\tfor ( const viewRange of viewSelection.getRanges() ) {\\n\\t\\t\\tranges.push( mapper.toModelRange( viewRange ) );\\n\\t\\t}\\n\\n\\t\\tmodelSelection.setTo( ranges, { backward: viewSelection.isBackward } );\\n\\n\\t\\tif ( !modelSelection.isEqual( model.document.selection ) ) {\\n\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\twriter.setSelection( modelSelection );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * Contains {@link module:engine/model/selection~Selection model selection} to\\n * {@link module:engine/view/selection~Selection view selection} converters for\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\\n *\\n * @module engine/conversion/downcast-selection-converters\\n */\\n\\n/**\\n * Function factory, creates a converter that converts non-collapsed {@link module:engine/model/selection~Selection model selection} to\\n * {@link module:engine/view/selection~Selection view selection}. The converter consumes appropriate value from `consumable` object\\n * and maps model positions from selection to view positions.\\n *\\n *\\t\\tmodelDispatcher.on( 'selection', convertRangeSelection() );\\n *\\n * @returns {Function} Selection converter.\\n */\\nexport function convertRangeSelection() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst selection = data.selection;\\n\\n\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewRanges = [];\\n\\n\\t\\tfor ( const range of selection.getRanges() ) {\\n\\t\\t\\tconst viewRange = conversionApi.mapper.toViewRange( range );\\n\\t\\t\\tviewRanges.push( viewRange );\\n\\t\\t}\\n\\n\\t\\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts collapsed {@link module:engine/model/selection~Selection model selection} to\\n * {@link module:engine/view/selection~Selection view selection}. The converter consumes appropriate value from `consumable` object,\\n * maps model selection position to view position and breaks {@link module:engine/view/attributeelement~AttributeElement attribute elements}\\n * at the selection position.\\n *\\n *\\t\\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\\n *\\n * Example of view state before and after converting collapsed selection:\\n *\\n *\\t\\t   <p><strong>f^oo<strong>bar</p>\\n *\\t\\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\\n *\\n * By breaking attribute elements like `<strong>`, selection is in correct element. Then, when selection attribute is\\n * converted, the broken attributes might be merged again, or the position where the selection is may be wrapped\\n * in different, appropriate attribute elements.\\n *\\n * See also {@link module:engine/conversion/downcast-selection-converters~clearAttributes} which does a clean-up\\n * by merging attributes.\\n *\\n * @returns {Function} Selection converter.\\n */\\nexport function convertCollapsedSelection() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst selection = data.selection;\\n\\n\\t\\tif ( !selection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst modelPosition = selection.getFirstPosition();\\n\\t\\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\\n\\t\\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\\n\\n\\t\\tviewWriter.setSelection( brokenPosition );\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that clears artifacts after the previous\\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merge sibling attributes at all start and end\\n * positions of all ranges.\\n *\\n *\\t\\t   <p><strong>^</strong></p>\\n *\\t\\t-> <p>^</p>\\n *\\n *\\t\\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\\n *\\t\\t-> <p><strong>foo^bar<strong>bar</p>\\n *\\n *\\t\\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\\n *\\t\\t-> <p><strong>foo^bar<strong>bar</p>\\n *\\n * This listener should be assigned before any converter for the new selection:\\n *\\n *\\t\\tmodelDispatcher.on( 'selection', clearAttributes() );\\n *\\n * See {@link module:engine/conversion/downcast-selection-converters~convertCollapsedSelection}\\n * which do the opposite by breaking attributes in the selection position.\\n *\\n * @returns {Function} Selection converter.\\n */\\nexport function clearAttributes() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst viewSelection = viewWriter.document.selection;\\n\\n\\t\\tfor ( const range of viewSelection.getRanges() ) {\\n\\t\\t\\t// Not collapsed selection should not have artifacts.\\n\\t\\t\\tif ( range.isCollapsed ) {\\n\\t\\t\\t\\t// Position might be in the node removed by the view writer.\\n\\t\\t\\t\\tif ( range.end.parent.document ) {\\n\\t\\t\\t\\t\\tconversionApi.writer.mergeAttributes( range.start );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tviewWriter.setSelection( null );\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/plugincollection\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\n/**\\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\\n */\\nexport default class PluginCollection {\\n\\t/**\\n\\t * Creates an instance of the PluginCollection class.\\n\\t * Allows loading and initializing plugins and their dependencies.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\\n\\t * when {@link module:core/plugincollection~PluginCollection#load} is used with plugin names (strings, instead of constructors).\\n\\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\\n\\t * used in `config.plugins` or `config.removePlugins` by names.\\n\\t */\\n\\tconstructor( editor, availablePlugins = [] ) {\\n\\t\\t/**\\n\\t\\t * @protected\\n\\t\\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\\n\\t\\t */\\n\\t\\tthis._editor = editor;\\n\\n\\t\\t/**\\n\\t\\t * Map of plugin constructors which can be retrieved by their names.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\\n\\t\\t */\\n\\t\\tthis._availablePlugins = new Map();\\n\\n\\t\\t/**\\n\\t\\t * @protected\\n\\t\\t * @member {Map} module:core/plugin~PluginCollection#_plugins\\n\\t\\t */\\n\\t\\tthis._plugins = new Map();\\n\\n\\t\\tfor ( const PluginConstructor of availablePlugins ) {\\n\\t\\t\\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\\n\\n\\t\\t\\tif ( PluginConstructor.pluginName ) {\\n\\t\\t\\t\\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\\n\\t *\\n\\t * @returns {Iterable.<Array>}\\n\\t */\\n\\t* [ Symbol.iterator ]() {\\n\\t\\tfor ( const entry of this._plugins ) {\\n\\t\\t\\tif ( typeof entry[ 0 ] == 'function' ) {\\n\\t\\t\\t\\tyield entry;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets the plugin instance by its constructor or name.\\n\\t *\\n\\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\\n\\t * @returns {module:core/plugin~PluginInterface}\\n\\t */\\n\\tget( key ) {\\n\\t\\treturn this._plugins.get( key );\\n\\t}\\n\\n\\t/**\\n\\t * Loads a set of plugins and adds them to the collection.\\n\\t *\\n\\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\\n\\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) work only if\\n\\t * `availablePlugins` were passed to the {@link #constructor}.\\n\\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\\n\\t * which should not be loaded (despite being specified in the `plugins` array).\\n\\t * @returns {Promise} A promise which gets resolved once all plugins are loaded and available into the\\n\\t * collection.\\n\\t * @returns {Promise.<Array.<module:core/plugin~PluginInterface>>} returns.loadedPlugins The array of loaded plugins.\\n\\t */\\n\\tload( plugins, removePlugins = [] ) {\\n\\t\\tconst that = this;\\n\\t\\tconst editor = this._editor;\\n\\t\\tconst loading = new Set();\\n\\t\\tconst loaded = [];\\n\\n\\t\\tconst pluginConstructors = mapToAvailableConstructors( plugins );\\n\\t\\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\\n\\t\\tconst missingPlugins = getMissingPluginNames( plugins );\\n\\n\\t\\tif ( missingPlugins ) {\\n\\t\\t\\t// TODO update this error docs with links to docs because it will be a frequent problem.\\n\\n\\t\\t\\t/**\\n\\t\\t\\t * Some plugins are not available and could not be loaded.\\n\\t\\t\\t *\\n\\t\\t\\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\\n\\t\\t\\t * This is usually done by the builder by setting the {@link module:core/editor/editor~Editor.build}\\n\\t\\t\\t * property.\\n\\t\\t\\t *\\n\\t\\t\\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}** it means\\n\\t\\t\\t * that you try to enable a plugin which was not included into that build. This may a be due to a typo\\n\\t\\t\\t * in the plugin name or simply because that plugin is not part of this build. In the latter scenario,\\n\\t\\t\\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\\n\\t\\t\\t *\\n\\t\\t\\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\\n\\t\\t\\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \\\"plugin loader\\\".\\n\\t\\t\\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\\n\\t\\t\\t * provide each plugin through reference (as a constructor function). Check out the examples in\\n\\t\\t\\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \\\"Building from source\\\"}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error plugincollection-plugin-not-found\\n\\t\\t\\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\\n\\t\\t\\t */\\n\\t\\t\\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\\n\\n\\t\\t\\t// Log the error so it's more visible on the console. Hopefully, for better DX.\\n\\t\\t\\tlog.error( errorMsg, { plugins: missingPlugins } );\\n\\n\\t\\t\\treturn Promise.reject( new CKEditorError( errorMsg, { plugins: missingPlugins } ) );\\n\\t\\t}\\n\\n\\t\\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\\n\\t\\t\\t.then( () => loaded );\\n\\n\\t\\tfunction loadPlugin( PluginConstructor ) {\\n\\t\\t\\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// The plugin is already loaded or being loaded - do nothing.\\n\\t\\t\\tif ( that.get( PluginConstructor ) || loading.has( PluginConstructor ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn instantiatePlugin( PluginConstructor )\\n\\t\\t\\t\\t.catch( err => {\\n\\t\\t\\t\\t\\t/**\\n\\t\\t\\t\\t\\t * It was not possible to load the plugin.\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t * This is a generic error logged to the console when a JavaSript error is thrown during one of\\n\\t\\t\\t\\t\\t * the plugins initialization.\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t * If you correctly handled a promise returned by the editor's `create()` method (like shown below)\\n\\t\\t\\t\\t\\t * you will find the original error logged on the console too:\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t *\\t\\tClassicEditor.create( document.getElementById( 'editor' ) )\\n\\t\\t\\t\\t\\t *\\t\\t\\t.then( editor => {\\n\\t\\t\\t\\t\\t *\\t\\t\\t\\t// ...\\n\\t\\t\\t\\t\\t * \\t\\t\\t} )\\n\\t\\t\\t\\t\\t *\\t\\t\\t.catch( error => {\\n\\t\\t\\t\\t\\t *\\t\\t\\t\\tconsole.error( error );\\n\\t\\t\\t\\t\\t *\\t\\t\\t} );\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t * @error plugincollection-load\\n\\t\\t\\t\\t\\t * @param {String} plugin The name of the plugin that could not be loaded.\\n\\t\\t\\t\\t\\t */\\n\\t\\t\\t\\t\\tlog.error( 'plugincollection-load: It was not possible to load the plugin.', { plugin: PluginConstructor } );\\n\\n\\t\\t\\t\\t\\tthrow err;\\n\\t\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tfunction instantiatePlugin( PluginConstructor ) {\\n\\t\\t\\treturn new Promise( resolve => {\\n\\t\\t\\t\\tloading.add( PluginConstructor );\\n\\n\\t\\t\\t\\tif ( PluginConstructor.requires ) {\\n\\t\\t\\t\\t\\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\\n\\t\\t\\t\\t\\t\\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\\n\\n\\t\\t\\t\\t\\t\\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\\n\\t\\t\\t\\t\\t\\t\\t/**\\n\\t\\t\\t\\t\\t\\t\\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\\n\\t\\t\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t\\t\\t * @error plugincollection-required\\n\\t\\t\\t\\t\\t\\t\\t * @param {Function} plugin The required plugin.\\n\\t\\t\\t\\t\\t\\t\\t * @param {Function} requiredBy The parent plugin.\\n\\t\\t\\t\\t\\t\\t\\t */\\n\\t\\t\\t\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t\\t\\t\\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\\n\\t\\t\\t\\t\\t\\t\\t\\t'the `removePlugins` option.',\\n\\t\\t\\t\\t\\t\\t\\t\\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tloadPlugin( RequiredPluginConstructor );\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst plugin = new PluginConstructor( editor );\\n\\t\\t\\t\\tthat._add( PluginConstructor, plugin );\\n\\t\\t\\t\\tloaded.push( plugin );\\n\\n\\t\\t\\t\\tresolve();\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tfunction getPluginConstructor( PluginConstructorOrName ) {\\n\\t\\t\\tif ( typeof PluginConstructorOrName == 'function' ) {\\n\\t\\t\\t\\treturn PluginConstructorOrName;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn that._availablePlugins.get( PluginConstructorOrName );\\n\\t\\t}\\n\\n\\t\\tfunction getMissingPluginNames( plugins ) {\\n\\t\\t\\tconst missingPlugins = [];\\n\\n\\t\\t\\tfor ( const pluginNameOrConstructor of plugins ) {\\n\\t\\t\\t\\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\\n\\t\\t\\t\\t\\tmissingPlugins.push( pluginNameOrConstructor );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn missingPlugins.length ? missingPlugins : null;\\n\\t\\t}\\n\\n\\t\\tfunction mapToAvailableConstructors( plugins ) {\\n\\t\\t\\treturn plugins\\n\\t\\t\\t\\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\\n\\t\\t\\t\\t.filter( PluginConstructor => !!PluginConstructor );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Destroys all loaded plugins.\\n\\t *\\n\\t * @returns {Promise}\\n\\t */\\n\\tdestroy() {\\n\\t\\tconst promises = Array.from( this )\\n\\t\\t\\t.map( ( [ , pluginInstance ] ) => pluginInstance )\\n\\t\\t\\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\\n\\t\\t\\t.map( pluginInstance => pluginInstance.destroy() );\\n\\n\\t\\treturn Promise.all( promises );\\n\\t}\\n\\n\\t/**\\n\\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\\n\\t *\\n\\t * @protected\\n\\t * @param {Function} PluginConstructor The plugin constructor.\\n\\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\\n\\t */\\n\\t_add( PluginConstructor, plugin ) {\\n\\t\\tthis._plugins.set( PluginConstructor, plugin );\\n\\n\\t\\tconst pluginName = PluginConstructor.pluginName;\\n\\n\\t\\tif ( !pluginName ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( this._plugins.has( pluginName ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\\n\\t\\t\\t * This may lead to runtime conflicts between these plugins. This usually means that incorrect\\n\\t\\t\\t * params were passed to {@link module:core/editor/editor~Editor.create}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error plugincollection-plugin-name-conflict\\n\\t\\t\\t * @param {String} pluginName The duplicated plugin name.\\n\\t\\t\\t * @param {Function} plugin1 The first plugin constructor.\\n\\t\\t\\t * @param {Function} plugin2 The second plugin constructor.\\n\\t\\t\\t */\\n\\t\\t\\tlog.warn(\\n\\t\\t\\t\\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\\n\\t\\t\\t\\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tthis._plugins.set( pluginName, plugin );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/commandcollection\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\\n */\\nexport default class CommandCollection {\\n\\t/**\\n\\t * Creates collection instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Command map.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map}\\n\\t\\t */\\n\\t\\tthis._commands = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Registers a new command.\\n\\t *\\n\\t * @param {String} commandName The name of the command.\\n\\t * @param {module:core/command~Command} command\\n\\t */\\n\\tadd( commandName, command ) {\\n\\t\\tthis._commands.set( commandName, command );\\n\\t}\\n\\n\\t/**\\n\\t * Retrieves a command from the collection.\\n\\t *\\n\\t * @param {String} commandName The name of the command.\\n\\t * @returns {module:core/command~Command}\\n\\t */\\n\\tget( commandName ) {\\n\\t\\treturn this._commands.get( commandName );\\n\\t}\\n\\n\\t/**\\n\\t * Executes a command.\\n\\t *\\n\\t * @param {String} commandName The name of the command.\\n\\t */\\n\\texecute( commandName, ...args ) {\\n\\t\\tconst command = this.get( commandName );\\n\\n\\t\\tif ( !command ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Command does not exist.\\n\\t\\t\\t *\\n\\t\\t\\t * @error commandcollection-command-not-found\\n\\t\\t\\t * @param {String} commandName Name of the command.\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', { commandName } );\\n\\t\\t}\\n\\n\\t\\tcommand.execute( ...args );\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator of command names.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\t* names() {\\n\\t\\tyield* this._commands.keys();\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator of command instances.\\n\\t *\\n\\t * @returns {Iterable.<module:core/command~Command>}\\n\\t */\\n\\t* commands() {\\n\\t\\tyield* this._commands.values();\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Returns `[ commandName, commandInstance ]` pairs.\\n\\t *\\n\\t * @returns {Iterable.<Array>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._commands[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Destroys all collection commands.\\n\\t */\\n\\tdestroy() {\\n\\t\\tfor ( const command of this.commands() ) {\\n\\t\\t\\tcommand.destroy();\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals window */\\n\\n/**\\n * @module utils/translation-service\\n */\\n\\nlet dictionaries = {};\\n\\n/**\\n * Adds package translations to existing ones.\\n * These translations will later be available for {@link module:utils/translation-service~translate translate}.\\n *\\n *\\t\\tadd( 'pl', {\\n *\\t\\t\\t'OK': 'OK',\\n *\\t\\t\\t'Cancel [context: reject]': 'Anuluj'\\n *\\t\\t} );\\n *\\n * That function is accessible globally via `window.CKEDITOR_TRANSLATIONS.add()`. So it's possible to add translation from\\n * the other script, just after that one.\\n *\\n * \\t\\t<script src=\\\"./path/to/ckeditor.js\\\"></script>\\n * \\t\\t<script src=\\\"./path/to/translations/en.js\\\"></script>\\n *\\n * @param {String} lang Target language.\\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\\n */\\nexport function add( lang, translations ) {\\n\\tdictionaries[ lang ] = dictionaries[ lang ] || {};\\n\\n\\tObject.assign( dictionaries[ lang ], translations );\\n}\\n\\n/**\\n * Translates string if the translation of the string was previously {@link module:utils/translation-service~add added}\\n * to the dictionary. This happens in a multi-language mode were translation modules are created by the bundler.\\n *\\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\\n *\\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\\n * is left empty, so this function will return the original strings always.\\n *\\n *\\t\\ttranslate( 'pl', 'Cancel [context: reject]' );\\n *\\n * @param {String} lang Target language.\\n * @param {String} translationKey String that will be translated.\\n * @returns {String} Translated sentence.\\n */\\nexport function translate( lang, translationKey ) {\\n\\tconst numberOfLanguages = getNumberOfLanguages();\\n\\n\\tif ( numberOfLanguages === 1 ) {\\n\\t\\t// Override the language to the only supported one.\\n\\t\\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\\n\\t\\tlang = Object.keys( dictionaries )[ 0 ];\\n\\t}\\n\\n\\tif ( numberOfLanguages === 0 || !hasTranslation( lang, translationKey ) ) {\\n\\t\\treturn translationKey.replace( / \\\\[context: [^\\\\]]+\\\\]$/, '' );\\n\\t}\\n\\n\\t// In case of missing translations we still need to cut off the `[context: ]` parts.\\n\\treturn dictionaries[ lang ][ translationKey ].replace( / \\\\[context: [^\\\\]]+\\\\]$/, '' );\\n}\\n\\n// Checks whether the dictionary exists and translation in that dictionary exists.\\nfunction hasTranslation( lang, translationKey ) {\\n\\treturn (\\n\\t\\t( lang in dictionaries ) &&\\n\\t\\t( translationKey in dictionaries[ lang ] )\\n\\t);\\n}\\n\\n/**\\n * Clears dictionaries for test purposes.\\n *\\n * @protected\\n */\\nexport function _clear() {\\n\\tdictionaries = {};\\n}\\n\\nfunction getNumberOfLanguages() {\\n\\treturn Object.keys( dictionaries ).length;\\n}\\n\\n// Export globally add function to enable adding later translations.\\n// See https://github.com/ckeditor/ckeditor5/issues/624\\nwindow.CKEDITOR_TRANSLATIONS = window.CKEDITOR_TRANSLATIONS || {};\\nwindow.CKEDITOR_TRANSLATIONS.add = add;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/locale\\n */\\n\\nimport { translate } from './translation-service';\\n\\n/**\\n * Represents the localization services.\\n */\\nexport default class Locale {\\n\\t/**\\n\\t * Creates a new instance of the Locale class.\\n\\t *\\n\\t * @param {String} [language='en'] The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\\n\\t */\\n\\tconstructor( language ) {\\n\\t\\t/**\\n\\t\\t * The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.language = language || 'en';\\n\\n\\t\\t/**\\n\\t\\t * Translates the given string to the {@link #language}. This method is also available in {@link module:core/editor/editor~Editor#t}\\n\\t\\t * and {@link module:ui/view~View#t}.\\n\\t\\t *\\n\\t\\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\\n\\t\\t * `<index>` is the index in the `values` array.\\n\\t\\t *\\n\\t\\t *\\t\\teditor.t( 'Created file \\\"%0\\\" in %1ms.', [ fileName, timeTaken ] );\\n\\t\\t *\\n\\t\\t * This method's context is statically bound to Locale instance,\\n\\t\\t * so it can be called as a function:\\n\\t\\t *\\n\\t\\t *\\t\\tconst t = this.t;\\n\\t\\t *\\t\\tt( 'Label' );\\n\\t\\t *\\n\\t\\t * @method #t\\n\\t\\t * @param {String} str The string to translate.\\n\\t\\t * @param {String[]} values Values that should be used to interpolate the string.\\n\\t\\t */\\n\\t\\tthis.t = ( ...args ) => this._t( ...args );\\n\\t}\\n\\n\\t/**\\n\\t * Base for the {@link #t} method.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_t( str, values ) {\\n\\t\\tlet translatedString = translate( this.language, str );\\n\\n\\t\\tif ( values ) {\\n\\t\\t\\ttranslatedString = translatedString.replace( /%(\\\\d+)/g, ( match, index ) => {\\n\\t\\t\\t\\treturn ( index < values.length ) ? values[ index ] : match;\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn translatedString;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/viewconsumable\\n */\\n\\nimport isArray from '@ckeditor/ckeditor5-utils/src/lib/lodash/isArray';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\\n * does not consume its attributes, classes and styles.\\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\\n *\\n *\\t\\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\\n *\\t\\tviewConsumable.add( textNode ); // Adds text node for consumption.\\n *\\t\\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\\n *\\t\\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\\n *\\t\\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\\n *\\t\\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\\n *\\t\\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\\n *\\t\\tviewConsumable.consume( textNode ); // Consume text node.\\n *\\t\\tviewConsumable.consume( docFragment ); // Consume document fragment.\\n *\\t\\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\\n *\\t\\tviewConsumable.revert( textNode ); // Revert already consumed text node.\\n *\\t\\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\\n */\\nexport default class ViewConsumable {\\n\\t/**\\n\\t * Creates new ViewConsumable.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\\n\\t\\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\\n\\t\\t * For {@link module:engine/view/text~Text text nodes} and\\n\\t\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\\n\\t\\t*/\\n\\t\\tthis._consumables = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\\n\\t *\\n\\t *\\t\\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\\n\\t *\\t\\tviewConsumable.add( p, { attribute: 'name' } ); // Adds element's attribute.\\n\\t *\\t\\tviewConsumable.add( p, { class: 'foobar' } ); // Adds element's class.\\n\\t *\\t\\tviewConsumable.add( p, { style: 'color' } ); // Adds element's style\\n\\t *\\t\\tviewConsumable.add( p, { attribute: 'name', style: 'color' } ); // Adds attribute and style.\\n\\t *\\t\\tviewConsumable.add( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\\n\\t *\\t\\tviewConsumable.add( textNode ); // Adds text node to consume.\\n\\t *\\t\\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\\n\\t * attribute is provided - it should be handled separately by providing actual style/class.\\n\\t *\\n\\t *\\t\\tviewConsumable.add( p, { attribute: 'style' } ); // This call will throw an exception.\\n\\t *\\t\\tviewConsumable.add( p, { style: 'color' } ); // This is properly handled style.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\\n\\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\\n\\t * @param {Boolean} consumables.name If set to true element's name will be included.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\\n\\t */\\n\\tadd( element, consumables ) {\\n\\t\\tlet elementConsumables;\\n\\n\\t\\t// For text nodes and document fragments just mark them as consumable.\\n\\t\\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\\n\\t\\t\\tthis._consumables.set( element, true );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// For elements create new ViewElementConsumables or update already existing one.\\n\\t\\tif ( !this._consumables.has( element ) ) {\\n\\t\\t\\telementConsumables = new ViewElementConsumables();\\n\\t\\t\\tthis._consumables.set( element, elementConsumables );\\n\\t\\t} else {\\n\\t\\t\\telementConsumables = this._consumables.get( element );\\n\\t\\t}\\n\\n\\t\\telementConsumables.add( consumables );\\n\\t}\\n\\n\\t/**\\n\\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\\n\\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\\n\\t * first already consumed item is found and `null` when first non-consumable item is found.\\n\\t *\\n\\t *\\t\\tviewConsumable.test( p, { name: true } ); // Tests element's name.\\n\\t *\\t\\tviewConsumable.test( p, { attribute: 'name' } ); // Tests attribute.\\n\\t *\\t\\tviewConsumable.test( p, { class: 'foobar' } ); // Tests class.\\n\\t *\\t\\tviewConsumable.test( p, { style: 'color' } ); // Tests style.\\n\\t *\\t\\tviewConsumable.test( p, { attribute: 'name', style: 'color' } ); // Tests attribute and style.\\n\\t *\\t\\tviewConsumable.test( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\\n\\t *\\t\\tviewConsumable.test( textNode ); // Tests text node.\\n\\t *\\t\\tviewConsumable.test( docFragment ); // Tests document fragment.\\n\\t *\\n\\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\\n\\t *\\n\\t *\\t\\tviewConsumable.test( p, { attribute: 'class' } ); // Tests if all added classes can be consumed.\\n\\t *\\t\\tviewConsumable.test( p, { attribute: 'style' } ); // Tests if all added styles can be consumed.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\\n\\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\\n\\t * @param {Boolean} consumables.name If set to true element's name will be included.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\\n\\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\\n\\t * when first already consumed item is found and `null` when first non-consumable item is found.\\n\\t */\\n\\ttest( element, consumables ) {\\n\\t\\tconst elementConsumables = this._consumables.get( element );\\n\\n\\t\\tif ( elementConsumables === undefined ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// For text nodes and document fragments return stored boolean value.\\n\\t\\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\\n\\t\\t\\treturn elementConsumables;\\n\\t\\t}\\n\\n\\t\\t// For elements test consumables object.\\n\\t\\treturn elementConsumables.test( consumables );\\n\\t}\\n\\n\\t/**\\n\\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\\n\\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\\n\\t *\\n\\t *\\t\\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\\n\\t *\\t\\tviewConsumable.consume( p, { attribute: 'name' } ); // Consumes element's attribute.\\n\\t *\\t\\tviewConsumable.consume( p, { class: 'foobar' } ); // Consumes element's class.\\n\\t *\\t\\tviewConsumable.consume( p, { style: 'color' } ); // Consumes element's style.\\n\\t *\\t\\tviewConsumable.consume( p, { attribute: 'name', style: 'color' } ); // Consumes attribute and style.\\n\\t *\\t\\tviewConsumable.consume( p, { class: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\\n\\t *\\t\\tviewConsumable.consume( textNode ); // Consumes text node.\\n\\t *\\t\\tviewConsumable.consume( docFragment ); // Consumes document fragment.\\n\\t *\\n\\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\\n\\t *\\n\\t *\\t\\tviewConsumable.consume( p, { attribute: 'class' } ); // Consume only if all added classes can be consumed.\\n\\t *\\t\\tviewConsumable.consume( p, { attribute: 'style' } ); // Consume only if all added styles can be consumed.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\\n\\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\\n\\t * @param {Boolean} consumables.name If set to true element's name will be included.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\\n\\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\\n\\t * otherwise returns `false`.\\n\\t */\\n\\tconsume( element, consumables ) {\\n\\t\\tif ( this.test( element, consumables ) ) {\\n\\t\\t\\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\\n\\t\\t\\t\\t// For text nodes and document fragments set value to false.\\n\\t\\t\\t\\tthis._consumables.set( element, false );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// For elements - consume consumables object.\\n\\t\\t\\t\\tthis._consumables.get( element ).consume( consumables );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\\n\\t * Method does not revert items that were never previously added for consumption, even if they are included in\\n\\t * method's call.\\n\\t *\\n\\t *\\t\\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\\n\\t *\\t\\tviewConsumable.revert( p, { attribute: 'name' } ); // Reverts element's attribute.\\n\\t *\\t\\tviewConsumable.revert( p, { class: 'foobar' } ); // Reverts element's class.\\n\\t *\\t\\tviewConsumable.revert( p, { style: 'color' } ); // Reverts element's style.\\n\\t *\\t\\tviewConsumable.revert( p, { attribute: 'name', style: 'color' } ); // Reverts attribute and style.\\n\\t *\\t\\tviewConsumable.revert( p, { class: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\\n\\t *\\t\\tviewConsumable.revert( textNode ); // Reverts text node.\\n\\t *\\t\\tviewConsumable.revert( docFragment ); // Reverts document fragment.\\n\\t *\\n\\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\\n\\t * consumption.\\n\\t *\\n\\t *\\t\\tviewConsumable.revert( p, { attribute: 'class' } ); // Reverts all classes added for consumption.\\n\\t *\\t\\tviewConsumable.revert( p, { attribute: 'style' } ); // Reverts all styles added for consumption.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\\n\\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\\n\\t * @param {Boolean} consumables.name If set to true element's name will be included.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names.\\n\\t */\\n\\trevert( element, consumables ) {\\n\\t\\tconst elementConsumables = this._consumables.get( element );\\n\\n\\t\\tif ( elementConsumables !== undefined ) {\\n\\t\\t\\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\\n\\t\\t\\t\\t// For text nodes and document fragments - set consumable to true.\\n\\t\\t\\t\\tthis._consumables.set( element, true );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// For elements - revert items from consumables object.\\n\\t\\t\\t\\telementConsumables.revert( consumables );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\\n\\t * element's name and all its attributes, classes and styles.\\n\\t *\\n\\t * @static\\n\\t * @param {module:engine/view/element~Element} element\\n\\t * @returns {Object} consumables\\n\\t */\\n\\tstatic consumablesFromElement( element ) {\\n\\t\\tconst consumables = {\\n\\t\\t\\tname: true,\\n\\t\\t\\tattribute: [],\\n\\t\\t\\tclass: [],\\n\\t\\t\\tstyle: []\\n\\t\\t};\\n\\n\\t\\tconst attributes = element.getAttributeKeys();\\n\\n\\t\\tfor ( const attribute of attributes ) {\\n\\t\\t\\t// Skip classes and styles - will be added separately.\\n\\t\\t\\tif ( attribute == 'style' || attribute == 'class' ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconsumables.attribute.push( attribute );\\n\\t\\t}\\n\\n\\t\\tconst classes = element.getClassNames();\\n\\n\\t\\tfor ( const className of classes ) {\\n\\t\\t\\tconsumables.class.push( className );\\n\\t\\t}\\n\\n\\t\\tconst styles = element.getStyleNames();\\n\\n\\t\\tfor ( const style of styles ) {\\n\\t\\t\\tconsumables.style.push( style );\\n\\t\\t}\\n\\n\\t\\treturn consumables;\\n\\t}\\n\\n\\t/**\\n\\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\\n\\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\\n\\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\\n\\t *\\n\\t * @static\\n\\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\\n\\t * from which `ViewConsumable` will be created.\\n\\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\\n\\t * to add all consumables. It will be returned instead of a new instance.\\n\\t */\\n\\tstatic createFrom( from, instance ) {\\n\\t\\tif ( !instance ) {\\n\\t\\t\\tinstance = new ViewConsumable();\\n\\t\\t}\\n\\n\\t\\tif ( from.is( 'text' ) ) {\\n\\t\\t\\tinstance.add( from );\\n\\n\\t\\t\\treturn instance;\\n\\t\\t}\\n\\n\\t\\t// Add `from` itself, if it is an element.\\n\\t\\tif ( from.is( 'element' ) ) {\\n\\t\\t\\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\\n\\t\\t}\\n\\n\\t\\tif ( from.is( 'documentFragment' ) ) {\\n\\t\\t\\tinstance.add( from );\\n\\t\\t}\\n\\n\\t\\tfor ( const child of from.getChildren() ) {\\n\\t\\t\\tinstance = ViewConsumable.createFrom( child, instance );\\n\\t\\t}\\n\\n\\t\\treturn instance;\\n\\t}\\n}\\n\\n/**\\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\\n *\\n * @private\\n */\\nclass ViewElementConsumables {\\n\\t/**\\n\\t * Creates ViewElementConsumables instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Flag indicating if name of the element can be consumed.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis._canConsumeName = null;\\n\\n\\t\\t/**\\n\\t\\t * Contains maps of element's consumables: attributes, classes and styles.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Object}\\n\\t\\t */\\n\\t\\tthis._consumables = {\\n\\t\\t\\tattribute: new Map(),\\n\\t\\t\\tstyle: new Map(),\\n\\t\\t\\tclass: new Map()\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\\n\\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\\n\\t * styles still could be consumed):\\n\\t *\\n\\t *\\t\\tconsumables.add( { name: true } );\\n\\t *\\n\\t * Attributes classes and styles:\\n\\t *\\n\\t *\\t\\tconsumables.add( { attribute: 'title', class: 'foo', style: 'color' } );\\n\\t *\\t\\tconsumables.add( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\\n\\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\\n\\t *\\n\\t * @param {Object} consumables Object describing which parts of the element can be consumed.\\n\\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to add as consumable.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names to add as consumable.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names to add as consumable.\\n\\t */\\n\\tadd( consumables ) {\\n\\t\\tif ( consumables.name ) {\\n\\t\\t\\tthis._canConsumeName = true;\\n\\t\\t}\\n\\n\\t\\tfor ( const type in this._consumables ) {\\n\\t\\t\\tif ( type in consumables ) {\\n\\t\\t\\t\\tthis._add( type, consumables[ type ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\\n\\t *\\n\\t * Element's name can be tested:\\n\\t *\\n\\t *\\t\\tconsumables.test( { name: true } );\\n\\t *\\n\\t * Attributes classes and styles:\\n\\t *\\n\\t *\\t\\tconsumables.test( { attribute: 'title', class: 'foo', style: 'color' } );\\n\\t *\\t\\tconsumables.test( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\\n\\t *\\n\\t * @param {Object} consumables Object describing which parts of the element should be tested.\\n\\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to test.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names to test.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names to test.\\n\\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\\n\\t * was never marked for consumption and `false` when even one of the items was already consumed.\\n\\t */\\n\\ttest( consumables ) {\\n\\t\\t// Check if name can be consumed.\\n\\t\\tif ( consumables.name && !this._canConsumeName ) {\\n\\t\\t\\treturn this._canConsumeName;\\n\\t\\t}\\n\\n\\t\\tfor ( const type in this._consumables ) {\\n\\t\\t\\tif ( type in consumables ) {\\n\\t\\t\\t\\tconst value = this._test( type, consumables[ type ] );\\n\\n\\t\\t\\t\\tif ( value !== true ) {\\n\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Return true only if all can be consumed.\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\\n\\t * is already consumed - it consumes all consumable items provided.\\n\\t * Element's name can be consumed:\\n\\t *\\n\\t *\\t\\tconsumables.consume( { name: true } );\\n\\t *\\n\\t * Attributes classes and styles:\\n\\t *\\n\\t *\\t\\tconsumables.consume( { attribute: 'title', class: 'foo', style: 'color' } );\\n\\t *\\t\\tconsumables.consume( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\\n\\t *\\n\\t * @param {Object} consumables Object describing which parts of the element should be consumed.\\n\\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to consume.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names to consume.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names to consume.\\n\\t */\\n\\tconsume( consumables ) {\\n\\t\\tif ( consumables.name ) {\\n\\t\\t\\tthis._canConsumeName = false;\\n\\t\\t}\\n\\n\\t\\tfor ( const type in this._consumables ) {\\n\\t\\t\\tif ( type in consumables ) {\\n\\t\\t\\t\\tthis._consume( type, consumables[ type ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\\n\\t * Element's name can be reverted:\\n\\t *\\n\\t *\\t\\tconsumables.revert( { name: true } );\\n\\t *\\n\\t * Attributes classes and styles:\\n\\t *\\n\\t *\\t\\tconsumables.revert( { attribute: 'title', class: 'foo', style: 'color' } );\\n\\t *\\t\\tconsumables.revert( { attribute: [ 'title', 'name' ], class: [ 'foo', 'bar' ] );\\n\\t *\\n\\t * @param {Object} consumables Object describing which parts of the element should be reverted.\\n\\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\\n\\t * @param {String|Array.<String>} consumables.attribute Attribute name or array of attribute names to revert.\\n\\t * @param {String|Array.<String>} consumables.class Class name or array of class names to revert.\\n\\t * @param {String|Array.<String>} consumables.style Style name or array of style names to revert.\\n\\t */\\n\\trevert( consumables ) {\\n\\t\\tif ( consumables.name ) {\\n\\t\\t\\tthis._canConsumeName = true;\\n\\t\\t}\\n\\n\\t\\tfor ( const type in this._consumables ) {\\n\\t\\t\\tif ( type in consumables ) {\\n\\t\\t\\t\\tthis._revert( type, consumables[ type ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Helper method that adds consumables of a given type: attribute, class or style.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\\n\\t * type is provided - it should be handled separately by providing actual style/class type.\\n\\t *\\n\\t * @private\\n\\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\\n\\t * @param {String|Array.<String>} item Consumable item or array of items.\\n\\t */\\n\\t_add( type, item ) {\\n\\t\\tconst items = isArray( item ) ? item : [ item ];\\n\\t\\tconst consumables = this._consumables[ type ];\\n\\n\\t\\tfor ( const name of items ) {\\n\\t\\t\\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Class and style attributes should be handled separately in\\n\\t\\t\\t\\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * What you have done is trying to use:\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t *\\t\\tconsumables.add( { attribute: [ 'class', 'style' ] } );\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * While each class and style should be registered separately:\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t *\\t\\tconsumables.add( { class: 'some-class', style: 'font-weight' } );\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error viewconsumable-invalid-attribute\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\tconsumables.set( name, true );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Helper method that tests consumables of a given type: attribute, class or style.\\n\\t *\\n\\t * @private\\n\\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\\n\\t * @param {String|Array.<String>} item Consumable item or array of items.\\n\\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\\n\\t * consumed and `false` when one of the items is already consumed.\\n\\t */\\n\\t_test( type, item ) {\\n\\t\\tconst items = isArray( item ) ? item : [ item ];\\n\\t\\tconst consumables = this._consumables[ type ];\\n\\n\\t\\tfor ( const name of items ) {\\n\\t\\t\\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\\n\\t\\t\\t\\t// Check all classes/styles if class/style attribute is tested.\\n\\t\\t\\t\\tconst value = this._test( name, [ ...this._consumables[ name ].keys() ] );\\n\\n\\t\\t\\t\\tif ( value !== true ) {\\n\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst value = consumables.get( name );\\n\\t\\t\\t\\t// Return null if attribute is not found.\\n\\t\\t\\t\\tif ( value === undefined ) {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( !value ) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Helper method that consumes items of a given type: attribute, class or style.\\n\\t *\\n\\t * @private\\n\\t * @param {String} type Type of the consumable item: `attribute`, `class` or `style`.\\n\\t * @param {String|Array.<String>} item Consumable item or array of items.\\n\\t */\\n\\t_consume( type, item ) {\\n\\t\\tconst items = isArray( item ) ? item : [ item ];\\n\\t\\tconst consumables = this._consumables[ type ];\\n\\n\\t\\tfor ( const name of items ) {\\n\\t\\t\\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\\n\\t\\t\\t\\t// If class or style is provided for consumption - consume them all.\\n\\t\\t\\t\\tthis._consume( name, [ ...this._consumables[ name ].keys() ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconsumables.set( name, false );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Helper method that reverts items of a given type: attribute, class or style.\\n\\t *\\n\\t * @private\\n\\t * @param {String} type Type of the consumable item: `attribute`, `class` or , `style`.\\n\\t * @param {String|Array.<String>} item Consumable item or array of items.\\n\\t */\\n\\t_revert( type, item ) {\\n\\t\\tconst items = isArray( item ) ? item : [ item ];\\n\\t\\tconst consumables = this._consumables[ type ];\\n\\n\\t\\tfor ( const name of items ) {\\n\\t\\t\\tif ( type === 'attribute' && ( name === 'class' || name === 'style' ) ) {\\n\\t\\t\\t\\t// If class or style is provided for reverting - revert them all.\\n\\t\\t\\t\\tthis._revert( name, [ ...this._consumables[ name ].keys() ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst value = consumables.get( name );\\n\\n\\t\\t\\t\\tif ( value === false ) {\\n\\t\\t\\t\\t\\tconsumables.set( name, true );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/schema\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\nimport Range from './range';\\nimport Position from './position';\\nimport Element from './element';\\nimport TreeWalker from './treewalker';\\n\\n/**\\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\\n * The schema is usually defined by features and based on them the editing framework and features\\n * make decisions how to change and process the model.\\n *\\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\\n *\\n * # Schema definitions\\n *\\n * Schema defines allowed model structures and allowed attributes separately. They are also checked separately\\n * by using the {@link ~Schema#checkChild} and {@link ~Schema#checkAttribute} methods.\\n *\\n * ## Defining allowed structures\\n *\\n * When a feature introduces a model element it should register it in the schema. Besides\\n * defining that such an element may exist in the model, the feature also needs to define where\\n * this element may be placed:\\n *\\n *\\t\\tschema.register( 'myElement', {\\n *\\t\\t\\tallowIn: '$root'\\n *\\t\\t} );\\n *\\n * This lets the schema know that `<myElement>` may be a child of the `<$root>` element. `$root` is one of generic\\n * nodes defined by the editing framework. By default, the editor names the main root element a `<$root>`,\\n * so the above definition allows `<myElement>` in the main editor element.\\n *\\n * In other words, this would be correct:\\n *\\n *\\t\\t<$root><myElement></myElement></$root>\\n *\\n * While this would not be correct:\\n *\\n *\\t\\t<$root><foo><myElement></myElement></foo></$root>\\n *\\n * ## Generic items\\n *\\n * There are three basic generic items: `$root`, `$block` and `$text`.\\n * They are defined as follows:\\n *\\n *\\t\\tthis.schema.register( '$root', {\\n *\\t\\t\\tisLimit: true\\n *\\t\\t} );\\n *\\t\\tthis.schema.register( '$block', {\\n *\\t\\t\\tallowIn: '$root',\\n *\\t\\t\\tisBlock: true\\n *\\t\\t} );\\n *\\t\\tthis.schema.register( '$text', {\\n *\\t\\t\\tallowIn: '$block'\\n *\\t\\t} );\\n *\\n * These definitions can then be reused by features to create their own definitions in a more extensible way.\\n * For example, the {@link module:paragraph/paragraph~Paragraph} feature will define its item as:\\n *\\n *\\t\\tschema.register( 'paragraph', {\\n *\\t\\t\\tinheritAllFrom: '$block'\\n *\\t\\t} );\\n *\\n * Which translates to:\\n *\\n *\\t\\tschema.register( 'paragraph', {\\n *\\t\\t\\tallowWhere: '$block',\\n *\\t\\t\\tallowContentOf: '$block',\\n *\\t\\t\\tallowAttributesOf: '$block',\\n *\\t\\t\\tinheritTypesFrom: '$block'\\n *\\t\\t} );\\n *\\n * Which can be read as:\\n *\\n * * The `<paragraph>` element will be allowed in elements in which `<$block>` is allowed (e.g. in `<$root>`).\\n * * The `<paragraph>` element will allow all nodes which are allowed in `<$block>` (e.g. `$text`).\\n * * The `<paragraph>` element will allow all attributes allowed on `<$block>`.\\n * * The `<paragraph>` element will inherit all `is*` properties of `<$block>` (e.g. `isBlock`).\\n *\\n * Thanks to the fact that `<paragraph>`'s definition is inherited from `<$block>` other features can use the `<$block>`\\n * type to indirectly extend `<paragraph>`'s definition. For example, the {@link module:block-quote/blockquote~BlockQuote}\\n * feature does this:\\n *\\n *\\t\\tschema.register( 'blockQuote', {\\n *\\t\\t\\tallowWhere: '$block',\\n *\\t\\t\\tallowContentOf: '$root'\\n *\\t\\t} );\\n *\\n * Thanks to that, despite the fact that block quote and paragraph features know nothing about themselves, paragraphs\\n * will be allowed in block quotes and block quotes will be allowed in all places where blocks are. So if anyone will\\n * register a `<section>` element (with `allowContentOf: '$root'` rule), that `<section>` elements will allow\\n * block quotes too.\\n *\\n * The side effect of such a definition inheritance is that now `<blockQuote>` is allowed in `<blockQuote>` which needs to be\\n * resolved by a callback which will disallow this specific structure.\\n *\\n * You can read more about the format of an item definition in {@link module:engine/model/schema~SchemaItemDefinition}.\\n *\\n * ## Defining advanced rules in `checkChild()`'s callbacks\\n *\\n * The {@link ~Schema#checkChild} method which is the base method used to check whether some element is allowed in a given structure\\n * is {@link module:utils/observablemixin~ObservableMixin#decorate a decorated method}.\\n * It means that you can add listeners to implement your specific rules which are not limited by the declarative\\n * {@link module:engine/model/schema~SchemaItemDefinition API}.\\n *\\n * Those listeners can be added either by listening directly to the {@link ~Schema#event:checkChild} event or\\n * by using the handy {@link ~Schema#addChildCheck} method.\\n *\\n * For instance, the block quote feature defines such a listener to disallow nested `<blockQuote>` structures:\\n *\\n *\\t\\tschema.addChildCheck( context, childDefinition ) => {\\n *\\t\\t\\t// Note that context is automatically normalized to SchemaContext instance and\\n *\\t\\t\\t// child to its definition (SchemaCompiledItemDefinition).\\n *\\n *\\t\\t\\t// If checkChild() is called with a context that ends with blockQuote and blockQuote as a child\\n *\\t\\t\\t// to check, make the checkChild() method return false.\\n *\\t\\t\\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'blockQuote' ) {\\n *\\t\\t\\t\\treturn false;\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * ## Defining attributes\\n *\\n * TODO\\n *\\n * ## Implementing additional constraints\\n *\\n * Schema's capabilities were limited to simple (and atomic) {@link ~Schema#checkChild} and\\n * {@link ~Schema#checkAttribute} checks on purpose.\\n * One may imagine that schema should support defining more complex rules such as\\n * \\\"element `<x>` must be always followed by `<y>`\\\".\\n * While it is feasible to create an API which would enable feeding the schema with such definitions,\\n * it is unfortunately unrealistic to then expect that every editing feature will consider those rules when processing the model.\\n * It is also unrealistic to expect that it will be done automatically by the schema and the editing engine themselves.\\n *\\n * For instance, let's get back to the \\\"element `<x>` must be always followed by `<y>`\\\" rule and this initial content:\\n *\\n *\\t\\t<$root>\\n *\\t\\t\\t<x>foo</x>\\n *\\t\\t\\t<y>bar[bom</y>\\n *\\t\\t\\t<z>bom]bar</z>\\n *\\t\\t</$root>\\n *\\n * Now, imagine that the user presses the \\\"block quote\\\" button. Usually it would wrap the two selected blocks\\n * (`<y>` and `<z>`) with a `<blockQuote>` element:\\n *\\n *\\t\\t<$root>\\n *\\t\\t\\t<x>foo</x>\\n *\\t\\t\\t<blockQuote>\\n *\\t\\t\\t\\t<y>bar[bom</y>\\n *\\t\\t\\t\\t<z>bom]bar</z>\\n *\\t\\t\\t</blockQuote>\\n *\\t\\t</$root>\\n *\\n * But it turns out that this creates an incorrect structure – `<x>` is not followed by `<y>` anymore.\\n *\\n * What should happen instead? There are at least 4 possible solutions: the block quote feature should not be\\n * applicable in such a context, someone should create a new `<y>` right after `<x>`, `<x>` should be moved\\n * inside `<blockQuote>` together with `<y>` or vice versa.\\n *\\n * While this is a relatively simple scenario (unlike most real-time collaboration scenarios),\\n * it turns out that it's already hard to say what should happen and who should react to fix this content.\\n *\\n * Therefore, if your editor needs to implement such rules, you should do that through model's post-fixers\\n * fixing incorrect content or actively prevent such situations (e.g. by disabling certain features).\\n * It means that those constraints will be defined specifically for your scenario by your code which\\n * makes their implementation much easier.\\n *\\n * So the answer for who and how should implement additional constraints is your features or your editor\\n * through CKEditor 5's rich and open API.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Schema {\\n\\t/**\\n\\t * Creates schema instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\tthis._sourceDefinitions = {};\\n\\n\\t\\tthis.decorate( 'checkChild' );\\n\\t\\tthis.decorate( 'checkAttribute' );\\n\\n\\t\\tthis.on( 'checkAttribute', ( evt, args ) => {\\n\\t\\t\\targs[ 0 ] = new SchemaContext( args[ 0 ] );\\n\\t\\t}, { priority: 'highest' } );\\n\\n\\t\\tthis.on( 'checkChild', ( evt, args ) => {\\n\\t\\t\\targs[ 0 ] = new SchemaContext( args[ 0 ] );\\n\\t\\t\\targs[ 1 ] = this.getDefinition( args[ 1 ] );\\n\\t\\t}, { priority: 'highest' } );\\n\\t}\\n\\n\\t/**\\n\\t * Registers schema item. Can only be called once for every item name.\\n\\t *\\n\\t *\\t\\tschema.register( 'paragraph', {\\n\\t *\\t\\t\\tinheritAllFrom: '$block'\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @param {String} itemName\\n\\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\\n\\t */\\n\\tregister( itemName, definition ) {\\n\\t\\tif ( this._sourceDefinitions[ itemName ] ) {\\n\\t\\t\\t// TODO docs\\n\\t\\t\\tthrow new CKEditorError( 'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.', {\\n\\t\\t\\t\\titemName\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tthis._sourceDefinitions[ itemName ] = [\\n\\t\\t\\tObject.assign( {}, definition )\\n\\t\\t];\\n\\n\\t\\tthis._clearCache();\\n\\t}\\n\\n\\t/**\\n\\t * Extends a {@link #register registered} item's definition.\\n\\t *\\n\\t * Extending properties such as `allowIn` will add more items to the existing properties,\\n\\t * while redefining properties such as `isBlock` will override the previously defined ones.\\n\\t *\\n\\t *\\t\\tschema.register( 'foo', {\\n\\t *\\t\\t\\tallowIn: '$root',\\n\\t *\\t\\t\\tisBlock: true;\\n\\t *\\t\\t} );\\n\\t *\\t\\tschema.extend( 'foo', {\\n\\t *\\t\\t\\tallowIn: 'blockQuote',\\n\\t *\\t\\t\\tisBlock: false\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\tschema.getDefinition( 'foo' );\\n\\t *\\t\\t//\\t{\\n\\t *\\t\\t//\\t\\tallowIn: [ '$root', 'blockQuote' ],\\n\\t *\\t\\t// \\t\\tisBlock: false\\n\\t *\\t\\t//\\t}\\n\\t *\\n\\t * @param {String} itemName\\n\\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\\n\\t */\\n\\textend( itemName, definition ) {\\n\\t\\tif ( !this._sourceDefinitions[ itemName ] ) {\\n\\t\\t\\t// TODO docs\\n\\t\\t\\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', {\\n\\t\\t\\t\\titemName\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\\n\\n\\t\\tthis._clearCache();\\n\\t}\\n\\n\\t/**\\n\\t * Returns all registered items.\\n\\t *\\n\\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\\n\\t */\\n\\tgetDefinitions() {\\n\\t\\tif ( !this._compiledDefinitions ) {\\n\\t\\t\\tthis._compile();\\n\\t\\t}\\n\\n\\t\\treturn this._compiledDefinitions;\\n\\t}\\n\\n\\t/**\\n\\t * Returns a definition of the given item or `undefined` if item is not registered.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\\n\\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\\n\\t */\\n\\tgetDefinition( item ) {\\n\\t\\tlet itemName;\\n\\n\\t\\tif ( typeof item == 'string' ) {\\n\\t\\t\\titemName = item;\\n\\t\\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\\n\\t\\t\\titemName = '$text';\\n\\t\\t}\\n\\t\\t// Element or module:engine/model/schema~SchemaContextItem.\\n\\t\\telse {\\n\\t\\t\\titemName = item.name;\\n\\t\\t}\\n\\n\\t\\treturn this.getDefinitions()[ itemName ];\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if the given item is registered in the schema.\\n\\t *\\n\\t *\\t\\tschema.isRegistered( 'paragraph' ); // -> true\\n\\t *\\t\\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\\n\\t *\\t\\tschema.isRegistered( 'foo' ); // -> false\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\\n\\t */\\n\\tisRegistered( item ) {\\n\\t\\treturn !!this.getDefinition( item );\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if the given item is defined to be\\n\\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\\n\\t *\\n\\t *\\t\\tschema.isBlock( 'paragraph' ); // -> true\\n\\t *\\t\\tschema.isBlock( '$root' ); // -> false\\n\\t *\\n\\t *\\t\\tconst paragraphElement = writer.createElement( 'paragraph' );\\n\\t *\\t\\tschema.isBlock( paragraphElement ); // -> true\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\\n\\t */\\n\\tisBlock( item ) {\\n\\t\\tconst def = this.getDefinition( item );\\n\\n\\t\\treturn !!( def && def.isBlock );\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if the given item is defined to be\\n\\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` property.\\n\\t *\\n\\t *\\t\\tschema.isLimit( 'paragraph' ); // -> false\\n\\t *\\t\\tschema.isLimit( '$root' ); // -> true\\n\\t *\\t\\tschema.isLimit( editor.model.document.getRoot() ); // -> true\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\\n\\t */\\n\\tisLimit( item ) {\\n\\t\\tconst def = this.getDefinition( item );\\n\\n\\t\\treturn !!( def && def.isLimit );\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` if the given item is defined to be\\n\\t * a object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\\n\\t *\\n\\t *\\t\\tschema.isObject( 'paragraph' ); // -> false\\n\\t *\\t\\tschema.isObject( 'image' ); // -> true\\n\\t *\\n\\t *\\t\\tconst imageElement = writer.createElement( 'image' );\\n\\t *\\t\\tschema.isObject( imageElement ); // -> true\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\\n\\t */\\n\\tisObject( item ) {\\n\\t\\tconst def = this.getDefinition( item );\\n\\n\\t\\treturn !!( def && def.isObject );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the given node (`child`) can be a child of the given context.\\n\\t *\\n\\t *\\t\\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\\n\\t *\\n\\t *\\t\\tschema.register( 'paragraph', {\\n\\t *\\t\\t\\tallowIn: '$root'\\n\\t *\\t\\t} );\\n\\t *\\t\\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\\n\\t *\\n\\t * @fires checkChild\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} context Context in which the child will be checked.\\n\\t * @param {module:engine/model/node~Node|String} def The child to check.\\n\\t */\\n\\tcheckChild( context, def ) {\\n\\t\\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\\n\\t\\tif ( !def ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn this._checkContextMatch( def, context );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the given attribute can be applied in the given context (on the last\\n\\t * item of the context).\\n\\t *\\n\\t *\\t\\tschema.checkAttribute( textNode, 'bold' ); // -> false\\n\\t *\\n\\t *\\t\\tschema.extend( '$text', {\\n\\t *\\t\\t\\tallowAttributes: 'bold'\\n\\t *\\t\\t} );\\n\\t *\\t\\tschema.checkAttribute( textNode, 'bold' ); // -> true\\n\\t *\\n\\t * @fires checkAttribute\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} context Context in which the attribute will be checked.\\n\\t * @param {String} attributeName\\n\\t */\\n\\tcheckAttribute( context, attributeName ) {\\n\\t\\tconst def = this.getDefinition( context.last );\\n\\n\\t\\tif ( !def ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn def.allowAttributes.includes( attributeName );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\\n\\t *\\n\\t * In other words – whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\\n\\t *\\n\\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\\n\\t * will be valid.\\n\\t *\\n\\t * Instead of elements, you can pass the instance of {@link module:engine/model/position~Position} class as the `positionOrBaseElement`.\\n\\t * It means that the elements before and after the position will be checked whether they can be merged.\\n\\t *\\n\\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\\n\\t * element to which the `elementToMerge` will be merged.\\n\\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is a element.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\\n\\t\\tif ( positionOrBaseElement instanceof Position ) {\\n\\t\\t\\tconst nodeBefore = positionOrBaseElement.nodeBefore;\\n\\t\\t\\tconst nodeAfter = positionOrBaseElement.nodeAfter;\\n\\n\\t\\t\\tif ( !( nodeBefore instanceof Element ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * The node before the merge position must be an element.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error schema-check-merge-no-element-before\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'schema-check-merge-no-element-before: The node before the merge position must be an element.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( !( nodeAfter instanceof Element ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * The node after the merge position must be an element.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error schema-check-merge-no-element-after\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'schema-check-merge-no-element-after: The node after the merge position must be an element.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.checkMerge( nodeBefore, nodeAfter );\\n\\t\\t}\\n\\n\\t\\tfor ( const child of elementToMerge.getChildren() ) {\\n\\t\\t\\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Allows registering a callback to the {@link #checkChild} method calls.\\n\\t *\\n\\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\\n\\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\\n\\t * For example, by using this method you can disallow elements in specific contexts.\\n\\t *\\n\\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\\n\\t * you can use that event instead.\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *\\t\\t// Disallow heading1 directly inside a blockQuote.\\n\\t *\\t\\tschema.addChildCheck( ( context, childDefinition ) => {\\n\\t *\\t\\t\\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\\n\\t *\\t\\t\\t\\treturn false;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * Which translates to:\\n\\t *\\n\\t *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n\\t *\\t\\t\\tconst context = args[ 0 ];\\n\\t *\\t\\t\\tconst childDefinition = args[ 1 ];\\n\\t *\\n\\t *\\t\\t\\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\\n\\t *\\t\\t\\t\\t// Prevent next listeners from being called.\\n\\t *\\t\\t\\t\\tevt.stop();\\n\\t *\\t\\t\\t\\t// Set the checkChild()'s return value.\\n\\t *\\t\\t\\t\\tevt.return = false;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}, { priority: 'high' } );\\n\\t *\\n\\t * @param {Function} callback The callback to be called. It is called with two parameters:\\n\\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\\n\\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\\n\\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\\n\\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\\n\\t */\\n\\taddChildCheck( callback ) {\\n\\t\\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\\n\\t\\t\\t// checkChild() was called with a non-registered child.\\n\\t\\t\\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\\n\\t\\t\\t// don't even execute them.\\n\\t\\t\\tif ( !childDef ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst retValue = callback( ctx, childDef );\\n\\n\\t\\t\\tif ( typeof retValue == 'boolean' ) {\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t\\tevt.return = retValue;\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\t}\\n\\n\\t/**\\n\\t * Allows registering a callback to the {@link #checkAttribute} method calls.\\n\\t *\\n\\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\\n\\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\\n\\t * For example, by using this method you can disallow attribute if node to which it is applied\\n\\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\\n\\t *\\n\\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\\n\\t * you can use that event instead.\\n\\t *\\n\\t * Example:\\n\\t *\\n\\t *\\t\\t// Disallow bold on $text inside heading1.\\n\\t *\\t\\tschema.addChildCheck( ( context, attributeName ) => {\\n\\t *\\t\\t\\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\\n\\t *\\t\\t\\t\\treturn false;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * Which translates to:\\n\\t *\\n\\t *\\t\\tschema.on( 'checkAttribute', ( evt, args ) => {\\n\\t *\\t\\t\\tconst context = args[ 0 ];\\n\\t *\\t\\t\\tconst attributeName = args[ 1 ];\\n\\t *\\n\\t *\\t\\t\\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\\n\\t *\\t\\t\\t\\t// Prevent next listeners from being called.\\n\\t *\\t\\t\\t\\tevt.stop();\\n\\t *\\t\\t\\t\\t// Set the checkAttribute()'s return value.\\n\\t *\\t\\t\\t\\tevt.return = false;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}, { priority: 'high' } );\\n\\t *\\n\\t * @param {Function} callback The callback to be called. It is called with two parameters:\\n\\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\\n\\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\\n\\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\\n\\t */\\n\\taddAttributeCheck( callback ) {\\n\\t\\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\\n\\t\\t\\tconst retValue = callback( ctx, attributeName );\\n\\n\\t\\t\\tif ( typeof retValue == 'boolean' ) {\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t\\tevt.return = retValue;\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\\n\\t * selection or the root otherwise.\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection} selection Selection which returns the common ancestor.\\n\\t * @returns {module:engine/model/element~Element}\\n\\t */\\n\\tgetLimitElement( selection ) {\\n\\t\\t// Find the common ancestor for all selection's ranges.\\n\\t\\tlet element = Array.from( selection.getRanges() )\\n\\t\\t\\t.reduce( ( element, range ) => {\\n\\t\\t\\t\\tconst rangeCommonAncestor = range.getCommonAncestor();\\n\\n\\t\\t\\t\\tif ( !element ) {\\n\\t\\t\\t\\t\\treturn rangeCommonAncestor;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\\n\\t\\t\\t}, null );\\n\\n\\t\\twhile ( !this.isLimit( element ) ) {\\n\\t\\t\\tif ( element.parent ) {\\n\\t\\t\\t\\telement = element.parent;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn element;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the attribute is allowed in selection:\\n\\t *\\n\\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\\n\\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\\n\\t * specified attribute allowed.\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection} selection Selection which will be checked.\\n\\t * @param {String} attribute The name of the attribute to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\tcheckAttributeInSelection( selection, attribute ) {\\n\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t// Check whether schema allows for a text with the attribute in the selection.\\n\\t\\t\\treturn this.checkAttribute( [ ...selection.getFirstPosition().getAncestors(), '$text' ], attribute );\\n\\t\\t} else {\\n\\t\\t\\tconst ranges = selection.getRanges();\\n\\n\\t\\t\\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\\n\\t\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\t\\tfor ( const value of range ) {\\n\\t\\t\\t\\t\\tif ( this.checkAttribute( value.item, attribute ) ) {\\n\\t\\t\\t\\t\\t\\t// If we found a node that is allowed to have the attribute, return true.\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// If we haven't found such node, return false.\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\\n\\t *\\n\\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\\n\\t * @param {String} attribute The name of the attribute to check.\\n\\t * @returns {Array.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\\n\\t */\\n\\tgetValidRanges( ranges, attribute ) {\\n\\t\\tconst validRanges = [];\\n\\n\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\tlet last = range.start;\\n\\t\\t\\tlet from = range.start;\\n\\t\\t\\tconst to = range.end;\\n\\n\\t\\t\\tfor ( const value of range.getWalker() ) {\\n\\t\\t\\t\\tif ( !this.checkAttribute( value.item, attribute ) ) {\\n\\t\\t\\t\\t\\tif ( !from.isEqual( last ) ) {\\n\\t\\t\\t\\t\\t\\tvalidRanges.push( new Range( from, last ) );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfrom = value.nextPosition;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlast = value.nextPosition;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( from && !from.isEqual( to ) ) {\\n\\t\\t\\t\\tvalidRanges.push( new Range( from, to ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn validRanges;\\n\\t}\\n\\n\\t/**\\n\\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range Range} instance that is\\n\\t * nearest to that `position` and is a correct range for selection.\\n\\t *\\n\\t * Correct selection range might be collapsed - when it's located in position where text node can be placed.\\n\\t * Non-collapsed range is returned when selection can be placed around element marked as \\\"object\\\" in\\n\\t * {@link module:engine/model/schema~Schema schema}.\\n\\t *\\n\\t * Direction of searching for nearest correct selection range can be specified as:\\n\\t * * `both` - searching will be performed in both ways,\\n\\t * * `forward` - searching will be performed only forward,\\n\\t * * `backward` - searching will be performed only backward.\\n\\t *\\n\\t * When valid selection range cannot be found, `null` is returned.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\\n\\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\\n\\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\\n\\t */\\n\\tgetNearestSelectionRange( position, direction = 'both' ) {\\n\\t\\t// Return collapsed range if provided position is valid.\\n\\t\\tif ( this.checkChild( position, '$text' ) ) {\\n\\t\\t\\treturn new Range( position );\\n\\t\\t}\\n\\n\\t\\tlet backwardWalker, forwardWalker;\\n\\n\\t\\tif ( direction == 'both' || direction == 'backward' ) {\\n\\t\\t\\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\\n\\t\\t}\\n\\n\\t\\tif ( direction == 'both' || direction == 'forward' ) {\\n\\t\\t\\tforwardWalker = new TreeWalker( { startPosition: position } );\\n\\t\\t}\\n\\n\\t\\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\\n\\t\\t\\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\\n\\t\\t\\tconst value = data.value;\\n\\n\\t\\t\\tif ( value.type == type && this.isObject( value.item ) ) {\\n\\t\\t\\t\\treturn Range.createOn( value.item );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\\n\\t\\t\\t\\treturn new Range( value.nextPosition );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Tries to find position ancestors that allows to insert given node.\\n\\t * It starts searching from the given position and goes node by node to the top of the model tree\\n\\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\\n\\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\\n\\t *\\n\\t * @params {module:engine/model/node~Node} node Node for which allowed parent should be found.\\n\\t * @params {module:engine/model/position~Position} position Position from searching will start.\\n\\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\\n\\t */\\n\\tfindAllowedParent( node, position ) {\\n\\t\\tlet parent = position.parent;\\n\\n\\t\\twhile ( parent ) {\\n\\t\\t\\tif ( this.checkChild( parent, node ) ) {\\n\\t\\t\\t\\treturn parent;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Do not split limit elements and objects.\\n\\t\\t\\tif ( this.isLimit( parent ) || this.isObject( parent ) ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\tparent = parent.parent;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Removes attributes disallowed by the schema.\\n\\t *\\n\\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\\n\\t * @param {module:engine/model/writer~Writer} writer\\n\\t */\\n\\tremoveDisallowedAttributes( nodes, writer ) {\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\tfor ( const attribute of node.getAttributeKeys() ) {\\n\\t\\t\\t\\tif ( !this.checkAttribute( node, attribute ) ) {\\n\\t\\t\\t\\t\\twriter.removeAttribute( attribute, node );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( node.is( 'element' ) ) {\\n\\t\\t\\t\\tthis.removeDisallowedAttributes( node.getChildren(), writer );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t */\\n\\t_clearCache() {\\n\\t\\tthis._compiledDefinitions = null;\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t */\\n\\t_compile() {\\n\\t\\tconst compiledDefinitions = {};\\n\\t\\tconst sourceRules = this._sourceDefinitions;\\n\\t\\tconst itemNames = Object.keys( sourceRules );\\n\\n\\t\\tfor ( const itemName of itemNames ) {\\n\\t\\t\\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\\n\\t\\t}\\n\\n\\t\\tfor ( const itemName of itemNames ) {\\n\\t\\t\\tcompileAllowContentOf( compiledDefinitions, itemName );\\n\\t\\t}\\n\\n\\t\\tfor ( const itemName of itemNames ) {\\n\\t\\t\\tcompileAllowWhere( compiledDefinitions, itemName );\\n\\t\\t}\\n\\n\\t\\tfor ( const itemName of itemNames ) {\\n\\t\\t\\tcompileAllowAttributesOf( compiledDefinitions, itemName );\\n\\t\\t\\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\\n\\t\\t}\\n\\n\\t\\tfor ( const itemName of itemNames ) {\\n\\t\\t\\tcleanUpAllowIn( compiledDefinitions, itemName );\\n\\t\\t\\tcleanUpAllowAttributes( compiledDefinitions, itemName );\\n\\t\\t}\\n\\n\\t\\tthis._compiledDefinitions = compiledDefinitions;\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\\n\\t * @param {module:engine/model/schema~SchemaContext} context\\n\\t * @param {Number} contextItemIndex\\n\\t */\\n\\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\\n\\t\\tconst contextItem = context.getItem( contextItemIndex );\\n\\n\\t\\tif ( def.allowIn.includes( contextItem.name ) ) {\\n\\t\\t\\tif ( contextItemIndex == 0 ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst parentRule = this.getDefinition( contextItem );\\n\\n\\t\\t\\t\\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n}\\n\\nmix( Schema, ObservableMixin );\\n\\n/**\\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\\n *\\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\\n * in most of the cases.\\n *\\n * The {@link #checkChild} method fires an event because it is\\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\\n * `checkChild()` method. Let's see a typical listener template:\\n *\\n *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst childDefinition = args[ 1 ];\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\\n * the various ways how `context` and `child` may be passed to `checkChild()`.\\n *\\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\\n *\\n * So, in order to implement a rule \\\"disallow `heading1` in `blockQuote`\\\" you can add such a listener:\\n *\\n *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst childDefinition = args[ 1 ];\\n *\\n *\\t\\t\\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\\n *\\t\\t\\t\\t// Prevent next listeners from being called.\\n *\\t\\t\\t\\tevt.stop();\\n *\\t\\t\\t\\t// Set the checkChild()'s return value.\\n *\\t\\t\\t\\tevt.return = false;\\n *\\t\\t\\t}\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\\n *\\n *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst childDefinition = args[ 1 ];\\n *\\n *\\t\\t\\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\\n *\\t\\t\\t\\t// Prevent next listeners from being called.\\n *\\t\\t\\t\\tevt.stop();\\n *\\t\\t\\t\\t// Set the checkChild()'s return value.\\n *\\t\\t\\t\\tevt.return = true;\\n *\\t\\t\\t}\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * @event checkChild\\n * @param {Array} args The `checkChild()`'s arguments.\\n */\\n\\n/**\\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\\n *\\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\\n * in most of the cases.\\n *\\n * The {@link #checkAttribute} method fires an event because it's\\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\\n * `checkAttribute()` method. Let's see a typical listener template:\\n *\\n *\\t\\tschema.on( 'checkAttribute', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst attributeName = args[ 1 ];\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\\n * the various ways how `context` may be passed to `checkAttribute()`.\\n *\\n * So, in order to implement a rule \\\"disallow `bold` in a text which is in a `heading1` you can add such a listener:\\n *\\n *\\t\\tschema.on( 'checkAttribute', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst atributeName = args[ 1 ];\\n *\\n *\\t\\t\\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\\n *\\t\\t\\t\\t// Prevent next listeners from being called.\\n *\\t\\t\\t\\tevt.stop();\\n *\\t\\t\\t\\t// Set the checkAttribute()'s return value.\\n *\\t\\t\\t\\tevt.return = false;\\n *\\t\\t\\t}\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\\n *\\n *\\t\\tschema.on( 'checkAttribute', ( evt, args ) => {\\n *\\t\\t\\tconst context = args[ 0 ];\\n *\\t\\t\\tconst atributeName = args[ 1 ];\\n *\\n *\\t\\t\\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\\n *\\t\\t\\t\\t// Prevent next listeners from being called.\\n *\\t\\t\\t\\tevt.stop();\\n *\\t\\t\\t\\t// Set the checkAttribute()'s return value.\\n *\\t\\t\\t\\tevt.return = true;\\n *\\t\\t\\t}\\n *\\t\\t}, { priority: 'high' } );\\n *\\n * @event checkAttribute\\n * @param {Array} args The `checkAttribute()`'s arguments.\\n */\\n\\n/**\\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\\n *\\n * You can define the following rules:\\n *\\n * * `allowIn` – a string or an array of strings. Defines in which other items this item will be allowed.\\n * * `allowAttributes` – a string or an array of strings. Defines allowed attributes of the given item.\\n * * `allowContentOf` – a string or an array of strings. Inherit \\\"allowed children\\\" from other items.\\n * * `allowWhere` – a string or an array of strings. Inherit \\\"allowed in\\\" from other items.\\n * * `allowAttributesOf` – a string or an array of strings. Inherit attributes from other items.\\n * * `inheritTypesFrom` – a string or an array of strings. Inherit `is*` properties of other items.\\n * * `inheritAllFrom` – a string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\\n * * additionall, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`. Read about them below.\\n *\\n * # The is* properties\\n *\\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\\n * You can define more properties but you will also need to implement support for them in the existing editor features.\\n *\\n * * `isBlock` – whether this item is paragraph-like. Generally speaking, a content is usually made out of blocks\\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\\n * should not allow another block inside. Note: there's also the `$block` generic item which has `isBlock` set to `true`.\\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\\n * * `isLimit` – can be understood as whether this element should not be split by <kbd>Enter</kbd>.\\n * Examples of limit elements – `$root`, table cell, image caption, etc. In other words, all actions which happen inside\\n * a limit element are limitted to its content.\\n * * `isObject` – whether item is \\\"self-contained\\\" and should be treated as a whole. Examples of object elements –\\n * `image`, `table`, `video`, etc.\\n *\\n * # Generic items\\n *\\n * There are three basic generic items: `$root`, `$block` and `$text`.\\n * They are defined as follows:\\n *\\n *\\t\\tthis.schema.register( '$root', {\\n *\\t\\t\\tisLimit: true\\n *\\t\\t} );\\n *\\t\\tthis.schema.register( '$block', {\\n *\\t\\t\\tallowIn: '$root',\\n *\\t\\t\\tisBlock: true\\n *\\t\\t} );\\n *\\t\\tthis.schema.register( '$text', {\\n *\\t\\t\\tallowIn: '$block'\\n *\\t\\t} );\\n *\\n * They reflect a typical editor content which is contained within one root, consists of several blocks\\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\\n *\\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\\n * Read more about generic types in the {@linkTODO Defining schema} guide.\\n *\\n * # Example definitions\\n *\\n * Allow `paragraph` in roots and block quotes:\\n *\\n *\\t\\tschema.register( 'paragraph', {\\n *\\t\\t\\tallowIn: [ '$root', 'blockQuote' ],\\n *\\t\\t\\tisBlock: true\\n *\\t\\t} );\\n *\\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\\n *\\n *\\t\\tschema.register( 'paragraph', {\\n *\\t\\t\\tallowWhere: '$block',\\n *\\t\\t\\tisBlock: true\\n *\\t\\t} );\\n *\\n * Make `image` a block object, which is allowed everywhere where `$block` is.\\n * Also, allow `src` and `alt` attributes on it:\\n *\\n *\\t\\tschema.register( 'image', {\\n *\\t\\t\\tallowWhere: '$block',\\n *\\t\\t\\tallowAttributes: [ 'src', 'alt' ],\\n *\\t\\t\\tisBlock: true,\\n *\\t\\t\\tisObject: true\\n *\\t\\t} );\\n *\\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\\n * Also, mark it as a limit element so it can't be split:\\n *\\n *\\t\\tschema.register( 'caption', {\\n *\\t\\t\\tallowIn: 'image',\\n *\\t\\t\\tallowContentOf: '$block',\\n *\\t\\t\\tisLimit: true\\n *\\t\\t} );\\n *\\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\\n *\\n *\\t\\tschema.register( 'listItem', {\\n *\\t\\t\\tinheritAllFrom: '$block',\\n *\\t\\t\\tallowAttributes: [ 'type', 'indent' ]\\n *\\t\\t} );\\n *\\n * Which translates to:\\n *\\n *\\t\\tschema.register( 'listItem', {\\n *\\t\\t\\tallowWhere: '$block',\\n *\\t\\t\\tallowContentOf: '$block',\\n *\\t\\t\\tallowAttributesOf: '$block',\\n *\\t\\t\\tinheritTypesFrom: '$block',\\n *\\t\\t\\tallowAttributes: [ 'type', 'indent' ]\\n *\\t\\t} );\\n *\\n * # Tips\\n *\\n * * Check schema definitions of existing features to see how they are defined.\\n * * If you want to publish your feature so other developers can use it, try to use\\n * generic items as much as possible.\\n * * Keep your model clean – limit it to the actual data and store information in an normalized way.\\n * * Remember about definining the `is*` properties. They don't affect the allowed structures, but they can\\n * affect how editor features treat your elements.\\n *\\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\\n */\\n\\n/**\\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\\n * compilation by the {@link module:engine/model/schema~Schema schema}.\\n * Rules feed to the schema by {@link module:engine/model/schema~Schema#register}\\n * and {@link module:engine/model/schema~Schema#extend} are defined in the\\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\\n *\\n * The compiled version contains only the following properties:\\n *\\n * * `name` property,\\n * * `is*` properties,\\n * * `allowIn` array,\\n * * `allowAttributes` array.\\n *\\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\\n */\\n\\n/**\\n * A schema context – a list of ancestors of a given position in the document.\\n *\\n * Considering such a position:\\n *\\n *\\t\\t<$root>\\n *\\t\\t\\t<blockQuote>\\n *\\t\\t\\t\\t<paragraph>\\n *\\t\\t\\t\\t\\t^\\n *\\t\\t\\t\\t</paragraph>\\n *\\t\\t\\t</blockQuote>\\n *\\t\\t</$root>\\n *\\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\\n *\\n *\\t\\t[ rootElement, blockQuoteElement, paragraphElement ]\\n *\\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\\n */\\nexport class SchemaContext {\\n\\t/**\\n\\t * Creates an instance of the context.\\n\\t *\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} context\\n\\t */\\n\\tconstructor( context ) {\\n\\t\\tif ( context instanceof SchemaContext ) {\\n\\t\\t\\treturn context;\\n\\t\\t}\\n\\n\\t\\tif ( typeof context == 'string' ) {\\n\\t\\t\\tcontext = [ context ];\\n\\t\\t} else if ( !Array.isArray( context ) ) {\\n\\t\\t\\t// `context` is item or position.\\n\\t\\t\\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\\n\\t\\t\\tcontext = context.getAncestors( { includeSelf: true } );\\n\\t\\t}\\n\\n\\t\\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\\n\\t\\t\\tcontext.shift();\\n\\t\\t}\\n\\n\\t\\tthis._items = context.map( mapContextItem );\\n\\t}\\n\\n\\t/**\\n\\t * Number of items.\\n\\t *\\n\\t * @type {Number}\\n\\t */\\n\\tget length() {\\n\\t\\treturn this._items.length;\\n\\t}\\n\\n\\t/**\\n\\t * The last item (the lowest node).\\n\\t *\\n\\t * @type {module:engine/model/schema~SchemaContextItem}\\n\\t */\\n\\tget last() {\\n\\t\\treturn this._items[ this._items.length - 1 ];\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over all context items.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._items[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Returns new SchemaContext instance with additional item\\n\\t *\\n\\t * Item can be added as:\\n\\t *\\n\\t * \\t\\tconst context = new SchemaContext( [ '$root' ] );\\n\\t *\\n\\t * \\t\\t// An element.\\n\\t * \\t\\tconst fooElement = writer.createElement( 'fooElement' );\\n\\t * \\t\\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\\n\\t *\\n\\t * \\t\\t// A text node.\\n\\t * \\t\\tconst text = writer.createText( 'foobar' );\\n\\t * \\t\\tconst newContext = context.push( text ); // [ '$root', '$text' ]\\n\\t *\\n\\t * \\t\\t// A string (element name).\\n\\t * \\t\\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\\n\\t *\\n\\t * **Note** {module:engine/model/node~Node} that is already in the model tree will be added as the only item (without ancestors).\\n\\t *\\n\\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item Item that will be added\\n\\t * to current context.\\n\\t * @returns {module:engine/model/schema~SchemaContext} New SchemaContext instance with additional item.\\n\\t */\\n\\tpush( item ) {\\n\\t\\tconst ctx = new SchemaContext( [ item ] );\\n\\n\\t\\tctx._items = [ ...this._items, ...ctx._items ];\\n\\n\\t\\treturn ctx;\\n\\t}\\n\\n\\t/**\\n\\t * Gets an item on the given index.\\n\\t *\\n\\t * @returns {module:engine/model/schema~SchemaContextItem}\\n\\t */\\n\\tgetItem( index ) {\\n\\t\\treturn this._items[ index ];\\n\\t}\\n\\n\\t/**\\n\\t * Returns the names of items.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\t* getNames() {\\n\\t\\tyield* this._items.map( item => item.name );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the context ends with the given nodes.\\n\\t *\\n\\t *\\t\\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\\n\\t *\\n\\t *\\t\\tctx.endsWith( '$text' ); // -> true\\n\\t *\\t\\tctx.endsWith( 'paragraph $text' ); // -> true\\n\\t *\\t\\tctx.endsWith( '$root' ); // -> false\\n\\t *\\t\\tctx.endsWith( 'paragraph' ); // -> false\\n\\t *\\n\\t * @param {String} query\\n\\t * @returns {Boolean}\\n\\t */\\n\\tendsWith( query ) {\\n\\t\\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\\n\\t}\\n}\\n\\n/**\\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\\n *\\n * Contexts can be created in multiple ways:\\n *\\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\\n * * By defining a **position** in the document – in this case all its ancestors will be used.\\n * * By defining an **array of nodes** – in this case this array defines the entire context.\\n * * By defining a **name of node** - in this case node will be \\\"mocked\\\". It is not recommended because context\\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\\n * way to define the context (e.g. when checking some hypothetical situation).\\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\\n * but it is possible to create a path.\\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\\n * will be return.\\n *\\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\\n * method:\\n *\\n *\\t\\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\\n *\\t\\t// will check node 'foo' in the following context:\\n *\\t\\t// [ rootElement, blockQuoteElement, paragraphElement ]\\n *\\t\\tconst contextDefinition = paragraphElement;\\n * \\t\\tconst childToCheck = 'foo';\\n *\\t\\tschema.checkChild( contextDefinition, childToCheck );\\n *\\n *\\t\\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\\n *\\t\\tschema.checkChild( Position.createAt( paragraphElement ), 'foo' );\\n *\\n *\\t\\t// Check in [ rootElement, paragraphElement ].\\n *\\t\\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\\n *\\n *\\t\\t// Check only fakeParagraphElement.\\n *\\t\\tschema.checkChild( 'paragraph', 'foo' );\\n *\\n *\\t\\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\\n *\\t\\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\\n *\\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\\n *\\n *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n *\\t\\t\\tconst ctx = args[ 0 ];\\n *\\n *\\t\\t\\tconsole.log( Array.from( ctx.getNames() ) );\\n *\\t\\t} );\\n *\\n * Which will log the following:\\n *\\n *\\t\\t[ '$root', 'blockQuote', 'paragraph' ]\\n *\\t\\t[ '$root', 'paragraph' ]\\n *\\t\\t[ '$root', 'bar', 'paragraph' ]\\n *\\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\\n * correct way to define a context so you can do this:\\n *\\n *\\t\\tschema.checkAttribute( textNode, 'bold' );\\n *\\n * But sometimes you want to check whether a text at a given position might've had some attribute,\\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\\n *\\n *\\t\\t// Check in [ rootElement, paragraphElement, textNode ].\\n *\\t\\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\\n *\\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\\n */\\n\\n/**\\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\\n *\\n * It contains 3 properties:\\n *\\n * * `name` – the name of this item,\\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\\n * * `getAttribute( keyName )` – a method to get attribute values.\\n *\\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\\n * node's attributes).\\n *\\n *\\t\\tschema.on( 'checkChild', ( evt, args ) => {\\n *\\t\\t\\tconst ctx = args[ 0 ];\\n *\\t\\t\\tconst firstItem = ctx.getItem( 0 );\\n *\\n *\\t\\t\\tconsole.log( firstItem.name ); // -> '$root'\\n *\\t\\t\\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\\n *\\t\\t\\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\\n *\\t\\t} );\\n *\\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\\n */\\n\\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\\n\\tconst itemRule = {\\n\\t\\tname: itemName,\\n\\n\\t\\tallowIn: [],\\n\\t\\tallowContentOf: [],\\n\\t\\tallowWhere: [],\\n\\n\\t\\tallowAttributes: [],\\n\\t\\tallowAttributesOf: [],\\n\\n\\t\\tinheritTypesFrom: []\\n\\t};\\n\\n\\tcopyTypes( sourceItemRules, itemRule );\\n\\n\\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\\n\\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\\n\\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\\n\\n\\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\\n\\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\\n\\n\\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\\n\\n\\tmakeInheritAllWork( sourceItemRules, itemRule );\\n\\n\\treturn itemRule;\\n}\\n\\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\\n\\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\\n\\t\\t// The allowContentOf property may point to an unregistered element.\\n\\t\\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\\n\\t\\t\\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\\n\\n\\t\\t\\tallowedChildren.forEach( allowedItem => {\\n\\t\\t\\t\\tallowedItem.allowIn.push( itemName );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\tdelete compiledDefinitions[ itemName ].allowContentOf;\\n}\\n\\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\\n\\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\\n\\t\\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\\n\\n\\t\\t// The allowWhere property may point to an unregistered element.\\n\\t\\tif ( inheritFrom ) {\\n\\t\\t\\tconst allowedIn = inheritFrom.allowIn;\\n\\n\\t\\t\\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\\n\\t\\t}\\n\\t}\\n\\n\\tdelete compiledDefinitions[ itemName ].allowWhere;\\n}\\n\\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\\n\\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\\n\\t\\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\\n\\n\\t\\tif ( inheritFrom ) {\\n\\t\\t\\tconst inheritAttributes = inheritFrom.allowAttributes;\\n\\n\\t\\t\\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\\n\\t\\t}\\n\\t}\\n\\n\\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\\n}\\n\\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\\n\\tconst item = compiledDefinitions[ itemName ];\\n\\n\\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\\n\\t\\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\\n\\n\\t\\tif ( inheritFrom ) {\\n\\t\\t\\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\\n\\n\\t\\t\\tfor ( const name of typeNames ) {\\n\\t\\t\\t\\tif ( !( name in item ) ) {\\n\\t\\t\\t\\t\\titem[ name ] = inheritFrom[ name ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tdelete item.inheritTypesFrom;\\n}\\n\\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\\n// Make sure allowIn doesn't contain repeated values.\\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\\n\\tconst itemRule = compiledDefinitions[ itemName ];\\n\\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\\n\\n\\titemRule.allowIn = Array.from( new Set( existingItems ) );\\n}\\n\\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\\n\\tconst itemRule = compiledDefinitions[ itemName ];\\n\\n\\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\\n}\\n\\nfunction copyTypes( sourceItemRules, itemRule ) {\\n\\tfor ( const sourceItemRule of sourceItemRules ) {\\n\\t\\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\\n\\n\\t\\tfor ( const name of typeNames ) {\\n\\t\\t\\titemRule[ name ] = sourceItemRule[ name ];\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\\n\\tfor ( const sourceItemRule of sourceItemRules ) {\\n\\t\\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\\n\\t\\t\\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\\n\\t\\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\\n\\t\\t\\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\\n\\tfor ( const sourceItemRule of sourceItemRules ) {\\n\\t\\tconst inheritFrom = sourceItemRule.inheritAllFrom;\\n\\n\\t\\tif ( inheritFrom ) {\\n\\t\\t\\titemRule.allowContentOf.push( inheritFrom );\\n\\t\\t\\titemRule.allowWhere.push( inheritFrom );\\n\\t\\t\\titemRule.allowAttributesOf.push( inheritFrom );\\n\\t\\t\\titemRule.inheritTypesFrom.push( inheritFrom );\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\\n\\tconst itemRule = compiledDefinitions[ itemName ];\\n\\n\\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\\n}\\n\\nfunction getValues( obj ) {\\n\\treturn Object.keys( obj ).map( key => obj[ key ] );\\n}\\n\\nfunction mapContextItem( ctxItem ) {\\n\\tif ( typeof ctxItem == 'string' ) {\\n\\t\\treturn {\\n\\t\\t\\tname: ctxItem,\\n\\n\\t\\t\\t* getAttributeKeys() {},\\n\\n\\t\\t\\tgetAttribute() {}\\n\\t\\t};\\n\\t} else {\\n\\t\\treturn {\\n\\t\\t\\t// '$text' means text nodes and text proxies.\\n\\t\\t\\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\\n\\n\\t\\t\\t* getAttributeKeys() {\\n\\t\\t\\t\\tyield* ctxItem.getAttributeKeys();\\n\\t\\t\\t},\\n\\n\\t\\t\\tgetAttribute( key ) {\\n\\t\\t\\t\\treturn ctxItem.getAttribute( key );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n}\\n\\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\\n// is provided it will return data only from that walker.\\n//\\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\\n// given value) fields.\\nfunction* combineWalkers( backward, forward ) {\\n\\tlet done = false;\\n\\n\\twhile ( !done ) {\\n\\t\\tdone = true;\\n\\n\\t\\tif ( backward ) {\\n\\t\\t\\tconst step = backward.next();\\n\\n\\t\\t\\tif ( !step.done ) {\\n\\t\\t\\t\\tdone = false;\\n\\t\\t\\t\\tyield {\\n\\t\\t\\t\\t\\twalker: backward,\\n\\t\\t\\t\\t\\tvalue: step.value\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( forward ) {\\n\\t\\t\\tconst step = forward.next();\\n\\n\\t\\t\\tif ( !step.done ) {\\n\\t\\t\\t\\tdone = false;\\n\\t\\t\\t\\tyield {\\n\\t\\t\\t\\t\\twalker: forward,\\n\\t\\t\\t\\t\\tvalue: step.value\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/upcastdispatcher\\n */\\n\\nimport ViewConsumable from './viewconsumable';\\nimport ModelRange from '../model/range';\\nimport ModelPosition from '../model/position';\\nimport { SchemaContext } from '../model/schema';\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\\n * {@link module:engine/view/element~Element} into another structure.\\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\\n *\\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \\\"converters\\\" should listen to\\n * `UpcastDispatcher` for those events.\\n *\\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\\n *\\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\\n * which provides additional tools for converters.\\n *\\n * Examples of providing callbacks for `UpcastDispatcher`:\\n *\\n *\\t\\t// Converter for links (<a>).\\n *\\t\\tupcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\\n *\\t\\t\\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\\n *\\t\\t\\t\\t// <a> element is inline and is represented by an attribute in the model.\\n *\\t\\t\\t\\t// This is why we need to convert only children.\\n *\\t\\t\\t\\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\\n *\\n *\\t\\t\\t\\tfor ( let item of modelRange.getItems() ) {\\n *\\t\\t\\t\\t\\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\\n *\\t\\t\\t\\t\\t\\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\\n *\\t\\t\\t\\t\\t}\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n *\\t\\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\\n *  \\tdata.viewToModel.on( 'element', ( evt, data, conversionApi ) => {\\n *  \\t \\t// When element is already consumed by higher priority converters then do nothing.\\n *  \\t \\tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\\n *  \\t \\t\\t\\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\\n *\\n *  \\t \\t\\t\\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\\n *  \\t \\t\\t\\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\\n *  \\t \\t\\t\\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\\n *\\n *  \\t \\t\\t\\t// When there is no split result it means that we can't insert paragraph in this position.\\n *  \\t \\t\\t\\tif ( splitResult ) {\\n *  \\t \\t\\t\\t\\t// Insert paragraph in allowed position.\\n *  \\t \\t\\t\\t\\tconversionApi.writer.insert( paragraph, splitResult.position );\\n *\\n *  \\t \\t\\t\\t\\t// Convert children to paragraph.\\n *  \\t \\t\\t\\t\\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, Position.createAt( paragraph ) );\\n *\\n * \\t\\t\\t\\t\\t\\t// Set as conversion result, attribute converters may use this property.\\n *  \\t \\t\\t\\t\\tdata.modelRange = new Range( Position.createBefore( paragraph ), modelRange.end );\\n *\\n *  \\t \\t\\t\\t\\t// Continue conversion inside paragraph.\\n *  \\t \\t\\t\\t\\tdata.modelCursor = data.modelRange.end;\\n *  \\t \\t\\t\\t}\\n *  \\t \\t\\t}\\n *  \\t \\t}\\n *  \\t }, { priority: 'low' } );\\n *\\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\\n * event which can be used to prepare tree view for conversion.\\n *\\n * @mixes module:utils/emittermixin~EmitterMixin\\n * @fires viewCleanup\\n * @fires element\\n * @fires text\\n * @fires documentFragment\\n */\\nexport default class UpcastDispatcher {\\n\\t/**\\n\\t * Creates a `UpcastDispatcher` that operates using passed API.\\n\\t *\\n\\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi\\n\\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\\n\\t * by `UpcastDispatcher`.\\n\\t */\\n\\tconstructor( conversionApi = {} ) {\\n\\t\\t/**\\n\\t\\t * List of elements that will be checked after conversion process and if element in the list will be empty it\\n\\t\\t * will be removed from conversion result.\\n\\t\\t *\\n\\t\\t * After conversion process list is cleared.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @type {Set<module:engine/model/element~Element>}\\n\\t\\t */\\n\\t\\tthis._removeIfEmpty = new Set();\\n\\n\\t\\t/**\\n\\t\\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\\n\\t\\t * the target position where the content will be inserted. This property is build based on the context parameter of the\\n\\t\\t * convert method.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {module:engine/model/position~Position|null}\\n\\t\\t */\\n\\t\\tthis._modelCursor = null;\\n\\n\\t\\t/**\\n\\t\\t * Interface passed by dispatcher to the events callbacks.\\n\\t\\t *\\n\\t\\t * @member {module:engine/conversion/upcastdispatcher~ViewConversionApi}\\n\\t\\t */\\n\\t\\tthis.conversionApi = Object.assign( {}, conversionApi );\\n\\n\\t\\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\\n\\t\\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\\n\\t\\tthis.conversionApi.convertItem = this._convertItem.bind( this );\\n\\t\\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\\n\\t\\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\\n\\t}\\n\\n\\t/**\\n\\t * Starts the conversion process. The entry point for the conversion.\\n\\t *\\n\\t * @fires element\\n\\t * @fires text\\n\\t * @fires documentFragment\\n\\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\\n\\t * Part of the view to be converted.\\n\\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\\n\\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\\n\\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\\n\\t */\\n\\tconvert( viewItem, writer, context = [ '$root' ] ) {\\n\\t\\tthis.fire( 'viewCleanup', viewItem );\\n\\n\\t\\t// Create context tree and set position in the top element.\\n\\t\\t// Items will be converted according to this position.\\n\\t\\tthis._modelCursor = createContextTree( context, writer );\\n\\n\\t\\t// Store writer in conversion as a conversion API\\n\\t\\t// to be sure that conversion process will use the same batch.\\n\\t\\tthis.conversionApi.writer = writer;\\n\\n\\t\\t// Create consumable values list for conversion process.\\n\\t\\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\\n\\n\\t\\t// Custom data stored by converter for conversion process.\\n\\t\\tthis.conversionApi.store = {};\\n\\n\\t\\t// Do the conversion.\\n\\t\\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\\n\\n\\t\\t// Conversion result is always a document fragment so let's create this fragment.\\n\\t\\tconst documentFragment = writer.createDocumentFragment();\\n\\n\\t\\t// When there is a conversion result.\\n\\t\\tif ( modelRange ) {\\n\\t\\t\\t// Remove all empty elements that was added to #_removeIfEmpty list.\\n\\t\\t\\tthis._removeEmptyElements();\\n\\n\\t\\t\\t// Move all items that was converted to context tree to document fragment.\\n\\t\\t\\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\\n\\t\\t\\t\\twriter.append( item, documentFragment );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Extract temporary markers elements from model and set as static markers collection.\\n\\t\\t\\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\\n\\t\\t}\\n\\n\\t\\t// Clear context position.\\n\\t\\tthis._modelCursor = null;\\n\\n\\t\\t// Clear split elements.\\n\\t\\tthis._removeIfEmpty.clear();\\n\\n\\t\\t// Clear conversion API.\\n\\t\\tthis.conversionApi.writer = null;\\n\\t\\tthis.conversionApi.store = null;\\n\\n\\t\\t// Return fragment as conversion result.\\n\\t\\treturn documentFragment;\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertItem\\n\\t */\\n\\t_convertItem( viewItem, modelCursor ) {\\n\\t\\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\\n\\n\\t\\tif ( viewItem.is( 'element' ) ) {\\n\\t\\t\\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\\n\\t\\t} else if ( viewItem.is( 'text' ) ) {\\n\\t\\t\\tthis.fire( 'text', data, this.conversionApi );\\n\\t\\t} else {\\n\\t\\t\\tthis.fire( 'documentFragment', data, this.conversionApi );\\n\\t\\t}\\n\\n\\t\\t// Handle incorrect conversion result.\\n\\t\\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Incorrect conversion result was dropped.\\n\\t\\t\\t *\\n\\t\\t\\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\\n\\t\\t\\t *\\n\\t\\t\\t * @error view-conversion-dispatcher-incorrect-result\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.' );\\n\\t\\t}\\n\\n\\t\\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertChildren\\n\\t */\\n\\t_convertChildren( viewItem, modelCursor ) {\\n\\t\\tconst modelRange = new ModelRange( modelCursor );\\n\\t\\tlet nextModelCursor = modelCursor;\\n\\n\\t\\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\\n\\t\\t\\tconst result = this._convertItem( viewChild, nextModelCursor );\\n\\n\\t\\t\\tif ( result.modelRange instanceof ModelRange ) {\\n\\t\\t\\t\\tmodelRange.end = result.modelRange.end;\\n\\t\\t\\t\\tnextModelCursor = result.modelCursor;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn { modelRange, modelCursor: nextModelCursor };\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#splitToAllowedParent\\n\\t */\\n\\t_splitToAllowedParent( node, modelCursor ) {\\n\\t\\t// Try to find allowed parent.\\n\\t\\tconst allowedParent = this.conversionApi.schema.findAllowedParent( node, modelCursor );\\n\\n\\t\\t// When there is no parent that allows to insert node then return `null`.\\n\\t\\tif ( !allowedParent ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// When current position parent allows to insert node then return this position.\\n\\t\\tif ( allowedParent === modelCursor.parent ) {\\n\\t\\t\\treturn { position: modelCursor };\\n\\t\\t}\\n\\n\\t\\t// When allowed parent is in context tree.\\n\\t\\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// Split element to allowed parent.\\n\\t\\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\\n\\n\\t\\t// Remember all elements that are created as a result of split.\\n\\t\\t// This is important because at the end of conversion we want to remove all empty split elements.\\n\\t\\t//\\n\\t\\t// Loop through positions between elements in range (except split result position) and collect parents.\\n\\t\\t// <notSplit><split1><split2>[pos]</split2>[pos]</split1>[omit]<split1>[pos]<split2>[pos]</split2></split1></notSplit>\\n\\t\\tfor ( const position of splitResult.range.getPositions() ) {\\n\\t\\t\\tif ( !position.isEqual( splitResult.position ) ) {\\n\\t\\t\\t\\tthis._removeIfEmpty.add( position.parent );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\tposition: splitResult.position,\\n\\t\\t\\tcursorParent: splitResult.range.end.parent\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Checks if {@link #_removeIfEmpty} contains empty elements and remove them.\\n\\t * We need to do it smart because there could be elements that are not empty because contains\\n\\t * other empty elements and after removing its children they become available to remove.\\n\\t * We need to continue iterating over split elements as long as any element will be removed.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_removeEmptyElements() {\\n\\t\\tlet removed = false;\\n\\n\\t\\tfor ( const element of this._removeIfEmpty ) {\\n\\t\\t\\tif ( element.isEmpty ) {\\n\\t\\t\\t\\tthis.conversionApi.writer.remove( element );\\n\\t\\t\\t\\tthis._removeIfEmpty.delete( element );\\n\\t\\t\\t\\tremoved = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( removed ) {\\n\\t\\t\\tthis._removeEmptyElements();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\\n\\t *\\n\\t * @event viewCleanup\\n\\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\\n\\t * viewItem Part of the view to be converted.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when {@link module:engine/view/element~Element} is converted.\\n\\t *\\n\\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\\n\\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\\n\\t * all elements conversion or to conversion of specific elements.\\n\\t *\\n\\t * @event element\\n\\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\\n\\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\\n\\t * be available in other callbacks.\\n\\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\\n\\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\\n\\t * Change this value for the next converter to tell where the conversion should continue.\\n\\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\\n\\t * converted element should be reflected by setting or modifying this property.\\n\\t * @param {ViewConversionApi} conversionApi Conversion utilities to be used by callback.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when {@link module:engine/view/text~Text} is converted.\\n\\t *\\n\\t * @event text\\n\\t * @see #event:element\\n\\t */\\n\\n\\t/**\\n\\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\\n\\t *\\n\\t * @event documentFragment\\n\\t * @see #event:element\\n\\t */\\n}\\n\\nmix( UpcastDispatcher, EmitterMixin );\\n\\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\\n// DocumentFragment but path of this element is stored in a Map which is then returned.\\n//\\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\\n\\tconst markerElements = new Set();\\n\\tconst markers = new Map();\\n\\n\\t// Create ModelTreeWalker.\\n\\tconst range = ModelRange.createIn( modelItem ).getItems();\\n\\n\\t// Walk through DocumentFragment and collect marker elements.\\n\\tfor ( const item of range ) {\\n\\t\\t// Check if current element is a marker.\\n\\t\\tif ( item.name == '$marker' ) {\\n\\t\\t\\tmarkerElements.add( item );\\n\\t\\t}\\n\\t}\\n\\n\\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\\n\\tfor ( const markerElement of markerElements ) {\\n\\t\\tconst markerName = markerElement.getAttribute( 'data-name' );\\n\\t\\tconst currentPosition = ModelPosition.createBefore( markerElement );\\n\\n\\t\\t// When marker of given name is not stored it means that we have found the beginning of the range.\\n\\t\\tif ( !markers.has( markerName ) ) {\\n\\t\\t\\tmarkers.set( markerName, new ModelRange( ModelPosition.createFromPosition( currentPosition ) ) );\\n\\t\\t// Otherwise is means that we have found end of the marker range.\\n\\t\\t} else {\\n\\t\\t\\tmarkers.get( markerName ).end = ModelPosition.createFromPosition( currentPosition );\\n\\t\\t}\\n\\n\\t\\t// Remove marker element from DocumentFragment.\\n\\t\\twriter.remove( markerElement );\\n\\t}\\n\\n\\treturn markers;\\n}\\n\\n// Creates model fragment according to given context and returns position in top element.\\nfunction createContextTree( contextDefinition, writer ) {\\n\\tlet position;\\n\\n\\tfor ( const item of new SchemaContext( contextDefinition ) ) {\\n\\t\\tconst attributes = {};\\n\\n\\t\\tfor ( const key of item.getAttributeKeys() ) {\\n\\t\\t\\tattributes[ key ] = item.getAttribute( key );\\n\\t\\t}\\n\\n\\t\\tconst current = writer.createElement( item.name, attributes );\\n\\n\\t\\tif ( position ) {\\n\\t\\t\\twriter.append( current, position );\\n\\t\\t}\\n\\n\\t\\tposition = ModelPosition.createAt( current );\\n\\t}\\n\\n\\treturn position;\\n}\\n\\n/**\\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\\n * fires it's events.\\n *\\n * @interface ViewConversionApi\\n */\\n\\n/**\\n * Starts conversion of given item by firing an appropriate event.\\n *\\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\\n *\\n * @method #convertItem\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\\n * @param {module:engine/view/item~Item} viewItem Item to convert.\\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\\n * @returns {Object} result Conversion result.\\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\\n */\\n\\n/**\\n * Starts conversion of all children of given item by firing appropriate events for all those children.\\n *\\n * @method #convertChildren\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\\n * @param {module:engine/view/item~Item} viewItem Item to convert.\\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\\n * @returns {Object} result Conversion result.\\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\\n * When no children was converted then range is collapsed.\\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\\n */\\n\\n/**\\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\\n * split nodes to allowed parent.\\n *\\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\\n *\\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\\n *\\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\\n *\\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\\n *\\n *\\t\\t<paragraph>foo[]bar</paragraph>\\n *\\n *  \\t-> split for `<image>` ->\\n *\\n *  \\t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\\n *\\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\\n * as `cursorParent`.\\n *\\n * @method #splitToAllowedParent\\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\\n * @param {module:engine/model/node~Node} node Node to insert.\\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\\n * @returns {module:engine/model/position~Position} position between split elements.\\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\\n * continue conversion. When element is not defined it means that there was no split.\\n */\\n\\n/**\\n * Instance of {@link module:engine/conversion/viewconsumable~ViewConsumable}. It stores\\n * information about what parts of processed view item are still waiting to be handled. After a piece of view item\\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\\n *\\n * @param {Object} #consumable\\n */\\n\\n/**\\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\\n * pass parameters between converters.\\n *\\n * The difference between this property and `data` parameter of\\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\\n * to pass parameters within a single event and `store` within the whole conversion.\\n *\\n * @param {Object} #store\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport Matcher from '../view/matcher';\\n\\nimport ModelRange from '../model/range';\\nimport ModelPosition from '../model/position';\\n\\nimport cloneDeep from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeep';\\n\\n/**\\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\\n *\\n * @module engine/conversion/upcast-converters\\n */\\n\\n/**\\n * View element to model element conversion helper.\\n *\\n * This conversion results in creating a model element. For example, view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\\n *\\n * Keep in mind that the element will be inserted only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\\n *\\n *\\t\\tupcastElementToElement( { view: 'p', model: 'paragraph' } );\\n *\\n *\\t\\tupcastElementToElement( { view: 'p', model: 'paragraph', priority: 'high' } );\\n *\\n *\\t\\tupcastElementToElement( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'p',\\n *\\t\\t\\t\\tclass: 'fancy'\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: 'fancyParagraph'\\n *\\t\\t} );\\n *\\n *\\t\\tupcastElementToElement( {\\n * \\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'p',\\n *\\t\\t\\t\\tclass: 'heading'\\n * \\t\\t\\t},\\n * \\t\\t\\tmodel: ( viewElement, modelWriter ) => {\\n * \\t\\t\\t\\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\\n * \\t\\t\\t}\\n * \\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\\n * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\\n * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function upcastElementToElement( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tconst converter = _prepareToElementConverter( config );\\n\\n\\tconst elementName = _getViewElementNameFromConfig( config );\\n\\tconst eventName = elementName ? 'element:' + elementName : 'element';\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( eventName, converter, { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * View element to model attribute conversion helper.\\n *\\n * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\\n * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\\n *\\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\\n *\\n *\\t\\tupcastElementToAttribute( { view: 'strong', model: 'bold' } );\\n *\\n *\\t\\tupcastElementToAttribute( { view: 'strong', model: 'bold', priority: 'high' } );\\n *\\n *\\t\\tupcastElementToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tclass: 'bold'\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: 'bold'\\n *\\t\\t} );\\n *\\n *\\t\\tupcastElementToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tclass: [ 'styled', 'styled-dark' ]\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tkey: 'styled',\\n *\\t\\t\\t\\tvalue: 'dark'\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * \\t\\tupcastElementToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t\\t'font-size': /[\\\\s\\\\S]+/\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tkey: 'fontSize',\\n *\\t\\t\\t\\tvalue: viewElement => {\\n *\\t\\t\\t\\t\\tconst fontSize = viewElement.getStyle( 'font-size' );\\n *\\t\\t\\t\\t\\tconst value = fontSize.substr( 0, fontSize.length - 2 );\\n *\\n *\\t\\t\\t\\t\\tif ( value <= 10 ) {\\n *\\t\\t\\t\\t\\t\\treturn 'small';\\n *\\t\\t\\t\\t\\t} else if ( value > 12 ) {\\n *\\t\\t\\t\\t\\t\\treturn 'big';\\n *\\t\\t\\t\\t\\t}\\n *\\n *\\t\\t\\t\\t\\treturn null;\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\\n * If `String` is given, the model attribute value will be set to `true`.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function upcastElementToAttribute( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\t_normalizeModelAttributeConfig( config );\\n\\n\\tconst converter = _prepareToAttributeConverter( config, true );\\n\\n\\tconst elementName = _getViewElementNameFromConfig( config );\\n\\tconst eventName = elementName ? 'element:' + elementName : 'element';\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( eventName, converter, { priority: config.priority || 'normal' } );\\n\\t};\\n}\\n\\n/**\\n * View attribute to model attribute conversion helper.\\n *\\n * This conversion results in setting an attribute on a model node. For example, view `<img src=\\\"foo.jpg\\\"></img>` becomes\\n * `<image source=\\\"foo.jpg\\\"></image>` in the model.\\n *\\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\\n *\\n *\\t\\tupcastAttributeToAttribute( { view: 'src', model: 'source' } );\\n *\\n *\\t\\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source' } );\\n *\\n *\\t\\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source', priority: 'normal' } );\\n *\\n *\\t\\tupcastAttributeToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tkey: 'data-style',\\n *\\t\\t\\t\\tvalue: /[\\\\s\\\\S]+/\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: 'styled'\\n *\\t\\t} );\\n *\\n *\\t\\tupcastAttributeToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'img',\\n *\\t\\t\\t\\tkey: 'class',\\n *\\t\\t\\t\\tvalue: 'styled-dark'\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tkey: 'styled',\\n *\\t\\t\\t\\tvalue: 'dark'\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n *\\t\\tupcastAttributeToAttribute( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tkey: 'class',\\n *\\t\\t\\t\\tvalue: /styled-[\\\\S]+/\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: {\\n *\\t\\t\\t\\tkey: 'styled'\\n *\\t\\t\\t\\tvalue: viewElement => {\\n *\\t\\t\\t\\t\\tconst regexp = /styled-([\\\\S]+)/;\\n *\\t\\t\\t\\t\\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\\n *\\n *\\t\\t\\t\\t\\treturn match[ 1 ];\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\\n * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\\n * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\\n * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\\n * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\\n * If `String` is given, the model attribute value will be same as view attribute value.\\n * @param {module:utils/priorities~PriorityString} [config.priority='low'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function upcastAttributeToAttribute( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\tlet viewKey = null;\\n\\n\\tif ( typeof config.view == 'string' || config.view.key ) {\\n\\t\\tviewKey = _normalizeViewAttributeKeyValueConfig( config );\\n\\t}\\n\\n\\t_normalizeModelAttributeConfig( config, viewKey );\\n\\n\\tconst converter = _prepareToAttributeConverter( config, false );\\n\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'element', converter, { priority: config.priority || 'low' } );\\n\\t};\\n}\\n\\n/**\\n * View element to model marker conversion helper.\\n *\\n * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\\n * `<p>Fo<span data-marker=\\\"comment\\\" data-comment-id=\\\"7\\\"></span>o</p><p>B<span data-marker=\\\"comment\\\" data-comment-id=\\\"7\\\"></span>ar</p>`,\\n * after the conversion is done, the marker will be available in\\n * {@link module:engine/model/model~Model#markers model document markers}.\\n *\\n *\\t\\tupcastElementToMarker( { view: 'marker-search', model: 'search' } );\\n *\\n *\\t\\tupcastElementToMarker( { view: 'marker-search', model: 'search', priority: 'high' } );\\n *\\n *\\t\\tupcastElementToMarker( {\\n *\\t\\t\\tview: 'marker-search',\\n *\\t\\t\\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\\n *\\t\\t} );\\n *\\n *\\t\\tupcastElementToMarker( {\\n *\\t\\t\\tview: {\\n *\\t\\t\\t\\tname: 'span',\\n *\\t\\t\\t\\tattribute: {\\n *\\t\\t\\t\\t\\t'data-marker': 'search'\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t},\\n *\\t\\t\\tmodel: 'search'\\n *\\t\\t} );\\n *\\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\\n *\\n * @param {Object} config Conversion configuration.\\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\\n * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\\n * a model marker name.\\n * @param {module:utils/priorities~PriorityString} [config.priority='normal'] Converter priority.\\n * @returns {Function} Conversion helper.\\n */\\nexport function upcastElementToMarker( config ) {\\n\\tconfig = cloneDeep( config );\\n\\n\\t_normalizeToMarkerConfig( config );\\n\\n\\treturn upcastElementToElement( config );\\n}\\n\\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\\n// and if so, returns it.\\n//\\n// @param {Object} config Conversion config.\\n// @returns {String|null} View element name or `null` if name is not directly set.\\nfunction _getViewElementNameFromConfig( config ) {\\n\\tif ( typeof config.view == 'string' ) {\\n\\t\\treturn config.view;\\n\\t}\\n\\n\\tif ( typeof config.view == 'object' && typeof config.view.name == 'string' ) {\\n\\t\\treturn config.view.name;\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\\n//\\n// @param {Object} config Conversion configuration.\\n// @returns {Function} View to model converter.\\nfunction _prepareToElementConverter( config ) {\\n\\tconst matcher = new Matcher( config.view );\\n\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// This will be usually just one pattern but we support matchers with many patterns too.\\n\\t\\tconst match = matcher.match( data.viewItem );\\n\\n\\t\\t// If there is no match, this callback should not do anything.\\n\\t\\tif ( !match ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Force consuming element's name.\\n\\t\\tmatch.match.name = true;\\n\\n\\t\\t// Create model element basing on config.\\n\\t\\tconst modelElement = _getModelElement( config.model, data.viewItem, conversionApi.writer );\\n\\n\\t\\t// Do not convert if element building function returned falsy value.\\n\\t\\tif ( !modelElement ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// When element was already consumed then skip it.\\n\\t\\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Find allowed parent for element that we are going to insert.\\n\\t\\t// If current parent does not allow to insert element but one of the ancestors does\\n\\t\\t// then split nodes to allowed parent.\\n\\t\\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\\n\\n\\t\\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\\n\\t\\tif ( !splitResult ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Insert element on allowed position.\\n\\t\\tconversionApi.writer.insert( modelElement, splitResult.position );\\n\\n\\t\\t// Convert children and insert to element.\\n\\t\\tconst childrenResult = conversionApi.convertChildren( data.viewItem, ModelPosition.createAt( modelElement ) );\\n\\n\\t\\t// Consume appropriate value from consumable values list.\\n\\t\\tconversionApi.consumable.consume( data.viewItem, match.match );\\n\\n\\t\\t// Set conversion result range.\\n\\t\\tdata.modelRange = new ModelRange(\\n\\t\\t\\t// Range should start before inserted element\\n\\t\\t\\tModelPosition.createBefore( modelElement ),\\n\\t\\t\\t// Should end after but we need to take into consideration that children could split our\\n\\t\\t\\t// element, so we need to move range after parent of the last converted child.\\n\\t\\t\\t// before: <allowed>[]</allowed>\\n\\t\\t\\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\\n\\t\\t\\tModelPosition.createAfter( childrenResult.modelCursor.parent )\\n\\t\\t);\\n\\n\\t\\t// Now we need to check where the modelCursor should be.\\n\\t\\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\\n\\t\\t//\\n\\t\\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\\n\\t\\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\\n\\t\\tif ( splitResult.cursorParent ) {\\n\\t\\t\\tdata.modelCursor = ModelPosition.createAt( splitResult.cursorParent );\\n\\n\\t\\t\\t// Otherwise just continue after inserted element.\\n\\t\\t} else {\\n\\t\\t\\tdata.modelCursor = data.modelRange.end;\\n\\t\\t}\\n\\t};\\n}\\n\\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\\n// and a writer instance and returns a model element instance to be inserted in the model.\\n//\\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\\n// @param {module:engine/view/node~Node} input The converted view node.\\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\\nfunction _getModelElement( model, input, writer ) {\\n\\tif ( model instanceof Function ) {\\n\\t\\treturn model( input, writer );\\n\\t} else {\\n\\t\\treturn writer.createElement( model );\\n\\t}\\n}\\n\\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\\n// {@link module:engine/view/matcher~MatcherPattern}.\\n//\\n// @param {Object} config Conversion config.\\n// @returns {String} Key of the converted view attribute.\\nfunction _normalizeViewAttributeKeyValueConfig( config ) {\\n\\tif ( typeof config.view == 'string' ) {\\n\\t\\tconfig.view = { key: config.view };\\n\\t}\\n\\n\\tconst key = config.view.key;\\n\\tlet normalized;\\n\\n\\tif ( key == 'class' || key == 'style' ) {\\n\\t\\tnormalized = {\\n\\t\\t\\t[ key ]: config.view.value\\n\\t\\t};\\n\\t} else {\\n\\t\\tconst value = typeof config.view.value == 'undefined' ? /[\\\\s\\\\S]*/ : config.view.value;\\n\\n\\t\\tnormalized = {\\n\\t\\t\\tattribute: {\\n\\t\\t\\t\\t[ key ]: value\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\tif ( config.view.name ) {\\n\\t\\tnormalized.name = config.view.name;\\n\\t}\\n\\n\\tconfig.view = normalized;\\n\\n\\treturn key;\\n}\\n\\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\\n// `config.model` is an `Object` with `key` and `value` properties.\\n//\\n// @param {Object} config Conversion config.\\n// @param {String} viewAttributeKeyToCopy Key of the  converted view attribute. If it is set, model attribute value\\n// will be equal to view attribute value.\\nfunction _normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\\n\\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\\n\\n\\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\\n\\tconst value = typeof config.model != 'object' ? defaultModelValue : config.model.value;\\n\\n\\tconfig.model = { key, value };\\n}\\n\\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\\n// a proper converter function.\\n//\\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\\n// @param {Boolean} consumeName If set to `true` converter will try to consume name. If set to `false` converter will not try to\\n// consume name. This flag overwrites parameter returned by `Matcher#match`.\\nfunction _prepareToAttributeConverter( config, consumeName ) {\\n\\tconst matcher = new Matcher( config.view );\\n\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst match = matcher.match( data.viewItem );\\n\\n\\t\\t// If there is no match, this callback should not do anything.\\n\\t\\tif ( !match ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst modelKey = config.model.key;\\n\\t\\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\\n\\n\\t\\t// Do not convert if attribute building function returned falsy value.\\n\\t\\tif ( modelValue === null ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( !consumeName ) {\\n\\t\\t\\t// Do not test or consume `name` consumable.\\n\\t\\t\\tdelete match.match.name;\\n\\t\\t} else {\\n\\t\\t\\tmatch.match.name = true;\\n\\t\\t}\\n\\n\\t\\t// Try to consume appropriate values from consumable values list.\\n\\t\\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Since we are converting to attribute we need an range on which we will set the attribute.\\n\\t\\t// If the range is not created yet, we will create it.\\n\\t\\tif ( !data.modelRange ) {\\n\\t\\t\\t// Convert children and set conversion result as a current data.\\n\\t\\t\\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\\n\\t\\t}\\n\\n\\t\\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\\n\\t\\tconst attributeWasSet = _setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, conversionApi );\\n\\n\\t\\tif ( attributeWasSet ) {\\n\\t\\t\\tconversionApi.consumable.consume( data.viewItem, match.match );\\n\\t\\t}\\n\\t};\\n}\\n\\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\\n// to ensure proper model structure.\\n//\\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\\n// @param {Object} modelAttribute Model attribute to set.\\n// @param {Object} conversionApi Conversion API.\\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\\nfunction _setAttributeOn( modelRange, modelAttribute, conversionApi ) {\\n\\tlet result = false;\\n\\n\\t// Set attribute on each item in range according to Schema.\\n\\tfor ( const node of Array.from( modelRange.getItems() ) ) {\\n\\t\\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\\n\\t\\t\\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\\n\\n\\t\\t\\tresult = true;\\n\\t\\t}\\n\\t}\\n\\n\\treturn result;\\n}\\n\\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\\n// function and converts it to a format that is supported by `upcastElementToElement()` function.\\n//\\n// @param {Object} config Conversion configuration.\\nfunction _normalizeToMarkerConfig( config ) {\\n\\tconst oldModel = config.model;\\n\\n\\tconfig.model = ( viewElement, modelWriter ) => {\\n\\t\\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\\n\\n\\t\\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\\n * or all children of {@link module:engine/view/element~Element} into\\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\\n * This is the \\\"entry-point\\\" converter for upcast (view to model conversion). This converter starts the conversion of all children\\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\\n *\\n * This also a \\\"default\\\", last resort converter for all view elements that has not been converted by other converters.\\n * When a view element is being converted to the model but it does not have converter specified, that view element\\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\\n *\\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\\n * {@link module:engine/view/element~Element elements} that returns\\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\\n */\\nexport function convertToModelFragment() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\\n\\t\\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\\n\\t\\t\\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\\n\\n\\t\\t\\tdata.modelRange = modelRange;\\n\\t\\t\\tdata.modelCursor = modelCursor;\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\\n *\\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\\n */\\nexport function convertText() {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\\n\\t\\t\\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\\n\\t\\t\\t\\tconst text = conversionApi.writer.createText( data.viewItem.data );\\n\\n\\t\\t\\t\\tconversionApi.writer.insert( text, data.modelCursor );\\n\\n\\t\\t\\t\\tdata.modelRange = ModelRange.createFromPositionAndShift( data.modelCursor, text.offsetSize );\\n\\t\\t\\t\\tdata.modelCursor = data.modelRange.end;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/controller/datacontroller\\n */\\n\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\nimport Mapper from '../conversion/mapper';\\n\\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\\nimport { insertText } from '../conversion/downcast-converters';\\n\\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\\nimport { convertText, convertToModelFragment } from '../conversion/upcast-converters';\\n\\nimport ViewDocumentFragment from '../view/documentfragment';\\nimport ViewDocument from '../view/document';\\nimport ViewWriter from '../view/writer';\\n\\nimport ModelRange from '../model/range';\\n\\n/**\\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\\n * using given:\\n *\\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\\n * * downcast converters,\\n * * upcast converters.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class DataController {\\n\\t/**\\n\\t * Creates a data controller instance.\\n\\t *\\n\\t * @param {module:engine/model/model~Model} model Data model.\\n\\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\\n\\t * by the controller.\\n\\t */\\n\\tconstructor( model, dataProcessor ) {\\n\\t\\t/**\\n\\t\\t * Data model.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/model~Model}\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * Data processor used during the conversion.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/dataProcessor~DataProcessor}\\n\\t\\t */\\n\\t\\tthis.processor = dataProcessor;\\n\\n\\t\\t/**\\n\\t\\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\\n\\t\\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\\n\\t\\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/mapper~Mapper}\\n\\t\\t */\\n\\t\\tthis.mapper = new Mapper();\\n\\n\\t\\t/**\\n\\t\\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\\n\\t\\t */\\n\\t\\tthis.downcastDispatcher = new DowncastDispatcher( {\\n\\t\\t\\tmapper: this.mapper\\n\\t\\t} );\\n\\t\\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\\n\\n\\t\\t/**\\n\\t\\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\\n\\t\\t */\\n\\t\\tthis.upcastDispatcher = new UpcastDispatcher( {\\n\\t\\t\\tschema: model.schema\\n\\t\\t} );\\n\\n\\t\\t// Define default converters for text and elements.\\n\\t\\t//\\n\\t\\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\\n\\t\\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\\n\\t\\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\\n\\t\\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\\n\\t\\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\\n\\t\\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\\n\\n\\t\\tthis.decorate( 'init' );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\\n\\t * formatted by the {@link #processor data processor}.\\n\\t *\\n\\t * @param {String} [rootName='main'] Root name.\\n\\t * @returns {String} Output data.\\n\\t */\\n\\tget( rootName = 'main' ) {\\n\\t\\t// Get model range.\\n\\t\\treturn this.stringify( this.model.document.getRoot( rootName ) );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\\n\\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\\n\\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\\n\\t *\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\\n\\t * Element whose content will be stringified.\\n\\t * @returns {String} Output data.\\n\\t */\\n\\tstringify( modelElementOrFragment ) {\\n\\t\\t// Model -> view.\\n\\t\\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\\n\\n\\t\\t// View -> data.\\n\\t\\treturn this.processor.toData( viewDocumentFragment );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\\n\\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\\n\\t * converters attached to {@link #downcastDispatcher} to a\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\\n\\t *\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\\n\\t * Element or document fragment whose content will be converted.\\n\\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\\n\\t */\\n\\ttoView( modelElementOrFragment ) {\\n\\t\\t// First, convert elements.\\n\\t\\tconst modelRange = ModelRange.createIn( modelElementOrFragment );\\n\\n\\t\\tconst viewDocumentFragment = new ViewDocumentFragment();\\n\\n\\t\\t// Create separate ViewWriter just for data conversion purposes.\\n\\t\\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\\n\\t\\tconst viewWriter = new ViewWriter( new ViewDocument() );\\n\\t\\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\\n\\n\\t\\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\\n\\n\\t\\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\\n\\t\\t\\t// Then, if a document element is converted, convert markers.\\n\\t\\t\\t// From all document markers, get those, which \\\"intersect\\\" with the converter element.\\n\\t\\t\\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\\n\\n\\t\\t\\tfor ( const [ name, range ] of markers ) {\\n\\t\\t\\t\\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Clear bindings so the next call to this method gives correct results.\\n\\t\\tthis.mapper.clearBindings();\\n\\n\\t\\treturn viewDocumentFragment;\\n\\t}\\n\\n\\t/**\\n\\t * Sets initial input data parsed by the {@link #processor data processor} and\\n\\t * converted by the {@link #upcastDispatcher view-to-model converters}.\\n\\t * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\\n\\t *\\n\\t * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\\n\\t * used by e.g. collaborative editing plugin that syncs remote data on init.\\n\\t *\\n\\t * @fires init\\n\\t * @param {String} data Input data.\\n\\t * @param {String} [rootName='main'] Root name.\\n\\t */\\n\\tinit( data, rootName = 'main' ) {\\n\\t\\tif ( this.model.document.version ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\\n\\t\\t\\t * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\\n\\t\\t\\t * when the {@link module:engine/model/document~Document#version} is equal 0.\\n\\t\\t\\t *\\n\\t\\t\\t * @error datacontroller-init-document-not-empty\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'datacontroller-init-document-not-empty: Trying to set initial data to not empty document.' );\\n\\t\\t}\\n\\n\\t\\tconst modelRoot = this.model.document.getRoot( rootName );\\n\\n\\t\\tthis.model.enqueueChange( 'transparent', writer => {\\n\\t\\t\\twriter.insert( this.parse( data, modelRoot ), modelRoot );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Sets input data parsed by the {@link #processor data processor} and\\n\\t * converted by the {@link #upcastDispatcher view-to-model converters}.\\n\\t * This method can be used any time to replace existing editor data by the new one without clearing the\\n\\t * {@link module:engine/model/document~Document#history document history}.\\n\\t *\\n\\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\\n\\t * the {@link #parse} method.\\n\\t *\\n\\t * @param {String} data Input data.\\n\\t * @param {String} [rootName='main'] Root name.\\n\\t */\\n\\tset( data, rootName = 'main' ) {\\n\\t\\t// Save to model.\\n\\t\\tconst modelRoot = this.model.document.getRoot( rootName );\\n\\n\\t\\tthis.model.enqueueChange( 'transparent', writer => {\\n\\t\\t\\twriter.setSelection( null );\\n\\t\\t\\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\\n\\n\\t\\t\\twriter.remove( ModelRange.createIn( modelRoot ) );\\n\\t\\t\\twriter.insert( this.parse( data, modelRoot ), modelRoot );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\\n\\t * attached to the {@link #upcastDispatcher}.\\n\\t *\\n\\t * @see #set\\n\\t * @param {String} data Data to parse.\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\\n\\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\\n\\t */\\n\\tparse( data, context = '$root' ) {\\n\\t\\t// data -> view\\n\\t\\tconst viewDocumentFragment = this.processor.toView( data );\\n\\n\\t\\t// view -> model\\n\\t\\treturn this.toModel( viewDocumentFragment, context );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\\n\\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\\n\\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {module:engine/model/documentfragment~DocumentFragment}.\\n\\t *\\n\\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\\n\\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\\n\\t *\\n\\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\\n\\t * Element or document fragment whose content will be converted.\\n\\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\\n\\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\\n\\t */\\n\\ttoModel( viewElementOrFragment, context = '$root' ) {\\n\\t\\treturn this.model.change( writer => {\\n\\t\\t\\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Removes all event listeners set by the DataController.\\n\\t */\\n\\tdestroy() {}\\n\\n\\t/**\\n\\t * Event fired by decorated {@link #init} method.\\n\\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\\n\\t *\\n\\t * @event init\\n\\t */\\n}\\n\\nmix( DataController, ObservableMixin );\\n\\n// Helper function for downcast conversion.\\n//\\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\\nfunction _getMarkersRelativeToElement( element ) {\\n\\tconst result = [];\\n\\tconst doc = element.root.document;\\n\\n\\tif ( !doc ) {\\n\\t\\treturn [];\\n\\t}\\n\\n\\tconst elementRange = ModelRange.createIn( element );\\n\\n\\tfor ( const marker of doc.model.markers ) {\\n\\t\\tconst intersection = elementRange.getIntersection( marker.getRange() );\\n\\n\\t\\tif ( intersection ) {\\n\\t\\t\\tresult.push( [ marker.name, intersection ] );\\n\\t\\t}\\n\\t}\\n\\n\\treturn result;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/conversion/conversion\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\nimport {\\n\\tdowncastElementToElement,\\n\\tdowncastAttributeToElement,\\n\\tdowncastAttributeToAttribute\\n} from './downcast-converters';\\n\\nimport {\\n\\tupcastElementToElement,\\n\\tupcastElementToAttribute,\\n\\tupcastAttributeToAttribute\\n} from './upcast-converters';\\n\\n/**\\n * An utility class that helps organizing dispatchers and adding converters to them.\\n */\\nexport default class Conversion {\\n\\t/**\\n\\t * Creates new Conversion instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * @private\\n\\t\\t * @member {Map}\\n\\t\\t */\\n\\t\\tthis._dispatchersGroups = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Registers one or more converters under given group name. Then, group name can be used to assign a converter\\n\\t * to multiple dispatchers at once.\\n\\t *\\n\\t * If given group name is used for a second time,\\n\\t * {@link module:utils/ckeditorerror~CKEditorError conversion-register-group-exists} error is thrown.\\n\\t *\\n\\t * @param {String} groupName A name for dispatchers group.\\n\\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\\n\\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers Dispatchers to register\\n\\t * under given name.\\n\\t */\\n\\tregister( groupName, dispatchers ) {\\n\\t\\tif ( this._dispatchersGroups.has( groupName ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to register a group name that was already registered.\\n\\t\\t\\t *\\n\\t\\t\\t * @error conversion-register-group-exists\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'conversion-register-group-exists: Trying to register a group name that was already registered.' );\\n\\t\\t}\\n\\n\\t\\tthis._dispatchersGroups.set( groupName, dispatchers );\\n\\t}\\n\\n\\t/**\\n\\t * Provides chainable API to assign converters to dispatchers registered under given group name. Converters are added\\n\\t * by calling `.add()` method of an object returned by this function.\\n\\t *\\n\\t *\\t\\tconversion.for( 'downcast' )\\n\\t *\\t\\t\\t.add( conversionHelperA )\\n\\t *\\t\\t\\t.add( conversionHelperB );\\n\\t *\\n\\t * In above example, `conversionHelperA` and `conversionHelperB` will be called for all dispatchers from `'model'` group.\\n\\t *\\n\\t * `.add()` takes exactly one parameter, which is a function. That function should accept one parameter, which\\n\\t * is a dispatcher instance. The function should add an actual converter to passed dispatcher instance.\\n\\t *\\n\\t * Conversion helpers for most common cases are already provided. They are flexible enough to cover most use cases.\\n\\t * See documentation to learn how they can be configured.\\n\\t *\\n\\t * For downcast (model to view conversion), these are:\\n\\t *\\n\\t * * {@link module:engine/conversion/downcast-converters~downcastElementToElement downcast element to element converter},\\n\\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToElement downcast attribute to element converter},\\n\\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToAttribute downcast attribute to attribute converter}.\\n\\t *\\n\\t * For upcast (view to model conversion), these are:\\n\\t *\\n\\t * * {@link module:engine/conversion/upcast-converters~upcastElementToElement upcast element to element converter},\\n\\t * * {@link module:engine/conversion/upcast-converters~upcastElementToAttribute upcast attribute to element converter},\\n\\t * * {@link module:engine/conversion/upcast-converters~upcastAttributeToAttribute upcast attribute to attribute converter}.\\n\\t *\\n\\t * An example of using conversion helpers to convert `paragraph` model element to `p` view element (and back):\\n\\t *\\n\\t *\\t\\t// Define conversion configuration - model element 'paragraph' should be converted to view element 'p'.\\n\\t *\\t\\tconst config = { model: 'paragraph', view: 'p' };\\n\\t *\\n\\t *\\t\\t// Add converters to proper dispatchers using conversion helpers.\\n\\t *\\t\\tconversion.for( 'downcast' ).add( downcastElementToElement( config ) );\\n\\t *\\t\\tconversion.for( 'upcast' ).add( upcastElementToElement( config ) );\\n\\t *\\n\\t * An example of providing custom conversion helper that uses custom converter function:\\n\\t *\\n\\t *\\t\\t// Adding custom `myConverter` converter for 'paragraph' element insertion, with default priority ('normal').\\n\\t *\\t\\tconversion.for( 'downcast' ).add( conversion.customConverter( 'insert:paragraph', myConverter ) );\\n\\t *\\n\\t * @param {String} groupName Name of dispatchers group to add converters to.\\n\\t * @returns {Object} Object with `.add()` method, providing a way to add converters.\\n\\t */\\n\\tfor( groupName ) {\\n\\t\\tconst dispatchers = this._getDispatchers( groupName );\\n\\n\\t\\treturn {\\n\\t\\t\\tadd( conversionHelper ) {\\n\\t\\t\\t\\t_addToDispatchers( dispatchers, conversionHelper );\\n\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Sets up converters between the model and the view which convert a model element to a view element (and vice versa).\\n\\t * For example, model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\\n\\t *\\n\\t *\\t\\t// Simple conversion from `paragraph` model element to `<p>` view element (and vice versa).\\n\\t *\\t\\tconversion.elementToElement( { model: 'paragraph', view: 'p' } );\\n\\t *\\n\\t *\\t\\t// Override other converters by specifying converter definition with higher priority.\\n\\t *\\t\\tconversion.elementToElement( { model: 'paragraph', view: 'div', priority: 'high' } );\\n\\t *\\n\\t *\\t\\t// View specified as an object instead of a string.\\n\\t *\\t\\tconversion.elementToElement( {\\n\\t *\\t\\t\\tmodel: 'fancyParagraph',\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\tname: 'p',\\n\\t *\\t\\t\\t\\tclass: 'fancy'\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Use `upcastAlso` to define other view elements that should be also converted to `paragraph` element.\\n\\t *\\t\\tconversion.elementToElement( {\\n\\t *\\t\\t\\tmodel: 'paragraph',\\n\\t *\\t\\t\\tview: 'p',\\n\\t *\\t\\t\\tupcastAlso: [\\n\\t *\\t\\t\\t\\t'div',\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\t// Any element with `display: block` style.\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\tdisplay: 'block'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\\n\\t *\\t\\tconversion.elementToElement( {\\n\\t *\\t\\t\\tmodel: 'heading',\\n\\t *\\t\\t\\tview: 'h2',\\n\\t *\\t\\t\\t// Convert \\\"headling-like\\\" paragraphs to headings.\\n\\t *\\t\\t\\tupcastAlso: viewElement => {\\n\\t *\\t\\t\\t\\tconst fontSize = viewElement.getStyle( 'font-size' );\\n\\t *\\n\\t *\\t\\t\\t\\tif ( !fontSize ) {\\n\\t *\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\tconst match = fontSize.match( /(\\\\d+)\\\\s*px/ );\\n\\t *\\n\\t *\\t\\t\\t\\tif ( !match ) {\\n\\t *\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\tconst size = Number( match[ 1 ] );\\n\\t *\\n\\t *\\t\\t\\t\\tif ( size > 26 ) {\\n\\t *\\t\\t\\t\\t\\t// Returned value be an object with the matched properties.\\n\\t *\\t\\t\\t\\t\\t// Those properties will be \\\"consumed\\\" during conversion.\\n\\t *\\t\\t\\t\\t\\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\\n\\t *\\n\\t *\\t\\t\\t\\t\\treturn { name: true, style: [ 'font-size' ] };\\n\\t *\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * `definition.model` is a `String` with a model element name to converter from/to.\\n\\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\\n\\t *\\n\\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition Converter definition.\\n\\t */\\n\\telementToElement( definition ) {\\n\\t\\t// Set up downcast converter.\\n\\t\\tthis.for( 'downcast' ).add( downcastElementToElement( definition ) );\\n\\n\\t\\t// Set up upcast converter.\\n\\t\\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\\n\\t\\t\\tthis.for( 'upcast' ).add(\\n\\t\\t\\t\\tupcastElementToElement( {\\n\\t\\t\\t\\t\\tmodel,\\n\\t\\t\\t\\t\\tview,\\n\\t\\t\\t\\t\\tpriority: definition.priority\\n\\t\\t\\t\\t} )\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets up converters between the model and the view which convert a model attribute to a view element (and vice versa).\\n\\t * For example, model text node with data `\\\"Foo\\\"` and `bold` attribute is `<strong>Foo</strong>` in the view.\\n\\t *\\n\\t *\\t\\t// Simple conversion from `bold=true` attribute to `<strong>` view element (and vice versa).\\n\\t *\\t\\tconversion.attributeToElement( { model: 'bold', view: 'strong' } );\\n\\t *\\n\\t *\\t\\t// Override other converters by specifying converter definition with higher priority.\\n\\t *\\t\\tconversion.attributeToElement( { model: 'bold', view: 'b', priority: 'high' } );\\n\\t *\\n\\t *\\t\\t// View specified as an object instead of a string.\\n\\t *\\t\\tconversion.attributeToElement( {\\n\\t *\\t\\t\\tmodel: 'bold',\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\tname: 'span',\\n\\t *\\t\\t\\t\\tclass: 'bold'\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Use `upcastAlso` to define other view elements that should be also converted to `bold` attribute.\\n\\t *\\t\\tconversion.attributeToElement( {\\n\\t *\\t\\t\\tmodel: 'bold',\\n\\t *\\t\\t\\tview: 'strong',\\n\\t *\\t\\t\\tupcastAlso: [\\n\\t *\\t\\t\\t\\t'b',\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\tname: 'span',\\n\\t *\\t\\t\\t\\t\\tclass: 'bold'\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\tname: 'span',\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\t'font-weight': 'bold'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tviewElement => {\\n\\t *\\t\\t\\t\\t\\tconst fontWeight = viewElement.getStyle( 'font-weight' );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( viewElement.is( 'span' ) && fontWeight && /\\\\d+/.test() && Number( fontWeight ) > 500 ) {\\n\\t *\\t\\t\\t\\t\\t\\t// Returned value be an object with the matched properties.\\n\\t *\\t\\t\\t\\t\\t\\t// Those properties will be \\\"consumed\\\" during conversion.\\n\\t *\\t\\t\\t\\t\\t\\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\\n\\t *\\n\\t *\\t\\t\\t\\t\\t\\treturn {\\n\\t *\\t\\t\\t\\t\\t\\t\\tname: true,\\n\\t *\\t\\t\\t\\t\\t\\t\\tstyle: [ 'font-weight' ]\\n\\t *\\t\\t\\t\\t\\t\\t};\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Conversion from/to a model attribute key which value is an enum (`fontSize=big|small`).\\n\\t *\\t\\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\\n\\t *\\t\\tconversion.attributeToElement( {\\n\\t *\\t\\t\\tmodel: {\\n\\t *\\t\\t\\t\\tkey: 'fontSize',\\n\\t *\\t\\t\\t\\tvalues: [ 'big', 'small' ]\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\tbig: {\\n\\t *\\t\\t\\t\\t\\tname: 'span',\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\t'font-size': '1.2em'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tsmall: {\\n\\t *\\t\\t\\t\\t\\tname: 'span',\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\t'font-size': '0.8em'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tupcastAlso: {\\n\\t *\\t\\t\\t\\tbig: viewElement => {\\n\\t *\\t\\t\\t\\t\\tconst fontSize = viewElement.getStyle( 'font-size' );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( !fontSize ) {\\n\\t *\\t\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\tconst match = fontSize.match( /(\\\\d+)\\\\s*px/ );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( !match ) {\\n\\t *\\t\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\tconst size = Number( match[ 1 ] );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( viewElement.is( 'span' ) && size > 10 ) {\\n\\t *\\t\\t\\t\\t\\t\\t// Returned value be an object with the matched properties.\\n\\t *\\t\\t\\t\\t\\t\\t// Those properties will be \\\"consumed\\\" during conversion.\\n\\t *\\t\\t\\t\\t\\t\\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\\n\\t *\\n\\t *\\t\\t\\t\\t\\t\\treturn { name: true, style: [ 'font-size' ] };\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tsmall: viewElement => {\\n\\t *\\t\\t\\t\\t\\tconst fontSize = viewElement.getStyle( 'font-size' );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( !fontSize ) {\\n\\t *\\t\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\tconst match = fontSize.match( /(\\\\d+)\\\\s*px/ );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( !match ) {\\n\\t *\\t\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\tconst size = Number( match[ 1 ] );\\n\\t *\\n\\t *\\t\\t\\t\\t\\tif ( viewElement.is( 'span' ) && size < 10 ) {\\n\\t *\\t\\t\\t\\t\\t\\t// Returned value be an object with the matched properties.\\n\\t *\\t\\t\\t\\t\\t\\t// Those properties will be \\\"consumed\\\" during conversion.\\n\\t *\\t\\t\\t\\t\\t\\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more.\\n\\t *\\n\\t *\\t\\t\\t\\t\\t\\treturn { name: true, style: [ 'font-size' ] };\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t\\t\\treturn null;\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * `definition.model` parameter specifies what model attribute should be converted from/to. It can be a `{ key, value }` object\\n\\t * describing attribute key and value to convert or a `String` specifying just attribute key (then `value` is set to `true`).\\n\\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\\n\\t *\\n\\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition Converter definition.\\n\\t */\\n\\tattributeToElement( definition ) {\\n\\t\\t// Set up downcast converter.\\n\\t\\tthis.for( 'downcast' ).add( downcastAttributeToElement( definition ) );\\n\\n\\t\\t// Set up upcast converter.\\n\\t\\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\\n\\t\\t\\tthis.for( 'upcast' ).add(\\n\\t\\t\\t\\tupcastElementToAttribute( {\\n\\t\\t\\t\\t\\tview,\\n\\t\\t\\t\\t\\tmodel,\\n\\t\\t\\t\\t\\tpriority: definition.priority\\n\\t\\t\\t\\t} )\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets up converters between the model and the view which convert a model attribute to a view attribute (and vice versa).\\n\\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (same attribute key and value).\\n\\t *\\n\\t *\\t\\t// Simple conversion from `source` model attribute to `src` view attribute (and vice versa).\\n\\t *\\t\\tconversion.attributeToAttribute( { model: 'source', view: 'src' } );\\n\\t *\\n\\t *\\t\\t// Attributes values are strictly specified.\\n\\t *\\t\\tconversion.attributeToAttribute( {\\n\\t *\\t\\t\\tmodel: {\\n\\t *\\t\\t\\t\\tname: 'image',\\n\\t *\\t\\t\\t\\tkey: 'aside',\\n\\t *\\t\\t\\t\\tvalues: [ 'aside' ]\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\taside: {\\n\\t *\\t\\t\\t\\t\\tname: 'img',\\n\\t *\\t\\t\\t\\t\\tkey: 'class',\\n\\t *\\t\\t\\t\\t\\tvalue: [ 'aside', 'half-size' ]\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Set style attribute.\\n\\t *\\t\\tconversion.attributeToAttribute( {\\n\\t *\\t\\t\\tmodel: {\\n\\t *\\t\\t\\t\\tname: 'image',\\n\\t *\\t\\t\\t\\tkey: 'aside',\\n\\t *\\t\\t\\t\\tvalues: [ 'aside' ]\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\taside: {\\n\\t *\\t\\t\\t\\t\\tname: 'img',\\n\\t *\\t\\t\\t\\t\\tkey: 'style',\\n\\t *\\t\\t\\t\\t\\tvalue: {\\n\\t *\\t\\t\\t\\t\\t\\tfloat: 'right',\\n\\t *\\t\\t\\t\\t\\t\\twidth: '50%',\\n\\t *\\t\\t\\t\\t\\t\\tmargin: '5px'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Conversion from/to a model attribute key which value is an enum (`align=right|center`).\\n\\t *\\t\\t// Use `upcastAlso` to define other view elements that should be also converted to `align=right` attribute.\\n\\t *\\t\\tconversion.attributeToAttribute( {\\n\\t *\\t\\t\\tmodel: {\\n\\t *\\t\\t\\t\\tkey: 'align',\\n\\t *\\t\\t\\t\\tvalues: [ 'right', 'center' ]\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tview: {\\n\\t *\\t\\t\\t\\tright: {\\n\\t *\\t\\t\\t\\t\\tkey: 'class',\\n\\t *\\t\\t\\t\\t\\tvalue: 'align-right'\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tcenter: {\\n\\t *\\t\\t\\t\\t\\tkey: 'class',\\n\\t *\\t\\t\\t\\t\\tvalue: 'align-center'\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tupcastAlso: {\\n\\t *\\t\\t\\t\\tright: {\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\t'text-align': 'right'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tcenter: {\\n\\t *\\t\\t\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\t\\t\\t'text-align': 'center'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * `definition.model` parameter specifies what model attribute should be converted from/to.\\n\\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\\n\\t * `key` property is the model attribute key to convert from/to.\\n\\t * `values` are the possible model attribute values. If `values` is not set, model attribute value will be the same as the\\n\\t * view attribute value.\\n\\t * If `name` is set, conversion will be set up only for model elements with the given name.\\n\\t *\\n\\t * `definition.view` parameter specifies what view attribute should be converted from/to.\\n\\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\\n\\t * `key` property is the view attribute key to convert from/to.\\n\\t * `value` is the view attribute value to convert from/to. If `definition.value` is not set, view attribute value will be\\n\\t * the same as the model attribute value.\\n\\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\\n\\t * If `key` is `'style'`, `value` is an object with key-value pairs.\\n\\t * In other cases, `value` is a `String`.\\n\\t * If `name` is set, conversion will be set up only for model elements with the given name.\\n\\t * If `definition.model.values` is set, `definition.view` is an object which assigns values from `definition.model.values`\\n\\t * to `{ key, value, [ name ] }` objects.\\n\\t *\\n\\t * `definition.upcastAlso` specifies which other matching view elements should be also upcast to given model configuration.\\n\\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\\n\\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\\n\\t *\\n\\t * **Note:** `definition.model` and `definition.view` form should be mirrored, that is the same type of parameters should\\n\\t * be given in both parameters.\\n\\t *\\n\\t * @param {Object} definition Converter definition.\\n\\t * @param {String|Object} definition.model Model attribute to convert from/to.\\n\\t * @param {String|Object} definition.view View attribute to convert from/to.\\n\\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\\n\\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\\n\\t * is used only if `config.model.values` is specified.\\n\\t */\\n\\tattributeToAttribute( definition ) {\\n\\t\\t// Set up downcast converter.\\n\\t\\tthis.for( 'downcast' ).add( downcastAttributeToAttribute( definition ) );\\n\\n\\t\\t// Set up upcast converter.\\n\\t\\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\\n\\t\\t\\tthis.for( 'upcast' ).add(\\n\\t\\t\\t\\tupcastAttributeToAttribute( {\\n\\t\\t\\t\\t\\tview,\\n\\t\\t\\t\\t\\tmodel\\n\\t\\t\\t\\t} )\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns dispatchers registered under given group name.\\n\\t *\\n\\t * If given group name has not been registered,\\n\\t * {@link module:utils/ckeditorerror~CKEditorError conversion-for-unknown-group} error is thrown.\\n\\t *\\n\\t * @private\\n\\t * @param {String} groupName\\n\\t * @returns {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\\n\\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>}\\n\\t */\\n\\t_getDispatchers( groupName ) {\\n\\t\\tconst dispatchers = this._dispatchersGroups.get( groupName );\\n\\n\\t\\tif ( !dispatchers ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to add a converter to an unknown dispatchers group.\\n\\t\\t\\t *\\n\\t\\t\\t * @error conversion-for-unknown-group\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.' );\\n\\t\\t}\\n\\n\\t\\treturn dispatchers;\\n\\t}\\n}\\n\\n/**\\n * Defines how the model should be converted from/to the view.\\n *\\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\\n *\\n * @property {*} [model] Model conversion definition. Describes model element or model attribute to convert. This parameter differs\\n * for different functions that accepts `ConverterDefinition`. See the description of a function to learn how to set it.\\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view Definition of a view element to convert from/to.\\n * If `model` describes multiple values, `view` is an object that assigns those values (`view` object keys) to view element definitions\\n * (`view` object values).\\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\\n * Any view element matching `upcastAlso` will also be converted to model. If `model` describes multiple values, `upcastAlso`\\n * is an object that assigns those values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\\n * (`upcastAlso` object values).\\n * @property {module:utils/priorities~PriorityString} [priority] Conversion priority.\\n */\\n\\n// Helper function for `Conversion` `.add()` method.\\n//\\n// Calls `conversionHelper` on each dispatcher from the group specified earlier in `.for()` call, effectively\\n// adding converters to all specified dispatchers.\\n//\\n// @private\\n// @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\\n// module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\\n// @param {Function} conversionHelper\\nfunction _addToDispatchers( dispatchers, conversionHelper ) {\\n\\tfor ( const dispatcher of dispatchers ) {\\n\\t\\tconversionHelper( dispatcher );\\n\\t}\\n}\\n\\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\\n// `definition.upcastAlso`.\\n//\\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\\n// @returns {Array} Array containing view definitions.\\nfunction* _getAllUpcastDefinitions( definition ) {\\n\\tif ( definition.model.values ) {\\n\\t\\tfor ( const value of definition.model.values ) {\\n\\t\\t\\tconst model = { key: definition.model.key, value };\\n\\t\\t\\tconst view = definition.view[ value ];\\n\\t\\t\\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\\n\\n\\t\\t\\tyield* _getUpcastDefinition( model, view, upcastAlso );\\n\\t\\t}\\n\\t} else {\\n\\t\\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\\n\\t}\\n}\\n\\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\\n\\tyield { model, view };\\n\\n\\tif ( upcastAlso ) {\\n\\t\\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\\n\\n\\t\\tfor ( const upcastAlsoItem of upcastAlso ) {\\n\\t\\t\\tyield { model, view: upcastAlsoItem };\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/operation\\n */\\n\\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\\n\\n/**\\n * Abstract base operation class.\\n *\\n * @abstract\\n */\\nexport default class Operation {\\n\\t/**\\n\\t * Base operation constructor.\\n\\t *\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( baseVersion ) {\\n\\t\\t/**\\n\\t\\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\\n\\t\\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\\n\\t\\t * {@link module:engine/model/document~Document#version document version} the\\n\\t\\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\\n\\t\\t *\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis.baseVersion = baseVersion;\\n\\n\\t\\t/**\\n\\t\\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #isDocumentOperation\\n\\t\\t */\\n\\t\\tthis.isDocumentOperation = this.baseVersion !== null;\\n\\n\\t\\t/**\\n\\t\\t * Operation type.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String} #type\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * {@link module:engine/model/delta/delta~Delta Delta} which the operation is a part of. This property is set by the\\n\\t\\t * {@link module:engine/model/delta/delta~Delta delta} when the operations is added to it by the\\n\\t\\t * {@link module:engine/model/delta/delta~Delta#addOperation} method.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/delta/delta~Delta} #delta\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t\\t *\\n\\t\\t * @method #clone\\n\\t\\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Creates and returns a reverse operation. Reverse operation when executed right after\\n\\t\\t * the original operation will bring back tree model state to the point before the original\\n\\t\\t * operation execution. In other words, it reverses changes done by the original operation.\\n\\t\\t *\\n\\t\\t * Keep in mind that tree model state may change since executing the original operation,\\n\\t\\t * so reverse operation will be \\\"outdated\\\". In that case you will need to\\n\\t\\t * {@link module:engine/model/operation/transform~transform} it by all operations that were executed after the original operation.\\n\\t\\t *\\n\\t\\t * @method #getReversed\\n\\t\\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @method #_execute\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\\n\\t * an error if operation is not valid.\\n\\t *\\n\\t * @protected\\n\\t * @method #_validate\\n\\t */\\n\\t_validate() {\\n\\t}\\n\\n\\t/**\\n\\t * Custom toJSON method to solve child-parent circular dependencies.\\n\\t *\\n\\t * @method #toJSON\\n\\t * @returns {Object} Clone of this object with the delta property replaced with string.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = clone( this, true );\\n\\n\\t\\tjson.__className = this.constructor.className;\\n\\n\\t\\t// Remove parent delta to avoid circular dependencies.\\n\\t\\tdelete json.delta;\\n\\n\\t\\t// Only document operations are shared with other clients so it is not necessary to keep this information.\\n\\t\\tdelete json.isDocumentOperation;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Name of the operation class used for serialization.\\n\\t *\\n\\t * @type {String}\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.Operation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/operation~Operation}\\n\\t */\\n\\tstatic fromJSON( json ) {\\n\\t\\treturn new this( json.baseVersion );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module module:engine/model/documentfragment\\n */\\n\\nimport NodeList from './nodelist';\\nimport Element from './element';\\nimport Text from './text';\\nimport TextProxy from './textproxy';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\n\\n/**\\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\\n *\\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\\n * {@link module:engine/model/writer~Writer#insert} function.\\n */\\nexport default class DocumentFragment {\\n\\t/**\\n\\t * Creates an empty `DocumentFragment`.\\n\\t *\\n\\t * **Note:** Constructor of this class shouldn't be used directly in the code.\\n\\t * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\\n\\t * Nodes to be contained inside the `DocumentFragment`.\\n\\t */\\n\\tconstructor( children ) {\\n\\t\\t/**\\n\\t\\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\\n\\t\\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\\n\\t\\t * when DocumentFragment will be inserted to the document.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\\n\\t\\t */\\n\\t\\tthis.markers = new Map();\\n\\n\\t\\t/**\\n\\t\\t * List of nodes contained inside the document fragment.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\\n\\t\\t */\\n\\t\\tthis._children = new NodeList();\\n\\n\\t\\tif ( children ) {\\n\\t\\t\\tthis._insertChildren( 0, children );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/node~Node>}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this.getChildren();\\n\\t}\\n\\n\\t/**\\n\\t * Number of this document fragment's children.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget childCount() {\\n\\t\\treturn this._children.length;\\n\\t}\\n\\n\\t/**\\n\\t * Sum of {module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number}\\n\\t */\\n\\tget maxOffset() {\\n\\t\\treturn this._children.maxOffset;\\n\\t}\\n\\n\\t/**\\n\\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isEmpty() {\\n\\t\\treturn this.childCount === 0;\\n\\t}\\n\\n\\t/**\\n\\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tget root() {\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\\n\\t *\\n\\t * @readonly\\n\\t * @type {null}\\n\\t */\\n\\tget parent() {\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given model tree object is of given type.\\n\\t *\\n\\t * Read more in {@link module:engine/model/node~Node#is}.\\n\\t *\\n\\t * @param {String} type\\n\\t * @returns {Boolean}\\n\\t */\\n\\tis( type ) {\\n\\t\\treturn type == 'documentFragment';\\n\\t}\\n\\n\\t/**\\n\\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\\n\\t *\\n\\t * @param {Number} index Index of child.\\n\\t * @returns {module:engine/model/node~Node|null} Child node.\\n\\t */\\n\\tgetChild( index ) {\\n\\t\\treturn this._children.getNode( index );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator that iterates over all of this document fragment's children.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/node~Node>}\\n\\t */\\n\\tgetChildren() {\\n\\t\\treturn this._children[ Symbol.iterator ]();\\n\\t}\\n\\n\\t/**\\n\\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Child node to look for.\\n\\t * @returns {Number|null} Child node's index.\\n\\t */\\n\\tgetChildIndex( node ) {\\n\\t\\treturn this._children.getNodeIndex( node );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the starting offset of given child. Starting offset is equal to the sum of\\n\\t * {module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\\n\\t * given node is not a child of this document fragment.\\n\\t *\\n\\t * @param {module:engine/model/node~Node} node Child node to look for.\\n\\t * @returns {Number|null} Child node's starting offset.\\n\\t */\\n\\tgetChildStartOffset( node ) {\\n\\t\\treturn this._children.getNodeStartOffset( node );\\n\\t}\\n\\n\\t/**\\n\\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\\n\\t *\\n\\t * @returns {Array}\\n\\t */\\n\\tgetPath() {\\n\\t\\treturn [];\\n\\t}\\n\\n\\t/**\\n\\t * Returns a descendant node by its path relative to this element.\\n\\t *\\n\\t *\\t\\t// <this>a<b>c</b></this>\\n\\t *\\t\\tthis.getNodeByPath( [ 0 ] );     // -> \\\"a\\\"\\n\\t *\\t\\tthis.getNodeByPath( [ 1 ] );     // -> <b>\\n\\t *\\t\\tthis.getNodeByPath( [ 1, 0 ] );  // -> \\\"c\\\"\\n\\t *\\n\\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\\n\\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\\n\\t */\\n\\tgetNodeByPath( relativePath ) {\\n\\t\\tlet node = this; // eslint-disable-line consistent-this\\n\\n\\t\\tfor ( const index of relativePath ) {\\n\\t\\t\\tnode = node.getChild( node.offsetToIndex( index ) );\\n\\t\\t}\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Converts offset \\\"position\\\" to index \\\"position\\\".\\n\\t *\\n\\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\\n\\t * too high, returns index after last child}.\\n\\t *\\n\\t *\\t\\tconst textNode = new Text( 'foo' );\\n\\t *\\t\\tconst pElement = new Element( 'p' );\\n\\t *\\t\\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\\n\\t *\\t\\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\\n\\t *\\t\\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\\n\\t *\\t\\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\\n\\t *\\t\\tdocFrag.offsetToIndex( 2 ); // Returns 0.\\n\\t *\\t\\tdocFrag.offsetToIndex( 3 ); // Returns 1.\\n\\t *\\t\\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\\n\\t *\\n\\t * @param {Number} offset Offset to look for.\\n\\t * @returns {Number} Index of a node that occupies given offset.\\n\\t */\\n\\toffsetToIndex( offset ) {\\n\\t\\treturn this._children.offsetToIndex( offset );\\n\\t}\\n\\n\\t/**\\n\\t * Converts `DocumentFragment` instance to plain object and returns it.\\n\\t * Takes care of converting all of this document fragment's children.\\n\\t *\\n\\t * @returns {Object} `DocumentFragment` instance converted to plain object.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = [];\\n\\n\\t\\tfor ( const node of this._children ) {\\n\\t\\t\\tjson.push( node.toJSON() );\\n\\t\\t}\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\\n\\t * Converts `DocumentFragment` children to proper nodes.\\n\\t *\\n\\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\\n\\t */\\n\\tstatic fromJSON( json ) {\\n\\t\\tconst children = [];\\n\\n\\t\\tfor ( const child of json ) {\\n\\t\\t\\tif ( child.name ) {\\n\\t\\t\\t\\t// If child has name property, it is an Element.\\n\\t\\t\\t\\tchildren.push( Element.fromJSON( child ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Otherwise, it is a Text node.\\n\\t\\t\\t\\tchildren.push( Text.fromJSON( child ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn new DocumentFragment( children );\\n\\t}\\n\\n\\t/**\\n\\t * {@link #_insertChildren Inserts} one or more nodes at the end of this document fragment.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\\n\\t */\\n\\t_appendChildren( items ) {\\n\\t\\tthis._insertChildren( this.childCount, items );\\n\\t}\\n\\n\\t/**\\n\\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\\n\\t * to this document fragment.\\n\\t *\\n\\t * @protected\\n\\t * @param {Number} index Index at which nodes should be inserted.\\n\\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\\n\\t */\\n\\t_insertChildren( index, items ) {\\n\\t\\tconst nodes = normalize( items );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\\n\\t\\t\\tif ( node.parent !== null ) {\\n\\t\\t\\t\\tnode._remove();\\n\\t\\t\\t}\\n\\n\\t\\t\\tnode.parent = this;\\n\\t\\t}\\n\\n\\t\\tthis._children._insertNodes( index, nodes );\\n\\t}\\n\\n\\t/**\\n\\t * Removes one or more nodes starting at the given index\\n\\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\\n\\t *\\n\\t * @protected\\n\\t * @param {Number} index Index of the first node to remove.\\n\\t * @param {Number} [howMany=1] Number of nodes to remove.\\n\\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\\n\\t */\\n\\t_removeChildren( index, howMany = 1 ) {\\n\\t\\tconst nodes = this._children._removeNodes( index, howMany );\\n\\n\\t\\tfor ( const node of nodes ) {\\n\\t\\t\\tnode.parent = null;\\n\\t\\t}\\n\\n\\t\\treturn nodes;\\n\\t}\\n}\\n\\n// Converts strings to Text and non-iterables to arrays.\\n//\\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\\n// @return {Iterable.<module:engine/model/node~Node>}\\nfunction normalize( nodes ) {\\n\\t// Separate condition because string is iterable.\\n\\tif ( typeof nodes == 'string' ) {\\n\\t\\treturn [ new Text( nodes ) ];\\n\\t}\\n\\n\\tif ( !isIterable( nodes ) ) {\\n\\t\\tnodes = [ nodes ];\\n\\t}\\n\\n\\t// Array.from to enable .map() on non-arrays.\\n\\treturn Array.from( nodes )\\n\\t\\t.map( node => {\\n\\t\\t\\tif ( typeof node == 'string' ) {\\n\\t\\t\\t\\treturn new Text( node );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( node instanceof TextProxy ) {\\n\\t\\t\\t\\treturn new Text( node.data, node.getAttributes() );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn node;\\n\\t\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/utils\\n */\\n\\nimport Node from '../node';\\nimport Text from '../text';\\nimport TextProxy from '../textproxy';\\nimport Range from '../range';\\nimport DocumentFragment from '../documentfragment';\\nimport NodeList from '../nodelist';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\\n *\\n * @protected\\n * @namespace utils\\n */\\n\\n/**\\n * Inserts given nodes at given position.\\n *\\n * @protected\\n * @function module:engine/model/operation/utils~utils.insert\\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\\n */\\nexport function _insert( position, nodes ) {\\n\\tnodes = _normalizeNodes( nodes );\\n\\n\\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\\n\\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\\n\\tconst parent = position.parent;\\n\\n\\t// Insertion might be in a text node, we should split it if that's the case.\\n\\t_splitNodeAtPosition( position );\\n\\tconst index = position.index;\\n\\n\\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\\n\\t// using basic `Element` API.\\n\\tparent._insertChildren( index, nodes );\\n\\n\\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \\\"touch\\\" \\\"old\\\" nodes.\\n\\t_mergeNodesAtIndex( parent, index + nodes.length );\\n\\t_mergeNodesAtIndex( parent, index );\\n\\n\\treturn new Range( position, position.getShiftedBy( offset ) );\\n}\\n\\n/**\\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\\n *\\n * @protected\\n * @function module:engine/model/operation/utils~utils._remove\\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\\n * @returns {Array.<module:engine/model/node~Node>}\\n */\\nexport function _remove( range ) {\\n\\tif ( !range.isFlat ) {\\n\\t\\t/**\\n\\t\\t * Trying to remove a range which starts and ends in different element.\\n\\t\\t *\\n\\t\\t * @error operation-utils-remove-range-not-flat\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'operation-utils-remove-range-not-flat: ' +\\n\\t\\t\\t'Trying to remove a range which starts and ends in different element.' );\\n\\t}\\n\\n\\tconst parent = range.start.parent;\\n\\n\\t// Range may be inside text nodes, we have to split them if that's the case.\\n\\t_splitNodeAtPosition( range.start );\\n\\t_splitNodeAtPosition( range.end );\\n\\n\\t// Remove the text nodes using basic `Element` API.\\n\\tconst removed = parent._removeChildren( range.start.index, range.end.index - range.start.index );\\n\\n\\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\\n\\t// touching at the position equal to the removed range beginning. We check merging possibility there.\\n\\t_mergeNodesAtIndex( parent, range.start.index );\\n\\n\\treturn removed;\\n}\\n\\n/**\\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\\n *\\n * @protected\\n * @function module:engine/model/operation/utils~utils.move\\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\\n */\\nexport function _move( sourceRange, targetPosition ) {\\n\\tif ( !sourceRange.isFlat ) {\\n\\t\\t/**\\n\\t\\t * Trying to move a range which starts and ends in different element.\\n\\t\\t *\\n\\t\\t * @error operation-utils-move-range-not-flat\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'operation-utils-move-range-not-flat: ' +\\n\\t\\t\\t'Trying to move a range which starts and ends in different element.' );\\n\\t}\\n\\n\\tconst nodes = _remove( sourceRange );\\n\\n\\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\\n\\t// that change might have an impact on `targetPosition`.\\n\\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\\n\\n\\treturn _insert( targetPosition, nodes );\\n}\\n\\n/**\\n * Sets given attribute on nodes in given range.\\n *\\n * @protected\\n * @function module:engine/model/operation/utils~utils._setAttribute\\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set.\\n * @param {String} key Key of attribute to set.\\n * @param {*} value Attribute value.\\n */\\nexport function _setAttribute( range, key, value ) {\\n\\t// Range might start or end in text nodes, so we have to split them.\\n\\t_splitNodeAtPosition( range.start );\\n\\t_splitNodeAtPosition( range.end );\\n\\n\\t// Iterate over all items in the range.\\n\\tfor ( const item of range.getItems() ) {\\n\\t\\t// Iterator will return `TextProxy` instances but we know that those text proxies will\\n\\t\\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\\n\\t\\t// So, we can operate on those text proxies' text nodes.\\n\\t\\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\\n\\n\\t\\tif ( value !== null ) {\\n\\t\\t\\tnode._setAttribute( key, value );\\n\\t\\t} else {\\n\\t\\t\\tnode._removeAttribute( key );\\n\\t\\t}\\n\\n\\t\\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\\n\\t\\t_mergeNodesAtIndex( node.parent, node.index );\\n\\t}\\n\\n\\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\\n\\t_mergeNodesAtIndex( range.end.parent, range.end.index );\\n}\\n\\n/**\\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\\n *\\n * @protected\\n * @function module:engine/model/operation/utils~utils.normalizeNodes\\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\\n */\\nexport function _normalizeNodes( nodes ) {\\n\\tconst normalized = [];\\n\\n\\tif ( !( nodes instanceof Array ) ) {\\n\\t\\tnodes = [ nodes ];\\n\\t}\\n\\n\\t// Convert instances of classes other than Node.\\n\\tfor ( let i = 0; i < nodes.length; i++ ) {\\n\\t\\tif ( typeof nodes[ i ] == 'string' ) {\\n\\t\\t\\tnormalized.push( new Text( nodes[ i ] ) );\\n\\t\\t} else if ( nodes[ i ] instanceof TextProxy ) {\\n\\t\\t\\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\\n\\t\\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\\n\\t\\t\\tfor ( const child of nodes[ i ] ) {\\n\\t\\t\\t\\tnormalized.push( child );\\n\\t\\t\\t}\\n\\t\\t} else if ( nodes[ i ] instanceof Node ) {\\n\\t\\t\\tnormalized.push( nodes[ i ] );\\n\\t\\t}\\n\\t\\t// Skip unrecognized type.\\n\\t}\\n\\n\\t// Merge text nodes.\\n\\tfor ( let i = 1; i < normalized.length; i++ ) {\\n\\t\\tconst node = normalized[ i ];\\n\\t\\tconst prev = normalized[ i - 1 ];\\n\\n\\t\\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\\n\\t\\t\\t// Doing this instead changing prev.data because .data is readonly.\\n\\t\\t\\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\\n\\t\\t\\ti--;\\n\\t\\t}\\n\\t}\\n\\n\\treturn normalized;\\n}\\n\\n/**\\n * Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\\n * merges them into one node if they have same attributes.\\n *\\n * Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\\n *\\n * @ignore\\n * @private\\n * @param {module:engine/model/element~Element} element Parent element of nodes to merge.\\n * @param {Number} index Index between nodes to merge.\\n */\\nfunction _mergeNodesAtIndex( element, index ) {\\n\\tconst nodeBefore = element.getChild( index - 1 );\\n\\tconst nodeAfter = element.getChild( index );\\n\\n\\t// Check if both of those nodes are text objects with same attributes.\\n\\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\\n\\t\\t// Append text of text node after index to the before one.\\n\\t\\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\\n\\n\\t\\t// Remove separate text nodes.\\n\\t\\telement._removeChildren( index - 1, 2 );\\n\\n\\t\\t// Insert merged text node.\\n\\t\\telement._insertChildren( index - 1, mergedNode );\\n\\t}\\n}\\n\\n/**\\n * Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\\n * containing a part of original text node.\\n *\\n * @ignore\\n * @private\\n * @param {module:engine/model/position~Position} position Position at which node should be split.\\n */\\nfunction _splitNodeAtPosition( position ) {\\n\\tconst textNode = position.textNode;\\n\\tconst element = position.parent;\\n\\n\\tif ( textNode ) {\\n\\t\\tconst offsetDiff = position.offset - textNode.startOffset;\\n\\t\\tconst index = textNode.index;\\n\\n\\t\\telement._removeChildren( index, 1 );\\n\\n\\t\\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\\n\\t\\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\\n\\n\\t\\telement._insertChildren( index, [ firstPart, secondPart ] );\\n\\t}\\n}\\n\\n/**\\n * Checks whether two given nodes have same attributes.\\n *\\n * @ignore\\n * @private\\n * @param {module:engine/model/node~Node} nodeA Node to check.\\n * @param {module:engine/model/node~Node} nodeB Node to check.\\n * @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\\n */\\nfunction _haveSameAttributes( nodeA, nodeB ) {\\n\\tconst iteratorA = nodeA.getAttributes();\\n\\tconst iteratorB = nodeB.getAttributes();\\n\\n\\tfor ( const attr of iteratorA ) {\\n\\t\\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\titeratorB.next();\\n\\t}\\n\\n\\treturn iteratorB.next().done;\\n}\\n\\n/**\\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\\n *\\n * Non-arrays are normalized as follows:\\n * * {@link module:engine/model/node~Node Node} is left as is,\\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\\n * * children.\\n *\\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\\n * merged if they have same attributes.\\n *\\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\\n * module:engine/model/node~NodeSet\\n */\\n\",\"import baseIsEqual from './_baseIsEqual';\\n\\n/**\\n * Performs a deep comparison between two values to determine if they are\\n * equivalent.\\n *\\n * **Note:** This method supports comparing arrays, array buffers, booleans,\\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\\n * by their own, not inherited, enumerable properties. Functions and DOM\\n * nodes are **not** supported.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {boolean} Returns `true` if the values are equivalent,\\n *  else `false`.\\n * @example\\n *\\n * var object = { 'user': 'fred' };\\n * var other = { 'user': 'fred' };\\n *\\n * _.isEqual(object, other);\\n * // => true\\n *\\n * object === other;\\n * // => false\\n */\\nfunction isEqual(value, other) {\\n  return baseIsEqual(value, other);\\n}\\n\\nexport default isEqual;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/attributeoperation\\n */\\n\\nimport Operation from './operation';\\nimport Range from '../range';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport { _setAttribute } from './utils';\\nimport isEqual from '@ckeditor/ckeditor5-utils/src/lib/lodash/isEqual';\\n\\n/**\\n * Operation to change nodes' attribute.\\n *\\n * Using this class you can add, remove or change value of the attribute.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class AttributeOperation extends Operation {\\n\\t/**\\n\\t * Creates an operation that changes, removes or adds attributes.\\n\\t *\\n\\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\\n\\t * have an attribute with the same key as the added attribute.\\n\\t *\\n\\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\\n\\t * must have an attribute with that key added.\\n\\t *\\n\\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\\n\\t * operation's ranges must already have an attribute with given key and `oldValue` as value\\n\\t *\\n\\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied.\\n\\t * @param {String} key Key of an attribute to change or remove.\\n\\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\\n\\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( range, key, oldValue, newValue, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Range on which operation should be applied.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/range~Range}\\n\\t\\t */\\n\\t\\tthis.range = Range.createFromRange( range );\\n\\n\\t\\t/**\\n\\t\\t * Key of an attribute to change or remove.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.key = key;\\n\\n\\t\\t/**\\n\\t\\t * Old value of the attribute with given key or `null`, if attribute was not set before.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {*}\\n\\t\\t */\\n\\t\\tthis.oldValue = oldValue === undefined ? null : oldValue;\\n\\n\\t\\t/**\\n\\t\\t * New value of the attribute with given key or `null`, if operation should remove attribute.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {*}\\n\\t\\t */\\n\\t\\tthis.newValue = newValue === undefined ? null : newValue;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\tif ( this.oldValue === null ) {\\n\\t\\t\\treturn 'addAttribute';\\n\\t\\t} else if ( this.newValue === null ) {\\n\\t\\t\\treturn 'removeAttribute';\\n\\t\\t} else {\\n\\t\\t\\treturn 'changeAttribute';\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tfor ( const item of this.range.getItems() ) {\\n\\t\\t\\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Changed node has different attribute value than operation's old attribute value.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error attribute-operation-wrong-old-value\\n\\t\\t\\t\\t * @param {module:engine/model/item~Item} item\\n\\t\\t\\t\\t * @param {String} key\\n\\t\\t\\t\\t * @param {*} value\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\\\'s ' +\\n\\t\\t\\t\\t\\t'old attribute value.',\\n\\t\\t\\t\\t\\t{ item, key: this.key, value: this.oldValue }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * The attribute with given key already exists for the given node.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error attribute-operation-attribute-exists\\n\\t\\t\\t\\t * @param {module:engine/model/node~Node} node\\n\\t\\t\\t\\t * @param {String} key\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\\n\\t\\t\\t\\t\\t{ node: item, key: this.key }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\t// If value to set is same as old value, don't do anything.\\n\\t\\tif ( !isEqual( this.oldValue, this.newValue ) ) {\\n\\t\\t\\t// Execution.\\n\\t\\t\\t_setAttribute( this.range, this.key, this.newValue );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.AttributeOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/moveoperation\\n */\\n\\nimport Operation from './operation';\\nimport Position from '../position';\\nimport Range from '../range';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\nimport { _move } from './utils';\\n\\n/**\\n * Operation to move a range of {@link module:engine/model/item~Item model items}\\n * to given {@link module:engine/model/position~Position target position}.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class MoveOperation extends Operation {\\n\\t/**\\n\\t * Creates a move operation.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} sourcePosition\\n\\t * Position before the first {@link module:engine/model/item~Item model item} to move.\\n\\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\\n\\t * `sourcePosition` with offset shifted by `howMany`.\\n\\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Position before the first {@link module:engine/model/item~Item model item} to move.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\\n\\t\\t */\\n\\t\\tthis.sourcePosition = Position.createFromPosition( sourcePosition );\\n\\n\\t\\t/**\\n\\t\\t * Offset size of moved range.\\n\\t\\t *\\n\\t\\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\\n\\t\\t */\\n\\t\\tthis.howMany = howMany;\\n\\n\\t\\t/**\\n\\t\\t * Position at which moved nodes will be inserted.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\\n\\t\\t */\\n\\t\\tthis.targetPosition = Position.createFromPosition( targetPosition );\\n\\n\\t\\t/**\\n\\t\\t * Defines whether `MoveOperation` is sticky. If `MoveOperation` is sticky, during\\n\\t\\t * {@link module:engine/model/operation/transform~transform operational transformation} if there will be an operation that\\n\\t\\t * inserts some nodes at the position equal to the boundary of this `MoveOperation`, that operation will\\n\\t\\t * get their insertion path updated to the position where this `MoveOperation` moves the range.\\n\\t\\t *\\n\\t\\t * @member {Boolean} module:engine/model/operation/moveoperation~MoveOperation#isSticky\\n\\t\\t */\\n\\t\\tthis.isSticky = false;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'move';\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\tconst op = new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\\n\\t\\top.isSticky = this.isSticky;\\n\\n\\t\\treturn op;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the start position of the moved range after it got moved. This may be different than\\n\\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\\n\\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\\n\\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\\n\\t *\\n\\t *\\t\\t vv              vv\\n\\t *\\t\\tabcdefg ===> adefbcg\\n\\t *\\t\\t     ^          ^\\n\\t *\\t\\t     targetPos\\tmovedRangeStart\\n\\t *\\t\\t     offset 6\\toffset 4\\n\\t *\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tgetMovedRangeStart() {\\n\\t\\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\\n\\n\\t\\tconst op = new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\\n\\t\\top.isSticky = this.isSticky;\\n\\n\\t\\treturn op;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tconst sourceElement = this.sourcePosition.parent;\\n\\t\\tconst targetElement = this.targetPosition.parent;\\n\\t\\tconst sourceOffset = this.sourcePosition.offset;\\n\\t\\tconst targetOffset = this.targetPosition.offset;\\n\\n\\t\\t// Validate whether move operation has correct parameters.\\n\\t\\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\\n\\t\\t// We expect that many errors might be connected with one of scenarios described below.\\n\\t\\tif ( !sourceElement || !targetElement ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Source position or target position is invalid.\\n\\t\\t\\t *\\n\\t\\t\\t * @error move-operation-position-invalid\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'move-operation-position-invalid: Source position or target position is invalid.'\\n\\t\\t\\t);\\n\\t\\t} else if ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The nodes which should be moved do not exist.\\n\\t\\t\\t *\\n\\t\\t\\t * @error move-operation-nodes-do-not-exist\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.'\\n\\t\\t\\t);\\n\\t\\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to move a range of nodes into the middle of that range.\\n\\t\\t\\t *\\n\\t\\t\\t * @error move-operation-range-into-itself\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.'\\n\\t\\t\\t);\\n\\t\\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\\n\\t\\t\\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\\n\\t\\t\\t\\tconst i = this.sourcePosition.path.length - 1;\\n\\n\\t\\t\\t\\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\\n\\t\\t\\t\\t\\t/**\\n\\t\\t\\t\\t\\t * Trying to move a range of nodes into one of nodes from that range.\\n\\t\\t\\t\\t\\t *\\n\\t\\t\\t\\t\\t * @error move-operation-node-into-itself\\n\\t\\t\\t\\t\\t */\\n\\t\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t\\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.'\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\t_move( Range.createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.MoveOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\\n\\t\\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\\n\\n\\t\\tconst move = new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\\n\\n\\t\\tif ( json.isSticky ) {\\n\\t\\t\\tmove.isSticky = true;\\n\\t\\t}\\n\\n\\t\\treturn move;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/reinsertoperation\\n */\\n\\nimport MoveOperation from './moveoperation';\\nimport RemoveOperation from './removeoperation';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Operation to reinsert previously removed nodes back to the non-graveyard root. This operation acts like\\n * {@link module:engine/model/operation/moveoperation~MoveOperation} but it returns\\n * {@link module:engine/model/operation/removeoperation~RemoveOperation} when reversed\\n * and fires different change event.\\n */\\nexport default class ReinsertOperation extends MoveOperation {\\n\\t/**\\n\\t * Position where nodes will be re-inserted.\\n\\t *\\n\\t * @type {module:engine/model/position~Position}\\n\\t */\\n\\tget position() {\\n\\t\\treturn this.targetPosition;\\n\\t}\\n\\n\\t/**\\n\\t * @param {module:engine/model/position~Position} pos\\n\\t */\\n\\tset position( pos ) {\\n\\t\\tthis.targetPosition = pos;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'reinsert';\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/removeoperation~RemoveOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\\n\\n\\t\\treturn new RemoveOperation( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tsuper._validate();\\n\\n\\t\\tif ( !this.sourcePosition.root.document ) {\\n\\t\\t\\tthrow new CKEditorError( 'reinsert-operation-on-detached-item: Cannot reinsert detached item.' );\\n\\t\\t}\\n\\n\\t\\tif ( !this.targetPosition.root.document ) {\\n\\t\\t\\tthrow new CKEditorError( 'reinsert-operation-to-detached-parent: Cannot reinsert item to detached parent.' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.ReinsertOperation';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/removeoperation\\n */\\n\\nimport MoveOperation from './moveoperation';\\nimport ReinsertOperation from './reinsertoperation';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Operation to remove a range of nodes.\\n */\\nexport default class RemoveOperation extends MoveOperation {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'remove';\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/reinsertoperation~ReinsertOperation|module:engine/model/operation/nooperation~NoOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\\n\\n\\t\\treturn new ReinsertOperation( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tsuper._validate();\\n\\n\\t\\tif ( !this.sourcePosition.root.document ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Item that is going to be removed needs to be a {@link module:engine/model/document~Document document} child.\\n\\t\\t\\t * To remove Item from detached document fragment use\\n\\t\\t\\t * {@link module:engine/model/operation/detachoperation~DetachOperation DetachOperation}.\\n\\t\\t\\t *\\n\\t\\t\\t * @error remove-operation-on-detached-item\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'remove-operation-on-detached-item: Cannot remove detached item.' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.RemoveOperation';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/insertoperation\\n */\\n\\nimport Operation from './operation';\\nimport Position from '../position';\\nimport NodeList from '../nodelist';\\nimport RemoveOperation from './removeoperation';\\nimport { _insert, _normalizeNodes } from './utils';\\nimport Text from '../text';\\nimport Element from '../element';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Operation to insert one or more nodes at given position in the model.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class InsertOperation extends Operation {\\n\\t/**\\n\\t * Creates an insert operation.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position of insertion.\\n\\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( position, nodes, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Position of insertion.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\\n\\t\\t */\\n\\t\\tthis.position = Position.createFromPosition( position );\\n\\n\\t\\t/**\\n\\t\\t * List of nodes to insert.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\\n\\t\\t */\\n\\t\\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'insert';\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\\n\\n\\t\\treturn new InsertOperation( this.position, nodes, this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/removeoperation~RemoveOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\tconst graveyard = this.position.root.document.graveyard;\\n\\t\\tconst gyPosition = new Position( graveyard, [ 0 ] );\\n\\n\\t\\treturn new RemoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tconst targetElement = this.position.parent;\\n\\n\\t\\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Insertion position is invalid.\\n\\t\\t\\t *\\n\\t\\t\\t * @error insert-operation-position-invalid\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'insert-operation-position-invalid: Insertion position is invalid.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\t// What happens here is that we want original nodes be passed to writer because we want original nodes\\n\\t\\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\\n\\t\\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\\n\\t\\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\\n\\t\\tconst originalNodes = this.nodes;\\n\\t\\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\\n\\n\\t\\t_insert( this.position, originalNodes );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.InsertOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\tconst children = [];\\n\\n\\t\\tfor ( const child of json.nodes ) {\\n\\t\\t\\tif ( child.name ) {\\n\\t\\t\\t\\t// If child has name property, it is an Element.\\n\\t\\t\\t\\tchildren.push( Element.fromJSON( child ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Otherwise, it is a Text node.\\n\\t\\t\\t\\tchildren.push( Text.fromJSON( child ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/markeroperation\\n */\\n\\nimport Operation from './operation';\\nimport Range from '../range';\\n\\n/**\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class MarkerOperation extends Operation {\\n\\t/**\\n\\t * @param {String} name Marker name.\\n\\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\\n\\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\\n\\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( name, oldRange, newRange, markers, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Marker name.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.name = name;\\n\\n\\t\\t/**\\n\\t\\t * Marker range before the change.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/range~Range}\\n\\t\\t */\\n\\t\\tthis.oldRange = oldRange ? Range.createFromRange( oldRange ) : null;\\n\\n\\t\\t/**\\n\\t\\t * Marker range after the change.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/range~Range}\\n\\t\\t */\\n\\t\\tthis.newRange = newRange ? Range.createFromRange( newRange ) : null;\\n\\n\\t\\t/**\\n\\t\\t * Marker collection on which change should be executed.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/markercollection~MarkerCollection}\\n\\t\\t */\\n\\t\\tthis._markers = markers;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'marker';\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\tconst type = this.newRange ? '_set' : '_remove';\\n\\n\\t\\tthis._markers[ type ]( this.name, this.newRange, true );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = super.toJSON();\\n\\n\\t\\tdelete json._markers;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.MarkerOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates `MarkerOperation` object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\treturn new MarkerOperation(\\n\\t\\t\\tjson.name,\\n\\t\\t\\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\\n\\t\\t\\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\\n\\t\\t\\tdocument.model.markers,\\n\\t\\t\\tjson.baseVersion\\n\\t\\t);\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/nooperation\\n */\\n\\nimport Operation from './operation';\\n\\n/**\\n * Operation which is doing nothing (\\\"empty operation\\\", \\\"do-nothing operation\\\", \\\"noop\\\"). This is an operation,\\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\\n *\\n * In most cases this operation is a result of transforming operations. When transformation returns\\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\\n * have already been applied.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class NoOperation extends Operation {\\n\\tget type() {\\n\\t\\treturn 'noop';\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new NoOperation( this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/nooperation~NoOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\treturn new NoOperation( this.baseVersion + 1 );\\n\\t}\\n\\n\\t_execute() {\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.NoOperation';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/renameoperation\\n */\\n\\nimport Operation from './operation';\\nimport Element from '../element';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport Position from '../position';\\n\\n/**\\n * Operation to change element's name.\\n *\\n * Using this class you can change element's name.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class RenameOperation extends Operation {\\n\\t/**\\n\\t * Creates an operation that changes element's name.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position before an element to change.\\n\\t * @param {String} oldName Current name of the element.\\n\\t * @param {String} newName New name for the element.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( position, oldName, newName, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Position before an element to change.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\\n\\t\\t */\\n\\t\\tthis.position = position;\\n\\n\\t\\t/**\\n\\t\\t * Current name of the element.\\n\\t\\t *\\n\\t\\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\\n\\t\\t */\\n\\t\\tthis.oldName = oldName;\\n\\n\\t\\t/**\\n\\t\\t * New name for the element.\\n\\t\\t *\\n\\t\\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\\n\\t\\t */\\n\\t\\tthis.newName = newName;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'rename';\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new RenameOperation( Position.createFromPosition( this.position ), this.oldName, this.newName, this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\treturn new RenameOperation( Position.createFromPosition( this.position ), this.newName, this.oldName, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tconst element = this.position.nodeAfter;\\n\\n\\t\\tif ( !( element instanceof Element ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Given position is invalid or node after it is not instance of Element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rename-operation-wrong-position\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.'\\n\\t\\t\\t);\\n\\t\\t} else if ( element.name !== this.oldName ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Element to change has different name than operation's old name.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rename-operation-wrong-name\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rename-operation-wrong-name: Element to change has different name than operation\\\\'s old name.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\tconst element = this.position.nodeAfter;\\n\\n\\t\\telement.name = this.newName;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.RenameOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/rootattributeoperation\\n */\\n\\nimport Operation from './operation';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\\n *\\n * This operation is needed, because root elements can't be changed through\\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\\n * requires a range to change and root element can't\\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\\n * {@link module:engine/model/position~Position} can't be created before a root element.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class RootAttributeOperation extends Operation {\\n\\t/**\\n\\t * Creates an operation that changes, removes or adds attributes on root element.\\n\\t *\\n\\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\\n\\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\\n\\t * @param {String} key Key of an attribute to change or remove.\\n\\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\\n\\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\\n\\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\\n\\t * can be applied or `null` if the operation operates on detached (non-document) tree.\\n\\t */\\n\\tconstructor( root, key, oldValue, newValue, baseVersion ) {\\n\\t\\tsuper( baseVersion );\\n\\n\\t\\t/**\\n\\t\\t * Root element to change.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/rootelement~RootElement}\\n\\t\\t */\\n\\t\\tthis.root = root;\\n\\n\\t\\t/**\\n\\t\\t * Key of an attribute to change or remove.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.key = key;\\n\\n\\t\\t/**\\n\\t\\t * Old value of the attribute with given key or `null` if adding a new attribute.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {*}\\n\\t\\t */\\n\\t\\tthis.oldValue = oldValue;\\n\\n\\t\\t/**\\n\\t\\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {*}\\n\\t\\t */\\n\\t\\tthis.newValue = newValue;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\tif ( this.oldValue === null ) {\\n\\t\\t\\treturn 'addRootAttribute';\\n\\t\\t} else if ( this.newValue === null ) {\\n\\t\\t\\treturn 'removeRootAttribute';\\n\\t\\t} else {\\n\\t\\t\\treturn 'changeRootAttribute';\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns an operation that has the same parameters as this operation.\\n\\t *\\n\\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\\n\\t */\\n\\tclone() {\\n\\t\\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\\n\\t *\\n\\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\\n\\t */\\n\\tgetReversed() {\\n\\t\\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The element to change is not a root element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rootattribute-operation-not-a-root\\n\\t\\t\\t * @param {module:engine/model/rootelement~RootElement} root\\n\\t\\t\\t * @param {String} key\\n\\t\\t\\t * @param {*} value\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\\n\\t\\t\\t\\t{ root: this.root, key: this.key }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The attribute which should be removed does not exists for the given node.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rootattribute-operation-wrong-old-value\\n\\t\\t\\t * @param {module:engine/model/rootelement~RootElement} root\\n\\t\\t\\t * @param {String} key\\n\\t\\t\\t * @param {*} value\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\\\'s ' +\\n\\t\\t\\t\\t'old attribute value.',\\n\\t\\t\\t\\t{ root: this.root, key: this.key }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The attribute with given key already exists for the given node.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rootattribute-operation-attribute-exists\\n\\t\\t\\t * @param {module:engine/model/rootelement~RootElement} root\\n\\t\\t\\t * @param {String} key\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\\n\\t\\t\\t\\t{ root: this.root, key: this.key }\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\tif ( this.newValue !== null ) {\\n\\t\\t\\tthis.root._setAttribute( this.key, this.newValue );\\n\\t\\t} else {\\n\\t\\t\\tthis.root._removeAttribute( this.key );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.RootAttributeOperation';\\n\\t}\\n\\n\\t/**\\n\\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\tif ( !document.getRoot( json.root ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\\n\\t\\t\\t *\\n\\t\\t\\t * @error rootattributeoperation-fromjson-no-root\\n\\t\\t\\t * @param {String} rootName\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\\n\\t\\t\\t\\t{ rootName: json }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/operationfactory\\n */\\n\\nimport AttributeOperation from '../operation/attributeoperation';\\nimport InsertOperation from '../operation/insertoperation';\\nimport MarkerOperation from '../operation/markeroperation';\\nimport MoveOperation from '../operation/moveoperation';\\nimport NoOperation from '../operation/nooperation';\\nimport Operation from '../operation/operation';\\nimport ReinsertOperation from '../operation/reinsertoperation';\\nimport RemoveOperation from '../operation/removeoperation';\\nimport RenameOperation from '../operation/renameoperation';\\nimport RootAttributeOperation from '../operation/rootattributeoperation';\\n\\nconst operations = {};\\noperations[ AttributeOperation.className ] = AttributeOperation;\\noperations[ InsertOperation.className ] = InsertOperation;\\noperations[ MarkerOperation.className ] = MarkerOperation;\\noperations[ MoveOperation.className ] = MoveOperation;\\noperations[ NoOperation.className ] = NoOperation;\\noperations[ Operation.className ] = Operation;\\noperations[ ReinsertOperation.className ] = ReinsertOperation;\\noperations[ RemoveOperation.className ] = RemoveOperation;\\noperations[ RenameOperation.className ] = RenameOperation;\\noperations[ RootAttributeOperation.className ] = RootAttributeOperation;\\n\\n/**\\n * A factory class for creating operations.\\n *\\n * @abstract\\n */\\nexport default class OperationFactory {\\n\\t/**\\n\\t * Creates concrete `Operation` object from deserilized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json Deserialized JSON object.\\n\\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\\n\\t * @returns {module:engine/model/operation/operation~Operation}\\n\\t */\\n\\tstatic fromJSON( json, document ) {\\n\\t\\treturn operations[ json.__className ].fromJSON( json, document );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/deltafactory\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\nimport OperationFactory from '../operation/operationfactory';\\n\\nconst deserializers = new Map();\\n\\n/**\\n * A factory class for creating operations.\\n *\\n * Delta is a single, from the user action point of view, change in the editable document, like insert, split or\\n * rename element. Delta is composed of operations, which are unit changes needed to be done to execute user action.\\n *\\n * Multiple deltas are grouped into a single {@link module:engine/model/batch~Batch}.\\n */\\nexport default class DeltaFactory {\\n\\t/**\\n\\t * Creates InsertDelta from deserialized object, i.e. from parsed JSON string.\\n\\t *\\n\\t * @param {Object} json\\n\\t * @param {module:engine/model/document~Document} doc Document on which this delta will be applied.\\n\\t * @returns {module:engine/model/delta/insertdelta~InsertDelta}\\n\\t */\\n\\tstatic fromJSON( json, doc ) {\\n\\t\\tif ( !deserializers.has( json.__className ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * This delta has no defined deserializer.\\n\\t\\t\\t *\\n\\t\\t\\t * @error delta-fromjson-no-deserializer\\n\\t\\t\\t * @param {String} name\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'delta-fromjson-no-deserializer: This delta has no defined deserializer',\\n\\t\\t\\t\\t{ name: json.__className }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst Delta = deserializers.get( json.__className );\\n\\n\\t\\tconst delta = new Delta();\\n\\n\\t\\tfor ( const operation of json.operations ) {\\n\\t\\t\\tdelta.addOperation( OperationFactory.fromJSON( operation, doc ) );\\n\\t\\t}\\n\\n\\t\\t// Rewrite all other properties.\\n\\t\\tfor ( const prop in json ) {\\n\\t\\t\\tif ( prop != '__className' && delta[ prop ] === undefined ) {\\n\\t\\t\\t\\tdelta[ prop ] = json[ prop ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn delta;\\n\\t}\\n\\n\\t/**\\n\\t * Registers a class for delta factory.\\n\\t *\\n\\t * @param {Function} Delta A delta class to register.\\n\\t */\\n\\tstatic register( Delta ) {\\n\\t\\tdeserializers.set( Delta.className, Delta );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/delta\\n */\\n\\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * Base class for all deltas.\\n *\\n * Delta is a single, from the user action point of view, change in the editable document, like insert, split or\\n * rename element. Delta is composed of operations, which are unit changes needed to be done to execute user action.\\n *\\n * Multiple deltas are grouped into a single {@link module:engine/model/batch~Batch}.\\n */\\nexport default class Delta {\\n\\t/**\\n\\t * Creates a delta instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * {@link module:engine/model/batch~Batch} which delta is a part of. This property is null by default and set by the\\n\\t\\t * {@link module:engine/model/batch~Batch#addDelta} method.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/batch~Batch} module:engine/model/delta/delta~Delta#batch\\n\\t\\t */\\n\\t\\tthis.batch = null;\\n\\n\\t\\t/**\\n\\t\\t * Array of operations which compose delta.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/operation/operation~Operation[]} module:engine/model/delta/delta~Delta#operations\\n\\t\\t */\\n\\t\\tthis.operations = [];\\n\\t}\\n\\n\\t/**\\n\\t * Returns delta base version which is equal to the base version of the first operation in delta. If there\\n\\t * are no operations in delta, returns `null`.\\n\\t *\\n\\t * @see module:engine/model/document~Document\\n\\t * @type {Number|null}\\n\\t */\\n\\tget baseVersion() {\\n\\t\\tif ( this.operations.length > 0 ) {\\n\\t\\t\\treturn this.operations[ 0 ].baseVersion;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * @param {Number} baseVersion\\n\\t */\\n\\tset baseVersion( baseVersion ) {\\n\\t\\tfor ( const operation of this.operations ) {\\n\\t\\t\\toperation.baseVersion = baseVersion++;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * A class that will be used when creating reversed delta.\\n\\t *\\n\\t * @private\\n\\t * @type {Function}\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn Delta;\\n\\t}\\n\\n\\t/**\\n\\t * Delta type.\\n\\t *\\n\\t * @readonly\\n\\t * @member {String} #type\\n\\t */\\n\\n\\t/**\\n\\t * Add operation to the delta.\\n\\t *\\n\\t * @param {module:engine/model/operation/operation~Operation} operation Operation instance.\\n\\t */\\n\\taddOperation( operation ) {\\n\\t\\toperation.delta = this;\\n\\t\\tthis.operations.push( operation );\\n\\n\\t\\treturn operation;\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns a delta that has the same parameters as this delta.\\n\\t *\\n\\t * @returns {module:engine/model/delta/delta~Delta} Clone of this delta.\\n\\t */\\n\\tclone() {\\n\\t\\tconst delta = new this.constructor();\\n\\n\\t\\tfor ( const op of this.operations ) {\\n\\t\\t\\tdelta.addOperation( op.clone() );\\n\\t\\t}\\n\\n\\t\\treturn delta;\\n\\t}\\n\\n\\t/**\\n\\t * Creates and returns a reverse delta. Reverse delta when executed right after the original delta will bring back\\n\\t * tree model state to the point before the original delta execution. In other words, it reverses changes done\\n\\t * by the original delta.\\n\\t *\\n\\t * Keep in mind that tree model state may change since executing the original delta, so reverse delta may be \\\"outdated\\\".\\n\\t * In that case you will need to {@link module:engine/model/delta/transform~transform} it by all deltas that were executed after\\n\\t * the original delta.\\n\\t *\\n\\t * @returns {module:engine/model/delta/delta~Delta} Reversed delta.\\n\\t */\\n\\tgetReversed() {\\n\\t\\tconst delta = new this._reverseDeltaClass();\\n\\n\\t\\tfor ( const op of this.operations ) {\\n\\t\\t\\tdelta.addOperation( op.getReversed() );\\n\\t\\t}\\n\\n\\t\\tdelta.operations.reverse();\\n\\n\\t\\tfor ( let i = 0; i < delta.operations.length; i++ ) {\\n\\t\\t\\tdelta.operations[ i ].baseVersion = this.operations[ this.operations.length - 1 ].baseVersion + i + 1;\\n\\t\\t}\\n\\n\\t\\treturn delta;\\n\\t}\\n\\n\\t/**\\n\\t * Custom toJSON method to make deltas serializable.\\n\\t *\\n\\t * @returns {Object} Clone of this delta with added class name.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = clone( this );\\n\\n\\t\\tjson.__className = this.constructor.className;\\n\\n\\t\\t// Remove parent batch to avoid circular dependencies.\\n\\t\\tdelete json.batch;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Delta class name. Used by {@link #toJSON} method for serialization and\\n\\t * {@link module:engine/model/delta/deltafactory~DeltaFactory.fromJSON} during deserialization.\\n\\t *\\n\\t * @type {String}\\n\\t * @readonly\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.Delta';\\n\\t}\\n}\\n\\nDeltaFactory.register( Delta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/attributedelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\nimport NoOperation from '../operation/nooperation';\\nimport Range from '../range';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, methods to change attributes\\n * ({@link module:engine/model/writer~Writer#setAttribute} and {@link module:engine/model/writer~Writer#removeAttribute})\\n * use `AttributeDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class AttributeDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'attribute';\\n\\t}\\n\\n\\t/**\\n\\t * The attribute key that is changed by the delta or `null` if the delta has no operations.\\n\\t *\\n\\t * @readonly\\n\\t * @type {String|null}\\n\\t */\\n\\tget key() {\\n\\t\\treturn this.operations[ 0 ] ? this.operations[ 0 ].key : null;\\n\\t}\\n\\n\\t/**\\n\\t * The attribute value that is set by the delta or `null` if the delta has no operations.\\n\\t *\\n\\t * @readonly\\n\\t * @type {*|null}\\n\\t */\\n\\tget value() {\\n\\t\\treturn this.operations[ 0 ] ? this.operations[ 0 ].newValue : null;\\n\\t}\\n\\n\\t/**\\n\\t * The range on which delta operates or `null` if the delta has no operations.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/range~Range|null}\\n\\t */\\n\\tget range() {\\n\\t\\t// Check if it is cached.\\n\\t\\tif ( this._range ) {\\n\\t\\t\\treturn this._range;\\n\\t\\t}\\n\\n\\t\\tlet start = null;\\n\\t\\tlet end = null;\\n\\n\\t\\tfor ( const operation of this.operations ) {\\n\\t\\t\\tif ( operation instanceof NoOperation ) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( start === null || start.isAfter( operation.range.start ) ) {\\n\\t\\t\\t\\tstart = operation.range.start;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( end === null || end.isBefore( operation.range.end ) ) {\\n\\t\\t\\t\\tend = operation.range.end;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( start && end ) {\\n\\t\\t\\tthis._range = new Range( start, end );\\n\\n\\t\\t\\treturn this._range;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn AttributeDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = super.toJSON();\\n\\n\\t\\tdelete json._range;\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.AttributeDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( AttributeDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/splitdelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\nimport MoveOperation from '../operation/moveoperation';\\nimport MergeDelta from '../delta/mergedelta';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#split} method\\n * uses `SplitDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class SplitDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'split';\\n\\t}\\n\\n\\t/**\\n\\t * Position of split or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget position() {\\n\\t\\treturn this._moveOperation ? this._moveOperation.sourcePosition : null;\\n\\t}\\n\\n\\t/**\\n\\t * Operation in the delta that adds to model an element into which split nodes will be moved, or `null` if\\n\\t * there are no operations in the delta.\\n\\t *\\n\\t * Most commonly this will be {@link module:engine/model/operation/insertoperation~InsertOperation an insert operation},\\n\\t * as `SplitDelta` has to create a new node. If `SplitDelta` was created through\\n\\t * {@link module:engine/model/delta/delta~Delta#getReversed reversing}\\n\\t * a {@link module:engine/model/delta/mergedelta~MergeDelta merge delta},\\n\\t * this will be a {@link module:engine/model/operation/reinsertoperation~ReinsertOperation reinsert operation},\\n\\t * as we will want to re-insert the exact element that was removed by that merge delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/insertoperation~InsertOperation|\\n\\t * module:engine/model/operation/reinsertoperation~ReinsertOperation|null}\\n\\t */\\n\\tget _cloneOperation() {\\n\\t\\treturn this.operations[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Operation in the delta that moves model items, that are after split position, to their new parent or `null`\\n\\t * if there are no operations in the delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\\n\\t */\\n\\tget _moveOperation() {\\n\\t\\treturn this.operations[ 1 ] && this.operations[ 1 ] instanceof MoveOperation ? this.operations[ 1 ] : null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn MergeDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.SplitDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( SplitDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/mergedelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\nimport SplitDelta from './splitdelta';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\\n * uses the `MergeDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class MergeDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'merge';\\n\\t}\\n\\n\\t/**\\n\\t * Position between to merged nodes or `null` if the delta has no operations.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget position() {\\n\\t\\treturn this._removeOperation ? this._removeOperation.sourcePosition : null;\\n\\t}\\n\\n\\t/**\\n\\t * Operation in this delta that removes the node after merge position (which will be empty at that point) or\\n\\t * `null` if the delta has no operations. Note, that after {@link module:engine/model/delta/transform~transform transformation}\\n\\t * this might be an instance of {@link module:engine/model/operation/moveoperation~MoveOperation} instead of\\n\\t * {@link module:engine/model/operation/removeoperation~RemoveOperation}.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\\n\\t */\\n\\tget _removeOperation() {\\n\\t\\treturn this.operations[ 1 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn SplitDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.MergeDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( MergeDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/movedelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#move} method\\n * uses the `MoveDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class MoveDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'move';\\n\\t}\\n\\n\\t/**\\n\\t * Offset size of moved range or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @type {Number|null}\\n\\t */\\n\\tget howMany() {\\n\\t\\treturn this._moveOperation ? this._moveOperation.howMany : null;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation}\\n\\t * {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition source position} or `null` if there are\\n\\t * no operations in the delta.\\n\\t *\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget sourcePosition() {\\n\\t\\treturn this._moveOperation ? this._moveOperation.sourcePosition : null;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation}\\n\\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition target position} or `null` if there are\\n\\t * no operations in the delta.\\n\\t *\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget targetPosition() {\\n\\t\\treturn this._moveOperation ? this._moveOperation.targetPosition : null;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/delta/movedelta~MoveDelta#_moveOperation Move operation} that is saved in this delta or `null`\\n\\t * if there are no operations in the delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\\n\\t */\\n\\tget _moveOperation() {\\n\\t\\treturn this.operations[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn MoveDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.MoveDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( MoveDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/removedelta\\n */\\n\\nimport MoveDelta from './movedelta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#remove} method\\n * uses the `RemoveDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class RemoveDelta extends MoveDelta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.RemoveDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( RemoveDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/renamedelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#rename Batch#rename} method\\n * uses the `RenameDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class RenameDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'rename';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn RenameDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.RenameDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( RenameDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/wrapdelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\nimport UnwrapDelta from './unwrapdelta';\\nimport Range from '../range';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\\n * uses the `WrapDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class WrapDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'wrap';\\n\\t}\\n\\n\\t/**\\n\\t * Range to wrap or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @type {module:engine/model/range~Range|null}\\n\\t */\\n\\tget range() {\\n\\t\\tconst moveOp = this._moveOperation;\\n\\n\\t\\treturn moveOp ? Range.createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany ) : null;\\n\\t}\\n\\n\\t/**\\n\\t * Offset size of range to wrap by the delta or `null` if there are no operations in delta.\\n\\t *\\n\\t * @type {Number}\\n\\t */\\n\\tget howMany() {\\n\\t\\tconst range = this.range;\\n\\n\\t\\treturn range ? range.end.offset - range.start.offset : 0;\\n\\t}\\n\\n\\t/* eslint-disable max-len */\\n\\t/**\\n\\t * Operation that inserts wrapping element or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/insertoperation~InsertOperation|module:engine/model/operation/reinsertoperation~ReinsertOperation}\\n\\t */\\n\\t/* eslint-enable max-len */\\n\\tget _insertOperation() {\\n\\t\\treturn this.operations[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Operation that moves wrapped nodes to their new parent or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\\n\\t */\\n\\tget _moveOperation() {\\n\\t\\treturn this.operations[ 1 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn UnwrapDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.WrapDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( WrapDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/unwrapdelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\nimport WrapDelta from './wrapdelta';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, {@link module:engine/model/writer~Writer#merge} method\\n * uses the `UnwrapDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class UnwrapDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'unwrap';\\n\\t}\\n\\n\\t/**\\n\\t * Position before unwrapped element or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget position() {\\n\\t\\treturn this._moveOperation ? this._moveOperation.targetPosition : null;\\n\\t}\\n\\n\\t/**\\n\\t * Operation in the delta that moves unwrapped nodes to their new parent or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/moveoperation~MoveOperation|null}\\n\\t */\\n\\tget _moveOperation() {\\n\\t\\treturn this.operations[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn WrapDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.UnwrapDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( UnwrapDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/insertdelta\\n */\\n\\nimport Delta from './delta';\\nimport RemoveDelta from './removedelta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#insert Batch#insert} method\\n * uses the `InsertDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class InsertDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'insert';\\n\\t}\\n\\n\\t/**\\n\\t * Position where the delta inserts nodes or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/position~Position|null}\\n\\t */\\n\\tget position() {\\n\\t\\treturn this._insertOperation ? this._insertOperation.position : null;\\n\\t}\\n\\n\\t/**\\n\\t * Node list containing all the nodes inserted by the delta or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/nodelist~NodeList|null}\\n\\t */\\n\\tget nodes() {\\n\\t\\treturn this._insertOperation ? this._insertOperation.nodes : null;\\n\\t}\\n\\n\\t/**\\n\\t * Insert operation that is saved in this delta or `null` if there are no operations in the delta.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {module:engine/model/operation/insertoperation~InsertOperation|null}\\n\\t */\\n\\tget _insertOperation() {\\n\\t\\treturn this.operations[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn RemoveDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.InsertDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( InsertDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/weakinsertdelta\\n */\\n\\nimport InsertDelta from './insertdelta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#insert} method\\n * uses the `WeakInsertDelta` class which inherits from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class WeakInsertDelta extends InsertDelta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.WeakInsertDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( WeakInsertDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/transform\\n */\\n\\nimport InsertOperation from './insertoperation';\\nimport AttributeOperation from './attributeoperation';\\nimport RootAttributeOperation from './rootattributeoperation';\\nimport RenameOperation from './renameoperation';\\nimport MarkerOperation from './markeroperation';\\nimport MoveOperation from './moveoperation';\\nimport RemoveOperation from './removeoperation';\\nimport ReinsertOperation from './reinsertoperation';\\nimport NoOperation from './nooperation';\\nimport Range from '../range';\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\n\\n/**\\n * Transforms given {@link module:engine/model/operation/operation~Operation operation}\\n * by another {@link module:engine/model/operation/operation~Operation operation}\\n * and returns the result of that transformation as an array containing\\n * one or more {@link module:engine/model/operation/operation~Operation operations}.\\n *\\n * Operations work on specified positions, passed to them when they are created.\\n * Whenever {@link module:engine/model/document~Document document}\\n * changes, we have to reflect those modifications by updating or \\\"transforming\\\" operations which are not yet applied.\\n * When an operation is transformed, its parameters may change based on the operation by which it is transformed.\\n * If the transform-by operation applied any modifications to the Tree Data Model which affect positions or nodes\\n * connected with transformed operation, those changes will be reflected in the parameters of the returned operation(s).\\n *\\n * Whenever the {@link module:engine/model/document~Document document}\\n * has different {@link module:engine/model/document~Document#version}\\n * than the operation you want to {@link module:engine/model/model~Model#applyOperation apply}, you need to transform that\\n * operation by all operations which were already applied to the {@link module:engine/model/document~Document document} and have greater\\n * {@link module:engine/model/document~Document#version} than the operation being applied. Transform them in the same order as those\\n * operations which were applied. This way all modifications done to the Tree Data Model will be reflected\\n * in the operation parameters and the operation will \\\"operate\\\" on \\\"up-to-date\\\" version of the Tree Data Model.\\n * This is mostly the case with Operational Transformations but it might be needed in particular features as well.\\n *\\n * In some cases, when given operation apply changes to the same nodes as this operation, two or more operations need\\n * to be created as one would not be able to reflect the combination of these operations.\\n * This is why an array is returned instead of a single object. All returned operations have to be applied\\n * (or further transformed) to get an effect which was intended in pre-transformed operation.\\n *\\n * Sometimes two operations are in conflict. This happens when they modify the same node in a different way, i.e.\\n * set different value for the same attribute or move the node into different positions. When this happens,\\n * we need to decide which operation is more important. We can't assume that operation `a` or operation `b` is always\\n * more important. In Operational Transformations algorithms we often need to get a result of transforming\\n * `a` by `b` and also `b` by `a`. In both transformations the same operation has to be the important one. If we assume\\n * that first or the second passed operation is always more important we won't be able to solve this case.\\n *\\n * @function module:engine/model/operation/transform~transform\\n * @param {module:engine/model/operation/operation~Operation} a Operation that will be transformed.\\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\\n * @param {module:engine/model/delta/transform~transformationContext} [context] Transformation context.\\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Result of the transformation.\\n */\\n\\nexport default transform;\\n\\nconst ot = {\\n\\tInsertOperation: {\\n\\t\\t// Transforms InsertOperation `a` by InsertOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tInsertOperation( a, b, context ) {\\n\\t\\t\\t// Transformed operations are always new instances, not references to the original operations.\\n\\t\\t\\tconst transformed = a.clone();\\n\\n\\t\\t\\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\\n\\t\\t\\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\\n\\n\\t\\t\\t// Transform insert position by the other operation position.\\n\\t\\t\\ttransformed.position = transformed.position._getTransformedByInsertion( b.position, b.nodes.maxOffset, insertBefore );\\n\\n\\t\\t\\treturn [ transformed ];\\n\\t\\t},\\n\\n\\t\\tAttributeOperation: doNotUpdate,\\n\\n\\t\\tRootAttributeOperation: doNotUpdate,\\n\\n\\t\\tRenameOperation: doNotUpdate,\\n\\n\\t\\tMarkerOperation: doNotUpdate,\\n\\n\\t\\t// Transforms InsertOperation `a` by MoveOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tMoveOperation( a, b, context ) {\\n\\t\\t\\tconst transformed = a.clone();\\n\\n\\t\\t\\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\\n\\t\\t\\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\\n\\n\\t\\t\\t// Transform insert position by the other operation parameters.\\n\\t\\t\\ttransformed.position = a.position._getTransformedByMove(\\n\\t\\t\\t\\tb.sourcePosition,\\n\\t\\t\\t\\tb.targetPosition,\\n\\t\\t\\t\\tb.howMany,\\n\\t\\t\\t\\tinsertBefore,\\n\\t\\t\\t\\tb.isSticky && !context.forceNotSticky\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn [ transformed ];\\n\\t\\t}\\n\\t},\\n\\n\\tAttributeOperation: {\\n\\t\\t// Transforms AttributeOperation `a` by InsertOperation `b`. Returns results as an array of operations.\\n\\t\\tInsertOperation( a, b ) {\\n\\t\\t\\t// Transform this operation's range.\\n\\t\\t\\tconst ranges = a.range._getTransformedByInsertion( b.position, b.nodes.maxOffset, true, false );\\n\\n\\t\\t\\t// Map transformed range(s) to operations and return them.\\n\\t\\t\\treturn ranges.reverse().map( range => {\\n\\t\\t\\t\\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\\n\\t\\t\\t} );\\n\\t\\t},\\n\\n\\t\\t// Transforms AttributeOperation `a` by AttributeOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tAttributeOperation( a, b, context ) {\\n\\t\\t\\tif ( a.key === b.key ) {\\n\\t\\t\\t\\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\\n\\n\\t\\t\\t\\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\\n\\t\\t\\t\\tconst operations = a.range.getDifference( b.range ).map( range => {\\n\\t\\t\\t\\t\\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t// Then we take care of the common part of ranges.\\n\\t\\t\\t\\tconst common = a.range.getIntersection( b.range );\\n\\n\\t\\t\\t\\tif ( common ) {\\n\\t\\t\\t\\t\\t// If this operation is more important, we also want to apply change to the part of the\\n\\t\\t\\t\\t\\t// original range that has already been changed by the other operation. Since that range\\n\\t\\t\\t\\t\\t// got changed we also have to update `oldValue`.\\n\\t\\t\\t\\t\\tif ( context.isStrong ) {\\n\\t\\t\\t\\t\\t\\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, a.baseVersion ) );\\n\\t\\t\\t\\t\\t} else if ( operations.length === 0 ) {\\n\\t\\t\\t\\t\\t\\toperations.push( new NoOperation( 0 ) );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn operations;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If operations don't conflict, simply return an array containing just a clone of this operation.\\n\\t\\t\\t\\treturn [ a.clone() ];\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tRootAttributeOperation: doNotUpdate,\\n\\n\\t\\tRenameOperation: doNotUpdate,\\n\\n\\t\\tMarkerOperation: doNotUpdate,\\n\\n\\t\\t// Transforms AttributeOperation `a` by MoveOperation `b`. Returns results as an array of operations.\\n\\t\\tMoveOperation( a, b ) {\\n\\t\\t\\t// Convert MoveOperation properties into a range.\\n\\t\\t\\tconst rangeB = Range.createFromPositionAndShift( b.sourcePosition, b.howMany );\\n\\n\\t\\t\\t// This will aggregate transformed ranges.\\n\\t\\t\\tlet ranges = [];\\n\\n\\t\\t\\t// Difference is a part of changed range that is modified by AttributeOperation but is not affected\\n\\t\\t\\t// by MoveOperation. This can be zero, one or two ranges (if moved range is inside changed range).\\n\\t\\t\\t// Right now we will make a simplification and join difference ranges and transform them as one. We will cover rangeB later.\\n\\t\\t\\tconst difference = joinRanges( a.range.getDifference( rangeB ) );\\n\\n\\t\\t\\t// Common is a range of nodes that is affected by MoveOperation. So it got moved to other place.\\n\\t\\t\\tconst common = a.range.getIntersection( rangeB );\\n\\n\\t\\t\\tif ( difference !== null ) {\\n\\t\\t\\t\\t// MoveOperation removes nodes from their original position. We acknowledge this by proper transformation.\\n\\t\\t\\t\\t// Take the start and the end of the range and transform them by deletion of moved nodes.\\n\\t\\t\\t\\t// Note that if rangeB was inside AttributeOperation range, only difference.end will be transformed.\\n\\t\\t\\t\\t// This nicely covers the joining simplification we did in the previous step.\\n\\t\\t\\t\\tdifference.start = difference.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\\n\\t\\t\\t\\tdifference.end = difference.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\\n\\n\\t\\t\\t\\t// MoveOperation pastes nodes into target position. We acknowledge this by proper transformation.\\n\\t\\t\\t\\t// Note that since we operate on transformed difference range, we should transform by\\n\\t\\t\\t\\t// previously transformed target position.\\n\\t\\t\\t\\t// Note that we do not use Position._getTransformedByMove on range boundaries because we need to\\n\\t\\t\\t\\t// transform by insertion a range as a whole, since newTargetPosition might be inside that range.\\n\\t\\t\\t\\tranges = difference._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, true, false ).reverse();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( common !== null ) {\\n\\t\\t\\t\\t// Here we do not need to worry that newTargetPosition is inside moved range, because that\\n\\t\\t\\t\\t// would mean that the MoveOperation targets into itself, and that is incorrect operation.\\n\\t\\t\\t\\t// Instead, we calculate the new position of that part of original range.\\n\\t\\t\\t\\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\t\\t\\t\\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\n\\t\\t\\t\\tranges.push( common );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Map transformed range(s) to operations and return them.\\n\\t\\t\\treturn ranges.map( range => {\\n\\t\\t\\t\\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t},\\n\\n\\tRootAttributeOperation: {\\n\\t\\tInsertOperation: doNotUpdate,\\n\\n\\t\\tAttributeOperation: doNotUpdate,\\n\\n\\t\\t// Transforms RootAttributeOperation `a` by RootAttributeOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tRootAttributeOperation( a, b, context ) {\\n\\t\\t\\tif ( a.root === b.root && a.key === b.key ) {\\n\\t\\t\\t\\tif ( ( a.newValue !== b.newValue && !context.isStrong ) || a.newValue === b.newValue ) {\\n\\t\\t\\t\\t\\treturn [ new NoOperation( a.baseVersion ) ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ a.clone() ];\\n\\t\\t},\\n\\n\\t\\tRenameOperation: doNotUpdate,\\n\\n\\t\\tMarkerOperation: doNotUpdate,\\n\\n\\t\\tMoveOperation: doNotUpdate\\n\\t},\\n\\n\\tRenameOperation: {\\n\\t\\t// Transforms RenameOperation `a` by InsertOperation `b`. Returns results as an array of operations.\\n\\t\\tInsertOperation( a, b ) {\\n\\t\\t\\t// Clone the operation, we don't want to alter the original operation.\\n\\t\\t\\tconst clone = a.clone();\\n\\n\\t\\t\\t// Transform this operation's position.\\n\\t\\t\\tclone.position = clone.position._getTransformedByInsertion( b.position, b.nodes.maxOffset, true );\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t},\\n\\n\\t\\tAttributeOperation: doNotUpdate,\\n\\n\\t\\tRootAttributeOperation: doNotUpdate,\\n\\n\\t\\t// Transforms RenameOperation `a` by RenameOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tRenameOperation( a, b, context ) {\\n\\t\\t\\t// Clone the operation, we don't want to alter the original operation.\\n\\t\\t\\tconst clone = a.clone();\\n\\n\\t\\t\\tif ( a.position.isEqual( b.position ) ) {\\n\\t\\t\\t\\tif ( context.isStrong ) {\\n\\t\\t\\t\\t\\tclone.oldName = b.newName;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn [ new NoOperation( a.baseVersion ) ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t},\\n\\n\\t\\tMarkerOperation: doNotUpdate,\\n\\n\\t\\t// Transforms RenameOperation `a` by MoveOperation `b`. Returns results as an array of operations.\\n\\t\\tMoveOperation( a, b ) {\\n\\t\\t\\tconst clone = a.clone();\\n\\t\\t\\tconst isSticky = clone.position.isEqual( b.sourcePosition );\\n\\n\\t\\t\\tclone.position = clone.position._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, true, isSticky );\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t}\\n\\t},\\n\\n\\tMarkerOperation: {\\n\\t\\t// Transforms MarkerOperation `a` by InsertOperation `b`. Returns results as an array of operations.\\n\\t\\tInsertOperation( a, b ) {\\n\\t\\t\\t// Clone the operation, we don't want to alter the original operation.\\n\\t\\t\\tconst clone = a.clone();\\n\\n\\t\\t\\tif ( clone.oldRange ) {\\n\\t\\t\\t\\tclone.oldRange = clone.oldRange._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, false )[ 0 ];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( clone.newRange ) {\\n\\t\\t\\t\\tclone.newRange = clone.newRange._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, false )[ 0 ];\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t},\\n\\n\\t\\tAttributeOperation: doNotUpdate,\\n\\n\\t\\tRootAttributeOperation: doNotUpdate,\\n\\n\\t\\tRenameOperation: doNotUpdate,\\n\\n\\t\\t// Transforms MarkerOperation `a` by MarkerOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tMarkerOperation( a, b, context ) {\\n\\t\\t\\t// Clone the operation, we don't want to alter the original operation.\\n\\t\\t\\tconst clone = a.clone();\\n\\n\\t\\t\\tif ( a.name == b.name ) {\\n\\t\\t\\t\\tif ( context.isStrong ) {\\n\\t\\t\\t\\t\\tclone.oldRange = b.newRange;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn [ new NoOperation( a.baseVersion ) ];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t},\\n\\n\\t\\t// Transforms MarkerOperation `a` by MoveOperation `b`. Returns results as an array of operations.\\n\\t\\tMoveOperation( a, b ) {\\n\\t\\t\\t// Clone the operation, we don't want to alter the original operation.\\n\\t\\t\\tconst clone = a.clone();\\n\\n\\t\\t\\tif ( clone.oldRange ) {\\n\\t\\t\\t\\tconst oldRanges = clone.oldRange._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\\n\\t\\t\\t\\tclone.oldRange = Range.createFromRanges( oldRanges );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( clone.newRange ) {\\n\\t\\t\\t\\tconst newRanges = clone.newRange._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\\n\\t\\t\\t\\tclone.newRange = Range.createFromRanges( newRanges );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ clone ];\\n\\t\\t}\\n\\t},\\n\\n\\tMoveOperation: {\\n\\t\\t// Transforms MoveOperation `a` by InsertOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tInsertOperation( a, b, context ) {\\n\\t\\t\\t// Create range from MoveOperation properties and transform it by insertion.\\n\\t\\t\\tlet range = Range.createFromPositionAndShift( a.sourcePosition, a.howMany );\\n\\t\\t\\tconst includeB = a.isSticky && !context.forceNotSticky;\\n\\n\\t\\t\\trange = range._getTransformedByInsertion( b.position, b.nodes.maxOffset, false, includeB )[ 0 ];\\n\\n\\t\\t\\t// Check whether there is a forced order of nodes or use `context.isStrong` flag for conflict resolving.\\n\\t\\t\\tconst insertBefore = context.insertBefore === undefined ? !context.isStrong : context.insertBefore;\\n\\n\\t\\t\\tconst result = new a.constructor(\\n\\t\\t\\t\\trange.start,\\n\\t\\t\\t\\trange.end.offset - range.start.offset,\\n\\t\\t\\t\\ta.targetPosition._getTransformedByInsertion( b.position, b.nodes.maxOffset, insertBefore ),\\n\\t\\t\\t\\ta.baseVersion\\n\\t\\t\\t);\\n\\n\\t\\t\\tresult.isSticky = a.isSticky;\\n\\n\\t\\t\\treturn [ result ];\\n\\t\\t},\\n\\n\\t\\tAttributeOperation: doNotUpdate,\\n\\n\\t\\tRootAttributeOperation: doNotUpdate,\\n\\n\\t\\tRenameOperation: doNotUpdate,\\n\\n\\t\\tMarkerOperation: doNotUpdate,\\n\\n\\t\\t// Transforms MoveOperation `a` by MoveOperation `b`. Accepts a flag stating whether `a` is more important\\n\\t\\t// than `b` when it comes to resolving conflicts. Returns results as an array of operations.\\n\\t\\tMoveOperation( a, b, context ) {\\n\\t\\t\\t//\\n\\t\\t\\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\\n\\t\\t\\t//\\n\\t\\t\\t// Create ranges from `MoveOperations` properties.\\n\\t\\t\\tconst rangeA = Range.createFromPositionAndShift( a.sourcePosition, a.howMany );\\n\\t\\t\\tconst rangeB = Range.createFromPositionAndShift( b.sourcePosition, b.howMany );\\n\\n\\t\\t\\t// Assign `context.isStrong` to a different variable, because the value may change during execution of\\n\\t\\t\\t// this algorithm and we do not want to override original `context.isStrong` that will be used in later transformations.\\n\\t\\t\\tlet isStrong = context.isStrong;\\n\\n\\t\\t\\t// Whether range moved by operation `b` is includable in operation `a` move range.\\n\\t\\t\\t// For this, `a` operation has to be sticky (so `b` sticks to the range) and context has to allow stickiness.\\n\\t\\t\\tconst includeB = a.isSticky && !context.forceNotSticky;\\n\\n\\t\\t\\t// Evaluate new target position for transformed operation.\\n\\t\\t\\t// Check whether there is a forced order of nodes or use `isStrong` flag for conflict resolving.\\n\\t\\t\\tconst insertBefore = context.insertBefore === undefined ? !isStrong : context.insertBefore;\\n\\n\\t\\t\\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\\n\\t\\t\\tconst newTargetPosition = a.targetPosition._getTransformedByMove(\\n\\t\\t\\t\\tb.sourcePosition,\\n\\t\\t\\t\\tb.targetPosition,\\n\\t\\t\\t\\tb.howMany,\\n\\t\\t\\t\\tinsertBefore,\\n\\t\\t\\t\\tb.isSticky && !context.forceNotSticky\\n\\t\\t\\t);\\n\\n\\t\\t\\t//\\n\\t\\t\\t// Special case #1 + mirror.\\n\\t\\t\\t//\\n\\t\\t\\t// Special case when both move operations' target positions are inside nodes that are\\n\\t\\t\\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\\n\\t\\t\\t// This case can't be solved reasonably (on the other hand, it should not happen often).\\n\\t\\t\\tif ( moveTargetIntoMovedRange( a, b ) && moveTargetIntoMovedRange( b, a ) ) {\\n\\t\\t\\t\\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\\n\\t\\t\\t\\t// So when the results of this \\\"transformation\\\" will be applied, `b` MoveOperation will get reversed.\\n\\t\\t\\t\\treturn [ b.getReversed() ];\\n\\t\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\t// End of special case #1.\\n\\t\\t\\t//\\n\\n\\t\\t\\t//\\n\\t\\t\\t// Special case #2.\\n\\t\\t\\t//\\n\\t\\t\\t// Check if `b` operation targets inside `rangeA`. Use stickiness if possible.\\n\\t\\t\\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition ) ||\\n\\t\\t\\t\\t( rangeA.start.isEqual( b.targetPosition ) && includeB ) ||\\n\\t\\t\\t\\t( rangeA.end.isEqual( b.targetPosition ) && includeB );\\n\\n\\t\\t\\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\\n\\t\\t\\t// You might say that operation `b` is captured inside operation `a`.\\n\\t\\t\\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\\n\\t\\t\\t\\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\\n\\t\\t\\t\\t// we need to transform `a` operation anyway.\\n\\t\\t\\t\\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, !includeB );\\n\\t\\t\\t\\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, includeB );\\n\\n\\t\\t\\t\\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\\n\\t\\t\\t}\\n\\n\\t\\t\\t//\\n\\t\\t\\t// Special case #2 mirror.\\n\\t\\t\\t//\\n\\t\\t\\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition ) ||\\n\\t\\t\\t\\t( rangeB.start.isEqual( a.targetPosition ) && b.isSticky && !context.forceNotSticky ) ||\\n\\t\\t\\t\\t( rangeB.end.isEqual( a.targetPosition ) && b.isSticky && !context.forceNotSticky );\\n\\n\\t\\t\\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\\n\\t\\t\\t\\t// `a` operation is \\\"moved together\\\" with `b` operation.\\n\\t\\t\\t\\t// Here, just move `rangeA` \\\"inside\\\" `rangeB`.\\n\\t\\t\\t\\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\t\\t\\t\\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\n\\t\\t\\t\\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\\n\\t\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\t// End of special case #2.\\n\\t\\t\\t//\\n\\n\\t\\t\\t//\\n\\t\\t\\t// Special case #3 + mirror.\\n\\t\\t\\t//\\n\\t\\t\\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\\n\\t\\t\\t// but not on the same tree level. In such case ranges have common part but we have to treat it\\n\\t\\t\\t// differently, because in such case those ranges are not really conflicting and should be treated like\\n\\t\\t\\t// two separate ranges. Also we have to discard two difference parts.\\n\\t\\t\\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\\n\\n\\t\\t\\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\\n\\t\\t\\t\\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\\n\\t\\t\\t\\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\\n\\t\\t\\t\\t// like a one difference part.\\n\\t\\t\\t\\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, !includeB );\\n\\t\\t\\t\\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany, includeB );\\n\\n\\t\\t\\t\\treturn makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition, a );\\n\\t\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\t// End of special case #3.\\n\\t\\t\\t//\\n\\n\\t\\t\\t//\\n\\t\\t\\t// Default case - ranges are on the same level or are not connected with each other.\\n\\t\\t\\t//\\n\\t\\t\\t// Modifier for default case.\\n\\t\\t\\t// Modifies `isStrong` flag in certain conditions.\\n\\t\\t\\t//\\n\\t\\t\\t// If only one of operations is a remove operation, we force remove operation to be the \\\"stronger\\\" one\\n\\t\\t\\t// to provide more expected results. This is done only if `context.forceWeakRemove` is set to `false`.\\n\\t\\t\\t// `context.forceWeakRemove` is set to `true` in certain conditions when transformation takes place during undo.\\n\\t\\t\\tif ( !context.forceWeakRemove ) {\\n\\t\\t\\t\\tif ( a instanceof RemoveOperation && !( b instanceof RemoveOperation ) ) {\\n\\t\\t\\t\\t\\tisStrong = true;\\n\\t\\t\\t\\t} else if ( !( a instanceof RemoveOperation ) && b instanceof RemoveOperation ) {\\n\\t\\t\\t\\t\\tisStrong = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\\n\\t\\t\\t// This will aggregate transformed ranges.\\n\\t\\t\\tconst ranges = [];\\n\\n\\t\\t\\t// Get the \\\"difference part\\\" of `a` operation source range.\\n\\t\\t\\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\\n\\t\\t\\tconst difference = rangeA.getDifference( rangeB );\\n\\n\\t\\t\\tfor ( const range of difference ) {\\n\\t\\t\\t\\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\\n\\t\\t\\t\\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\\n\\t\\t\\t\\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\\n\\n\\t\\t\\t\\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\\n\\t\\t\\t\\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\\n\\t\\t\\t\\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread, includeB );\\n\\n\\t\\t\\t\\tranges.push( ...newRanges );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Then, we have to manage the \\\"common part\\\" of both move ranges.\\n\\t\\t\\tconst common = rangeA.getIntersection( rangeB );\\n\\n\\t\\t\\tif ( common !== null && isStrong && !bTargetsToA ) {\\n\\t\\t\\t\\t// Calculate the new position of that part of original range.\\n\\t\\t\\t\\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\t\\t\\t\\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\\n\\n\\t\\t\\t\\t// Take care of proper range order.\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\\n\\t\\t\\t\\t// Basically there are only three cases: there is zero, one or two difference ranges.\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// If there is zero difference ranges, just push `common` in the array.\\n\\t\\t\\t\\tif ( ranges.length === 0 ) {\\n\\t\\t\\t\\t\\tranges.push( common );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If there is one difference range, we need to check whether common part was before it or after it.\\n\\t\\t\\t\\telse if ( ranges.length == 1 ) {\\n\\t\\t\\t\\t\\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\\n\\t\\t\\t\\t\\t\\tranges.unshift( common );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tranges.push( common );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If there are more ranges (which means two), put common part between them. This is the only scenario\\n\\t\\t\\t\\t// where there could be two difference ranges so we don't have to make any comparisons.\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tranges.splice( 1, 0, common );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( ranges.length === 0 ) {\\n\\t\\t\\t\\t// If there are no \\\"source ranges\\\", nothing should be changed.\\n\\t\\t\\t\\t// Note that this can happen only if `isStrong == false` and `rangeA.isEqual( rangeB )`.\\n\\t\\t\\t\\treturn [ new NoOperation( a.baseVersion ) ];\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn makeMoveOperationsFromRanges( ranges, newTargetPosition, a );\\n\\t\\t}\\n\\t}\\n};\\n\\nfunction transform( a, b, context = { isStrong: false } ) {\\n\\tlet group, algorithm;\\n\\n\\tif ( a instanceof InsertOperation ) {\\n\\t\\tgroup = ot.InsertOperation;\\n\\t} else if ( a instanceof AttributeOperation ) {\\n\\t\\tgroup = ot.AttributeOperation;\\n\\t} else if ( a instanceof RootAttributeOperation ) {\\n\\t\\tgroup = ot.RootAttributeOperation;\\n\\t} else if ( a instanceof RenameOperation ) {\\n\\t\\tgroup = ot.RenameOperation;\\n\\t} else if ( a instanceof MarkerOperation ) {\\n\\t\\tgroup = ot.MarkerOperation;\\n\\t} else if ( a instanceof MoveOperation ) {\\n\\t\\tgroup = ot.MoveOperation;\\n\\t} else {\\n\\t\\talgorithm = doNotUpdate;\\n\\t}\\n\\n\\tif ( group ) {\\n\\t\\tif ( b instanceof InsertOperation ) {\\n\\t\\t\\talgorithm = group.InsertOperation;\\n\\t\\t} else if ( b instanceof AttributeOperation ) {\\n\\t\\t\\talgorithm = group.AttributeOperation;\\n\\t\\t} else if ( b instanceof RootAttributeOperation ) {\\n\\t\\t\\talgorithm = group.RootAttributeOperation;\\n\\t\\t} else if ( b instanceof RenameOperation ) {\\n\\t\\t\\talgorithm = group.RenameOperation;\\n\\t\\t} else if ( b instanceof MarkerOperation ) {\\n\\t\\t\\talgorithm = group.MarkerOperation;\\n\\t\\t} else if ( b instanceof MoveOperation ) {\\n\\t\\t\\talgorithm = group.MoveOperation;\\n\\t\\t} else {\\n\\t\\t\\talgorithm = doNotUpdate;\\n\\t\\t}\\n\\t}\\n\\n\\tconst transformed = algorithm( a, b, context );\\n\\n\\treturn updateBaseVersions( a.baseVersion, transformed );\\n}\\n\\n// When we don't want to update an operation, we create and return a clone of it.\\n// Returns the operation in \\\"unified format\\\" - wrapped in an Array.\\nfunction doNotUpdate( operation ) {\\n\\treturn [ operation.clone() ];\\n}\\n\\n// Takes an Array of operations and sets consecutive base versions for them, starting from given base version.\\n// Returns the passed array.\\nfunction updateBaseVersions( baseVersion, operations ) {\\n\\tfor ( let i = 0; i < operations.length; i++ ) {\\n\\t\\toperations[ i ].baseVersion = baseVersion + i + 1;\\n\\t}\\n\\n\\treturn operations;\\n}\\n\\n// Checks whether MoveOperation targetPosition is inside a node from the moved range of the other MoveOperation.\\nfunction moveTargetIntoMovedRange( a, b ) {\\n\\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\\n}\\n\\n// Gets an array of Ranges and produces one Range out of it. The root of a new range will be same as\\n// the root of the first range in the array. If any of given ranges has different root than the first range,\\n// it will be discarded.\\nfunction joinRanges( ranges ) {\\n\\tif ( ranges.length === 0 ) {\\n\\t\\treturn null;\\n\\t} else if ( ranges.length == 1 ) {\\n\\t\\treturn ranges[ 0 ];\\n\\t} else {\\n\\t\\tranges[ 0 ].end = ranges[ ranges.length - 1 ].end;\\n\\n\\t\\treturn ranges[ 0 ];\\n\\t}\\n}\\n\\n// Helper function for `MoveOperation` x `MoveOperation` transformation.\\n// Convert given ranges and target position to move operations and return them.\\n// Ranges and target position will be transformed on-the-fly when generating operations.\\n// Given `ranges` should be in the order of how they were in the original transformed operation.\\n// Given `targetPosition` is the target position of the first range from `ranges`.\\nfunction makeMoveOperationsFromRanges( ranges, targetPosition, a ) {\\n\\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\\n\\t// Order in `ranges` array is the go-to order of after transformation.\\n\\t//\\n\\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\\n\\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\\n\\t// may affect source range and target position of second and third operation. Same with second\\n\\t// operation affecting third.\\n\\t//\\n\\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\\n\\tconst operations = [];\\n\\n\\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\\n\\tfor ( let i = 0; i < ranges.length; i++ ) {\\n\\t\\t// Create new operation out of a range and target position.\\n\\t\\tconst op = makeMoveOperation( ranges[ i ], targetPosition, a.isSticky );\\n\\n\\t\\toperations.push( op );\\n\\n\\t\\t// Transform other ranges by the generated operation.\\n\\t\\tfor ( let j = i + 1; j < ranges.length; j++ ) {\\n\\t\\t\\t// All ranges in `ranges` array should be:\\n\\t\\t\\t// * non-intersecting (these are part of original operation source range), and\\n\\t\\t\\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \\\"inside itself\\\").\\n\\t\\t\\t//\\n\\t\\t\\t// This means that the transformation will be \\\"clean\\\" and always return one result.\\n\\t\\t\\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\\n\\t\\t}\\n\\n\\t\\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany, true, false );\\n\\t}\\n\\n\\treturn operations;\\n}\\n\\nfunction makeMoveOperation( range, targetPosition, isSticky ) {\\n\\t// We want to keep correct operation class.\\n\\tlet OperationClass;\\n\\n\\tif ( targetPosition.root.rootName == '$graveyard' ) {\\n\\t\\tOperationClass = RemoveOperation;\\n\\t} else if ( range.start.root.rootName == '$graveyard' ) {\\n\\t\\tOperationClass = ReinsertOperation;\\n\\t} else {\\n\\t\\tOperationClass = MoveOperation;\\n\\t}\\n\\n\\tconst result = new OperationClass(\\n\\t\\trange.start,\\n\\t\\trange.end.offset - range.start.offset,\\n\\t\\ttargetPosition,\\n\\t\\t0 // Is corrected anyway later.\\n\\t);\\n\\n\\tresult.isSticky = isSticky;\\n\\n\\treturn result;\\n}\\n\",\"/**\\n * The base implementation of `_.slice` without an iteratee call guard.\\n *\\n * @private\\n * @param {Array} array The array to slice.\\n * @param {number} [start=0] The start position.\\n * @param {number} [end=array.length] The end position.\\n * @returns {Array} Returns the slice of `array`.\\n */\\nfunction baseSlice(array, start, end) {\\n  var index = -1,\\n      length = array.length;\\n\\n  if (start < 0) {\\n    start = -start > length ? 0 : (length + start);\\n  }\\n  end = end > length ? length : end;\\n  if (end < 0) {\\n    end += length;\\n  }\\n  length = start > end ? 0 : ((end - start) >>> 0);\\n  start >>>= 0;\\n\\n  var result = Array(length);\\n  while (++index < length) {\\n    result[index] = array[index + start];\\n  }\\n  return result;\\n}\\n\\nexport default baseSlice;\\n\",\"import baseSlice from './_baseSlice';\\nimport isIterateeCall from './_isIterateeCall';\\nimport toInteger from './toInteger';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeCeil = Math.ceil,\\n    nativeMax = Math.max;\\n\\n/**\\n * Creates an array of elements split into groups the length of `size`.\\n * If `array` can't be split evenly, the final chunk will be the remaining\\n * elements.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to process.\\n * @param {number} [size=1] The length of each chunk\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the new array of chunks.\\n * @example\\n *\\n * _.chunk(['a', 'b', 'c', 'd'], 2);\\n * // => [['a', 'b'], ['c', 'd']]\\n *\\n * _.chunk(['a', 'b', 'c', 'd'], 3);\\n * // => [['a', 'b', 'c'], ['d']]\\n */\\nfunction chunk(array, size, guard) {\\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\\n    size = 1;\\n  } else {\\n    size = nativeMax(toInteger(size), 0);\\n  }\\n  var length = array ? array.length : 0;\\n  if (!length || size < 1) {\\n    return [];\\n  }\\n  var index = 0,\\n      resIndex = 0,\\n      result = Array(nativeCeil(length / size));\\n\\n  while (index < length) {\\n    result[resIndex++] = baseSlice(array, index, (index += size));\\n  }\\n  return result;\\n}\\n\\nexport default chunk;\\n\",\"/**\\n * Creates an array with all falsey values removed. The values `false`, `null`,\\n * `0`, `\\\"\\\"`, `undefined`, and `NaN` are falsey.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to compact.\\n * @returns {Array} Returns the new array of filtered values.\\n * @example\\n *\\n * _.compact([0, 1, false, 2, '', 3]);\\n * // => [1, 2, 3]\\n */\\nfunction compact(array) {\\n  var index = -1,\\n      length = array ? array.length : 0,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (value) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default compact;\\n\",\"import isArguments from './isArguments';\\nimport isArray from './isArray';\\n\\n/**\\n * Checks if `value` is a flattenable `arguments` object or array.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\\n */\\nfunction isFlattenable(value) {\\n  return isArray(value) || isArguments(value);\\n}\\n\\nexport default isFlattenable;\\n\",\"import arrayPush from './_arrayPush';\\nimport isFlattenable from './_isFlattenable';\\n\\n/**\\n * The base implementation of `_.flatten` with support for restricting flattening.\\n *\\n * @private\\n * @param {Array} array The array to flatten.\\n * @param {number} depth The maximum recursion depth.\\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\\n * @param {Array} [result=[]] The initial result value.\\n * @returns {Array} Returns the new flattened array.\\n */\\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\\n  var index = -1,\\n      length = array.length;\\n\\n  predicate || (predicate = isFlattenable);\\n  result || (result = []);\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (depth > 0 && predicate(value)) {\\n      if (depth > 1) {\\n        // Recursively flatten arrays (susceptible to call stack limits).\\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\\n      } else {\\n        arrayPush(result, value);\\n      }\\n    } else if (!isStrict) {\\n      result[result.length] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default baseFlatten;\\n\",\"import arrayPush from './_arrayPush';\\nimport baseFlatten from './_baseFlatten';\\nimport copyArray from './_copyArray';\\nimport isArray from './isArray';\\n\\n/**\\n * Creates a new array concatenating `array` with any additional arrays\\n * and/or values.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to concatenate.\\n * @param {...*} [values] The values to concatenate.\\n * @returns {Array} Returns the new concatenated array.\\n * @example\\n *\\n * var array = [1];\\n * var other = _.concat(array, 2, [3], [[4]]);\\n *\\n * console.log(other);\\n * // => [1, 2, 3, [4]]\\n *\\n * console.log(array);\\n * // => [1]\\n */\\nfunction concat() {\\n  var length = arguments.length,\\n      args = Array(length ? length - 1 : 0),\\n      array = arguments[0],\\n      index = length;\\n\\n  while (index--) {\\n    args[index - 1] = arguments[index];\\n  }\\n  return length\\n    ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))\\n    : [];\\n}\\n\\nexport default concat;\\n\",\"/**\\n * Gets the index at which the first occurrence of `NaN` is found in `array`.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {number} fromIndex The index to search from.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {number} Returns the index of the matched `NaN`, else `-1`.\\n */\\nfunction indexOfNaN(array, fromIndex, fromRight) {\\n  var length = array.length,\\n      index = fromIndex + (fromRight ? 0 : -1);\\n\\n  while ((fromRight ? index-- : ++index < length)) {\\n    var other = array[index];\\n    if (other !== other) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default indexOfNaN;\\n\",\"import indexOfNaN from './_indexOfNaN';\\n\\n/**\\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @param {number} fromIndex The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseIndexOf(array, value, fromIndex) {\\n  if (value !== value) {\\n    return indexOfNaN(array, fromIndex);\\n  }\\n  var index = fromIndex - 1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (array[index] === value) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default baseIndexOf;\\n\",\"import baseIndexOf from './_baseIndexOf';\\n\\n/**\\n * A specialized version of `_.includes` for arrays without support for\\n * specifying an index to search from.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {*} target The value to search for.\\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\\n */\\nfunction arrayIncludes(array, value) {\\n  return !!array.length && baseIndexOf(array, value, 0) > -1;\\n}\\n\\nexport default arrayIncludes;\\n\",\"/**\\n * This function is like `arrayIncludes` except that it accepts a comparator.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {*} target The value to search for.\\n * @param {Function} comparator The comparator invoked per element.\\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\\n */\\nfunction arrayIncludesWith(array, value, comparator) {\\n  var index = -1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (comparator(value, array[index])) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nexport default arrayIncludesWith;\\n\",\"/**\\n * A specialized version of `_.map` for arrays without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} array The array to iterate over.\\n * @param {Function} iteratee The function invoked per iteration.\\n * @returns {Array} Returns the new mapped array.\\n */\\nfunction arrayMap(array, iteratee) {\\n  var index = -1,\\n      length = array.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = iteratee(array[index], index, array);\\n  }\\n  return result;\\n}\\n\\nexport default arrayMap;\\n\",\"/**\\n * The base implementation of `_.unary` without support for storing wrapper metadata.\\n *\\n * @private\\n * @param {Function} func The function to cap arguments for.\\n * @returns {Function} Returns the new capped function.\\n */\\nfunction baseUnary(func) {\\n  return function(value) {\\n    return func(value);\\n  };\\n}\\n\\nexport default baseUnary;\\n\",\"/**\\n * Checks if a cache value for `key` exists.\\n *\\n * @private\\n * @param {Object} cache The cache to query.\\n * @param {string} key The key of the entry to check.\\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n */\\nfunction cacheHas(cache, key) {\\n  return cache.has(key);\\n}\\n\\nexport default cacheHas;\\n\",\"import SetCache from './_SetCache';\\nimport arrayIncludes from './_arrayIncludes';\\nimport arrayIncludesWith from './_arrayIncludesWith';\\nimport arrayMap from './_arrayMap';\\nimport baseUnary from './_baseUnary';\\nimport cacheHas from './_cacheHas';\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * The base implementation of methods like `_.difference` without support\\n * for excluding multiple arrays or iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Array} values The values to exclude.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n */\\nfunction baseDifference(array, values, iteratee, comparator) {\\n  var index = -1,\\n      includes = arrayIncludes,\\n      isCommon = true,\\n      length = array.length,\\n      result = [],\\n      valuesLength = values.length;\\n\\n  if (!length) {\\n    return result;\\n  }\\n  if (iteratee) {\\n    values = arrayMap(values, baseUnary(iteratee));\\n  }\\n  if (comparator) {\\n    includes = arrayIncludesWith;\\n    isCommon = false;\\n  }\\n  else if (values.length >= LARGE_ARRAY_SIZE) {\\n    includes = cacheHas;\\n    isCommon = false;\\n    values = new SetCache(values);\\n  }\\n  outer:\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (isCommon && computed === computed) {\\n      var valuesIndex = valuesLength;\\n      while (valuesIndex--) {\\n        if (values[valuesIndex] === computed) {\\n          continue outer;\\n        }\\n      }\\n      result.push(value);\\n    }\\n    else if (!includes(values, computed, comparator)) {\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default baseDifference;\\n\",\"import baseDifference from './_baseDifference';\\nimport baseFlatten from './_baseFlatten';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport rest from './rest';\\n\\n/**\\n * Creates an array of unique `array` values not included in the other given\\n * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons. The order of result values is determined by the\\n * order they occur in the first array.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {...Array} [values] The values to exclude.\\n * @returns {Array} Returns the new array of filtered values.\\n * @see _.without, _.xor\\n * @example\\n *\\n * _.difference([3, 2, 1], [4, 2]);\\n * // => [3, 1]\\n */\\nvar difference = rest(function(array, values) {\\n  return isArrayLikeObject(array)\\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\\n    : [];\\n});\\n\\nexport default difference;\\n\",\"import Stack from './_Stack';\\nimport baseIsEqual from './_baseIsEqual';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar UNORDERED_COMPARE_FLAG = 1,\\n    PARTIAL_COMPARE_FLAG = 2;\\n\\n/**\\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Object} object The object to inspect.\\n * @param {Object} source The object of property values to match.\\n * @param {Array} matchData The property names, values, and compare flags to match.\\n * @param {Function} [customizer] The function to customize comparisons.\\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\\n */\\nfunction baseIsMatch(object, source, matchData, customizer) {\\n  var index = matchData.length,\\n      length = index,\\n      noCustomizer = !customizer;\\n\\n  if (object == null) {\\n    return !length;\\n  }\\n  object = Object(object);\\n  while (index--) {\\n    var data = matchData[index];\\n    if ((noCustomizer && data[2])\\n          ? data[1] !== object[data[0]]\\n          : !(data[0] in object)\\n        ) {\\n      return false;\\n    }\\n  }\\n  while (++index < length) {\\n    data = matchData[index];\\n    var key = data[0],\\n        objValue = object[key],\\n        srcValue = data[1];\\n\\n    if (noCustomizer && data[2]) {\\n      if (objValue === undefined && !(key in object)) {\\n        return false;\\n      }\\n    } else {\\n      var stack = new Stack;\\n      if (customizer) {\\n        var result = customizer(objValue, srcValue, key, object, source, stack);\\n      }\\n      if (!(result === undefined\\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\\n            : result\\n          )) {\\n        return false;\\n      }\\n    }\\n  }\\n  return true;\\n}\\n\\nexport default baseIsMatch;\\n\",\"import isObject from './isObject';\\n\\n/**\\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @returns {boolean} Returns `true` if `value` if suitable for strict\\n *  equality comparisons, else `false`.\\n */\\nfunction isStrictComparable(value) {\\n  return value === value && !isObject(value);\\n}\\n\\nexport default isStrictComparable;\\n\",\"import arrayMap from './_arrayMap';\\n\\n/**\\n * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\\n * of key-value pairs for `object` corresponding to the property names of `props`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array} props The property names to get values for.\\n * @returns {Object} Returns the key-value pairs.\\n */\\nfunction baseToPairs(object, props) {\\n  return arrayMap(props, function(key) {\\n    return [key, object[key]];\\n  });\\n}\\n\\nexport default baseToPairs;\\n\",\"/**\\n * Converts `set` to its value-value pairs.\\n *\\n * @private\\n * @param {Object} set The set to convert.\\n * @returns {Array} Returns the value-value pairs.\\n */\\nfunction setToPairs(set) {\\n  var index = -1,\\n      result = Array(set.size);\\n\\n  set.forEach(function(value) {\\n    result[++index] = [value, value];\\n  });\\n  return result;\\n}\\n\\nexport default setToPairs;\\n\",\"import baseToPairs from './_baseToPairs';\\nimport getTag from './_getTag';\\nimport mapToArray from './_mapToArray';\\nimport setToPairs from './_setToPairs';\\n\\n/** `Object#toString` result references. */\\nvar mapTag = '[object Map]',\\n    setTag = '[object Set]';\\n\\n/**\\n * Creates a `_.toPairs` or `_.toPairsIn` function.\\n *\\n * @private\\n * @param {Function} keysFunc The function to get the keys of a given object.\\n * @returns {Function} Returns the new pairs function.\\n */\\nfunction createToPairs(keysFunc) {\\n  return function(object) {\\n    var tag = getTag(object);\\n    if (tag == mapTag) {\\n      return mapToArray(object);\\n    }\\n    if (tag == setTag) {\\n      return setToPairs(object);\\n    }\\n    return baseToPairs(object, keysFunc(object));\\n  };\\n}\\n\\nexport default createToPairs;\\n\",\"import createToPairs from './_createToPairs';\\nimport keys from './keys';\\n\\n/**\\n * Creates an array of own enumerable string keyed-value pairs for `object`\\n * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\\n * entries are returned.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @alias entries\\n * @category Object\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the key-value pairs.\\n * @example\\n *\\n * function Foo() {\\n *   this.a = 1;\\n *   this.b = 2;\\n * }\\n *\\n * Foo.prototype.c = 3;\\n *\\n * _.toPairs(new Foo);\\n * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\\n */\\nvar toPairs = createToPairs(keys);\\n\\nexport default toPairs;\\n\",\"import isStrictComparable from './_isStrictComparable';\\nimport toPairs from './toPairs';\\n\\n/**\\n * Gets the property names, values, and compare flags of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @returns {Array} Returns the match data of `object`.\\n */\\nfunction getMatchData(object) {\\n  var result = toPairs(object),\\n      length = result.length;\\n\\n  while (length--) {\\n    result[length][2] = isStrictComparable(result[length][1]);\\n  }\\n  return result;\\n}\\n\\nexport default getMatchData;\\n\",\"/**\\n * A specialized version of `matchesProperty` for source values suitable\\n * for strict equality comparisons, i.e. `===`.\\n *\\n * @private\\n * @param {string} key The key of the property to get.\\n * @param {*} srcValue The value to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction matchesStrictComparable(key, srcValue) {\\n  return function(object) {\\n    if (object == null) {\\n      return false;\\n    }\\n    return object[key] === srcValue &&\\n      (srcValue !== undefined || (key in Object(object)));\\n  };\\n}\\n\\nexport default matchesStrictComparable;\\n\",\"import baseIsMatch from './_baseIsMatch';\\nimport getMatchData from './_getMatchData';\\nimport matchesStrictComparable from './_matchesStrictComparable';\\n\\n/**\\n * The base implementation of `_.matches` which doesn't clone `source`.\\n *\\n * @private\\n * @param {Object} source The object of property values to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction baseMatches(source) {\\n  var matchData = getMatchData(source);\\n  if (matchData.length == 1 && matchData[0][2]) {\\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\\n  }\\n  return function(object) {\\n    return object === source || baseIsMatch(object, source, matchData);\\n  };\\n}\\n\\nexport default baseMatches;\\n\",\"import MapCache from './_MapCache';\\n\\n/** Used as the `TypeError` message for \\\"Functions\\\" methods. */\\nvar FUNC_ERROR_TEXT = 'Expected a function';\\n\\n/**\\n * Creates a function that memoizes the result of `func`. If `resolver` is\\n * provided, it determines the cache key for storing the result based on the\\n * arguments provided to the memoized function. By default, the first argument\\n * provided to the memoized function is used as the map cache key. The `func`\\n * is invoked with the `this` binding of the memoized function.\\n *\\n * **Note:** The cache is exposed as the `cache` property on the memoized\\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\\n * constructor with one whose instances implement the\\n * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\\n * method interface of `delete`, `get`, `has`, and `set`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Function\\n * @param {Function} func The function to have its output memoized.\\n * @param {Function} [resolver] The function to resolve the cache key.\\n * @returns {Function} Returns the new memoized function.\\n * @example\\n *\\n * var object = { 'a': 1, 'b': 2 };\\n * var other = { 'c': 3, 'd': 4 };\\n *\\n * var values = _.memoize(_.values);\\n * values(object);\\n * // => [1, 2]\\n *\\n * values(other);\\n * // => [3, 4]\\n *\\n * object.a = 2;\\n * values(object);\\n * // => [1, 2]\\n *\\n * // Modify the result cache.\\n * values.cache.set(object, ['a', 'b']);\\n * values(object);\\n * // => ['a', 'b']\\n *\\n * // Replace `_.memoize.Cache`.\\n * _.memoize.Cache = WeakMap;\\n */\\nfunction memoize(func, resolver) {\\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\\n    throw new TypeError(FUNC_ERROR_TEXT);\\n  }\\n  var memoized = function() {\\n    var args = arguments,\\n        key = resolver ? resolver.apply(this, args) : args[0],\\n        cache = memoized.cache;\\n\\n    if (cache.has(key)) {\\n      return cache.get(key);\\n    }\\n    var result = func.apply(this, args);\\n    memoized.cache = cache.set(key, result);\\n    return result;\\n  };\\n  memoized.cache = new (memoize.Cache || MapCache);\\n  return memoized;\\n}\\n\\n// Assign cache to `_.memoize`.\\nmemoize.Cache = MapCache;\\n\\nexport default memoize;\\n\",\"import Symbol from './_Symbol';\\nimport isSymbol from './isSymbol';\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/** Used to convert symbols to primitives and strings. */\\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\\n\\n/**\\n * The base implementation of `_.toString` which doesn't convert nullish\\n * values to empty strings.\\n *\\n * @private\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n */\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == 'string') {\\n    return value;\\n  }\\n  if (isSymbol(value)) {\\n    return symbolToString ? symbolToString.call(value) : '';\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\nexport default baseToString;\\n\",\"import baseToString from './_baseToString';\\n\\n/**\\n * Converts `value` to a string. An empty string is returned for `null`\\n * and `undefined` values. The sign of `-0` is preserved.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to process.\\n * @returns {string} Returns the string.\\n * @example\\n *\\n * _.toString(null);\\n * // => ''\\n *\\n * _.toString(-0);\\n * // => '-0'\\n *\\n * _.toString([1, 2, 3]);\\n * // => '1,2,3'\\n */\\nfunction toString(value) {\\n  return value == null ? '' : baseToString(value);\\n}\\n\\nexport default toString;\\n\",\"import memoize from './memoize';\\nimport toString from './toString';\\n\\n/** Used to match property names within property paths. */\\nvar rePropName = /[^.[\\\\]]+|\\\\[(?:(-?\\\\d+(?:\\\\.\\\\d+)?)|([\\\"'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2)\\\\]/g;\\n\\n/** Used to match backslashes in property paths. */\\nvar reEscapeChar = /\\\\\\\\(\\\\\\\\)?/g;\\n\\n/**\\n * Converts `string` to a property path array.\\n *\\n * @private\\n * @param {string} string The string to convert.\\n * @returns {Array} Returns the property path array.\\n */\\nvar stringToPath = memoize(function(string) {\\n  var result = [];\\n  toString(string).replace(rePropName, function(match, number, quote, string) {\\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\\n  });\\n  return result;\\n});\\n\\nexport default stringToPath;\\n\",\"import isArray from './isArray';\\nimport stringToPath from './_stringToPath';\\n\\n/**\\n * Casts `value` to a path array if it's not one.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {Array} Returns the cast property path array.\\n */\\nfunction castPath(value) {\\n  return isArray(value) ? value : stringToPath(value);\\n}\\n\\nexport default castPath;\\n\",\"import isArray from './isArray';\\nimport isSymbol from './isSymbol';\\n\\n/** Used to match property names within property paths. */\\nvar reIsDeepProp = /\\\\.|\\\\[(?:[^[\\\\]]*|([\\\"'])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\.)*?\\\\1)\\\\]/,\\n    reIsPlainProp = /^\\\\w*$/;\\n\\n/**\\n * Checks if `value` is a property name and not a property path.\\n *\\n * @private\\n * @param {*} value The value to check.\\n * @param {Object} [object] The object to query keys on.\\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\\n */\\nfunction isKey(value, object) {\\n  if (isArray(value)) {\\n    return false;\\n  }\\n  var type = typeof value;\\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\\n      value == null || isSymbol(value)) {\\n    return true;\\n  }\\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\\n    (object != null && value in Object(object));\\n}\\n\\nexport default isKey;\\n\",\"import isSymbol from './isSymbol';\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Converts `value` to a string key if it's not a string or symbol.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {string|symbol} Returns the key.\\n */\\nfunction toKey(value) {\\n  if (typeof value == 'string' || isSymbol(value)) {\\n    return value;\\n  }\\n  var result = (value + '');\\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\\n}\\n\\nexport default toKey;\\n\",\"import castPath from './_castPath';\\nimport isKey from './_isKey';\\nimport toKey from './_toKey';\\n\\n/**\\n * The base implementation of `_.get` without support for default values.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path of the property to get.\\n * @returns {*} Returns the resolved value.\\n */\\nfunction baseGet(object, path) {\\n  path = isKey(path, object) ? [path] : castPath(path);\\n\\n  var index = 0,\\n      length = path.length;\\n\\n  while (object != null && index < length) {\\n    object = object[toKey(path[index++])];\\n  }\\n  return (index && index == length) ? object : undefined;\\n}\\n\\nexport default baseGet;\\n\",\"import baseGet from './_baseGet';\\n\\n/**\\n * Gets the value at `path` of `object`. If the resolved value is\\n * `undefined`, the `defaultValue` is used in its place.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.7.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path of the property to get.\\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n * @returns {*} Returns the resolved value.\\n * @example\\n *\\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n *\\n * _.get(object, 'a[0].b.c');\\n * // => 3\\n *\\n * _.get(object, ['a', '0', 'b', 'c']);\\n * // => 3\\n *\\n * _.get(object, 'a.b.c', 'default');\\n * // => 'default'\\n */\\nfunction get(object, path, defaultValue) {\\n  var result = object == null ? undefined : baseGet(object, path);\\n  return result === undefined ? defaultValue : result;\\n}\\n\\nexport default get;\\n\",\"/**\\n * The base implementation of `_.hasIn` without support for deep paths.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} key The key to check.\\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\\n */\\nfunction baseHasIn(object, key) {\\n  return key in Object(object);\\n}\\n\\nexport default baseHasIn;\\n\",\"import castPath from './_castPath';\\nimport isArguments from './isArguments';\\nimport isArray from './isArray';\\nimport isIndex from './_isIndex';\\nimport isKey from './_isKey';\\nimport isLength from './isLength';\\nimport isString from './isString';\\nimport toKey from './_toKey';\\n\\n/**\\n * Checks if `path` exists on `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path to check.\\n * @param {Function} hasFunc The function to check properties.\\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\\n */\\nfunction hasPath(object, path, hasFunc) {\\n  path = isKey(path, object) ? [path] : castPath(path);\\n\\n  var result,\\n      index = -1,\\n      length = path.length;\\n\\n  while (++index < length) {\\n    var key = toKey(path[index]);\\n    if (!(result = object != null && hasFunc(object, key))) {\\n      break;\\n    }\\n    object = object[key];\\n  }\\n  if (result) {\\n    return result;\\n  }\\n  var length = object ? object.length : 0;\\n  return !!length && isLength(length) && isIndex(key, length) &&\\n    (isArray(object) || isString(object) || isArguments(object));\\n}\\n\\nexport default hasPath;\\n\",\"import baseHasIn from './_baseHasIn';\\nimport hasPath from './_hasPath';\\n\\n/**\\n * Checks if `path` is a direct or inherited property of `object`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Object\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path to check.\\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\\n * @example\\n *\\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\\n *\\n * _.hasIn(object, 'a');\\n * // => true\\n *\\n * _.hasIn(object, 'a.b');\\n * // => true\\n *\\n * _.hasIn(object, ['a', 'b']);\\n * // => true\\n *\\n * _.hasIn(object, 'b');\\n * // => false\\n */\\nfunction hasIn(object, path) {\\n  return object != null && hasPath(object, path, baseHasIn);\\n}\\n\\nexport default hasIn;\\n\",\"import baseIsEqual from './_baseIsEqual';\\nimport get from './get';\\nimport hasIn from './hasIn';\\nimport isKey from './_isKey';\\nimport isStrictComparable from './_isStrictComparable';\\nimport matchesStrictComparable from './_matchesStrictComparable';\\nimport toKey from './_toKey';\\n\\n/** Used to compose bitmasks for comparison styles. */\\nvar UNORDERED_COMPARE_FLAG = 1,\\n    PARTIAL_COMPARE_FLAG = 2;\\n\\n/**\\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\\n *\\n * @private\\n * @param {string} path The path of the property to get.\\n * @param {*} srcValue The value to match.\\n * @returns {Function} Returns the new spec function.\\n */\\nfunction baseMatchesProperty(path, srcValue) {\\n  if (isKey(path) && isStrictComparable(srcValue)) {\\n    return matchesStrictComparable(toKey(path), srcValue);\\n  }\\n  return function(object) {\\n    var objValue = get(object, path);\\n    return (objValue === undefined && objValue === srcValue)\\n      ? hasIn(object, path)\\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\\n  };\\n}\\n\\nexport default baseMatchesProperty;\\n\",\"/**\\n * This method returns the first argument given to it.\\n *\\n * @static\\n * @since 0.1.0\\n * @memberOf _\\n * @category Util\\n * @param {*} value Any value.\\n * @returns {*} Returns `value`.\\n * @example\\n *\\n * var object = { 'user': 'fred' };\\n *\\n * _.identity(object) === object;\\n * // => true\\n */\\nfunction identity(value) {\\n  return value;\\n}\\n\\nexport default identity;\\n\",\"import baseGet from './_baseGet';\\n\\n/**\\n * A specialized version of `baseProperty` which supports deep paths.\\n *\\n * @private\\n * @param {Array|string} path The path of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n */\\nfunction basePropertyDeep(path) {\\n  return function(object) {\\n    return baseGet(object, path);\\n  };\\n}\\n\\nexport default basePropertyDeep;\\n\",\"import baseProperty from './_baseProperty';\\nimport basePropertyDeep from './_basePropertyDeep';\\nimport isKey from './_isKey';\\nimport toKey from './_toKey';\\n\\n/**\\n * Creates a function that returns the value at `path` of a given object.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Util\\n * @param {Array|string} path The path of the property to get.\\n * @returns {Function} Returns the new accessor function.\\n * @example\\n *\\n * var objects = [\\n *   { 'a': { 'b': 2 } },\\n *   { 'a': { 'b': 1 } }\\n * ];\\n *\\n * _.map(objects, _.property('a.b'));\\n * // => [2, 1]\\n *\\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\\n * // => [1, 2]\\n */\\nfunction property(path) {\\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n}\\n\\nexport default property;\\n\",\"import baseMatches from './_baseMatches';\\nimport baseMatchesProperty from './_baseMatchesProperty';\\nimport identity from './identity';\\nimport isArray from './isArray';\\nimport property from './property';\\n\\n/**\\n * The base implementation of `_.iteratee`.\\n *\\n * @private\\n * @param {*} [value=_.identity] The value to convert to an iteratee.\\n * @returns {Function} Returns the iteratee.\\n */\\nfunction baseIteratee(value) {\\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\\n  if (typeof value == 'function') {\\n    return value;\\n  }\\n  if (value == null) {\\n    return identity;\\n  }\\n  if (typeof value == 'object') {\\n    return isArray(value)\\n      ? baseMatchesProperty(value[0], value[1])\\n      : baseMatches(value);\\n  }\\n  return property(value);\\n}\\n\\nexport default baseIteratee;\\n\",\"import baseDifference from './_baseDifference';\\nimport baseFlatten from './_baseFlatten';\\nimport baseIteratee from './_baseIteratee';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.difference` except that it accepts `iteratee` which\\n * is invoked for each element of `array` and `values` to generate the criterion\\n * by which they're compared. Result values are chosen from the first array.\\n * The iteratee is invoked with one argument: (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {...Array} [values] The values to exclude.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n * @example\\n *\\n * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);\\n * // => [3.1, 1.3]\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\\n * // => [{ 'x': 2 }]\\n */\\nvar differenceBy = rest(function(array, values) {\\n  var iteratee = last(values);\\n  if (isArrayLikeObject(iteratee)) {\\n    iteratee = undefined;\\n  }\\n  return isArrayLikeObject(array)\\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee))\\n    : [];\\n});\\n\\nexport default differenceBy;\\n\",\"import baseDifference from './_baseDifference';\\nimport baseFlatten from './_baseFlatten';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.difference` except that it accepts `comparator`\\n * which is invoked to compare elements of `array` to `values`. Result values\\n * are chosen from the first array. The comparator is invoked with two arguments:\\n * (arrVal, othVal).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {...Array} [values] The values to exclude.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n * @example\\n *\\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\\n *\\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\\n * // => [{ 'x': 2, 'y': 1 }]\\n */\\nvar differenceWith = rest(function(array, values) {\\n  var comparator = last(values);\\n  if (isArrayLikeObject(comparator)) {\\n    comparator = undefined;\\n  }\\n  return isArrayLikeObject(array)\\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\\n    : [];\\n});\\n\\nexport default differenceWith;\\n\",\"import baseSlice from './_baseSlice';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Creates a slice of `array` with `n` elements dropped from the beginning.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.5.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {number} [n=1] The number of elements to drop.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.drop([1, 2, 3]);\\n * // => [2, 3]\\n *\\n * _.drop([1, 2, 3], 2);\\n * // => [3]\\n *\\n * _.drop([1, 2, 3], 5);\\n * // => []\\n *\\n * _.drop([1, 2, 3], 0);\\n * // => [1, 2, 3]\\n */\\nfunction drop(array, n, guard) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  n = (guard || n === undefined) ? 1 : toInteger(n);\\n  return baseSlice(array, n < 0 ? 0 : n, length);\\n}\\n\\nexport default drop;\\n\",\"import baseSlice from './_baseSlice';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Creates a slice of `array` with `n` elements dropped from the end.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {number} [n=1] The number of elements to drop.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.dropRight([1, 2, 3]);\\n * // => [1, 2]\\n *\\n * _.dropRight([1, 2, 3], 2);\\n * // => [1]\\n *\\n * _.dropRight([1, 2, 3], 5);\\n * // => []\\n *\\n * _.dropRight([1, 2, 3], 0);\\n * // => [1, 2, 3]\\n */\\nfunction dropRight(array, n, guard) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  n = (guard || n === undefined) ? 1 : toInteger(n);\\n  n = length - n;\\n  return baseSlice(array, 0, n < 0 ? 0 : n);\\n}\\n\\nexport default dropRight;\\n\",\"import baseSlice from './_baseSlice';\\n\\n/**\\n * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\\n * without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to query.\\n * @param {Function} predicate The function invoked per iteration.\\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {Array} Returns the slice of `array`.\\n */\\nfunction baseWhile(array, predicate, isDrop, fromRight) {\\n  var length = array.length,\\n      index = fromRight ? length : -1;\\n\\n  while ((fromRight ? index-- : ++index < length) &&\\n    predicate(array[index], index, array)) {}\\n\\n  return isDrop\\n    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\\n    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\\n}\\n\\nexport default baseWhile;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseWhile from './_baseWhile';\\n\\n/**\\n * Creates a slice of `array` excluding elements dropped from the end.\\n * Elements are dropped until `predicate` returns falsey. The predicate is\\n * invoked with three arguments: (value, index, array).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': true },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': false }\\n * ];\\n *\\n * _.dropRightWhile(users, function(o) { return !o.active; });\\n * // => objects for ['barney']\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\\n * // => objects for ['barney', 'fred']\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.dropRightWhile(users, ['active', false]);\\n * // => objects for ['barney']\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.dropRightWhile(users, 'active');\\n * // => objects for ['barney', 'fred', 'pebbles']\\n */\\nfunction dropRightWhile(array, predicate) {\\n  return (array && array.length)\\n    ? baseWhile(array, baseIteratee(predicate, 3), true, true)\\n    : [];\\n}\\n\\nexport default dropRightWhile;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseWhile from './_baseWhile';\\n\\n/**\\n * Creates a slice of `array` excluding elements dropped from the beginning.\\n * Elements are dropped until `predicate` returns falsey. The predicate is\\n * invoked with three arguments: (value, index, array).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': false },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': true }\\n * ];\\n *\\n * _.dropWhile(users, function(o) { return !o.active; });\\n * // => objects for ['pebbles']\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.dropWhile(users, { 'user': 'barney', 'active': false });\\n * // => objects for ['fred', 'pebbles']\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.dropWhile(users, ['active', false]);\\n * // => objects for ['pebbles']\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.dropWhile(users, 'active');\\n * // => objects for ['barney', 'fred', 'pebbles']\\n */\\nfunction dropWhile(array, predicate) {\\n  return (array && array.length)\\n    ? baseWhile(array, baseIteratee(predicate, 3), true)\\n    : [];\\n}\\n\\nexport default dropWhile;\\n\",\"/**\\n * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.\\n *\\n * @private\\n * @param {number} number The number to clamp.\\n * @param {number} [lower] The lower bound.\\n * @param {number} upper The upper bound.\\n * @returns {number} Returns the clamped number.\\n */\\nfunction baseClamp(number, lower, upper) {\\n  if (number === number) {\\n    if (upper !== undefined) {\\n      number = number <= upper ? number : upper;\\n    }\\n    if (lower !== undefined) {\\n      number = number >= lower ? number : lower;\\n    }\\n  }\\n  return number;\\n}\\n\\nexport default baseClamp;\\n\",\"import baseClamp from './_baseClamp';\\nimport toInteger from './toInteger';\\n\\n/** Used as references for the maximum length and index of an array. */\\nvar MAX_ARRAY_LENGTH = 4294967295;\\n\\n/**\\n * Converts `value` to an integer suitable for use as the length of an\\n * array-like object.\\n *\\n * **Note:** This method is based on\\n * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to convert.\\n * @returns {number} Returns the converted integer.\\n * @example\\n *\\n * _.toLength(3.2);\\n * // => 3\\n *\\n * _.toLength(Number.MIN_VALUE);\\n * // => 0\\n *\\n * _.toLength(Infinity);\\n * // => 4294967295\\n *\\n * _.toLength('3.2');\\n * // => 3\\n */\\nfunction toLength(value) {\\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\\n}\\n\\nexport default toLength;\\n\",\"import toInteger from './toInteger';\\nimport toLength from './toLength';\\n\\n/**\\n * The base implementation of `_.fill` without an iteratee call guard.\\n *\\n * @private\\n * @param {Array} array The array to fill.\\n * @param {*} value The value to fill `array` with.\\n * @param {number} [start=0] The start position.\\n * @param {number} [end=array.length] The end position.\\n * @returns {Array} Returns `array`.\\n */\\nfunction baseFill(array, value, start, end) {\\n  var length = array.length;\\n\\n  start = toInteger(start);\\n  if (start < 0) {\\n    start = -start > length ? 0 : (length + start);\\n  }\\n  end = (end === undefined || end > length) ? length : toInteger(end);\\n  if (end < 0) {\\n    end += length;\\n  }\\n  end = start > end ? 0 : toLength(end);\\n  while (start < end) {\\n    array[start++] = value;\\n  }\\n  return array;\\n}\\n\\nexport default baseFill;\\n\",\"import baseFill from './_baseFill';\\nimport isIterateeCall from './_isIterateeCall';\\n\\n/**\\n * Fills elements of `array` with `value` from `start` up to, but not\\n * including, `end`.\\n *\\n * **Note:** This method mutates `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.2.0\\n * @category Array\\n * @param {Array} array The array to fill.\\n * @param {*} value The value to fill `array` with.\\n * @param {number} [start=0] The start position.\\n * @param {number} [end=array.length] The end position.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [1, 2, 3];\\n *\\n * _.fill(array, 'a');\\n * console.log(array);\\n * // => ['a', 'a', 'a']\\n *\\n * _.fill(Array(3), 2);\\n * // => [2, 2, 2]\\n *\\n * _.fill([4, 6, 8, 10], '*', 1, 3);\\n * // => [4, '*', '*', 10]\\n */\\nfunction fill(array, value, start, end) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\\n    start = 0;\\n    end = length;\\n  }\\n  return baseFill(array, value, start, end);\\n}\\n\\nexport default fill;\\n\",\"/**\\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\\n * support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {Function} predicate The function invoked per iteration.\\n * @param {boolean} [fromRight] Specify iterating from right to left.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseFindIndex(array, predicate, fromRight) {\\n  var length = array.length,\\n      index = fromRight ? length : -1;\\n\\n  while ((fromRight ? index-- : ++index < length)) {\\n    if (predicate(array[index], index, array)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default baseFindIndex;\\n\",\"import baseFindIndex from './_baseFindIndex';\\nimport baseIteratee from './_baseIteratee';\\n\\n/**\\n * This method is like `_.find` except that it returns the index of the first\\n * element `predicate` returns truthy for instead of the element itself.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.1.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {number} Returns the index of the found element, else `-1`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': false },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': true }\\n * ];\\n *\\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\\n * // => 0\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.findIndex(users, { 'user': 'fred', 'active': false });\\n * // => 1\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.findIndex(users, ['active', false]);\\n * // => 0\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.findIndex(users, 'active');\\n * // => 2\\n */\\nfunction findIndex(array, predicate) {\\n  return (array && array.length)\\n    ? baseFindIndex(array, baseIteratee(predicate, 3))\\n    : -1;\\n}\\n\\nexport default findIndex;\\n\",\"import baseFindIndex from './_baseFindIndex';\\nimport baseIteratee from './_baseIteratee';\\n\\n/**\\n * This method is like `_.findIndex` except that it iterates over elements\\n * of `collection` from right to left.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.0.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {number} Returns the index of the found element, else `-1`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': true },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': false }\\n * ];\\n *\\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\\n * // => 2\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\\n * // => 0\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.findLastIndex(users, ['active', false]);\\n * // => 2\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.findLastIndex(users, 'active');\\n * // => 0\\n */\\nfunction findLastIndex(array, predicate) {\\n  return (array && array.length)\\n    ? baseFindIndex(array, baseIteratee(predicate, 3), true)\\n    : -1;\\n}\\n\\nexport default findLastIndex;\\n\",\"/**\\n * Gets the first element of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @alias first\\n * @category Array\\n * @param {Array} array The array to query.\\n * @returns {*} Returns the first element of `array`.\\n * @example\\n *\\n * _.head([1, 2, 3]);\\n * // => 1\\n *\\n * _.head([]);\\n * // => undefined\\n */\\nfunction head(array) {\\n  return (array && array.length) ? array[0] : undefined;\\n}\\n\\nexport default head;\\n\",\"import baseFlatten from './_baseFlatten';\\n\\n/**\\n * Flattens `array` a single level deep.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to flatten.\\n * @returns {Array} Returns the new flattened array.\\n * @example\\n *\\n * _.flatten([1, [2, [3, [4]], 5]]);\\n * // => [1, 2, [3, [4]], 5]\\n */\\nfunction flatten(array) {\\n  var length = array ? array.length : 0;\\n  return length ? baseFlatten(array, 1) : [];\\n}\\n\\nexport default flatten;\\n\",\"import baseFlatten from './_baseFlatten';\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Recursively flattens `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to flatten.\\n * @returns {Array} Returns the new flattened array.\\n * @example\\n *\\n * _.flattenDeep([1, [2, [3, [4]], 5]]);\\n * // => [1, 2, 3, 4, 5]\\n */\\nfunction flattenDeep(array) {\\n  var length = array ? array.length : 0;\\n  return length ? baseFlatten(array, INFINITY) : [];\\n}\\n\\nexport default flattenDeep;\\n\",\"import baseFlatten from './_baseFlatten';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Recursively flatten `array` up to `depth` times.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.4.0\\n * @category Array\\n * @param {Array} array The array to flatten.\\n * @param {number} [depth=1] The maximum recursion depth.\\n * @returns {Array} Returns the new flattened array.\\n * @example\\n *\\n * var array = [1, [2, [3, [4]], 5]];\\n *\\n * _.flattenDepth(array, 1);\\n * // => [1, 2, [3, [4]], 5]\\n *\\n * _.flattenDepth(array, 2);\\n * // => [1, 2, 3, [4], 5]\\n */\\nfunction flattenDepth(array, depth) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  depth = depth === undefined ? 1 : toInteger(depth);\\n  return baseFlatten(array, depth);\\n}\\n\\nexport default flattenDepth;\\n\",\"/**\\n * The inverse of `_.toPairs`; this method returns an object composed\\n * from key-value `pairs`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} pairs The key-value pairs.\\n * @returns {Object} Returns the new object.\\n * @example\\n *\\n * _.fromPairs([['fred', 30], ['barney', 40]]);\\n * // => { 'fred': 30, 'barney': 40 }\\n */\\nfunction fromPairs(pairs) {\\n  var index = -1,\\n      length = pairs ? pairs.length : 0,\\n      result = {};\\n\\n  while (++index < length) {\\n    var pair = pairs[index];\\n    result[pair[0]] = pair[1];\\n  }\\n  return result;\\n}\\n\\nexport default fromPairs;\\n\",\"import baseIndexOf from './_baseIndexOf';\\nimport toInteger from './toInteger';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * Gets the index at which the first occurrence of `value` is found in `array`\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons. If `fromIndex` is negative, it's used as the\\n * offset from the end of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @param {number} [fromIndex=0] The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n * @example\\n *\\n * _.indexOf([1, 2, 1, 2], 2);\\n * // => 1\\n *\\n * // Search from the `fromIndex`.\\n * _.indexOf([1, 2, 1, 2], 2, 2);\\n * // => 3\\n */\\nfunction indexOf(array, value, fromIndex) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return -1;\\n  }\\n  fromIndex = toInteger(fromIndex);\\n  if (fromIndex < 0) {\\n    fromIndex = nativeMax(length + fromIndex, 0);\\n  }\\n  return baseIndexOf(array, value, fromIndex);\\n}\\n\\nexport default indexOf;\\n\",\"import dropRight from './dropRight';\\n\\n/**\\n * Gets all but the last element of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.initial([1, 2, 3]);\\n * // => [1, 2]\\n */\\nfunction initial(array) {\\n  return dropRight(array, 1);\\n}\\n\\nexport default initial;\\n\",\"import SetCache from './_SetCache';\\nimport arrayIncludes from './_arrayIncludes';\\nimport arrayIncludesWith from './_arrayIncludesWith';\\nimport arrayMap from './_arrayMap';\\nimport baseUnary from './_baseUnary';\\nimport cacheHas from './_cacheHas';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMin = Math.min;\\n\\n/**\\n * The base implementation of methods like `_.intersection`, without support\\n * for iteratee shorthands, that accepts an array of arrays to inspect.\\n *\\n * @private\\n * @param {Array} arrays The arrays to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of shared values.\\n */\\nfunction baseIntersection(arrays, iteratee, comparator) {\\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\\n      length = arrays[0].length,\\n      othLength = arrays.length,\\n      othIndex = othLength,\\n      caches = Array(othLength),\\n      maxLength = Infinity,\\n      result = [];\\n\\n  while (othIndex--) {\\n    var array = arrays[othIndex];\\n    if (othIndex && iteratee) {\\n      array = arrayMap(array, baseUnary(iteratee));\\n    }\\n    maxLength = nativeMin(array.length, maxLength);\\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\\n      ? new SetCache(othIndex && array)\\n      : undefined;\\n  }\\n  array = arrays[0];\\n\\n  var index = -1,\\n      seen = caches[0];\\n\\n  outer:\\n  while (++index < length && result.length < maxLength) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (!(seen\\n          ? cacheHas(seen, computed)\\n          : includes(result, computed, comparator)\\n        )) {\\n      othIndex = othLength;\\n      while (--othIndex) {\\n        var cache = caches[othIndex];\\n        if (!(cache\\n              ? cacheHas(cache, computed)\\n              : includes(arrays[othIndex], computed, comparator))\\n            ) {\\n          continue outer;\\n        }\\n      }\\n      if (seen) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default baseIntersection;\\n\",\"import isArrayLikeObject from './isArrayLikeObject';\\n\\n/**\\n * Casts `value` to an empty array if it's not an array like object.\\n *\\n * @private\\n * @param {*} value The value to inspect.\\n * @returns {Array|Object} Returns the cast array-like object.\\n */\\nfunction castArrayLikeObject(value) {\\n  return isArrayLikeObject(value) ? value : [];\\n}\\n\\nexport default castArrayLikeObject;\\n\",\"import arrayMap from './_arrayMap';\\nimport baseIntersection from './_baseIntersection';\\nimport castArrayLikeObject from './_castArrayLikeObject';\\nimport rest from './rest';\\n\\n/**\\n * Creates an array of unique values that are included in all given arrays\\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons. The order of result values is determined by the\\n * order they occur in the first array.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @returns {Array} Returns the new array of intersecting values.\\n * @example\\n *\\n * _.intersection([2, 1], [4, 2], [1, 2]);\\n * // => [2]\\n */\\nvar intersection = rest(function(arrays) {\\n  var mapped = arrayMap(arrays, castArrayLikeObject);\\n  return (mapped.length && mapped[0] === arrays[0])\\n    ? baseIntersection(mapped)\\n    : [];\\n});\\n\\nexport default intersection;\\n\",\"import arrayMap from './_arrayMap';\\nimport baseIntersection from './_baseIntersection';\\nimport baseIteratee from './_baseIteratee';\\nimport castArrayLikeObject from './_castArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.intersection` except that it accepts `iteratee`\\n * which is invoked for each element of each `arrays` to generate the criterion\\n * by which they're compared. Result values are chosen from the first array.\\n * The iteratee is invoked with one argument: (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns the new array of intersecting values.\\n * @example\\n *\\n * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\\n * // => [2.1]\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\\n * // => [{ 'x': 1 }]\\n */\\nvar intersectionBy = rest(function(arrays) {\\n  var iteratee = last(arrays),\\n      mapped = arrayMap(arrays, castArrayLikeObject);\\n\\n  if (iteratee === last(mapped)) {\\n    iteratee = undefined;\\n  } else {\\n    mapped.pop();\\n  }\\n  return (mapped.length && mapped[0] === arrays[0])\\n    ? baseIntersection(mapped, baseIteratee(iteratee))\\n    : [];\\n});\\n\\nexport default intersectionBy;\\n\",\"import arrayMap from './_arrayMap';\\nimport baseIntersection from './_baseIntersection';\\nimport castArrayLikeObject from './_castArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.intersection` except that it accepts `comparator`\\n * which is invoked to compare elements of `arrays`. Result values are chosen\\n * from the first array. The comparator is invoked with two arguments:\\n * (arrVal, othVal).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of intersecting values.\\n * @example\\n *\\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\\n *\\n * _.intersectionWith(objects, others, _.isEqual);\\n * // => [{ 'x': 1, 'y': 2 }]\\n */\\nvar intersectionWith = rest(function(arrays) {\\n  var comparator = last(arrays),\\n      mapped = arrayMap(arrays, castArrayLikeObject);\\n\\n  if (comparator === last(mapped)) {\\n    comparator = undefined;\\n  } else {\\n    mapped.pop();\\n  }\\n  return (mapped.length && mapped[0] === arrays[0])\\n    ? baseIntersection(mapped, undefined, comparator)\\n    : [];\\n});\\n\\nexport default intersectionWith;\\n\",\"/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeJoin = arrayProto.join;\\n\\n/**\\n * Converts all elements in `array` into a string separated by `separator`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to convert.\\n * @param {string} [separator=','] The element separator.\\n * @returns {string} Returns the joined string.\\n * @example\\n *\\n * _.join(['a', 'b', 'c'], '~');\\n * // => 'a~b~c'\\n */\\nfunction join(array, separator) {\\n  return array ? nativeJoin.call(array, separator) : '';\\n}\\n\\nexport default join;\\n\",\"import indexOfNaN from './_indexOfNaN';\\nimport toInteger from './toInteger';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max,\\n    nativeMin = Math.min;\\n\\n/**\\n * This method is like `_.indexOf` except that it iterates over elements of\\n * `array` from right to left.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @param {number} [fromIndex=array.length-1] The index to search from.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n * @example\\n *\\n * _.lastIndexOf([1, 2, 1, 2], 2);\\n * // => 3\\n *\\n * // Search from the `fromIndex`.\\n * _.lastIndexOf([1, 2, 1, 2], 2, 2);\\n * // => 1\\n */\\nfunction lastIndexOf(array, value, fromIndex) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return -1;\\n  }\\n  var index = length;\\n  if (fromIndex !== undefined) {\\n    index = toInteger(fromIndex);\\n    index = (\\n      index < 0\\n        ? nativeMax(length + index, 0)\\n        : nativeMin(index, length - 1)\\n    ) + 1;\\n  }\\n  if (value !== value) {\\n    return indexOfNaN(array, index, true);\\n  }\\n  while (index--) {\\n    if (array[index] === value) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default lastIndexOf;\\n\",\"import isIndex from './_isIndex';\\n\\n/**\\n * The base implementation of `_.nth` which doesn't coerce `n` to an integer.\\n *\\n * @private\\n * @param {Array} array The array to query.\\n * @param {number} n The index of the element to return.\\n * @returns {*} Returns the nth element of `array`.\\n */\\nfunction baseNth(array, n) {\\n  var length = array.length;\\n  if (!length) {\\n    return;\\n  }\\n  n += n < 0 ? length : 0;\\n  return isIndex(n, length) ? array[n] : undefined;\\n}\\n\\nexport default baseNth;\\n\",\"import baseNth from './_baseNth';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Gets the element at `n` index of `array`. If `n` is negative, the nth\\n * element from the end is returned.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.11.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {number} [n=0] The index of the element to return.\\n * @returns {*} Returns the nth element of `array`.\\n * @example\\n *\\n * var array = ['a', 'b', 'c', 'd'];\\n *\\n * _.nth(array, 1);\\n * // => 'b'\\n *\\n * _.nth(array, -2);\\n * // => 'c';\\n */\\nfunction nth(array, n) {\\n  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\\n}\\n\\nexport default nth;\\n\",\"/**\\n * This function is like `baseIndexOf` except that it accepts a comparator.\\n *\\n * @private\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @param {number} fromIndex The index to search from.\\n * @param {Function} comparator The comparator invoked per element.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n */\\nfunction baseIndexOfWith(array, value, fromIndex, comparator) {\\n  var index = fromIndex - 1,\\n      length = array.length;\\n\\n  while (++index < length) {\\n    if (comparator(array[index], value)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default baseIndexOfWith;\\n\",\"import arrayMap from './_arrayMap';\\nimport baseIndexOf from './_baseIndexOf';\\nimport baseIndexOfWith from './_baseIndexOfWith';\\nimport baseUnary from './_baseUnary';\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * The base implementation of `_.pullAllBy` without support for iteratee\\n * shorthands.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to remove.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns `array`.\\n */\\nfunction basePullAll(array, values, iteratee, comparator) {\\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\\n      index = -1,\\n      length = values.length,\\n      seen = array;\\n\\n  if (iteratee) {\\n    seen = arrayMap(array, baseUnary(iteratee));\\n  }\\n  while (++index < length) {\\n    var fromIndex = 0,\\n        value = values[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\\n      if (seen !== array) {\\n        splice.call(seen, fromIndex, 1);\\n      }\\n      splice.call(array, fromIndex, 1);\\n    }\\n  }\\n  return array;\\n}\\n\\nexport default basePullAll;\\n\",\"import basePullAll from './_basePullAll';\\n\\n/**\\n * This method is like `_.pull` except that it accepts an array of values to remove.\\n *\\n * **Note:** Unlike `_.difference`, this method mutates `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to remove.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [1, 2, 3, 1, 2, 3];\\n *\\n * _.pullAll(array, [2, 3]);\\n * console.log(array);\\n * // => [1, 1]\\n */\\nfunction pullAll(array, values) {\\n  return (array && array.length && values && values.length)\\n    ? basePullAll(array, values)\\n    : array;\\n}\\n\\nexport default pullAll;\\n\",\"import pullAll from './pullAll';\\nimport rest from './rest';\\n\\n/**\\n * Removes all given values from `array` using\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\\n * to remove elements from an array by predicate.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {...*} [values] The values to remove.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [1, 2, 3, 1, 2, 3];\\n *\\n * _.pull(array, 2, 3);\\n * console.log(array);\\n * // => [1, 1]\\n */\\nvar pull = rest(pullAll);\\n\\nexport default pull;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport basePullAll from './_basePullAll';\\n\\n/**\\n * This method is like `_.pullAll` except that it accepts `iteratee` which is\\n * invoked for each element of `array` and `values` to generate the criterion\\n * by which they're compared. The iteratee is invoked with one argument: (value).\\n *\\n * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to remove.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\\n *\\n * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\\n * console.log(array);\\n * // => [{ 'x': 2 }]\\n */\\nfunction pullAllBy(array, values, iteratee) {\\n  return (array && array.length && values && values.length)\\n    ? basePullAll(array, values, baseIteratee(iteratee))\\n    : array;\\n}\\n\\nexport default pullAllBy;\\n\",\"import basePullAll from './_basePullAll';\\n\\n/**\\n * This method is like `_.pullAll` except that it accepts `comparator` which\\n * is invoked to compare elements of `array` to `values`. The comparator is\\n * invoked with two arguments: (arrVal, othVal).\\n *\\n * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.6.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {Array} values The values to remove.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\\n *\\n * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\\n * console.log(array);\\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\\n */\\nfunction pullAllWith(array, values, comparator) {\\n  return (array && array.length && values && values.length)\\n    ? basePullAll(array, values, undefined, comparator)\\n    : array;\\n}\\n\\nexport default pullAllWith;\\n\",\"import get from './get';\\n\\n/**\\n * The base implementation of `_.at` without support for individual paths.\\n *\\n * @private\\n * @param {Object} object The object to iterate over.\\n * @param {string[]} paths The property paths of elements to pick.\\n * @returns {Array} Returns the picked elements.\\n */\\nfunction baseAt(object, paths) {\\n  var index = -1,\\n      isNil = object == null,\\n      length = paths.length,\\n      result = Array(length);\\n\\n  while (++index < length) {\\n    result[index] = isNil ? undefined : get(object, paths[index]);\\n  }\\n  return result;\\n}\\n\\nexport default baseAt;\\n\",\"import baseGet from './_baseGet';\\nimport baseSlice from './_baseSlice';\\n\\n/**\\n * Gets the parent value at `path` of `object`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array} path The path to get the parent value of.\\n * @returns {*} Returns the parent value.\\n */\\nfunction parent(object, path) {\\n  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\\n}\\n\\nexport default parent;\\n\",\"import castPath from './_castPath';\\nimport isIndex from './_isIndex';\\nimport isKey from './_isKey';\\nimport last from './last';\\nimport parent from './_parent';\\nimport toKey from './_toKey';\\n\\n/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/** Built-in value references. */\\nvar splice = arrayProto.splice;\\n\\n/**\\n * The base implementation of `_.pullAt` without support for individual\\n * indexes or capturing the removed elements.\\n *\\n * @private\\n * @param {Array} array The array to modify.\\n * @param {number[]} indexes The indexes of elements to remove.\\n * @returns {Array} Returns `array`.\\n */\\nfunction basePullAt(array, indexes) {\\n  var length = array ? indexes.length : 0,\\n      lastIndex = length - 1;\\n\\n  while (length--) {\\n    var index = indexes[length];\\n    if (length == lastIndex || index !== previous) {\\n      var previous = index;\\n      if (isIndex(index)) {\\n        splice.call(array, index, 1);\\n      }\\n      else if (!isKey(index, array)) {\\n        var path = castPath(index),\\n            object = parent(array, path);\\n\\n        if (object != null) {\\n          delete object[toKey(last(path))];\\n        }\\n      }\\n      else {\\n        delete array[toKey(index)];\\n      }\\n    }\\n  }\\n  return array;\\n}\\n\\nexport default basePullAt;\\n\",\"import isSymbol from './isSymbol';\\n\\n/**\\n * Compares values to sort them in ascending order.\\n *\\n * @private\\n * @param {*} value The value to compare.\\n * @param {*} other The other value to compare.\\n * @returns {number} Returns the sort order indicator for `value`.\\n */\\nfunction compareAscending(value, other) {\\n  if (value !== other) {\\n    var valIsDefined = value !== undefined,\\n        valIsNull = value === null,\\n        valIsReflexive = value === value,\\n        valIsSymbol = isSymbol(value);\\n\\n    var othIsDefined = other !== undefined,\\n        othIsNull = other === null,\\n        othIsReflexive = other === other,\\n        othIsSymbol = isSymbol(other);\\n\\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\\n        (valIsNull && othIsDefined && othIsReflexive) ||\\n        (!valIsDefined && othIsReflexive) ||\\n        !valIsReflexive) {\\n      return 1;\\n    }\\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\\n        (othIsNull && valIsDefined && valIsReflexive) ||\\n        (!othIsDefined && valIsReflexive) ||\\n        !othIsReflexive) {\\n      return -1;\\n    }\\n  }\\n  return 0;\\n}\\n\\nexport default compareAscending;\\n\",\"import arrayMap from './_arrayMap';\\nimport baseAt from './_baseAt';\\nimport baseFlatten from './_baseFlatten';\\nimport basePullAt from './_basePullAt';\\nimport compareAscending from './_compareAscending';\\nimport isIndex from './_isIndex';\\nimport rest from './rest';\\n\\n/**\\n * Removes elements from `array` corresponding to `indexes` and returns an\\n * array of removed elements.\\n *\\n * **Note:** Unlike `_.at`, this method mutates `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\\n * @returns {Array} Returns the new array of removed elements.\\n * @example\\n *\\n * var array = [5, 10, 15, 20];\\n * var evens = _.pullAt(array, 1, 3);\\n *\\n * console.log(array);\\n * // => [5, 15]\\n *\\n * console.log(evens);\\n * // => [10, 20]\\n */\\nvar pullAt = rest(function(array, indexes) {\\n  indexes = baseFlatten(indexes, 1);\\n\\n  var length = array ? array.length : 0,\\n      result = baseAt(array, indexes);\\n\\n  basePullAt(array, arrayMap(indexes, function(index) {\\n    return isIndex(index, length) ? +index : index;\\n  }).sort(compareAscending));\\n\\n  return result;\\n});\\n\\nexport default pullAt;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport basePullAt from './_basePullAt';\\n\\n/**\\n * Removes all elements from `array` that `predicate` returns truthy for\\n * and returns an array of the removed elements. The predicate is invoked\\n * with three arguments: (value, index, array).\\n *\\n * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\\n * to pull elements from an array by value.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {Array} Returns the new array of removed elements.\\n * @example\\n *\\n * var array = [1, 2, 3, 4];\\n * var evens = _.remove(array, function(n) {\\n *   return n % 2 == 0;\\n * });\\n *\\n * console.log(array);\\n * // => [1, 3]\\n *\\n * console.log(evens);\\n * // => [2, 4]\\n */\\nfunction remove(array, predicate) {\\n  var result = [];\\n  if (!(array && array.length)) {\\n    return result;\\n  }\\n  var index = -1,\\n      indexes = [],\\n      length = array.length;\\n\\n  predicate = baseIteratee(predicate, 3);\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result.push(value);\\n      indexes.push(index);\\n    }\\n  }\\n  basePullAt(array, indexes);\\n  return result;\\n}\\n\\nexport default remove;\\n\",\"/** Used for built-in method references. */\\nvar arrayProto = Array.prototype;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeReverse = arrayProto.reverse;\\n\\n/**\\n * Reverses `array` so that the first element becomes the last, the second\\n * element becomes the second to last, and so on.\\n *\\n * **Note:** This method mutates `array` and is based on\\n * [`Array#reverse`](https://mdn.io/Array/reverse).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to modify.\\n * @returns {Array} Returns `array`.\\n * @example\\n *\\n * var array = [1, 2, 3];\\n *\\n * _.reverse(array);\\n * // => [3, 2, 1]\\n *\\n * console.log(array);\\n * // => [3, 2, 1]\\n */\\nfunction reverse(array) {\\n  return array ? nativeReverse.call(array) : array;\\n}\\n\\nexport default reverse;\\n\",\"import baseSlice from './_baseSlice';\\nimport isIterateeCall from './_isIterateeCall';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Creates a slice of `array` from `start` up to, but not including, `end`.\\n *\\n * **Note:** This method is used instead of\\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\\n * returned.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to slice.\\n * @param {number} [start=0] The start position.\\n * @param {number} [end=array.length] The end position.\\n * @returns {Array} Returns the slice of `array`.\\n */\\nfunction slice(array, start, end) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\\n    start = 0;\\n    end = length;\\n  }\\n  else {\\n    start = start == null ? 0 : toInteger(start);\\n    end = end === undefined ? length : toInteger(end);\\n  }\\n  return baseSlice(array, start, end);\\n}\\n\\nexport default slice;\\n\",\"import isSymbol from './isSymbol';\\n\\n/** Used as references for the maximum length and index of an array. */\\nvar MAX_ARRAY_LENGTH = 4294967295,\\n    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeFloor = Math.floor,\\n    nativeMin = Math.min;\\n\\n/**\\n * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n * which invokes `iteratee` for `value` and each element of `array` to compute\\n * their sort ranking. The iteratee is invoked with one argument; (value).\\n *\\n * @private\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @param {Function} iteratee The iteratee invoked per element.\\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n */\\nfunction baseSortedIndexBy(array, value, iteratee, retHighest) {\\n  value = iteratee(value);\\n\\n  var low = 0,\\n      high = array ? array.length : 0,\\n      valIsNaN = value !== value,\\n      valIsNull = value === null,\\n      valIsSymbol = isSymbol(value),\\n      valIsUndefined = value === undefined;\\n\\n  while (low < high) {\\n    var mid = nativeFloor((low + high) / 2),\\n        computed = iteratee(array[mid]),\\n        othIsDefined = computed !== undefined,\\n        othIsNull = computed === null,\\n        othIsReflexive = computed === computed,\\n        othIsSymbol = isSymbol(computed);\\n\\n    if (valIsNaN) {\\n      var setLow = retHighest || othIsReflexive;\\n    } else if (valIsUndefined) {\\n      setLow = othIsReflexive && (retHighest || othIsDefined);\\n    } else if (valIsNull) {\\n      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\\n    } else if (valIsSymbol) {\\n      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\\n    } else if (othIsNull || othIsSymbol) {\\n      setLow = false;\\n    } else {\\n      setLow = retHighest ? (computed <= value) : (computed < value);\\n    }\\n    if (setLow) {\\n      low = mid + 1;\\n    } else {\\n      high = mid;\\n    }\\n  }\\n  return nativeMin(high, MAX_ARRAY_INDEX);\\n}\\n\\nexport default baseSortedIndexBy;\\n\",\"import baseSortedIndexBy from './_baseSortedIndexBy';\\nimport identity from './identity';\\nimport isSymbol from './isSymbol';\\n\\n/** Used as references for the maximum length and index of an array. */\\nvar MAX_ARRAY_LENGTH = 4294967295,\\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\\n\\n/**\\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n * performs a binary search of `array` to determine the index at which `value`\\n * should be inserted into `array` in order to maintain its sort order.\\n *\\n * @private\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n */\\nfunction baseSortedIndex(array, value, retHighest) {\\n  var low = 0,\\n      high = array ? array.length : low;\\n\\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n    while (low < high) {\\n      var mid = (low + high) >>> 1,\\n          computed = array[mid];\\n\\n      if (computed !== null && !isSymbol(computed) &&\\n          (retHighest ? (computed <= value) : (computed < value))) {\\n        low = mid + 1;\\n      } else {\\n        high = mid;\\n      }\\n    }\\n    return high;\\n  }\\n  return baseSortedIndexBy(array, value, identity, retHighest);\\n}\\n\\nexport default baseSortedIndex;\\n\",\"import baseSortedIndex from './_baseSortedIndex';\\n\\n/**\\n * Uses a binary search to determine the lowest index at which `value`\\n * should be inserted into `array` in order to maintain its sort order.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n * @example\\n *\\n * _.sortedIndex([30, 50], 40);\\n * // => 1\\n *\\n * _.sortedIndex([4, 5], 4);\\n * // => 0\\n */\\nfunction sortedIndex(array, value) {\\n  return baseSortedIndex(array, value);\\n}\\n\\nexport default sortedIndex;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseSortedIndexBy from './_baseSortedIndexBy';\\n\\n/**\\n * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n * which is invoked for `value` and each element of `array` to compute their\\n * sort ranking. The iteratee is invoked with one argument: (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n * @example\\n *\\n * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\\n *\\n * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\\n * // => 1\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\\n * // => 0\\n */\\nfunction sortedIndexBy(array, value, iteratee) {\\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee));\\n}\\n\\nexport default sortedIndexBy;\\n\",\"import baseSortedIndex from './_baseSortedIndex';\\nimport eq from './eq';\\n\\n/**\\n * This method is like `_.indexOf` except that it performs a binary\\n * search on a sorted `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n * @example\\n *\\n * _.sortedIndexOf([1, 1, 2, 2], 2);\\n * // => 2\\n */\\nfunction sortedIndexOf(array, value) {\\n  var length = array ? array.length : 0;\\n  if (length) {\\n    var index = baseSortedIndex(array, value);\\n    if (index < length && eq(array[index], value)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default sortedIndexOf;\\n\",\"import baseSortedIndex from './_baseSortedIndex';\\n\\n/**\\n * This method is like `_.sortedIndex` except that it returns the highest\\n * index at which `value` should be inserted into `array` in order to\\n * maintain its sort order.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n * @example\\n *\\n * _.sortedLastIndex([4, 5], 4);\\n * // => 1\\n */\\nfunction sortedLastIndex(array, value) {\\n  return baseSortedIndex(array, value, true);\\n}\\n\\nexport default sortedLastIndex;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseSortedIndexBy from './_baseSortedIndexBy';\\n\\n/**\\n * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n * which is invoked for `value` and each element of `array` to compute their\\n * sort ranking. The iteratee is invoked with one argument: (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The sorted array to inspect.\\n * @param {*} value The value to evaluate.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {number} Returns the index at which `value` should be inserted\\n *  into `array`.\\n * @example\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\\n * // => 1\\n */\\nfunction sortedLastIndexBy(array, value, iteratee) {\\n  return baseSortedIndexBy(array, value, baseIteratee(iteratee), true);\\n}\\n\\nexport default sortedLastIndexBy;\\n\",\"import baseSortedIndex from './_baseSortedIndex';\\nimport eq from './eq';\\n\\n/**\\n * This method is like `_.lastIndexOf` except that it performs a binary\\n * search on a sorted `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to search.\\n * @param {*} value The value to search for.\\n * @returns {number} Returns the index of the matched value, else `-1`.\\n * @example\\n *\\n * _.sortedLastIndexOf([1, 1, 2, 2], 2);\\n * // => 3\\n */\\nfunction sortedLastIndexOf(array, value) {\\n  var length = array ? array.length : 0;\\n  if (length) {\\n    var index = baseSortedIndex(array, value, true) - 1;\\n    if (eq(array[index], value)) {\\n      return index;\\n    }\\n  }\\n  return -1;\\n}\\n\\nexport default sortedLastIndexOf;\\n\",\"import eq from './eq';\\n\\n/**\\n * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\\n * support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n */\\nfunction baseSortedUniq(array, iteratee) {\\n  var index = -1,\\n      length = array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    if (!index || !eq(computed, seen)) {\\n      var seen = computed;\\n      result[resIndex++] = value === 0 ? 0 : value;\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default baseSortedUniq;\\n\",\"import baseSortedUniq from './_baseSortedUniq';\\n\\n/**\\n * This method is like `_.uniq` except that it's designed and optimized\\n * for sorted arrays.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @returns {Array} Returns the new duplicate free array.\\n * @example\\n *\\n * _.sortedUniq([1, 1, 2]);\\n * // => [1, 2]\\n */\\nfunction sortedUniq(array) {\\n  return (array && array.length)\\n    ? baseSortedUniq(array)\\n    : [];\\n}\\n\\nexport default sortedUniq;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseSortedUniq from './_baseSortedUniq';\\n\\n/**\\n * This method is like `_.uniqBy` except that it's designed and optimized\\n * for sorted arrays.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n * @example\\n *\\n * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\\n * // => [1.1, 2.3]\\n */\\nfunction sortedUniqBy(array, iteratee) {\\n  return (array && array.length)\\n    ? baseSortedUniq(array, baseIteratee(iteratee))\\n    : [];\\n}\\n\\nexport default sortedUniqBy;\\n\",\"import drop from './drop';\\n\\n/**\\n * Gets all but the first element of `array`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.tail([1, 2, 3]);\\n * // => [2, 3]\\n */\\nfunction tail(array) {\\n  return drop(array, 1);\\n}\\n\\nexport default tail;\\n\",\"import baseSlice from './_baseSlice';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Creates a slice of `array` with `n` elements taken from the beginning.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {number} [n=1] The number of elements to take.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.take([1, 2, 3]);\\n * // => [1]\\n *\\n * _.take([1, 2, 3], 2);\\n * // => [1, 2]\\n *\\n * _.take([1, 2, 3], 5);\\n * // => [1, 2, 3]\\n *\\n * _.take([1, 2, 3], 0);\\n * // => []\\n */\\nfunction take(array, n, guard) {\\n  if (!(array && array.length)) {\\n    return [];\\n  }\\n  n = (guard || n === undefined) ? 1 : toInteger(n);\\n  return baseSlice(array, 0, n < 0 ? 0 : n);\\n}\\n\\nexport default take;\\n\",\"import baseSlice from './_baseSlice';\\nimport toInteger from './toInteger';\\n\\n/**\\n * Creates a slice of `array` with `n` elements taken from the end.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {number} [n=1] The number of elements to take.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * _.takeRight([1, 2, 3]);\\n * // => [3]\\n *\\n * _.takeRight([1, 2, 3], 2);\\n * // => [2, 3]\\n *\\n * _.takeRight([1, 2, 3], 5);\\n * // => [1, 2, 3]\\n *\\n * _.takeRight([1, 2, 3], 0);\\n * // => []\\n */\\nfunction takeRight(array, n, guard) {\\n  var length = array ? array.length : 0;\\n  if (!length) {\\n    return [];\\n  }\\n  n = (guard || n === undefined) ? 1 : toInteger(n);\\n  n = length - n;\\n  return baseSlice(array, n < 0 ? 0 : n, length);\\n}\\n\\nexport default takeRight;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseWhile from './_baseWhile';\\n\\n/**\\n * Creates a slice of `array` with elements taken from the end. Elements are\\n * taken until `predicate` returns falsey. The predicate is invoked with\\n * three arguments: (value, index, array).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': true },\\n *   { 'user': 'fred',    'active': false },\\n *   { 'user': 'pebbles', 'active': false }\\n * ];\\n *\\n * _.takeRightWhile(users, function(o) { return !o.active; });\\n * // => objects for ['fred', 'pebbles']\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\\n * // => objects for ['pebbles']\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.takeRightWhile(users, ['active', false]);\\n * // => objects for ['fred', 'pebbles']\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.takeRightWhile(users, 'active');\\n * // => []\\n */\\nfunction takeRightWhile(array, predicate) {\\n  return (array && array.length)\\n    ? baseWhile(array, baseIteratee(predicate, 3), false, true)\\n    : [];\\n}\\n\\nexport default takeRightWhile;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseWhile from './_baseWhile';\\n\\n/**\\n * Creates a slice of `array` with elements taken from the beginning. Elements\\n * are taken until `predicate` returns falsey. The predicate is invoked with\\n * three arguments: (value, index, array).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category Array\\n * @param {Array} array The array to query.\\n * @param {Array|Function|Object|string} [predicate=_.identity]\\n *  The function invoked per iteration.\\n * @returns {Array} Returns the slice of `array`.\\n * @example\\n *\\n * var users = [\\n *   { 'user': 'barney',  'active': false },\\n *   { 'user': 'fred',    'active': false},\\n *   { 'user': 'pebbles', 'active': true }\\n * ];\\n *\\n * _.takeWhile(users, function(o) { return !o.active; });\\n * // => objects for ['barney', 'fred']\\n *\\n * // The `_.matches` iteratee shorthand.\\n * _.takeWhile(users, { 'user': 'barney', 'active': false });\\n * // => objects for ['barney']\\n *\\n * // The `_.matchesProperty` iteratee shorthand.\\n * _.takeWhile(users, ['active', false]);\\n * // => objects for ['barney', 'fred']\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.takeWhile(users, 'active');\\n * // => []\\n */\\nfunction takeWhile(array, predicate) {\\n  return (array && array.length)\\n    ? baseWhile(array, baseIteratee(predicate, 3))\\n    : [];\\n}\\n\\nexport default takeWhile;\\n\",\"/**\\n * A no-operation function that returns `undefined` regardless of the\\n * arguments it receives.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.3.0\\n * @category Util\\n * @example\\n *\\n * var object = { 'user': 'fred' };\\n *\\n * _.noop(object) === undefined;\\n * // => true\\n */\\nfunction noop() {\\n  // No operation performed.\\n}\\n\\nexport default noop;\\n\",\"import Set from './_Set';\\nimport noop from './noop';\\nimport setToArray from './_setToArray';\\n\\n/** Used as references for various `Number` constants. */\\nvar INFINITY = 1 / 0;\\n\\n/**\\n * Creates a set of `values`.\\n *\\n * @private\\n * @param {Array} values The values to add to the set.\\n * @returns {Object} Returns the new set.\\n */\\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\\n  return new Set(values);\\n};\\n\\nexport default createSet;\\n\",\"import SetCache from './_SetCache';\\nimport arrayIncludes from './_arrayIncludes';\\nimport arrayIncludesWith from './_arrayIncludesWith';\\nimport cacheHas from './_cacheHas';\\nimport createSet from './_createSet';\\nimport setToArray from './_setToArray';\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n */\\nfunction baseUniq(array, iteratee, comparator) {\\n  var index = -1,\\n      includes = arrayIncludes,\\n      length = array.length,\\n      isCommon = true,\\n      result = [],\\n      seen = result;\\n\\n  if (comparator) {\\n    isCommon = false;\\n    includes = arrayIncludesWith;\\n  }\\n  else if (length >= LARGE_ARRAY_SIZE) {\\n    var set = iteratee ? null : createSet(array);\\n    if (set) {\\n      return setToArray(set);\\n    }\\n    isCommon = false;\\n    includes = cacheHas;\\n    seen = new SetCache;\\n  }\\n  else {\\n    seen = iteratee ? [] : result;\\n  }\\n  outer:\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (isCommon && computed === computed) {\\n      var seenIndex = seen.length;\\n      while (seenIndex--) {\\n        if (seen[seenIndex] === computed) {\\n          continue outer;\\n        }\\n      }\\n      if (iteratee) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n    else if (!includes(seen, computed, comparator)) {\\n      if (seen !== result) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default baseUniq;\\n\",\"import baseFlatten from './_baseFlatten';\\nimport baseUniq from './_baseUniq';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport rest from './rest';\\n\\n/**\\n * Creates an array of unique values, in order, from all given arrays using\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @returns {Array} Returns the new array of combined values.\\n * @example\\n *\\n * _.union([2, 1], [4, 2], [1, 2]);\\n * // => [2, 1, 4]\\n */\\nvar union = rest(function(arrays) {\\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\\n});\\n\\nexport default union;\\n\",\"import baseFlatten from './_baseFlatten';\\nimport baseIteratee from './_baseIteratee';\\nimport baseUniq from './_baseUniq';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.union` except that it accepts `iteratee` which is\\n * invoked for each element of each `arrays` to generate the criterion by\\n * which uniqueness is computed. The iteratee is invoked with one argument:\\n * (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns the new array of combined values.\\n * @example\\n *\\n * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);\\n * // => [2.1, 1.2, 4.3]\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\\n * // => [{ 'x': 1 }, { 'x': 2 }]\\n */\\nvar unionBy = rest(function(arrays) {\\n  var iteratee = last(arrays);\\n  if (isArrayLikeObject(iteratee)) {\\n    iteratee = undefined;\\n  }\\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee));\\n});\\n\\nexport default unionBy;\\n\",\"import baseFlatten from './_baseFlatten';\\nimport baseUniq from './_baseUniq';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.union` except that it accepts `comparator` which\\n * is invoked to compare elements of `arrays`. The comparator is invoked\\n * with two arguments: (arrVal, othVal).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of combined values.\\n * @example\\n *\\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\\n *\\n * _.unionWith(objects, others, _.isEqual);\\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\\n */\\nvar unionWith = rest(function(arrays) {\\n  var comparator = last(arrays);\\n  if (isArrayLikeObject(comparator)) {\\n    comparator = undefined;\\n  }\\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\\n});\\n\\nexport default unionWith;\\n\",\"import baseUniq from './_baseUniq';\\n\\n/**\\n * Creates a duplicate-free version of an array, using\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons, in which only the first occurrence of each\\n * element is kept.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @returns {Array} Returns the new duplicate free array.\\n * @example\\n *\\n * _.uniq([2, 1, 2]);\\n * // => [2, 1]\\n */\\nfunction uniq(array) {\\n  return (array && array.length)\\n    ? baseUniq(array)\\n    : [];\\n}\\n\\nexport default uniq;\\n\",\"import baseIteratee from './_baseIteratee';\\nimport baseUniq from './_baseUniq';\\n\\n/**\\n * This method is like `_.uniq` except that it accepts `iteratee` which is\\n * invoked for each element in `array` to generate the criterion by which\\n * uniqueness is computed. The iteratee is invoked with one argument: (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n * @example\\n *\\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\\n * // => [2.1, 1.2]\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\\n * // => [{ 'x': 1 }, { 'x': 2 }]\\n */\\nfunction uniqBy(array, iteratee) {\\n  return (array && array.length)\\n    ? baseUniq(array, baseIteratee(iteratee))\\n    : [];\\n}\\n\\nexport default uniqBy;\\n\",\"import baseUniq from './_baseUniq';\\n\\n/**\\n * This method is like `_.uniq` except that it accepts `comparator` which\\n * is invoked to compare elements of `array`. The comparator is invoked with\\n * two arguments: (arrVal, othVal).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new duplicate free array.\\n * @example\\n *\\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\\n *\\n * _.uniqWith(objects, _.isEqual);\\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\\n */\\nfunction uniqWith(array, comparator) {\\n  return (array && array.length)\\n    ? baseUniq(array, undefined, comparator)\\n    : [];\\n}\\n\\nexport default uniqWith;\\n\",\"/**\\n * A specialized version of `_.filter` for arrays without support for\\n * iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to iterate over.\\n * @param {Function} predicate The function invoked per iteration.\\n * @returns {Array} Returns the new filtered array.\\n */\\nfunction arrayFilter(array, predicate) {\\n  var index = -1,\\n      length = array.length,\\n      resIndex = 0,\\n      result = [];\\n\\n  while (++index < length) {\\n    var value = array[index];\\n    if (predicate(value, index, array)) {\\n      result[resIndex++] = value;\\n    }\\n  }\\n  return result;\\n}\\n\\nexport default arrayFilter;\\n\",\"import arrayFilter from './_arrayFilter';\\nimport arrayMap from './_arrayMap';\\nimport baseProperty from './_baseProperty';\\nimport baseTimes from './_baseTimes';\\nimport isArrayLikeObject from './isArrayLikeObject';\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max;\\n\\n/**\\n * This method is like `_.zip` except that it accepts an array of grouped\\n * elements and creates an array regrouping the elements to their pre-zip\\n * configuration.\\n *\\n * @static\\n * @memberOf _\\n * @since 1.2.0\\n * @category Array\\n * @param {Array} array The array of grouped elements to process.\\n * @returns {Array} Returns the new array of regrouped elements.\\n * @example\\n *\\n * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\\n * // => [['fred', 30, true], ['barney', 40, false]]\\n *\\n * _.unzip(zipped);\\n * // => [['fred', 'barney'], [30, 40], [true, false]]\\n */\\nfunction unzip(array) {\\n  if (!(array && array.length)) {\\n    return [];\\n  }\\n  var length = 0;\\n  array = arrayFilter(array, function(group) {\\n    if (isArrayLikeObject(group)) {\\n      length = nativeMax(group.length, length);\\n      return true;\\n    }\\n  });\\n  return baseTimes(length, function(index) {\\n    return arrayMap(array, baseProperty(index));\\n  });\\n}\\n\\nexport default unzip;\\n\",\"import apply from './_apply';\\nimport arrayMap from './_arrayMap';\\nimport unzip from './unzip';\\n\\n/**\\n * This method is like `_.unzip` except that it accepts `iteratee` to specify\\n * how regrouped values should be combined. The iteratee is invoked with the\\n * elements of each group: (...group).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.8.0\\n * @category Array\\n * @param {Array} array The array of grouped elements to process.\\n * @param {Function} [iteratee=_.identity] The function to combine\\n *  regrouped values.\\n * @returns {Array} Returns the new array of regrouped elements.\\n * @example\\n *\\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\\n * // => [[1, 10, 100], [2, 20, 200]]\\n *\\n * _.unzipWith(zipped, _.add);\\n * // => [3, 30, 300]\\n */\\nfunction unzipWith(array, iteratee) {\\n  if (!(array && array.length)) {\\n    return [];\\n  }\\n  var result = unzip(array);\\n  if (iteratee == null) {\\n    return result;\\n  }\\n  return arrayMap(result, function(group) {\\n    return apply(iteratee, undefined, group);\\n  });\\n}\\n\\nexport default unzipWith;\\n\",\"import baseDifference from './_baseDifference';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport rest from './rest';\\n\\n/**\\n * Creates an array excluding all given values using\\n * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\\n * for equality comparisons.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {Array} array The array to inspect.\\n * @param {...*} [values] The values to exclude.\\n * @returns {Array} Returns the new array of filtered values.\\n * @see _.difference, _.xor\\n * @example\\n *\\n * _.without([1, 2, 1, 3], 1, 2);\\n * // => [3]\\n */\\nvar without = rest(function(array, values) {\\n  return isArrayLikeObject(array)\\n    ? baseDifference(array, values)\\n    : [];\\n});\\n\\nexport default without;\\n\",\"import arrayPush from './_arrayPush';\\nimport baseDifference from './_baseDifference';\\nimport baseUniq from './_baseUniq';\\n\\n/**\\n * The base implementation of methods like `_.xor`, without support for\\n * iteratee shorthands, that accepts an array of arrays to inspect.\\n *\\n * @private\\n * @param {Array} arrays The arrays to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of values.\\n */\\nfunction baseXor(arrays, iteratee, comparator) {\\n  var index = -1,\\n      length = arrays.length;\\n\\n  while (++index < length) {\\n    var result = result\\n      ? arrayPush(\\n          baseDifference(result, arrays[index], iteratee, comparator),\\n          baseDifference(arrays[index], result, iteratee, comparator)\\n        )\\n      : arrays[index];\\n  }\\n  return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];\\n}\\n\\nexport default baseXor;\\n\",\"import arrayFilter from './_arrayFilter';\\nimport baseXor from './_baseXor';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport rest from './rest';\\n\\n/**\\n * Creates an array of unique values that is the\\n * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\\n * of the given arrays. The order of result values is determined by the order\\n * they occur in the arrays.\\n *\\n * @static\\n * @memberOf _\\n * @since 2.4.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @returns {Array} Returns the new array of filtered values.\\n * @see _.difference, _.without\\n * @example\\n *\\n * _.xor([2, 1], [4, 2]);\\n * // => [1, 4]\\n */\\nvar xor = rest(function(arrays) {\\n  return baseXor(arrayFilter(arrays, isArrayLikeObject));\\n});\\n\\nexport default xor;\\n\",\"import arrayFilter from './_arrayFilter';\\nimport baseIteratee from './_baseIteratee';\\nimport baseXor from './_baseXor';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.xor` except that it accepts `iteratee` which is\\n * invoked for each element of each `arrays` to generate the criterion by\\n * which by which they're compared. The iteratee is invoked with one argument:\\n * (value).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Array|Function|Object|string} [iteratee=_.identity]\\n *  The iteratee invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n * @example\\n *\\n * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);\\n * // => [1.2, 4.3]\\n *\\n * // The `_.property` iteratee shorthand.\\n * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\\n * // => [{ 'x': 2 }]\\n */\\nvar xorBy = rest(function(arrays) {\\n  var iteratee = last(arrays);\\n  if (isArrayLikeObject(iteratee)) {\\n    iteratee = undefined;\\n  }\\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee));\\n});\\n\\nexport default xorBy;\\n\",\"import arrayFilter from './_arrayFilter';\\nimport baseXor from './_baseXor';\\nimport isArrayLikeObject from './isArrayLikeObject';\\nimport last from './last';\\nimport rest from './rest';\\n\\n/**\\n * This method is like `_.xor` except that it accepts `comparator` which is\\n * invoked to compare elements of `arrays`. The comparator is invoked with\\n * two arguments: (arrVal, othVal).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to inspect.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n * @example\\n *\\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\\n *\\n * _.xorWith(objects, others, _.isEqual);\\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\\n */\\nvar xorWith = rest(function(arrays) {\\n  var comparator = last(arrays);\\n  if (isArrayLikeObject(comparator)) {\\n    comparator = undefined;\\n  }\\n  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\\n});\\n\\nexport default xorWith;\\n\",\"import rest from './rest';\\nimport unzip from './unzip';\\n\\n/**\\n * Creates an array of grouped elements, the first of which contains the\\n * first elements of the given arrays, the second of which contains the\\n * second elements of the given arrays, and so on.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to process.\\n * @returns {Array} Returns the new array of grouped elements.\\n * @example\\n *\\n * _.zip(['fred', 'barney'], [30, 40], [true, false]);\\n * // => [['fred', 30, true], ['barney', 40, false]]\\n */\\nvar zip = rest(unzip);\\n\\nexport default zip;\\n\",\"/**\\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\\n *\\n * @private\\n * @param {Array} props The property identifiers.\\n * @param {Array} values The property values.\\n * @param {Function} assignFunc The function to assign values.\\n * @returns {Object} Returns the new object.\\n */\\nfunction baseZipObject(props, values, assignFunc) {\\n  var index = -1,\\n      length = props.length,\\n      valsLength = values.length,\\n      result = {};\\n\\n  while (++index < length) {\\n    var value = index < valsLength ? values[index] : undefined;\\n    assignFunc(result, props[index], value);\\n  }\\n  return result;\\n}\\n\\nexport default baseZipObject;\\n\",\"import assignValue from './_assignValue';\\nimport baseZipObject from './_baseZipObject';\\n\\n/**\\n * This method is like `_.fromPairs` except that it accepts two arrays,\\n * one of property identifiers and one of corresponding values.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.4.0\\n * @category Array\\n * @param {Array} [props=[]] The property identifiers.\\n * @param {Array} [values=[]] The property values.\\n * @returns {Object} Returns the new object.\\n * @example\\n *\\n * _.zipObject(['a', 'b'], [1, 2]);\\n * // => { 'a': 1, 'b': 2 }\\n */\\nfunction zipObject(props, values) {\\n  return baseZipObject(props || [], values || [], assignValue);\\n}\\n\\nexport default zipObject;\\n\",\"import assignValue from './_assignValue';\\nimport castPath from './_castPath';\\nimport isIndex from './_isIndex';\\nimport isKey from './_isKey';\\nimport isObject from './isObject';\\nimport toKey from './_toKey';\\n\\n/**\\n * The base implementation of `_.set`.\\n *\\n * @private\\n * @param {Object} object The object to query.\\n * @param {Array|string} path The path of the property to set.\\n * @param {*} value The value to set.\\n * @param {Function} [customizer] The function to customize path creation.\\n * @returns {Object} Returns `object`.\\n */\\nfunction baseSet(object, path, value, customizer) {\\n  path = isKey(path, object) ? [path] : castPath(path);\\n\\n  var index = -1,\\n      length = path.length,\\n      lastIndex = length - 1,\\n      nested = object;\\n\\n  while (nested != null && ++index < length) {\\n    var key = toKey(path[index]);\\n    if (isObject(nested)) {\\n      var newValue = value;\\n      if (index != lastIndex) {\\n        var objValue = nested[key];\\n        newValue = customizer ? customizer(objValue, key, nested) : undefined;\\n        if (newValue === undefined) {\\n          newValue = objValue == null\\n            ? (isIndex(path[index + 1]) ? [] : {})\\n            : objValue;\\n        }\\n      }\\n      assignValue(nested, key, newValue);\\n    }\\n    nested = nested[key];\\n  }\\n  return object;\\n}\\n\\nexport default baseSet;\\n\",\"import baseSet from './_baseSet';\\nimport baseZipObject from './_baseZipObject';\\n\\n/**\\n * This method is like `_.zipObject` except that it supports property paths.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.1.0\\n * @category Array\\n * @param {Array} [props=[]] The property identifiers.\\n * @param {Array} [values=[]] The property values.\\n * @returns {Object} Returns the new object.\\n * @example\\n *\\n * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\\n * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\\n */\\nfunction zipObjectDeep(props, values) {\\n  return baseZipObject(props || [], values || [], baseSet);\\n}\\n\\nexport default zipObjectDeep;\\n\",\"import rest from './rest';\\nimport unzipWith from './unzipWith';\\n\\n/**\\n * This method is like `_.zip` except that it accepts `iteratee` to specify\\n * how grouped values should be combined. The iteratee is invoked with the\\n * elements of each group: (...group).\\n *\\n * @static\\n * @memberOf _\\n * @since 3.8.0\\n * @category Array\\n * @param {...Array} [arrays] The arrays to process.\\n * @param {Function} [iteratee=_.identity] The function to combine grouped values.\\n * @returns {Array} Returns the new array of grouped elements.\\n * @example\\n *\\n * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\\n *   return a + b + c;\\n * });\\n * // => [111, 222]\\n */\\nvar zipWith = rest(function(arrays) {\\n  var length = arrays.length,\\n      iteratee = length > 1 ? arrays[length - 1] : undefined;\\n\\n  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\\n  return unzipWith(arrays, iteratee);\\n});\\n\\nexport default zipWith;\\n\",\"import chunk from './chunk';\\nimport compact from './compact';\\nimport concat from './concat';\\nimport difference from './difference';\\nimport differenceBy from './differenceBy';\\nimport differenceWith from './differenceWith';\\nimport drop from './drop';\\nimport dropRight from './dropRight';\\nimport dropRightWhile from './dropRightWhile';\\nimport dropWhile from './dropWhile';\\nimport fill from './fill';\\nimport findIndex from './findIndex';\\nimport findLastIndex from './findLastIndex';\\nimport first from './first';\\nimport flatten from './flatten';\\nimport flattenDeep from './flattenDeep';\\nimport flattenDepth from './flattenDepth';\\nimport fromPairs from './fromPairs';\\nimport head from './head';\\nimport indexOf from './indexOf';\\nimport initial from './initial';\\nimport intersection from './intersection';\\nimport intersectionBy from './intersectionBy';\\nimport intersectionWith from './intersectionWith';\\nimport join from './join';\\nimport last from './last';\\nimport lastIndexOf from './lastIndexOf';\\nimport nth from './nth';\\nimport pull from './pull';\\nimport pullAll from './pullAll';\\nimport pullAllBy from './pullAllBy';\\nimport pullAllWith from './pullAllWith';\\nimport pullAt from './pullAt';\\nimport remove from './remove';\\nimport reverse from './reverse';\\nimport slice from './slice';\\nimport sortedIndex from './sortedIndex';\\nimport sortedIndexBy from './sortedIndexBy';\\nimport sortedIndexOf from './sortedIndexOf';\\nimport sortedLastIndex from './sortedLastIndex';\\nimport sortedLastIndexBy from './sortedLastIndexBy';\\nimport sortedLastIndexOf from './sortedLastIndexOf';\\nimport sortedUniq from './sortedUniq';\\nimport sortedUniqBy from './sortedUniqBy';\\nimport tail from './tail';\\nimport take from './take';\\nimport takeRight from './takeRight';\\nimport takeRightWhile from './takeRightWhile';\\nimport takeWhile from './takeWhile';\\nimport union from './union';\\nimport unionBy from './unionBy';\\nimport unionWith from './unionWith';\\nimport uniq from './uniq';\\nimport uniqBy from './uniqBy';\\nimport uniqWith from './uniqWith';\\nimport unzip from './unzip';\\nimport unzipWith from './unzipWith';\\nimport without from './without';\\nimport xor from './xor';\\nimport xorBy from './xorBy';\\nimport xorWith from './xorWith';\\nimport zip from './zip';\\nimport zipObject from './zipObject';\\nimport zipObjectDeep from './zipObjectDeep';\\nimport zipWith from './zipWith';\\n\\nexport default {\\n  chunk, compact, concat, difference, differenceBy,\\n  differenceWith, drop, dropRight, dropRightWhile, dropWhile,\\n  fill, findIndex, findLastIndex, first, flatten,\\n  flattenDeep, flattenDepth, fromPairs, head, indexOf,\\n  initial, intersection, intersectionBy, intersectionWith, join,\\n  last, lastIndexOf, nth, pull, pullAll,\\n  pullAllBy, pullAllWith, pullAt, remove, reverse,\\n  slice, sortedIndex, sortedIndexBy, sortedIndexOf, sortedLastIndex,\\n  sortedLastIndexBy, sortedLastIndexOf, sortedUniq, sortedUniqBy, tail,\\n  take, takeRight, takeRightWhile, takeWhile, union,\\n  unionBy, unionWith, uniq, uniqBy, uniqWith,\\n  unzip, unzipWith, without, xor, xorBy,\\n  xorWith, zip, zipObject, zipObjectDeep, zipWith\\n};\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @protected\\n * @module engine/model/delta/transform\\n */\\n\\nimport Delta from './delta';\\nimport MoveDelta from './movedelta';\\nimport RemoveDelta from './removedelta';\\nimport MergeDelta from './mergedelta';\\nimport SplitDelta from './splitdelta';\\nimport WrapDelta from './wrapdelta';\\nimport UnwrapDelta from './unwrapdelta';\\nimport RenameDelta from './renamedelta';\\nimport AttributeDelta from './attributedelta';\\nimport operationTransform from '../operation/transform';\\nimport NoOperation from '../operation/nooperation';\\nimport MoveOperation from '../operation/moveoperation';\\nimport RemoveOperation from '../operation/removeoperation';\\nimport arrayUtils from '@ckeditor/ckeditor5-utils/src/lib/lodash/array';\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\n\\nconst specialCases = new Map();\\n\\n/**\\n * @namespace\\n */\\nconst transform = {\\n\\t/**\\n\\t * Transforms given {@link module:engine/model/delta/delta~Delta delta} by another {@link module:engine/model/delta/delta~Delta delta}\\n\\t * and returns the result of that transformation as an array containing one or more {@link module:engine/model/delta/delta~Delta delta}\\n\\t * instances.\\n\\t *\\n\\t * Delta transformations heavily base on {@link module:engine/model/operation/transform~transform operational transformations}. Since\\n\\t * delta is a list of operations most situations can be handled thanks to operational transformation. Unfortunately,\\n\\t * deltas are more complicated than operations and have they semantic meaning, as they represent user's editing intentions.\\n\\t *\\n\\t * Sometimes, simple operational transformation on deltas' operations might result in some unexpected results. Those\\n\\t * results would be fine from OT point of view, but would not reflect user's intentions. Because of such conflicts\\n\\t * we need to handle transformations in special cases in a custom way.\\n\\t *\\n\\t * The function itself looks whether two given delta types have a special case function registered. If so, the deltas are\\n\\t * transformed using that function. If not,\\n\\t * {@link module:engine/model/delta/transform~transform.defaultTransform default transformation algorithm} is used.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} a Delta that will be transformed.\\n\\t * @param {module:engine/model/delta/delta~Delta} b Delta to transform by.\\n\\t * @param {module:engine/model/delta/transform~transformationContext} context Transformation context object.\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} Result of the transformation.\\n\\t */\\n\\ttransform( a, b, context ) {\\n\\t\\tconst transformAlgorithm = transform.getTransformationCase( a, b ) || transform.defaultTransform;\\n\\n\\t\\t// Make new instance of context object, so all changes done during transformation are not saved in original object.\\n\\t\\tconst transformed = transformAlgorithm( a, b, Object.assign( {}, context ) );\\n\\t\\tconst baseVersion = arrayUtils.last( b.operations ).baseVersion;\\n\\n\\t\\treturn updateBaseVersion( baseVersion, transformed );\\n\\t},\\n\\n\\t/**\\n\\t * The default delta transformation function. It is used for those deltas that are not in special case conflict.\\n\\t *\\n\\t * This algorithm is similar to a popular `dOPT` algorithm used in operational transformation, as we are in fact\\n\\t * transforming two sets of operations by each other.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} a Delta that will be transformed.\\n\\t * @param {module:engine/model/delta/delta~Delta} b Delta to transform by.\\n\\t * @param {module:engine/model/delta/transform~transformationContext} context Transformation context object.\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} Result of the transformation.\\n\\t */\\n\\tdefaultTransform( a, b, context ) {\\n\\t\\t// This will hold operations from delta `a` that will be transformed by operations from delta `b`.\\n\\t\\t// Eventually, those operations will be used to create result delta(s).\\n\\t\\tconst transformed = [];\\n\\n\\t\\t// Array containing operations that we will transform by. At the beginning these are just operations from\\n\\t\\tlet byOps = b.operations;\\n\\n\\t\\t// This array is storing operations from `byOps` which got transformed by operation from delta `a`.\\n\\t\\tlet newByOps = [];\\n\\n\\t\\t// We take each operation from original set of operations to transform.\\n\\t\\tfor ( const opA of a.operations ) {\\n\\t\\t\\t// We wrap the operation in the array. This is important, because operation transformation algorithm returns\\n\\t\\t\\t// an array of operations so we need to make sure that our algorithm is ready to handle arrays.\\n\\t\\t\\tconst ops = [ opA ];\\n\\n\\t\\t\\t// Now the real algorithm takes place.\\n\\t\\t\\tfor ( const opB of byOps ) {\\n\\t\\t\\t\\t// For each operation that we need transform by...\\n\\t\\t\\t\\tfor ( let i = 0; i < ops.length; i++ ) {\\n\\t\\t\\t\\t\\t// We take each operation to transform...\\n\\t\\t\\t\\t\\tconst op = ops[ i ];\\n\\n\\t\\t\\t\\t\\t// And transform both of them by themselves.\\n\\n\\t\\t\\t\\t\\t// The result of transforming operation from delta B by operation from delta A is saved in\\n\\t\\t\\t\\t\\t// `newByOps` array. We will use that array for transformations in next loops. We need delta B\\n\\t\\t\\t\\t\\t// operations after transformed by delta A operations to get correct results of transformations\\n\\t\\t\\t\\t\\t// of next operations from delta A.\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t// It's like this because 2nd operation from delta A assumes that 1st operation from delta A\\n\\t\\t\\t\\t\\t// is \\\"already applied\\\". When we transform 2nd operation from delta A by operations from delta B\\n\\t\\t\\t\\t\\t// we have to be sure that operations from delta B are in a state that acknowledges 1st operation\\n\\t\\t\\t\\t\\t// from delta A.\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t// This can be easier understood when operations sets to transform are represented by diamond diagrams:\\n\\t\\t\\t\\t\\t// http://www.codecommit.com/blog/java/understanding-and-applying-operational-transformation\\n\\n\\t\\t\\t\\t\\t// Transform operation from delta A by operation from delta B.\\n\\t\\t\\t\\t\\tconst results = operationTransform( op, opB, context );\\n\\n\\t\\t\\t\\t\\t// We replace currently processed operation from `ops` array by the results of transformation.\\n\\t\\t\\t\\t\\t// Note, that we process single operation but `operationTransform` result is an array, so we\\n\\t\\t\\t\\t\\t// might have to splice-in more than one operation. Save them in `ops` array and move `i` pointer by a proper offset.\\n\\t\\t\\t\\t\\tArray.prototype.splice.apply( ops, [ i, 1 ].concat( results ) );\\n\\n\\t\\t\\t\\t\\ti += results.length - 1;\\n\\n\\t\\t\\t\\t\\t// Then, transform operation from delta B by operation from delta A.\\n\\t\\t\\t\\t\\t// Since this is a \\\"mirror\\\" transformation, first, we \\\"mirror\\\" some of context values.\\n\\t\\t\\t\\t\\tconst reverseContext = Object.assign( {}, context );\\n\\t\\t\\t\\t\\treverseContext.isStrong = !context.isStrong;\\n\\t\\t\\t\\t\\treverseContext.insertBefore = context.insertBefore !== undefined ? !context.insertBefore : undefined;\\n\\n\\t\\t\\t\\t\\t// Transform operations.\\n\\t\\t\\t\\t\\tconst updatedOpB = operationTransform( opB, op, reverseContext );\\n\\n\\t\\t\\t\\t\\t// Update `newByOps` by transformed, updated `opB`.\\n\\t\\t\\t\\t\\t// Using push.apply because `operationTransform` returns an array with one or multiple results.\\n\\t\\t\\t\\t\\tArray.prototype.push.apply( newByOps, updatedOpB );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// At this point a single operation from delta A got transformed by a single operation from delta B.\\n\\t\\t\\t\\t// The transformation result is in `ops` array and it may be one or more operations. This was just the first step.\\n\\t\\t\\t\\t// Operation from delta A has to be further transformed by the other operations from delta B.\\n\\t\\t\\t\\t// So in next iterator loop we will take another operation from delta B and use transformed delta A (`ops`)\\n\\t\\t\\t\\t// to transform it further.\\n\\t\\t\\t}\\n\\n\\t\\t\\t// We got through all delta B operations and have a final transformed state of an operation from delta A.\\n\\n\\t\\t\\t// As previously mentioned, we substitute operations from delta B by their transformed equivalents.\\n\\t\\t\\tbyOps = newByOps;\\n\\t\\t\\tnewByOps = [];\\n\\n\\t\\t\\t// We add transformed operation from delta A to newly created delta.\\n\\t\\t\\t// Remember that transformed operation from delta A may consist of multiple operations.\\n\\t\\t\\tfor ( const op of ops ) {\\n\\t\\t\\t\\ttransformed.push( op );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// In next loop, we will take another operation from delta A and transform it through (transformed) operations\\n\\t\\t\\t// from delta B...\\n\\t\\t}\\n\\n\\t\\treturn getNormalizedDeltas( a.constructor, transformed );\\n\\t},\\n\\n\\t/**\\n\\t * Adds a special case callback for given delta classes.\\n\\t *\\n\\t * @param {Function} A Delta constructor which instance will get transformed.\\n\\t * @param {Function} B Delta constructor which instance will be transformed by.\\n\\t * @param {Function} resolver A callback that will handle custom special case transformation for instances of given delta classes.\\n\\t */\\n\\taddTransformationCase( A, B, resolver ) {\\n\\t\\tlet casesA = specialCases.get( A );\\n\\n\\t\\tif ( !casesA ) {\\n\\t\\t\\tcasesA = new Map();\\n\\t\\t\\tspecialCases.set( A, casesA );\\n\\t\\t}\\n\\n\\t\\tcasesA.set( B, resolver );\\n\\t},\\n\\n\\t/**\\n\\t * Gets a special case callback which was previously {@link module:engine/model/delta/transform~transform.addTransformationCase added}.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} a Delta to transform.\\n\\t * @param {module:engine/model/delta/delta~Delta} b Delta to be transformed by.\\n\\t */\\n\\tgetTransformationCase( a, b ) {\\n\\t\\tlet casesA = specialCases.get( a.constructor );\\n\\n\\t\\t// If there are no special cases registered for class which `a` is instance of, we will\\n\\t\\t// check if there are special cases registered for any parent class.\\n\\t\\tif ( !casesA || !casesA.get( b.constructor ) ) {\\n\\t\\t\\tconst cases = specialCases.keys();\\n\\n\\t\\t\\tfor ( const caseClass of cases ) {\\n\\t\\t\\t\\tif ( a instanceof caseClass && specialCases.get( caseClass ).get( b.constructor ) ) {\\n\\t\\t\\t\\t\\tcasesA = specialCases.get( caseClass );\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( casesA ) {\\n\\t\\t\\treturn casesA.get( b.constructor );\\n\\t\\t}\\n\\n\\t\\treturn undefined;\\n\\t},\\n\\n\\t/**\\n\\t * Transforms two sets of deltas by themselves. Returns both transformed sets.\\n\\t *\\n\\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasA Array with the first set of deltas to transform. These\\n\\t * deltas are considered more important (than `deltasB`) when resolving conflicts.\\n\\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasB Array with the second set of deltas to transform. These\\n\\t * deltas are considered less important (than `deltasA`) when resolving conflicts.\\n\\t * @param {module:engine/model/document~Document} [document=null] If set, deltas will be transformed in \\\"undo mode\\\"\\n\\t * and given `document` will be used to determine relations between deltas. If not set (default), deltas will be\\n\\t * transforming without additional context information.\\n\\t * @returns {Object}\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasA The first set of deltas transformed\\n\\t * by the second set of deltas.\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasB The second set of deltas transformed\\n\\t * by the first set of deltas.\\n\\t */\\n\\ttransformDeltaSets( deltasA, deltasB, document = null ) {\\n\\t\\tconst transformedDeltasA = Array.from( deltasA );\\n\\t\\tconst transformedDeltasB = Array.from( deltasB );\\n\\n\\t\\tconst useAdditionalContext = document !== null;\\n\\n\\t\\tconst contextAB = {\\n\\t\\t\\tisStrong: true\\n\\t\\t};\\n\\n\\t\\tif ( useAdditionalContext ) {\\n\\t\\t\\tcontextAB.wasAffected = new Map();\\n\\t\\t\\tcontextAB.originalDelta = new Map();\\n\\t\\t\\tcontextAB.document = document;\\n\\t\\t\\tcontextAB.undoMode = true;\\n\\n\\t\\t\\tfor ( const delta of transformedDeltasB ) {\\n\\t\\t\\t\\tcontextAB.originalDelta.set( delta, delta );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( let i = 0; i < transformedDeltasA.length; i++ ) {\\n\\t\\t\\tconst deltaA = [ transformedDeltasA[ i ] ];\\n\\n\\t\\t\\tfor ( let j = 0; j < transformedDeltasB.length; j++ ) {\\n\\t\\t\\t\\tconst deltaB = [ transformedDeltasB[ j ] ];\\n\\n\\t\\t\\t\\tfor ( let k = 0; k < deltaA.length; k++ ) {\\n\\t\\t\\t\\t\\tfor ( let l = 0; l < deltaB.length; l++ ) {\\n\\t\\t\\t\\t\\t\\tif ( useAdditionalContext ) {\\n\\t\\t\\t\\t\\t\\t\\t_setContext( deltaA[ k ], deltaB[ l ], contextAB );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tconst resultAB = transform.transform( deltaA[ k ], deltaB[ l ], {\\n\\t\\t\\t\\t\\t\\t\\tinsertBefore: contextAB.insertBefore,\\n\\t\\t\\t\\t\\t\\t\\tforceNotSticky: contextAB.forceNotSticky,\\n\\t\\t\\t\\t\\t\\t\\tisStrong: contextAB.isStrong,\\n\\t\\t\\t\\t\\t\\t\\tforceWeakRemove: contextAB.forceWeakRemove,\\n\\t\\t\\t\\t\\t\\t\\tundoMode: contextAB.undoMode\\n\\t\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\t\\tconst resultBA = transform.transform( deltaB[ l ], deltaA[ k ], {\\n\\t\\t\\t\\t\\t\\t\\tinsertBefore: !contextAB.insertBefore,\\n\\t\\t\\t\\t\\t\\t\\tforceNotSticky: contextAB.forceNotSticky,\\n\\t\\t\\t\\t\\t\\t\\tisStrong: !contextAB.isStrong,\\n\\t\\t\\t\\t\\t\\t\\tforceWeakRemove: contextAB.forceWeakRemove,\\n\\t\\t\\t\\t\\t\\t\\tundoMode: contextAB.undoMode\\n\\t\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\t\\tif ( useAdditionalContext ) {\\n\\t\\t\\t\\t\\t\\t\\t_updateContext( deltaA[ k ], resultAB, contextAB );\\n\\n\\t\\t\\t\\t\\t\\t\\tconst originalDelta = contextAB.originalDelta.get( deltaB[ l ] );\\n\\n\\t\\t\\t\\t\\t\\t\\tfor ( const deltaBA of resultBA ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcontextAB.originalDelta.set( deltaBA, originalDelta );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tdeltaA.splice( k, 1, ...resultAB );\\n\\t\\t\\t\\t\\t\\tk += resultAB.length - 1;\\n\\n\\t\\t\\t\\t\\t\\tdeltaB.splice( l, 1, ...resultBA );\\n\\t\\t\\t\\t\\t\\tl += resultBA.length - 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttransformedDeltasB.splice( j, 1, ...deltaB );\\n\\t\\t\\t\\tj += deltaB.length - 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttransformedDeltasA.splice( i, 1, ...deltaA );\\n\\t\\t\\ti += deltaA.length - 1;\\n\\t\\t}\\n\\n\\t\\tconst opsDiffA = getOpsCount( transformedDeltasA ) - getOpsCount( deltasA );\\n\\t\\tconst opsDiffB = getOpsCount( transformedDeltasB ) - getOpsCount( deltasB );\\n\\n\\t\\tif ( opsDiffB < opsDiffA ) {\\n\\t\\t\\tpadWithNoOps( transformedDeltasB, opsDiffA - opsDiffB );\\n\\t\\t} else if ( opsDiffA < opsDiffB ) {\\n\\t\\t\\tpadWithNoOps( transformedDeltasA, opsDiffB - opsDiffA );\\n\\t\\t}\\n\\n\\t\\treturn { deltasA: transformedDeltasA, deltasB: transformedDeltasB };\\n\\t}\\n};\\n\\nexport default transform;\\n\\n// Updates base versions of operations inside deltas (which are the results of delta transformation).\\nfunction updateBaseVersion( baseVersion, deltas ) {\\n\\tfor ( const delta of deltas ) {\\n\\t\\tfor ( const op of delta.operations ) {\\n\\t\\t\\top.baseVersion = ++baseVersion;\\n\\t\\t}\\n\\t}\\n\\n\\treturn deltas;\\n}\\n\\n// Returns number of operations in given array of deltas.\\nfunction getOpsCount( deltas ) {\\n\\treturn deltas.reduce( ( current, delta ) => {\\n\\t\\treturn current + delta.operations.length;\\n\\t}, 0 );\\n}\\n\\n// Adds a delta containing `howMany` `NoOperation` instances to given array with deltas.\\n// Used to \\\"synchronize\\\" the number of operations in two delta sets.\\nfunction padWithNoOps( deltas, howMany ) {\\n\\tconst lastDelta = deltas[ deltas.length - 1 ];\\n\\tlet baseVersion = lastDelta.operations.length + lastDelta.baseVersion;\\n\\n\\tconst noDelta = new Delta();\\n\\n\\tfor ( let i = 0; i < howMany; i++ ) {\\n\\t\\tnoDelta.addOperation( new NoOperation( baseVersion++ ) );\\n\\t}\\n\\n\\tdeltas.push( noDelta );\\n}\\n\\n// Sets context data before delta `a` by delta `b` transformation.\\n// Using data given in `context` object, sets `context.insertBefore` and `context.forceNotSticky` flags.\\n// Also updates `context.wasAffected`.\\nfunction _setContext( a, b, context ) {\\n\\t_setWasAffected( a, b, context );\\n\\t_setInsertBeforeContext( a, b, context );\\n\\t_setForceWeakRemove( b, context );\\n\\t_setForceNotSticky( b, context );\\n}\\n\\n// Sets `context.insertBefore` basing on `context.document` history for `a` by `b` transformation.\\n//\\n// Simply saying, if `b` is \\\"undoing delta\\\" it means that `a` might already be transformed by the delta\\n// which was undone by `b` (let's call it `oldB`). If this is true, `a` by `b` transformation has to consider\\n// how `a` was transformed by `oldB` to get an expected result.\\n//\\n// This is used to resolve conflict when two operations want to insert nodes at the same position. If the operations\\n// are not related, it doesn't matter in what order operations insert those nodes. However if the operations are\\n// related (for example, in undo) we need to keep the same order.\\n//\\n// For example, assume that editor has two letters: 'ab'. Then, both letters are removed, creating two operations:\\n// (op. 1) REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ]\\n// (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ]\\n// Then, we undo operation 2:\\n// REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ] is reversed to REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ] and is applied.\\n// History stack is:\\n// (op. 1) REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ]\\n// (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ]\\n// (op. 3) REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ]\\n// Then, we undo operation 1:\\n// REM [ 1 ] - [ 2 ] => (graveyard) [ 0 ] is reversed to REI (graveyard) [ 0 ] => [ 1 ] - [ 2 ] then,\\n// is transformed by (op. 2) REM [ 0 ] - [ 1 ] => (graveyard) [ 1 ] and becomes REI (graveyard) [ 0 ] => [ 0 ] - [ 1 ] then,\\n// is transformed by (op. 3) REI (graveyard) [ 1 ] => [ 0 ] - [ 1 ] and we have a conflict because both operations\\n// insert at the same position, but thanks to keeping the context, we know that in this case, the transformed operation should\\n// insert the node after operation 3.\\n//\\n// Keep in mind, that `context.insertBefore` may be either `Boolean` or `undefined`. If it is `Boolean` then the order is\\n// known (deltas are related and `a` should insert nodes before or after `b`). However, if deltas were not related,\\n// `context.isBefore` is `undefined` and other factors will be taken into consideration when resolving the order\\n// (this, however, happens in operational transformation algorithms).\\n//\\n// This affects both `MoveOperation` (and its derivatives) and `InsertOperation`.\\nfunction _setInsertBeforeContext( a, b, context ) {\\n\\t// If `b` is a delta that undoes other delta...\\n\\tconst originalDelta = context.originalDelta.get( b );\\n\\n\\tif ( context.document.history.isUndoingDelta( originalDelta ) ) {\\n\\t\\t// Get the undone delta...\\n\\t\\tconst undoneDelta = context.document.history.getUndoneDelta( originalDelta );\\n\\t\\t// Get a map with deltas related to `a` delta...\\n\\t\\tconst aWasAffectedBy = context.wasAffected.get( a );\\n\\t\\t// And check if the undone delta is related with delta `a`.\\n\\t\\tconst affected = aWasAffectedBy.get( undoneDelta );\\n\\n\\t\\tif ( affected !== undefined ) {\\n\\t\\t\\t// If deltas are related, set `context.insertBefore` basing on whether `a` was affected by the undone delta.\\n\\t\\t\\tcontext.insertBefore = affected;\\n\\t\\t}\\n\\t}\\n}\\n\\n// Sets `context.forceNotSticky` basing on `context.document` history for transformation by `b` delta.\\n//\\n// `MoveOperation` may be \\\"sticky\\\" which means, that anything that was inserted at the boundary of moved range, should\\n// also be moved. This is particularly helpful for actions like splitting or merging a node. However, this behavior\\n// sometimes leads to an error, for example in undo.\\n//\\n// Simply saying, if delta is going to be transformed by delta `b`, stickiness should not be taken into consideration\\n// if delta `b` was already undone or if delta `b` is an undoing delta.\\n//\\n// This affects `MoveOperation` (and its derivatives).\\nfunction _setForceNotSticky( b, context ) {\\n\\tconst originalDelta = context.originalDelta.get( b );\\n\\tconst history = context.document.history;\\n\\n\\tcontext.forceNotSticky = history.isUndoneDelta( originalDelta ) || history.isUndoingDelta( originalDelta );\\n}\\n\\n// Sets `context.forceWeakRemove` basing on `context.document` history for transformation by `b` delta.\\n//\\n// When additional context is not used, default `MoveOperation` x `RemoveOperation` transformation\\n// always treats `RemoveOperation` as a stronger one, no matter how `context.isStrong` is set. It is like this\\n// to provide better results when transformations happen.\\n//\\n// This, however, works fine only when additional context is not used.\\n//\\n// When additional context is used, we need a better way to decide whether `RemoveOperation` is \\\"dominating\\\" (or in other\\n// words, whether nodes removed by given operation should stay in graveyard if other operation wants to move them).\\n//\\n// The answer to this is easy: if `RemoveOperation` has been already undone, we are not forcing given nodes to stay\\n// in graveyard. In such scenario, we set `context.forceWeakRemove` to `true`. However, if the `RemoveOperation` has\\n// not been undone, we set `context.forceWeakRemove` to `false` because we want the operation to be \\\"dominating\\\".\\nfunction _setForceWeakRemove( b, context ) {\\n\\tconst history = context.document.history;\\n\\tconst originalB = context.originalDelta.get( b );\\n\\n\\t// If `b` delta has not been undone yet, forceWeakRemove should be `false`.\\n\\t// It should be `true`, in any other case, if additional context is used.\\n\\tcontext.forceWeakRemove = history.isUndoneDelta( originalB );\\n}\\n\\n// Sets `context.wasAffected` which holds context information about how transformed deltas are related. `context.wasAffected`\\n// is used by `_setInsertBeforeContext` helper function.\\nfunction _setWasAffected( a, b, context ) {\\n\\tif ( !context.wasAffected.get( a ) ) {\\n\\t\\t// Create a new map with relations for `a` delta.\\n\\t\\tcontext.wasAffected.set( a, new Map() );\\n\\t}\\n\\n\\tconst originalDelta = context.originalDelta.get( b );\\n\\tlet wasAffected = !!context.wasAffected.get( a ).get( originalDelta );\\n\\n\\t// Cross-check all operations from both deltas...\\n\\tfor ( const opA of a.operations ) {\\n\\t\\tfor ( const opB of b.operations ) {\\n\\t\\t\\tif ( opA instanceof MoveOperation && opB instanceof MoveOperation ) {\\n\\t\\t\\t\\tif ( _isOperationAffected( opA, opB ) ) {\\n\\t\\t\\t\\t\\t// If any of them are move operations that affect each other, set the relation accordingly.\\n\\t\\t\\t\\t\\twasAffected = true;\\n\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Break both loops if affecting pair has been found.\\n\\t\\tif ( wasAffected ) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tcontext.wasAffected.get( a ).set( originalDelta, wasAffected );\\n}\\n\\n// Checks whether `opA` is affected by `opB`. It is assumed that both operations are `MoveOperation`.\\n// Operation is affected only if the other operation's source range is before that operation's source range.\\nfunction _isOperationAffected( opA, opB ) {\\n\\tconst target = opA.targetPosition;\\n\\tconst source = opB.sourcePosition;\\n\\n\\tconst cmpResult = compareArrays( source.getParentPath(), target.getParentPath() );\\n\\n\\tif ( target.root != source.root ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn cmpResult == 'same' && source.offset < target.offset;\\n}\\n\\n// Updates `context` object after delta by delta transformation is done.\\n//\\n// This means two things:\\n// 1. Some information are removed from context (those that apply only to the transformation that just happened).\\n// 2. `context.wasAffected` is updated because `oldDelta` has been transformed to one or many `newDeltas` and we\\n// need to update entries in `context.wasAffected`. Basically, anything that was in `context.wasAffected` under\\n// `oldDelta` key should be rewritten to `newDeltas`. This way in next transformation steps, `newDeltas` \\\"remember\\\"\\n// the context of `oldDelta`.\\nfunction _updateContext( oldDelta, newDeltas, context ) {\\n\\tdelete context.insertBefore;\\n\\tdelete context.forceNotSticky;\\n\\tdelete context.forceWeakRemove;\\n\\n\\tconst wasAffected = context.wasAffected.get( oldDelta );\\n\\n\\tcontext.wasAffected.delete( oldDelta );\\n\\n\\tfor ( const delta of newDeltas ) {\\n\\t\\tcontext.wasAffected.set( delta, new Map( wasAffected ) );\\n\\t}\\n}\\n\\n// Takes base delta class (`DeltaClass`) and a set of `operations` that are transformation results and creates\\n// one or more deltas, acknowledging that the result is a transformation of a delta that is of `DeltaClass`.\\n//\\n// The normalization ensures that each delta has it's \\\"normal\\\" state, that is, for example, `MoveDelta` has\\n// just one `MoveOperation`, `SplitDelta` has just two operations of which first is `InsertOperation` and second\\n// is `MoveOperation` or `NoOperation`, etc.\\nfunction getNormalizedDeltas( DeltaClass, operations ) {\\n\\tlet deltas = [];\\n\\tlet delta = null;\\n\\tlet attributeOperationIndex;\\n\\n\\tswitch ( DeltaClass ) {\\n\\t\\tcase MoveDelta:\\n\\t\\tcase RemoveDelta:\\n\\t\\t\\t// Normal MoveDelta has just one MoveOperation.\\n\\t\\t\\t// Take all operations and create MoveDelta for each of them.\\n\\t\\t\\tfor ( const o of operations ) {\\n\\t\\t\\t\\tif ( o instanceof NoOperation ) {\\n\\t\\t\\t\\t\\t// An operation may be instance of NoOperation and this may be correct.\\n\\t\\t\\t\\t\\t// If that's the case, do not create a MoveDelta with singular NoOperation.\\n\\t\\t\\t\\t\\t// Create \\\"no delta\\\" instead, that is Delta instance with NoOperation.\\n\\t\\t\\t\\t\\tdelta = new Delta();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif ( o instanceof RemoveOperation ) {\\n\\t\\t\\t\\t\\t\\tdelta = new RemoveDelta();\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tdelta = new MoveDelta();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdelta.addOperation( o );\\n\\t\\t\\t\\tdeltas.push( delta );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return all created MoveDeltas.\\n\\t\\t\\treturn deltas;\\n\\t\\tcase SplitDelta:\\n\\t\\tcase WrapDelta:\\n\\t\\t\\t// Normal SplitDelta and WrapDelta have two operations: first is InsertOperation and second is MoveOperation.\\n\\t\\t\\t// The MoveOperation may be split into multiple MoveOperations.\\n\\t\\t\\t// If that's the case, convert additional MoveOperations into MoveDeltas.\\n\\t\\t\\t// First, create normal SplitDelta or WrapDelta, using first two operations.\\n\\t\\t\\tdelta = new DeltaClass();\\n\\t\\t\\tdelta.addOperation( operations[ 0 ] );\\n\\t\\t\\tdelta.addOperation( operations[ 1 ] );\\n\\t\\t\\t// Then, take all but last two operations and use them to create normalized MoveDeltas.\\n\\t\\t\\tdeltas = getNormalizedDeltas( MoveDelta, operations.slice( 2 ) );\\n\\n\\t\\t\\t// Return all deltas as one array, in proper order.\\n\\t\\t\\treturn [ delta ].concat( deltas );\\n\\t\\tcase MergeDelta:\\n\\t\\tcase UnwrapDelta:\\n\\t\\t\\t// Normal MergeDelta and UnwrapDelta have two operations: first is MoveOperation and second is RemoveOperation.\\n\\t\\t\\t// The MoveOperation may be split into multiple MoveOperations.\\n\\t\\t\\t// If that's the case, convert additional MoveOperations into MoveDeltas.\\n\\t\\t\\t// Take all but last two operations and use them to create normalized MoveDeltas.\\n\\t\\t\\tdeltas = getNormalizedDeltas( MoveDelta, operations.slice( 0, -2 ) );\\n\\t\\t\\t// Then, create normal MergeDelta or UnwrapDelta, using last two operations.\\n\\t\\t\\tdelta = new DeltaClass();\\n\\t\\t\\tdelta.addOperation( operations[ operations.length - 2 ] );\\n\\t\\t\\tdelta.addOperation( operations[ operations.length - 1 ] );\\n\\n\\t\\t\\t// Return all deltas as one array, in proper order.\\n\\t\\t\\treturn deltas.concat( delta );\\n\\t\\tcase RenameDelta:\\n\\t\\t\\t// RenameDelta may become a \\\"no delta\\\" if it's only operation is transformed to NoOperation.\\n\\t\\t\\t// This may happen when RenameOperation is transformed by RenameOperation.\\n\\t\\t\\t// Keep in mind that RenameDelta always have just one operation.\\n\\t\\t\\tif ( operations[ 0 ] instanceof NoOperation ) {\\n\\t\\t\\t\\tdelta = new Delta();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdelta = new RenameDelta();\\n\\t\\t\\t}\\n\\n\\t\\t\\tdelta.addOperation( operations[ 0 ] );\\n\\n\\t\\t\\treturn [ delta ];\\n\\t\\tcase AttributeDelta:\\n\\t\\t\\t// AttributeDelta is allowed to have multiple AttributeOperations and also NoOperations but\\n\\t\\t\\t// the first operation has to be an AttributeOperation as it is used as a reference for deltas properties.\\n\\t\\t\\t// Keep in mind that we cannot simply remove NoOperations cause that would mess up base versions.\\n\\t\\t\\t// Find an index of first operation that is not a NoOperation.\\n\\t\\t\\tfor ( attributeOperationIndex = 0; attributeOperationIndex < operations.length; attributeOperationIndex++ ) {\\n\\t\\t\\t\\tif ( !( operations[ attributeOperationIndex ] instanceof NoOperation ) ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// No AttributeOperations has been found. Convert AttributeDelta to \\\"no delta\\\".\\n\\t\\t\\tif ( attributeOperationIndex == operations.length ) {\\n\\t\\t\\t\\tdelta = new Delta();\\n\\t\\t\\t}\\n\\t\\t\\t// AttributeOperation found.\\n\\t\\t\\telse {\\n\\t\\t\\t\\tdelta = new AttributeDelta();\\n\\n\\t\\t\\t\\t// AttributeOperation wasn't the first operation.\\n\\t\\t\\t\\tif ( attributeOperationIndex != 0 ) {\\n\\t\\t\\t\\t\\t// Move AttributeOperation to the beginning.\\n\\t\\t\\t\\t\\toperations.unshift( operations.splice( attributeOperationIndex, 1 )[ 0 ] );\\n\\t\\t\\t\\t\\t// No need to update base versions - they are updated at the end of transformation algorithm anyway.\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add all operations to the delta (even if it is just a couple of NoOperations we have to keep them all).\\n\\t\\t\\tfor ( const o of operations ) {\\n\\t\\t\\t\\tdelta.addOperation( o );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ delta ];\\n\\t\\tdefault:\\n\\t\\t\\t// For all other deltas no normalization is needed.\\n\\t\\t\\tdelta = new DeltaClass();\\n\\n\\t\\t\\tfor ( const o of operations ) {\\n\\t\\t\\t\\tdelta.addOperation( o );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ delta ];\\n\\t}\\n}\\n\\n/**\\n * Object containing values and flags describing context of a transformation.\\n *\\n * @typedef {Object} module:engine/model/delta/transform~transformationContext\\n * @property {Boolean} useAdditionalContext Whether additional context should be evaluated and used during transformations.\\n * @property {Boolean} isStrong Whether transformed deltas are more (`true`) or less (`false`) important than deltas to transform by.\\n * @property {module:engine/model/document~Document} [document] Model document which is a context for transformations.\\n * Available only if `useAdditionalContext` is `true`.\\n * @property {Boolean|undefined} forceWeakRemove Whether {@link module:engine/model/operation/removeoperation~RemoveOperation}\\n * should be always more important than other operations. Available only if `useAdditionalContext` is `true`.\\n * @property {Boolean|undefined} insertBefore Used when transforming {@link module:engine/model/operation/moveoperation~MoveOperation}s\\n * If two `MoveOperation`s target to the same position, `insertBefore` is used to resolve such conflict. This flag\\n * is set and used internally by transformation algorithms. Available only if `useAdditionalContext` is `true`.\\n * @property {Boolean|undefined} forceNotSticky Used when transforming\\n * {@link module:engine/model/operation/moveoperation~MoveOperation#isSticky sticky MoveOperation}. If set to `true`,\\n * `isSticky` flag is discarded during transformations. This flag is set and used internally by transformation algorithms.\\n * Available only if `useAdditionalContext` is `true`.\\n * @property {Map|undefined} wasAffected Used to evaluate `insertBefore` flag. This map is set and used internally by\\n * transformation algorithms. Available only if `useAdditionalContext` is `true`.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/markerdelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, the {@link module:engine/model/writer~Writer#setMarker Batch#setMarker}\\n * and {@link module:engine/model/writer~Writer#removeMarker Batch#removeMarker} methods use the `MarkerDelta` class which inherits\\n * from the `Delta` class and may overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class MarkerDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'marker';\\n\\t}\\n\\n\\t/**\\n\\t * A class that will be used when creating reversed delta.\\n\\t *\\n\\t * @private\\n\\t * @type {Function}\\n\\t */\\n\\tget _reverseDeltaClass() {\\n\\t\\treturn MarkerDelta;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.MarkerDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( MarkerDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/basic-transformations\\n */\\n\\nimport deltaTransform from './transform';\\nconst addTransformationCase = deltaTransform.addTransformationCase;\\nconst defaultTransform = deltaTransform.defaultTransform;\\n\\nimport Range from '../range';\\nimport Position from '../position';\\n\\nimport NoOperation from '../operation/nooperation';\\nimport AttributeOperation from '../operation/attributeoperation';\\nimport InsertOperation from '../operation/insertoperation';\\nimport ReinsertOperation from '../operation/reinsertoperation';\\n\\nimport Delta from './delta';\\nimport AttributeDelta from './attributedelta';\\nimport InsertDelta from './insertdelta';\\nimport MarkerDelta from './markerdelta';\\nimport MergeDelta from './mergedelta';\\nimport MoveDelta from './movedelta';\\nimport SplitDelta from './splitdelta';\\nimport WeakInsertDelta from './weakinsertdelta';\\nimport WrapDelta from './wrapdelta';\\nimport UnwrapDelta from './unwrapdelta';\\nimport RenameDelta from './renamedelta';\\nimport RemoveDelta from './removedelta';\\n\\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\\n\\n// Provide transformations for default deltas.\\n\\n// Add special case for AttributeDelta x WeakInsertDelta transformation.\\naddTransformationCase( AttributeDelta, WeakInsertDelta, ( a, b, context ) => {\\n\\t// If nodes are weak-inserted into attribute delta range, we need to apply changes from attribute delta on them.\\n\\t// So first we do the normal transformation and if this special cases happens, we will add an extra delta.\\n\\tconst deltas = defaultTransform( a, b, context );\\n\\n\\tif ( a.range.containsPosition( b.position ) ) {\\n\\t\\tdeltas.push( _getComplementaryAttrDelta( b, a ) );\\n\\t}\\n\\n\\treturn deltas;\\n} );\\n\\n// Add special case for AttributeDelta x SplitDelta transformation.\\naddTransformationCase( AttributeDelta, SplitDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tconst undoMode = context.undoMode;\\n\\tconst splitPosition = new Position( b.position.root, b.position.path.slice( 0, -1 ) );\\n\\n\\tconst deltas = defaultTransform( a, b, context );\\n\\n\\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\\n\\tif ( undoMode || !( b._cloneOperation instanceof InsertOperation ) ) {\\n\\t\\treturn deltas;\\n\\t}\\n\\n\\tfor ( const operation of a.operations ) {\\n\\t\\t// If a node that has been split has it's attribute updated, we should also update attribute of\\n\\t\\t// the node created during splitting.\\n\\t\\tif ( operation.range.containsPosition( splitPosition ) || operation.range.start.isEqual( splitPosition ) ) {\\n\\t\\t\\tconst additionalAttributeDelta = new AttributeDelta();\\n\\n\\t\\t\\tconst rangeStart = splitPosition.getShiftedBy( 1 );\\n\\t\\t\\tconst rangeEnd = Position.createFromPosition( rangeStart );\\n\\t\\t\\trangeEnd.path.push( 0 );\\n\\n\\t\\t\\tconst oldValue = b._cloneOperation.nodes.getNode( 0 ).getAttribute( operation.key );\\n\\n\\t\\t\\tadditionalAttributeDelta.addOperation( new AttributeOperation(\\n\\t\\t\\t\\tnew Range( rangeStart, rangeEnd ),\\n\\t\\t\\t\\toperation.key,\\n\\t\\t\\t\\toldValue === undefined ? null : oldValue,\\n\\t\\t\\t\\toperation.newValue,\\n\\t\\t\\t\\t0\\n\\t\\t\\t) );\\n\\n\\t\\t\\tdeltas.push( additionalAttributeDelta );\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\treturn deltas;\\n} );\\n\\n// Add special case for InsertDelta x MergeDelta transformation.\\naddTransformationCase( InsertDelta, MergeDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `MergeDelta` has `NoOperation` as the second operation.\\n\\tif ( !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// If insert is applied at the same position where merge happened, we reverse the merge (we treat it like it\\n\\t// didn't happen) and then apply the original insert operation. This is \\\"mirrored\\\" in MergeDelta x InsertDelta\\n\\t// transformation below, where we simply do not apply MergeDelta.\\n\\tif ( !undoMode && a.position.isEqual( b.position ) ) {\\n\\t\\treturn [\\n\\t\\t\\tb.getReversed(),\\n\\t\\t\\ta.clone()\\n\\t\\t];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\nfunction transformMarkerDelta( a, b ) {\\n\\tconst transformedDelta = a.clone();\\n\\tconst transformedOp = transformedDelta.operations[ 0 ];\\n\\n\\tif ( transformedOp.oldRange ) {\\n\\t\\ttransformedOp.oldRange = transformedOp.oldRange.getTransformedByDelta( b )[ 0 ];\\n\\t}\\n\\n\\tif ( transformedOp.newRange ) {\\n\\t\\ttransformedOp.newRange = transformedOp.newRange.getTransformedByDelta( b )[ 0 ];\\n\\t}\\n\\n\\treturn [ transformedDelta ];\\n}\\n\\naddTransformationCase( MarkerDelta, SplitDelta, transformMarkerDelta );\\naddTransformationCase( MarkerDelta, MergeDelta, transformMarkerDelta );\\naddTransformationCase( MarkerDelta, WrapDelta, transformMarkerDelta );\\naddTransformationCase( MarkerDelta, UnwrapDelta, transformMarkerDelta );\\naddTransformationCase( MarkerDelta, MoveDelta, transformMarkerDelta );\\naddTransformationCase( MarkerDelta, RenameDelta, transformMarkerDelta );\\n\\n// Add special case for MoveDelta x MergeDelta transformation.\\naddTransformationCase( MoveDelta, MergeDelta, ( a, b, context ) => {\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Do not apply special transformation case in undo mode or if `MergeDelta` has `NoOperation` as the second operation.\\n\\tif ( undoMode || !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If move delta is supposed to move a node that has been merged, we reverse the merge (we treat it like it\\n\\t// didn't happen) and then apply the original move operation. This is \\\"mirrored\\\" in MergeDelta x MoveDelta\\n\\t// transformation below, where we simply do not apply MergeDelta.\\n\\tconst operateInSameParent =\\n\\t\\ta.sourcePosition.root == b.position.root &&\\n\\t\\tcompareArrays( a.sourcePosition.getParentPath(), b.position.getParentPath() ) === 'same';\\n\\n\\tconst mergeInsideMoveRange = a.sourcePosition.offset <= b.position.offset && a.sourcePosition.offset + a.howMany > b.position.offset;\\n\\n\\tif ( operateInSameParent && mergeInsideMoveRange ) {\\n\\t\\treturn [\\n\\t\\t\\tb.getReversed(),\\n\\t\\t\\ta.clone()\\n\\t\\t];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for MergeDelta x InsertDelta transformation.\\naddTransformationCase( MergeDelta, InsertDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `MergeDelta` has `NoOperation` as the second operation.\\n\\tif ( !a.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// If merge is applied at the same position where we inserted a range of nodes we cancel the merge as it's results\\n\\t// may be unexpected and very weird. Even if we do some \\\"magic\\\" we don't know what really are users' expectations.\\n\\tif ( !undoMode && a.position.isEqual( b.position ) ) {\\n\\t\\treturn [ noDelta() ];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for MergeDelta x MoveDelta transformation.\\naddTransformationCase( MergeDelta, MoveDelta, ( a, b, context ) => {\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Do not apply special transformation case in undo mode or if `MergeDelta` has `NoOperation` as the second operation.\\n\\tif ( undoMode || !a.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If merge is applied at the position between moved nodes we cancel the merge as it's results may be unexpected and\\n\\t// very weird. Even if we do some \\\"magic\\\" we don't know what really are users' expectations.\\n\\tconst operateInSameParent =\\n\\t\\ta.position.root == b.sourcePosition.root &&\\n\\t\\tcompareArrays( a.position.getParentPath(), b.sourcePosition.getParentPath() ) === 'same';\\n\\n\\tconst mergeInsideMoveRange = b.sourcePosition.offset <= a.position.offset && b.sourcePosition.offset + b.howMany > a.position.offset;\\n\\n\\tif ( operateInSameParent && mergeInsideMoveRange ) {\\n\\t\\treturn [ noDelta() ];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\naddTransformationCase( SplitDelta, SplitDelta, ( a, b, context ) => {\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Do not apply special transformation case if transformation is in undo mode.\\n\\tif ( undoMode ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !a.position || !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tconst pathA = a.position.getParentPath();\\n\\tconst pathB = b.position.getParentPath();\\n\\n\\t// The special case is for splits inside the same parent.\\n\\tif ( a.position.root == b.position.root && compareArrays( pathA, pathB ) == 'same' ) {\\n\\t\\ta = a.clone();\\n\\n\\t\\tif ( a.position.offset < b.position.offset || ( a.position.offset == b.position.offset && context.isStrong ) ) {\\n\\t\\t\\t// If both first operations are `ReinsertOperation`s, we might need to transform `a._cloneOperation`,\\n\\t\\t\\t// so it will take correct node from graveyard.\\n\\t\\t\\tif (\\n\\t\\t\\t\\ta._cloneOperation instanceof ReinsertOperation && b._cloneOperation instanceof ReinsertOperation &&\\n\\t\\t\\t\\ta._cloneOperation.sourcePosition.offset > b._cloneOperation.sourcePosition.offset\\n\\t\\t\\t) {\\n\\t\\t\\t\\ta._cloneOperation.sourcePosition.offset--;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// `a` splits closer or at same offset.\\n\\t\\t\\t// Change how many nodes are moved. Do not move nodes that were moved by delta `b`.\\n\\t\\t\\tconst aRange = Range.createFromPositionAndShift( a.position, a._moveOperation.howMany );\\n\\t\\t\\tconst bRange = Range.createFromPositionAndShift( b.position, b._moveOperation.howMany );\\n\\n\\t\\t\\tconst diff = aRange.getDifference( bRange );\\n\\n\\t\\t\\tlet newHowMany = 0;\\n\\n\\t\\t\\tfor ( const range of diff ) {\\n\\t\\t\\t\\tnewHowMany += range.end.offset - range.start.offset;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( newHowMany === 0 ) {\\n\\t\\t\\t\\ta.operations.pop(); // Remove last operation (`MoveOperation`).\\n\\t\\t\\t\\ta.addOperation( new NoOperation( a.operations[ 0 ].baseVersion + 1 ) ); // Add `NoOperation` instead.\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ta.operations[ 1 ].howMany = newHowMany;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn [ a ];\\n\\t\\t} else {\\n\\t\\t\\t// `a` splits further.\\n\\t\\t\\t// This is more complicated case, thankfully we can solve it using default transformation and setting proper context.\\n\\t\\t\\tconst newContext = Object.assign( {}, context );\\n\\t\\t\\tnewContext.isStrong = true;\\n\\t\\t\\tnewContext.insertBefore = true;\\n\\n\\t\\t\\treturn defaultTransform( a, b, newContext );\\n\\t\\t}\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for SplitDelta x UnwrapDelta transformation.\\naddTransformationCase( SplitDelta, UnwrapDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !a.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If incoming split delta tries to split a node that just got unwrapped, there is actually nothing to split,\\n\\t// so we discard that delta.\\n\\tif ( a.position.root == b.position.root && compareArrays( b.position.path, a.position.getParentPath() ) === 'same' ) {\\n\\t\\treturn [ noDelta() ];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for SplitDelta x WrapDelta transformation.\\naddTransformationCase( SplitDelta, WrapDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !a.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If split is applied at the position between wrapped nodes, we cancel the split as it's results may be unexpected and\\n\\t// very weird. Even if we do some \\\"magic\\\" we don't know what really are users' expectations.\\n\\n\\tconst sameRoot = a.position.root == b.range.start.root;\\n\\tconst operateInSameParent = sameRoot && compareArrays( a.position.getParentPath(), b.range.start.getParentPath() ) === 'same';\\n\\tconst splitInsideWrapRange = b.range.start.offset < a.position.offset && b.range.end.offset >= a.position.offset;\\n\\n\\tif ( operateInSameParent && splitInsideWrapRange ) {\\n\\t\\treturn [ noDelta() ];\\n\\t} else if ( sameRoot && compareArrays( a.position.getParentPath(), b.range.end.getShiftedBy( -1 ).path ) === 'same' ) {\\n\\t\\t// Split position is directly inside the last node from wrap range.\\n\\t\\t// If that's the case, we manually change split delta so it will \\\"target\\\" inside the wrapping element.\\n\\t\\t// By doing so we will be inserting split node right to the original node which feels natural and is a good UX.\\n\\t\\tconst delta = a.clone();\\n\\n\\t\\t// 1. Fix insert operation position.\\n\\t\\t// Node to split is the last children of the wrapping element.\\n\\t\\t// Wrapping element is the element inserted by WrapDelta (re)insert operation.\\n\\t\\t// It is inserted after the wrapped range, but the wrapped range will be moved inside it.\\n\\t\\t// Having this in mind, it is correct to use wrapped range start position as the position before wrapping element.\\n\\t\\tconst splitNodePos = Position.createFromPosition( b.range.start );\\n\\t\\t// Now, `splitNodePos` points before wrapping element.\\n\\t\\t// To get a position before last children of that element, we expand position's `path` member by proper offset.\\n\\t\\tsplitNodePos.path.push( b.howMany - 1 );\\n\\n\\t\\t// SplitDelta insert operation position should be right after the node we split.\\n\\t\\tconst insertPos = splitNodePos.getShiftedBy( 1 );\\n\\t\\tdelta._cloneOperation.position = insertPos;\\n\\n\\t\\t// 2. Fix move operation source position.\\n\\t\\t// Nodes moved by SplitDelta will be moved from new position, modified by WrapDelta.\\n\\t\\t// To obtain that new position, `splitNodePos` will be used, as this is the node we are extracting children from.\\n\\t\\tconst sourcePos = Position.createFromPosition( splitNodePos );\\n\\t\\t// Nothing changed inside split node so it is correct to use the original split position offset.\\n\\t\\tsourcePos.path.push( a.position.offset );\\n\\t\\tdelta._moveOperation.sourcePosition = sourcePos;\\n\\n\\t\\t// 3. Fix move operation target position.\\n\\t\\t// SplitDelta move operation target position should be inside the node inserted by operation above.\\n\\t\\t// Since the node is empty, we will insert at offset 0.\\n\\t\\tconst targetPos = Position.createFromPosition( insertPos );\\n\\t\\ttargetPos.path.push( 0 );\\n\\t\\tdelta._moveOperation.targetPosition = targetPos;\\n\\n\\t\\treturn [ delta ];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for SplitDelta x WrapDelta transformation.\\naddTransformationCase( SplitDelta, AttributeDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !a.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\ta = a.clone();\\n\\n\\tconst undoMode = context.undoMode;\\n\\tconst splitPosition = new Position( a.position.root, a.position.path.slice( 0, -1 ) );\\n\\n\\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\\n\\tif ( undoMode || !( a._cloneOperation instanceof InsertOperation ) ) {\\n\\t\\treturn [ a ];\\n\\t}\\n\\n\\t// If element to split had it's attribute changed, we have to reflect this change in an element\\n\\t// that is in SplitDelta's InsertOperation.\\n\\tfor ( const operation of b.operations ) {\\n\\t\\tif ( operation.range.containsPosition( splitPosition ) || operation.range.start.isEqual( splitPosition ) ) {\\n\\t\\t\\tif ( operation.newValue !== null ) {\\n\\t\\t\\t\\ta._cloneOperation.nodes.getNode( 0 )._setAttribute( operation.key, operation.newValue );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ta._cloneOperation.nodes.getNode( 0 )._removeAttribute( operation.key );\\n\\t\\t\\t}\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\treturn [ a ];\\n} );\\n\\n// Add special case for UnwrapDelta x SplitDelta transformation.\\naddTransformationCase( UnwrapDelta, SplitDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If incoming unwrap delta tries to unwrap node that got split we should unwrap the original node and the split copy.\\n\\t// This can be achieved either by reverting split and applying unwrap to singular node, or creating additional unwrap delta.\\n\\tif ( a.position.root == b.position.root && compareArrays( a.position.path, b.position.getParentPath() ) === 'same' ) {\\n\\t\\treturn [\\n\\t\\t\\tb.getReversed(),\\n\\t\\t\\ta.clone()\\n\\t\\t];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for WeakInsertDelta x AttributeDelta transformation.\\naddTransformationCase( WeakInsertDelta, AttributeDelta, ( a, b ) => {\\n\\t// If nodes are weak-inserted into attribute delta range, we need to apply changes from attribute delta on them.\\n\\tconst deltas = [ a.clone() ];\\n\\n\\tif ( b.range.containsPosition( a.position ) ) {\\n\\t\\tdeltas.push( _getComplementaryAttrDelta( a, b ) );\\n\\t}\\n\\n\\treturn deltas;\\n} );\\n\\n// Add special case for WrapDelta x SplitDelta transformation.\\naddTransformationCase( WrapDelta, SplitDelta, ( a, b, context ) => {\\n\\t// Do not apply special transformation case if `SplitDelta` has `NoOperation` as the second operation.\\n\\tif ( !b.position ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// If incoming wrap delta tries to wrap range that contains split position, we have to cancel the split and apply\\n\\t// the wrap. Since split was already applied, we have to revert it.\\n\\tconst sameRoot = a.range.start.root == b.position.root;\\n\\tconst operateInSameParent = sameRoot && compareArrays( a.range.start.getParentPath(), b.position.getParentPath() ) === 'same';\\n\\tconst splitInsideWrapRange = a.range.start.offset < b.position.offset && a.range.end.offset >= b.position.offset;\\n\\n\\tif ( operateInSameParent && splitInsideWrapRange ) {\\n\\t\\treturn [\\n\\t\\t\\tb.getReversed(),\\n\\t\\t\\ta.clone()\\n\\t\\t];\\n\\t} else if ( sameRoot && compareArrays( b.position.getParentPath(), a.range.end.getShiftedBy( -1 ).path ) === 'same' ) {\\n\\t\\tconst delta = a.clone();\\n\\n\\t\\t// Move wrapping element insert position one node further so it is after the split node insertion.\\n\\t\\tdelta._insertOperation.position.offset++;\\n\\n\\t\\t// Include the split node copy.\\n\\t\\tdelta._moveOperation.howMany++;\\n\\n\\t\\t// Change the path to wrapping element in move operation.\\n\\t\\tdelta._moveOperation.targetPosition.path[ delta._moveOperation.targetPosition.path.length - 2 ]++;\\n\\n\\t\\treturn [ delta ];\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Add special case for RenameDelta x SplitDelta transformation.\\naddTransformationCase( RenameDelta, SplitDelta, ( a, b, context ) => {\\n\\tconst undoMode = context.undoMode;\\n\\tconst deltas = defaultTransform( a, b, context );\\n\\n\\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\\n\\tif ( undoMode || !( b._cloneOperation instanceof InsertOperation ) ) {\\n\\t\\treturn deltas;\\n\\t}\\n\\n\\tconst insertPosition = b._cloneOperation.position.getShiftedBy( -1 );\\n\\n\\tif ( insertPosition && a.operations[ 0 ].position.isEqual( insertPosition ) ) {\\n\\t\\t// If a node that has been split has it's name changed, we should also change name of\\n\\t\\t// the node created during splitting.\\n\\t\\tconst additionalRenameDelta = a.clone();\\n\\t\\tadditionalRenameDelta.operations[ 0 ].position = insertPosition.getShiftedBy( 1 );\\n\\n\\t\\tdeltas.push( additionalRenameDelta );\\n\\t}\\n\\n\\treturn deltas;\\n} );\\n\\n// Add special case for SplitDelta x RenameDelta transformation.\\naddTransformationCase( SplitDelta, RenameDelta, ( a, b, context ) => {\\n\\ta = a.clone();\\n\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Special case applies only if undo is not a context and only if `SplitDelta` has `InsertOperation` (not `ReinsertOperation`).\\n\\tif ( undoMode || !( a._cloneOperation instanceof InsertOperation ) ) {\\n\\t\\treturn [ a ];\\n\\t}\\n\\n\\tconst insertPosition = a._cloneOperation.position.getShiftedBy( -1 );\\n\\n\\t// If element to split had it's name changed, we have to reflect this by creating additional rename operation.\\n\\tif ( insertPosition && !undoMode && b.operations[ 0 ].position.isEqual( insertPosition ) ) {\\n\\t\\tconst additionalRenameDelta = b.clone();\\n\\t\\tadditionalRenameDelta.operations[ 0 ].position = insertPosition.getShiftedBy( 1 );\\n\\t\\tadditionalRenameDelta.operations[ 0 ].oldName = a._cloneOperation.nodes.getNode( 0 ).name;\\n\\n\\t\\treturn [ a, additionalRenameDelta ];\\n\\t}\\n\\n\\treturn [ a ];\\n} );\\n\\n// Add special case for RemoveDelta x SplitDelta transformation.\\naddTransformationCase( RemoveDelta, SplitDelta, ( a, b, context ) => {\\n\\tconst deltas = defaultTransform( a, b, context );\\n\\t// The \\\"clone operation\\\" may be InsertOperation, ReinsertOperation, MoveOperation or NoOperation.\\n\\tconst insertPosition = b._cloneOperation.position || b._cloneOperation.targetPosition;\\n\\n\\t// NoOperation.\\n\\tif ( !insertPosition ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Special case applies only if undo is not a context.\\n\\tif ( undoMode ) {\\n\\t\\treturn deltas;\\n\\t}\\n\\n\\t// In case if `defaultTransform` returned more than one delta.\\n\\tfor ( const delta of deltas ) {\\n\\t\\t// \\\"No delta\\\" may be returned in some cases.\\n\\t\\tif ( delta instanceof RemoveDelta ) {\\n\\t\\t\\tconst operation = delta._moveOperation;\\n\\t\\t\\tconst rangeEnd = operation.sourcePosition.getShiftedBy( operation.howMany );\\n\\n\\t\\t\\tif ( rangeEnd.isEqual( insertPosition ) ) {\\n\\t\\t\\t\\toperation.howMany += 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn deltas;\\n} );\\n\\n// Add special case for SplitDelta x RemoveDelta transformation.\\naddTransformationCase( SplitDelta, RemoveDelta, ( a, b, context ) => {\\n\\tconst undoMode = context.undoMode;\\n\\n\\t// Special case applies only if undo is not a context.\\n\\tif ( undoMode ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\t// This case is very trickily solved.\\n\\t// Instead of fixing `a` delta, we change `b` delta for a while and fire default transformation with fixed `b` delta.\\n\\t// Thanks to that fixing `a` delta will be differently (correctly) transformed.\\n\\t//\\n\\t// The \\\"clone operation\\\" may be InsertOperation, ReinsertOperation, MoveOperation or NoOperation.\\n\\tconst insertPosition = a._cloneOperation.position || a._cloneOperation.targetPosition;\\n\\n\\t// NoOperation.\\n\\tif ( !insertPosition ) {\\n\\t\\treturn defaultTransform( a, b, context );\\n\\t}\\n\\n\\tb = b.clone();\\n\\tconst operation = b._moveOperation;\\n\\tconst rangeEnd = operation.sourcePosition.getShiftedBy( operation.howMany );\\n\\n\\tif ( rangeEnd.isEqual( insertPosition ) ) {\\n\\t\\toperation.howMany += 1;\\n\\t}\\n\\n\\treturn defaultTransform( a, b, context );\\n} );\\n\\n// Helper function for `AttributeDelta` class transformations.\\n// Creates an attribute delta that sets attribute from given `attributeDelta` on nodes from given `weakInsertDelta`.\\nfunction _getComplementaryAttrDelta( weakInsertDelta, attributeDelta ) {\\n\\tconst complementaryAttrDelta = new AttributeDelta();\\n\\tconst nodes = weakInsertDelta.nodes;\\n\\n\\t// At the beginning we store the attribute value from the first node on `weakInsertDelta` node list.\\n\\tlet val = nodes.getNode( 0 ).getAttribute( attributeDelta.key );\\n\\n\\t// This stores the last index of `weakInsertDelta` node list where the attribute value was different\\n\\t// than in the previous node. We need it to create separate `AttributeOperation`s for nodes with different attributes.\\n\\tlet lastOffset = 0;\\n\\t// Sum of offsets of already processed nodes.\\n\\tlet offsetSum = nodes.getNode( 0 ).offsetSize;\\n\\n\\tfor ( let i = 1; i < nodes.length; i++ ) {\\n\\t\\tconst node = nodes.getNode( i );\\n\\t\\tconst nodeAttrVal = node.getAttribute( attributeDelta.key );\\n\\n\\t\\t// If previous node has different attribute value, we will create an operation to the point before current node.\\n\\t\\t// So all nodes with the same attributes up to this point will be included in one `AttributeOperation`.\\n\\t\\tif ( nodeAttrVal != val ) {\\n\\t\\t\\t// New operation is created only when it is needed. If given node already has proper value for this\\n\\t\\t\\t// attribute we simply skip it without adding a new operation.\\n\\t\\t\\tif ( val != attributeDelta.value ) {\\n\\t\\t\\t\\taddOperation();\\n\\t\\t\\t}\\n\\n\\t\\t\\tval = nodeAttrVal;\\n\\t\\t\\tlastOffset = offsetSum;\\n\\t\\t}\\n\\n\\t\\toffsetSum = offsetSum + node.offsetSize;\\n\\t}\\n\\n\\t// At the end we have to add additional `AttributeOperation` for the last part of node list. If all nodes on the\\n\\t// node list had same attributes, this will be the only operation added to the delta.\\n\\taddOperation();\\n\\n\\treturn complementaryAttrDelta;\\n\\n\\tfunction addOperation() {\\n\\t\\tconst range = new Range(\\n\\t\\t\\tweakInsertDelta.position.getShiftedBy( lastOffset ),\\n\\t\\t\\tweakInsertDelta.position.getShiftedBy( offsetSum )\\n\\t\\t);\\n\\n\\t\\tconst attrOperation = new AttributeOperation( range, attributeDelta.key, val, attributeDelta.value, 0 );\\n\\t\\tcomplementaryAttrDelta.addOperation( attrOperation );\\n\\t}\\n}\\n\\n// This is \\\"no-op\\\" delta, it has no type and only no-operation, it basically does nothing.\\n// It is used when we don't want to apply changes but still we need to return a delta.\\nfunction noDelta() {\\n\\tconst noDelta = new Delta();\\n\\n\\t// BaseVersion will be fixed later anyway.\\n\\tnoDelta.addOperation( new NoOperation( 0 ) );\\n\\n\\treturn noDelta;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/batch\\n */\\n\\n/**\\n * A batch instance groups model changes ({@link module:engine/model/delta/delta~Delta deltas}). All deltas grouped in a single batch\\n * can be reverted together, so you can think about a batch as of a single undo step. If you want to extend a given undo step, you\\n * can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\\n *\\n *\\t\\tmodel.enqueueChange( batch, writer => {\\n *\\t\\t\\twriter.insertText( 'foo', paragraph, 'end' );\\n *\\t\\t} );\\n *\\n * @see module:engine/model/model~Model#enqueueChange\\n * @see module:engine/model/model~Model#change\\n */\\nexport default class Batch {\\n\\t/**\\n\\t * Creates a batch instance.\\n\\t *\\n\\t * @see module:engine/model/model~Model#enqueueChange\\n\\t * @see module:engine/model/model~Model#change\\n\\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\\n\\t */\\n\\tconstructor( type = 'default' ) {\\n\\t\\t/**\\n\\t\\t * An array of deltas that compose this batch.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @type {Array.<module:engine/model/delta/delta~Delta>}\\n\\t\\t */\\n\\t\\tthis.deltas = [];\\n\\n\\t\\t/**\\n\\t\\t * The type of the batch.\\n\\t\\t *\\n\\t\\t * It can be one of the following values:\\n\\t\\t * * `'default'` &ndash; All \\\"normal\\\" batches. This is the most commonly used type.\\n\\t\\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\\n\\t\\t * changes.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @type {'transparent'|'default'}\\n\\t\\t */\\n\\t\\tthis.type = type;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the base version of this batch, which is equal to the base version of the first delta (which has the base version set)\\n\\t * in the batch. If there are no deltas in the batch or neither delta has the base version set, it returns `null`.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Number|null}\\n\\t */\\n\\tget baseVersion() {\\n\\t\\tfor ( const delta of this.deltas ) {\\n\\t\\t\\tif ( delta.baseVersion !== null ) {\\n\\t\\t\\t\\treturn delta.baseVersion;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Adds a delta to the batch instance. All modification methods (insert, remove, split, etc.) use this method\\n\\t * to add created deltas.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} delta A delta to add.\\n\\t * @return {module:engine/model/delta/delta~Delta} An added delta.\\n\\t */\\n\\taddDelta( delta ) {\\n\\t\\tdelta.batch = this;\\n\\t\\tthis.deltas.push( delta );\\n\\n\\t\\treturn delta;\\n\\t}\\n\\n\\t/**\\n\\t * Gets an iterable collection of operations.\\n\\t *\\n\\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>}\\n\\t */\\n\\t* getOperations() {\\n\\t\\tfor ( const delta of this.deltas ) {\\n\\t\\t\\tyield* delta.operations;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/delta/rootattributedelta\\n */\\n\\nimport Delta from './delta';\\nimport DeltaFactory from './deltafactory';\\n\\n/**\\n * To provide specific OT behavior and better collisions solving, methods to change attributes\\n * ({@link module:engine/model/writer~Writer#setAttribute} and {@link module:engine/model/writer~Writer#removeAttribute})\\n * use `RootAttributeDelta` class which inherits from the `Delta` class and may\\n * overwrite some methods.\\n *\\n * @extends module:engine/model/delta/delta~Delta\\n */\\nexport default class RootAttributeDelta extends Delta {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.delta.RootAttributeDelta';\\n\\t}\\n}\\n\\nDeltaFactory.register( RootAttributeDelta );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/operation/detachoperation\\n */\\n\\nimport Operation from './operation';\\nimport Position from '../position';\\nimport Range from '../range';\\nimport { _remove } from './utils';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * Operation to permanently remove node from detached root.\\n * Note this operation is only a local operation and won't be send to the other clients.\\n *\\n * @extends module:engine/model/operation/operation~Operation\\n */\\nexport default class DetachOperation extends Operation {\\n\\t/**\\n\\t * Creates an insert operation.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} sourcePosition\\n\\t * Position before the first {@link module:engine/model/item~Item model item} to move.\\n\\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\\n\\t * `sourcePosition` with offset shifted by `howMany`.\\n\\t */\\n\\tconstructor( sourcePosition, howMany ) {\\n\\t\\tsuper( null );\\n\\n\\t\\t/**\\n\\t\\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~Position} #sourcePosition\\n\\t\\t */\\n\\t\\tthis.sourcePosition = Position.createFromPosition( sourcePosition );\\n\\n\\t\\t/**\\n\\t\\t * Offset size of moved range.\\n\\t\\t *\\n\\t\\t * @member {Number} #howMany\\n\\t\\t */\\n\\t\\tthis.howMany = howMany;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget type() {\\n\\t\\treturn 'detach';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_validate() {\\n\\t\\tif ( this.sourcePosition.root.document ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot detach document node.\\n\\t\\t\\t * Use {@link module:engine/model/operation/removeoperation~RemoveOperation remove operation} instead.\\n\\t\\t\\t *\\n\\t\\t\\t * @error detach-operation-on-document-node\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\t_execute() {\\n\\t\\t_remove( Range.createFromPositionAndShift( this.sourcePosition, this.howMany ) );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get className() {\\n\\t\\treturn 'engine.model.operation.DetachOperation';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/rootelement\\n */\\n\\nimport Element from './element';\\n\\n/**\\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\\n * @extends module:engine/model/element~Element\\n */\\nexport default class RootElement extends Element {\\n\\t/**\\n\\t * Creates root element.\\n\\t *\\n\\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\\n\\t * @param {String} name Node name.\\n\\t * @param {String} [rootName='main'] Unique root name used to identify this root\\n\\t * element by {@link module:engine/model/document~Document}.\\n\\t */\\n\\tconstructor( doc, name, rootName = 'main' ) {\\n\\t\\tsuper( name );\\n\\n\\t\\t/**\\n\\t\\t * Document that is an owner of this root.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/document~Document}\\n\\t\\t */\\n\\t\\tthis._doc = doc;\\n\\n\\t\\t/**\\n\\t\\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.rootName = rootName;\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:engine/model/document~Document Document} that owns this root element.\\n\\t *\\n\\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\\n\\t *\\n\\t * @readonly\\n\\t * @type {module:engine/model/document~Document|null}\\n\\t */\\n\\tget document() {\\n\\t\\treturn this._doc;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tis( type, name ) {\\n\\t\\tif ( !name ) {\\n\\t\\t\\treturn type == 'rootElement' || super.is( type );\\n\\t\\t} else {\\n\\t\\t\\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Converts `RootElement` instance to `String` containing it's name.\\n\\t *\\n\\t * @returns {String} `RootElement` instance converted to `String`.\\n\\t */\\n\\ttoJSON() {\\n\\t\\treturn this.rootName;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/writer\\n */\\n\\nimport AttributeDelta from './delta/attributedelta';\\nimport InsertDelta from './delta/insertdelta';\\nimport MarkerDelta from './delta/markerdelta';\\nimport MergeDelta from './delta/mergedelta';\\nimport MoveDelta from './delta/movedelta';\\nimport RemoveDelta from './delta/removedelta';\\nimport RenameDelta from './delta/renamedelta';\\nimport RootAttributeDelta from './delta/rootattributedelta';\\nimport SplitDelta from './delta/splitdelta';\\nimport UnwrapDelta from './delta/unwrapdelta';\\nimport WeakInsertDelta from './delta/weakinsertdelta';\\nimport WrapDelta from './delta/wrapdelta';\\n\\nimport AttributeOperation from './operation/attributeoperation';\\nimport DetachOperation from './operation/detachoperation';\\nimport InsertOperation from './operation/insertoperation';\\nimport MarkerOperation from './operation/markeroperation';\\nimport MoveOperation from './operation/moveoperation';\\nimport RemoveOperation from './operation/removeoperation';\\nimport RenameOperation from './operation/renameoperation';\\nimport RootAttributeOperation from './operation/rootattributeoperation';\\n\\nimport DocumentFragment from './documentfragment';\\nimport Text from './text';\\nimport Element from './element';\\nimport RootElement from './rootelement';\\nimport Position from './position';\\nimport Range from './range.js';\\nimport DocumentSelection from './documentselection';\\n\\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\\n\\n/**\\n * Model writer it the proper way of modifying model. It should be used whenever you wants to create node, modify\\n * child nodes, attributes or text. To get writer use {@link module:engine/model/model~Model#change} or\\n * {@link module:engine/model/model~Model#enqueueChange}.\\n *\\n *\\t\\tmodel.change( writer => {\\n *\\t\\t\\twriter.insertText( 'foo', paragraph, 'end' );\\n *\\t\\t} );\\n *\\n * Note that writer can be passed to a nested function but you should never store and use it outside the `change` or\\n * `enqueueChange` block.\\n *\\n * @see module:engine/model/model~Model#change\\n * @see module:engine/model/model~Model#enqueueChange\\n */\\nexport default class Writer {\\n\\t/**\\n\\t * Writer class constructor.\\n\\t *\\n\\t * It is not recommended to use it directly, use {@link module:engine/model/model~Model#change} or\\n\\t * {@link module:engine/model/model~Model#enqueueChange} instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/model~Model} model\\n\\t * @param {module:engine/model/batch~Batch} batch\\n\\t */\\n\\tconstructor( model, batch ) {\\n\\t\\t/**\\n\\t\\t * @readonly\\n\\t\\t * @type {module:engine/model/model~Model}\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * @readonly\\n\\t\\t * @type {module:engine/model/batch~Batch}\\n\\t\\t */\\n\\t\\tthis.batch = batch;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new {@link module:engine/model/text~Text text node}.\\n\\t *\\n\\t *\\t\\twriter.createText( 'foo' );\\n\\t *\\t\\twriter.createText( 'foo', { 'bold': true } );\\n\\t *\\n\\t * @param {String} data Text data.\\n\\t * @param {Object} [attributes] Text attributes.\\n\\t * @returns {module:engine/model/text~Text} Created text node.\\n\\t */\\n\\tcreateText( data, attributes ) {\\n\\t\\treturn new Text( data, attributes );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new {@link module:engine/model/element~Element element}.\\n\\t *\\n\\t *\\t\\twriter.createElement( 'paragraph' );\\n\\t *\\t\\twriter.createElement( 'paragraph', { 'alignment': 'center' } );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @returns {module:engine/model/element~Element} Created element.\\n\\t */\\n\\tcreateElement( name, attributes ) {\\n\\t\\treturn new Element( name, attributes );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\\n\\t *\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\\n\\t */\\n\\tcreateDocumentFragment() {\\n\\t\\treturn new DocumentFragment();\\n\\t}\\n\\n\\t/**\\n\\t * Inserts item on given position.\\n\\t *\\n\\t *\\t\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\t *\\t\\twriter.insert( paragraph, position );\\n\\t *\\n\\t * Instead of using position you can use parent and offset:\\n\\t *\\n\\t * \\t\\tconst text = writer.createText( 'foo' );\\n\\t *\\t\\twriter.insert( text, paragraph, 5 );\\n\\t *\\n\\t * You can also use `end` instead of the offset to insert at the end:\\n\\t *\\n\\t * \\t\\tconst text = writer.createText( 'foo' );\\n\\t *\\t\\twriter.insert( text, paragraph, 'end' );\\n\\t *\\n\\t * Or insert before or after another element:\\n\\t *\\n\\t * \\t\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\t *\\t\\twriter.insert( paragraph, anotherParagraph, 'after' );\\n\\t *\\n\\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\\n\\t *\\n\\t * Note that if the item already has parent it will be removed from the previous parent.\\n\\t *\\n\\t * Note that you cannot re-insert a node from a document to a different document or document fragment. In this case,\\n\\t * `model-writer-insert-forbidden-move` is thrown.\\n\\t *\\n\\t * If you want to move {@link module:engine/model/range~Range range} instead of an\\n\\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move move}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\\n\\t * fragment to insert.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * second parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tinsert( item, itemOrPosition, offset ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tconst position = Position.createAt( itemOrPosition, offset );\\n\\n\\t\\t// For text that has no parent we need to make a WeakInsert.\\n\\t\\tconst delta = item instanceof Text && !item.parent ? new WeakInsertDelta() : new InsertDelta();\\n\\n\\t\\t// If item has a parent already.\\n\\t\\tif ( item.parent ) {\\n\\t\\t\\t// We need to check if item is going to be inserted within the same document.\\n\\t\\t\\tif ( isSameTree( item.root, position.root ) ) {\\n\\t\\t\\t\\t// If it's we just need to move it.\\n\\t\\t\\t\\tthis.move( Range.createOn( item ), position );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t// If it isn't the same root.\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif ( item.root.document ) {\\n\\t\\t\\t\\t\\t// It is forbidden to move a node that was already in a document outside of it.\\n\\t\\t\\t\\t\\tthrow new Error( 'model-writer-insert-forbidden-move: Cannot move a node from a document to a different tree.' );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Move between two different document fragments or from document fragment to a document is possible.\\n\\t\\t\\t\\t\\t// In that case, remove the item from it's original parent.\\n\\t\\t\\t\\t\\tthis.remove( item );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst version = position.root.document ? position.root.document.version : null;\\n\\n\\t\\tconst insert = new InsertOperation( position, item, version );\\n\\n\\t\\tthis.batch.addDelta( delta );\\n\\t\\tdelta.addOperation( insert );\\n\\t\\tthis.model.applyOperation( insert );\\n\\n\\t\\t// When element is a DocumentFragment we need to move its markers to Document#markers.\\n\\t\\tif ( item instanceof DocumentFragment ) {\\n\\t\\t\\tfor ( const [ markerName, markerRange ] of item.markers ) {\\n\\t\\t\\t\\t// We need to migrate marker range from DocumentFragment to Document.\\n\\t\\t\\t\\tconst rangeRootPosition = Position.createAt( markerRange.root );\\n\\t\\t\\t\\tconst range = new Range(\\n\\t\\t\\t\\t\\tmarkerRange.start._getCombined( rangeRootPosition, position ),\\n\\t\\t\\t\\t\\tmarkerRange.end._getCombined( rangeRootPosition, position )\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tthis.setMarker( markerName, range, { usingOperation: true } );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates and inserts text on given position. You can optionally set text attributes:\\n\\t *\\n\\t *\\t\\twriter.insertText( 'foo', position );\\n\\t *\\t\\twriter.insertText( 'foo', { 'bold': true }, position );\\n\\t *\\n\\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\\n\\t * or before or after other node:\\n\\t *\\n\\t * \\t\\twriter.insertText( 'foo', paragraph, 5 ); // inserts in paragraph, at offset 5\\n\\t *\\t\\twriter.insertText( 'foo', paragraph, 'end' ); // inserts at the end of the paragraph\\n\\t *\\t\\twriter.insertText( 'foo', image, 'after' ); // inserts after image\\n\\t *\\n\\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\\n\\t *\\n\\t * @param {String} data Text data.\\n\\t * @param {Object} [attributes] Text attributes.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * third parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tinsertText( text, attributes, itemOrPosition, offset ) {\\n\\t\\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\\n\\t\\t\\tthis.insert( this.createText( text ), attributes, itemOrPosition );\\n\\t\\t} else {\\n\\t\\t\\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates and inserts element on given position. You can optionally set attributes:\\n\\t *\\n\\t *\\t\\twriter.insertElement( 'paragraph', position );\\n\\t *\\t\\twriter.insertElement( 'paragraph', { 'alignment': 'center' }, position );\\n\\t *\\n\\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\\n\\t * or before or after other node:\\n\\t *\\n\\t * \\t\\twriter.insertElement( 'paragraph', paragraph, 5 ); // inserts in paragraph, at offset 5\\n\\t *\\t\\twriter.insertElement( 'paragraph', blockquote, 'end' ); // insets at the end of the blockquote\\n\\t *\\t\\twriter.insertElement( 'paragraph', image, 'after' ); // inserts after image\\n\\t *\\n\\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * third parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tinsertElement( name, attributes, itemOrPosition, offset ) {\\n\\t\\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\\n\\t\\t\\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\\n\\t\\t} else {\\n\\t\\t\\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Inserts item at the end of the given parent.\\n\\t *\\n\\t *\\t\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\t *\\t\\twriter.append( paragraph, root );\\n\\t *\\n\\t * Note that if the item already has parent it will be removed from the previous parent.\\n\\t *\\n\\t * If you want to move {@link module:engine/model/range~Range range} instead of an\\n\\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move move}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\\n\\t * item Item or document fragment to insert.\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\\n\\t */\\n\\tappend( item, parent ) {\\n\\t\\tthis.insert( item, parent, 'end' );\\n\\t}\\n\\n\\t/**\\n\\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\\n\\t *\\n\\t *\\t\\twriter.appendText( 'foo', paragraph );\\n\\t *\\t\\twriter.appendText( 'foo', { 'bold': true }, paragraph );\\n\\t *\\n\\t * @param {String} text Text data.\\n\\t * @param {Object} [attributes] Text attributes.\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\\n\\t */\\n\\tappendText( text, attributes, parent ) {\\n\\t\\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\\n\\t\\t\\tthis.insert( this.createText( text ), attributes, 'end' );\\n\\t\\t} else {\\n\\t\\t\\tthis.insert( this.createText( text, attributes ), parent, 'end' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\\n\\t *\\n\\t *\\t\\twriter.appendElement( 'paragraph', root );\\n\\t *\\t\\twriter.appendElement( 'paragraph', { 'alignment': 'center' }, root );\\n\\t *\\n\\t * @param {String} name Name of the element.\\n\\t * @param {Object} [attributes] Elements attributes.\\n\\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\\n\\t */\\n\\tappendElement( name, attributes, parent ) {\\n\\t\\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\\n\\t\\t\\tthis.insert( this.createElement( name ), attributes, 'end' );\\n\\t\\t} else {\\n\\t\\t\\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets the text content for the specified `textNode`.\\n\\t *\\n\\t * @param {String} value New value.\\n\\t * @param {module:engine/model/text~Text} textNode Text node that will be updated.\\n\\t */\\n\\tsetTextData( value, textNode ) {\\n\\t\\ttextNode._data = value;\\n\\t}\\n\\n\\t/**\\n\\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\\n\\t * or on a {@link module:engine/model/range~Range range}.\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @param {*} value Attribute new value.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\\n\\t * Model item or range on which the attribute will be set.\\n\\t */\\n\\tsetAttribute( key, value, itemOrRange ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( itemOrRange instanceof Range ) {\\n\\t\\t\\tsetAttributeOnRange( this, key, value, itemOrRange );\\n\\t\\t} else {\\n\\t\\t\\tsetAttributeOnItem( this, key, value, itemOrRange );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\\n\\t * or on a {@link module:engine/model/range~Range range}.\\n\\t *\\n\\t *\\t\\twriter.setAttributes( {\\n\\t *\\t\\t\\t'bold': true,\\n\\t *\\t\\t\\t'italic': true\\n\\t *\\t\\t}, range );\\n\\t *\\n\\t * @param {Object} attributes Attributes keys and values.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\\n\\t * Model item or range on which the attributes will be set.\\n\\t */\\n\\tsetAttributes( attributes, itemOrRange ) {\\n\\t\\tfor ( const [ key, val ] of toMap( attributes ) ) {\\n\\t\\t\\tthis.setAttribute( key, val, itemOrRange );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\\n\\t * or from a {@link module:engine/model/range~Range range}.\\n\\t *\\n\\t * @param {String} key Attribute key.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\\n\\t * Model item or range from which the attribute will be removed.\\n\\t */\\n\\tremoveAttribute( key, itemOrRange ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( itemOrRange instanceof Range ) {\\n\\t\\t\\tsetAttributeOnRange( this, key, null, itemOrRange );\\n\\t\\t} else {\\n\\t\\t\\tsetAttributeOnItem( this, key, null, itemOrRange );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes all attributes from all elements in the range or from the given item.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\\n\\t * Model item or range from which all attributes will be removed.\\n\\t */\\n\\tclearAttributes( itemOrRange ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tconst removeAttributesFromItem = item => {\\n\\t\\t\\tfor ( const attribute of item.getAttributeKeys() ) {\\n\\t\\t\\t\\tthis.removeAttribute( attribute, item );\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tif ( !( itemOrRange instanceof Range ) ) {\\n\\t\\t\\tremoveAttributesFromItem( itemOrRange );\\n\\t\\t} else {\\n\\t\\t\\tfor ( const item of itemOrRange.getItems() ) {\\n\\t\\t\\t\\tremoveAttributesFromItem( item );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Moves all items in the source range to the target position.\\n\\t *\\n\\t *\\t\\twriter.move( sourceRange, targetPosition );\\n\\t *\\n\\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\\n\\t * or before or after chosen item:\\n\\t *\\n\\t * \\t\\twriter.move( sourceRange, paragraph, 5 ); // moves all items in the range to the paragraph at offset 5\\n\\t *\\t\\twriter.move( sourceRange, blockquote, 'end' ); // moves all items in the range at the end of the blockquote\\n\\t *\\t\\twriter.move( sourceRange, image, 'after' ); // moves all items in the range after the image\\n\\t *\\n\\t * These parameters works the same way as {@link module:engine/model/position~Position.createAt}.\\n\\t *\\n\\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\\n\\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\\n\\t * but you can not move items from document fragment to the document or from one detached element to another. Use\\n\\t * {@link module:engine/model/writer~Writer#insert} in such cases.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} range Source range.\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * second parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tmove( range, itemOrPosition, offset ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( !( range instanceof Range ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Invalid range to move.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-move-invalid-range\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.' );\\n\\t\\t}\\n\\n\\t\\tif ( !range.isFlat ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Range to move is not flat.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-move-range-not-flat\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.' );\\n\\t\\t}\\n\\n\\t\\tconst position = Position.createAt( itemOrPosition, offset );\\n\\n\\t\\tif ( !isSameTree( range.root, position.root ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Range is going to be moved within not the same document. Please use\\n\\t\\t\\t * {@link module:engine/model/writer~Writer#insert insert} instead.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-move-different-document\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.' );\\n\\t\\t}\\n\\n\\t\\tconst delta = new MoveDelta();\\n\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\tconst version = range.root.document ? range.root.document.version : null;\\n\\n\\t\\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\\n\\t\\tdelta.addOperation( operation );\\n\\t\\tthis.model.applyOperation( operation );\\n\\t}\\n\\n\\t/**\\n\\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\\n\\t */\\n\\tremove( itemOrRange ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tconst addRemoveDelta = ( position, howMany ) => {\\n\\t\\t\\tconst delta = new RemoveDelta();\\n\\t\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\t\\tapplyRemoveOperation( position, howMany, delta, this.model );\\n\\t\\t};\\n\\n\\t\\tif ( itemOrRange instanceof Range ) {\\n\\t\\t\\t// The array is reversed, so the ranges to remove are in correct order and do not have to be updated.\\n\\t\\t\\tconst ranges = itemOrRange.getMinimalFlatRanges().reverse();\\n\\n\\t\\t\\tfor ( const flat of ranges ) {\\n\\t\\t\\t\\taddRemoveDelta( flat.start, flat.end.offset - flat.start.offset );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tconst howMany = itemOrRange.is( 'text' ) ? itemOrRange.offsetSize : 1;\\n\\n\\t\\t\\taddRemoveDelta( Position.createBefore( itemOrRange ), howMany );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Merges two siblings at the given position.\\n\\t *\\n\\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\\n\\t * `writer-merge-no-element-after` error will be thrown.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position of merge.\\n\\t */\\n\\tmerge( position ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tconst delta = new MergeDelta();\\n\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\tconst nodeBefore = position.nodeBefore;\\n\\t\\tconst nodeAfter = position.nodeAfter;\\n\\n\\t\\tif ( !( nodeBefore instanceof Element ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Node before merge position must be an element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-merge-no-element-before\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.' );\\n\\t\\t}\\n\\n\\t\\tif ( !( nodeAfter instanceof Element ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Node after merge position must be an element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-merge-no-element-after\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.' );\\n\\t\\t}\\n\\n\\t\\tconst positionAfter = Position.createFromParentAndOffset( nodeAfter, 0 );\\n\\t\\tconst positionBefore = Position.createFromParentAndOffset( nodeBefore, nodeBefore.maxOffset );\\n\\n\\t\\tconst moveVersion = position.root.document ? position.root.document.version : null;\\n\\n\\t\\tconst move = new MoveOperation(\\n\\t\\t\\tpositionAfter,\\n\\t\\t\\tnodeAfter.maxOffset,\\n\\t\\t\\tpositionBefore,\\n\\t\\t\\tmoveVersion\\n\\t\\t);\\n\\n\\t\\tmove.isSticky = true;\\n\\t\\tdelta.addOperation( move );\\n\\t\\tthis.model.applyOperation( move );\\n\\n\\t\\tapplyRemoveOperation( position, 1, delta, this.model );\\n\\t}\\n\\n\\t/**\\n\\t * Renames given element.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} element The element to rename.\\n\\t * @param {String} newName New element name.\\n\\t */\\n\\trename( element, newName ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( !( element instanceof Element ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to rename an object which is not an instance of Element.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-rename-not-element-instance\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst delta = new RenameDelta();\\n\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\tconst version = element.root.document ? element.root.document.version : null;\\n\\n\\t\\tconst renameOperation = new RenameOperation( Position.createBefore( element ), element.name, newName, version );\\n\\t\\tdelta.addOperation( renameOperation );\\n\\t\\tthis.model.applyOperation( renameOperation );\\n\\t}\\n\\n\\t/**\\n\\t * Splits elements start from the given position and goes to the top of the model tree as long as given\\n\\t * `limitElement` won't be reached. When limitElement is not defined then only a parent of given position will be split.\\n\\t *\\n\\t * The element needs to have a parent. It cannot be a root element nor document fragment.\\n\\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position Position of split.\\n\\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\\n\\t * @returns {Object} result Split result.\\n\\t * @returns {module:engine/model/position~Position} result.position between split elements.\\n\\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ands\\n\\t * at the beginning of the first copy element.\\n\\t */\\n\\tsplit( position, limitElement ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tlet splitElement = position.parent;\\n\\n\\t\\tif ( !splitElement.parent ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Element with no parent can not be split.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-split-element-no-parent\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.' );\\n\\t\\t}\\n\\n\\t\\t// When limit element is not defined lets set splitElement parent as limit.\\n\\t\\tif ( !limitElement ) {\\n\\t\\t\\tlimitElement = splitElement.parent;\\n\\t\\t}\\n\\n\\t\\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\\n\\t\\t\\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.' );\\n\\t\\t}\\n\\n\\t\\t// We need to cache elements that will be created as a result of the first split because\\n\\t\\t// we need to create a range from the end of the first split element to the beginning of the\\n\\t\\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\\n\\t\\tlet firstSplitElement, firstCopyElement;\\n\\n\\t\\tdo {\\n\\t\\t\\tconst delta = new SplitDelta();\\n\\t\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\t\\tconst copy = new Element( splitElement.name, splitElement.getAttributes() );\\n\\t\\t\\tconst insertVersion = splitElement.root.document ? splitElement.root.document.version : null;\\n\\n\\t\\t\\tconst insert = new InsertOperation(\\n\\t\\t\\t\\tPosition.createAfter( splitElement ),\\n\\t\\t\\t\\tcopy,\\n\\t\\t\\t\\tinsertVersion\\n\\t\\t\\t);\\n\\n\\t\\t\\tdelta.addOperation( insert );\\n\\t\\t\\tthis.model.applyOperation( insert );\\n\\n\\t\\t\\tconst moveVersion = insertVersion !== null ? insertVersion + 1 : null;\\n\\n\\t\\t\\tconst move = new MoveOperation(\\n\\t\\t\\t\\tposition,\\n\\t\\t\\t\\tsplitElement.maxOffset - position.offset,\\n\\t\\t\\t\\tPosition.createFromParentAndOffset( copy, 0 ),\\n\\t\\t\\t\\tmoveVersion\\n\\t\\t\\t);\\n\\t\\t\\tmove.isSticky = true;\\n\\n\\t\\t\\tdelta.addOperation( move );\\n\\t\\t\\tthis.model.applyOperation( move );\\n\\n\\t\\t\\t// Cache result of the first split.\\n\\t\\t\\tif ( !firstSplitElement && !firstCopyElement ) {\\n\\t\\t\\t\\tfirstSplitElement = splitElement;\\n\\t\\t\\t\\tfirstCopyElement = copy;\\n\\t\\t\\t}\\n\\n\\t\\t\\tposition = Position.createBefore( copy );\\n\\t\\t\\tsplitElement = position.parent;\\n\\t\\t} while ( splitElement !== limitElement );\\n\\n\\t\\treturn {\\n\\t\\t\\tposition,\\n\\t\\t\\trange: new Range( Position.createAt( firstSplitElement, 'end' ), Position.createAt( firstCopyElement ) )\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Wraps given range with given element or with a new element with specified name, if string has been passed.\\n\\t *\\n\\t * **Note:** range to wrap should be a \\\"flat range\\\" (see {@link module:engine/model/range~Range#isFlat}). If not, error will be thrown.\\n\\t *\\n\\t * @param {module:engine/model/range~Range} range Range to wrap.\\n\\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\\n\\t */\\n\\twrap( range, elementOrString ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( !range.isFlat ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Range to wrap is not flat.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-wrap-range-not-flat\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.' );\\n\\t\\t}\\n\\n\\t\\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\\n\\n\\t\\tif ( element.childCount > 0 ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Element to wrap with is not empty.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-wrap-element-not-empty\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.' );\\n\\t\\t}\\n\\n\\t\\tif ( element.parent !== null ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Element to wrap with is already attached to a tree model.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-wrap-element-attached\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.' );\\n\\t\\t}\\n\\n\\t\\tconst delta = new WrapDelta();\\n\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\tconst insertVersion = range.root.document ? range.root.document.version : null;\\n\\n\\t\\tconst insert = new InsertOperation( range.end, element, insertVersion );\\n\\t\\tdelta.addOperation( insert );\\n\\t\\tthis.model.applyOperation( insert );\\n\\n\\t\\tconst moveVersion = insertVersion !== null ? insertVersion + 1 : null;\\n\\n\\t\\tconst targetPosition = Position.createFromParentAndOffset( element, 0 );\\n\\t\\tconst move = new MoveOperation(\\n\\t\\t\\trange.start,\\n\\t\\t\\trange.end.offset - range.start.offset,\\n\\t\\t\\ttargetPosition,\\n\\t\\t\\tmoveVersion\\n\\t\\t);\\n\\t\\tdelta.addOperation( move );\\n\\t\\tthis.model.applyOperation( move );\\n\\t}\\n\\n\\t/**\\n\\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\\n\\t * Throws error if you try to unwrap an element which does not have a parent.\\n\\t *\\n\\t * @param {module:engine/model/element~Element} element Element to unwrap.\\n\\t */\\n\\tunwrap( element ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( element.parent === null ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to unwrap an element which has no parent.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-unwrap-element-no-parent\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.' );\\n\\t\\t}\\n\\n\\t\\tconst delta = new UnwrapDelta();\\n\\t\\tthis.batch.addDelta( delta );\\n\\n\\t\\tconst sourcePosition = Position.createFromParentAndOffset( element, 0 );\\n\\t\\tconst moveVersion = sourcePosition.root.document ? sourcePosition.root.document.version : null;\\n\\n\\t\\tconst move = new MoveOperation(\\n\\t\\t\\tsourcePosition,\\n\\t\\t\\telement.maxOffset,\\n\\t\\t\\tPosition.createBefore( element ),\\n\\t\\t\\tmoveVersion\\n\\t\\t);\\n\\n\\t\\tmove.isSticky = true;\\n\\t\\tdelta.addOperation( move );\\n\\t\\tthis.model.applyOperation( move );\\n\\n\\t\\tapplyRemoveOperation( Position.createBefore( element ), 1, delta, this.model );\\n\\t}\\n\\n\\t/**\\n\\t * Adds or updates a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\\n\\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\\n\\t * marker's range directly using this method.\\n\\t *\\n\\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\\n\\t * name is created and returned.\\n\\t *\\n\\t * The `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\\n\\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\\n\\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\\n\\t * This is useful when a marker have been created earlier and then later, it needs to be added to the document history.\\n\\t *\\n\\t * Create/update marker directly base on marker's name:\\n\\t *\\n\\t * \\t\\tsetMarker( markerName, range );\\n\\t *\\n\\t * Update marker using operation:\\n\\t *\\n\\t * \\t\\tsetMarker( marker, range, { usingOperation: true } );\\n\\t * \\t\\tsetMarker( markerName, range, { usingOperation: true } );\\n\\t *\\n\\t * Create marker with a unique id using operation:\\n\\t *\\n\\t * \\t\\tsetMarker( range, { usingOperation: true } );\\n\\t *\\n\\t * Create marker directly without using operations:\\n\\t *\\n\\t * \\t\\tsetMarker( range )\\n\\t *\\n\\t * Change marker's option (start using operations to manage it):\\n\\t *\\n\\t * \\t\\tsetMarker( marker, { usingOperation: true } );\\n\\t *\\n\\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\\n\\t *\\n\\t * @see module:engine/model/markercollection~Marker\\n\\t * @param {module:engine/model/markercollection~Marker|String} [markerOrName]\\n\\t * Name of a marker to create or update, or `Marker` instance to update, or range for the marker with a unique name.\\n\\t * @param {module:engine/model/range~Range} [range] Marker range.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.usingOperation=false] Flag indicated whether the marker should be added by MarkerOperation.\\n\\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\\n\\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\\n\\t */\\n\\tsetMarker( markerOrNameOrRange, rangeOrOptions, options ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tlet markerName, newRange, usingOperation;\\n\\n\\t\\tif ( markerOrNameOrRange instanceof Range ) {\\n\\t\\t\\tmarkerName = uid();\\n\\t\\t\\tnewRange = markerOrNameOrRange;\\n\\t\\t\\tusingOperation = !!rangeOrOptions && !!rangeOrOptions.usingOperation;\\n\\t\\t} else {\\n\\t\\t\\tmarkerName = typeof markerOrNameOrRange === 'string' ? markerOrNameOrRange : markerOrNameOrRange.name;\\n\\n\\t\\t\\tif ( rangeOrOptions instanceof Range ) {\\n\\t\\t\\t\\tnewRange = rangeOrOptions;\\n\\t\\t\\t\\tusingOperation = !!options && !!options.usingOperation;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnewRange = null;\\n\\t\\t\\t\\tusingOperation = !!rangeOrOptions && !!rangeOrOptions.usingOperation;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst currentMarker = this.model.markers.get( markerName );\\n\\n\\t\\tif ( !usingOperation ) {\\n\\t\\t\\tif ( !newRange ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t \\t * Range parameter is required when adding a new marker.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error writer-setMarker-no-range\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError( 'writer-setMarker-no-range: Range parameter is required when adding a new marker.' );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If marker changes to marker that do not use operations then we need to create additional operation\\n\\t\\t\\t// that removes that marker first.\\n\\t\\t\\tif ( currentMarker && currentMarker.managedUsingOperations && !usingOperation ) {\\n\\t\\t\\t\\tapplyMarkerOperation( this, markerName, currentMarker.getRange(), null );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.model.markers._set( markerName, newRange, usingOperation );\\n\\t\\t}\\n\\n\\t\\tif ( !newRange && !currentMarker ) {\\n\\t\\t\\tthrow new CKEditorError( 'writer-setMarker-no-range: Range parameter is required when adding a new marker.' );\\n\\t\\t}\\n\\n\\t\\tconst currentRange = currentMarker ? currentMarker.getRange() : null;\\n\\n\\t\\tif ( !newRange ) {\\n\\t\\t\\t// If `newRange` is not given, treat this as synchronizing existing marker.\\n\\t\\t\\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\\n\\t\\t\\tapplyMarkerOperation( this, markerName, null, currentRange );\\n\\t\\t} else {\\n\\t\\t\\t// Just change marker range.\\n\\t\\t\\tapplyMarkerOperation( this, markerName, currentRange, newRange );\\n\\t\\t}\\n\\n\\t\\treturn this.model.markers.get( markerName );\\n\\t}\\n\\n\\t/**\\n\\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\\n\\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\\n\\t * it will be destroyed using operation.\\n\\t *\\n\\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\\n\\t */\\n\\tremoveMarker( markerOrName ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\\n\\n\\t\\tif ( !this.model.markers.has( name ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to remove marker which does not exist.\\n\\t\\t\\t *\\n\\t\\t\\t * @error writer-removeMarker-no-marker\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.' );\\n\\t\\t}\\n\\n\\t\\tconst marker = this.model.markers.get( name );\\n\\n\\t\\tif ( !marker.managedUsingOperations ) {\\n\\t\\t\\tthis.model.markers._remove( name );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst oldRange = marker.getRange();\\n\\n\\t\\tapplyMarkerOperation( this, name, oldRange, null );\\n\\t}\\n\\n\\t/**\\n\\t * Sets this selection's ranges and direction to the specified location based on the given\\n\\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/node~Node node}, {@link module:engine/model/position~Position position},\\n\\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\\n\\t *\\n\\t *\\t\\t// Sets selection to the given range.\\n\\t *\\t\\tconst range = new Range( start, end );\\n\\t *\\t\\twriter.setSelection( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to given ranges.\\n\\t * \\t\\tconst ranges = [ new Range( start1, end2 ), new Range( star2, end2 ) ];\\n\\t *\\t\\twriter.setSelection( range );\\n\\t *\\n\\t *\\t\\t// Sets selection to other selection.\\n\\t *\\t\\tconst otherSelection = new Selection();\\n\\t *\\t\\twriter.setSelection( otherSelection );\\n\\t *\\n\\t * \\t\\t// Sets selection to the given document selection.\\n\\t *\\t\\tconst documentSelection = new DocumentSelection( doc );\\n\\t *\\t\\twriter.setSelection( documentSelection );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the given position.\\n\\t *\\t\\tconst position = new Position( root, path );\\n\\t *\\t\\twriter.setSelection( position );\\n\\t *\\n\\t * \\t\\t// Sets collapsed selection at the position of the given node and an offset.\\n\\t *\\t\\twriter.setSelection( paragraph, offset );\\n\\t *\\n\\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\\n \\t * that element and ends after the last child of that element.\\n\\t *\\n\\t *\\t\\twriter.setSelection( paragraph, 'in' );\\n\\t *\\n\\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\\n\\t *\\n\\t *\\t\\twriter.setSelection( paragraph, 'on' );\\n\\t *\\n\\t * \\t\\t// Removes all selection's ranges.\\n\\t *\\t\\twriter.setSelection( null );\\n\\t *\\n\\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\\n\\t *\\n\\t * \\t\\t// Sets selection as backward.\\n\\t *\\t\\twriter.setSelection( range, { backward: true } );\\n\\t *\\n\\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\\n\\t *\\n\\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\\n\\t * module:engine/model/position~Position|module:engine/model/node~Node|\\n\\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\\n\\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\\n\\t * @param {Object} [options]\\n\\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\\n\\t */\\n\\tsetSelection( selectable, placeOrOffset, options ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\\n\\t}\\n\\n\\t/**\\n\\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\\n\\t *\\n\\t * The location can be specified in the same form as {@link module:engine/model/position~Position.createAt} parameters.\\n\\t *\\n\\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\\n\\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\\n\\t * first parameter is a {@link module:engine/model/item~Item model item}.\\n\\t */\\n\\tsetSelectionFocus( itemOrPosition, offset ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tthis.model.document.selection._setFocus( itemOrPosition, offset );\\n\\t}\\n\\n\\t/**\\n\\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\\n\\t *\\n\\t * Using key and value pair:\\n\\t *\\n\\t * \\twriter.setSelectionAttribute( 'italic', true );\\n\\t *\\n\\t * Using key-value object:\\n\\t *\\n\\t * \\twriter.setSelectionAttribute( { italic: true, bold: false } );\\n\\t *\\n\\t * Using iterable object:\\n\\t *\\n\\t * \\twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\\n\\t *\\n\\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\\n\\t * or object / iterable of key - value attribute pairs.\\n\\t * @param {*} [value] Attribute value.\\n\\t */\\n\\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( typeof keyOrObjectOrIterable === 'string' ) {\\n\\t\\t\\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\\n\\t\\t} else {\\n\\t\\t\\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\\n\\t\\t\\t\\tthis._setSelectionAttribute( key, value );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes attribute(s) with given key(s) from the selection.\\n\\t *\\n\\t * Using key\\n\\t *\\n\\t * \\twriter.removeSelectionAttribute( 'italic' );\\n\\t *\\n\\t * Using iterable of keys\\n\\t *\\n\\t * \\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\\n\\t *\\n\\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\\n\\t */\\n\\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\\n\\t\\tthis._assertWriterUsedCorrectly();\\n\\n\\t\\tif ( typeof keyOrIterableOfKeys === 'string' ) {\\n\\t\\t\\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\\n\\t\\t} else {\\n\\t\\t\\tfor ( const key of keyOrIterableOfKeys ) {\\n\\t\\t\\t\\tthis._removeSelectionAttribute( key );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\\n\\t * of the selection from left to right.\\n\\t *\\n\\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\\n\\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\\n\\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\\n\\t *\\n\\t * For the following model fragment:\\n\\t *\\n\\t *\\t\\t<$text bold=\\\"true\\\" linkHref=\\\"url\\\">bar[]</$text><$text bold=\\\"true\\\">biz</$text>\\n\\t *\\n\\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\\n\\t * * Overridden gravity: selection will have `bold` attribute.\\n\\t *\\n\\t * By default the selection's gravity is automatically restored just after a direct selection change (when user\\n\\t * moved the caret) but you can pass `customRestore = true` in which case you will have to call\\n\\t * {@link ~Writer#restoreSelectionGravity} manually.\\n\\t *\\n\\t * When the selection's gravity is overridden more than once without being restored in the meantime then it needs\\n\\t * to be restored the same number of times. This is to prevent conflicts when\\n\\t * more than one feature want to independently override and restore the selection's gravity.\\n\\t *\\n\\t * @param {Boolean} [customRestore=false] When `true` then gravity won't be restored until\\n\\t * {@link ~Writer#restoreSelectionGravity} will be called directly. When `false` then gravity is restored\\n\\t * after selection is moved by user.\\n\\t */\\n\\toverrideSelectionGravity( customRestore ) {\\n\\t\\tthis.model.document.selection._overrideGravity( customRestore );\\n\\t}\\n\\n\\t/**\\n\\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\\n\\t *\\n\\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\\n\\t */\\n\\trestoreSelectionGravity() {\\n\\t\\tthis.model.document.selection._restoreGravity();\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {String} key Key of the attribute to remove.\\n\\t * @param {*} value Attribute value.\\n\\t */\\n\\t_setSelectionAttribute( key, value ) {\\n\\t\\tconst selection = this.model.document.selection;\\n\\n\\t\\t// Store attribute in parent element if the selection is collapsed in an empty node.\\n\\t\\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\\n\\t\\t\\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\\n\\n\\t\\t\\tthis.setAttribute( storeKey, value, selection.anchor.parent );\\n\\t\\t}\\n\\n\\t\\tselection._setAttribute( key, value );\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {String} key Key of the attribute to remove.\\n\\t */\\n\\t_removeSelectionAttribute( key ) {\\n\\t\\tconst selection = this.model.document.selection;\\n\\n\\t\\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\\n\\t\\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\\n\\t\\t\\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\\n\\n\\t\\t\\tthis.removeAttribute( storeKey, selection.anchor.parent );\\n\\t\\t}\\n\\n\\t\\tselection._removeAttribute( key );\\n\\t}\\n\\n\\t/**\\n\\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_assertWriterUsedCorrectly() {\\n\\t\\t/**\\n\\t\\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()` or\\n\\t\\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\\n\\t\\t *\\n\\t\\t * The writer can only be used inside these blocks which ensures that the model\\n\\t\\t * can only be changed during such \\\"sessions\\\".\\n\\t\\t *\\n\\t\\t * @error writer-incorrect-use\\n\\t\\t */\\n\\t\\tif ( this.model._currentWriter !== this ) {\\n\\t\\t\\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.' );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\\n//\\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\\n// the range into smaller parts.\\n//\\n// @private\\n// @param {module:engine/model/writer~Writer} writer\\n// @param {String} key Attribute key.\\n// @param {*} value Attribute new value.\\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\\nfunction setAttributeOnRange( writer, key, value, range ) {\\n\\tconst delta = new AttributeDelta();\\n\\tconst model = writer.model;\\n\\tconst doc = model.document;\\n\\n\\t// Position of the last split, the beginning of the new range.\\n\\tlet lastSplitPosition = range.start;\\n\\n\\t// Currently position in the scanning range. Because we need value after the position, it is not a current\\n\\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\\n\\tlet position;\\n\\n\\t// Value before the currently position.\\n\\tlet valueBefore;\\n\\n\\t// Value after the currently position.\\n\\tlet valueAfter;\\n\\n\\tfor ( const val of range ) {\\n\\t\\tvalueAfter = val.item.getAttribute( key );\\n\\n\\t\\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\\n\\t\\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\\n\\t\\tif ( position && valueBefore != valueAfter ) {\\n\\t\\t\\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\\n\\t\\t\\tif ( valueBefore != value ) {\\n\\t\\t\\t\\taddOperation();\\n\\t\\t\\t}\\n\\n\\t\\t\\tlastSplitPosition = position;\\n\\t\\t}\\n\\n\\t\\tposition = val.nextPosition;\\n\\t\\tvalueBefore = valueAfter;\\n\\t}\\n\\n\\t// Because position in the loop is not the iterator position (see let position comment), the last position in\\n\\t// the while loop will be last but one position in the range. We need to check the last position manually.\\n\\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\\n\\t\\taddOperation();\\n\\t}\\n\\n\\tfunction addOperation() {\\n\\t\\t// Add delta to the batch only if there is at least operation in the delta. Add delta only once.\\n\\t\\tif ( delta.operations.length === 0 ) {\\n\\t\\t\\twriter.batch.addDelta( delta );\\n\\t\\t}\\n\\n\\t\\tconst range = new Range( lastSplitPosition, position );\\n\\t\\tconst version = range.root.document ? doc.version : null;\\n\\t\\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\\n\\n\\t\\tdelta.addOperation( operation );\\n\\t\\tmodel.applyOperation( operation );\\n\\t}\\n}\\n\\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\\n//\\n// @private\\n// @param {module:engine/model/writer~Writer} writer\\n// @param {String} key Attribute key.\\n// @param {*} value Attribute new value.\\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\\nfunction setAttributeOnItem( writer, key, value, item ) {\\n\\tconst model = writer.model;\\n\\tconst doc = model.document;\\n\\tconst previousValue = item.getAttribute( key );\\n\\tlet range, operation;\\n\\n\\tif ( previousValue != value ) {\\n\\t\\tconst isRootChanged = item.root === item;\\n\\n\\t\\tconst delta = isRootChanged ? new RootAttributeDelta() : new AttributeDelta();\\n\\t\\twriter.batch.addDelta( delta );\\n\\n\\t\\tif ( isRootChanged ) {\\n\\t\\t\\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\\n\\t\\t\\tconst version = item.document ? doc.version : null;\\n\\n\\t\\t\\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\\n\\t\\t} else {\\n\\t\\t\\tif ( item.is( 'element' ) ) {\\n\\t\\t\\t\\t// If we change the attribute of the element, we do not want to change attributes of its children, so\\n\\t\\t\\t\\t// the end of the range cannot be after the closing tag, it should be inside that element, before any of\\n\\t\\t\\t\\t// it's children, so the range will contain only the opening tag.\\n\\t\\t\\t\\trange = new Range( Position.createBefore( item ), Position.createFromParentAndOffset( item, 0 ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If `item` is text proxy, we create a range from the beginning to the end of that text proxy, to change\\n\\t\\t\\t\\t// all characters represented by it.\\n\\t\\t\\t\\trange = new Range( Position.createBefore( item ), Position.createAfter( item ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst version = range.root.document ? doc.version : null;\\n\\n\\t\\t\\toperation = new AttributeOperation( range, key, previousValue, value, version );\\n\\t\\t}\\n\\n\\t\\tdelta.addOperation( operation );\\n\\t\\tmodel.applyOperation( operation );\\n\\t}\\n}\\n\\n// Creates and applies marker operation to {@link module:engine/model/delta/delta~Delta delta}.\\n//\\n// @private\\n// @param {module:engine/model/writer~Writer} writer\\n// @param {String} name Marker name.\\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\\nfunction applyMarkerOperation( writer, name, oldRange, newRange ) {\\n\\tconst model = writer.model;\\n\\tconst doc = model.document;\\n\\tconst delta = new MarkerDelta();\\n\\n\\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, doc.version );\\n\\n\\twriter.batch.addDelta( delta );\\n\\tdelta.addOperation( operation );\\n\\tmodel.applyOperation( operation );\\n}\\n\\n// Creates `RemoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\\n// The operation will be applied on given model instance and added to given delta instance.\\n//\\n// @private\\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\\n// @param {Number} howMany Number of nodes to remove.\\n// @param {module:engine/model/delta~Delta} delta Delta to add new operation to.\\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\\nfunction applyRemoveOperation( position, howMany, delta, model ) {\\n\\tlet operation;\\n\\n\\tif ( position.root.document ) {\\n\\t\\tconst doc = model.document;\\n\\t\\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\\n\\n\\t\\toperation = new RemoveOperation( position, howMany, graveyardPosition, doc.version );\\n\\t} else {\\n\\t\\toperation = new DetachOperation( position, howMany );\\n\\t}\\n\\n\\tdelta.addOperation( operation );\\n\\tmodel.applyOperation( operation );\\n}\\n\\n// Returns `true` if both root elements are the same element or both are documents root elements.\\n//\\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\\n// unexpected `move` operation.\\nfunction isSameTree( rootA, rootB ) {\\n\\t// If it is the same root this is the same tree.\\n\\tif ( rootA === rootB ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\\n\\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/differ\\n */\\n\\nimport Position from './position';\\nimport Range from './range';\\n\\n/**\\n * Calculates the difference between two model states.\\n *\\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\\n * elements and new ones and returns a change set.\\n */\\nexport default class Differ {\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * A map that stores changes that happened in a given element.\\n\\t\\t *\\n\\t\\t * The keys of the map are references to the model elements.\\n\\t\\t * The values of the map are arrays with changes that were done on this element.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Map}\\n\\t\\t */\\n\\t\\tthis._changesInElement = new Map();\\n\\n\\t\\t/**\\n\\t\\t * A map that stores \\\"element's children snapshots\\\". A snapshot is representing children of a given element before\\n\\t\\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\\n\\t\\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Map}\\n\\t\\t */\\n\\t\\tthis._elementSnapshots = new Map();\\n\\n\\t\\t/**\\n\\t\\t * A map that stores all changed markers.\\n\\t\\t *\\n\\t\\t * The keys of the map are marker names.\\n\\t\\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\\n\\t\\t * state before and after the change.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Map}\\n\\t\\t */\\n\\t\\tthis._changedMarkers = new Map();\\n\\n\\t\\t/**\\n\\t\\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\\n\\t\\t * when changes are sorted.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Number}\\n\\t\\t */\\n\\t\\tthis._changeCount = 0;\\n\\n\\t\\t/**\\n\\t\\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\\n\\t\\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\\n\\t\\t * return the cached value instead of calculating it again.\\n\\t\\t *\\n\\t\\t * This property stores those changes that did not take place in graveyard root.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Array.<Object>|null}\\n\\t\\t */\\n\\t\\tthis._cachedChanges = null;\\n\\n\\t\\t/**\\n\\t\\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\\n\\t\\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\\n\\t\\t * return the cached value instead of calculating it again.\\n\\t\\t *\\n\\t\\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Array.<Object>|null}\\n\\t\\t */\\n\\t\\tthis._cachedChangesWithGraveyard = null;\\n\\t}\\n\\n\\t/**\\n\\t * Informs whether there are any changes buffered in `Differ`.\\n\\t *\\n\\t * @readonly\\n\\t * @type {Boolean}\\n\\t */\\n\\tget isEmpty() {\\n\\t\\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\\n\\t}\\n\\n\\t/**\\n\\t * Buffers a given operation. An operation has to be buffered before it is executed.\\n\\t *\\n\\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\\n\\t * in the state before the operation is executed.\\n\\t *\\n\\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\\n\\t */\\n\\tbufferOperation( operation ) {\\n\\t\\tswitch ( operation.type ) {\\n\\t\\t\\tcase 'insert': {\\n\\t\\t\\t\\tif ( this._isInInsertedElement( operation.position.parent ) ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcase 'addAttribute':\\n\\t\\t\\tcase 'removeAttribute':\\n\\t\\t\\tcase 'changeAttribute': {\\n\\t\\t\\t\\tfor ( const item of operation.range.getItems() ) {\\n\\t\\t\\t\\t\\tif ( this._isInInsertedElement( item.parent ) ) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tthis._markAttribute( item );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcase 'remove':\\n\\t\\t\\tcase 'move':\\n\\t\\t\\tcase 'reinsert': {\\n\\t\\t\\t\\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\\n\\t\\t\\t\\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\\n\\n\\t\\t\\t\\tif ( !sourceParentInserted ) {\\n\\t\\t\\t\\t\\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( !targetParentInserted ) {\\n\\t\\t\\t\\t\\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tcase 'rename': {\\n\\t\\t\\t\\tif ( this._isInInsertedElement( operation.position.parent ) ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\\n\\t\\t\\t\\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Clear cache after each buffered operation as it is no longer valid.\\n\\t\\tthis._cachedChanges = null;\\n\\t}\\n\\n\\t/**\\n\\t * Buffers marker change.\\n\\t *\\n\\t * @param {String} markerName The name of the marker that changed.\\n\\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\\n\\t * been created.\\n\\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\\n\\t */\\n\\tbufferMarkerChange( markerName, oldRange, newRange ) {\\n\\t\\tconst buffered = this._changedMarkers.get( markerName );\\n\\n\\t\\tif ( !buffered ) {\\n\\t\\t\\tthis._changedMarkers.set( markerName, {\\n\\t\\t\\t\\toldRange,\\n\\t\\t\\t\\tnewRange\\n\\t\\t\\t} );\\n\\t\\t} else {\\n\\t\\t\\tbuffered.newRange = newRange;\\n\\n\\t\\t\\tif ( buffered.oldRange == null && buffered.newRange == null ) {\\n\\t\\t\\t\\t// The marker is going to be removed (`newRange == null`) but it did not exist before the change set\\n\\t\\t\\t\\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\\n\\t\\t\\t\\tthis._changedMarkers.delete( markerName );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns all markers that should be removed as a result of buffered changes.\\n\\t *\\n\\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\\n\\t */\\n\\tgetMarkersToRemove() {\\n\\t\\tconst result = [];\\n\\n\\t\\tfor ( const [ name, change ] of this._changedMarkers ) {\\n\\t\\t\\tif ( change.oldRange != null ) {\\n\\t\\t\\t\\tresult.push( { name, range: change.oldRange } );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * Returns all markers which should be added as a result of buffered changes.\\n\\t *\\n\\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\\n\\t */\\n\\tgetMarkersToAdd() {\\n\\t\\tconst result = [];\\n\\n\\t\\tfor ( const [ name, change ] of this._changedMarkers ) {\\n\\t\\t\\tif ( change.newRange != null ) {\\n\\t\\t\\t\\tresult.push( { name, range: change.newRange } );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\\n\\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\\n\\t *\\n\\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\\n\\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\\n\\t * another one, it will be on an earlier index in the diff set.\\n\\t *\\n\\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\\n\\t * previous {@link #getChanges} call, the next call will return the cached value.\\n\\t *\\n\\t * @param {Object} options Additional options.\\n\\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\\n\\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\\n\\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\\n\\t */\\n\\tgetChanges( options = { includeChangesInGraveyard: false } ) {\\n\\t\\t// If there are cached changes, just return them instead of calculating changes again.\\n\\t\\tif ( this._cachedChanges ) {\\n\\t\\t\\tif ( options.includeChangesInGraveyard ) {\\n\\t\\t\\t\\treturn this._cachedChangesWithGraveyard.slice();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this._cachedChanges.slice();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Will contain returned results.\\n\\t\\tconst diffSet = [];\\n\\n\\t\\t// Check all changed elements.\\n\\t\\tfor ( const element of this._changesInElement.keys() ) {\\n\\t\\t\\t// Get changes for this element and sort them.\\n\\t\\t\\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\\n\\t\\t\\t\\tif ( a.offset === b.offset ) {\\n\\t\\t\\t\\t\\tif ( a.type != b.type ) {\\n\\t\\t\\t\\t\\t\\t// If there are multiple changes at the same position, \\\"remove\\\" change should be first.\\n\\t\\t\\t\\t\\t\\t// If the order is different, for example, we would first add some nodes and then removed them\\n\\t\\t\\t\\t\\t\\t// (instead of the nodes that we should remove).\\n\\t\\t\\t\\t\\t\\treturn a.type == 'remove' ? -1 : 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn a.offset < b.offset ? -1 : 1;\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Get children of this element before any change was applied on it.\\n\\t\\t\\tconst snapshotChildren = this._elementSnapshots.get( element );\\n\\t\\t\\t// Get snapshot of current element's children.\\n\\t\\t\\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\\n\\n\\t\\t\\t// Generate actions basing on changes done on element.\\n\\t\\t\\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\\n\\n\\t\\t\\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\\n\\t\\t\\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\\n\\n\\t\\t\\t// Process every action.\\n\\t\\t\\tfor ( const action of actions ) {\\n\\t\\t\\t\\tif ( action === 'i' ) {\\n\\t\\t\\t\\t\\t// Generate diff item for this element and insert it into the diff set.\\n\\t\\t\\t\\t\\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\\n\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t} else if ( action === 'r' ) {\\n\\t\\t\\t\\t\\t// Generate diff item for this element and insert it into the diff set.\\n\\t\\t\\t\\t\\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\\n\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else if ( action === 'a' ) {\\n\\t\\t\\t\\t\\t// Take attributes from saved and current children.\\n\\t\\t\\t\\t\\tconst elementAttributes = elementChildren[ i ].attributes;\\n\\t\\t\\t\\t\\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\\n\\t\\t\\t\\t\\tlet range;\\n\\n\\t\\t\\t\\t\\tif ( elementChildren[ i ].name == '$text' ) {\\n\\t\\t\\t\\t\\t\\trange = Range.createFromParentsAndOffsets( element, i, element, i + 1 );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tconst index = element.offsetToIndex( i );\\n\\t\\t\\t\\t\\t\\trange = Range.createFromParentsAndOffsets( element, i, element.getChild( index ), 0 );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Generate diff items for this change (there might be multiple attributes changed and\\n\\t\\t\\t\\t\\t// there is a single diff for each of them) and insert them into the diff set.\\n\\t\\t\\t\\t\\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\\n\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// `action` is 'equal'. Child not changed.\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\tj++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Then, sort the changes by the position (change at position before other changes is first).\\n\\t\\tdiffSet.sort( ( a, b ) => {\\n\\t\\t\\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\\n\\t\\t\\t// root \\\"together\\\" in the array. So let's just sort them by the root name. It does not matter which root\\n\\t\\t\\t// will be processed first.\\n\\t\\t\\tif ( a.position.root != b.position.root ) {\\n\\t\\t\\t\\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If change happens at the same position...\\n\\t\\t\\tif ( a.position.isEqual( b.position ) ) {\\n\\t\\t\\t\\t// Keep chronological order of operations.\\n\\t\\t\\t\\treturn a.changeCount < b.changeCount ? -1 : 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If positions differ, position \\\"on the left\\\" should be earlier in the result.\\n\\t\\t\\treturn a.position.isBefore( b.position ) ? -1 : 1;\\n\\t\\t} );\\n\\n\\t\\t// Glue together multiple changes (mostly on text nodes).\\n\\t\\tfor ( let i = 1; i < diffSet.length; i++ ) {\\n\\t\\t\\tconst prevDiff = diffSet[ i - 1 ];\\n\\t\\t\\tconst thisDiff = diffSet[ i ];\\n\\n\\t\\t\\t// Glue remove changes if they happen on text on same position.\\n\\t\\t\\tconst isConsecutiveTextRemove =\\n\\t\\t\\t\\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\\n\\t\\t\\t\\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\\n\\t\\t\\t\\tprevDiff.position.isEqual( thisDiff.position );\\n\\n\\t\\t\\t// Glue insert changes if they happen on text on consecutive fragments.\\n\\t\\t\\tconst isConsecutiveTextAdd =\\n\\t\\t\\t\\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\\n\\t\\t\\t\\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\\n\\t\\t\\t\\tprevDiff.position.parent == thisDiff.position.parent &&\\n\\t\\t\\t\\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\\n\\n\\t\\t\\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\\n\\t\\t\\tconst isConsecutiveAttributeChange =\\n\\t\\t\\t\\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\\n\\t\\t\\t\\tprevDiff.position.parent == thisDiff.position.parent &&\\n\\t\\t\\t\\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\\n\\t\\t\\t\\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\\n\\t\\t\\t\\tprevDiff.attributeKey == thisDiff.attributeKey &&\\n\\t\\t\\t\\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\\n\\t\\t\\t\\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\\n\\n\\t\\t\\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\\n\\t\\t\\t\\tdiffSet[ i - 1 ].length++;\\n\\n\\t\\t\\t\\tif ( isConsecutiveAttributeChange ) {\\n\\t\\t\\t\\t\\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tdiffSet.splice( i, 1 );\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\\n\\t\\tfor ( const item of diffSet ) {\\n\\t\\t\\tdelete item.changeCount;\\n\\n\\t\\t\\tif ( item.type == 'attribute' ) {\\n\\t\\t\\t\\tdelete item.position;\\n\\t\\t\\t\\tdelete item.length;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis._changeCount = 0;\\n\\n\\t\\t// Cache changes.\\n\\t\\tthis._cachedChangesWithGraveyard = diffSet.slice();\\n\\t\\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\\n\\n\\t\\tif ( options.includeChangesInGraveyard ) {\\n\\t\\t\\treturn this._cachedChangesWithGraveyard;\\n\\t\\t} else {\\n\\t\\t\\treturn this._cachedChanges;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Resets `Differ`. Removes all buffered changes.\\n\\t */\\n\\treset() {\\n\\t\\tthis._changesInElement.clear();\\n\\t\\tthis._elementSnapshots.clear();\\n\\t\\tthis._changedMarkers.clear();\\n\\t\\tthis._cachedChanges = null;\\n\\t}\\n\\n\\t/**\\n\\t * Saves and handles an insert change.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent\\n\\t * @param {Number} offset\\n\\t * @param {Number} howMany\\n\\t */\\n\\t_markInsert( parent, offset, howMany ) {\\n\\t\\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\\n\\n\\t\\tthis._markChange( parent, changeItem );\\n\\t}\\n\\n\\t/**\\n\\t * Saves and handles a remove change.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent\\n\\t * @param {Number} offset\\n\\t * @param {Number} howMany\\n\\t */\\n\\t_markRemove( parent, offset, howMany ) {\\n\\t\\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\\n\\n\\t\\tthis._markChange( parent, changeItem );\\n\\n\\t\\tthis._removeAllNestedChanges( parent, offset, howMany );\\n\\t}\\n\\n\\t/**\\n\\t * Saves and handles an attribute change.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/item~Item} item\\n\\t */\\n\\t_markAttribute( item ) {\\n\\t\\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\\n\\n\\t\\tthis._markChange( item.parent, changeItem );\\n\\t}\\n\\n\\t/**\\n\\t * Saves and handles a model change.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent\\n\\t * @param {Object} changeItem\\n\\t */\\n\\t_markChange( parent, changeItem ) {\\n\\t\\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\\n\\t\\tthis._makeSnapshot( parent );\\n\\n\\t\\t// Then, get all changes that already were done on the element (empty array if this is the first change).\\n\\t\\tconst changes = this._getChangesForElement( parent );\\n\\n\\t\\t// Then, look through all the changes, and transform them or the new change.\\n\\t\\tthis._handleChange( changeItem, changes );\\n\\n\\t\\t// Add the new change.\\n\\t\\tchanges.push( changeItem );\\n\\n\\t\\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\\n\\t\\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\\n\\t\\tfor ( let i = 0; i < changes.length; i++ ) {\\n\\t\\t\\tif ( changes[ i ].howMany < 1 ) {\\n\\t\\t\\t\\tchanges.splice( i, 1 );\\n\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Gets an array of changes that have already been saved for a given element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} element\\n\\t * @returns {Array.<Object>}\\n\\t */\\n\\t_getChangesForElement( element ) {\\n\\t\\tlet changes;\\n\\n\\t\\tif ( this._changesInElement.has( element ) ) {\\n\\t\\t\\tchanges = this._changesInElement.get( element );\\n\\t\\t} else {\\n\\t\\t\\tchanges = [];\\n\\n\\t\\t\\tthis._changesInElement.set( element, changes );\\n\\t\\t}\\n\\n\\t\\treturn changes;\\n\\t}\\n\\n\\t/**\\n\\t * Saves a children snapshot for a given element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} element\\n\\t */\\n\\t_makeSnapshot( element ) {\\n\\t\\tif ( !this._elementSnapshots.has( element ) ) {\\n\\t\\t\\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\\n\\t * change and/or the old change.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} inc Incoming (new) change.\\n\\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\\n\\t */\\n\\t_handleChange( inc, changes ) {\\n\\t\\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\\n\\t\\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\\n\\t\\t// needs to be differentiated.\\n\\t\\t//\\n\\t\\t// This comes up when there are multiple changes that are affected by `inc` change item.\\n\\t\\t//\\n\\t\\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\\n\\t\\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\\n\\t\\t//\\n\\t\\t// Then, we:\\n\\t\\t// - \\\"forget\\\" about first insert change (it is \\\"eaten\\\" by remove),\\n\\t\\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\\n\\t\\t// - but still we have to change offset of the second insert change from `5` to `3`!\\n\\t\\t//\\n\\t\\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\\n\\t\\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\\n\\t\\tinc.nodesToHandle = inc.howMany;\\n\\n\\t\\tfor ( const old of changes ) {\\n\\t\\t\\tconst incEnd = inc.offset + inc.howMany;\\n\\t\\t\\tconst oldEnd = old.offset + old.howMany;\\n\\n\\t\\t\\tif ( inc.type == 'insert' ) {\\n\\t\\t\\t\\tif ( old.type == 'insert' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset <= old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset += inc.howMany;\\n\\t\\t\\t\\t\\t} else if ( inc.offset < oldEnd ) {\\n\\t\\t\\t\\t\\t\\told.howMany += inc.nodesToHandle;\\n\\t\\t\\t\\t\\t\\tinc.nodesToHandle = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( old.type == 'remove' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset < old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset += inc.howMany;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( old.type == 'attribute' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset <= old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset += inc.howMany;\\n\\t\\t\\t\\t\\t} else if ( inc.offset < oldEnd ) {\\n\\t\\t\\t\\t\\t\\t// This case is more complicated, because attribute change has to be split into two.\\n\\t\\t\\t\\t\\t\\t// Example (assume that uppercase and lowercase letters mean different attributes):\\n\\t\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t\\t// initial state:\\t\\tabcxyz\\n\\t\\t\\t\\t\\t\\t// attribute change:\\taBCXYz\\n\\t\\t\\t\\t\\t\\t// incoming insert:\\t\\taBCfooXYz\\n\\t\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t\\t// Change ranges cannot intersect because each item has to be described exactly (it was either\\n\\t\\t\\t\\t\\t\\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\\n\\t\\t\\t\\t\\t\\t// change has to be split and both parts has to be handled separately from now on.\\n\\t\\t\\t\\t\\t\\tconst howMany = old.howMany;\\n\\n\\t\\t\\t\\t\\t\\told.howMany = inc.offset - old.offset;\\n\\n\\t\\t\\t\\t\\t\\t// Add the second part of attribute change to the beginning of processed array so it won't\\n\\t\\t\\t\\t\\t\\t// be processed again in this loop.\\n\\t\\t\\t\\t\\t\\tchanges.unshift( {\\n\\t\\t\\t\\t\\t\\t\\ttype: 'attribute',\\n\\t\\t\\t\\t\\t\\t\\toffset: incEnd,\\n\\t\\t\\t\\t\\t\\t\\thowMany: howMany - old.howMany,\\n\\t\\t\\t\\t\\t\\t\\tcount: this._changeCount++\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( inc.type == 'remove' ) {\\n\\t\\t\\t\\tif ( old.type == 'insert' ) {\\n\\t\\t\\t\\t\\tif ( incEnd <= old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset -= inc.howMany;\\n\\t\\t\\t\\t\\t} else if ( incEnd <= oldEnd ) {\\n\\t\\t\\t\\t\\t\\tif ( inc.offset < old.offset ) {\\n\\t\\t\\t\\t\\t\\t\\tconst intersectionLength = incEnd - old.offset;\\n\\n\\t\\t\\t\\t\\t\\t\\told.offset = inc.offset;\\n\\n\\t\\t\\t\\t\\t\\t\\told.howMany -= intersectionLength;\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle -= intersectionLength;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\told.howMany -= inc.nodesToHandle;\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle = 0;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tif ( inc.offset <= old.offset ) {\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle -= old.howMany;\\n\\t\\t\\t\\t\\t\\t\\told.howMany = 0;\\n\\t\\t\\t\\t\\t\\t} else if ( inc.offset < oldEnd ) {\\n\\t\\t\\t\\t\\t\\t\\tconst intersectionLength = oldEnd - inc.offset;\\n\\n\\t\\t\\t\\t\\t\\t\\told.howMany -= intersectionLength;\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle -= intersectionLength;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( old.type == 'remove' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset + inc.howMany <= old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset -= inc.howMany;\\n\\t\\t\\t\\t\\t} else if ( inc.offset < old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset = inc.offset;\\n\\t\\t\\t\\t\\t\\told.howMany += inc.nodesToHandle;\\n\\n\\t\\t\\t\\t\\t\\tinc.nodesToHandle = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( old.type == 'attribute' ) {\\n\\t\\t\\t\\t\\tif ( incEnd <= old.offset ) {\\n\\t\\t\\t\\t\\t\\told.offset -= inc.howMany;\\n\\t\\t\\t\\t\\t} else if ( inc.offset < old.offset ) {\\n\\t\\t\\t\\t\\t\\tconst intersectionLength = incEnd - old.offset;\\n\\n\\t\\t\\t\\t\\t\\told.offset = inc.offset;\\n\\t\\t\\t\\t\\t\\told.howMany -= intersectionLength;\\n\\t\\t\\t\\t\\t} else if ( inc.offset < oldEnd ) {\\n\\t\\t\\t\\t\\t\\tif ( incEnd <= oldEnd ) {\\n\\t\\t\\t\\t\\t\\t\\t// On first sight in this case we don't need to split attribute operation into two.\\n\\t\\t\\t\\t\\t\\t\\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\\n\\t\\t\\t\\t\\t\\t\\t// For that reason, no two changes may intersect.\\n\\t\\t\\t\\t\\t\\t\\t// So we cannot have an attribute change that \\\"contains\\\" remove change.\\n\\t\\t\\t\\t\\t\\t\\t// Attribute change needs to be split.\\n\\t\\t\\t\\t\\t\\t\\tconst howMany = old.howMany;\\n\\n\\t\\t\\t\\t\\t\\t\\told.howMany = inc.offset - old.offset;\\n\\n\\t\\t\\t\\t\\t\\t\\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\\n\\n\\t\\t\\t\\t\\t\\t\\t// Add the second part of attribute change to the beginning of processed array so it won't\\n\\t\\t\\t\\t\\t\\t\\t// be processed again in this loop.\\n\\t\\t\\t\\t\\t\\t\\tchanges.unshift( {\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'attribute',\\n\\t\\t\\t\\t\\t\\t\\t\\toffset: inc.offset,\\n\\t\\t\\t\\t\\t\\t\\t\\thowMany: howManyAfter,\\n\\t\\t\\t\\t\\t\\t\\t\\tcount: this._changeCount++\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\told.howMany -= oldEnd - inc.offset;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( inc.type == 'attribute' ) {\\n\\t\\t\\t\\tif ( old.type == 'insert' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset < old.offset && incEnd > old.offset ) {\\n\\t\\t\\t\\t\\t\\tif ( incEnd > oldEnd ) {\\n\\t\\t\\t\\t\\t\\t\\t// This case is similar to a case described when incoming change was insert and old change was attribute.\\n\\t\\t\\t\\t\\t\\t\\t// See comment above.\\n\\t\\t\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t\\t\\t// This time incoming change is attribute. We need to split incoming change in this case too.\\n\\t\\t\\t\\t\\t\\t\\t// However this time, the second part of the attribute change needs to be processed further\\n\\t\\t\\t\\t\\t\\t\\t// because there might be other changes that it collides with.\\n\\t\\t\\t\\t\\t\\t\\tconst attributePart = {\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'attribute',\\n\\t\\t\\t\\t\\t\\t\\t\\toffset: oldEnd,\\n\\t\\t\\t\\t\\t\\t\\t\\thowMany: incEnd - oldEnd,\\n\\t\\t\\t\\t\\t\\t\\t\\tcount: this._changeCount++\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\t\\t\\tthis._handleChange( attributePart, changes );\\n\\n\\t\\t\\t\\t\\t\\t\\tchanges.push( attributePart );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tinc.nodesToHandle = old.offset - inc.offset;\\n\\t\\t\\t\\t\\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\\n\\t\\t\\t\\t\\t\\tif ( incEnd > oldEnd ) {\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle = incEnd - oldEnd;\\n\\t\\t\\t\\t\\t\\t\\tinc.offset = oldEnd;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tinc.nodesToHandle = 0;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( old.type == 'attribute' ) {\\n\\t\\t\\t\\t\\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\\n\\t\\t\\t\\t\\t\\tinc.nodesToHandle = 0;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tinc.howMany = inc.nodesToHandle;\\n\\t\\tdelete inc.nodesToHandle;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an object with a single insert change description.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\\n\\t * @param {Number} offset The offset at which change happened.\\n\\t * @param {String} name The name of the removed element or `'$text'` for a character.\\n\\t * @returns {Object} The diff item.\\n\\t */\\n\\t_getInsertDiff( parent, offset, name ) {\\n\\t\\treturn {\\n\\t\\t\\ttype: 'insert',\\n\\t\\t\\tposition: Position.createFromParentAndOffset( parent, offset ),\\n\\t\\t\\tname,\\n\\t\\t\\tlength: 1,\\n\\t\\t\\tchangeCount: this._changeCount++\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Returns an object with a single remove change description.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent The element in which change happened.\\n\\t * @param {Number} offset The offset at which change happened.\\n\\t * @param {String} name The name of the removed element or `'$text'` for a character.\\n\\t * @returns {Object} The diff item.\\n\\t */\\n\\t_getRemoveDiff( parent, offset, name ) {\\n\\t\\treturn {\\n\\t\\t\\ttype: 'remove',\\n\\t\\t\\tposition: Position.createFromParentAndOffset( parent, offset ),\\n\\t\\t\\tname,\\n\\t\\t\\tlength: 1,\\n\\t\\t\\tchangeCount: this._changeCount++\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of objects where each one is a single attribute change description.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/range~Range} range The range where the change happened.\\n\\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\\n\\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\\n\\t * @returns {Array.<Object>} An array containing one or more diff items.\\n\\t */\\n\\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\\n\\t\\t// Results holder.\\n\\t\\tconst diffs = [];\\n\\n\\t\\t// Clone new attributes as we will be performing changes on this object.\\n\\t\\tnewAttributes = new Map( newAttributes );\\n\\n\\t\\t// Look through old attributes.\\n\\t\\tfor ( const [ key, oldValue ] of oldAttributes ) {\\n\\t\\t\\t// Check what is the new value of the attribute (or if it was removed).\\n\\t\\t\\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\\n\\n\\t\\t\\t// If values are different (or attribute was removed)...\\n\\t\\t\\tif ( newValue !== oldValue ) {\\n\\t\\t\\t\\t// Add diff item.\\n\\t\\t\\t\\tdiffs.push( {\\n\\t\\t\\t\\t\\ttype: 'attribute',\\n\\t\\t\\t\\t\\tposition: range.start,\\n\\t\\t\\t\\t\\trange: Range.createFromRange( range ),\\n\\t\\t\\t\\t\\tlength: 1,\\n\\t\\t\\t\\t\\tattributeKey: key,\\n\\t\\t\\t\\t\\tattributeOldValue: oldValue,\\n\\t\\t\\t\\t\\tattributeNewValue: newValue,\\n\\t\\t\\t\\t\\tchangeCount: this._changeCount++\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Prevent returning two diff items for the same change.\\n\\t\\t\\tnewAttributes.delete( key );\\n\\t\\t}\\n\\n\\t\\t// Look through new attributes that weren't handled above.\\n\\t\\tfor ( const [ key, newValue ] of newAttributes ) {\\n\\t\\t\\t// Each of them is a new attribute. Add diff item.\\n\\t\\t\\tdiffs.push( {\\n\\t\\t\\t\\ttype: 'attribute',\\n\\t\\t\\t\\tposition: range.start,\\n\\t\\t\\t\\trange: Range.createFromRange( range ),\\n\\t\\t\\t\\tlength: 1,\\n\\t\\t\\t\\tattributeKey: key,\\n\\t\\t\\t\\tattributeOldValue: null,\\n\\t\\t\\t\\tattributeNewValue: newValue,\\n\\t\\t\\t\\tchangeCount: this._changeCount++\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn diffs;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} element Element to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_isInInsertedElement( element ) {\\n\\t\\tconst parent = element.parent;\\n\\n\\t\\tif ( !parent ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst changes = this._changesInElement.get( parent );\\n\\t\\tconst offset = element.startOffset;\\n\\n\\t\\tif ( changes ) {\\n\\t\\t\\tfor ( const change of changes ) {\\n\\t\\t\\t\\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this._isInInsertedElement( parent );\\n\\t}\\n\\n\\t/**\\n\\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\\n\\t * and `howMany`.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} parent\\n\\t * @param {Number} offset\\n\\t * @param {Number} howMany\\n\\t */\\n\\t_removeAllNestedChanges( parent, offset, howMany ) {\\n\\t\\tconst range = Range.createFromParentsAndOffsets( parent, offset, parent, offset + howMany );\\n\\n\\t\\tfor ( const item of range.getItems( { shallow: true } ) ) {\\n\\t\\t\\tif ( item.is( 'element' ) ) {\\n\\t\\t\\t\\tthis._elementSnapshots.delete( item );\\n\\t\\t\\t\\tthis._changesInElement.delete( item );\\n\\n\\t\\t\\t\\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\\n// objects, each representing one character and attributes set on that character.\\nfunction _getChildrenSnapshot( children ) {\\n\\tconst snapshot = [];\\n\\n\\tfor ( const child of children ) {\\n\\t\\tif ( child.is( 'text' ) ) {\\n\\t\\t\\tfor ( let i = 0; i < child.data.length; i++ ) {\\n\\t\\t\\t\\tsnapshot.push( {\\n\\t\\t\\t\\t\\tname: '$text',\\n\\t\\t\\t\\t\\tattributes: new Map( child.getAttributes() )\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tsnapshot.push( {\\n\\t\\t\\t\\tname: child.name,\\n\\t\\t\\t\\tattributes: new Map( child.getAttributes() )\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\treturn snapshot;\\n}\\n\\n// Generates array of actions for given changes set.\\n// It simulates what `diff` function does.\\n// Generated actions are:\\n// - 'e' for 'equal' - when item at that position did not change,\\n// - 'i' for 'insert' - when item at that position was inserted,\\n// - 'r' for 'remove' - when item at that position was removed,\\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\\n//\\n// Example (assume that uppercase letters have bold attribute, compare with function code):\\n//\\n// children before:\\tfooBAR\\n// children after:\\tfoxybAR\\n//\\n// changes: type: remove, offset: 1, howMany: 1\\n//\\t\\t\\ttype: insert, offset: 2, howMany: 2\\n//\\t\\t\\ttype: attribute, offset: 4, howMany: 1\\n//\\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\\n//\\n// steps taken by th script:\\n//\\n// 1. change = \\\"type: remove, offset: 1, howMany: 1\\\"; offset = 0; oldChildrenHandled = 0\\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\\n//    1.2 this change removes one node, add one remove action\\n//    1.3 change last visited `offset` to 1\\n//    1.4 since an old child has been removed, one more old child has been handled\\n//    1.5 actions at this point are: equal, remove\\n//\\n// 2. change = \\\"type: insert, offset: 2, howMany: 2\\\"; offset = 1; oldChildrenHandled = 2\\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\\n//    2.2 this change inserts two nodes, add two insert actions\\n//    2.3 change last visited offset to the end of the inserted range, that is 4\\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\\n//\\n// 3. change = \\\"type: attribute, offset: 4, howMany: 1\\\"; offset = 4, oldChildrenHandled = 3\\n//    3.1 between this change and previous change are no not-changed nodes\\n//    3.2 this change changes one node, add one attribute action\\n//    3.3 change last visited `offset` to the end of change range, that is 5\\n//    3.4 since an old child has been changed, one more old child has been handled\\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\\n//\\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\\n//    4.1 fill up with two equal actions\\n//\\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\\n\\tconst actions = [];\\n\\n\\tlet offset = 0;\\n\\tlet oldChildrenHandled = 0;\\n\\n\\t// Go through all buffered changes.\\n\\tfor ( const change of changes ) {\\n\\t\\t// First, fill \\\"holes\\\" between changes with \\\"equal\\\" actions.\\n\\t\\tif ( change.offset > offset ) {\\n\\t\\t\\tactions.push( ...'e'.repeat( change.offset - offset ).split( '' ) );\\n\\n\\t\\t\\toldChildrenHandled += change.offset - offset;\\n\\t\\t}\\n\\n\\t\\t// Then, fill up actions accordingly to change type.\\n\\t\\tif ( change.type == 'insert' ) {\\n\\t\\t\\tactions.push( ...'i'.repeat( change.howMany ).split( '' ) );\\n\\n\\t\\t\\t// The last handled offset is after inserted range.\\n\\t\\t\\toffset = change.offset + change.howMany;\\n\\t\\t} else if ( change.type == 'remove' ) {\\n\\t\\t\\tactions.push( ...'r'.repeat( change.howMany ).split( '' ) );\\n\\n\\t\\t\\t// The last handled offset is at the position where the nodes were removed.\\n\\t\\t\\toffset = change.offset;\\n\\t\\t\\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\\n\\t\\t\\toldChildrenHandled += change.howMany;\\n\\t\\t} else {\\n\\t\\t\\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\\n\\n\\t\\t\\t// The last handled offset isa at the position after the changed range.\\n\\t\\t\\toffset = change.offset + change.howMany;\\n\\t\\t\\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\\n\\t\\t\\toldChildrenHandled += change.howMany;\\n\\t\\t}\\n\\t}\\n\\n\\t// Fill \\\"equal\\\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\\n\\t// has not been changed / removed at the end of their parent.\\n\\tif ( oldChildrenHandled < oldChildrenLength ) {\\n\\t\\tactions.push( ...'e'.repeat( oldChildrenLength - oldChildrenHandled ).split( '' ) );\\n\\t}\\n\\n\\treturn actions;\\n}\\n\\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\\nfunction _changesInGraveyardFilter( entry ) {\\n\\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\\n\\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\\n\\n\\treturn !posInGy && !rangeInGy;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/history\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * `History` keeps the track of all the deltas applied to the {@link module:engine/model/document~Document document}.\\n */\\nexport default class History {\\n\\t/**\\n\\t * Creates an empty History instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Deltas added to the history.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Array.<module:engine/model/delta/delta~Delta>} module:engine/model/history~History#_deltas\\n\\t\\t */\\n\\t\\tthis._deltas = [];\\n\\n\\t\\t/**\\n\\t\\t * Helper structure that maps added delta's base version to the index in {@link module:engine/model/history~History#_deltas}\\n\\t\\t * at which the delta was added.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Map} module:engine/model/history~History#_historyPoints\\n\\t\\t */\\n\\t\\tthis._historyPoints = new Map();\\n\\n\\t\\t/**\\n\\t\\t * Holds an information which {@link module:engine/model/delta/delta~Delta delta} undoes which\\n\\t\\t * {@link module:engine/model/delta/delta~Delta delta}.\\n\\t\\t *\\n\\t\\t * Keys of the map are \\\"undoing deltas\\\", that is deltas that undone some other deltas. For each key, the\\n\\t\\t * value is a delta that has been undone by the \\\"undoing delta\\\".\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} module:engine/model/history~History#_undoPairs\\n\\t\\t */\\n\\t\\tthis._undoPairs = new Map();\\n\\n\\t\\t/**\\n\\t\\t * Holds all undone deltas.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Set.<module:engine/model/delta/delta~Delta>} module:engine/model/history~History#_undoneDeltas\\n\\t\\t */\\n\\t\\tthis._undoneDeltas = new Set();\\n\\t}\\n\\n\\t/**\\n\\t * Adds delta to the history.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} delta Delta to add.\\n\\t */\\n\\taddDelta( delta ) {\\n\\t\\tif ( delta.operations.length > 0 && !this._historyPoints.has( delta.baseVersion ) ) {\\n\\t\\t\\tconst index = this._deltas.length;\\n\\n\\t\\t\\tthis._deltas[ index ] = delta;\\n\\t\\t\\tthis._historyPoints.set( delta.baseVersion, index );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns deltas added to the history.\\n\\t *\\n\\t * @param {Number} [from=0] Base version from which deltas should be returned (inclusive). Defaults to `0`, which means\\n\\t * that deltas from the first one will be returned.\\n\\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which deltas should be returned (exclusive).\\n\\t * Defaults to `Number.POSITIVE_INFINITY` which means that deltas up to the last one will be returned.\\n\\t * @returns {Iterable.<module:engine/model/delta/delta~Delta>} Deltas added to the history from given base versions range.\\n\\t */\\n\\t* getDeltas( from = 0, to = Number.POSITIVE_INFINITY ) {\\n\\t\\t// No deltas added, nothing to yield.\\n\\t\\tif ( this._deltas.length === 0 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Will throw if base version is incorrect.\\n\\t\\tlet fromIndex = this._getIndex( from );\\n\\n\\t\\t// Base version is too low or too high and is not found in history.\\n\\t\\tif ( fromIndex == -1 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// We have correct `fromIndex` so let's iterate starting from it.\\n\\t\\twhile ( fromIndex < this._deltas.length ) {\\n\\t\\t\\tconst delta = this._deltas[ fromIndex++ ];\\n\\n\\t\\t\\tif ( delta.baseVersion >= to ) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\tyield delta;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns delta from history that bases on given `baseVersion`.\\n\\t *\\n\\t * @param {Number} baseVersion Base version of the delta to get.\\n\\t * @returns {module:engine/model/delta/delta~Delta|null} Delta with given base version or `null` if there is no such delta in history.\\n\\t */\\n\\tgetDelta( baseVersion ) {\\n\\t\\tconst index = this._historyPoints.get( baseVersion );\\n\\n\\t\\treturn index === undefined ? null : this._deltas[ index ];\\n\\t}\\n\\n\\t/**\\n\\t * Marks in history that one delta is a delta that is undoing the other delta. By marking deltas this way,\\n\\t * history is keeping more context information about deltas which helps in operational transformation.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} undoneDelta Delta which is undone by `undoingDelta`.\\n\\t * @param {module:engine/model/delta/delta~Delta} undoingDelta Delta which undoes `undoneDelta`.\\n\\t */\\n\\tsetDeltaAsUndone( undoneDelta, undoingDelta ) {\\n\\t\\tthis._undoPairs.set( undoingDelta, undoneDelta );\\n\\t\\tthis._undoneDeltas.add( undoneDelta );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given `delta` is undoing by any other delta.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} delta Delta to check.\\n\\t * @returns {Boolean} `true` if given `delta` is undoing any other delta, `false` otherwise.\\n\\t */\\n\\tisUndoingDelta( delta ) {\\n\\t\\treturn this._undoPairs.has( delta );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given `delta` has been undone by any other delta.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} delta Delta to check.\\n\\t * @returns {Boolean} `true` if given `delta` has been undone any other delta, `false` otherwise.\\n\\t */\\n\\tisUndoneDelta( delta ) {\\n\\t\\treturn this._undoneDeltas.has( delta );\\n\\t}\\n\\n\\t/**\\n\\t * For given `undoingDelta`, returns the delta which has been undone by it.\\n\\t *\\n\\t * @param {module:engine/model/delta/delta~Delta} undoingDelta\\n\\t * @returns {module:engine/model/delta/delta~Delta|undefined} Delta that has been undone by given `undoingDelta` or `undefined`\\n\\t * if given `undoingDelta` is not undoing any other delta.\\n\\t */\\n\\tgetUndoneDelta( undoingDelta ) {\\n\\t\\treturn this._undoPairs.get( undoingDelta );\\n\\t}\\n\\n\\t/**\\n\\t * Gets an index in {@link module:engine/model/history~History#_deltas} where delta with given `baseVersion` is added.\\n\\t *\\n\\t * @private\\n\\t * @param {Number} baseVersion Base version of delta.\\n\\t */\\n\\t_getIndex( baseVersion ) {\\n\\t\\tconst index = this._historyPoints.get( baseVersion );\\n\\n\\t\\t// Base version not found - it is either too high or too low, or is in the middle of delta.\\n\\t\\tif ( index === undefined ) {\\n\\t\\t\\tconst lastDelta = this._deltas[ this._deltas.length - 1 ];\\n\\t\\t\\tconst nextBaseVersion = lastDelta.baseVersion + lastDelta.operations.length;\\n\\n\\t\\t\\tif ( baseVersion < 0 || baseVersion >= nextBaseVersion ) {\\n\\t\\t\\t\\t// Base version is too high or too low - it's acceptable situation.\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/**\\n\\t\\t\\t * Given base version points to the middle of a delta.\\n\\t\\t\\t *\\n\\t\\t\\t * @error history-wrong-version\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'model-history-wrong-version: Given base version points to the middle of a delta.' );\\n\\t\\t}\\n\\n\\t\\treturn index;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * Set of utils to handle unicode characters.\\n *\\n * @module utils/unicode\\n */\\n\\n/**\\n * Checks whether given `character` is a combining mark.\\n *\\n * @param {String} character Character to check.\\n * @returns {Boolean}\\n */\\nexport function isCombiningMark( character ) {\\n\\treturn !!character && character.length == 1 && /[\\\\u0300-\\\\u036f\\\\u1ab0-\\\\u1aff\\\\u1dc0-\\\\u1dff\\\\u20d0-\\\\u20ff\\\\ufe20-\\\\ufe2f]/.test( character );\\n}\\n\\n/**\\n * Checks whether given `character` is a high half of surrogate pair.\\n *\\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\\n * consist of high surrogate pair character followed by low surrogate pair character.\\n *\\n * @param {String} character Character to check.\\n * @returns {Boolean}\\n */\\nexport function isHighSurrogateHalf( character ) {\\n\\treturn !!character && character.length == 1 && /[\\\\ud800-\\\\udbff]/.test( character );\\n}\\n\\n/**\\n * Checks whether given `character` is a low half of surrogate pair.\\n *\\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\\n * consist of high surrogate pair character followed by low surrogate pair character.\\n *\\n * @param {String} character Character to check.\\n * @returns {Boolean}\\n */\\nexport function isLowSurrogateHalf( character ) {\\n\\treturn !!character && character.length == 1 && /[\\\\udc00-\\\\udfff]/.test( character );\\n}\\n\\n/**\\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\\n *\\n * @param {String} string String to check.\\n * @param {Number} offset Offset to check.\\n * @returns {Boolean}\\n */\\nexport function isInsideSurrogatePair( string, offset ) {\\n\\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\\n}\\n\\n/**\\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\\n *\\n * @param {String} string String to check.\\n * @param {Number} offset Offset to check.\\n * @returns {Boolean}\\n */\\nexport function isInsideCombinedSymbol( string, offset ) {\\n\\treturn isCombiningMark( string.charAt( offset ) );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/document\\n */\\n\\nimport Differ from './differ';\\nimport Range from './range';\\nimport Position from './position';\\nimport RootElement from './rootelement';\\nimport History from './history';\\nimport DocumentSelection from './documentselection';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\nimport clone from '@ckeditor/ckeditor5-utils/src/lib/lodash/clone';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\\n\\nconst graveyardName = '$graveyard';\\n\\n/**\\n * Document tree model describes all editable data in the editor. It may contain multiple\\n * {@link module:engine/model/document~Document#roots root elements}. For example, if the editor has multiple editable areas,\\n * each area will be represented by a separate root.\\n *\\n * @mixes module:utils/emittermixin~EmitterMixin\\n */\\nexport default class Document {\\n\\t/**\\n\\t * Creates an empty document instance with no {@link #roots} (other than\\n\\t * the {@link #graveyard graveyard root}).\\n\\t */\\n\\tconstructor( model ) {\\n\\t\\t/**\\n\\t\\t * The {@link module:engine/model/model~Model model} that the document is a part of.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/model~Model}\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\\n\\t\\t * operations are applied on a proper document version.\\n\\t\\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\\n\\t\\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis.version = 0;\\n\\n\\t\\t/**\\n\\t\\t * The document's history.\\n\\t\\t *\\n\\t\\t * **Note:** Be aware that deltas applied to the document might get removed or changed.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/history~History}\\n\\t\\t */\\n\\t\\tthis.history = new History( this );\\n\\n\\t\\t/**\\n\\t\\t * The selection done on this document.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/documentselection~DocumentSelection}\\n\\t\\t */\\n\\t\\tthis.selection = new DocumentSelection( this );\\n\\n\\t\\t/**\\n\\t\\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\\n\\t\\t * {@link #getRoot} to manipulate it.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/collection~Collection}\\n\\t\\t */\\n\\t\\tthis.roots = new Collection( { idProperty: 'rootName' } );\\n\\n\\t\\t/**\\n\\t\\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/differ~Differ}\\n\\t\\t */\\n\\t\\tthis.differ = new Differ();\\n\\n\\t\\t/**\\n\\t\\t * Post-fixer callbacks registered to the model document.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Set}\\n\\t\\t */\\n\\t\\tthis._postFixers = new Set();\\n\\n\\t\\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\\n\\t\\tthis.createRoot( '$root', graveyardName );\\n\\n\\t\\t// First, if the operation is a document operation check if it's base version is correct.\\n\\t\\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Only operations with matching versions can be applied.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error document-applyOperation-wrong-version\\n\\t\\t\\t\\t * @param {module:engine/model/operation/operation~Operation} operation\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t\\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\\n\\t\\t\\t\\t\\t{ operation }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'highest' } );\\n\\n\\t\\t// Then, still before an operation is applied on model, buffer the change in differ.\\n\\t\\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tif ( operation.isDocumentOperation ) {\\n\\t\\t\\t\\tthis.differ.bufferOperation( operation );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\n\\t\\t// After the operation is applied, bump document's version and add the operation to the history.\\n\\t\\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tif ( operation.isDocumentOperation ) {\\n\\t\\t\\t\\tthis.version++;\\n\\t\\t\\t\\tthis.history.addDelta( operation.delta );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// Listen to selection changes. If selection changed, mark it.\\n\\t\\tlet hasSelectionChanged = false;\\n\\n\\t\\tthis.listenTo( this.selection, 'change', () => {\\n\\t\\t\\thasSelectionChanged = true;\\n\\t\\t} );\\n\\n\\t\\t// Wait for `_change` event from model, which signalizes that outermost change block has finished.\\n\\t\\t// When this happens, check if there were any changes done on document, and if so, call post fixers,\\n\\t\\t// fire `change` event for features and conversion and then reset the differ.\\n\\t\\tthis.listenTo( model, '_change', ( evt, writer ) => {\\n\\t\\t\\tif ( !this.differ.isEmpty || hasSelectionChanged ) {\\n\\t\\t\\t\\tthis._callPostFixers( writer );\\n\\n\\t\\t\\t\\tthis.fire( 'change', writer.batch );\\n\\n\\t\\t\\t\\tthis.differ.reset();\\n\\t\\t\\t\\thasSelectionChanged = false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Buffer marker changes.\\n\\t\\t// This is not covered in buffering operations because markers may change outside of them (when they\\n\\t\\t// are modified using `model.markers` collection, not through `MarkerOperation`).\\n\\t\\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\\n\\t\\t\\t// Whenever marker is updated, buffer that change.\\n\\t\\t\\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange );\\n\\n\\t\\t\\tif ( !oldRange ) {\\n\\t\\t\\t\\t// Whenever marker changes, buffer that.\\n\\t\\t\\t\\tmarker.on( 'change', ( evt, oldRange ) => {\\n\\t\\t\\t\\t\\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange() );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\\n\\t *\\n\\t * @readonly\\n\\t * @member {module:engine/model/rootelement~RootElement}\\n\\t */\\n\\tget graveyard() {\\n\\t\\treturn this.getRoot( graveyardName );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new top-level root.\\n\\t *\\n\\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\\n\\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\\n\\t * @param {String} [rootName='main'] A unique root name.\\n\\t * @returns {module:engine/model/rootelement~RootElement} The created root.\\n\\t */\\n\\tcreateRoot( elementName = '$root', rootName = 'main' ) {\\n\\t\\tif ( this.roots.get( rootName ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * A root with the specified name already exists.\\n\\t\\t\\t *\\n\\t\\t\\t * @error model-document-createRoot-name-exists\\n\\t\\t\\t * @param {module:engine/model/document~Document} doc\\n\\t\\t\\t * @param {String} name\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'model-document-createRoot-name-exists: Root with specified name already exists.',\\n\\t\\t\\t\\t{ name: rootName }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst root = new RootElement( this, elementName, rootName );\\n\\t\\tthis.roots.add( root );\\n\\n\\t\\treturn root;\\n\\t}\\n\\n\\t/**\\n\\t * Removes all event listeners set by the document instance.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.selection.destroy();\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Returns the top-level root by its name.\\n\\t *\\n\\t * @param {String} [name='main'] A unique root name.\\n\\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or null when\\n\\t * there is no root with the given name.\\n\\t */\\n\\tgetRoot( name = 'main' ) {\\n\\t\\treturn this.roots.get( name );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\\n\\t *\\n\\t * @returns {Array.<String>} Roots names.\\n\\t */\\n\\tgetRootNames() {\\n\\t\\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\\n\\t}\\n\\n\\t/**\\n\\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features that listen to\\n\\t * the {@link module:engine/model/model~Model#event:_change model's change event} will operate on a correct model state.\\n\\t *\\n\\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\\n\\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\\n\\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\\n\\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\\n\\t * not be fixed in the new document tree state.\\n\\t *\\n\\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\\n\\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\\n\\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\\n\\t * for the user.\\n\\t *\\n\\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\\n\\t * callback should add an empty paragraph so that the editor is never empty:\\n\\t *\\n\\t *\\t\\tdocument.registerPostFixer( writer => {\\n\\t *\\t\\t\\tconst changes = document.differ.getChanges();\\n\\t *\\n\\t *\\t\\t\\t// Check if the changes lead to an empty root in the editor.\\n\\t *\\t\\t\\tfor ( const entry of changes ) {\\n\\t *\\t\\t\\t\\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\\n\\t *\\t\\t\\t\\t\\twriter.insertElement( 'paragraph', entry.position.root, 0 );\\n\\t *\\n\\t *\\t\\t\\t\\t\\t// It is fine to return early, even if multiple roots would need to be fixed.\\n\\t *\\t\\t\\t\\t\\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\\n\\t *\\t\\t\\t\\t\\treturn true;\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @param {Function} postFixer\\n\\t */\\n\\tregisterPostFixer( postFixer ) {\\n\\t\\tthis._postFixers.add( postFixer );\\n\\t}\\n\\n\\t/**\\n\\t * A custom `toJSON()` method to solve child-parent circular dependencies.\\n\\t *\\n\\t * @returns {Object} A clone of this object with the document property changed to a string.\\n\\t */\\n\\ttoJSON() {\\n\\t\\tconst json = clone( this );\\n\\n\\t\\t// Due to circular references we need to remove parent reference.\\n\\t\\tjson.selection = '[engine.model.DocumentSelection]';\\n\\t\\tjson.model = '[engine.model.Model]';\\n\\n\\t\\treturn json;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the default root for this document which is either the first root that was added to the document using\\n\\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\\n\\t *\\n\\t * @protected\\n\\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\\n\\t */\\n\\t_getDefaultRoot() {\\n\\t\\tfor ( const root of this.roots ) {\\n\\t\\t\\tif ( root !== this.graveyard ) {\\n\\t\\t\\t\\treturn root;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn this.graveyard;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\\n\\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\\n\\t *\\n\\t * @protected\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\t_getDefaultRange() {\\n\\t\\tconst defaultRoot = this._getDefaultRoot();\\n\\t\\tconst schema = this.model.schema;\\n\\n\\t\\t// Find the first position where the selection can be put.\\n\\t\\tconst position = new Position( defaultRoot, [ 0 ] );\\n\\t\\tconst nearestRange = schema.getNearestSelectionRange( position );\\n\\n\\t\\t// If valid selection range is not found - return range collapsed at the beginning of the root.\\n\\t\\treturn nearestRange || new Range( position );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\\n\\t * the {@link #selection document's selection}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/range~Range} range A range to check.\\n\\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\\n\\t */\\n\\t_validateSelectionRange( range ) {\\n\\t\\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\\n\\t}\\n\\n\\t/**\\n\\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_callPostFixers( writer ) {\\n\\t\\tlet wasFixed = false;\\n\\n\\t\\tdo {\\n\\t\\t\\tfor ( const callback of this._postFixers ) {\\n\\t\\t\\t\\twasFixed = callback( writer );\\n\\n\\t\\t\\t\\tif ( wasFixed ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} while ( wasFixed );\\n\\t}\\n\\n\\t/**\\n\\t * Fired after an {@link module:engine/model/model~Model#enqueueChange enqueue change block} or the outermost\\n\\t * {@link module:engine/model/model~Model#change change block} was executed and the document model tree was changed\\n\\t * during that block execution.\\n\\t *\\n\\t * @event change\\n\\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\\n\\t */\\n}\\n\\nmix( Document, EmitterMixin );\\n\\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\\n// unicode surrogate pairs or base character and combining marks.\\nfunction validateTextNodePosition( rangeBoundary ) {\\n\\tconst textNode = rangeBoundary.textNode;\\n\\n\\tif ( textNode ) {\\n\\t\\tconst data = textNode.data;\\n\\t\\tconst offset = rangeBoundary.offset - textNode.startOffset;\\n\\n\\t\\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\\n\\t}\\n\\n\\treturn true;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/markercollection\\n */\\n\\nimport LiveRange from './liverange';\\nimport Position from './position';\\nimport Range from './range';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\\n *\\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\\n * {@link module:engine/model/writer~Writer#setMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\\n * collection. All markers created by the writer will be automatically added to this collection.\\n *\\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\\n *\\n * @see module:engine/model/markercollection~Marker\\n */\\nexport default class MarkerCollection {\\n\\t/**\\n\\t * Creates a markers collection.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Stores {@link ~Marker markers} added to the collection.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} #_markers\\n\\t\\t */\\n\\t\\tthis._markers = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Iterable interface.\\n\\t *\\n\\t * Iterates over all {@link ~Marker markers} added to the collection.\\n\\t *\\n\\t * @returns {Iterable}\\n\\t */\\n\\t[ Symbol.iterator ]() {\\n\\t\\treturn this._markers.values();\\n\\t}\\n\\n\\t/**\\n\\t * Checks if marker with given `markerName` is in the collection.\\n\\t *\\n\\t * @param {String} markerName Marker name.\\n\\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\\n\\t */\\n\\thas( markerName ) {\\n\\t\\treturn this._markers.has( markerName );\\n\\t}\\n\\n\\t/**\\n\\t * Returns {@link ~Marker marker} with given `markerName`.\\n\\t *\\n\\t * @param {String} markerName Name of marker to get.\\n\\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\\n\\t * not added to the collection.\\n\\t */\\n\\tget( markerName ) {\\n\\t\\treturn this._markers.get( markerName ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\\n\\t * {@link module:engine/model/range~Range range}.\\n\\t *\\n\\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\\n\\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\\n\\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\\n\\t * flag has changed.\\n\\t *\\n\\t * @protected\\n\\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\\n\\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\\n\\t * @param {module:engine/model/range~Range} range Marker range.\\n\\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\\n\\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\\n\\t */\\n\\t_set( markerOrName, range, managedUsingOperations = false ) {\\n\\t\\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\\n\\t\\tconst oldMarker = this._markers.get( markerName );\\n\\n\\t\\tif ( oldMarker ) {\\n\\t\\t\\tconst oldRange = oldMarker.getRange();\\n\\t\\t\\tlet hasChanged = false;\\n\\n\\t\\t\\tif ( !oldRange.isEqual( range ) ) {\\n\\t\\t\\t\\toldMarker._attachLiveRange( LiveRange.createFromRange( range ) );\\n\\t\\t\\t\\thasChanged = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\\n\\t\\t\\t\\toldMarker._managedUsingOperations = managedUsingOperations;\\n\\t\\t\\t\\thasChanged = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( hasChanged ) {\\n\\t\\t\\t\\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn oldMarker;\\n\\t\\t}\\n\\n\\t\\tconst liveRange = LiveRange.createFromRange( range );\\n\\t\\tconst marker = new Marker( markerName, liveRange, managedUsingOperations );\\n\\n\\t\\tthis._markers.set( markerName, marker );\\n\\t\\tthis.fire( 'update:' + markerName, marker, null, range );\\n\\n\\t\\treturn marker;\\n\\t}\\n\\n\\t/**\\n\\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\\n\\t *\\n\\t * @protected\\n\\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\\n\\t * @param {String} markerOrName Marker or name of a marker to remove.\\n\\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\\n\\t */\\n\\t_remove( markerOrName ) {\\n\\t\\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\\n\\t\\tconst oldMarker = this._markers.get( markerName );\\n\\n\\t\\tif ( oldMarker ) {\\n\\t\\t\\tthis._markers.delete( markerName );\\n\\t\\t\\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\\n\\n\\t\\t\\tthis._destroyMarker( oldMarker );\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\\n\\t *\\n\\t * @param {module:engine/model/position~Position} position\\n\\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\\n\\t */\\n\\t* getMarkersAtPosition( position ) {\\n\\t\\tfor ( const marker of this ) {\\n\\t\\t\\tif ( marker.getRange().containsPosition( position ) ) {\\n\\t\\t\\t\\tyield marker;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Destroys marker collection and all markers inside it.\\n\\t */\\n\\tdestroy() {\\n\\t\\tfor ( const marker of this._markers.values() ) {\\n\\t\\t\\tthis._destroyMarker( marker );\\n\\t\\t}\\n\\n\\t\\tthis._markers = null;\\n\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Iterates over all markers that starts with given `prefix`.\\n\\t *\\n\\t *\\t\\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\\n\\t *\\t\\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\\n\\t *\\t\\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\\n\\t *\\t\\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\\n\\t *\\t\\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\\n\\t *\\t\\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\\n\\t *\\n\\t * @param prefix\\n\\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\\n\\t */\\n\\t* getMarkersGroup( prefix ) {\\n\\t\\tfor ( const marker of this._markers.values() ) {\\n\\t\\t\\tif ( marker.name.startsWith( prefix + ':' ) ) {\\n\\t\\t\\t\\tyield marker;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the marker.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\\n\\t */\\n\\t_destroyMarker( marker ) {\\n\\t\\tmarker.stopListening();\\n\\t\\tmarker._detachLiveRange();\\n\\t}\\n\\n\\t/**\\n\\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\\n\\t *\\n\\t * @event update\\n\\t * @param {module:engine/model/markercollection~Marker} Updated Marker.\\n\\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\\n\\t * means that marker is just added.\\n\\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\\n\\t * means that marker is just removed.\\n\\t */\\n}\\n\\nmix( MarkerCollection, EmitterMixin );\\n\\n/**\\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\\n * model document tree, markers are not stored directly in document tree but in\\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\\n * additional meaning to the part of a model document between marker start and marker end.\\n *\\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\\n * \\\"special\\\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\\n * model, it starts being \\\"special\\\" and the marker is enlarged.\\n *\\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\\n * to the range which it is marking at the moment.\\n *\\n * Markers are built from a name and a range.\\n *\\n * Range of the marker is updated automatically when document changes, using\\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\\n *\\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\\n *\\n * There are two types of markers.\\n *\\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\\n *\\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\\n * This type of markers is useful for solutions like spell checking or comments.\\n *\\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#setMarker}\\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\\n *\\n *\\t\\tmodel.change( ( writer ) => {\\n * \\t\\t\\tconst marker = writer.setMarker( name, range, { usingOperation: true } );\\n *\\n * \\t\\t\\t// ...\\n *\\n * \\t\\t\\twriter.removeMarker( marker );\\n *\\t\\t} );\\n *\\n * See {@link module:engine/model/writer~Writer} to find more examples.\\n *\\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\\n * markers as possible and remove them as soon as they are not needed anymore.\\n *\\n * Markers can be downcasted and upcasted.\\n *\\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\\n * Use {@link module:engine/conversion/downcast-converters downcast converters} or attach a custom converter to mentioned events.\\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcast-converters upcast converters} or\\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\\n *\\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\\n * to the range which it is marking at the moment.\\n *\\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\\n */\\nclass Marker {\\n\\t/**\\n\\t * Creates a marker instance.\\n\\t *\\n\\t * @param {String} name Marker name.\\n\\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\\n\\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\\n\\t */\\n\\tconstructor( name, liveRange, managedUsingOperations ) {\\n\\t\\t/**\\n\\t\\t * Marker's name.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @type {String}\\n\\t\\t */\\n\\t\\tthis.name = name;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicates if the marker is managed using operations or not.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis._managedUsingOperations = managedUsingOperations;\\n\\n\\t\\t/**\\n\\t\\t * Range marked by the marker.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/liverange~LiveRange} #_liveRange\\n\\t\\t */\\n\\t\\tthis._liveRange = this._attachLiveRange( liveRange );\\n\\t}\\n\\n\\t/**\\n\\t * Returns value of flag indicates if the marker is managed using operations or not.\\n\\t * See {@link ~Marker marker class description} to learn more about marker types.\\n\\t * See {@link module:engine/model/writer~Writer#setMarker}.\\n\\t *\\n\\t * @returns {Boolean}\\n\\t */\\n\\tget managedUsingOperations() {\\n\\t\\tif ( !this._liveRange ) {\\n\\t\\t\\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\\n\\t\\t}\\n\\n\\t\\treturn this._managedUsingOperations;\\n\\t}\\n\\n\\t/**\\n\\t * Returns current marker start position.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tgetStart() {\\n\\t\\tif ( !this._liveRange ) {\\n\\t\\t\\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\\n\\t\\t}\\n\\n\\t\\treturn Position.createFromPosition( this._liveRange.start );\\n\\t}\\n\\n\\t/**\\n\\t * Returns current marker end position.\\n\\t *\\n\\t * @returns {module:engine/model/position~Position}\\n\\t */\\n\\tgetEnd() {\\n\\t\\tif ( !this._liveRange ) {\\n\\t\\t\\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\\n\\t\\t}\\n\\n\\t\\treturn Position.createFromPosition( this._liveRange.end );\\n\\t}\\n\\n\\t/**\\n\\t * Returns a range that represents current state of marker.\\n\\t *\\n\\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\\n\\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\\n\\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\\n\\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\\n\\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\\n\\t * that it's data is up-to-date.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range}\\n\\t */\\n\\tgetRange() {\\n\\t\\tif ( !this._liveRange ) {\\n\\t\\t\\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\\n\\t\\t}\\n\\n\\t\\treturn Range.createFromRange( this._liveRange );\\n\\t}\\n\\n\\t/**\\n\\t * Binds new live range to marker and detach the old one if is attached.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\\n\\t * @return {module:engine/model/liverange~LiveRange} Attached live range.\\n\\t */\\n\\t_attachLiveRange( liveRange ) {\\n\\t\\tif ( this._liveRange ) {\\n\\t\\t\\tthis._detachLiveRange();\\n\\t\\t}\\n\\n\\t\\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\\n\\t\\tliveRange.delegate( 'change:range' ).to( this );\\n\\t\\tliveRange.delegate( 'change:content' ).to( this );\\n\\n\\t\\tthis._liveRange = liveRange;\\n\\n\\t\\treturn liveRange;\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds and destroys currently attached live range.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_detachLiveRange() {\\n\\t\\tthis._liveRange.stopDelegating( 'change:range', this );\\n\\t\\tthis._liveRange.stopDelegating( 'change:content', this );\\n\\t\\tthis._liveRange.detach();\\n\\t\\tthis._liveRange = null;\\n\\t}\\n\\n\\t/**\\n\\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\\n\\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\\n\\t *\\n\\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\\n\\t * all event listeners listening to it should be removed. It is best to do it on\\n\\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\\n\\t *\\n\\t * @see module:engine/model/liverange~LiveRange#event:change:range\\n\\t * @event change:range\\n\\t * @param {module:engine/model/range~Range} oldRange\\n\\t * @param {Object} data\\n\\t */\\n\\n\\t/**\\n\\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\\n\\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\\n\\t *\\n\\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\\n\\t * all event listeners listening to it should be removed. It is best to do it on\\n\\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\\n\\t *\\n\\t * @see module:engine/model/liverange~LiveRange#event:change:content\\n\\t * @event change:content\\n\\t * @param {module:engine/model/range~Range} oldRange\\n\\t * @param {Object} data\\n\\t */\\n}\\n\\nmix( Marker, EmitterMixin );\\n\\n/**\\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\\n *\\n * @error marker-destroyed\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/liveposition\\n */\\n\\nimport Position from './position';\\nimport Range from './range';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\\n * that updates itself as {@link module:engine/model/document~Document document}\\n * is changed through operations. It may be used as a bookmark.\\n *\\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\\n * {@link module:engine/model/rootelement~RootElement}.\\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\\n *\\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\\n * have to be unbound.\\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\\n *\\n * @extends module:engine/model/position~Position\\n */\\nexport default class LivePosition extends Position {\\n\\t/**\\n\\t * Creates a live position.\\n\\t *\\n\\t * @see module:engine/model/position~Position\\n\\t * @param {module:engine/model/rootelement~RootElement} root\\n\\t * @param {Array.<Number>} path\\n\\t * @param {module:engine/model/position~PositionStickiness} [stickiness] Defaults to `'sticksToNext'`.\\n\\t * See {@link module:engine/model/liveposition~LivePosition#stickiness}.\\n\\t */\\n\\tconstructor( root, path, stickiness ) {\\n\\t\\tsuper( root, path );\\n\\n\\t\\tif ( !this.root.is( 'rootElement' ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * LivePosition's root has to be an instance of RootElement.\\n\\t\\t\\t *\\n\\t\\t\\t * @error liveposition-root-not-rootelement\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'model-liveposition-root-not-rootelement: LivePosition\\\\'s root has to be an instance of RootElement.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Flag representing `LivePosition` stickiness. `LivePosition` might be sticking to previous node or next node.\\n\\t\\t * Whenever some nodes are inserted at the same position as `LivePosition`, `stickiness` is checked to decide if\\n\\t\\t * LivePosition should be moved. Similar applies when a range of nodes is moved and one of it's boundary\\n\\t\\t * position is same as `LivePosition`.\\n\\t\\t *\\n\\t\\t * Examples:\\n\\t\\t *\\n\\t\\t *\\t\\tInsert:\\n\\t\\t *\\t\\tPosition is at | and we insert at the same position, marked as ^:\\n\\t\\t *\\t\\t- | sticks to previous node: `<p>f|^oo</p>` => `<p>f|baroo</p>`\\n\\t\\t *\\t\\t- | sticks to next node: `<p>f^|oo</p>` => `<p>fbar|oo</p>`\\n\\t\\t *\\n\\t\\t *\\t\\tMove:\\n\\t\\t *\\t\\tPosition is at | and range [ ] is moved to position ^:\\n\\t\\t *\\t\\t- | sticks to previous node: `<p>f|[oo]</p><p>b^ar</p>` => `<p>f|</p><p>booar</p>`\\n\\t\\t *\\t\\t- | sticks to next node: `<p>f|[oo]</p><p>b^ar</p>` => `<p>f</p><p>b|ooar</p>`\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/liveposition~LivePosition#stickiness\\n\\t\\t */\\n\\t\\tthis.stickiness = stickiness || 'sticksToNext';\\n\\n\\t\\tbindWithDocument.call( this );\\n\\t}\\n\\n\\t/**\\n\\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\\n\\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\\n\\t * referring to it).\\n\\t */\\n\\tdetach() {\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * @static\\n\\t * @method module:engine/model/liveposition~LivePosition.createAfter\\n\\t * @see module:engine/model/position~Position.createAfter\\n\\t * @param {module:engine/model/node~Node} node\\n\\t * @returns {module:engine/model/liveposition~LivePosition}\\n\\t */\\n\\n\\t/**\\n\\t * @static\\n\\t * @method module:engine/model/liveposition~LivePosition.createBefore\\n\\t * @see module:engine/model/position~Position.createBefore\\n\\t * @param {module:engine/model/node~Node} node\\n\\t * @returns {module:engine/model/liveposition~LivePosition}\\n\\t */\\n\\n\\t/**\\n\\t * @static\\n\\t * @method module:engine/model/liveposition~LivePosition.createFromParentAndOffset\\n\\t * @see module:engine/model/position~Position.createFromParentAndOffset\\n\\t * @param {module:engine/model/element~Element} parent\\n\\t * @param {Number} offset\\n\\t * @returns {module:engine/model/liveposition~LivePosition}\\n\\t */\\n\\n\\t/**\\n\\t * @static\\n\\t * @method module:engine/model/liveposition~LivePosition.createFromPosition\\n\\t * @see module:engine/model/position~Position.createFromPosition\\n\\t * @param {module:engine/model/position~Position} position\\n\\t * @returns {module:engine/model/liveposition~LivePosition}\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\\n\\t *\\n\\t * @event module:engine/model/liveposition~LivePosition#change\\n\\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\\n\\t */\\n}\\n\\n/**\\n * Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\\n * this position's {@link module:engine/model/position~Position#root root}.\\n *\\n * @ignore\\n * @private\\n * @method module:engine/model/liveposition~LivePosition.bindWithDocument\\n */\\nfunction bindWithDocument() {\\n\\t// Operation types handled by LivePosition (these are operations that change model tree structure).\\n\\tconst supportedTypes = new Set( [ 'insert', 'move', 'remove', 'reinsert' ] );\\n\\n\\tthis.listenTo(\\n\\t\\tthis.root.document.model,\\n\\t\\t'applyOperation',\\n\\t\\t( event, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\tif ( !operation.isDocumentOperation ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( supportedTypes.has( operation.type ) ) {\\n\\t\\t\\t\\ttransform.call( this, operation );\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{ priority: 'low' }\\n\\t);\\n}\\n\\n/**\\n * Updates this position accordingly to the updates applied to the model. Bases on change events.\\n *\\n * @ignore\\n * @private\\n * @method transform\\n * @param {module:engine/model/operation/operation~Operation} operation Executed operation.\\n */\\nfunction transform( operation ) {\\n\\t/* eslint-disable no-case-declarations */\\n\\tlet range;\\n\\tlet position;\\n\\n\\tif ( operation.type == 'insert' ) {\\n\\t\\trange = Range.createFromPositionAndShift( operation.position, operation.nodes.maxOffset );\\n\\t} else {\\n\\t\\trange = Range.createFromPositionAndShift( operation.getMovedRangeStart(), operation.howMany );\\n\\t\\tposition = operation.sourcePosition;\\n\\t}\\n\\n\\tconst howMany = range.end.offset - range.start.offset;\\n\\tlet transformed;\\n\\n\\tswitch ( operation.type ) {\\n\\t\\tcase 'insert':\\n\\t\\t\\tconst insertBefore = this.stickiness == 'sticksToNext';\\n\\t\\t\\ttransformed = this._getTransformedByInsertion( range.start, howMany, insertBefore );\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'move':\\n\\t\\tcase 'remove':\\n\\t\\tcase 'reinsert':\\n\\t\\t\\tconst originalRange = Range.createFromPositionAndShift( position, howMany );\\n\\n\\t\\t\\tconst gotMoved = originalRange.containsPosition( this ) ||\\n\\t\\t\\t\\t( originalRange.start.isEqual( this ) && this.stickiness == 'sticksToNext' ) ||\\n\\t\\t\\t\\t( originalRange.end.isEqual( this ) && this.stickiness == 'sticksToPrevious' );\\n\\n\\t\\t\\t// We can't use ._getTransformedByMove() because we have a different if-condition.\\n\\t\\t\\tif ( gotMoved ) {\\n\\t\\t\\t\\ttransformed = this._getCombined( position, range.start );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst insertBefore = this.stickiness == 'sticksToNext';\\n\\n\\t\\t\\t\\t// `Position._getTransformedByMove` is expecting `targetPosition` to be \\\"before\\\" move\\n\\t\\t\\t\\t// (before transformation). `range.start` is already after the move happened.\\n\\t\\t\\t\\t// We have to revert `targetPosition` to the state before the move.\\n\\t\\t\\t\\tconst targetPosition = range.start._getTransformedByInsertion( position, howMany );\\n\\n\\t\\t\\t\\ttransformed = this._getTransformedByMove( position, targetPosition, howMany, insertBefore );\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\tif ( !this.isEqual( transformed ) ) {\\n\\t\\tconst oldPosition = Position.createFromPosition( this );\\n\\n\\t\\tthis.path = transformed.path;\\n\\t\\tthis.root = transformed.root;\\n\\n\\t\\tthis.fire( 'change', oldPosition );\\n\\t}\\n\\t/* eslint-enable no-case-declarations */\\n}\\n\\nmix( LivePosition, EmitterMixin );\\n\\n/**\\n * Enum representing how position is \\\"sticking\\\" with their neighbour nodes.\\n * Possible values: `'sticksToNext'`, `'sticksToPrevious'`.\\n *\\n * @typedef {String} module:engine/model/position~PositionStickiness\\n */\\n\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/utils/insertcontent\\n */\\n\\nimport Position from '../position';\\nimport LivePosition from '../liveposition';\\nimport Element from '../element';\\nimport Range from '../range';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\nimport DocumentSelection from '../documentselection';\\n\\n/**\\n * Inserts content into the editor (specified selection) as one would expect the paste\\n * functionality to work.\\n *\\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\\n * This function is only exposed to be reusable in algorithms\\n * which change the {@link module:engine/model/model~Model#insertContent}\\n * method's behavior.\\n *\\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\\n * should be performed.\\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\\n * Selection into which the content should be inserted.\\n */\\nexport default function insertContent( model, content, selection ) {\\n\\tmodel.change( writer => {\\n\\t\\tif ( !selection.isCollapsed ) {\\n\\t\\t\\tmodel.deleteContent( selection );\\n\\t\\t}\\n\\n\\t\\tconst insertion = new Insertion( model, writer, selection.anchor );\\n\\n\\t\\tlet nodesToInsert;\\n\\n\\t\\tif ( content.is( 'documentFragment' ) ) {\\n\\t\\t\\tnodesToInsert = content.getChildren();\\n\\t\\t} else {\\n\\t\\t\\tnodesToInsert = [ content ];\\n\\t\\t}\\n\\n\\t\\tinsertion.handleNodes( nodesToInsert, {\\n\\t\\t\\t// The set of children being inserted is the only set in this context\\n\\t\\t\\t// so it's the first and last (it's a hack ;)).\\n\\t\\t\\tisFirst: true,\\n\\t\\t\\tisLast: true\\n\\t\\t} );\\n\\n\\t\\tconst newRange = insertion.getSelectionRange();\\n\\n\\t\\t/* istanbul ignore else */\\n\\t\\tif ( newRange ) {\\n\\t\\t\\tif ( selection instanceof DocumentSelection ) {\\n\\t\\t\\t\\twriter.setSelection( newRange );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tselection.setTo( newRange );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// We are not testing else because it's a safe check for unpredictable edge cases:\\n\\t\\t\\t// an insertion without proper range to select.\\n\\n\\t\\t\\t/**\\n\\t\\t\\t * Cannot determine a proper selection range after insertion.\\n\\t\\t\\t *\\n\\t\\t\\t * @warning insertcontent-no-range\\n\\t\\t\\t */\\n\\t\\t\\tlog.warn( 'insertcontent-no-range: Cannot determine a proper selection range after insertion.' );\\n\\t\\t}\\n\\t} );\\n}\\n\\n/**\\n * Utility class for performing content insertion.\\n *\\n * @private\\n */\\nclass Insertion {\\n\\tconstructor( model, writer, position ) {\\n\\t\\t/**\\n\\t\\t * The model in context of which the insertion should be performed.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model~Model} #model\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * Batch to which deltas will be added.\\n\\t\\t *\\n\\t\\t * @member {module:engine/controller/writer~Batch} #writer\\n\\t\\t */\\n\\t\\tthis.writer = writer;\\n\\n\\t\\t/**\\n\\t\\t * The position at which (or near which) the next node will be inserted.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/position~Position} #position\\n\\t\\t */\\n\\t\\tthis.position = position;\\n\\n\\t\\t/**\\n\\t\\t * Elements with which the inserted elements can be merged.\\n\\t\\t *\\n\\t\\t *\\t\\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\\n\\t\\t *\\t\\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\\n\\t\\t *\\t\\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\\n\\t\\t *\\t\\t\\t\\t\\t\\t\\t\\tso both its pieces will be added to this set)\\n\\t\\t *\\n\\t\\t *\\n\\t\\t * @member {Set} #canMergeWith\\n\\t\\t */\\n\\t\\tthis.canMergeWith = new Set( [ this.position.parent ] );\\n\\n\\t\\t/**\\n\\t\\t * Schema of the model.\\n\\t\\t *\\n\\t\\t * @member {module:engine/model/schema~Schema} #schema\\n\\t\\t */\\n\\t\\tthis.schema = model.schema;\\n\\n\\t\\tthis._filterAttributesOf = [];\\n\\t}\\n\\n\\t/**\\n\\t * Handles insertion of a set of nodes.\\n\\t *\\n\\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\\n\\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\\n\\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\\n\\t */\\n\\thandleNodes( nodes, parentContext ) {\\n\\t\\tnodes = Array.from( nodes );\\n\\n\\t\\tfor ( let i = 0; i < nodes.length; i++ ) {\\n\\t\\t\\tconst node = nodes[ i ];\\n\\n\\t\\t\\tthis._handleNode( node, {\\n\\t\\t\\t\\tisFirst: i === 0 && parentContext.isFirst,\\n\\t\\t\\t\\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\t// TMP this will become a postfixer.\\n\\t\\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\\n\\t\\tthis._filterAttributesOf = [];\\n\\t}\\n\\n\\t/**\\n\\t * Returns range to be selected after insertion.\\n\\t * Returns null if there is no valid range to select after insertion.\\n\\t *\\n\\t * @returns {module:engine/model/range~Range|null}\\n\\t */\\n\\tgetSelectionRange() {\\n\\t\\tif ( this.nodeToSelect ) {\\n\\t\\t\\treturn Range.createOn( this.nodeToSelect );\\n\\t\\t}\\n\\n\\t\\treturn this.model.schema.getNearestSelectionRange( this.position );\\n\\t}\\n\\n\\t/**\\n\\t * Handles insertion of a single node.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node\\n\\t * @param {Object} context\\n\\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\\n\\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\\n\\t */\\n\\t_handleNode( node, context ) {\\n\\t\\t// Let's handle object in a special way.\\n\\t\\t// * They should never be merged with other elements.\\n\\t\\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\\n\\t\\tif ( this.schema.isObject( node ) ) {\\n\\t\\t\\tthis._handleObject( node, context );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Try to find a place for the given node.\\n\\t\\t// Split the position.parent's branch up to a point where the node can be inserted.\\n\\t\\t// If it isn't allowed in the whole branch, then of course don't split anything.\\n\\t\\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\\n\\n\\t\\tif ( !isAllowed ) {\\n\\t\\t\\tthis._handleDisallowedNode( node, context );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis._insert( node );\\n\\n\\t\\t// After the node was inserted we may try to merge it with its siblings.\\n\\t\\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\\n\\t\\t// and only if the selection was in those elements initially.\\n\\t\\t//\\n\\t\\t// E.g.:\\n\\t\\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\\n\\t\\t// and:\\n\\t\\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>y</p><p>z</p> => <p>xy[]z</p>\\n\\t\\t// but:\\n\\t\\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\\n\\t\\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deletetContents\\n\\t\\t//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t it's exactly the same case as above)\\n\\t\\tthis._mergeSiblingsOf( node, context );\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} node The object element.\\n\\t * @param {Object} context\\n\\t */\\n\\t_handleObject( node, context ) {\\n\\t\\t// Try finding it a place in the tree.\\n\\t\\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\\n\\t\\t\\tthis._insert( node );\\n\\t\\t}\\n\\t\\t// Try autoparagraphing.\\n\\t\\telse {\\n\\t\\t\\tthis._tryAutoparagraphing( node, context );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\\n\\t * @param {Object} context\\n\\t */\\n\\t_handleDisallowedNode( node, context ) {\\n\\t\\t// If the node is an element, try inserting its children (strip the parent).\\n\\t\\tif ( node.is( 'element' ) ) {\\n\\t\\t\\tthis.handleNodes( node.getChildren(), context );\\n\\t\\t}\\n\\t\\t// If text is not allowed, try autoparagraphing it.\\n\\t\\telse {\\n\\t\\t\\tthis._tryAutoparagraphing( node, context );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node to insert.\\n\\t */\\n\\t_insert( node ) {\\n\\t\\t/* istanbul ignore if */\\n\\t\\tif ( !this.schema.checkChild( this.position, node ) ) {\\n\\t\\t\\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\\n\\t\\t\\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\\n\\t\\t\\tlog.error(\\n\\t\\t\\t\\t'insertcontent-wrong-position: The node cannot be inserted on the given position.',\\n\\t\\t\\t\\t{ node, position: this.position }\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst livePos = LivePosition.createFromPosition( this.position );\\n\\n\\t\\tthis.writer.insert( node, this.position );\\n\\n\\t\\tthis.position = Position.createFromPosition( livePos );\\n\\t\\tlivePos.detach();\\n\\n\\t\\t// The last inserted object should be selected because we can't put a collapsed selection after it.\\n\\t\\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\\n\\t\\t\\tthis.nodeToSelect = node;\\n\\t\\t} else {\\n\\t\\t\\tthis.nodeToSelect = null;\\n\\t\\t}\\n\\n\\t\\tthis._filterAttributesOf.push( node );\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\\n\\t * @param {Object} context\\n\\t */\\n\\t_mergeSiblingsOf( node, context ) {\\n\\t\\tif ( !( node instanceof Element ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst mergeLeft = this._canMergeLeft( node, context );\\n\\t\\tconst mergeRight = this._canMergeRight( node, context );\\n\\t\\tconst mergePosLeft = LivePosition.createBefore( node );\\n\\t\\tconst mergePosRight = LivePosition.createAfter( node );\\n\\n\\t\\tif ( mergeLeft ) {\\n\\t\\t\\tconst position = LivePosition.createFromPosition( this.position );\\n\\n\\t\\t\\tthis.writer.merge( mergePosLeft );\\n\\n\\t\\t\\tthis.position = Position.createFromPosition( position );\\n\\t\\t\\tposition.detach();\\n\\t\\t}\\n\\n\\t\\tif ( mergeRight ) {\\n\\t\\t\\t/* istanbul ignore if */\\n\\t\\t\\tif ( !this.position.isEqual( mergePosRight ) ) {\\n\\t\\t\\t\\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\\n\\t\\t\\t\\t// At this point the insertion position should be after the node we'll merge. If it isn't,\\n\\t\\t\\t\\t// it should need to be secured as in the left merge case.\\n\\t\\t\\t\\tlog.error( 'insertcontent-wrong-position-on-merge: The insertion position should equal the merge position' );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\\n\\t\\t\\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\\n\\t\\t\\tthis.position = Position.createAt( mergePosRight.nodeBefore, 'end' );\\n\\n\\t\\t\\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\\n\\t\\t\\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\\n\\t\\t\\tconst position = new LivePosition( this.position.root, this.position.path, 'sticksToPrevious' );\\n\\n\\t\\t\\tthis.writer.merge( mergePosRight );\\n\\n\\t\\t\\tthis.position = Position.createFromPosition( position );\\n\\t\\t\\tposition.detach();\\n\\t\\t}\\n\\n\\t\\tif ( mergeLeft || mergeRight ) {\\n\\t\\t\\t// After merge elements that were marked by _insert() to be filtered might be gone so\\n\\t\\t\\t// we need to mark the new container.\\n\\t\\t\\tthis._filterAttributesOf.push( this.position.parent );\\n\\t\\t}\\n\\n\\t\\tmergePosLeft.detach();\\n\\t\\tmergePosRight.detach();\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether specified node can be merged with previous sibling element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\\n\\t * @param {Object} context\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_canMergeLeft( node, context ) {\\n\\t\\tconst previousSibling = node.previousSibling;\\n\\n\\t\\treturn context.isFirst &&\\n\\t\\t\\t( previousSibling instanceof Element ) &&\\n\\t\\t\\tthis.canMergeWith.has( previousSibling ) &&\\n\\t\\t\\tthis.model.schema.checkMerge( previousSibling, node );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether specified node can be merged with next sibling element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\\n\\t * @param {Object} context\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_canMergeRight( node, context ) {\\n\\t\\tconst nextSibling = node.nextSibling;\\n\\n\\t\\treturn context.isLast &&\\n\\t\\t\\t( nextSibling instanceof Element ) &&\\n\\t\\t\\tthis.canMergeWith.has( nextSibling ) &&\\n\\t\\t\\tthis.model.schema.checkMerge( node, nextSibling );\\n\\t}\\n\\n\\t/**\\n\\t * Tries wrapping the node in a new paragraph and inserting it this way.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\\n\\t * @param {Object} context\\n\\t */\\n\\t_tryAutoparagraphing( node, context ) {\\n\\t\\tconst paragraph = this.writer.createElement( 'paragraph' );\\n\\n\\t\\t// Do not autoparagraph if the paragraph won't be allowed there,\\n\\t\\t// cause that would lead to an infinite loop. The paragraph would be rejected in\\n\\t\\t// the next _handleNode() call and we'd be here again.\\n\\t\\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\\n\\t\\t\\tparagraph._appendChildren( node );\\n\\t\\t\\tthis._handleNode( paragraph, context );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node\\n\\t * @returns {Boolean} Whether an allowed position was found.\\n\\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\\n\\t */\\n\\t_checkAndSplitToAllowedPosition( node ) {\\n\\t\\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\\n\\n\\t\\tif ( !allowedIn ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\twhile ( allowedIn != this.position.parent ) {\\n\\t\\t\\t// If a parent which we'd need to leave is a limit element, break.\\n\\t\\t\\tif ( this.schema.isLimit( this.position.parent ) ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( this.position.isAtStart ) {\\n\\t\\t\\t\\tconst parent = this.position.parent;\\n\\t\\t\\t\\tthis.position = Position.createBefore( parent );\\n\\n\\t\\t\\t\\t// Special case – parent is empty (<p>^</p>) so isAtStart == isAtEnd == true.\\n\\t\\t\\t\\t// We can remove the element after moving selection out of it.\\n\\t\\t\\t\\tif ( parent.isEmpty ) {\\n\\t\\t\\t\\t\\tthis.writer.remove( parent );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( this.position.isAtEnd ) {\\n\\t\\t\\t\\tthis.position = Position.createAfter( this.position.parent );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst tempPos = Position.createAfter( this.position.parent );\\n\\n\\t\\t\\t\\tthis.writer.split( this.position );\\n\\n\\t\\t\\t\\tthis.position = tempPos;\\n\\n\\t\\t\\t\\tthis.canMergeWith.add( this.position.nodeAfter );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/node~Node} node The node to check.\\n\\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\\n\\t * @returns {module:engine/model/element~Element|null}\\n\\t */\\n\\t_getAllowedIn( node, element ) {\\n\\t\\tif ( this.schema.checkChild( element, node ) ) {\\n\\t\\t\\treturn element;\\n\\t\\t}\\n\\n\\t\\tif ( element.parent ) {\\n\\t\\t\\treturn this._getAllowedIn( node, element.parent );\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/utils/deletecontent\\n */\\n\\nimport LivePosition from '../liveposition';\\nimport Position from '../position';\\nimport Range from '../range';\\nimport DocumentSelection from '../documentselection';\\n\\n/**\\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\\n *\\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\\n * should be performed.\\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\\n * Selection of which the content should be deleted.\\n * @param {module:engine/model/batch~Batch} batch Batch to which the deltas will be added.\\n * @param {Object} [options]\\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\\n *\\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\\n *\\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\\n *\\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\\n * elements will not be merged.\\n *\\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\\n * paragraph when the entire content was selected.\\n *\\n * For example `<heading>[x</heading><paragraph>y]</paragraph> will become:\\n *\\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\\n */\\nexport default function deleteContent( model, selection, options = {} ) {\\n\\tif ( selection.isCollapsed ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst schema = model.schema;\\n\\n\\tmodel.change( writer => {\\n\\t\\t// 1. Replace the entire content with paragraph.\\n\\t\\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\\n\\t\\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\\n\\t\\t\\treplaceEntireContentWithParagraph( writer, selection, schema );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst selRange = selection.getFirstRange();\\n\\t\\tconst startPos = selRange.start;\\n\\t\\tconst endPos = LivePosition.createFromPosition( selRange.end );\\n\\n\\t\\t// 2. Remove the content if there is any.\\n\\t\\tif ( !selRange.start.isTouching( selRange.end ) ) {\\n\\t\\t\\twriter.remove( selRange );\\n\\t\\t}\\n\\n\\t\\t// 3. Merge elements in the right branch to the elements in the left branch.\\n\\t\\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\\n\\t\\t//\\n\\t\\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\\n\\t\\t//\\n\\t\\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\\n\\t\\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\\n\\t\\t// want to override that behavior anyway.\\n\\t\\tif ( !options.leaveUnmerged ) {\\n\\t\\t\\tmergeBranches( writer, startPos, endPos );\\n\\n\\t\\t\\t// TMP this will be replaced with a postifxer.\\n\\t\\t\\t// We need to check and strip disallowed attributes in all nested nodes because after merge\\n\\t\\t\\t// some attributes could end up in a path where are disallowed.\\n\\t\\t\\t//\\n\\t\\t\\t// e.g. bold is disallowed for <H1>\\n\\t\\t\\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\\n\\t\\t\\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\\n\\t\\t}\\n\\n\\t\\tif ( selection instanceof DocumentSelection ) {\\n\\t\\t\\twriter.setSelection( startPos );\\n\\t\\t} else {\\n\\t\\t\\tselection.setTo( startPos );\\n\\t\\t}\\n\\n\\t\\t// 4. Autoparagraphing.\\n\\t\\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\\n\\t\\tif ( shouldAutoparagraph( schema, startPos ) ) {\\n\\t\\t\\tinsertParagraph( writer, startPos, selection );\\n\\t\\t}\\n\\n\\t\\tendPos.detach();\\n\\t} );\\n}\\n\\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\\nfunction mergeBranches( writer, startPos, endPos ) {\\n\\tconst startParent = startPos.parent;\\n\\tconst endParent = endPos.parent;\\n\\n\\t// If both positions ended up in the same parent, then there's nothing more to merge:\\n\\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\\n\\tif ( startParent == endParent ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// If one of the positions is a root, then there's nothing more to merge (at least in the current state of implementation).\\n\\t// Theoretically in this case we could unwrap the <p>: <$root>x[]<p>{}y</p></$root>, but we don't need to support it yet\\n\\t// so let's just abort.\\n\\tif ( !startParent.parent || !endParent.parent ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\\n\\t// E.g., we can't merge endParent into startParent in this case:\\n\\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\\n\\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Remember next positions to merge. For example:\\n\\t// <a><b>x[]</b></a><c><d>{}y</d></c>\\n\\t// will become:\\n\\t// <a><b>xy</b>[]</a><c>{}</c>\\n\\tstartPos = Position.createAfter( startParent );\\n\\tendPos = Position.createBefore( endParent );\\n\\n\\tif ( !endPos.isEqual( startPos ) ) {\\n\\t\\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\\n\\t\\t// <a><b>x[]</b></a><c><d>{}y</d></c>\\n\\t\\t// becomes:\\n\\t\\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\\n\\t\\twriter.insert( endParent, startPos );\\n\\t}\\n\\n\\t// Merge two siblings:\\n\\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\\n\\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \\\"move parent\\\" case shown above)\\n\\twriter.merge( startPos );\\n\\n\\t// Remove empty end ancestors:\\n\\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\\n\\t// becomes:\\n\\t// <a>fo[]</a><b><a>{}</a></b>\\n\\t// So we can remove <a> and <b>.\\n\\twhile ( endPos.parent.isEmpty ) {\\n\\t\\tconst parentToRemove = endPos.parent;\\n\\n\\t\\tendPos = Position.createBefore( parentToRemove );\\n\\n\\t\\twriter.remove( parentToRemove );\\n\\t}\\n\\n\\t// Continue merging next level.\\n\\tmergeBranches( writer, startPos, endPos );\\n}\\n\\nfunction shouldAutoparagraph( schema, position ) {\\n\\tconst isTextAllowed = schema.checkChild( position, '$text' );\\n\\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\\n\\n\\treturn !isTextAllowed && isParagraphAllowed;\\n}\\n\\n// Check if parents of two positions can be merged by checking if there are no limit/object\\n// boundaries between those two positions.\\n//\\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\\n// we'll check <p>, <bQ>, <widget> and <caption>.\\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\\n\\tconst rangeToCheck = new Range( leftPos, rightPos );\\n\\n\\tfor ( const value of rangeToCheck.getWalker() ) {\\n\\t\\tif ( schema.isObject( value.item ) || schema.isLimit( value.item ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\treturn true;\\n}\\n\\nfunction insertParagraph( writer, position, selection ) {\\n\\tconst paragraph = writer.createElement( 'paragraph' );\\n\\n\\twriter.insert( paragraph, position );\\n\\n\\tif ( selection instanceof DocumentSelection ) {\\n\\t\\twriter.setSelection( paragraph, 0 );\\n\\t} else {\\n\\t\\tselection.setTo( paragraph, 0 );\\n\\t}\\n}\\n\\nfunction replaceEntireContentWithParagraph( writer, selection ) {\\n\\tconst limitElement = writer.model.schema.getLimitElement( selection );\\n\\n\\twriter.remove( Range.createIn( limitElement ) );\\n\\tinsertParagraph( writer, Position.createAt( limitElement ), selection );\\n}\\n\\n// We want to replace the entire content with a paragraph when:\\n// * the entire content is selected,\\n// * selection contains at least two elements,\\n// * whether the paragraph is allowed in schema in the common ancestor.\\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\\n\\tconst limitElement = schema.getLimitElement( selection );\\n\\n\\tif ( !selection.containsEntireContent( limitElement ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tconst range = selection.getFirstRange();\\n\\n\\tif ( range.start.parent == range.end.parent ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn schema.checkChild( limitElement, 'paragraph' );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/utils/modifyselection\\n */\\n\\nimport Position from '../position';\\nimport TreeWalker from '../treewalker';\\nimport Range from '../range';\\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\\nimport DocumentSelection from '../documentselection';\\n\\nconst wordBoundaryCharacters = ' ,.?!:;\\\"-()';\\n\\n/**\\n * Modifies the selection. Currently, the supported modifications are:\\n *\\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\\n * Possible values for `unit` are:\\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\\n *  character in `String` sense. However, unicode also defines \\\"combing marks\\\". These are special symbols, that combines\\n *  with a symbol before it (\\\"base character\\\") to create one user-perceived character. For example, `q̣̇` is a normal\\n *  letter `q` with two \\\"combining marks\\\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\\n *  selection by one position, it is correct to include both \\\"base character\\\" and all of it's \\\"combining marks\\\". That is\\n *  why `'character'` value is most natural and common method of modifying selection.\\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\\n *  selection between \\\"base character\\\" and \\\"combining mark\\\", because \\\"combining marks\\\" have their own unicode code points.\\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\\n *  two characters, called \\\"surrogate pairs\\\". Halves of \\\"surrogate pairs\\\" have a meaning only when placed next to each other.\\n *  For example `𨭎` is represented in `String` by `\\\\uD862\\\\uDF4E`. Both `\\\\uD862` and `\\\\uDF4E` do not have any meaning\\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\\n *  extension will include whole \\\"surrogate pair\\\".\\n *  * `'word'` - moves selection by a whole word.\\n *\\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\\n *\\n * @param {module:engine/model/model~Model} model The model in context of which\\n * the selection modification should be performed.\\n * @param {module:engine/model/selection~Selection} selection The selection to modify.\\n * @param {Object} [options]\\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\\n */\\nexport default function modifySelection( model, selection, options = {} ) {\\n\\tconst schema = model.schema;\\n\\tconst isForward = options.direction != 'backward';\\n\\tconst unit = options.unit ? options.unit : 'character';\\n\\n\\tconst focus = selection.focus;\\n\\n\\tconst walker = new TreeWalker( {\\n\\t\\tboundaries: getSearchRange( focus, isForward ),\\n\\t\\tsingleCharacters: true,\\n\\t\\tdirection: isForward ? 'forward' : 'backward'\\n\\t} );\\n\\n\\tconst data = { walker, schema, isForward, unit };\\n\\n\\tlet next;\\n\\n\\twhile ( ( next = walker.next() ) ) {\\n\\t\\tif ( next.done ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst position = tryExtendingTo( data, next.value );\\n\\n\\t\\tif ( position ) {\\n\\t\\t\\tif ( selection instanceof DocumentSelection ) {\\n\\t\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\t\\twriter.setSelectionFocus( position );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tselection.setFocus( position );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\\n\\n// Checks whether the selection can be extended to the the walker's next value (next position).\\n// @param {{ walker, unit, isForward, schema }} data\\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\\nfunction tryExtendingTo( data, value ) {\\n\\t// If found text, we can certainly put the focus in it. Let's just find a correct position\\n\\t// based on the unit.\\n\\tif ( value.type == 'text' ) {\\n\\t\\tif ( data.unit === 'word' ) {\\n\\t\\t\\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\\n\\t\\t}\\n\\n\\t\\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\\n\\t}\\n\\n\\t// Entering an element.\\n\\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\\n\\t\\t// If it's an object, we can select it now.\\n\\t\\tif ( data.schema.isObject( value.item ) ) {\\n\\t\\t\\treturn Position.createAt( value.item, data.isForward ? 'after' : 'before' );\\n\\t\\t}\\n\\n\\t\\t// If text allowed on this position, extend to this place.\\n\\t\\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\\n\\t\\t\\treturn value.nextPosition;\\n\\t\\t}\\n\\t}\\n\\t// Leaving an element.\\n\\telse {\\n\\t\\t// If leaving a limit element, stop.\\n\\t\\tif ( data.schema.isLimit( value.item ) ) {\\n\\t\\t\\t// NOTE: Fast-forward the walker until the end.\\n\\t\\t\\tdata.walker.skip( () => true );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// If text allowed on this position, extend to this place.\\n\\t\\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\\n\\t\\t\\treturn value.nextPosition;\\n\\t\\t}\\n\\t}\\n}\\n\\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\\n// or should be extended further.\\n//\\n// @param {module:engine/model/treewalker~TreeWalker} walker\\n// @param {String} unit The unit by which selection should be modified.\\nfunction getCorrectPosition( walker, unit ) {\\n\\tconst textNode = walker.position.textNode;\\n\\n\\tif ( textNode ) {\\n\\t\\tconst data = textNode.data;\\n\\t\\tlet offset = walker.position.offset - textNode.startOffset;\\n\\n\\t\\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\\n\\t\\t\\twalker.next();\\n\\n\\t\\t\\toffset = walker.position.offset - textNode.startOffset;\\n\\t\\t}\\n\\t}\\n\\n\\treturn walker.position;\\n}\\n\\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\\n// or should be extended further.\\n//\\n// @param {module:engine/model/treewalker~TreeWalker} walker\\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\\nfunction getCorrectWordBreakPosition( walker, isForward ) {\\n\\tlet textNode = walker.position.textNode;\\n\\n\\tif ( textNode ) {\\n\\t\\tlet offset = walker.position.offset - textNode.startOffset;\\n\\n\\t\\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\\n\\t\\t\\twalker.next();\\n\\n\\t\\t\\t// Check of adjacent text nodes with different attributes (like BOLD).\\n\\t\\t\\t// Example          : 'foofoo []bar<$text bold=\\\"true\\\">bar</$text> bazbaz'\\n\\t\\t\\t// should expand to : 'foofoo [bar<$text bold=\\\"true\\\">bar</$text>] bazbaz'.\\n\\t\\t\\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\\n\\n\\t\\t\\tif ( nextNode ) {\\n\\t\\t\\t\\t// Check boundary char of an adjacent text node.\\n\\t\\t\\t\\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\\n\\n\\t\\t\\t\\t// Go to the next node if the character at the boundary of that node belongs to the same word.\\n\\t\\t\\t\\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\\n\\t\\t\\t\\t\\t// If adjacent text node belongs to the same word go to it & reset values.\\n\\t\\t\\t\\t\\twalker.next();\\n\\n\\t\\t\\t\\t\\ttextNode = walker.position.textNode;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\toffset = walker.position.offset - textNode.startOffset;\\n\\t\\t}\\n\\t}\\n\\n\\treturn walker.position;\\n}\\n\\nfunction getSearchRange( start, isForward ) {\\n\\tconst root = start.root;\\n\\tconst searchEnd = Position.createAt( root, isForward ? 'end' : 0 );\\n\\n\\tif ( isForward ) {\\n\\t\\treturn new Range( start, searchEnd );\\n\\t} else {\\n\\t\\treturn new Range( searchEnd, start );\\n\\t}\\n}\\n\\n// Checks if selection is on word boundary.\\n//\\n// @param {String} data The text node value to investigate.\\n// @param {Number} offset Position offset.\\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\\nfunction isAtWordBoundary( data, offset, isForward ) {\\n\\t// The offset to check depends on direction.\\n\\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\\n\\n\\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\\n}\\n\\n// Checks if selection is on node boundary.\\n//\\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\\n// @param {Number} offset Position offset.\\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\\n\\treturn offset === ( isForward ? textNode.endOffset : 0 );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/utils/getselectedcontent\\n */\\n\\nimport Range from '../range';\\nimport Position from '../position';\\n\\n/**\\n * Gets a clone of the selected content.\\n *\\n * For example, for the following selection:\\n *\\n *\\t\\t<p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\\n *\\n * It will return a document fragment with such a content:\\n *\\n *\\t\\t<quote><h>st</h></quote><p>se</p>\\n *\\n * @param {module:engine/model/model~Model} model The model in context of which\\n * the selection modification should be performed.\\n * @param {module:engine/model/selection~Selection} selection The selection of which content will be returned.\\n * @returns {module:engine/model/documentfragment~DocumentFragment}\\n */\\nexport default function getSelectedContent( model, selection ) {\\n\\treturn model.change( writer => {\\n\\t\\tconst frag = writer.createDocumentFragment();\\n\\t\\tconst range = selection.getFirstRange();\\n\\n\\t\\tif ( !range || range.isCollapsed ) {\\n\\t\\t\\treturn frag;\\n\\t\\t}\\n\\n\\t\\tconst root = range.start.root;\\n\\t\\tconst commonPath = range.start.getCommonPath( range.end );\\n\\t\\tconst commonParent = root.getNodeByPath( commonPath );\\n\\n\\t\\t// ## 1st step\\n\\t\\t//\\n\\t\\t// First, we'll clone a fragment represented by a minimal flat range\\n\\t\\t// containing the original range to be cloned.\\n\\t\\t// E.g. let's consider such a range:\\n\\t\\t//\\n\\t\\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\\n\\t\\t//\\n\\t\\t// A minimal flat range containing this one is:\\n\\t\\t//\\n\\t\\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\\n\\t\\t//\\n\\t\\t// We can easily clone this structure, preserving e.g. the <quote> element.\\n\\t\\tlet flatSubtreeRange;\\n\\n\\t\\tif ( range.start.parent == range.end.parent ) {\\n\\t\\t\\t// The original range is flat, so take it.\\n\\t\\t\\tflatSubtreeRange = range;\\n\\t\\t} else {\\n\\t\\t\\tflatSubtreeRange = Range.createFromParentsAndOffsets(\\n\\t\\t\\t\\tcommonParent, range.start.path[ commonPath.length ],\\n\\t\\t\\t\\tcommonParent, range.end.path[ commonPath.length ] + 1\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\\n\\n\\t\\t// Clone the whole contents.\\n\\t\\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\\n\\t\\t\\tif ( item.is( 'textProxy' ) ) {\\n\\t\\t\\t\\twriter.appendText( item.data, item.getAttributes(), frag );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twriter.append( item._clone( true ), frag );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// ## 2nd step\\n\\t\\t//\\n\\t\\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\\n\\t\\t//\\n\\t\\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\\n\\t\\t//\\n\\t\\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\\n\\t\\t//\\n\\t\\t// So this will be the final copied content:\\n\\t\\t//\\n\\t\\t// <quote><h>st</h></quote><p>se</p>\\n\\t\\t//\\n\\t\\t// In order to do that, we remove content from these two ranges:\\n\\t\\t//\\n\\t\\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\\n\\t\\tif ( flatSubtreeRange != range ) {\\n\\t\\t\\t// Find the position of the original range in the cloned fragment.\\n\\t\\t\\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, Position.createAt( frag, 0 ), howMany )[ 0 ];\\n\\n\\t\\t\\tconst leftExcessRange = new Range( Position.createAt( frag ), newRange.start );\\n\\t\\t\\tconst rightExcessRange = new Range( newRange.end, Position.createAt( frag, 'end' ) );\\n\\n\\t\\t\\tremoveRangeContent( rightExcessRange, writer );\\n\\t\\t\\tremoveRangeContent( leftExcessRange, writer );\\n\\t\\t}\\n\\n\\t\\treturn frag;\\n\\t} );\\n}\\n\\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\\nfunction removeRangeContent( range, writer ) {\\n\\tconst parentsToCheck = [];\\n\\n\\tArray.from( range.getItems( { direction: 'backward' } ) )\\n\\t\\t// We should better store ranges because text proxies will lose integrity\\n\\t\\t// with the text nodes when we'll start removing content.\\n\\t\\t.map( item => Range.createOn( item ) )\\n\\t\\t// Filter only these items which are fully contained in the passed range.\\n\\t\\t//\\n\\t\\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\\n\\t\\t// the walker will return the entire <h> element, when only the \\\"fir\\\" item inside it is fully contained.\\n\\t\\t.filter( itemRange => {\\n\\t\\t\\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\\n\\t\\t\\tconst contained =\\n\\t\\t\\t\\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\\n\\t\\t\\t\\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\\n\\n\\t\\t\\treturn contained;\\n\\t\\t} )\\n\\t\\t.forEach( itemRange => {\\n\\t\\t\\tparentsToCheck.push( itemRange.start.parent );\\n\\n\\t\\t\\twriter.remove( itemRange );\\n\\t\\t} );\\n\\n\\t// Remove ancestors of the removed items if they turned to be empty now\\n\\t// (their whole content was contained in the range).\\n\\tparentsToCheck.forEach( parentToCheck => {\\n\\t\\tlet parent = parentToCheck;\\n\\n\\t\\twhile ( parent.parent && parent.isEmpty ) {\\n\\t\\t\\tconst removeRange = Range.createOn( parent );\\n\\n\\t\\t\\tparent = parent.parent;\\n\\n\\t\\t\\twriter.remove( removeRange );\\n\\t\\t}\\n\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/model/model\\n */\\n\\n// Load all basic deltas and transformations, they register themselves.\\nimport './delta/basic-deltas';\\nimport './delta/basic-transformations';\\n\\nimport Batch from './batch';\\nimport Writer from './writer';\\nimport Schema from './schema';\\nimport Document from './document';\\nimport MarkerCollection from './markercollection';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport deltaTransform from './delta/transform';\\nimport ModelElement from './element';\\nimport ModelRange from './range';\\n\\nimport insertContent from './utils/insertcontent';\\nimport deleteContent from './utils/deletecontent';\\nimport modifySelection from './utils/modifyselection';\\nimport getSelectedContent from './utils/getselectedcontent';\\n\\n/**\\n * Editor's data model class. Model defines all the data: both nodes that are attached to the roots of the\\n * {@link module:engine/model/model~Model#document model document}, and also all detached nodes which has not been yet\\n * added to the document.\\n *\\n * All those nodes are created and modified by the {@link module:engine/model/writer~Writer model writer}, which can be\\n * accessed by using {@link module:engine/model/model~Model#change} or {@link module:engine/model/model~Model#enqueueChange} methods.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Model {\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Models markers' collection.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/markercollection~MarkerCollection}\\n\\t\\t */\\n\\t\\tthis.markers = new MarkerCollection();\\n\\n\\t\\t/**\\n\\t\\t * Editors document model.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/document~Document}\\n\\t\\t */\\n\\t\\tthis.document = new Document( this );\\n\\n\\t\\t/**\\n\\t\\t * Schema for editors model.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/schema~Schema}\\n\\t\\t */\\n\\t\\tthis.schema = new Schema();\\n\\n\\t\\t/**\\n\\t\\t * All callbacks added by {@link module:engine/model/model~Model#change} or\\n\\t\\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Array.<Function>}\\n\\t\\t */\\n\\t\\tthis._pendingChanges = [];\\n\\n\\t\\t/**\\n\\t\\t * The last created and currently used writer instance.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/model/writer~Writer}\\n\\t\\t */\\n\\t\\tthis._currentWriter = null;\\n\\n\\t\\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\\n\\t\\t\\t.forEach( methodName => this.decorate( methodName ) );\\n\\n\\t\\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\\n\\t\\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\\n\\t\\tthis.on( 'applyOperation', ( evt, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\toperation._validate();\\n\\t\\t}, { priority: 'highest' } );\\n\\n\\t\\t// Register some default abstract entities.\\n\\t\\tthis.schema.register( '$root', {\\n\\t\\t\\tisLimit: true\\n\\t\\t} );\\n\\t\\tthis.schema.register( '$block', {\\n\\t\\t\\tallowIn: '$root',\\n\\t\\t\\tisBlock: true\\n\\t\\t} );\\n\\t\\tthis.schema.register( '$text', {\\n\\t\\t\\tallowIn: '$block'\\n\\t\\t} );\\n\\t\\tthis.schema.register( '$clipboardHolder', {\\n\\t\\t\\tallowContentOf: '$root',\\n\\t\\t\\tisLimit: true\\n\\t\\t} );\\n\\t\\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\\n\\n\\t\\t// Element needed by `upcastElementToMarker` converter.\\n\\t\\t// This element temporarily represents marker bound during conversion process and is removed\\n\\t\\t// at the end of conversion. `UpcastDispatcher` or at least `Conversion` class looks like a better for this\\n\\t\\t// registration but both know nothing about Schema.\\n\\t\\tthis.schema.register( '$marker', {\\n\\t\\t\\tallowIn: [ '$root', '$block' ]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Change method is the primary way of changing the model. You should use it to modify any node, including detached\\n\\t * nodes (not added to the {@link module:engine/model/model~Model#document model document}).\\n\\t *\\n\\t *\\t\\tmodel.change( writer => {\\n\\t *\\t\\t\\twriter.insertText( 'foo', paragraph, 'end' );\\n\\t *\\t\\t} );\\n\\t *\\n\\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they share the same\\n\\t * undo step.\\n\\t *\\n\\t *\\t\\tmodel.change( writer => {\\n\\t *\\t\\t\\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\\n\\t *\\n\\t *\\t\\t\\tmodel.change( writer => {\\n\\t *\\t\\t\\t\\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\\n\\t *\\t\\t\\t} );\\n\\t *\\n\\t * \\t\\t\\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\\n\\t *\\t\\t} );\\n\\t *\\n\\t * Change block is executed immediately.\\n\\t *\\n\\t * You can also return a value from the change block.\\n\\t *\\n\\t *\\t\\tconst img = model.change( writer => {\\n\\t *\\t\\t\\treturn writer.createElement( 'img' );\\n\\t *\\t\\t} );\\n\\t *\\n\\t * When the outermost block is done the {@link #event:_change} event is fired.\\n\\t *\\n\\t * @see #enqueueChange\\n\\t * @param {Function} callback Callback function which may modify the model.\\n\\t * @returns {*} Value returned by the callback.\\n\\t */\\n\\tchange( callback ) {\\n\\t\\tif ( this._pendingChanges.length === 0 ) {\\n\\t\\t\\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\\n\\t\\t\\tthis._pendingChanges.push( { batch: new Batch(), callback } );\\n\\n\\t\\t\\treturn this._runPendingChanges()[ 0 ];\\n\\t\\t} else {\\n\\t\\t\\t// If this is not the outermost block, just execute the callback.\\n\\t\\t\\treturn callback( this._currentWriter );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * `enqueueChange` method performs similar task as the {@link #change change method}, with two major differences.\\n\\t *\\n\\t * First, the callback of the `enqueueChange` is executed when all other changes are done. It might be executed\\n\\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\\n\\t * it will be delayed and executed after the outermost block.\\n\\t *\\n\\t *\\t\\tmodel.change( writer => {\\n\\t *\\t\\t\\tconsole.log( 1 );\\n\\t *\\n\\t *\\t\\t\\tmodel.enqueueChange( writer => {\\n\\t *\\t\\t\\t\\tconsole.log( 2 );\\n\\t *\\t\\t\\t} );\\n\\t *\\n\\t * \\t\\t\\tconsole.log( 3 );\\n\\t *\\t\\t} ); // Will log: 1, 3, 2.\\n\\t *\\n\\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\\n\\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\\n\\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\\n\\t *\\n\\t * Using `enqueueChange` block you can also add some changes to the batch you used before.\\n\\t *\\n\\t *\\t\\tmodel.enqueueChange( batch, writer => {\\n\\t *\\t\\t\\twriter.insertText( 'foo', paragraph, 'end' );\\n\\t *\\t\\t} );\\n\\t *\\n\\t * `Batch` instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\\n\\t *\\n\\t * @param {module:engine/model/batch~Batch|String} batchOrType Batch or batch type should be used in the callback.\\n\\t * If not defined, a new batch will be created.\\n\\t * @param {Function} callback Callback function which may modify the model.\\n\\t */\\n\\tenqueueChange( batchOrType, callback ) {\\n\\t\\tif ( typeof batchOrType === 'string' ) {\\n\\t\\t\\tbatchOrType = new Batch( batchOrType );\\n\\t\\t} else if ( typeof batchOrType == 'function' ) {\\n\\t\\t\\tcallback = batchOrType;\\n\\t\\t\\tbatchOrType = new Batch();\\n\\t\\t}\\n\\n\\t\\tthis._pendingChanges.push( { batch: batchOrType, callback } );\\n\\n\\t\\tif ( this._pendingChanges.length == 1 ) {\\n\\t\\t\\tthis._runPendingChanges();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function to apply\\n\\t * {@link module:engine/model/operation/operation~Operation operations} on the model.\\n\\t *\\n\\t * @param {module:engine/model/operation/operation~Operation} operation Operation to apply\\n\\t */\\n\\tapplyOperation( operation ) {\\n\\t\\toperation._execute();\\n\\t}\\n\\n\\t/**\\n\\t * Transforms two sets of deltas by themselves. Returns both transformed sets.\\n\\t *\\n\\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasA Array with the first set of deltas to transform. These\\n\\t * deltas are considered more important (than `deltasB`) when resolving conflicts.\\n\\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltasB Array with the second set of deltas to transform. These\\n\\t * deltas are considered less important (than `deltasA`) when resolving conflicts.\\n\\t * @param {Boolean} [useContext=false] When set to `true`, transformation will store and use additional context\\n\\t * information to guarantee more expected results. Should be used whenever deltas related to already applied\\n\\t * deltas are transformed (for example when undoing changes).\\n\\t * @returns {Object}\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasA The first set of deltas transformed\\n\\t * by the second set of deltas.\\n\\t * @returns {Array.<module:engine/model/delta/delta~Delta>} return.deltasB The second set of deltas transformed\\n\\t * by the first set of deltas.\\n\\t */\\n\\ttransformDeltas( deltasA, deltasB, useContext = false ) {\\n\\t\\treturn deltaTransform.transformDeltaSets( deltasA, deltasB, useContext ? this.document : null );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/utils/insertcontent~insertContent}.\\n\\t *\\n\\t * @fires insertContent\\n\\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\\n\\t * @param {module:engine/model/selection~Selection} selection Selection into which the content should be inserted.\\n\\t */\\n\\tinsertContent( content, selection ) {\\n\\t\\tinsertContent( this, content, selection );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/utils/deletecontent.deleteContent}.\\n\\t *\\n\\t * Note: For the sake of predictability, the resulting selection should always be collapsed.\\n\\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\\n\\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\\n\\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\\n\\t * will need to modify this method's behavior too, e.g. to \\\"delete contents and then collapse\\n\\t * the selection inside the last selected cell\\\" or \\\"delete the row and collapse selection somewhere near\\\".\\n\\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\\n\\t *\\n\\t * @fires deleteContent\\n\\t * @param {module:engine/model/selection~Selection} selection Selection of which the content should be deleted.\\n\\t * @param {Object} options See {@link module:engine/model/utils/deletecontent~deleteContent}'s options.\\n\\t */\\n\\tdeleteContent( selection, options ) {\\n\\t\\tdeleteContent( this, selection, options );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/utils/modifyselection~modifySelection}.\\n\\t *\\n\\t * @fires modifySelection\\n\\t * @param {module:engine/model/selection~Selection} selection The selection to modify.\\n\\t * @param {Object} options See {@link module:engine/model/utils/modifyselection.modifySelection}'s options.\\n\\t */\\n\\tmodifySelection( selection, options ) {\\n\\t\\tmodifySelection( this, selection, options );\\n\\t}\\n\\n\\t/**\\n\\t * See {@link module:engine/model/utils/getselectedcontent~getSelectedContent}.\\n\\t *\\n\\t * @fires getSelectedContent\\n\\t * @param {module:engine/model/selection~Selection} selection The selection of which content will be retrieved.\\n\\t * @returns {module:engine/model/documentfragment~DocumentFragment} Document fragment holding the clone of the selected content.\\n\\t */\\n\\tgetSelectedContent( selection ) {\\n\\t\\treturn getSelectedContent( this, selection );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether given {@link module:engine/model/range~Range range} or {@link module:engine/model/element~Element element}\\n\\t * has any content.\\n\\t *\\n\\t * Content is any text node or element which is registered in {@link module:engine/model/schema~Schema schema}.\\n\\t *\\n\\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\\n\\t * @returns {Boolean}\\n\\t */\\n\\thasContent( rangeOrElement ) {\\n\\t\\tif ( rangeOrElement instanceof ModelElement ) {\\n\\t\\t\\trangeOrElement = ModelRange.createIn( rangeOrElement );\\n\\t\\t}\\n\\n\\t\\tif ( rangeOrElement.isCollapsed ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tfor ( const item of rangeOrElement.getItems() ) {\\n\\t\\t\\t// Remember, `TreeWalker` returns always `textProxy` nodes.\\n\\t\\t\\tif ( item.is( 'textProxy' ) || this.schema.isObject( item ) ) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.document.destroy();\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\\n\\t * which calls callbacks and returns array of values returned by these callbacks.\\n\\t *\\n\\t * @private\\n\\t * @returns {Array.<*>} Array of values returned by callbacks.\\n\\t */\\n\\t_runPendingChanges() {\\n\\t\\tconst ret = [];\\n\\n\\t\\twhile ( this._pendingChanges.length ) {\\n\\t\\t\\t// Create a new writer using batch instance created for this chain of changes.\\n\\t\\t\\tconst currentBatch = this._pendingChanges[ 0 ].batch;\\n\\t\\t\\tthis._currentWriter = new Writer( this, currentBatch );\\n\\n\\t\\t\\t// Execute changes callback and gather the returned value.\\n\\t\\t\\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\\n\\t\\t\\tret.push( callbackReturnValue );\\n\\n\\t\\t\\t// Fire internal `_change` event.\\n\\t\\t\\tthis.fire( '_change', this._currentWriter );\\n\\n\\t\\t\\tthis._pendingChanges.shift();\\n\\t\\t\\tthis._currentWriter = null;\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\t/**\\n\\t * Fired after leaving each {@link module:engine/model/model~Model#enqueueChange} block or outermost\\n\\t * {@link module:engine/model/model~Model#change} block.\\n\\t *\\n\\t * **Note:** This is an internal event! Use {@link module:engine/model/document~Document#event:change} instead.\\n\\t *\\n\\t * @protected\\n\\t * @event _change\\n\\t * @param {module:engine/model/writer~Writer} writer `Writer` instance that has been used in the change block.\\n\\t */\\n\\n\\t/**\\n\\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\\n\\t * using {@link #applyOperation}.\\n\\t *\\n\\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\\n\\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\\n\\t * be used.\\n\\t *\\n\\t * A few callbacks are already added to this event by engine internal classes:\\n\\t *\\n\\t * * with `highest` priority operation is validated,\\n\\t * * with `normal` priority operation is executed,\\n\\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\\n\\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\\n\\t * update themselves.\\n\\t *\\n\\t * @event applyOperation\\n\\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\\n\\t * {@link module:engine/model/operation/operation~Operation operation}.\\n\\t */\\n\\n\\t/**\\n\\t * Event fired when {@link #insertContent} method is called.\\n\\t *\\n\\t * The {@link #insertContent default action of that method} is implemented as a\\n\\t * listener to this event so it can be fully customized by the features.\\n\\t *\\n\\t * @event insertContent\\n\\t * @param {Array} args The arguments passed to the original method.\\n\\t */\\n\\n\\t/**\\n\\t * Event fired when {@link #deleteContent} method is called.\\n\\t *\\n\\t * The {@link #deleteContent default action of that method} is implemented as a\\n\\t * listener to this event so it can be fully customized by the features.\\n\\t *\\n\\t * @event deleteContent\\n\\t * @param {Array} args The arguments passed to the original method.\\n\\t */\\n\\n\\t/**\\n\\t * Event fired when {@link #modifySelection} method is called.\\n\\t *\\n\\t * The {@link #modifySelection default action of that method} is implemented as a\\n\\t * listener to this event so it can be fully customized by the features.\\n\\t *\\n\\t * @event modifySelection\\n\\t * @param {Array} args The arguments passed to the original method.\\n\\t */\\n\\n\\t/**\\n\\t * Event fired when {@link #getSelectedContent} method is called.\\n\\t *\\n\\t * The {@link #getSelectedContent default action of that method} is implemented as a\\n\\t * listener to this event so it can be fully customized by the features.\\n\\t *\\n\\t * @event getSelectedContent\\n\\t * @param {Array} args The arguments passed to the original method.\\n\\t */\\n}\\n\\nmix( Model, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/keystrokehandler\\n */\\n\\nimport DomEmitterMixin from './dom/emittermixin';\\nimport { getCode, parseKeystroke } from './keyboard';\\n\\n/**\\n * Keystroke handler registers keystrokes so the callbacks associated\\n * with these keystrokes will be executed if the matching `keydown` is fired\\n * by a defined emitter.\\n *\\n *\\t\\tconst handler = new KeystrokeHandler();\\n *\\n *\\t\\thandler.listenTo( emitter );\\n *\\n *\\t\\thandler.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\\n *\\t\\t\\tconsole.log( 'Ctrl+A has been pressed' );\\n *\\t\\t\\tcancel();\\n *\\t\\t} );\\n */\\nexport default class KeystrokeHandler {\\n\\t/**\\n\\t * Creates an instance of the keystroke handler.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * Listener used to listen to events for easier keystroke handler destruction.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:utils/dom/emittermixin~Emitter}\\n\\t\\t */\\n\\t\\tthis._listener = Object.create( DomEmitterMixin );\\n\\t}\\n\\n\\t/**\\n\\t * Starts listening for `keydown` events from a given emitter.\\n\\t *\\n\\t * @param {module:utils/emittermixin~Emitter} emitter\\n\\t */\\n\\tlistenTo( emitter ) {\\n\\t\\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\\n\\t\\t// keystroke so the listeners can be attached to them with different priorities.\\n\\t\\t//\\n\\t\\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\\n\\t\\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\\n\\t\\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\\n\\t\\t// only with other listeners of this particular event, thus making it possible to prioritize\\n\\t\\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\\n\\t\\t// the KeystrokeHandler re–uses it to do its job.\\n\\t\\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\\n\\t\\t\\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Registers a handler for the specified keystroke.\\n\\t *\\n\\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\\n\\t * the {@link module:utils/keyboard~parseKeystroke} function.\\n\\t * @param {Function} callback A function called with the\\n\\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\\n\\t * a helper to both `preventDefault` and `stopPropagation` of the event.\\n\\t * @param {Object} [options={}] Additional options.\\n\\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\\n\\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\\n\\t * are called in the order they were added.\\n\\t */\\n\\tset( keystroke, callback, options = {} ) {\\n\\t\\tconst keyCode = parseKeystroke( keystroke );\\n\\t\\tconst priority = options.priority;\\n\\n\\t\\t// Execute the passed callback on KeystrokeHandler#_keydown.\\n\\t\\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\\n\\t\\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\\n\\t\\t\\tcallback( keyEvtData, () => {\\n\\t\\t\\t\\t// Stop the event in the DOM: no listener in the web page\\n\\t\\t\\t\\t// will be triggered by this event.\\n\\t\\t\\t\\tkeyEvtData.preventDefault();\\n\\t\\t\\t\\tkeyEvtData.stopPropagation();\\n\\n\\t\\t\\t\\t// Stop the event in the KeystrokeHandler: no more callbacks\\n\\t\\t\\t\\t// will be executed for this keystroke.\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Mark this keystroke as handled by the callback. See: #press.\\n\\t\\t\\tevt.return = true;\\n\\t\\t}, { priority } );\\n\\t}\\n\\n\\t/**\\n\\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\\n\\t *\\n\\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\\n\\t * @returns {Boolean} Whether the keystroke was handled.\\n\\t */\\n\\tpress( keyEvtData ) {\\n\\t\\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the keystroke handler.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis._listener.stopListening();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/editingkeystrokehandler\\n */\\n\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\n/**\\n * A keystroke handler for editor editing. Its instance is available\\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\\n * can register their keystrokes.\\n *\\n * E.g. an undo plugin would do this:\\n *\\n *\\t\\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\\n *\\t\\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\\n *\\t\\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\\n *\\n * @extends utils/keystrokehandler~KeystrokeHandler\\n */\\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\\n\\t/**\\n\\t * Creates an instance of the keystroke handler.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper();\\n\\n\\t\\t/**\\n\\t\\t * The editor instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editor/editor~Editor}\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\t}\\n\\n\\t/**\\n\\t * Registers a handler for the specified keystroke.\\n\\t *\\n\\t * The handler can be specified as a command name or a callback.\\n\\t *\\n\\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\\n\\t * the {@link module:utils/keyboard~parseKeystroke} function.\\n\\t * @param {Function|String} callback If a string is passed, then the keystroke will\\n\\t * {@link module:core/editor/editor~Editor#execute execute a command}.\\n\\t * If a function, then it will be called with the\\n\\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\\n\\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\\n\\t * @param {Object} [options={}] Additional options.\\n\\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\\n\\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\\n\\t * are called in the order they were added.\\n\\t */\\n\\tset( keystroke, callback, options = {} ) {\\n\\t\\tif ( typeof callback == 'string' ) {\\n\\t\\t\\tconst commandName = callback;\\n\\n\\t\\t\\tcallback = ( evtData, cancel ) => {\\n\\t\\t\\t\\tthis.editor.execute( commandName );\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tsuper.set( keystroke, callback, options );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/editor/editor\\n */\\n\\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\\nimport PluginCollection from '../plugincollection';\\nimport CommandCollection from '../commandcollection';\\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Class representing the base of the editor. It is the API all plugins can expect to get when using `editor` property.\\n * It should be enough to implement editing part of feature (schema definition, conversion, commands, keystrokes, etc.).\\n * However it does not define editor UI, which is defined in {@link module:core/editor/editorwithui~EditorWithUI}.\\n *\\n * All editors implementation (like {@link module:editor-classic/classiceditor~ClassicEditor} or\\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\\n * own methods and properties.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Editor {\\n\\t/**\\n\\t * Creates a new instance of the Editor class.\\n\\t *\\n\\t * @param {Object} config The editor config.\\n\\t */\\n\\tconstructor( config ) {\\n\\t\\tconst availablePlugins = this.constructor.build && this.constructor.build.plugins;\\n\\n\\t\\t/**\\n\\t\\t * Holds all configurations specific to this editor instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/config~Config}\\n\\t\\t */\\n\\t\\tthis.config = new Config( config, this.constructor.build && this.constructor.build.config );\\n\\n\\t\\tthis.config.define( 'plugins', availablePlugins );\\n\\n\\t\\t/**\\n\\t\\t * The plugins loaded and in use by this editor instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/plugincollection~PluginCollection}\\n\\t\\t */\\n\\t\\tthis.plugins = new PluginCollection( this, availablePlugins );\\n\\n\\t\\t/**\\n\\t\\t * Commands registered to the editor.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/commandcollection~CommandCollection}\\n\\t\\t */\\n\\t\\tthis.commands = new CommandCollection();\\n\\n\\t\\t/**\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/locale~Locale}\\n\\t\\t */\\n\\t\\tthis.locale = new Locale( this.config.get( 'language' ) );\\n\\n\\t\\t/**\\n\\t\\t * Shorthand for {@link module:utils/locale~Locale#t}.\\n\\t\\t *\\n\\t\\t * @see module:utils/locale~Locale#t\\n\\t\\t * @method #t\\n\\t\\t */\\n\\t\\tthis.t = this.locale.t;\\n\\n\\t\\t/**\\n\\t\\t * Defines whether this editor is in read-only mode.\\n\\t\\t *\\n\\t\\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\\n\\t\\t * to modify document using them.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\t/**\\n\\t\\t * The editor's model.\\n\\t\\t *\\n\\t\\t * The center of the editor's abstract data model.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/model~Model}\\n\\t\\t */\\n\\t\\tthis.model = new Model();\\n\\n\\t\\t/**\\n\\t\\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\\n\\t\\t * Used e.g. for setting or retrieving editor data.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/controller/datacontroller~DataController}\\n\\t\\t */\\n\\t\\tthis.data = new DataController( this.model );\\n\\n\\t\\t/**\\n\\t\\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\\n\\t\\t * Controls user input and rendering the content for editing.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/controller/editingcontroller~EditingController}\\n\\t\\t */\\n\\t\\tthis.editing = new EditingController( this.model );\\n\\t\\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\\n\\n\\t\\t/**\\n\\t\\t * Conversion manager to which conversion dispatchers are registered. Used to add converters to the editor.\\n\\t\\t *\\n\\t\\t * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to use conversion helpers in order to\\n\\t\\t * add converters to the editor.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/conversion/conversion~Conversion}\\n\\t\\t */\\n\\t\\tthis.conversion = new Conversion();\\n\\n\\t\\tthis.conversion.register( 'downcast', [ this.editing.downcastDispatcher, this.data.downcastDispatcher ] );\\n\\t\\tthis.conversion.register( 'editingDowncast', [ this.editing.downcastDispatcher ] );\\n\\t\\tthis.conversion.register( 'dataDowncast', [ this.data.downcastDispatcher ] );\\n\\n\\t\\tthis.conversion.register( 'upcast', [ this.data.upcastDispatcher ] );\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new EditingKeystrokeHandler( this );\\n\\t\\tthis.keystrokes.listenTo( this.editing.view.document );\\n\\t}\\n\\n\\t/**\\n\\t * Loads and initializes plugins specified in the config.\\n\\t *\\n\\t * @returns {Promise} A promise which resolves once the initialization is completed.\\n\\t */\\n\\tinitPlugins() {\\n\\t\\tconst that = this;\\n\\t\\tconst config = this.config;\\n\\n\\t\\treturn loadPlugins()\\n\\t\\t\\t.then( loadedPlugins => {\\n\\t\\t\\t\\treturn initPlugins( loadedPlugins, 'init' )\\n\\t\\t\\t\\t\\t.then( () => initPlugins( loadedPlugins, 'afterInit' ) );\\n\\t\\t\\t} )\\n\\t\\t\\t.then( () => this.fire( 'pluginsReady' ) );\\n\\n\\t\\tfunction loadPlugins() {\\n\\t\\t\\tconst plugins = config.get( 'plugins' ) || [];\\n\\t\\t\\tconst removePlugins = config.get( 'removePlugins' ) || [];\\n\\n\\t\\t\\treturn that.plugins.load( plugins, removePlugins );\\n\\t\\t}\\n\\n\\t\\tfunction initPlugins( loadedPlugins, method ) {\\n\\t\\t\\treturn loadedPlugins.reduce( ( promise, plugin ) => {\\n\\t\\t\\t\\tif ( !plugin[ method ] ) {\\n\\t\\t\\t\\t\\treturn promise;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn promise.then( plugin[ method ].bind( plugin ) );\\n\\t\\t\\t}, Promise.resolve() );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the editor instance, releasing all resources used by it.\\n\\t *\\n\\t * @fires destroy\\n\\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.fire( 'destroy' );\\n\\n\\t\\tthis.stopListening();\\n\\n\\t\\tthis.commands.destroy();\\n\\n\\t\\treturn this.plugins.destroy()\\n\\t\\t\\t.then( () => {\\n\\t\\t\\t\\tthis.model.destroy();\\n\\t\\t\\t\\tthis.data.destroy();\\n\\t\\t\\t\\tthis.editing.destroy();\\n\\t\\t\\t\\tthis.keystrokes.destroy();\\n\\t\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Executes specified command with given parameters.\\n\\t *\\n\\t * Shorthand for:\\n\\t *\\n\\t *\\t\\teditor.commands.get( commandName ).execute( ... );\\n\\t *\\n\\t * @param {String} commandName Name of command to execute.\\n\\t * @param {*} [...commandParams] Command parameters.\\n\\t */\\n\\texecute( ...args ) {\\n\\t\\tthis.commands.execute( ...args );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a basic editor instance.\\n\\t *\\n\\t * @param {Object} config The editor config. You can find the list of config options in\\n\\t * {@link module:core/editor/editorconfig~EditorConfig}.\\n\\t * @returns {Promise} Promise resolved once editor is ready.\\n\\t * @returns {module:core/editor/editor~Editor} return.editor The editor instance.\\n\\t */\\n\\tstatic create( config ) {\\n\\t\\treturn new Promise( resolve => {\\n\\t\\t\\tconst editor = new this( config );\\n\\n\\t\\t\\tresolve(\\n\\t\\t\\t\\teditor.initPlugins()\\n\\t\\t\\t\\t\\t.then( () => {\\n\\t\\t\\t\\t\\t\\teditor.fire( 'dataReady' );\\n\\t\\t\\t\\t\\t\\teditor.fire( 'ready' );\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.then( () => editor )\\n\\t\\t\\t);\\n\\t\\t} );\\n\\t}\\n}\\n\\nmix( Editor, ObservableMixin );\\n\\n/**\\n * Fired after {@link #initPlugins plugins are initialized}.\\n *\\n * @event pluginsReady\\n */\\n\\n/**\\n * Fired when the data loaded to the editor is ready. If a specific editor doesn't load\\n * any data initially, this event will be fired right before {@link #event:ready}.\\n *\\n * @event dataReady\\n */\\n\\n/**\\n * Fired when {@link #event:pluginsReady plugins}, and {@link #event:dataReady data} and all additional\\n * editor components are ready.\\n *\\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\\n * you cannot even add a listener to the `editor#ready` event.\\n *\\n * @event ready\\n */\\n\\n/**\\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\\n * perform the clean-up in any plugin.\\n *\\n * @event destroy\\n */\\n\\n/**\\n * Additional data built into the editor class. It's used while bundling the editor in order to provide\\n * the default set of plugins and config options which are later used during editor initialization.\\n *\\n * Two properties are supported:\\n *\\n * * `plugins` – an array of plugin constructors. They will be automatically initialized by the editor, unless listed\\n * in `config.removePlugins` or unless `config.plugins` is passed.\\n * * `config` – the defalt config options.\\n *\\n * @static\\n * @member {Object} module:core/editor/editor~Editor.build\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/editor/utils/dataapimixin\\n */\\n\\n/**\\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\\n *\\n * @mixin DataApiMixin\\n * @implements module:core/editor/utils/dataapimixin~DataApi\\n */\\nconst DataApiMixin = {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tsetData( data ) {\\n\\t\\tthis.data.set( data );\\n\\t},\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tgetData() {\\n\\t\\treturn this.data.get();\\n\\t}\\n};\\n\\nexport default DataApiMixin;\\n\\n/**\\n * Interface for setting and getting data to/from the editor's main root element\\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\\n *\\n * @interface DataApi\\n */\\n\\n/**\\n * Sets the data in the editor's main root.\\n *\\n * @method #setData\\n * @param {String} data Input data.\\n */\\n\\n/**\\n * Gets the data from the editor's main root.\\n *\\n * @method #getData\\n * @returns {String} Output data.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\\n\\n/**\\n * @module core/editor/utils/elementapimixin\\n */\\n\\n/**\\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\\n *\\n * @mixin ElementApiMixin\\n * @implements module:core/editor/utils/elementapimixin~ElementApi\\n */\\nconst ElementApiMixin = {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tupdateElement() {\\n\\t\\tsetDataInElement( this.element, this.data.get() );\\n\\t}\\n};\\n\\nexport default ElementApiMixin;\\n\\n/**\\n * Interface describing an editor which replaced a DOM element (was \\\"initialized on an element\\\").\\n *\\n * Such an editor should provide a method to\\n * {@link module:core/editor/utils/elementapimixin~ElementApi#updateElement update the replaced element with the current data}.\\n *\\n * @interface ElementApi\\n */\\n\\n/**\\n * The element on which the editor has been initialized.\\n *\\n * @readonly\\n * @member {HTMLElement} #element\\n */\\n\\n/**\\n * Updates the {@link #element editor element}'s content with the data.\\n *\\n * @method #updateElement\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/setdatainelement\\n */\\n\\n/* globals HTMLTextAreaElement */\\n\\n/**\\n * Sets data in a given element.\\n *\\n * @param {HTMLElement} el The element in which the data will be set.\\n * @param {String} data The data string.\\n */\\nexport default function setDataInElement( el, data ) {\\n\\tif ( el instanceof HTMLTextAreaElement ) {\\n\\t\\tel.value = data;\\n\\t}\\n\\n\\tel.innerHTML = data;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/dataprocessor/basichtmlwriter\\n */\\n\\n/* globals document */\\n\\n/**\\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\\n * from a document fragment to an HTML string.\\n *\\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\\n */\\nexport default class BasicHtmlWriter {\\n\\t/**\\n\\t * Returns an HTML string created from the document fragment.\\n\\t *\\n\\t * @param {DocumentFragment} fragment\\n\\t * @returns {String}\\n\\t */\\n\\tgetHtml( fragment ) {\\n\\t\\tconst doc = document.implementation.createHTMLDocument( '' );\\n\\t\\tconst container = doc.createElement( 'div' );\\n\\t\\tcontainer.appendChild( fragment );\\n\\n\\t\\treturn container.innerHTML;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/dataprocessor/htmldataprocessor\\n */\\n\\n/* globals document, DOMParser */\\n\\nimport BasicHtmlWriter from './basichtmlwriter';\\nimport DomConverter from '../view/domconverter';\\nimport { NBSP_FILLER } from '../view/filler';\\n\\n/**\\n * The HTML data processor class.\\n * This data processor implementation uses HTML as input and output data.\\n *\\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\\n */\\nexport default class HtmlDataProcessor {\\n\\t/**\\n\\t * Creates a new instance of the HTML data processor class.\\n\\t */\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * A DOM parser instance used to parse an HTML string to an HTML document.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {DOMParser}\\n\\t\\t */\\n\\t\\tthis._domParser = new DOMParser();\\n\\n\\t\\t/**\\n\\t\\t * A DOM converter used to convert DOM elements to view elements.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/view/domconverter~DomConverter}\\n\\t\\t */\\n\\t\\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\\n\\n\\t\\t/**\\n\\t\\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\\n\\t\\t */\\n\\t\\tthis._htmlWriter = new BasicHtmlWriter();\\n\\t}\\n\\n\\t/**\\n\\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\\n\\t * to data format &mdash; in this case to an HTML string.\\n\\t *\\n\\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\\n\\t * @returns {String} HTML string.\\n\\t */\\n\\ttoData( viewFragment ) {\\n\\t\\t// Convert view DocumentFragment to DOM DocumentFragment.\\n\\t\\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\\n\\n\\t\\t// Convert DOM DocumentFragment to HTML output.\\n\\t\\treturn this._htmlWriter.getHtml( domFragment );\\n\\t}\\n\\n\\t/**\\n\\t * Converts the provided HTML string to a view tree.\\n\\t *\\n\\t * @param {String} data An HTML string.\\n\\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\\n\\t */\\n\\ttoView( data ) {\\n\\t\\t// Convert input HTML data to DOM DocumentFragment.\\n\\t\\tconst domFragment = this._toDom( data );\\n\\n\\t\\t// Convert DOM DocumentFragment to view DocumentFragment.\\n\\t\\treturn this._domConverter.domToView( domFragment );\\n\\t}\\n\\n\\t/**\\n\\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\\n\\t * the provided data.\\n\\t *\\n\\t * @private\\n\\t * @param {String} data\\n\\t * @returns {DocumentFragment}\\n\\t */\\n\\t_toDom( data ) {\\n\\t\\tconst document = this._domParser.parseFromString( data, 'text/html' );\\n\\t\\tconst fragment = document.createDocumentFragment();\\n\\t\\tconst nodes = document.body.childNodes;\\n\\n\\t\\twhile ( nodes.length > 0 ) {\\n\\t\\t\\tfragment.appendChild( nodes[ 0 ] );\\n\\t\\t}\\n\\n\\t\\treturn fragment;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/componentfactory\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\\n *\\n * It allows functions producing specific UI components to be registered under their unique names\\n * in the factory. A registered component can be then instantiated by providing its name.\\n * Note that names are case insensitive.\\n *\\n *\\t\\t// The editor provides localization tools for the factory.\\n *\\t\\tconst factory = new ComponentFactory( editor );\\n *\\n *\\t\\tfactory.add( 'foo', locale => new FooView( locale ) );\\n *\\t\\tfactory.add( 'bar', locale => new BarView( locale ) );\\n *\\n *\\t\\t// An instance of FooView.\\n *\\t\\tconst fooInstance = factory.create( 'foo' );\\n *\\n *\\t\\t// Names are case insensitive so this is also allowed:\\n *\\t\\tconst barInstance = factory.create( 'Bar' );\\n *\\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\\n */\\nexport default class ComponentFactory {\\n\\t/**\\n\\t * Creates an instance of the factory.\\n\\t *\\n\\t * @constructor\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\t/**\\n\\t\\t * The editor instance that the factory belongs to.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editor/editor~Editor}\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\n\\t\\t/**\\n\\t\\t * Registered component factories.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map}\\n\\t\\t */\\n\\t\\tthis._components = new Map();\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator of registered component names. Names are returned in lower case.\\n\\t *\\n\\t * @returns {Iterable.<String>}\\n\\t */\\n\\t* names() {\\n\\t\\tfor ( const value of this._components.values() ) {\\n\\t\\t\\tyield value.originalName;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Registers a component factory function that will be used by the\\n\\t * {@link #create create} method and called with the\\n\\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\\n\\t * allowing localization of the {@link module:ui/view~View view}.\\n\\t *\\n\\t * @param {String} name The name of the component.\\n\\t * @param {Function} callback The callback that returns the component.\\n\\t */\\n\\tadd( name, callback ) {\\n\\t\\tif ( this.has( name ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The item already exists in the component factory.\\n\\t\\t\\t *\\n\\t\\t\\t * @error componentfactory-item-exists\\n\\t\\t\\t * @param {String} name The name of the component.\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'componentfactory-item-exists: The item already exists in the component factory.', { name }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\\n\\t}\\n\\n\\t/**\\n\\t * Creates an instance of a component registered in the factory under a specific name.\\n\\t *\\n\\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\\n\\t * the previously {@link #add added} factory function, allowing localization of the\\n\\t * {@link module:ui/view~View view}.\\n\\t *\\n\\t * @param {String} name The name of the component.\\n\\t * @returns {module:ui/view~View} The instantiated component view.\\n\\t */\\n\\tcreate( name ) {\\n\\t\\tif ( !this.has( name ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The required component is not registered in the component factory. Please make sure\\n\\t\\t\\t * the provided name is correct and the component has been correctly\\n\\t\\t\\t * {@link #add added} to the factory.\\n\\t\\t\\t *\\n\\t\\t\\t * @error componentfactory-item-missing\\n\\t\\t\\t * @param {String} name The name of the missing component.\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'componentfactory-item-missing: The required component is not registered in the factory.', { name }\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if a component of a given name is registered in the factory.\\n\\t *\\n\\t * @param {String} name The name of the component.\\n\\t * @returns {Boolean}\\n\\t */\\n\\thas( name ) {\\n\\t\\treturn this._components.has( getNormalized( name ) );\\n\\t}\\n}\\n\\n//\\n// Ensures that the component name used as the key in the internal map is in lower case.\\n//\\n// @private\\n// @param {String} name\\n// @returns {String}\\nfunction getNormalized( name ) {\\n\\treturn String( name ).toLowerCase();\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* global setTimeout, clearTimeout */\\n\\n/**\\n * @module utils/focustracker\\n */\\n\\nimport DomEmitterMixin from './dom/emittermixin';\\nimport ObservableMixin from './observablemixin';\\nimport CKEditorError from './ckeditorerror';\\nimport mix from './mix';\\n\\n/**\\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\\n *\\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\\n * or were used outside of its UI.\\n *\\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\\n * (have e.g. `tabindex=\\\"-1\\\"`).\\n *\\n * @mixes module:utils/dom/emittermixin~EmitterMixin\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class FocusTracker {\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * True when one of the registered elements is focused.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isFocused\\n\\t\\t */\\n\\t\\tthis.set( 'isFocused', false );\\n\\n\\t\\t/**\\n\\t\\t * Currently focused element.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {HTMLElement}\\n\\t\\t */\\n\\t\\tthis.focusedElement = null;\\n\\n\\t\\t/**\\n\\t\\t * List of registered elements.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Set.<HTMLElement>}\\n\\t\\t */\\n\\t\\tthis._elements = new Set();\\n\\n\\t\\t/**\\n\\t\\t * Event loop timeout.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis._nextEventLoopTimeout = null;\\n\\t}\\n\\n\\t/**\\n\\t * Starts tracking the specified element.\\n\\t *\\n\\t * @param {HTMLElement} element\\n\\t */\\n\\tadd( element ) {\\n\\t\\tif ( this._elements.has( element ) ) {\\n\\t\\t\\tthrow new CKEditorError( 'focusTracker-add-element-already-exist' );\\n\\t\\t}\\n\\n\\t\\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\\n\\t\\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\\n\\t\\tthis._elements.add( element );\\n\\t}\\n\\n\\t/**\\n\\t * Stops tracking the specified element and stops listening on this element.\\n\\t *\\n\\t * @param {HTMLElement} element\\n\\t */\\n\\tremove( element ) {\\n\\t\\tif ( element === this.focusedElement ) {\\n\\t\\t\\tthis._blur( element );\\n\\t\\t}\\n\\n\\t\\tif ( this._elements.has( element ) ) {\\n\\t\\t\\tthis.stopListening( element );\\n\\t\\t\\tthis._elements.delete( element );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Stores currently focused element and set {#isFocused} as `true`.\\n\\t *\\n\\t * @private\\n\\t * @param {HTMLElement} element Element which has been focused.\\n\\t */\\n\\t_focus( element ) {\\n\\t\\tclearTimeout( this._nextEventLoopTimeout );\\n\\n\\t\\tthis.focusedElement = element;\\n\\t\\tthis.isFocused = true;\\n\\t}\\n\\n\\t/**\\n\\t * Clears currently focused element and set {@link #isFocused} as `false`.\\n\\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\\n\\t *\\n\\t * @private\\n\\t * @fires blur\\n\\t */\\n\\t_blur() {\\n\\t\\tclearTimeout( this._nextEventLoopTimeout );\\n\\n\\t\\tthis._nextEventLoopTimeout = setTimeout( () => {\\n\\t\\t\\tthis.focusedElement = null;\\n\\t\\t\\tthis.isFocused = false;\\n\\t\\t}, 0 );\\n\\t}\\n\\n\\t/**\\n\\t * @event focus\\n\\t */\\n\\n\\t/**\\n\\t * @event blur\\n\\t */\\n}\\n\\nmix( FocusTracker, DomEmitterMixin );\\nmix( FocusTracker, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module editor-classic/classiceditorui\\n */\\n\\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\\n\\n/**\\n * The classic editor UI class.\\n *\\n * @implements module:core/editor/editorui~EditorUI\\n */\\nexport default class ClassicEditorUI {\\n\\t/**\\n\\t * Creates an instance of the editor UI class.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\\n\\t */\\n\\tconstructor( editor, view ) {\\n\\t\\t/**\\n\\t\\t * @inheritDoc\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\n\\t\\t/**\\n\\t\\t * @inheritDoc\\n\\t\\t */\\n\\t\\tthis.view = view;\\n\\n\\t\\t/**\\n\\t\\t * @inheritDoc\\n\\t\\t */\\n\\t\\tthis.componentFactory = new ComponentFactory( editor );\\n\\n\\t\\t/**\\n\\t\\t * @inheritDoc\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * A normalized `config.toolbar` object.\\n\\t\\t *\\n\\t\\t * @type {Object}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._toolbarConfig = normalizeToolbarConfig( editor.config.get( 'toolbar' ) );\\n\\t}\\n\\n\\t/**\\n\\t * Initializes the UI.\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = this.view;\\n\\n\\t\\tview.render();\\n\\n\\t\\t// Set–up the sticky panel with toolbar.\\n\\t\\tview.stickyPanel.bind( 'isActive' ).to( this.focusTracker, 'isFocused' );\\n\\t\\tview.stickyPanel.limiterElement = view.element;\\n\\n\\t\\tif ( this._toolbarConfig.viewportTopOffset ) {\\n\\t\\t\\tview.stickyPanel.viewportTopOffset = this._toolbarConfig.viewportTopOffset;\\n\\t\\t}\\n\\n\\t\\t// Setup the editable.\\n\\t\\tconst editingRoot = editor.editing.view.document.getRoot();\\n\\t\\tview.editable.bind( 'isReadOnly' ).to( editingRoot );\\n\\t\\tview.editable.bind( 'isFocused' ).to( editor.editing.view.document );\\n\\t\\tview.editable.name = editingRoot.rootName;\\n\\n\\t\\tthis.focusTracker.add( this.view.editableElement );\\n\\n\\t\\tthis.view.toolbar.fillFromConfig( this._toolbarConfig.items, this.componentFactory );\\n\\n\\t\\tenableToolbarKeyboardFocus( {\\n\\t\\t\\torigin: editor.editing.view,\\n\\t\\t\\toriginFocusTracker: this.focusTracker,\\n\\t\\t\\toriginKeystrokeHandler: editor.keystrokes,\\n\\t\\t\\ttoolbar: this.view.toolbar\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the UI.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.view.destroy();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/toolbar/normalizetoolbarconfig\\n */\\n\\n/**\\n * Normalizes the toolbar configuration (`config.toolbar`), which:\\n *\\n * * may be defined as an `Array`:\\n *\\n * \\t\\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\\n *\\n * * or an `Object`:\\n *\\n *\\t\\ttoolbar: {\\n *\\t\\t\\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\\n *\\t\\t\\t...\\n *\\t\\t}\\n *\\n * * or may not be defined at all (`undefined`)\\n *\\n * and returns it in the object form.\\n *\\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\\n * @returns {Object} A normalized toolbar config object.\\n */\\nexport default function normalizeToolbarConfig( config ) {\\n\\tif ( Array.isArray( config ) ) {\\n\\t\\treturn {\\n\\t\\t\\titems: config\\n\\t\\t};\\n\\t}\\n\\n\\tif ( !config ) {\\n\\t\\treturn {\\n\\t\\t\\titems: []\\n\\t\\t};\\n\\t}\\n\\n\\treturn Object.assign( {\\n\\t\\titems: []\\n\\t}, config );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/toolbar/enabletoolbarkeyboardfocus\\n */\\n\\n/**\\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\\n *\\n * @param {Object} options Options of the utility.\\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\\n * `options.toolbar` is focused.\\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\\n * handler to register `Alt+F10` keystroke.\\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\\n * for `options.origin`.\\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\\n * focus when `Alt+F10` is pressed.\\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\\n * upon the `Alt+F10` keystroke.\\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\\n * `Esc` keystroke but before the focus goes back to `options.origin`.\\n */\\nexport default function enableToolbarKeyboardFocus( {\\n\\torigin,\\n\\toriginKeystrokeHandler,\\n\\toriginFocusTracker,\\n\\ttoolbar,\\n\\tbeforeFocus,\\n\\tafterBlur\\n} ) {\\n\\t// Because toolbar items can get focus, the overall state of the toolbar must\\n\\t// also be tracked.\\n\\toriginFocusTracker.add( toolbar.element );\\n\\n\\t// Focus the toolbar on the keystroke, if not already focused.\\n\\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\\n\\t\\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\\n\\t\\t\\tif ( beforeFocus ) {\\n\\t\\t\\t\\tbeforeFocus();\\n\\t\\t\\t}\\n\\n\\t\\t\\ttoolbar.focus();\\n\\n\\t\\t\\tcancel();\\n\\t\\t}\\n\\t} );\\n\\n\\t// Blur the toolbar and bring the focus back to origin.\\n\\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\\n\\t\\tif ( toolbar.focusTracker.isFocused ) {\\n\\t\\t\\torigin.focus();\\n\\n\\t\\t\\tif ( afterBlur ) {\\n\\t\\t\\t\\tafterBlur();\\n\\t\\t\\t}\\n\\n\\t\\t\\tcancel();\\n\\t\\t}\\n\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/viewcollection\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Collects {@link module:ui/view~View} instances.\\n *\\n *\\t\\tconst parentView = new ParentView( locale );\\n *\\t\\tconst collection = new ViewCollection( locale );\\n *\\n *\\t\\tcollection.setParent( parentView.element );\\n *\\n *\\t\\tconst viewA = new ChildView( locale );\\n *\\t\\tconst viewB = new ChildView( locale );\\n *\\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\\n *\\n *\\t\\tcollection.add( viewA );\\n *\\t\\tcollection.add( viewB );\\n *\\n *\\t\\tconsole.log( parentView.element.firsChild ); // -> viewA.element\\n *\\t\\tconsole.log( parentView.element.lastChild ); // -> viewB.element\\n *\\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\\n *\\n *\\t\\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\\n *\\t\\tcollection.delegate( 'click' ).to( parentView );\\n *\\n *\\t\\tparentView.on( 'click', ( evt ) => {\\n *\\t\\t\\tconsole.log( `${ evt.source } has been clicked.` );\\n *\\t\\t} );\\n *\\n *\\t\\t// This event will be delegated to the parentView.\\n *\\t\\tviewB.fire( 'click' );\\n *\\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\\n * of a {@link module:ui/template~Template template}.\\n *\\n * @extends module:utils/collection~Collection\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class ViewCollection extends Collection {\\n\\t/**\\n\\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( {\\n\\t\\t\\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\\n\\t\\t\\tidProperty: 'viewUid'\\n\\t\\t} );\\n\\n\\t\\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\\n\\t\\tthis.on( 'add', ( evt, view, index ) => {\\n\\t\\t\\tif ( !view.isRendered ) {\\n\\t\\t\\t\\tview.render();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( view.element && this._parentElement ) {\\n\\t\\t\\t\\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\\n\\t\\tthis.on( 'remove', ( evt, view ) => {\\n\\t\\t\\tif ( view.element && this._parentElement ) {\\n\\t\\t\\t\\tview.element.remove();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\\n\\t\\t * See the view {@link module:ui/view~View#locale locale} property.\\n\\t\\t *\\n\\t\\t * @member {module:utils/locale~Locale}\\n\\t\\t */\\n\\t\\tthis.locale = locale;\\n\\n\\t\\t/**\\n\\t\\t * A parent element within which child views are rendered and managed in DOM.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {HTMLElement}\\n\\t\\t */\\n\\t\\tthis._parentElement = null;\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the view collection along with child views.\\n\\t * See the view {@link module:ui/view~View#destroy} method.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.map( view => view.destroy() );\\n\\t}\\n\\n\\t/**\\n\\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\\n\\t * {@link #remove removing} views in the collection synchronizes their\\n\\t * {@link module:ui/view~View#element elements} in the parent element.\\n\\t *\\n\\t * @param {HTMLElement} element A new parent element.\\n\\t */\\n\\tsetParent( elementOrDocFragment ) {\\n\\t\\tthis._parentElement = elementOrDocFragment;\\n\\t}\\n\\n\\t/**\\n\\t * Delegates selected events coming from within views in the collection to any\\n\\t * {@link module:utils/emittermixin~Emitter}.\\n\\t *\\n\\t * For the following views and collection:\\n\\t *\\n\\t *\\t\\tconst viewA = new View();\\n\\t *\\t\\tconst viewB = new View();\\n\\t *\\t\\tconst viewC = new View();\\n\\t *\\n\\t *\\t\\tconst views = parentView.createCollection();\\n\\t *\\n\\t *\\t\\tviews.delegate( 'eventX' ).to( viewB );\\n\\t *\\t\\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\\n\\t *\\n\\t *\\t\\tviews.add( viewA );\\n\\t *\\n\\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\\n\\t *\\n\\t *\\t\\tviewA.fire( 'eventX', customData );\\n\\t *\\n\\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\\n\\t *\\n\\t *\\t\\tviewA.fire( 'eventY', customData );\\n\\t *\\n\\t * See {@link module:utils/emittermixin~EmitterMixin#delegate}.\\n\\t *\\n\\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\\n\\t * {@link module:utils/emittermixin~Emitter}.\\n\\t * @returns {Object}\\n\\t * @returns {Function} return.to A function which accepts the destination of\\n\\t * {@link module:utils/emittermixin~EmitterMixin#delegate delegated} events.\\n\\t */\\n\\tdelegate( ...events ) {\\n\\t\\tif ( !events.length || !isStringArray( events ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * All event names must be strings.\\n\\t\\t\\t *\\n\\t\\t\\t * @error ui-viewcollection-delegate-wrong-events\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'ui-viewcollection-delegate-wrong-events: All event names must be strings.' );\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\t/**\\n\\t\\t\\t * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\\n\\t\\t\\t *\\n\\t\\t\\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\\n\\t\\t\\t * @function module:ui/viewcollection~ViewCollection#delegate.to\\n\\t\\t\\t * @param {module:utils/emittermixin~EmitterMixin} dest An `EmitterMixin` instance which is\\n\\t\\t\\t * the destination for delegated events.\\n\\t\\t\\t */\\n\\t\\t\\tto: dest => {\\n\\t\\t\\t\\t// Activate delegating on existing views in this collection.\\n\\t\\t\\t\\tfor ( const view of this ) {\\n\\t\\t\\t\\t\\tfor ( const evtName of events ) {\\n\\t\\t\\t\\t\\t\\tview.delegate( evtName ).to( dest );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Activate delegating on future views in this collection.\\n\\t\\t\\t\\tthis.on( 'add', ( evt, view ) => {\\n\\t\\t\\t\\t\\tfor ( const evtName of events ) {\\n\\t\\t\\t\\t\\t\\tview.delegate( evtName ).to( dest );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t// Deactivate delegating when view is removed from this collection.\\n\\t\\t\\t\\tthis.on( 'remove', ( evt, view ) => {\\n\\t\\t\\t\\t\\tfor ( const evtName of events ) {\\n\\t\\t\\t\\t\\t\\tview.stopDelegating( evtName, dest );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\\n\\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\\n\\t * in DOM, reflecting the order of the collection.\\n\\t *\\n\\t * See the {@link #add} method.\\n\\t *\\n\\t * @method #remove\\n\\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\\n\\t * @returns {Object} The removed view.\\n\\t */\\n}\\n\\nmix( Collection, ObservableMixin );\\n\\n// Check if all entries of the array are of `String` type.\\n//\\n// @private\\n// @param {Array} arr An array to be checked.\\n// @returns {Boolean}\\nfunction isStringArray( arr ) {\\n\\treturn arr.every( a => typeof a == 'string' );\\n}\\n\",\"import baseClone from './_baseClone';\\n\\n/**\\n * This method is like `_.cloneWith` except that it recursively clones `value`.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Lang\\n * @param {*} value The value to recursively clone.\\n * @param {Function} [customizer] The function to customize cloning.\\n * @returns {*} Returns the deep cloned value.\\n * @see _.cloneWith\\n * @example\\n *\\n * function customizer(value) {\\n *   if (_.isElement(value)) {\\n *     return value.cloneNode(true);\\n *   }\\n * }\\n *\\n * var el = _.cloneDeepWith(document.body, customizer);\\n *\\n * console.log(el === document.body);\\n * // => false\\n * console.log(el.nodeName);\\n * // => 'BODY'\\n * console.log(el.childNodes.length);\\n * // => 20\\n */\\nfunction cloneDeepWith(value, customizer) {\\n  return baseClone(value, true, true, customizer);\\n}\\n\\nexport default cloneDeepWith;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/template\\n */\\n\\n/* global document */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport View from './view';\\nimport ViewCollection from './viewcollection';\\nimport cloneDeepWith from '@ckeditor/ckeditor5-utils/src/lib/lodash/cloneDeepWith';\\nimport isObject from '@ckeditor/ckeditor5-utils/src/lib/lodash/isObject';\\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\\n\\n/**\\n * A basic Template class. It renders a DOM HTML element or text from a\\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\\n *\\n * A simple template can look like this:\\n *\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\t\\t\\tattributes: {\\n *\\t\\t\\t\\tclass: 'foo',\\n *\\t\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t\\tbackgroundColor: 'yellow'\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t},\\n *\\t\\t\\ton: {\\n *\\t\\t\\t\\tclick: bind.to( 'clicked' )\\n *\\t\\t\\t}\\n *\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t'A paragraph.'\\n *\\t\\t\\t]\\n *\\t\\t} ).render();\\n *\\n * and it will render the following HTML element:\\n *\\n *\\t\\t<p class=\\\"foo\\\" style=\\\"background-color: yellow;\\\">A paragraph.</p>\\n *\\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\\n *\\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\\n * template definitions.\\n *\\n* @mixes module:utils/emittermixin~EmitterMixin\\n */\\nexport default class Template {\\n\\t/**\\n\\t * Creates an instance of the {@link ~Template} class.\\n\\t *\\n\\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\\n\\t */\\n\\tconstructor( def ) {\\n\\t\\tObject.assign( this, normalize( clone( def ) ) );\\n\\n\\t\\t/**\\n\\t\\t * Indicates whether this particular Template instance has been\\n\\t\\t * {@link #render rendered}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {Boolean}\\n\\t\\t */\\n\\t\\tthis._isRendered = false;\\n\\n\\t\\t/**\\n\\t\\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\\n\\t\\t * renders to an HTML element.\\n\\t\\t *\\n\\t\\t * @member {String} #tag\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The text of the template. It also indicates that the template renders to a DOM text node.\\n\\t\\t *\\n\\t\\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\\n\\t\\t * the attributes of an HTML element.\\n\\t\\t *\\n\\t\\t * **Note**: This property only makes sense when {@link #tag} is defined.\\n\\t\\t *\\n\\t\\t * @member {Object} #attributes\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The children of the template. They can be either:\\n\\t\\t * * independent instances of {@link ~Template} (sub–templates),\\n\\t\\t * * native DOM Nodes.\\n\\t\\t *\\n\\t\\t * **Note**: This property only makes sense when {@link #tag} is defined.\\n\\t\\t *\\n\\t\\t * @member {Array.<module:ui/template~Template|Node>} #children\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The DOM event listeners of the template.\\n\\t\\t *\\n\\t\\t * @member {Object} #eventListeners\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The data used by the {@link #revert} method to restore a node to its original state.\\n\\t\\t *\\n\\t\\t * See: {@link #apply}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/template~RenderData}\\n\\t\\t */\\n\\t\\tthis._revertData = null;\\n\\t}\\n\\n\\t/**\\n\\t * Renders a DOM Node (an HTML element or text) out of the template.\\n\\t *\\n\\t *\\t\\tconst domNode = new Template( { ... } ).render();\\n\\t *\\n\\t * See: {@link #apply}.\\n\\t *\\n\\t * @returns {HTMLElement|Text}\\n\\t */\\n\\trender() {\\n\\t\\tconst node = this._renderNode( {\\n\\t\\t\\tintoFragment: true\\n\\t\\t} );\\n\\n\\t\\tthis._isRendered = true;\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Applies the template to an existing DOM Node, either HTML element or text.\\n\\t *\\n\\t * **Note:** No new DOM nodes will be created. Applying extends\\n\\t * {@link module:ui/template~TemplateDefinition attributes} and\\n\\t * {@link module:ui/template~TemplateDefinition event listeners} only.\\n\\t *\\n\\t * **Note:** Existing `class` and `style` attributes are extended when a template\\n\\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\\n\\t *\\n\\t * **Note:** The process of applying a template can be easily reverted using the\\n\\t * {@link module:ui/template~Template#revert} method.\\n\\t *\\n\\t *\\t\\tconst element = document.createElement( 'div' );\\n\\t *\\t\\tconst bind = Template.bind( observable, emitter );\\n\\t *\\n\\t *\\t\\tnew Template( {\\n\\t *\\t\\t\\tattrs: {\\n\\t *\\t\\t\\t\\tid: 'first-div',\\n\\t *\\t\\t\\t\\tclass: bind.to( 'divClass' )\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\ton: {\\n\\t *\\t\\t\\t\\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\t'Div text.'\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} ).apply( element );\\n\\t *\\n\\t *\\t\\telement.outerHTML == \\\"<div id=\\\"first-div\\\" class=\\\"my-div\\\">Div text.</div>\\\"\\n\\t *\\n\\t * @see module:ui/template~Template#render\\n\\t * @see module:ui/template~Template#revert\\n\\t * @param {Node} node Root node for the template to apply.\\n\\t */\\n\\tapply( node ) {\\n\\t\\tthis._revertData = getEmptyRevertData();\\n\\n\\t\\tthis._renderNode( {\\n\\t\\t\\tnode,\\n\\t\\t\\tisApplying: true,\\n\\t\\t\\trevertData: this._revertData\\n\\t\\t} );\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\\n\\t *\\n\\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\\n\\t * same node used by {@link module:ui/template~Template#apply}.\\n\\t */\\n\\trevert( node ) {\\n\\t\\tif ( !this._revertData ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Attempting to revert a template which has not been applied yet.\\n\\t\\t\\t *\\n\\t\\t\\t * @error ui-template-revert-not-applied\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.' );\\n\\t\\t}\\n\\n\\t\\tthis._revertTemplateFromNode( node, this._revertData );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\\n\\t * instances and returns them one by one.\\n\\t *\\n\\t *\\t\\tconst viewFoo = new View();\\n\\t *\\t\\tconst viewBar = new View();\\n\\t *\\t\\tconst viewBaz = new View();\\n\\t *\\t\\tconst template = new Template( {\\n\\t *\\t\\t\\ttag: 'div',\\n\\t *\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\tviewFoo,\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\ttag: 'div',\\n\\t *\\t\\t\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\t\\t\\tviewBar\\n\\t *\\t\\t\\t\\t\\t]\\n\\t *\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\tviewBaz\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Logs: viewFoo, viewBar, viewBaz\\n\\t *\\t\\tfor ( const view of template.getViews() ) {\\n\\t *\\t\\t\\tconsole.log( view );\\n\\t *\\t\\t}\\n\\t *\\n\\t * @returns {Iterable.<module:ui/view~View>}\\n\\t */\\n\\t* getViews() {\\n\\t\\tfunction* search( def ) {\\n\\t\\t\\tif ( def.children ) {\\n\\t\\t\\t\\tfor ( const child of def.children ) {\\n\\t\\t\\t\\t\\tif ( isView( child ) ) {\\n\\t\\t\\t\\t\\t\\tyield child;\\n\\t\\t\\t\\t\\t} else if ( isTemplate( child ) ) {\\n\\t\\t\\t\\t\\t\\tyield* search( child );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tyield* search( this );\\n\\t}\\n\\n\\t/**\\n\\t * An entry point to the interface which binds DOM nodes to\\n\\t * {@link module:utils/observablemixin~Observable observables}.\\n\\t * There are two types of bindings:\\n\\t *\\n\\t * * HTML element attributes or text `textContent` synchronized with attributes of an\\n\\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\\n\\t * and {@link module:ui/template~BindChain#if}.\\n\\t *\\n\\t *\\t\\tconst bind = Template.bind( observable, emitter );\\n\\t *\\n\\t *\\t\\tnew Template( {\\n\\t *\\t\\t\\tattrs: {\\n\\t *\\t\\t\\t\\t// Binds the element \\\"class\\\" attribute to observable#classAttribute.\\n\\t *\\t\\t\\t\\tclass: bind.to( 'classAttribute' )\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} ).render();\\n\\t *\\n\\t * * DOM events fired on HTML element propagated through\\n\\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\\n\\t *\\n\\t *\\t\\tconst bind = Template.bind( observable, emitter );\\n\\t *\\n\\t *\\t\\tnew Template( {\\n\\t *\\t\\t\\ton: {\\n\\t *\\t\\t\\t\\t// Will be fired by the observable.\\n\\t *\\t\\t\\t\\tclick: bind( 'elementClicked' )\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} ).render();\\n\\t *\\n\\t * Also see {@link module:ui/view~View#bindTemplate}.\\n\\t *\\n\\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\\n\\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\\n\\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\\n\\t * @returns {module:ui/template~BindChain}\\n\\t */\\n\\tstatic bind( observable, emitter ) {\\n\\t\\treturn {\\n\\t\\t\\tto( eventNameOrFunctionOrAttribute, callback ) {\\n\\t\\t\\t\\treturn new TemplateToBinding( {\\n\\t\\t\\t\\t\\teventNameOrFunction: eventNameOrFunctionOrAttribute,\\n\\t\\t\\t\\t\\tattribute: eventNameOrFunctionOrAttribute,\\n\\t\\t\\t\\t\\tobservable, emitter, callback\\n\\t\\t\\t\\t} );\\n\\t\\t\\t},\\n\\n\\t\\t\\tif( attribute, valueIfTrue, callback ) {\\n\\t\\t\\t\\treturn new TemplateIfBinding( {\\n\\t\\t\\t\\t\\tobservable, emitter, attribute, valueIfTrue, callback\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\\n\\t * from another {@link module:ui/template~TemplateDefinition}.\\n\\t *\\n\\t *\\t\\tconst bind = Template.bind( observable, emitter );\\n\\t *\\n\\t *\\t\\tconst template = new Template( {\\n\\t *\\t\\t\\ttag: 'p',\\n\\t *\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\tclass: 'a',\\n\\t *\\t\\t\\t\\tdata-x: bind.to( 'foo' )\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\ttag: 'span',\\n\\t *\\t\\t\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\t\\t\\tclass: 'b'\\n\\t *\\t\\t\\t\\t\\t},\\n\\t *\\t\\t\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\t\\t\\t'Span'\\n\\t *\\t\\t\\t\\t\\t]\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t } );\\n\\t *\\n\\t *\\t\\t// Instance-level extension.\\n\\t *\\t\\tTemplate.extend( template, {\\n\\t *\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\tclass: 'b',\\n\\t *\\t\\t\\t\\tdata-x: bind.to( 'bar' )\\n\\t *\\t\\t\\t},\\n\\t *\\t\\t\\tchildren: [\\n\\t *\\t\\t\\t\\t{\\n\\t *\\t\\t\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\t\\t\\tclass: 'c'\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t}\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Child extension.\\n\\t *\\t\\tTemplate.extend( template.children[ 0 ], {\\n\\t *\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\tclass: 'd'\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * the `outerHTML` of `template.render()` is:\\n\\t *\\n\\t *\\t\\t<p class=\\\"a b\\\" data-x=\\\"{ observable.foo } { observable.bar }\\\">\\n\\t *\\t\\t\\t<span class=\\\"b c d\\\">Span</span>\\n\\t *\\t\\t</p>\\n\\t *\\n\\t * @param {module:ui/template~Template} template An existing template instance to be extended.\\n\\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\\n\\t */\\n\\tstatic extend( template, def ) {\\n\\t\\tif ( template._isRendered ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Extending a template after rendering may not work as expected. To make sure\\n\\t\\t\\t * the {@link module:ui/template~Template.extend extending} works for an element,\\n\\t\\t\\t * make sure it happens before {@link #render} is called.\\n\\t\\t\\t *\\n\\t\\t\\t * @error template-extend-render\\n\\t\\t\\t */\\n\\t\\t\\tlog.warn( 'template-extend-render: Attempting to extend a template which has already been rendered.' );\\n\\t\\t}\\n\\n\\t\\textendTemplate( template, normalize( clone( def ) ) );\\n\\t}\\n\\n\\t/**\\n\\t * Renders a DOM Node (either an HTML element or text) out of the template.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderNode( data ) {\\n\\t\\tlet isInvalid;\\n\\n\\t\\tif ( data.node ) {\\n\\t\\t\\t// When applying, a definition cannot have \\\"tag\\\" and \\\"text\\\" at the same time.\\n\\t\\t\\tisInvalid = this.tag && this.text;\\n\\t\\t} else {\\n\\t\\t\\t// When rendering, a definition must have either \\\"tag\\\" or \\\"text\\\": XOR( this.tag, this.text ).\\n\\t\\t\\tisInvalid = this.tag ? this.text : !this.text;\\n\\t\\t}\\n\\n\\t\\tif ( isInvalid ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Node definition cannot have the \\\"tag\\\" and \\\"text\\\" properties at the same time.\\n\\t\\t\\t * Node definition must have either \\\"tag\\\" or \\\"text\\\" when rendering a new Node.\\n\\t\\t\\t *\\n\\t\\t\\t * @error ui-template-wrong-syntax\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'ui-template-wrong-syntax: Node definition must have either \\\"tag\\\" or \\\"text\\\" when rendering a new Node.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif ( this.text ) {\\n\\t\\t\\treturn this._renderText( data );\\n\\t\\t} else {\\n\\t\\t\\treturn this._renderElement( data );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Renders an HTML element out of the template.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderElement( data ) {\\n\\t\\tlet node = data.node;\\n\\n\\t\\tif ( !node ) {\\n\\t\\t\\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\\n\\t\\t}\\n\\n\\t\\tthis._renderAttributes( data );\\n\\t\\tthis._renderElementChildren( data );\\n\\t\\tthis._setUpListeners( data );\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Renders a text node out of {@link module:ui/template~Template#text}.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderText( data ) {\\n\\t\\tlet node = data.node;\\n\\n\\t\\t// Save the original textContent to revert it in #revert().\\n\\t\\tif ( node ) {\\n\\t\\t\\tdata.revertData.text = node.textContent;\\n\\t\\t} else {\\n\\t\\t\\tnode = data.node = document.createTextNode( '' );\\n\\t\\t}\\n\\n\\t\\t// Check if this Text Node is bound to Observable. Cases:\\n\\t\\t//\\n\\t\\t//\\t\\ttext: [ Template.bind( ... ).to( ... ) ]\\n\\t\\t//\\n\\t\\t//\\t\\ttext: [\\n\\t\\t//\\t\\t\\t'foo',\\n\\t\\t//\\t\\t\\tTemplate.bind( ... ).to( ... ),\\n\\t\\t//\\t\\t\\t...\\n\\t\\t//\\t\\t]\\n\\t\\t//\\n\\t\\tif ( hasTemplateBinding( this.text ) ) {\\n\\t\\t\\tthis._bindToObservable( {\\n\\t\\t\\t\\tschema: this.text,\\n\\t\\t\\t\\tupdater: getTextUpdater( node ),\\n\\t\\t\\t\\tdata\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\t// Simply set text. Cases:\\n\\t\\t//\\n\\t\\t//\\t\\ttext: [ 'all', 'are', 'static' ]\\n\\t\\t//\\n\\t\\t//\\t\\ttext: [ 'foo' ]\\n\\t\\t//\\n\\t\\telse {\\n\\t\\t\\tnode.textContent = this.text.join( '' );\\n\\t\\t}\\n\\n\\t\\treturn node;\\n\\t}\\n\\n\\t/**\\n\\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderAttributes( data ) {\\n\\t\\tlet attrName, attrValue, domAttrValue, attrNs;\\n\\n\\t\\tif ( !this.attributes ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst node = data.node;\\n\\t\\tconst revertData = data.revertData;\\n\\n\\t\\tfor ( attrName in this.attributes ) {\\n\\t\\t\\t// Current attribute value in DOM.\\n\\t\\t\\tdomAttrValue = node.getAttribute( attrName );\\n\\n\\t\\t\\t// The value to be set.\\n\\t\\t\\tattrValue = this.attributes[ attrName ];\\n\\n\\t\\t\\t// Save revert data.\\n\\t\\t\\tif ( revertData ) {\\n\\t\\t\\t\\trevertData.attributes[ attrName ] = domAttrValue;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Detect custom namespace:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: {\\n\\t\\t\\t//\\t\\t\\tns: 'abc',\\n\\t\\t\\t//\\t\\t\\tvalue: Template.bind( ... ).to( ... )\\n\\t\\t\\t//\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\\n\\n\\t\\t\\t// Activate binding if one is found. Cases:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [\\n\\t\\t\\t//\\t\\t\\tTemplate.bind( ... ).to( ... )\\n\\t\\t\\t//\\t\\t]\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [\\n\\t\\t\\t//\\t\\t\\t'bar',\\n\\t\\t\\t//\\t\\t\\tTemplate.bind( ... ).to( ... ),\\n\\t\\t\\t//\\t\\t\\t'baz'\\n\\t\\t\\t//\\t\\t]\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: {\\n\\t\\t\\t//\\t\\t\\tns: 'abc',\\n\\t\\t\\t//\\t\\t\\tvalue: Template.bind( ... ).to( ... )\\n\\t\\t\\t//\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\tif ( hasTemplateBinding( attrValue ) ) {\\n\\t\\t\\t\\t// Normalize attributes with additional data like namespace:\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t//\\t\\tclass: {\\n\\t\\t\\t\\t//\\t\\t\\tns: 'abc',\\n\\t\\t\\t\\t//\\t\\t\\tvalue: [ ... ]\\n\\t\\t\\t\\t//\\t\\t}\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\\n\\n\\t\\t\\t\\t// Extend the original value of attributes like \\\"style\\\" and \\\"class\\\",\\n\\t\\t\\t\\t// don't override them.\\n\\t\\t\\t\\tif ( revertData && shouldExtend( attrName ) ) {\\n\\t\\t\\t\\t\\tvalueToBind.unshift( domAttrValue );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis._bindToObservable( {\\n\\t\\t\\t\\t\\tschema: valueToBind,\\n\\t\\t\\t\\t\\tupdater: getAttributeUpdater( node, attrName, attrNs ),\\n\\t\\t\\t\\t\\tdata\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Style attribute could be an Object so it needs to be parsed in a specific way.\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tstyle: {\\n\\t\\t\\t//\\t\\t\\twidth: '100px',\\n\\t\\t\\t//\\t\\t\\theight: Template.bind( ... ).to( ... )\\n\\t\\t\\t//\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\\n\\t\\t\\t\\tthis._renderStyleAttribute( attrValue[ 0 ], data );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Otherwise simply set the static attribute:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [ 'foo' ]\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [ 'all', 'are', 'static' ]\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [\\n\\t\\t\\t//\\t\\t\\t{\\n\\t\\t\\t//\\t\\t\\t\\tns: 'abc',\\n\\t\\t\\t//\\t\\t\\t\\tvalue: [ 'foo' ]\\n\\t\\t\\t//\\t\\t\\t}\\n\\t\\t\\t//\\t\\t]\\n\\t\\t\\t//\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// Extend the original value of attributes like \\\"style\\\" and \\\"class\\\",\\n\\t\\t\\t\\t// don't override them.\\n\\t\\t\\t\\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\\n\\t\\t\\t\\t\\tattrValue.unshift( domAttrValue );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tattrValue = attrValue\\n\\t\\t\\t\\t\\t// Retrieve \\\"values\\\" from:\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t//\\t\\tclass: [\\n\\t\\t\\t\\t\\t//\\t\\t\\t{\\n\\t\\t\\t\\t\\t//\\t\\t\\t\\tns: 'abc',\\n\\t\\t\\t\\t\\t//\\t\\t\\t\\tvalue: [ ... ]\\n\\t\\t\\t\\t\\t//\\t\\t\\t}\\n\\t\\t\\t\\t\\t//\\t\\t]\\n\\t\\t\\t\\t\\t//\\n\\t\\t\\t\\t\\t.map( val => val ? ( val.value || val ) : val )\\n\\t\\t\\t\\t\\t// Flatten the array.\\n\\t\\t\\t\\t\\t.reduce( ( prev, next ) => prev.concat( next ), [] )\\n\\t\\t\\t\\t\\t// Convert into string.\\n\\t\\t\\t\\t\\t.reduce( arrayValueReducer, '' );\\n\\n\\t\\t\\t\\tif ( !isFalsy( attrValue ) ) {\\n\\t\\t\\t\\t\\tnode.setAttributeNS( attrNs, attrName, attrValue );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Renders the `style` attribute of an HTML element based on\\n\\t * {@link module:ui/template~Template#attributes}.\\n\\t *\\n\\t * A style attribute is an {Object} with static values:\\n\\t *\\n\\t *\\t\\tattributes: {\\n\\t *\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\tcolor: 'red'\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t * or values bound to {@link module:ui/model~Model} properties:\\n\\t *\\n\\t *\\t\\tattributes: {\\n\\t *\\t\\t\\tstyle: {\\n\\t *\\t\\t\\t\\tcolor: bind.to( ... )\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\\n\\t * needed.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderStyleAttribute( styles, data ) {\\n\\t\\tconst node = data.node;\\n\\n\\t\\tfor ( const styleName in styles ) {\\n\\t\\t\\tconst styleValue = styles[ styleName ];\\n\\n\\t\\t\\t// Cases:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tstyle: {\\n\\t\\t\\t//\\t\\t\\tcolor: bind.to( 'attribute' )\\n\\t\\t\\t//\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\tif ( hasTemplateBinding( styleValue ) ) {\\n\\t\\t\\t\\tthis._bindToObservable( {\\n\\t\\t\\t\\t\\tschema: [ styleValue ],\\n\\t\\t\\t\\t\\tupdater: getStyleUpdater( node, styleName ),\\n\\t\\t\\t\\t\\tdata\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Cases:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tstyle: {\\n\\t\\t\\t//\\t\\t\\tcolor: 'red'\\n\\t\\t\\t//\\t\\t}\\n\\t\\t\\t//\\n\\t\\t\\telse {\\n\\t\\t\\t\\tnode.style[ styleName ] = styleValue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_renderElementChildren( data ) {\\n\\t\\tconst node = data.node;\\n\\t\\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\\n\\t\\tconst isApplying = data.isApplying;\\n\\t\\tlet childIndex = 0;\\n\\n\\t\\tfor ( const child of this.children ) {\\n\\t\\t\\tif ( isViewCollection( child ) ) {\\n\\t\\t\\t\\tif ( !isApplying ) {\\n\\t\\t\\t\\t\\tchild.setParent( node );\\n\\n\\t\\t\\t\\t\\t// Note: ViewCollection renders its children.\\n\\t\\t\\t\\t\\tfor ( const view of child ) {\\n\\t\\t\\t\\t\\t\\tcontainer.appendChild( view.element );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( isView( child ) ) {\\n\\t\\t\\t\\tif ( !isApplying ) {\\n\\t\\t\\t\\t\\tif ( !child.isRendered ) {\\n\\t\\t\\t\\t\\t\\tchild.render();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcontainer.appendChild( child.element );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( isNode( child ) ) {\\n\\t\\t\\t\\tcontainer.appendChild( child );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ( isApplying ) {\\n\\t\\t\\t\\t\\tconst revertData = data.revertData;\\n\\t\\t\\t\\t\\tconst childRevertData = getEmptyRevertData();\\n\\n\\t\\t\\t\\t\\trevertData.children.push( childRevertData );\\n\\n\\t\\t\\t\\t\\tchild._renderNode( {\\n\\t\\t\\t\\t\\t\\tnode: container.childNodes[ childIndex++ ],\\n\\t\\t\\t\\t\\t\\tisApplying: true,\\n\\t\\t\\t\\t\\t\\trevertData: childRevertData\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcontainer.appendChild( child.render() );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( data.intoFragment ) {\\n\\t\\t\\tnode.appendChild( container );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\\n\\t * on an HTML element.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t */\\n\\t_setUpListeners( data ) {\\n\\t\\tif ( !this.eventListeners ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor ( const key in this.eventListeners ) {\\n\\t\\t\\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\\n\\t\\t\\t\\tconst [ domEvtName, domSelector ] = key.split( '@' );\\n\\n\\t\\t\\t\\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\\n\\t\\t\\t} );\\n\\n\\t\\t\\tif ( data.revertData ) {\\n\\t\\t\\t\\tdata.revertData.bindings.push( revertBindings );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\\n\\t * activates the binding and sets its initial value.\\n\\t *\\n\\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\\n\\t * text node `textContent`.\\n\\t *\\n\\t * @protected\\n\\t * @param {Object} options Binding options.\\n\\t * @param {module:ui/template~TemplateValueSchema} options.schema\\n\\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\\n\\t * @param {module:ui/template~RenderData} options.data Rendering data.\\n\\t */\\n\\t_bindToObservable( { schema, updater, data } ) {\\n\\t\\tconst revertData = data.revertData;\\n\\n\\t\\t// Set initial values.\\n\\t\\tsyncValueSchemaValue( schema, updater, data );\\n\\n\\t\\tconst revertBindings = schema\\n\\t\\t\\t// Filter \\\"falsy\\\" (false, undefined, null, '') value schema components out.\\n\\t\\t\\t.filter( item => !isFalsy( item ) )\\n\\t\\t\\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\\n\\t\\t\\t.filter( item => item.observable )\\n\\t\\t\\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\\n\\t\\t\\t// TODO: Reduce the number of listeners attached as many bindings may listen\\n\\t\\t\\t// to the same observable attribute.\\n\\t\\t\\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\\n\\n\\t\\tif ( revertData ) {\\n\\t\\t\\trevertData.bindings.push( revertBindings );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\\n\\t * return it to the original state.\\n\\t *\\n\\t * @protected\\n\\t * @param {HTMLElement|Text} node A node to be reverted.\\n\\t * @param {module:ui/template~RenderData#revertData} revertData Stores information about\\n\\t * what changes have been made by {@link #apply} to the node.\\n\\t */\\n\\t_revertTemplateFromNode( node, revertData ) {\\n\\t\\tfor ( const binding of revertData.bindings ) {\\n\\t\\t\\t// Each binding may consist of several observable+observable#attribute.\\n\\t\\t\\t// like the following has 2:\\n\\t\\t\\t//\\n\\t\\t\\t//\\t\\tclass: [\\n\\t\\t\\t//\\t\\t\\t'x',\\n\\t\\t\\t//\\t\\t\\tbind.to( 'foo' ),\\n\\t\\t\\t//\\t\\t\\t'y',\\n\\t\\t\\t//\\t\\t\\tbind.to( 'bar' )\\n\\t\\t\\t//\\t\\t]\\n\\t\\t\\t//\\n\\t\\t\\tfor ( const revertBinding of binding ) {\\n\\t\\t\\t\\trevertBinding();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( revertData.text ) {\\n\\t\\t\\tnode.textContent = revertData.text;\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor ( const attrName in revertData.attributes ) {\\n\\t\\t\\tconst attrValue = revertData.attributes[ attrName ];\\n\\n\\t\\t\\t// When the attribute has **not** been set before #apply().\\n\\t\\t\\tif ( attrValue === null ) {\\n\\t\\t\\t\\tnode.removeAttribute( attrName );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnode.setAttribute( attrName, attrValue );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor ( let i = 0; i < revertData.children.length; ++i ) {\\n\\t\\t\\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\\n\\t\\t}\\n\\t}\\n}\\n\\nmix( Template, EmitterMixin );\\n\\n/**\\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\\n *\\n * @protected\\n */\\nexport class TemplateBinding {\\n\\t/**\\n\\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\\n\\t *\\n\\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\\n\\t */\\n\\tconstructor( def ) {\\n\\t\\tObject.assign( this, def );\\n\\n\\t\\t/**\\n\\t\\t * An observable instance of the binding. It either:\\n\\t\\t *\\n\\t\\t * * provides the attribute with the value,\\n\\t\\t * * or passes the event when a corresponding DOM event is fired.\\n\\t\\t *\\n\\t\\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\\n\\t\\t *\\n\\t\\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\\n\\t\\t * * or listen to the event in the DOM.\\n\\t\\t *\\n\\t\\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\\n\\t\\t *\\n\\t\\t * @member {String} module:ui/template~TemplateBinding#attribute\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\\n\\t\\t *\\n\\t\\t * @member {Function} [module:ui/template~TemplateBinding#callback]\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\\n\\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\\n\\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\\n\\t *\\n\\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\\n\\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\\n\\t * {@link module:ui/template~TemplateBinding#observable}.\\n\\t */\\n\\tgetValue( node ) {\\n\\t\\tconst value = this.observable[ this.attribute ];\\n\\n\\t\\treturn this.callback ? this.callback( value, node ) : value;\\n\\t}\\n\\n\\t/**\\n\\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\\n\\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\\n\\t * value of {@link module:ui/template~TemplateValueSchema}.\\n\\t *\\n\\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\\n\\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t * @returns {Function} A function to sever the listener binding.\\n\\t */\\n\\tactivateAttributeListener( schema, updater, data ) {\\n\\t\\tconst callback = () => syncValueSchemaValue( schema, updater, data );\\n\\n\\t\\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\\n\\n\\t\\t// Allows revert of the listener.\\n\\t\\treturn () => {\\n\\t\\t\\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\\n\\t\\t};\\n\\t}\\n}\\n\\n/**\\n * Describes either:\\n *\\n * * a binding to an {@link module:utils/observablemixin~Observable},\\n * * or a native DOM event binding.\\n *\\n * It is created by the {@link module:ui/template~BindChain#to} method.\\n *\\n * @protected\\n */\\nexport class TemplateToBinding extends TemplateBinding {\\n\\t/**\\n\\t * Activates the listener for the native DOM event, which when fired, is propagated by\\n\\t * the {@link module:ui/template~TemplateBinding#emitter}.\\n\\t *\\n\\t * @param {String} domEvtName The name of the native DOM event.\\n\\t * @param {String} domSelector The selector in the DOM to filter delegated events.\\n\\t * @param {module:ui/template~RenderData} data Rendering data.\\n\\t * @returns {Function} A function to sever the listener binding.\\n\\t */\\n\\tactivateDomEventListener( domEvtName, domSelector, data ) {\\n\\t\\tconst callback = ( evt, domEvt ) => {\\n\\t\\t\\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\\n\\t\\t\\t\\tif ( typeof this.eventNameOrFunction == 'function' ) {\\n\\t\\t\\t\\t\\tthis.eventNameOrFunction( domEvt );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tthis.observable.fire( this.eventNameOrFunction, domEvt );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis.emitter.listenTo( data.node, domEvtName, callback );\\n\\n\\t\\t// Allows revert of the listener.\\n\\t\\treturn () => {\\n\\t\\t\\tthis.emitter.stopListening( data.node, domEvtName, callback );\\n\\t\\t};\\n\\t}\\n}\\n\\n/**\\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\\n * method.\\n *\\n * @protected\\n */\\nexport class TemplateIfBinding extends TemplateBinding {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tgetValue( node ) {\\n\\t\\tconst value = super.getValue( node );\\n\\n\\t\\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\\n\\t}\\n\\n\\t/**\\n\\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\\n\\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\\n\\t *\\n\\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\\n\\t */\\n}\\n\\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\\n// {@link module:ui/template~TemplateBinding}.\\n//\\n// @param {module:ui/template~TemplateValueSchema} schema\\n// @returns {Boolean}\\nfunction hasTemplateBinding( schema ) {\\n\\tif ( !schema ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// Normalize attributes with additional data like namespace:\\n\\t//\\n\\t//\\t\\tclass: {\\n\\t//\\t\\t\\tns: 'abc',\\n\\t//\\t\\t\\tvalue: [ ... ]\\n\\t//\\t\\t}\\n\\t//\\n\\tif ( schema.value ) {\\n\\t\\tschema = schema.value;\\n\\t}\\n\\n\\tif ( Array.isArray( schema ) ) {\\n\\t\\treturn schema.some( hasTemplateBinding );\\n\\t} else if ( schema instanceof TemplateBinding ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\\n// items.\\n//\\n// @param {module:ui/template~TemplateValueSchema} schema\\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\\n// @return {Array}\\nfunction getValueSchemaValue( schema, node ) {\\n\\treturn schema.map( schemaItem => {\\n\\t\\t// Process {@link module:ui/template~TemplateBinding} bindings.\\n\\t\\tif ( schemaItem instanceof TemplateBinding ) {\\n\\t\\t\\treturn schemaItem.getValue( node );\\n\\t\\t}\\n\\n\\t\\t// All static values like strings, numbers, and \\\"falsy\\\" values (false, null, undefined, '', etc.) just pass.\\n\\t\\treturn schemaItem;\\n\\t} );\\n}\\n\\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\\n// constructed from {@link module:ui/template~TemplateValueSchema}.\\n//\\n// @param {module:ui/template~TemplateValueSchema} schema\\n// @param {Function} updater A function which updates the DOM (like attribute or text).\\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\\nfunction syncValueSchemaValue( schema, updater, { node } ) {\\n\\tlet value = getValueSchemaValue( schema, node );\\n\\n\\t// Check if schema is a single Template.bind.if, like:\\n\\t//\\n\\t//\\t\\tclass: Template.bind.if( 'foo' )\\n\\t//\\n\\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\\n\\t\\tvalue = value[ 0 ];\\n\\t} else {\\n\\t\\tvalue = value.reduce( arrayValueReducer, '' );\\n\\t}\\n\\n\\tif ( isFalsy( value ) ) {\\n\\t\\tupdater.remove();\\n\\t} else {\\n\\t\\tupdater.set( value );\\n\\t}\\n}\\n\\n// Returns an object consisting of `set` and `remove` functions, which\\n// can be used in the context of DOM Node to set or reset `textContent`.\\n// @see module:ui/view~View#_bindToObservable\\n//\\n// @param {Node} node DOM Node to be modified.\\n// @returns {Object}\\nfunction getTextUpdater( node ) {\\n\\treturn {\\n\\t\\tset( value ) {\\n\\t\\t\\tnode.textContent = value;\\n\\t\\t},\\n\\n\\t\\tremove() {\\n\\t\\t\\tnode.textContent = '';\\n\\t\\t}\\n\\t};\\n}\\n\\n// Returns an object consisting of `set` and `remove` functions, which\\n// can be used in the context of DOM Node to set or reset an attribute.\\n// @see module:ui/view~View#_bindToObservable\\n//\\n// @param {Node} node DOM Node to be modified.\\n// @param {String} attrName Name of the attribute to be modified.\\n// @param {String} [ns=null] Namespace to use.\\n// @returns {Object}\\nfunction getAttributeUpdater( el, attrName, ns ) {\\n\\treturn {\\n\\t\\tset( value ) {\\n\\t\\t\\tel.setAttributeNS( ns, attrName, value );\\n\\t\\t},\\n\\n\\t\\tremove() {\\n\\t\\t\\tel.removeAttributeNS( ns, attrName );\\n\\t\\t}\\n\\t};\\n}\\n\\n// Returns an object consisting of `set` and `remove` functions, which\\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\\n// @see module:ui/view~View#_bindToObservable\\n//\\n// @param {Node} node DOM Node to be modified.\\n// @param {String} styleName Name of the style to be modified.\\n// @returns {Object}\\nfunction getStyleUpdater( el, styleName ) {\\n\\treturn {\\n\\t\\tset( value ) {\\n\\t\\t\\tel.style[ styleName ] = value;\\n\\t\\t},\\n\\n\\t\\tremove() {\\n\\t\\t\\tel.style[ styleName ] = null;\\n\\t\\t}\\n\\t};\\n}\\n\\n// Clones definition of the template.\\n//\\n// @param {module:ui/template~TemplateDefinition} def\\n// @returns {module:ui/template~TemplateDefinition}\\nfunction clone( def ) {\\n\\tconst clone = cloneDeepWith( def, value => {\\n\\t\\t// Don't clone the `Template.bind`* bindings because of the references to Observable\\n\\t\\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\\n\\t\\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\\n\\t\\t// along with the definition.\\n\\t\\t//\\n\\t\\t// Don't clone Template instances if provided as a child. They're simply #render()ed\\n\\t\\t// and nothing should interfere.\\n\\t\\t//\\n\\t\\t// Also don't clone View instances if provided as a child of the Template. The template\\n\\t\\t// instance will be extracted from the View during the normalization and there's no need\\n\\t\\t// to clone it.\\n\\t\\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t} );\\n\\n\\treturn clone;\\n}\\n\\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\\n//\\n// See:\\n//  * {@link normalizeAttributes}\\n//  * {@link normalizeListeners}\\n//  * {@link normalizePlainTextDefinition}\\n//  * {@link normalizeTextDefinition}\\n//\\n// @param {module:ui/template~TemplateDefinition} def\\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\\nfunction normalize( def ) {\\n\\tif ( typeof def == 'string' ) {\\n\\t\\tdef = normalizePlainTextDefinition( def );\\n\\t} else if ( def.text ) {\\n\\t\\tnormalizeTextDefinition( def );\\n\\t}\\n\\n\\tif ( def.on ) {\\n\\t\\tdef.eventListeners = normalizeListeners( def.on );\\n\\n\\t\\t// Template mixes EmitterMixin, so delete #on to avoid collision.\\n\\t\\tdelete def.on;\\n\\t}\\n\\n\\tif ( !def.text ) {\\n\\t\\tif ( def.attributes ) {\\n\\t\\t\\tnormalizeAttributes( def.attributes );\\n\\t\\t}\\n\\n\\t\\tconst children = [];\\n\\n\\t\\tif ( def.children ) {\\n\\t\\t\\tif ( isViewCollection( def.children ) ) {\\n\\t\\t\\t\\tchildren.push( def.children );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor ( const child of def.children ) {\\n\\t\\t\\t\\t\\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\\n\\t\\t\\t\\t\\t\\tchildren.push( child );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tchildren.push( new Template( child ) );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tdef.children = children;\\n\\t}\\n\\n\\treturn def;\\n}\\n\\n// Normalizes \\\"attributes\\\" section of {@link module:ui/template~TemplateDefinition}.\\n//\\n//\\t\\tattributes: {\\n//\\t\\t\\ta: 'bar',\\n//\\t\\t\\tb: {@link module:ui/template~TemplateBinding},\\n//\\t\\t\\tc: {\\n//\\t\\t\\t\\tvalue: 'bar'\\n//\\t\\t\\t}\\n//\\t\\t}\\n//\\n// becomes\\n//\\n//\\t\\tattributes: {\\n//\\t\\t\\ta: [ 'bar' ],\\n//\\t\\t\\tb: [ {@link module:ui/template~TemplateBinding} ],\\n//\\t\\t\\tc: {\\n//\\t\\t\\t\\tvalue: [ 'bar' ]\\n//\\t\\t\\t}\\n//\\t\\t}\\n//\\n// @param {Object} attrs\\nfunction normalizeAttributes( attrs ) {\\n\\tfor ( const a in attrs ) {\\n\\t\\tif ( attrs[ a ].value ) {\\n\\t\\t\\tattrs[ a ].value = [].concat( attrs[ a ].value );\\n\\t\\t}\\n\\n\\t\\tarrayify( attrs, a );\\n\\t}\\n}\\n\\n// Normalizes \\\"on\\\" section of {@link module:ui/template~TemplateDefinition}.\\n//\\n//\\t\\ton: {\\n//\\t\\t\\ta: 'bar',\\n//\\t\\t\\tb: {@link module:ui/template~TemplateBinding},\\n//\\t\\t\\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\\n//\\t\\t}\\n//\\n// becomes\\n//\\n//\\t\\ton: {\\n//\\t\\t\\ta: [ 'bar' ],\\n//\\t\\t\\tb: [ {@link module:ui/template~TemplateBinding} ],\\n//\\t\\t\\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\\n//\\t\\t}\\n//\\n// @param {Object} listeners\\n// @returns {Object} Object containing normalized listeners.\\nfunction normalizeListeners( listeners ) {\\n\\tfor ( const l in listeners ) {\\n\\t\\tarrayify( listeners, l );\\n\\t}\\n\\n\\treturn listeners;\\n}\\n\\n// Normalizes \\\"string\\\" {@link module:ui/template~TemplateDefinition}.\\n//\\n//\\t\\t\\\"foo\\\"\\n//\\n// becomes\\n//\\n//\\t\\t{ text: [ 'foo' ] },\\n//\\n// @param {String} def\\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\\nfunction normalizePlainTextDefinition( def ) {\\n\\treturn {\\n\\t\\ttext: [ def ]\\n\\t};\\n}\\n\\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\\n//\\n//\\t\\tchildren: [\\n//\\t\\t\\t{ text: 'def' },\\n//\\t\\t\\t{ text: {@link module:ui/template~TemplateBinding} }\\n//\\t\\t]\\n//\\n// becomes\\n//\\n//\\t\\tchildren: [\\n//\\t\\t\\t{ text: [ 'def' ] },\\n//\\t\\t\\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\\n//\\t\\t]\\n//\\n// @param {module:ui/template~TemplateDefinition} def\\nfunction normalizeTextDefinition( def ) {\\n\\tif ( !Array.isArray( def.text ) ) {\\n\\t\\tdef.text = [ def.text ];\\n\\t}\\n}\\n\\n// Wraps an entry in Object in an Array, if not already one.\\n//\\n//\\t\\t{\\n//\\t\\t\\tx: 'y',\\n//\\t\\t\\ta: [ 'b' ]\\n//\\t\\t}\\n//\\n// becomes\\n//\\n//\\t\\t{\\n//\\t\\t\\tx: [ 'y' ],\\n//\\t\\t\\ta: [ 'b' ]\\n//\\t\\t}\\n//\\n// @param {Object} obj\\n// @param {String} key\\nfunction arrayify( obj, key ) {\\n\\tif ( !Array.isArray( obj[ key ] ) ) {\\n\\t\\tobj[ key ] = [ obj[ key ] ];\\n\\t}\\n}\\n\\n// A helper which concatenates the value avoiding unwanted\\n// leading white spaces.\\n//\\n// @param {String} prev\\n// @param {String} cur\\n// @returns {String}\\nfunction arrayValueReducer( prev, cur ) {\\n\\tif ( isFalsy( cur ) ) {\\n\\t\\treturn prev;\\n\\t} else if ( isFalsy( prev ) ) {\\n\\t\\treturn cur;\\n\\t} else {\\n\\t\\treturn `${ prev } ${ cur }`;\\n\\t}\\n}\\n\\n// Extends one object defined in the following format:\\n//\\n//\\t\\t{\\n//\\t\\t\\tkey1: [Array1],\\n//\\t\\t\\tkey2: [Array2],\\n//\\t\\t\\t...\\n//\\t\\t\\tkeyN: [ArrayN]\\n//\\t\\t}\\n//\\n// with another object of the same data format.\\n//\\n// @param {Object} obj Base object.\\n// @param {Object} ext Object extending base.\\n// @returns {String}\\nfunction extendObjectValueArray( obj, ext ) {\\n\\tfor ( const a in ext ) {\\n\\t\\tif ( obj[ a ] ) {\\n\\t\\t\\tobj[ a ].push( ...ext[ a ] );\\n\\t\\t} else {\\n\\t\\t\\tobj[ a ] = ext[ a ];\\n\\t\\t}\\n\\t}\\n}\\n\\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\\n// with content from {module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\\n//\\n// @param {module:ui/template~Template} def A template instance to be extended.\\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\\nfunction extendTemplate( template, def ) {\\n\\tif ( def.attributes ) {\\n\\t\\tif ( !template.attributes ) {\\n\\t\\t\\ttemplate.attributes = {};\\n\\t\\t}\\n\\n\\t\\textendObjectValueArray( template.attributes, def.attributes );\\n\\t}\\n\\n\\tif ( def.eventListeners ) {\\n\\t\\tif ( !template.eventListeners ) {\\n\\t\\t\\ttemplate.eventListeners = {};\\n\\t\\t}\\n\\n\\t\\textendObjectValueArray( template.eventListeners, def.eventListeners );\\n\\t}\\n\\n\\tif ( def.text ) {\\n\\t\\ttemplate.text.push( ...def.text );\\n\\t}\\n\\n\\tif ( def.children && def.children.length ) {\\n\\t\\tif ( template.children.length != def.children.length ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * The number of children in extended definition does not match.\\n\\t\\t\\t *\\n\\t\\t\\t * @error ui-template-extend-children-mismatch\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError(\\n\\t\\t\\t\\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tlet childIndex = 0;\\n\\n\\t\\tfor ( const childDef of def.children ) {\\n\\t\\t\\textendTemplate( template.children[ childIndex++ ], childDef );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Checks if value is \\\"falsy\\\".\\n// Note: 0 (Number) is not \\\"falsy\\\" in this context.\\n//\\n// @private\\n// @param {*} value Value to be checked.\\nfunction isFalsy( value ) {\\n\\treturn !value && value !== 0;\\n}\\n\\n// Checks if the item is an instance of {@link module:ui/view~View}\\n//\\n// @private\\n// @param {*} value Value to be checked.\\nfunction isView( item ) {\\n\\treturn item instanceof View;\\n}\\n\\n// Checks if the item is an instance of {@link module:ui/template~Template}\\n//\\n// @private\\n// @param {*} value Value to be checked.\\nfunction isTemplate( item ) {\\n\\treturn item instanceof Template;\\n}\\n\\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\\n//\\n// @private\\n// @param {*} value Value to be checked.\\nfunction isViewCollection( item ) {\\n\\treturn item instanceof ViewCollection;\\n}\\n\\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\\n// data.\\n//\\n// @private\\nfunction getEmptyRevertData() {\\n\\treturn {\\n\\t\\tchildren: [],\\n\\t\\tbindings: [],\\n\\t\\tattributes: {}\\n\\t};\\n}\\n\\n// Checks whether an attribute should be extended when\\n// {@link module:ui/template~Template#apply} is called.\\n//\\n// @private\\n// @param {String} attrName Attribute name to check.\\nfunction shouldExtend( attrName ) {\\n\\treturn attrName == 'class' || attrName == 'style';\\n}\\n\\n/**\\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\\n * node a template will render (HTML element or text), attributes of an element, DOM event\\n * listeners and children.\\n *\\n * Also see:\\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\\n *\\n * A sample definition on an HTML element can look like this:\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t{\\n *\\t\\t\\t\\t\\ttag: 'span',\\n *\\t\\t\\t\\t\\tattributes: { ... },\\n *\\t\\t\\t\\t\\tchildren: [ ... ],\\n *\\t\\t\\t\\t},\\n *\\t\\t\\t\\t{\\n *\\t\\t\\t\\t\\ttext: 'static–text'\\n *\\t\\t\\t\\t},\\n *\\t\\t\\t\\t'also-static–text',\\n *\\t\\t\\t],\\n *\\t\\t\\tattributes: {\\n *\\t\\t\\t\\tclass: {@link module:ui/template~TemplateValueSchema},\\n *\\t\\t\\t\\tid: {@link module:ui/template~TemplateValueSchema},\\n *\\t\\t\\t\\tstyle: {@link module:ui/template~TemplateValueSchema}\\n *\\n *\\t\\t\\t\\t// ...\\n *\\t\\t\\t},\\n *\\t\\t\\ton: {\\n *\\t\\t\\t\\t'click': {@link module:ui/template~TemplateListenerSchema}\\n *\\n *\\t\\t\\t\\t// Document.querySelector format is also accepted.\\n *\\t\\t\\t\\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\\n *\\n *\\t\\t\\t\\t// ...\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\\n *\\n *\\t\\tconst view = new SomeView();\\n *\\t\\tconst childTemplate = new Template( { ... } );\\n *\\t\\tconst childNode = document.createElement( 'b' );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\n *\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t// view#element will be added as a child of this <p>.\\n *\\t\\t\\t\\tview,\\n *\\n * \\t\\t\\t\\t// The output of childTemplate.render() will be added here.\\n *\\t\\t\\t\\tchildTemplate,\\n *\\n *\\t\\t\\t\\t// Native DOM nodes are included directly in the rendered output.\\n *\\t\\t\\t\\tchildNode\\n *\\t\\t\\t]\\n *\\t\\t} );\\n *\\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\\n *\\n *\\t\\tconst collection = new ViewCollection();\\n *\\t\\tcollection.add( someView );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\n *\\t\\t\\tchildren: collection\\n *\\t\\t} );\\n *\\n * @typedef module:ui/template~TemplateDefinition\\n * @type Object\\n *\\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\\n *\\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\\n * See the template {@link module:ui/template~Template#children} property.\\n *\\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\\n * See the template {@link module:ui/template~Template#attributes} property.\\n *\\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\\n * See the template {@link module:ui/template~Template#text} property.\\n *\\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\\n * See the template {@link module:ui/template~Template#eventListeners} property.\\n */\\n\\n/**\\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\\n *\\n * Also see:\\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\\n * * {@link module:ui/template~Template.bind} to learn how to configure\\n * {@link module:utils/observablemixin~Observable} attribute bindings,\\n * * {@link module:ui/template~Template#render} to learn how to render a template,\\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\\n * methods to learn more about bindings.\\n *\\n * Attribute values can be described in many different ways:\\n *\\n *\\t\\t// Bind helper will create bindings to attributes of the observable.\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\t\\t\\tattributes: {\\n *\\t\\t\\t\\t// A plain string schema.\\n *\\t\\t\\t\\t'class': 'static-text',\\n *\\n *\\t\\t\\t\\t// An object schema, binds to the \\\"foo\\\" attribute of the\\n *\\t\\t\\t\\t// observable and follows its value.\\n *\\t\\t\\t\\t'class': bind.to( 'foo' ),\\n *\\n *\\t\\t\\t\\t// An array schema, combines the above.\\n *\\t\\t\\t\\t'class': [\\n *\\t\\t\\t\\t\\t'static-text',\\n *\\t\\t\\t\\t\\tbind.to( 'bar', () => { ... } ),\\n *\\n * \\t\\t\\t\\t\\t// Bindings can also be conditional.\\n *\\t\\t\\t\\t\\tbind.if( 'baz', 'class-when-baz-is-true' )\\n *\\t\\t\\t\\t],\\n *\\n *\\t\\t\\t\\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\\n *\\t\\t\\t\\t'class': {\\n *\\t\\t\\t\\t\\tns: 'http://ns.url',\\n *\\t\\t\\t\\t\\tvalue: [\\n *\\t\\t\\t\\t\\t\\tbind.if( 'baz', 'value-when-true' ),\\n *\\t\\t\\t\\t\\t\\t'static-text'\\n *\\t\\t\\t\\t\\t]\\n *\\t\\t\\t\\t},\\n *\\n *\\t\\t\\t\\t// An object schema, specific for styles.\\n *\\t\\t\\t\\tstyle: {\\n *\\t\\t\\t\\t\\tcolor: 'red',\\n *\\t\\t\\t\\t\\tbackgroundColor: bind.to( 'qux', () => { ... } )\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * Text nodes can also have complex values:\\n *\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\t// Will render a \\\"foo\\\" text node.\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttext: 'foo'\\n *\\t\\t} );\\n *\\n *\\t\\t// Will render a \\\"static text: {observable.foo}\\\" text node.\\n *\\t\\t// The text of the node will be updated as the \\\"foo\\\" attribute changes.\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttext: [\\n *\\t\\t\\t\\t'static text: ',\\n *\\t\\t\\t\\tbind.to( 'foo', () => { ... } )\\n *\\t\\t\\t]\\n *\\t\\t} );\\n *\\n * @typedef module:ui/template~TemplateValueSchema\\n * @type {Object|String|Array}\\n */\\n\\n/**\\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\\n * or both, if necessary.\\n *\\n * Also see:\\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\\n *\\n * Check out different ways of attaching event listeners below:\\n *\\n *\\t\\t// Bind helper will propagate events through the observable.\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\t\\t\\ton: {\\n *\\t\\t\\t\\t// An object schema. The observable will fire the \\\"clicked\\\" event upon DOM \\\"click\\\".\\n *\\t\\t\\t\\tclick: bind.to( 'clicked' )\\n *\\n *\\t\\t\\t\\t// An object schema. It will work for \\\"click\\\" event on \\\"a.foo\\\" children only.\\n *\\t\\t\\t\\t'click@a.foo': bind.to( 'clicked' )\\n *\\n *\\t\\t\\t\\t// An array schema, makes the observable propagate multiple events.\\n *\\t\\t\\t\\tclick: [\\n *\\t\\t\\t\\t\\tbind.to( 'clicked' ),\\n *\\t\\t\\t\\t\\tbind.to( 'executed' )\\n *\\t\\t\\t\\t],\\n *\\n *\\t\\t\\t\\t// An array schema with a custom callback.\\n *\\t\\t\\t\\t'click@a.foo': {\\n *\\t\\t\\t\\t\\tbind.to( 'clicked' ),\\n *\\t\\t\\t\\t\\tbind.to( evt => {\\n *\\t\\t\\t\\t\\t\\tconsole.log( `${ evt.target } has been clicked!` );\\n *\\t\\t\\t\\t\\t} }\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * @typedef module:ui/template~TemplateListenerSchema\\n * @type {Object|String|Array}\\n */\\n\\n/**\\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\\n *\\n * @interface module:ui/template~BindChain\\n */\\n\\n/**\\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\\n *\\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\\n * attribute as it changes,\\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\\n *\\n * Some common use cases of `to()` bindings are presented below:\\n *\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'p',\\n *\\t\\t\\tattributes: {\\n *\\t\\t\\t\\t// class=\\\"...\\\" attribute gets bound to `observable#a`\\n *\\t\\t\\t\\tclass: bind.to( 'a' )\\n *\\t\\t\\t},\\n *\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\\n *\\t\\t\\t\\t{\\n *\\t\\t\\t\\t\\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t],\\n *\\t\\t\\ton: {\\n *\\t\\t\\t\\tclick: [\\n *\\t\\t\\t\\t\\t// An observable will fire \\\"clicked\\\" upon \\\"click\\\" in the DOM.\\n *\\t\\t\\t\\t\\tbind.to( 'clicked' ),\\n *\\n *\\t\\t\\t\\t\\t// A custom callback will be executed upon \\\"click\\\" in the DOM.\\n *\\t\\t\\t\\t\\tbind.to( () => {\\n *\\t\\t\\t\\t\\t\\t...\\n *\\t\\t\\t\\t\\t} )\\n *\\t\\t\\t\\t]\\n *\\t\\t\\t}\\n *\\t\\t} ).render();\\n *\\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\\n * {@link module:ui/template~TemplateListenerSchema}.\\n *\\n * @method #to\\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\\n * @return {module:ui/template~TemplateBinding}\\n */\\n\\n/**\\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\\n * node `textContent` so it remains in sync with the observable attribute as it changes.\\n *\\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\\n * depending on the \\\"falseness\\\" of an {@link module:utils/observablemixin~Observable} attribute.\\n *\\n *\\t\\tconst bind = Template.bind( observable, emitter );\\n *\\n *\\t\\tnew Template( {\\n *\\t\\t\\ttag: 'input',\\n *\\t\\t\\tattributes: {\\n *\\t\\t\\t\\t// <input checked> when `observable#a` is not undefined/null/false/''\\n *\\t\\t\\t\\t// <input> when `observable#a` is undefined/null/false\\n *\\t\\t\\t\\tchecked: bind.if( 'a' )\\n *\\t\\t\\t},\\n *\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t{\\n *\\t\\t\\t\\t\\t// <input>\\\"b-is-not-set\\\"</input> when `observable#b` is undefined/null/false/''\\n *\\t\\t\\t\\t\\t// <input></input> when `observable#b` is not \\\"falsy\\\"\\n *\\t\\t\\t\\t\\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t]\\n *\\t\\t} ).render();\\n *\\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\\n *\\n * @method #if\\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\\n * undefined/null/false/'' (empty string).\\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\\n * @return {module:ui/template~TemplateBinding}\\n */\\n\\n/**\\n * The {@link module:ui/template~Template#_renderNode} configuration.\\n *\\n * @private\\n * @interface module:ui/template~RenderData\\n */\\n\\n/**\\n * Tells {@link module:ui/template~Template#_renderNode} to render\\n * children into `DocumentFragment` first and then append the fragment\\n * to the parent element. It is a speed optimization.\\n *\\n * @member {Boolean} #intoFragment\\n */\\n\\n/**\\n * A node which is being rendered.\\n *\\n * @member {HTMLElement|Text} #node\\n */\\n\\n/**\\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\\n * been provided by {@module:ui/template~Template#apply}.\\n *\\n * @member {Boolean} #isApplying\\n */\\n\\n/**\\n * An object storing the data that helps {@module:ui/template~Template#revert}\\n * bringing back an element to its initial state, i.e. before\\n * {@module:ui/template~Template#apply} was called.\\n *\\n * @member {Object} #revertData\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/view\\n */\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport ViewCollection from './viewcollection';\\nimport Template from './template';\\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\\n\\nimport '../theme/globals/globals.css';\\n\\n/**\\n * The basic view class, which represents an HTML element created out of a\\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\\n * interaction\\n *\\n * Views {@link module:ui/view~View#registerChildren aggregate} children in\\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\\n * listeners e.g. by handling rendering and destruction.\\n *\\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\\n * elements, attributes and listeners.\\n *\\n *\\t\\tclass SampleView extends View {\\n *\\t\\t\\tconstructor( locale ) {\\n *\\t\\t\\t\\tsuper( locale );\\n *\\n *\\t\\t\\t\\tconst bind = this.bindTemplate;\\n *\\n *\\t\\t\\t\\t// Views define their interface (state) using observable attributes.\\n *\\t\\t\\t\\tthis.set( 'elementClass', 'bar' );\\n *\\n *\\t\\t\\t\\tthis.setTemplate( {\\n *\\t\\t\\t\\t\\ttag: 'p',\\n *\\n *\\t\\t\\t\\t\\t// The element of the view can be defined with its children.\\n *\\t\\t\\t\\t\\tchildren: [\\n *\\t\\t\\t\\t\\t\\t'Hello',\\n *\\t\\t\\t\\t\\t\\t{\\n *\\t\\t\\t\\t\\t\\t\\ttag: 'b',\\n *\\t\\t\\t\\t\\t\\t\\tchildren: [ 'world!' ]\\n *\\t\\t\\t\\t\\t\\t}\\n *\\t\\t\\t\\t\\t],\\n *\\t\\t\\t\\t\\tattributes: {\\n *\\t\\t\\t\\t\\t\\tclass: [\\n *\\t\\t\\t\\t\\t\\t\\t'foo',\\n *\\n *\\t\\t\\t\\t\\t\\t\\t// Observable attributes control the state of the view in DOM.\\n *\\t\\t\\t\\t\\t\\t\\tbind.to( 'elementClass' )\\n *\\t\\t\\t\\t\\t\\t]\\n *\\t\\t\\t\\t\\t},\\n *\\t\\t\\t\\t\\ton: {\\n *\\t\\t\\t\\t\\t\\t// Views listen to DOM events and propagate them.\\n *\\t\\t\\t\\t\\t\\tclick: bind.to( 'clicked' )\\n *\\t\\t\\t\\t\\t}\\n *\\t\\t\\t\\t} );\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n *\\t\\tconst view = new SampleView( locale );\\n *\\n *\\t\\tview.render();\\n *\\n *\\t\\t// Append <p class=\\\"foo bar\\\">Hello<b>world</b></p> to the <body>\\n *\\t\\tdocument.body.appendChild( view.element );\\n *\\n *\\t\\t// Change the class attribute to <p class=\\\"foo baz\\\">Hello<b>world</b></p>\\n *\\t\\tview.elementClass = 'baz';\\n *\\n *\\t\\t// Respond to the \\\"click\\\" event in DOM by executing a custom action.\\n *\\t\\tview.on( 'clicked', () => {\\n *\\t\\t\\tconsole.log( 'The view has been clicked!' );\\n *\\t\\t} );\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class View {\\n\\t/**\\n\\t * Creates an instance of the {@link module:ui/view~View} class.\\n\\t *\\n\\t * Also see {@link #render}.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\t/**\\n\\t\\t * An HTML element of the view. `null` until {@link #render rendered}\\n\\t\\t * from the {@link #template}.\\n\\t\\t *\\n\\t\\t *\\t\\tclass SampleView extends View {\\n\\t\\t *\\t\\t\\tconstructor() {\\n\\t\\t *\\t\\t\\t\\tsuper();\\n\\t\\t *\\n\\t\\t *\\t\\t\\t\\t// A template instance the #element will be created from.\\n\\t\\t *\\t\\t\\t\\tthis.setTemplate( {\\n\\t\\t *\\t\\t\\t\\t\\ttag: 'p'\\n\\t\\t *\\n\\t\\t *\\t\\t\\t\\t\\t// ...\\n\\t\\t *\\t\\t\\t\\t} );\\n\\t\\t *\\t\\t\\t}\\n\\t\\t *\\t\\t}\\n\\t\\t *\\n\\t\\t *\\t\\tconst view = new SampleView();\\n\\t\\t *\\n\\t\\t *\\t\\t// Renders the #template.\\n\\t\\t *\\t\\tview.render();\\n\\t\\t *\\n\\t\\t *\\t\\t// Append the HTML element of the view to <body>.\\n\\t\\t *\\t\\tdocument.body.appendChild( view.element );\\n\\t\\t *\\n\\t\\t * **Note**: The element of the view can also be assigned directly:\\n\\t\\t *\\n\\t\\t *\\t\\tview.element = document.querySelector( '#my-container' );\\n\\t\\t *\\n\\t\\t * @member {HTMLElement}\\n\\t\\t */\\n\\t\\tthis.element = null;\\n\\n\\t\\t/**\\n\\t\\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #isRendered\\n\\t\\t */\\n\\t\\tthis.isRendered = false;\\n\\n\\t\\t/**\\n\\t\\t * A set of tools to localize the user interface.\\n\\t\\t *\\n\\t\\t * Also see {@link module:core/editor/editor~Editor#locale}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/locale~Locale}\\n\\t\\t */\\n\\t\\tthis.locale = locale;\\n\\n\\t\\t/**\\n\\t\\t * Shorthand for {@link module:utils/locale~Locale#t}.\\n\\t\\t *\\n\\t\\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\\n\\t\\t * be available.\\n\\t\\t *\\n\\t\\t * @see module:utils/locale~Locale#t\\n\\t\\t * @method\\n\\t\\t */\\n\\t\\tthis.t = locale && locale.t;\\n\\n\\t\\t/**\\n\\t\\t * Collections registered with {@link #createCollection}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\\n\\t\\t */\\n\\t\\tthis._viewCollections = new Collection();\\n\\n\\t\\t/**\\n\\t\\t * A collection of view instances, which have been added directly\\n\\t\\t * into the {@link module:ui/template~Template#children}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis._unboundChildren = this.createCollection();\\n\\n\\t\\t// Pass parent locale to its children.\\n\\t\\tthis._viewCollections.on( 'add', ( evt, collection ) => {\\n\\t\\t\\tcollection.locale = locale;\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * Template of this view. It provides the {@link #element} representing\\n\\t\\t * the view in DOM, which is {@link #render rendered}.\\n\\t\\t *\\n\\t\\t * @member {module:ui/template~Template} #template\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\\n\\t\\t * {@link #template}. See {@link #bindTemplate}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Object} #_bindTemplate\\n\\t\\t */\\n\\n\\t\\tthis.decorate( 'render' );\\n\\t}\\n\\n\\t/**\\n\\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\\n\\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\\n\\t *\\n\\t * It provides {@link module:ui/template~BindChain#to `to()`} and\\n\\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\\n\\t * observable attributes and attach DOM listeners.\\n\\t *\\n\\t *\\t\\tclass SampleView extends View {\\n\\t *\\t\\t\\tconstructor( locale ) {\\n\\t *\\t\\t\\t\\tsuper( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tconst bind = this.bindTemplate;\\n\\t *\\n\\t *\\t\\t\\t\\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\\n\\t *\\t\\t\\t\\t// the state of the view in DOM.\\n\\t *\\t\\t\\t\\tthis.set( {\\n\\t *\\t\\t\\t\\t\\telementClass: 'foo',\\n\\t *\\t\\t\\t\\t \\tisEnabled: true\\n\\t *\\t\\t\\t\\t } );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.setTemplate( {\\n\\t *\\t\\t\\t\\t\\ttag: 'p',\\n\\t *\\n\\t *\\t\\t\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\t\\t\\t// The class HTML attribute will follow elementClass\\n\\t *\\t\\t\\t\\t\\t\\t// and isEnabled view attributes.\\n\\t *\\t\\t\\t\\t\\t\\tclass: [\\n\\t *\\t\\t\\t\\t\\t\\t\\tbind.to( 'elementClass' )\\n\\t *\\t\\t\\t\\t\\t\\t\\tbind.if( 'isEnabled', 'present-when-enabled' )\\n\\t *\\t\\t\\t\\t\\t\\t]\\n\\t *\\t\\t\\t\\t\\t},\\n\\t *\\n\\t *\\t\\t\\t\\t\\ton: {\\n\\t *\\t\\t\\t\\t\\t\\t// The view will fire the \\\"clicked\\\" event upon clicking <p> in DOM.\\n\\t *\\t\\t\\t\\t\\t\\tclick: bind.to( 'clicked' )\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t} );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t * @method #bindTemplate\\n\\t */\\n\\tget bindTemplate() {\\n\\t\\tif ( this._bindTemplate ) {\\n\\t\\t\\treturn this._bindTemplate;\\n\\t\\t}\\n\\n\\t\\treturn ( this._bindTemplate = Template.bind( this, this ) );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a new collection of views, which can be used as\\n\\t * {@link module:ui/template~Template#children} of this view.\\n\\t *\\n\\t *\\t\\tclass SampleView extends View {\\n\\t *\\t\\t\\tconstructor( locale ) {\\n\\t *\\t\\t\\t\\tsuper( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.items = this.createCollection();\\n \\t *\\n\\t *\\t\\t\\t\\tthis.setTemplate( {\\n\\t *\\t\\t\\t\\t\\ttag: 'p',\\n\\t *\\n\\t *\\t\\t\\t\\t\\t// `items` collection will render here.\\n\\t *\\t\\t\\t\\t\\tchildren: this.items\\n\\t *\\t\\t\\t\\t} );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tconst view = new SampleView( locale );\\n\\t *\\t\\tconst child = new ChildView( locale );\\n\\t *\\n\\t *\\t\\tview.render();\\n\\t *\\n\\t *\\t\\t// It will append <p></p> to the <body>.\\n\\t *\\t\\tdocument.body.appendChild( view.element );\\n\\t *\\n\\t *\\t\\t// From now on the child is nested under its parent, which is also reflected in DOM.\\n\\t *\\t\\t// <p><child#element></p>\\n\\t *\\t\\tview.items.add( child );\\n\\t *\\n\\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\\n\\t */\\n\\tcreateCollection() {\\n\\t\\tconst collection = new ViewCollection();\\n\\n\\t\\tthis._viewCollections.add( collection );\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\t/**\\n\\t * Registers a new child view under the view instance. Once registered, a child\\n\\t * view is managed by its parent, including {@link #render rendering}\\n\\t * and {@link #destroy destruction}.\\n\\t *\\n\\t * To revert this, use {@link #deregisterChildren}.\\n\\t *\\n\\t *\\t\\tclass SampleView extends View {\\n\\t *\\t\\t\\tconstructor( locale ) {\\n\\t *\\t\\t\\t\\tsuper( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.childA = new SomeChildView( locale );\\n\\t *\\t\\t\\t\\tthis.childB = new SomeChildView( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.setTemplate( { tag: 'p' } );\\n\\t *\\n\\t *\\t\\t\\t\\t// Register the children.\\n\\t *\\t\\t\\t\\tthis.registerChildren( [ this.childA, this.childB ] );\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\trender() {\\n\\t *\\t\\t\\t\\tsuper.render();\\n\\t *\\n\\t *\\t\\t\\t\\tthis.element.appendChild( this.childA.element );\\n\\t *\\t\\t\\t\\tthis.element.appendChild( this.childB.element );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tconst view = new SampleView( locale );\\n\\t *\\n\\t *\\t\\tview.render();\\n\\t *\\n\\t *\\t\\t// Will append <p><childA#element><b></b><childB#element></p>.\\n\\t *\\t\\tdocument.body.appendChild( view.element );\\n\\t *\\n\\t * **Note**: There's no need to add child views if they're already referenced in the\\n\\t * {@link #template}:\\n\\t *\\n\\t *\\t\\tclass SampleView extends View {\\n\\t *\\t\\t\\tconstructor( locale ) {\\n\\t *\\t\\t\\t\\tsuper( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.childA = new SomeChildView( locale );\\n\\t *\\t\\t\\t\\tthis.childB = new SomeChildView( locale );\\n\\t *\\n\\t *\\t\\t\\t\\tthis.setTemplate( {\\n\\t *\\t\\t\\t\\t\\ttag: 'p',\\n\\t *\\n \\t *\\t\\t\\t\\t\\t// These children will be added automatically. There's no\\n \\t *\\t\\t\\t\\t\\t// need to call {@link #registerChildren} for any of them.\\n\\t *\\t\\t\\t\\t\\tchildren: [ this.childA, this.childB ]\\n\\t *\\t\\t\\t\\t} );\\n\\t *\\t\\t\\t}\\n\\t *\\n\\t *\\t\\t\\t// ...\\n\\t *\\t\\t}\\n\\t *\\n\\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\\n\\t */\\n\\tregisterChildren( children ) {\\n\\t\\tif ( !isIterable( children ) ) {\\n\\t\\t\\tchildren = [ children ];\\n\\t\\t}\\n\\n\\t\\tfor ( const child of children ) {\\n\\t\\t\\tthis._unboundChildren.add( child );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * The opposite of {@link #registerChildren}. Removes a child view from this view instance.\\n\\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\\n\\t * become a child of another parent view.\\n\\t *\\n\\t * @see #registerChildren\\n\\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\\n\\t */\\n\\tderegisterChildren( children ) {\\n\\t\\tif ( !isIterable( children ) ) {\\n\\t\\t\\tchildren = [ children ];\\n\\t\\t}\\n\\n\\t\\tfor ( const child of children ) {\\n\\t\\t\\tthis._unboundChildren.remove( child );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sets the {@link #template} of the view with with given definition.\\n\\t *\\n\\t * A shorthand for:\\n\\t *\\n\\t *\\t\\tview.setTemplate( definition );\\n\\t *\\n\\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\\n\\t */\\n\\tsetTemplate( definition ) {\\n\\t\\tthis.template = new Template( definition );\\n\\t}\\n\\n\\t/**\\n\\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\\n\\t * with given definition.\\n\\t *\\n\\t * A shorthand for:\\n\\t *\\n\\t *\\t\\tTemplate.extend( view.template, definition );\\n\\t *\\n\\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\\n\\t *\\n\\t * @param {module:ui/template~TemplateDefinition} definition Definition which\\n\\t * extends the {@link #template}.\\n\\t */\\n\\textendTemplate( definition ) {\\n\\t\\tTemplate.extend( this.template, definition );\\n\\t}\\n\\n\\t/**\\n\\t * Recursively renders the view.\\n\\t *\\n\\t * Once the view is rendered:\\n\\t * * the {@link #element} becomes an HTML element out of {@link #template},\\n\\t * * the {@link #isRendered} flag is set `true`.\\n\\t *\\n\\t * **Note**: The children of the view:\\n\\t * * defined directly in the {@link #template}\\n\\t * * residing in collections created by the {@link #createCollection} method,\\n\\t * * and added by {@link #registerChildren}\\n\\t * are also rendered in the process.\\n\\t *\\n\\t * In general, `render()` method is the right place to keep the code which refers to the\\n\\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\\n\\t *\\n\\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\\n\\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\\n\\t * such references should be done in `render()`.\\n\\t *\\n\\t *\\t\\tclass SampleView extends View {\\n\\t *\\t\\t\\tconstructor() {\\n\\t *\\t\\t\\t\\tthis.setTemplate( {\\n\\t *\\t\\t\\t\\t\\t// ...\\n\\t *\\t\\t\\t\\t} );\\n\\t *\\t\\t\\t},\\n\\t *\\n\\t *\\t\\t\\trender() {\\n\\t *\\t\\t\\t\\t// View#element becomes available.\\n\\t *\\t\\t\\t\\tsuper.render();\\n\\t *\\n\\t *\\t\\t\\t\\t// The \\\"scroll\\\" listener depends on #element.\\n\\t *\\t\\t\\t\\tthis.listenTo( window, 'scroll', () => {\\n\\t *\\t\\t\\t\\t\\t// A reference to #element would render the #template and make it non-extendable.\\n\\t *\\t\\t\\t\\t\\tif ( window.scrollY > 0 ) {\\n\\t *\\t\\t\\t\\t\\t\\tthis.element.scrollLeft = 100;\\n\\t *\\t\\t\\t\\t\\t} else {\\n\\t *\\t\\t\\t\\t\\t\\tthis.element.scrollLeft = 0;\\n\\t *\\t\\t\\t\\t\\t}\\n\\t *\\t\\t\\t\\t} );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t}\\n\\t *\\n\\t *\\t\\tconst view = new SampleView();\\n\\t *\\n\\t *\\t\\t// Let's customize the view before it gets rendered.\\n\\t *\\t\\tview.extendTemplate( {\\n\\t *\\t\\t\\tattributes: {\\n\\t *\\t\\t\\t\\tclass: [\\n\\t *\\t\\t\\t\\t\\t'additional-class'\\n\\t *\\t\\t\\t\\t]\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t *\\t\\t// Late rendering allows customization of the view.\\n\\t *\\t\\tview.render();\\n\\t */\\n\\trender() {\\n\\t\\tif ( this.isRendered ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * This View has already been rendered.\\n\\t\\t\\t *\\n\\t\\t\\t * @error ui-view-render-rendered\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'ui-view-render-already-rendered: This View has already been rendered.' );\\n\\t\\t}\\n\\n\\t\\t// Render #element of the view.\\n\\t\\tif ( this.template ) {\\n\\t\\t\\tthis.element = this.template.render();\\n\\n\\t\\t\\t// Auto–register view children from #template.\\n\\t\\t\\tthis.registerChildren( this.template.getViews() );\\n\\t\\t}\\n\\n\\t\\tthis.isRendered = true;\\n\\t}\\n\\n\\t/**\\n\\t * Recursively destroys the view instance and child views added by {@link #registerChildren} and\\n\\t * residing in collections created by the {@link #createCollection}.\\n\\t *\\n\\t * Destruction disables all event listeners:\\n\\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\\n\\t * * defined in the {@link #template} for DOM events.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.stopListening();\\n\\n\\t\\tthis._viewCollections.map( c => c.destroy() );\\n\\t}\\n\\n\\t/**\\n\\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\\n\\t * this event with the default priority.\\n\\t *\\n\\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\\n\\t *\\n\\t * @event render\\n\\t */\\n}\\n\\nmix( View, DomEmitterMixin );\\nmix( View, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/editorui/editoruiview\\n */\\n\\n/* globals document */\\n\\nimport View from '../view';\\nimport Template from '../template';\\n\\nimport '../../theme/components/editorui/editorui.css';\\n\\n/**\\n * The editor UI view class. Base class for the editor main views.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class EditorUIView extends View {\\n\\t/**\\n\\t * Creates an instance of the editor UI view class.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The locale instance.\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views, detached from the DOM\\n\\t\\t * structure of the editor, like panels, icons etc.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection} #body\\n\\t\\t */\\n\\t\\tthis.body = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * The element holding elements of the 'body' region.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {HTMLElement} #_bodyCollectionContainer\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tthis._renderBodyCollection();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis._bodyCollectionContainer.remove();\\n\\n\\t\\treturn super.destroy();\\n\\t}\\n\\n\\t/**\\n\\t * Creates and appends to `<body>` the {@link #body} collection container.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_renderBodyCollection() {\\n\\t\\tconst bodyElement = this._bodyCollectionContainer = new Template( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-body',\\n\\t\\t\\t\\t\\t'ck-rounded-corners',\\n\\t\\t\\t\\t\\t'ck-reset_all'\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\t\\t\\tchildren: this.body\\n\\t\\t} ).render();\\n\\n\\t\\tdocument.body.appendChild( bodyElement );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/label/labelview\\n */\\n\\nimport View from '../view';\\n\\nimport '../../theme/components/label/label.css';\\n\\n/**\\n * The label view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class LabelView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * The text of the label.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #text\\n\\t\\t */\\n\\t\\tthis.set( 'text' );\\n\\n\\t\\t/**\\n\\t\\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #for\\n\\t\\t */\\n\\t\\tthis.set( 'for' );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'label',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-label'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tfor: bind.to( 'for' )\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttext: bind.to( 'text' )\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/editorui/boxed/boxededitoruiview\\n */\\n\\nimport EditorUIView from '../../editorui/editoruiview';\\nimport LabelView from '../../label/labelview';\\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\\n\\n/**\\n * The boxed editor UI view class. This class represents an editor interface\\n * consisting of a toolbar and an editable area, enclosed within a box.\\n *\\n * @extends module:ui/editorui/editoruiview~EditorUIView\\n */\\nexport default class BoxedEditorUIView extends EditorUIView {\\n\\t/**\\n\\t * Creates an instance of the boxed editor UI view class.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} locale The locale instance..\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst ariaLabelUid = uid();\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views located in the top (`.ck-editor__top`)\\n\\t\\t * area of the UI.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.top = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views located in the main (`.ck-editor__main`)\\n\\t\\t * area of the UI.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.main = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * Voice label of the UI.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/view~View} #_voiceLabelView\\n\\t\\t */\\n\\t\\tthis._voiceLabelView = this._createVoiceLabel( ariaLabelUid );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-reset',\\n\\t\\t\\t\\t\\t'ck-editor',\\n\\t\\t\\t\\t\\t'ck-rounded-corners'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\trole: 'application',\\n\\t\\t\\t\\tdir: 'ltr',\\n\\t\\t\\t\\tlang: locale.language,\\n\\t\\t\\t\\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis._voiceLabelView,\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttag: 'div',\\n\\t\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\t\\tclass: 'ck-editor__top ck-reset_all',\\n\\t\\t\\t\\t\\t\\trole: 'presentation'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tchildren: this.top\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttag: 'div',\\n\\t\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\t\\tclass: 'ck-editor__main',\\n\\t\\t\\t\\t\\t\\trole: 'presentation'\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tchildren: this.main\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a voice label view instance.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/label/labelview~LabelView}\\n\\t */\\n\\t_createVoiceLabel( ariaLabelUid ) {\\n\\t\\tconst t = this.t;\\n\\t\\tconst voiceLabel = new LabelView();\\n\\n\\t\\tvoiceLabel.text = t( 'Rich Text Editor' );\\n\\n\\t\\tvoiceLabel.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\\n\\t\\t\\t\\tclass: 'ck-voice-label'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\treturn voiceLabel;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/editableui/editableuiview\\n */\\n\\nimport View from '../view';\\n\\n/**\\n * The editable UI view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class EditableUIView extends View {\\n\\t/**\\n\\t * Creates an instance of EditableUIView class.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The locale instance.\\n\\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\\n\\t * should create it. Otherwise, the existing element should be used.\\n\\t */\\n\\tconstructor( locale, editableElement ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tif ( editableElement ) {\\n\\t\\t\\tthis.element = this.editableElement = editableElement;\\n\\t\\t}\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\tbind.to( 'isFocused', value => value ? 'ck-focused' : 'ck-blurred' ),\\n\\t\\t\\t\\t\\t'ck',\\n\\t\\t\\t\\t\\t'ck-editor__editable',\\n\\t\\t\\t\\t\\t'ck-content',\\n\\t\\t\\t\\t\\t'ck-rounded-corners'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tcontenteditable: bind.to( 'isReadOnly', value => !value ),\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the editable is writable or not.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the editable is focused, i.e. the user is typing in it.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isFocused\\n\\t\\t */\\n\\t\\tthis.set( 'isFocused', false );\\n\\n\\t\\t/**\\n\\t\\t * An external {@link #editableElement} passed into the constructor, which also means\\n\\t\\t * the view will not render its {@link #template}.\\n\\t\\t *\\n\\t\\t * @member {HTMLElement} #externalElement\\n\\t\\t */\\n\\t\\tthis.externalElement = editableElement;\\n\\n\\t\\t/**\\n\\t\\t * The element which is the main editable element (usually the one with `contentEditable=\\\"true\\\"`).\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {HTMLElement} #editableElement\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Renders the view by either applying the {@link #template} to the existing\\n\\t * {@link #editableElement} or assigning {@link #element} as {@link #editableElement}.\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tif ( this.externalElement ) {\\n\\t\\t\\tthis.template.apply( this.element = this.externalElement );\\n\\t\\t} else {\\n\\t\\t\\tthis.editableElement = this.element;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tif ( this.externalElement ) {\\n\\t\\t\\tthis.template.revert( this.externalElement );\\n\\t\\t}\\n\\n\\t\\tsuper.destroy();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/editableui/inline/inlineeditableuiview\\n */\\n\\nimport EditableUIView from '../../editableui/editableuiview';\\n\\n/**\\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\\n *\\n * @extends module:ui/editableui/editableuiview~EditableUIView\\n */\\nexport default class InlineEditableUIView extends EditableUIView {\\n\\t/**\\n\\t * Creates an instance of the InlineEditableUIView class.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The locale instance.\\n\\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\\n\\t * {@link module:ui/editableui/editableuiview~EditableUIView}\\n\\t * should create it. Otherwise, the existing element should be used.\\n\\t */\\n\\tconstructor( locale, editableElement ) {\\n\\t\\tsuper( locale, editableElement );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\t\\tconst t = this.t;\\n\\n\\t\\t/**\\n\\t\\t * The name of the editable UI view.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #name\\n\\t\\t */\\n\\t\\tthis.set( 'name', null );\\n\\n\\t\\tconst getLabel = value => {\\n\\t\\t\\treturn t( 'Rich Text Editor, %0', [ value ] );\\n\\t\\t};\\n\\n\\t\\tthis.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\trole: 'textbox',\\n\\t\\t\\t\\t'aria-label': bind.to( 'name', getLabel ),\\n\\t\\t\\t\\tclass: 'ck-editor__editable_inline'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/tounit\\n */\\n\\n/**\\n * Returns a helper function, which adds a desired trailing\\n * `unit` to the passed value.\\n *\\n * @param {String} unit An unit like \\\"px\\\" or \\\"em\\\".\\n * @returns {module:utils/dom/tounit~helper}\\n */\\nexport default function toUnit( unit ) {\\n\\t/**\\n\\t * A function, which adds a pre–defined trailing `unit`\\n\\t * to the passed `value`.\\n\\t *\\n\\t * @function helper\\n \\t * @param {*} value A value to be given the unit.\\n \\t * @returns {String} A value with the trailing unit.\\n\\t */\\n\\treturn value => value + unit;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/panel/sticky/stickypanelview\\n */\\n\\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\\nimport View from '../../view';\\nimport Template from '../../template';\\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\\n\\nimport '../../../theme/components/panel/stickypanel.css';\\n\\nconst toPx = toUnit( 'px' );\\n\\n/**\\n * The sticky panel view class.\\n */\\nexport default class StickyPanelView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the sticky panel should be active.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isActive\\n\\t\\t */\\n\\t\\tthis.set( 'isActive', false );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the sticky panel is in the \\\"sticky\\\" state.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isSticky\\n\\t\\t */\\n\\t\\tthis.set( 'isSticky', false );\\n\\n\\t\\t/**\\n\\t\\t * The limiter element for the sticky panel instance. Its bounding rect limits\\n\\t\\t * the \\\"stickyness\\\" of the panel, i.e. when the panel reaches the bottom\\n\\t\\t * edge of the limiter, it becomes sticky to that edge and does not float\\n\\t\\t * off the limiter. It is mandatory for the panel to work properly and once\\n\\t\\t * set, it cannot be changed.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {HTMLElement} #limiterElement\\n\\t\\t */\\n\\t\\tthis.set( 'limiterElement', null );\\n\\n\\t\\t/**\\n\\t\\t * The offset from the bottom edge of {@link #limiterElement}\\n\\t\\t * which stops the panel from stickying any further to prevent limiter's content\\n\\t\\t * from being completely covered.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @default 50\\n\\t\\t * @member {Number} #limiterBottomOffset\\n\\t\\t */\\n\\t\\tthis.set( 'limiterBottomOffset', 50 );\\n\\n\\t\\t/**\\n\\t\\t * The offset from the top edge of the web browser's viewport which makes the\\n\\t\\t * panel become sticky. The default value is `0`, which means the panel becomes\\n\\t\\t * sticky when it's upper edge touches the top of the page viewport.\\n\\t\\t *\\n\\t\\t * This attribute is useful when the web page has UI elements positioned to the top\\n\\t\\t * either using `position: fixed` or `position: sticky`, which would cover the\\n\\t\\t * sticky panel or vice–versa (depending on the `z-index` hierarchy).\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @default 0\\n\\t\\t * @member {Number} #viewportTopOffset\\n\\t\\t */\\n\\t\\tthis.set( 'viewportTopOffset', 0 );\\n\\n\\t\\t/**\\n\\t\\t * Controls the `margin-left` CSS style of the panel.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {String} #_marginLeft\\n\\t\\t */\\n\\t\\tthis.set( '_marginLeft', null );\\n\\n\\t\\t/**\\n\\t\\t * Set `true` if the sticky panel reached the bottom edge of the\\n\\t\\t * {@link #limiterElement}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #_isStickyToTheLimiter\\n\\t\\t */\\n\\t\\tthis.set( '_isStickyToTheLimiter', false );\\n\\n\\t\\t/**\\n\\t\\t * Set `true` if the sticky panel uses the {@link #viewportTopOffset},\\n\\t\\t * i.e. not {@link #_isStickyToTheLimiter} and the {@link #viewportTopOffset}\\n\\t\\t * is not `0`.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #_hasViewportTopOffset\\n\\t\\t */\\n\\t\\tthis.set( '_hasViewportTopOffset', false );\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views which creates balloon panel contents.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.content = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * The DOM bounding client rect of the {@link module:ui/view~View#element} of the panel.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Object} #_panelRect\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The DOM bounding client rect of the {@link #limiterElement}\\n\\t\\t * of the panel.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Object} #_limiterRect\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * A dummy element which visually fills the space as long as the\\n\\t\\t * actual panel is sticky. It prevents flickering of the UI.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @property {HTMLElement}\\n\\t\\t */\\n\\t\\tthis._contentPanelPlaceholder = new Template( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-sticky-panel__placeholder'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tstyle: {\\n\\t\\t\\t\\t\\tdisplay: bind.to( 'isSticky', isSticky => isSticky ? 'block' : 'none' ),\\n\\t\\t\\t\\t\\theight: bind.to( 'isSticky', isSticky => {\\n\\t\\t\\t\\t\\t\\treturn isSticky ? toPx( this._panelRect.height ) : null;\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} ).render();\\n\\n\\t\\t/**\\n\\t\\t * The panel which accepts children into {@link #content} collection.\\n\\t\\t * Also an element which is positioned when {@link #isSticky}.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @property {HTMLElement}\\n\\t\\t */\\n\\t\\tthis._contentPanel = new Template( {\\n\\t\\t\\ttag: 'div',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-sticky-panel__content',\\n\\t\\t\\t\\t\\t// Toggle class of the panel when \\\"sticky\\\" state changes in the view.\\n\\t\\t\\t\\t\\tbind.if( 'isSticky', 'ck-sticky-panel__content_sticky' ),\\n\\t\\t\\t\\t\\tbind.if( '_isStickyToTheLimiter', 'ck-sticky-panel__content_sticky_bottom-limit' ),\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tstyle: {\\n\\t\\t\\t\\t\\twidth: bind.to( 'isSticky', isSticky => {\\n\\t\\t\\t\\t\\t\\treturn isSticky ? toPx( this._contentPanelPlaceholder.getBoundingClientRect().width ) : null;\\n\\t\\t\\t\\t\\t} ),\\n\\n\\t\\t\\t\\t\\ttop: bind.to( '_hasViewportTopOffset', _hasViewportTopOffset => {\\n\\t\\t\\t\\t\\t\\treturn _hasViewportTopOffset ? toPx( this.viewportTopOffset ) : null;\\n\\t\\t\\t\\t\\t} ),\\n\\n\\t\\t\\t\\t\\tbottom: bind.to( '_isStickyToTheLimiter', _isStickyToTheLimiter => {\\n\\t\\t\\t\\t\\t\\treturn _isStickyToTheLimiter ? toPx( this.limiterBottomOffset ) : null;\\n\\t\\t\\t\\t\\t} ),\\n\\n\\t\\t\\t\\t\\tmarginLeft: bind.to( '_marginLeft' )\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.content\\n\\t\\t} ).render();\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-sticky-panel'\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis._contentPanelPlaceholder,\\n\\t\\t\\t\\tthis._contentPanel\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\t// Check if the panel should go into the sticky state immediately.\\n\\t\\tthis._checkIfShouldBeSticky();\\n\\n\\t\\t// Update sticky state of the panel as the window is being scrolled.\\n\\t\\tthis.listenTo( global.window, 'scroll', () => {\\n\\t\\t\\tthis._checkIfShouldBeSticky();\\n\\t\\t} );\\n\\n\\t\\t// Synchronize with `model.isActive` because sticking an inactive panel is pointless.\\n\\t\\tthis.listenTo( this, 'change:isActive', () => {\\n\\t\\t\\tthis._checkIfShouldBeSticky();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Analyzes the environment to decide whether the panel should\\n\\t * be sticky or not.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_checkIfShouldBeSticky() {\\n\\t\\tconst panelRect = this._panelRect = this._contentPanel.getBoundingClientRect();\\n\\t\\tlet limiterRect;\\n\\n\\t\\tif ( !this.limiterElement ) {\\n\\t\\t\\tthis.isSticky = false;\\n\\t\\t} else {\\n\\t\\t\\tlimiterRect = this._limiterRect = this.limiterElement.getBoundingClientRect();\\n\\n\\t\\t\\t// The panel must be active to become sticky.\\n\\t\\t\\tthis.isSticky = this.isActive &&\\n\\t\\t\\t\\t// The limiter's top edge must be beyond the upper edge of the visible viewport (+the viewportTopOffset).\\n\\t\\t\\t\\tlimiterRect.top < this.viewportTopOffset &&\\n\\t\\t\\t\\t// The model#limiterElement's height mustn't be smaller than the panel's height and model#limiterBottomOffset.\\n\\t\\t\\t\\t// There's no point in entering the sticky mode if the model#limiterElement is very, very small, because\\n\\t\\t\\t\\t// it would immediately set model#_isStickyToTheLimiter true and, given model#limiterBottomOffset, the panel\\n\\t\\t\\t\\t// would be positioned before the model#limiterElement.\\n\\t\\t\\t\\tthis._panelRect.height + this.limiterBottomOffset < limiterRect.height;\\n\\t\\t}\\n\\n\\t\\t// Stick the panel to the top edge of the viewport simulating CSS position:sticky.\\n\\t\\t// TODO: Possibly replaced by CSS in the future http://caniuse.com/#feat=css-sticky\\n\\t\\tif ( this.isSticky ) {\\n\\t\\t\\tthis._isStickyToTheLimiter =\\n\\t\\t\\t\\tlimiterRect.bottom < panelRect.height + this.limiterBottomOffset + this.viewportTopOffset;\\n\\t\\t\\tthis._hasViewportTopOffset = !this._isStickyToTheLimiter && !!this.viewportTopOffset;\\n\\t\\t\\tthis._marginLeft = this._isStickyToTheLimiter ? null : toPx( -global.window.scrollX );\\n\\t\\t}\\n\\t\\t// Detach the panel from the top edge of the viewport.\\n\\t\\telse {\\n\\t\\t\\tthis._isStickyToTheLimiter = false;\\n\\t\\t\\tthis._hasViewportTopOffset = false;\\n\\t\\t\\tthis._marginLeft = null;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/focuscycler\\n */\\n\\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\\n\\n/**\\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\\n * navigation in HTML forms, toolbars, lists and the like.\\n *\\n * To work properly it requires:\\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\\n * * an associated focus tracker to determine which view is focused.\\n *\\n * A simple cycler setup can look like this:\\n *\\n *\\t\\tconst focusables = new ViewCollection();\\n *\\t\\tconst focusTracker = new FocusTracker();\\n *\\n *\\t\\t// Add focusable views to the focus tracker.\\n *\\t\\tfocusTracker.add( ... );\\n *\\n * Then, the cycler can be used manually:\\n *\\n *\\t\\tconst cycler = new FocusCycler( { focusables, focusTracker } );\\n *\\n *\\t\\t// Will focus the first focusable view in #focusables.\\n *\\t\\tcycler.focusFirst();\\n *\\n *\\t\\t// Will log the next focusable item in #focusables.\\n *\\t\\tconsole.log( cycler.next );\\n *\\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\\n *\\n *\\t\\tconst keystrokeHandler = new KeystrokeHandler();\\n *\\n *\\t\\t// Activate the keystroke handler.\\n *\\t\\tkeystrokeHandler.listenTo( sourceOfEvents );\\n *\\n *\\t\\tconst cycler = new FocusCycler( {\\n *\\t\\t\\tfocusables, focusTracker, keystrokeHandler,\\n *\\t\\t\\tactions: {\\n *\\t\\t\\t\\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\\n *\\t\\t\\t\\t// focusPrevious() will be called on the cycler.\\n *\\t\\t\\t\\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\\n *\\t\\t\\t}\\n *\\t\\t} );\\n */\\nexport default class FocusCycler {\\n\\t/**\\n\\t * Creates an instance of the focus cycler utility.\\n\\t *\\n\\t * @param {Object} options Configuration options.\\n\\t * @param {module:utils/collection~Collection|Object} options.focusables\\n\\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\\n\\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\\n\\t * @param {Object} [options.actions]\\n\\t */\\n\\tconstructor( options ) {\\n\\t\\tObject.assign( this, options );\\n\\n\\t\\t/**\\n\\t\\t * A {@link module:ui/view~View view} collection that the cycler operates on.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/collection~Collection} #focusables\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * A focus tracker instance that the cycler uses to determine the current focus\\n\\t\\t * state in {@link #focusables}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t * which can respond to certain keystrokes and cycle the focus.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Actions that the cycler can take when a keystroke is pressed. Requires\\n\\t\\t * `options.keystrokeHandler` to be passed and working. When an action is\\n\\t\\t * performed, `preventDefault` and `stopPropagation` will be called on the event\\n\\t\\t * the keystroke fired in the DOM.\\n\\t\\t *\\n\\t\\t *\\t\\tactions: {\\n\\t\\t *\\t\\t\\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\\n\\t\\t *\\t\\t\\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\\n\\t\\t *\\n\\t\\t *\\t\\t\\t// Will call #focusNext() when arrowdown is pressed.\\n\\t\\t *\\t\\t\\tfocusNext: 'arrowdown'\\n\\t\\t *\\t\\t}\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Object} #actions\\n\\t\\t */\\n\\n\\t\\tif ( options.actions && options.keystrokeHandler ) {\\n\\t\\t\\tfor ( const methodName in options.actions ) {\\n\\t\\t\\t\\tlet actions = options.actions[ methodName ];\\n\\n\\t\\t\\t\\tif ( typeof actions == 'string' ) {\\n\\t\\t\\t\\t\\tactions = [ actions ];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor ( const keystroke of actions ) {\\n\\t\\t\\t\\t\\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\\n\\t\\t\\t\\t\\t\\tthis[ methodName ]();\\n\\t\\t\\t\\t\\t\\tcancel();\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the first focusable view in {@link #focusables}.\\n\\t * Returns `null` if there is none.\\n\\t *\\n\\t * @readonly\\n\\t * @member {module:ui/view~View|null} #first\\n\\t */\\n\\tget first() {\\n\\t\\treturn this.focusables.find( isFocusable ) || null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the last focusable view in {@link #focusables}.\\n\\t * Returns `null` if there is none.\\n\\t *\\n\\t * @readonly\\n\\t * @member {module:ui/view~View|null} #last\\n\\t */\\n\\tget last() {\\n\\t\\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\\n\\t * Returns `null` if there is none.\\n\\t *\\n\\t * @readonly\\n\\t * @member {module:ui/view~View|null} #next\\n\\t */\\n\\tget next() {\\n\\t\\treturn this._getFocusableItem( 1 );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\\n\\t * Returns `null` if there is none.\\n\\t *\\n\\t * @readonly\\n\\t * @member {module:ui/view~View|null} #previous\\n\\t */\\n\\tget previous() {\\n\\t\\treturn this._getFocusableItem( -1 );\\n\\t}\\n\\n\\t/**\\n\\t * An index of the view in the {@link #focusables} which is focused according\\n\\t * to {@link #focusTracker}. Returns `null` when there is no such view.\\n\\t *\\n\\t * @readonly\\n\\t * @member {Number|null} #current\\n\\t */\\n\\tget current() {\\n\\t\\tlet index = null;\\n\\n\\t\\t// There's no focused view in the focusables.\\n\\t\\tif ( this.focusTracker.focusedElement === null ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tthis.focusables.find( ( view, viewIndex ) => {\\n\\t\\t\\tconst focused = view.element === this.focusTracker.focusedElement;\\n\\n\\t\\t\\tif ( focused ) {\\n\\t\\t\\t\\tindex = viewIndex;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn focused;\\n\\t\\t} );\\n\\n\\t\\treturn index;\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #first} item in {@link #focusables}.\\n\\t */\\n\\tfocusFirst() {\\n\\t\\tthis._focus( this.first );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #last} item in {@link #focusables}.\\n\\t */\\n\\tfocusLast() {\\n\\t\\tthis._focus( this.last );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #next} item in {@link #focusables}.\\n\\t */\\n\\tfocusNext() {\\n\\t\\tthis._focus( this.next );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #previous} item in {@link #focusables}.\\n\\t */\\n\\tfocusPrevious() {\\n\\t\\tthis._focus( this.previous );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the given view if it exists.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:ui/view~View} view\\n\\t */\\n\\t_focus( view ) {\\n\\t\\tif ( view ) {\\n\\t\\t\\tview.focus();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the next or previous focusable view in {@link #focusables} with respect\\n\\t * to {@link #current}.\\n\\t *\\n\\t * @protected\\n\\t * @param {Number} step Either `1` for checking forward from {@link #current} or\\n\\t * `-1` for checking backwards.\\n\\t * @returns {module:ui/view~View|null}\\n\\t */\\n\\t_getFocusableItem( step ) {\\n\\t\\t// Cache for speed.\\n\\t\\tconst current = this.current;\\n\\t\\tconst collectionLength = this.focusables.length;\\n\\n\\t\\tif ( !collectionLength ) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// Start from the beginning if no view is focused.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\\n\\t\\tif ( current === null ) {\\n\\t\\t\\treturn this[ step === 1 ? 'first' : 'last' ];\\n\\t\\t}\\n\\n\\t\\t// Cycle in both directions.\\n\\t\\tlet index = ( current + collectionLength + step ) % collectionLength;\\n\\n\\t\\tdo {\\n\\t\\t\\tconst view = this.focusables.get( index );\\n\\n\\t\\t\\t// TODO: Check if view is visible.\\n\\t\\t\\tif ( isFocusable( view ) ) {\\n\\t\\t\\t\\treturn view;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Cycle in both directions.\\n\\t\\t\\tindex = ( index + collectionLength + step ) % collectionLength;\\n\\t\\t} while ( index !== current );\\n\\n\\t\\treturn null;\\n\\t}\\n}\\n\\n// Checks whether a view is focusable.\\n//\\n// @private\\n// @param {module:ui/view~View} view A view to be checked.\\n// @returns {Boolean}\\nfunction isFocusable( view ) {\\n\\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/toolbar/toolbarseparatorview\\n */\\n\\nimport View from '../view';\\n\\n/**\\n * The toolbar separator view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class ToolbarSeparatorView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'span',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-toolbar__separator'\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/toolbar/toolbarview\\n */\\n\\nimport View from '../view';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport FocusCycler from '../focuscycler';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\nimport ToolbarSeparatorView from './toolbarseparatorview';\\nimport preventDefault from '../bindings/preventdefault.js';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\nimport '../../theme/components/toolbar/toolbar.css';\\n\\n/**\\n * The toolbar view class.\\n *\\n * @extends module:ui/view~View\\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\\n */\\nexport default class ToolbarView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * Collection of the toolbar items (like buttons).\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.items = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the list.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\t/**\\n\\t\\t * Controls the orientation of toolbar items.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isVertical\\n\\t\\t */\\n\\t\\tthis.set( 'isVertical', false );\\n\\n\\t\\t/**\\n\\t\\t * An additional CSS class added to the {@link #element}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #className\\n\\t\\t */\\n\\t\\tthis.set( 'className' );\\n\\n\\t\\t/**\\n\\t\\t * Helps cycling over focusable {@link #items} in the toolbar.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/focuscycler~FocusCycler}\\n\\t\\t */\\n\\t\\tthis._focusCycler = new FocusCycler( {\\n\\t\\t\\tfocusables: this.items,\\n\\t\\t\\tfocusTracker: this.focusTracker,\\n\\t\\t\\tkeystrokeHandler: this.keystrokes,\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\t// Navigate toolbar items backwards using the arrow[left,up] keys.\\n\\t\\t\\t\\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\\n\\n\\t\\t\\t\\t// Navigate toolbar items forwards using the arrow[right,down] keys.\\n\\t\\t\\t\\tfocusNext: [ 'arrowright', 'arrowdown' ]\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-toolbar',\\n\\t\\t\\t\\t\\tbind.if( 'isVertical', 'ck-toolbar_vertical' ),\\n\\t\\t\\t\\t\\tbind.to( 'className' )\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.items,\\n\\n\\t\\t\\ton: {\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\\n\\t\\t\\t\\tmousedown: preventDefault( this )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\t// Items added before rendering should be known to the #focusTracker.\\n\\t\\tfor ( const item of this.items ) {\\n\\t\\t\\tthis.focusTracker.add( item.element );\\n\\t\\t}\\n\\n\\t\\tthis.items.on( 'add', ( evt, item ) => {\\n\\t\\t\\tthis.focusTracker.add( item.element );\\n\\t\\t} );\\n\\n\\t\\tthis.items.on( 'remove', ( evt, item ) => {\\n\\t\\t\\tthis.focusTracker.remove( item.element );\\n\\t\\t} );\\n\\n\\t\\t// Start listening for the keystrokes coming from #element.\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the first focusable in {@link #items}.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis._focusCycler.focusFirst();\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the last focusable in {@link #items}.\\n\\t */\\n\\tfocusLast() {\\n\\t\\tthis._focusCycler.focusLast();\\n\\t}\\n\\n\\t/**\\n\\t * A utility which expands a plain toolbar configuration into\\n\\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\\n\\t *\\n\\t * @param {Array.<String>} config The toolbar items config.\\n\\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\\n\\t */\\n\\tfillFromConfig( config, factory ) {\\n\\t\\tconfig.map( name => {\\n\\t\\t\\tif ( name == '|' ) {\\n\\t\\t\\t\\tthis.items.add( new ToolbarSeparatorView() );\\n\\t\\t\\t} else if ( factory.has( name ) ) {\\n\\t\\t\\t\\tthis.items.add( factory.create( name ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * There was a problem processing the configuration of the toolbar. The item with the given\\n\\t\\t\\t\\t * name does not exist so it was omitted when rendering the toolbar.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\\n\\t\\t\\t\\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\\n\\t\\t\\t\\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * You can use the following snippet to retrieve all available toolbar items:\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t *\\t\\tArray.from( editor.ui.componentFactory.names() );\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * @error toolbarview-item-unavailable\\n\\t\\t\\t\\t * @param {String} name The name of the component.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tlog.warn(\\n\\t\\t\\t\\t\\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.',\\n\\t\\t\\t\\t\\t{ name }\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/bindings/preventdefault\\n */\\n\\n/**\\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\\n * {@link module:ui/view~View#template template}.\\n *\\n *\\t\\t// In a class extending View.\\n *\\t\\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tthis.setTemplate( {\\n *\\t\\t\\ttag: 'div',\\n *\\n *\\t\\t\\ton: {\\n *\\t\\t\\t\\t// Prevent the default mousedown action on this view.\\n *\\t\\t\\t\\tmousedown: preventDefault( this )\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * @param {module:ui/view~View} view View instance that defines the template.\\n * @returns {module:ui/template~TemplateToBinding}\\n */\\nexport default function preventDefault( view ) {\\n\\treturn view.bindTemplate.to( evt => {\\n\\t\\tif ( evt.target === view.element ) {\\n\\t\\t\\tevt.preventDefault();\\n\\t\\t}\\n\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module editor-classic/classiceditoruiview\\n */\\n\\nimport BoxedEditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/boxed/boxededitoruiview';\\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\\nimport StickyPanelView from '@ckeditor/ckeditor5-ui/src/panel/sticky/stickypanelview';\\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\\n\\nimport '../theme/classiceditor.css';\\n\\n/**\\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\\n * enclosed in a boxed UI view.\\n *\\n * @extends module:ui/editorui/boxed/boxededitoruiview~BoxedEditorUIView\\n */\\nexport default class ClassicEditorUIView extends BoxedEditorUIView {\\n\\t/**\\n\\t * Creates an instance of the classic editor UI view.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\\n\\t\\t * that makes toolbar sticky.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/panel/sticky/stickypanelview~StickyPanelView}\\n\\t\\t */\\n\\t\\tthis.stickyPanel = new StickyPanelView( locale );\\n\\n\\t\\t/**\\n\\t\\t * Toolbar view instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/toolbar/toolbarview~ToolbarView}\\n\\t\\t */\\n\\t\\tthis.toolbar = new ToolbarView( locale );\\n\\n\\t\\t/**\\n\\t\\t * Editable UI view.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\\n\\t\\t */\\n\\t\\tthis.editable = new InlineEditableUIView( locale );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\t// Set toolbar as a child of a stickyPanel and makes toolbar sticky.\\n\\t\\tthis.stickyPanel.content.add( this.toolbar );\\n\\n\\t\\tthis.top.add( this.stickyPanel );\\n\\t\\tthis.main.add( this.editable );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tget editableElement() {\\n\\t\\treturn this.editable.element;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/elementreplacer\\n */\\n\\n/**\\n * Utility class allowing to hide existing HTML elements or replace them with given ones in a way that doesn't remove\\n * the original elements from the DOM.\\n */\\nexport default class ElementReplacer {\\n\\tconstructor() {\\n\\t\\t/**\\n\\t\\t * The elements replaced by {@link #replace} and their replacements.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Array.<Object>}\\n\\t\\t */\\n\\t\\tthis._replacedElements = [];\\n\\t}\\n\\n\\t/**\\n\\t * Hides the `element` and, if specified, inserts the the given element next to it.\\n\\t *\\n\\t * The effect of this method can be reverted by {@link #restore}.\\n\\t *\\n\\t * @param {HTMLElement} element The element to replace.\\n\\t * @param {HTMLElement} [newElement] The replacement element. If not passed, then the `element` will just be hidden.\\n\\t */\\n\\treplace( element, newElement ) {\\n\\t\\tthis._replacedElements.push( { element, newElement } );\\n\\n\\t\\telement.style.display = 'none';\\n\\n\\t\\tif ( newElement ) {\\n\\t\\t\\telement.parentNode.insertBefore( newElement, element.nextSibling );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Restores what {@link #replace} did.\\n\\t */\\n\\trestore() {\\n\\t\\tthis._replacedElements.forEach( ( { element, newElement } ) => {\\n\\t\\t\\telement.style.display = '';\\n\\n\\t\\t\\tif ( newElement ) {\\n\\t\\t\\t\\tnewElement.remove();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis._replacedElements = [];\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module editor-classic/classiceditor\\n */\\n\\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\\nimport ClassicEditorUI from './classiceditorui';\\nimport ClassicEditorUIView from './classiceditoruiview';\\nimport ElementReplacer from '@ckeditor/ckeditor5-utils/src/elementreplacer';\\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * The {@glink builds/guides/overview#classic-editor classic editor} implementation.\\n * It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\\n * See the {@glink examples/builds/classic-editor demo}.\\n *\\n * In order to create a classic editor instance, use the static\\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\\n *\\n * # Classic editor and classic build\\n *\\n * The classic editor can be used directly from source (if you installed the\\n * [`@ckeditor/ckeditor5-editor-classic`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-classic) package)\\n * but it is also available in the {@glink builds/guides/overview#classic-editor classic build}.\\n *\\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\\n * source you need to take care of loading all plugins by yourself\\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\\n * Using the editor from source gives much better flexibility and allows easier customization.\\n *\\n * Read more about initializing the editor from source or as a build in\\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\\n *\\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\\n * @implements module:core/editor/editorwithui~EditorWithUI\\n * @extends module:core/editor/editor~Editor\\n */\\nexport default class ClassicEditor extends Editor {\\n\\t/**\\n\\t * Creates an instance of the classic editor.\\n\\t *\\n\\t * **Note:** do not use the constructor to create editor instances. Use the static\\n\\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\\n\\t *\\n\\t * @protected\\n\\t * @param {HTMLElement} element The DOM element that will be the source for the created editor.\\n\\t * The data will be loaded from it and loaded back to it once the editor is destroyed.\\n\\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\\n\\t */\\n\\tconstructor( element, config ) {\\n\\t\\tsuper( config );\\n\\n\\t\\t/**\\n\\t\\t * The element replacer instance used to hide the editor element.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:utils/elementreplacer~ElementReplacer}\\n\\t\\t */\\n\\t\\tthis._elementReplacer = new ElementReplacer();\\n\\n\\t\\tthis.element = element;\\n\\n\\t\\tthis.data.processor = new HtmlDataProcessor();\\n\\n\\t\\tthis.model.document.createRoot();\\n\\n\\t\\tthis.ui = new ClassicEditorUI( this, new ClassicEditorUIView( this.locale ) );\\n\\n\\t\\tattachToForm( this );\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the editor instance, releasing all resources used by it.\\n\\t *\\n\\t * Updates the original editor element with the data.\\n\\t *\\n\\t * @returns {Promise}\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.updateElement();\\n\\t\\tthis._elementReplacer.restore();\\n\\t\\tthis.ui.destroy();\\n\\n\\t\\treturn super.destroy();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a classic editor instance.\\n\\t *\\n\\t * Creating instance when using {@glink builds/index CKEditor build}:\\n\\t *\\n\\t *\\t\\tClassicEditor\\n\\t *\\t\\t\\t.create( document.querySelector( '#editor' ) )\\n\\t *\\t\\t\\t.then( editor => {\\n\\t *\\t\\t\\t\\tconsole.log( 'Editor was initialized', editor );\\n\\t *\\t\\t\\t} )\\n\\t *\\t\\t\\t.catch( err => {\\n\\t *\\t\\t\\t\\tconsole.error( err.stack );\\n\\t *\\t\\t\\t} );\\n\\t *\\n\\t * Creating instance when using CKEditor from source (make sure to specify the list of plugins to load and the toolbar):\\n\\t *\\n\\t *\\t\\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\\n\\t *\\t\\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\\n\\t *\\t\\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\\n\\t *\\t\\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\\n\\t *\\t\\timport ...\\n\\t *\\n\\t *\\t\\tClassicEditor\\n\\t *\\t\\t\\t.create( document.querySelector( '#editor' ), {\\n\\t *\\t\\t\\t\\tplugins: [ Essentials, Bold, Italic, ... ],\\n\\t *\\t\\t\\t\\ttoolbar: [ 'bold', 'italic', ... ]\\n\\t *\\t\\t\\t} )\\n\\t *\\t\\t\\t.then( editor => {\\n\\t *\\t\\t\\t\\tconsole.log( 'Editor was initialized', editor );\\n\\t *\\t\\t\\t} )\\n\\t *\\t\\t\\t.catch( err => {\\n\\t *\\t\\t\\t\\tconsole.error( err.stack );\\n\\t *\\t\\t\\t} );\\n\\t *\\n\\t * @param {HTMLElement} element The DOM element that will be the source for the created editor.\\n\\t * The data will be loaded from it and loaded back to it once the editor is destroyed.\\n\\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\\n\\t * @returns {Promise} A promise resolved once the editor is ready.\\n\\t * The promise returns the created {@link module:editor-classic/classiceditor~ClassicEditor} instance.\\n\\t */\\n\\tstatic create( element, config ) {\\n\\t\\treturn new Promise( resolve => {\\n\\t\\t\\tconst editor = new this( element, config );\\n\\n\\t\\t\\tresolve(\\n\\t\\t\\t\\teditor.initPlugins()\\n\\t\\t\\t\\t\\t.then( () => editor.ui.init() )\\n\\t\\t\\t\\t\\t.then( () => {\\n\\t\\t\\t\\t\\t\\teditor._elementReplacer.replace( element, editor.ui.view.element );\\n\\t\\t\\t\\t\\t\\teditor.fire( 'uiReady' );\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.then( () => editor.editing.view.attachDomRoot( editor.ui.view.editableElement ) )\\n\\t\\t\\t\\t\\t.then( () => editor.data.init( getDataFromElement( element ) ) )\\n\\t\\t\\t\\t\\t.then( () => {\\n\\t\\t\\t\\t\\t\\teditor.fire( 'dataReady' );\\n\\t\\t\\t\\t\\t\\teditor.fire( 'ready' );\\n\\t\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.then( () => editor )\\n\\t\\t\\t);\\n\\t\\t} );\\n\\t}\\n}\\n\\nmix( ClassicEditor, DataApiMixin );\\nmix( ClassicEditor, ElementApiMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport isFunction from '@ckeditor/ckeditor5-utils/src/lib/lodash/isFunction';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\n\\n/**\\n * @module core/editor/utils/attachtoform\\n */\\n\\n/**\\n * Checks if editor is initialized on textarea element that belongs to a form. If yes - updates editor's element\\n * contents before submitting the form.\\n *\\n * This helper requires {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\\n *\\n * @param {module:core/editor/editor~Editor} editor Editor instance.\\n */\\nexport default function attachToForm( editor ) {\\n\\tif ( !isFunction( editor.updateElement ) ) {\\n\\t\\t/**\\n\\t\\t * {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface} is required.\\n\\t\\t *\\n\\t\\t * @error attachtoform-missing-elementapi-interface\\n\\t\\t */\\n\\t\\tthrow new CKEditorError( 'attachtoform-missing-elementapi-interface: ElementApi interface is required.' );\\n\\t}\\n\\n\\tconst element = editor.element;\\n\\n\\t// Only when replacing a textarea which is inside of a form element.\\n\\tif ( element && element.tagName.toLowerCase() === 'textarea' && element.form ) {\\n\\t\\tlet originalSubmit;\\n\\t\\tconst form = element.form;\\n\\t\\tconst onSubmit = () => editor.updateElement();\\n\\n\\t\\t// Replace the original form#submit() to call a custom submit function first.\\n\\t\\t// Check if #submit is a function because the form might have an input named \\\"submit\\\".\\n\\t\\tif ( isFunction( form.submit ) ) {\\n\\t\\t\\toriginalSubmit = form.submit;\\n\\n\\t\\t\\tform.submit = () => {\\n\\t\\t\\t\\tonSubmit();\\n\\t\\t\\t\\toriginalSubmit.apply( form );\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\t// Update the replaced textarea with data before each form#submit event.\\n\\t\\tform.addEventListener( 'submit', onSubmit );\\n\\n\\t\\t// Remove the submit listener and revert the original submit method on\\n\\t\\t// editor#destroy.\\n\\t\\teditor.on( 'destroy', () => {\\n\\t\\t\\tform.removeEventListener( 'submit', onSubmit );\\n\\n\\t\\t\\tif ( originalSubmit ) {\\n\\t\\t\\t\\tform.submit = originalSubmit;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals HTMLTextAreaElement */\\n\\n/**\\n * @module utils/dom/getdatafromelement\\n */\\n\\n/**\\n * Gets data from a given source element.\\n *\\n * @param {HTMLElement} el The element from which the data will be retrieved.\\n * @returns {String} The data string.\\n */\\nexport default function getDataFromElement( el ) {\\n\\tif ( el instanceof HTMLTextAreaElement ) {\\n\\t\\treturn el.value;\\n\\t}\\n\\n\\treturn el.innerHTML;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/plugin\\n */\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * The base class for CKEditor plugin classes.\\n *\\n * @implements module:core/plugin~PluginInterface\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\t/**\\n\\t\\t * The editor instance.\\n\\t\\t *\\n\\t\\t * Note that most editors implements {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\\n\\t\\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with external UI\\n\\t\\t * (i.e. Bootstrap based) or headless editor may not implement {@link module:core/editor/editorwithui~EditorWithUI}\\n\\t\\t * interface.\\n\\t\\t *\\n\\t\\t * Because of above, to make plugins more universal, it is recommended to split features into:\\n\\t\\t *  - \\\"Editing\\\" part which use only {@link module:core/editor/editor~Editor} interface,\\n\\t\\t *  - \\\"UI\\\" part which use both {@link module:core/editor/editor~Editor} interface and\\n\\t\\t *  {@link module:core/editor/editorwithui~EditorWithUI} interface.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editor/editor~Editor} #editor\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.stopListening();\\n\\t}\\n}\\n\\nmix( Plugin, ObservableMixin );\\n\\n/**\\n * The base interface for CKEditor plugins.\\n *\\n * In its minimal form it can be a simple function (it will be used as a constructor) which accepts\\n * {@link module:core/editor/editor~Editor the editor} as a parm.\\n * It can also implement a few methods which, when present, will be used to properly initialize and destroy the plugin.\\n *\\n *\\t\\t// A simple plugin which enables a data processor.\\n *\\t\\tfunction MyPlugin( editor ) {\\n *\\t\\t\\teditor.data.processor = new MyDataProcessor();\\n *\\t\\t}\\n *\\n * In most cases, however, you'll want to inherit from the {@link module:core/plugin~Plugin} class which implements the\\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\\n *\\n *\\t\\tclass MyPlugin extends Plugin {\\n *\\t\\t\\tinit() {\\n *\\t\\t\\t\\t// `listenTo()` and `editor` are available thanks to `Plugin`.\\n *\\t\\t\\t\\t// By using `listenTo()` you'll ensure that the listener will be removed when\\n *\\t\\t\\t\\t// the plugin is destroyed.\\n *\\t\\t\\t\\tthis.listenTo( this.editor, 'dataReady', () => {\\n *\\t\\t\\t\\t\\t// Do something when data is ready.\\n *\\t\\t\\t\\t} );\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n * @interface PluginInterface\\n */\\n\\n/**\\n * Creates a new plugin instance. This is the first step of a plugin initialization.\\n * See also {@link #init} and {@link #afterInit}.\\n *\\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\\n * {@link #init} and {@link #afterInit} methods are called in the same order.\\n *\\n * Usually, you'll want to put your plugin's initialization code in the {@link #init} method.\\n * The constructor can be understood as \\\"before init\\\" and used in special cases, just like\\n * {@link #afterInit} servers for the special \\\"after init\\\" scenarios (e.g. code which depends on other\\n * plugins, but which doesn't {@link module:core/plugin~PluginInterface.requires explicitly require} them).\\n *\\n * @method #constructor\\n * @param {module:core/editor/editor~Editor} editor\\n */\\n\\n/**\\n * An array of plugins required by this plugin.\\n *\\n * To keep a plugin class definition tight it's recommended to define this property as a static getter:\\n *\\n *\\t\\timport Image from './image.js';\\n *\\n *\\t\\texport default class ImageCaption {\\n *\\t\\t\\tstatic get requires() {\\n *\\t\\t\\t\\treturn [ Image ];\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n * @static\\n * @readonly\\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\\n */\\n\\n/**\\n * Optional name of the plugin. If set, the plugin will be available in\\n * {@link module:core/plugincollection~PluginCollection#get} by its\\n * name and its constructor. If not, then only by its constructor.\\n *\\n * The name should reflect the constructor name.\\n *\\n * To keep a plugin class definition tight it's recommended to define this property as a static getter:\\n *\\n *\\t\\texport default class ImageCaption {\\n *\\t\\t\\tstatic get pluginName() {\\n *\\t\\t\\t\\treturn 'ImageCaption';\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n * Note: The native `Function.name` property could not be used to keep the plugin name because\\n * it will be mangled during code minification.\\n *\\n * Naming a plugin is necessary to enable removing it through the\\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\\n *\\n * @static\\n * @readonly\\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\\n */\\n\\n/**\\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\\n * Unlike the plugin constructor this method can be asynchronous.\\n *\\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\\n * so in the same order as constructors of these plugins.\\n *\\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\\n *\\n * @method #init\\n * @returns {null|Promise}\\n */\\n\\n/**\\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\\n *\\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\\n *\\n * @method #afterInit\\n * @returns {null|Promise}\\n */\\n\\n/**\\n * Destroys the plugin.\\n *\\n * **Note:** This method is optional. A plugin instance does not need to have to have it defined.\\n *\\n * @method #destroy\\n * @returns {null|Promise}\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/datatransfer\\n */\\n\\n/**\\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\\n */\\nexport default class DataTransfer {\\n\\tconstructor( nativeDataTransfer ) {\\n\\t\\t/**\\n\\t\\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<File>} #files\\n\\t\\t */\\n\\t\\tthis.files = getFiles( nativeDataTransfer );\\n\\n\\t\\t/**\\n\\t\\t * The native DataTransfer object.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {DataTransfer} #_native\\n\\t\\t */\\n\\t\\tthis._native = nativeDataTransfer;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of available native content types.\\n\\t *\\n\\t * @returns {Array.<String>}\\n\\t */\\n\\tget types() {\\n\\t\\treturn this._native.types;\\n\\t}\\n\\n\\t/**\\n\\t * Gets data from the data transfer by its mime type.\\n\\t *\\n\\t *\\t\\tdataTransfer.getData( 'text/plain' );\\n\\t *\\n\\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\\n\\t * @returns {String}\\n\\t */\\n\\tgetData( type ) {\\n\\t\\treturn this._native.getData( type );\\n\\t}\\n\\n\\t/**\\n\\t * Sets data in the data transfer.\\n\\t *\\n\\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\\n\\t * @param {String} data\\n\\t */\\n\\tsetData( type, data ) {\\n\\t\\tthis._native.setData( type, data );\\n\\t}\\n}\\n\\nfunction getFiles( nativeDataTransfer ) {\\n\\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\\n\\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\\n\\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\\n\\n\\tif ( files.length ) {\\n\\t\\treturn files;\\n\\t}\\n\\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\\n\\treturn items\\n\\t\\t.filter( item => item.kind === 'file' )\\n\\t\\t.map( item => item.getAsFile() );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/clipboardobserver\\n */\\n\\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\\nimport DataTransfer from './datatransfer';\\n\\n/**\\n * {@link module:engine/view/document~Document#event:paste Paste} event observer.\\n *\\n * Note that this observer is not available by default. To make it available it needs to be added to\\n * {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class ClipboardObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tconst viewDocument = this.document;\\n\\n\\t\\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\\n\\n\\t\\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\\n\\t\\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\\n\\n\\t\\tfunction handleInput( evt, data ) {\\n\\t\\t\\tdata.preventDefault();\\n\\n\\t\\t\\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\\n\\n\\t\\t\\tviewDocument.fire( 'clipboardInput', {\\n\\t\\t\\t\\tdataTransfer: data.dataTransfer,\\n\\t\\t\\t\\ttargetRanges\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\tonDomEvent( domEvent ) {\\n\\t\\tconst evtData = {\\n\\t\\t\\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\\n\\t\\t};\\n\\n\\t\\tif ( domEvent.type == 'drop' ) {\\n\\t\\t\\tevtData.dropRange = getDropViewRange( this.view, domEvent );\\n\\t\\t}\\n\\n\\t\\tthis.fire( domEvent.type, domEvent, evtData );\\n\\t}\\n}\\n\\nfunction getDropViewRange( view, domEvent ) {\\n\\tconst domDoc = domEvent.target.ownerDocument;\\n\\tconst x = domEvent.clientX;\\n\\tconst y = domEvent.clientY;\\n\\tlet domRange;\\n\\n\\t// Webkit & Blink.\\n\\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\\n\\t\\tdomRange = domDoc.caretRangeFromPoint( x, y );\\n\\t}\\n\\t// FF.\\n\\telse if ( domEvent.rangeParent ) {\\n\\t\\tdomRange = domDoc.createRange();\\n\\t\\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\\n\\t\\tdomRange.collapse( true );\\n\\t}\\n\\n\\tif ( domRange ) {\\n\\t\\treturn view.domConverter.domRangeToView( domRange );\\n\\t} else {\\n\\t\\treturn view.document.selection.getFirstRange();\\n\\t}\\n}\\n\\n/**\\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\\n * It's part of the {@link module:clipboard/clipboard~Clipboard \\\"clipboard pipeline\\\"}.\\n *\\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\\n * and inserted into the editor.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:clipboard/clipboardobserver~ClipboardObserver\\n * @see module:clipboard/clipboard~Clipboard\\n * @event module:engine/view/document~Document#event:clipboardInput\\n * @param {Object} data Event data.\\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\\n * (usually – into which the content should be inserted).\\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\\n * then it's the drop position (which can be different than the selection at the moment of drop).\\n */\\n\\n/**\\n * Fired when user drags content over one of the editables.\\n *\\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:engine/view/document~Document#event:clipboardInput\\n * @event module:engine/view/document~Document#event:dragover\\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\\n */\\n\\n/**\\n * Fired when user dropped content into one of the editables.\\n *\\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:engine/view/document~Document#event:clipboardInput\\n * @event module:engine/view/document~Document#event:drop\\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\\n */\\n\\n/**\\n * Fired when user pasted content into one of the editables.\\n *\\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:engine/view/document~Document#event:clipboardInput\\n * @event module:engine/view/document~Document#event:paste\\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\\n */\\n\\n/**\\n * Fired when user copied content from one of the editables.\\n *\\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:clipboard/clipboardobserver~ClipboardObserver\\n * @event module:engine/view/document~Document#event:copy\\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\\n */\\n\\n/**\\n * Fired when user cut content from one of the editables.\\n *\\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\\n *\\n * @see module:clipboard/clipboardobserver~ClipboardObserver\\n * @event module:engine/view/document~Document#event:cut\\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\\n */\\n\\n/**\\n * The value of the {@link module:engine/view/document~Document#event:paste},\\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\\n *\\n * In order to access clipboard data use `dataTransfer` property.\\n *\\n * @class module:clipboard/clipboardobserver~ClipboardEventData\\n * @extends module:engine/view/observer/domeventdata~DomEventData\\n */\\n\\n/**\\n * Data transfer instance.\\n *\\n * @readonly\\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/utils/viewtoplaintext\\n */\\n\\n// Elements which should not have empty-line padding.\\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\\n// together (like `<li>`) so it is better to separate them by only one \\\"\\\\n\\\".\\nconst smallPaddingElements = [ 'figcaption', 'li' ];\\n\\n/**\\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\\n *\\n * @param {module:engine/view/item~Item} viewItem View item to convert.\\n * @returns {String} Plain text representation of `viewItem`.\\n */\\nexport default function viewToPlainText( viewItem ) {\\n\\tlet text = '';\\n\\n\\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\\n\\t\\t// If item is `Text` or `TextProxy` simple take its text data.\\n\\t\\ttext = viewItem.data;\\n\\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\\n\\t\\t// Special case for images - use alt attribute if it is provided.\\n\\t\\ttext = viewItem.getAttribute( 'alt' );\\n\\t} else {\\n\\t\\t// Other elements are document fragments, attribute elements or container elements.\\n\\t\\t// They don't have their own text value, so convert their children.\\n\\t\\tlet prev = null;\\n\\n\\t\\tfor ( const child of viewItem.getChildren() ) {\\n\\t\\t\\tconst childText = viewToPlainText( child );\\n\\n\\t\\t\\t// Separate container element children with one or more new-line characters.\\n\\t\\t\\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\\n\\t\\t\\t\\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\\n\\t\\t\\t\\t\\ttext += '\\\\n';\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttext += '\\\\n\\\\n';\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\ttext += childText;\\n\\t\\t\\tprev = child;\\n\\t\\t}\\n\\t}\\n\\n\\treturn text;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/clipboard\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport ClipboardObserver from './clipboardobserver';\\n\\nimport plainTextToHtml from './utils/plaintexttohtml';\\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\\nimport viewToPlainText from './utils/viewtoplaintext.js';\\n\\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\\n\\n/**\\n * The clipboard feature. Currently, it's responsible for intercepting the `paste` and `drop` events and\\n * passing the pasted content through the clipboard pipeline.\\n *\\n * # Clipboard input pipeline\\n *\\n * The feature creates the clipboard input pipeline which allows processing clipboard content\\n * before it gets inserted into the editor. The pipeline consists of two events on which\\n * the features can listen in order to modify or totally override the default behavior.\\n *\\n * ## On {@link module:engine/view/document~Document#event:paste} and {@link module:engine/view/document~Document#event:drop}\\n *\\n * The default action is to:\\n *\\n * 1. get HTML or plain text from the clipboard,\\n * 2. prevent the default action of the native `paste` or `drop` event,\\n * 3. fire {@link module:engine/view/document~Document#event:clipboardInput} with a\\n * {@link module:clipboard/datatransfer~DataTransfer `dataTransfer`} property.\\n * 4. fire {@link module:clipboard/clipboard~Clipboard#event:inputTransformation} with a `data` containing the clipboard data parsed to\\n * a {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\\n *\\n * These action are performed by a low priority listeners, so they can be overridden by a normal ones\\n * when a deeper change in pasting behavior is needed. For example, a feature which wants to differently read\\n * data from the clipboard (the {@link module:clipboard/datatransfer~DataTransfer `DataTransfer`}).\\n * should plug a listener at this stage.\\n *\\n * ## On {@link module:engine/view/document~Document#event:clipboardInput}\\n *\\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\\n *\\n * At this stage the dataTransfer object can be processed by the features, which want to transform the original dataTransform.\\n *\\n *\\t\\tthis.listenTo( editor.editing.view, 'clipboardInput', ( evt, data ) => {\\n *\\t\\t\\tconst content = customTransform( data.dataTransfer.get( 'text/html' ) );\\n *\\t\\t\\tconst transformedContent = transform( content );\\n *\\t\\t\\tdata.dataTransfer.set( 'text/html', transformedContent );\\n *\\t\\t} );\\n *\\n * ## On {@link module:clipboard/clipboard~Clipboard#event:inputTransformation}\\n *\\n * The default action is to insert the content (`data.content`, represented by a\\n * {@link module:engine/view/documentfragment~DocumentFragment}) to an editor if the data is not empty.\\n *\\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\\n *\\n * At this stage the pasted content can be processed by the features. E.g. a feature which wants to transform\\n * a pasted text into a link can be implemented in this way:\\n *\\n *\\t\\tthis.listenTo( editor.plugins.get( 'Clipboard' ), 'inputTransformation', ( evt, data ) => {\\n *\\t\\t\\tif ( data.content.childCount == 1 && isUrlText( data.content.getChild( 0 ) ) ) {\\n *\\t\\t\\t\\tconst linkUrl = data.content.getChild( 0 ).data;\\n *\\n *\\t\\t\\t\\tdata.content = new ViewDocumentFragment( [\\n *\\t\\t\\t\\t\\tViewElement(\\n *\\t\\t\\t\\t\\t\\t'a',\\n *\\t\\t\\t\\t\\t\\t{ href: linkUrl },\\n *\\t\\t\\t\\t\\t\\t[ new ViewText( linkUrl ) ]\\n *\\t\\t\\t\\t\\t)\\n *\\t\\t\\t\\t] );\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * # Clipboard output pipeline\\n *\\n * The output pipeline is the equivalent of the input pipeline but for the copy and cut operations.\\n * It allows to process the content which will be then put into the clipboard or to override the whole process.\\n *\\n * ## On {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\\n *\\n * The default action is to:\\n *\\n * 1. {@link module:engine/model/model~Model#getSelectedContent get selected content} from the editor,\\n * 2. prevent the default action of the native `copy` or `cut` event,\\n * 3. fire {@link module:engine/view/document~Document#event:clipboardOutput} with a clone of the selected content\\n * converted to a {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\\n *\\n * ## On {@link module:engine/view/document~Document#event:clipboardOutput}\\n *\\n * The default action is to put the content (`data.content`, represented by a\\n * {@link module:engine/view/documentfragment~DocumentFragment}) to the clipboard as HTML. In case of the cut operation,\\n * the selected content is also deleted from the editor.\\n *\\n * This action is performed by a low priority listener, so it can be overridden by a normal one.\\n *\\n * At this stage the copied/cut content can be processed by the features.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Clipboard extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Clipboard';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst modelDocument = editor.model.document;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\n\\t\\t/**\\n\\t\\t * Data processor used to convert pasted HTML to a view structure.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\\n\\t\\t */\\n\\t\\tthis._htmlDataProcessor = new HtmlDataProcessor();\\n\\n\\t\\tview.addObserver( ClipboardObserver );\\n\\n\\t\\t// The clipboard paste pipeline.\\n\\n\\t\\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\\n\\t\\t\\t// Pasting and dropping is disabled when editor is read-only.\\n\\t\\t\\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\\n\\t\\t\\tif ( editor.isReadOnly ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst dataTransfer = data.dataTransfer;\\n\\t\\t\\tlet content = '';\\n\\n\\t\\t\\tif ( dataTransfer.getData( 'text/html' ) ) {\\n\\t\\t\\t\\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\\n\\t\\t\\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\\n\\t\\t\\t\\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tcontent = this._htmlDataProcessor.toView( content );\\n\\n\\t\\t\\tthis.fire( 'inputTransformation', { content } );\\n\\n\\t\\t\\tview.scrollToTheSelection();\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\\n\\t\\t\\tif ( !data.content.isEmpty ) {\\n\\t\\t\\t\\tconst dataController = this.editor.data;\\n\\t\\t\\t\\tconst model = this.editor.model;\\n\\n\\t\\t\\t\\t// Convert the pasted content to a model document fragment.\\n\\t\\t\\t\\t// Conversion is contextual, but in this case we need an \\\"all allowed\\\" context and for that\\n\\t\\t\\t\\t// we use the $clipboardHolder item.\\n\\t\\t\\t\\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\\n\\n\\t\\t\\t\\tif ( modelFragment.childCount == 0 ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmodel.insertContent( modelFragment, modelDocument.selection );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// The clipboard copy/cut pipeline.\\n\\n\\t\\tfunction onCopyCut( evt, data ) {\\n\\t\\t\\tconst dataTransfer = data.dataTransfer;\\n\\n\\t\\t\\tdata.preventDefault();\\n\\n\\t\\t\\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\\n\\n\\t\\t\\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\\n\\t\\t}\\n\\n\\t\\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\\n\\t\\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\\n\\t\\t\\t// Cutting is disabled when editor is read-only.\\n\\t\\t\\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\\n\\t\\t\\tif ( editor.isReadOnly ) {\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tonCopyCut( evt, data );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\\n\\t\\t\\tif ( !data.content.isEmpty ) {\\n\\t\\t\\t\\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\\n\\t\\t\\t\\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( data.method == 'cut' ) {\\n\\t\\t\\t\\teditor.model.deleteContent( modelDocument.selection );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\t}\\n}\\n\\n/**\\n * Fired with a `content`, which comes from the clipboard (was pasted or dropped) and\\n * should be processed in order to be inserted into the editor.\\n * It's part of the {@link module:clipboard/clipboard~Clipboard \\\"clipboard pipeline\\\"}.\\n *\\n * @see module:clipboard/clipboardobserver~ClipboardObserver\\n * @see module:clipboard/clipboard~Clipboard\\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\\n * @param {Object} data Event data.\\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\\n * It can be modified by the event listeners. Read more about the clipboard pipelines in {@link module:clipboard/clipboard~Clipboard}\\n */\\n\\n/**\\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\\n * It's part of the {@link module:clipboard/clipboard~Clipboard \\\"clipboard pipeline\\\"}.\\n *\\n * @see module:clipboard/clipboardobserver~ClipboardObserver\\n * @see module:clipboard/clipboard~Clipboard\\n * @event module:engine/view/document~Document#event:clipboardOutput\\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\\n */\\n\\n/**\\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\\n *\\n * @class module:clipboard/clipboard~ClipboardOutputEventData\\n */\\n\\n/**\\n * Data transfer instance.\\n *\\n * @readonly\\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\\n */\\n\\n/**\\n * Content to be put into the clipboard. It can be modified by the event listeners.\\n * Read more about the clipboard pipelines in {@link module:clipboard/clipboard~Clipboard}.\\n *\\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\\n */\\n\\n/**\\n * Whether the event was triggered by copy or cut operation.\\n *\\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/utils/plaintexttohtml\\n */\\n\\n/**\\n * Converts plain text to its HTML-ized version.\\n *\\n * @param {String} text The plain text to convert.\\n * @returns {String} HTML generated from the plain text.\\n */\\nexport default function plainTextToHtml( text ) {\\n\\ttext = text\\n\\t\\t// Encode <>.\\n\\t\\t.replace( /</g, '&lt;' )\\n\\t\\t.replace( />/g, '&gt;' )\\n\\t\\t// Creates paragraphs for double line breaks and change single line breaks to spaces.\\n\\t\\t// In the future single line breaks may be converted into <br>s.\\n\\t\\t.replace( /\\\\n\\\\n/g, '</p><p>' )\\n\\t\\t.replace( /\\\\n/g, ' ' )\\n\\t\\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\\n\\t\\t.replace( /^\\\\s/, '&nbsp;' )\\n\\t\\t.replace( /\\\\s$/, '&nbsp;' )\\n\\t\\t// Preserve other subsequent spaces now.\\n\\t\\t.replace( /\\\\s\\\\s/g, ' &nbsp;' );\\n\\n\\tif ( text.indexOf( '</p><p>' ) > -1 ) {\\n\\t\\t// If we created paragraphs above, add the trailing ones.\\n\\t\\ttext = `<p>${ text }</p>`;\\n\\t}\\n\\n\\t// TODO:\\n\\t// * What about '\\\\nfoo' vs ' foo'?\\n\\n\\treturn text;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module clipboard/utils/normalizeclipboarddata\\n */\\n\\n/**\\n * Removes some popular browser quirks out of the clipboard data (HTML).\\n *\\n * @param {String} data The HTML data to normalize.\\n * @returns {String} Normalized HTML.\\n */\\nexport default function normalizeClipboardData( data ) {\\n\\treturn data\\n\\t\\t.replace( /<span(?: class=\\\"Apple-converted-space\\\"|)>(\\\\s+)<\\\\/span>/g, ( fullMatch, spaces ) => {\\n\\t\\t\\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\\n\\t\\t\\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\\n\\t\\t\\tif ( spaces.length == 1 ) {\\n\\t\\t\\t\\treturn ' ';\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn spaces;\\n\\t\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module core/command\\n */\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * The base class for CKEditor commands.\\n *\\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\\n * commands) to make changes in the model. Commands are available in every part of code that has access to\\n * the {@link module:core/editor/editor~Editor editor} instance.\\n *\\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands}.\\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute}.\\n *\\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Command {\\n\\t/**\\n\\t * Creates a new `Command` instance.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\t/**\\n\\t\\t * The editor on which this command will be used.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editor/editor~Editor}\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\n\\t\\t/**\\n\\t\\t * The value of a command. Concrete command class should define what it represents.\\n\\t\\t *\\n\\t\\t * For example, the `bold` command's value is whether the selection starts in a bolded text.\\n\\t\\t * And the value of the `link` command may be an object with links details.\\n\\t\\t *\\n\\t\\t * It's possible for a command to have no value (e.g. for stateless actions such as `imageUpload`).\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member #value\\n\\t\\t */\\n\\t\\tthis.set( 'value', undefined );\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether a command is enabled or disabled.\\n\\t\\t * A disabled command should do nothing when executed.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #isEnabled\\n\\t\\t */\\n\\t\\tthis.set( 'isEnabled', false );\\n\\n\\t\\tthis.decorate( 'execute' );\\n\\n\\t\\t// By default every command is refreshed when changes are applied to the model.\\n\\t\\tthis.listenTo( this.editor.model.document, 'change', () => {\\n\\t\\t\\tthis.refresh();\\n\\t\\t} );\\n\\n\\t\\tthis.on( 'execute', evt => {\\n\\t\\t\\tif ( !this.isEnabled ) {\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\n\\t\\t// By default commands are disabled when the editor is in read-only mode.\\n\\t\\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\\n\\t\\t\\tif ( value ) {\\n\\t\\t\\t\\t// See a ticket about overriding observable properties\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-utils/issues/171.\\n\\t\\t\\t\\tthis.on( 'change:isEnabled', forceDisable, { priority: 'lowest' } );\\n\\t\\t\\t\\tthis.isEnabled = false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.off( 'change:isEnabled', forceDisable );\\n\\t\\t\\t\\tthis.refresh();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tfunction forceDisable() {\\n\\t\\t\\tthis.isEnabled = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} property\\n\\t * in this method.\\n\\t *\\n\\t * This method is automatically called when\\n\\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.isEnabled = true;\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute}\\n\\t * to the command.\\n\\t *\\n\\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\\n\\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\\n\\t *\\n\\t * @fires execute\\n\\t */\\n\\texecute() {}\\n\\n\\t/**\\n\\t * Destroys the command.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.stopListening();\\n\\t}\\n\\n\\t/**\\n\\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\\n\\t * possible to change/cancel the behavior of the command by listening to this event.\\n\\t *\\n\\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\\n\\t *\\n\\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\\n\\t * by a high priority listener in order to prevent command execution.\\n\\t *\\n\\t * @event execute\\n\\t */\\n}\\n\\nmix( Command, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module enter/entercommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\n\\n/**\\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class EnterCommand extends Command {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\texecute() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\\n\\t\\t\\tthis.fire( 'afterExecute', { writer } );\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\\n//\\n// @param {module:engine/model~Model} model\\n// @param {module:engine/model/writer~Writer} writer\\n// @param {module:engine/model/selection~Selection} selection Selection on which the action should be performed.\\n// @param {module:engine/model/schema~Schema} schema\\nfunction enterBlock( model, writer, selection, schema ) {\\n\\tconst isSelectionEmpty = selection.isCollapsed;\\n\\tconst range = selection.getFirstRange();\\n\\tconst startElement = range.start.parent;\\n\\tconst endElement = range.end.parent;\\n\\n\\t// Don't touch the roots and other limit elements.\\n\\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\\n\\t\\t// Delete the selected content but only if inside a single limit element.\\n\\t\\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\\n\\t\\t// This is an edge case and it's hard to tell what should actually happen because such a selection\\n\\t\\t// is not entirely valid.\\n\\t\\tif ( !isSelectionEmpty && startElement == endElement ) {\\n\\t\\t\\tmodel.deleteContent( selection );\\n\\t\\t}\\n\\n\\t\\treturn;\\n\\t}\\n\\n\\tif ( isSelectionEmpty ) {\\n\\t\\tsplitBlock( writer, selection, range.start );\\n\\t} else {\\n\\t\\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\\n\\t\\tconst isContainedWithinOneElement = ( startElement == endElement );\\n\\n\\t\\tmodel.deleteContent( selection, { leaveUnmerged } );\\n\\n\\t\\tif ( leaveUnmerged ) {\\n\\t\\t\\t// Partially selected elements.\\n\\t\\t\\t//\\n\\t\\t\\t// <h>x[xx]x</h>\\t\\t-> <h>x^x</h>\\t\\t\\t-> <h>x</h><h>^x</h>\\n\\t\\t\\tif ( isContainedWithinOneElement ) {\\n\\t\\t\\t\\tsplitBlock( writer, selection, selection.focus );\\n\\t\\t\\t}\\n\\t\\t\\t// Selection over multiple elements.\\n\\t\\t\\t//\\n\\t\\t\\t// <h>x[x</h><p>y]y<p>\\t-> <h>x^</h><p>y</p>\\t-> <h>x</h><p>^y</p>\\n\\t\\t\\telse {\\n\\t\\t\\t\\twriter.setSelection( endElement, 0 );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction splitBlock( writer, selection, splitPos ) {\\n\\tconst oldElement = splitPos.parent;\\n\\tconst newElement = new oldElement.constructor( oldElement.name, oldElement.getAttributes() );\\n\\n\\tif ( splitPos.isAtEnd ) {\\n\\t\\t// If the split is at the end of element, instead of splitting, just create a clone of position's parent\\n\\t\\t// element and insert it after split element. The result is the same but less operations are done\\n\\t\\t// and it's more semantically correct (when it comes to operational transformation).\\n\\t\\twriter.insert( newElement, splitPos.parent, 'after' );\\n\\t} else if ( splitPos.isAtStart ) {\\n\\t\\t// If the split is at the start of element, instead of splitting, just create a clone of position's parent\\n\\t\\t// element and insert it before split element. The result is the same but less operations are done\\n\\t\\t// and it's more semantically correct (when it comes to operational transformation).\\n\\t\\twriter.insert( newElement, splitPos.parent, 'before' );\\n\\t} else {\\n\\t\\twriter.split( splitPos );\\n\\t}\\n\\n\\twriter.setSelection( splitPos.parent.nextSibling, 0 );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module enter/enterobserver\\n */\\n\\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\n/**\\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\\n *\\n * @extends module:engine/view/observer~Observer\\n */\\nexport default class EnterObserver extends Observer {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tconst document = this.document;\\n\\n\\t\\tdocument.on( 'keydown', ( evt, data ) => {\\n\\t\\t\\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\\n\\t\\t\\t\\t// Save the event object to check later if it was stopped or not.\\n\\t\\t\\t\\tlet event;\\n\\t\\t\\t\\tdocument.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\\n\\n\\t\\t\\t\\tdocument.fire( 'enter', new DomEventData( document, data.domEvent ) );\\n\\n\\t\\t\\t\\t// Stop `keydown` event if `enter` event was stopped.\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5/issues/753\\n\\t\\t\\t\\tif ( event && event.stop.called ) {\\n\\t\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve() {}\\n}\\n\\n/**\\n * Event fired when the user presses the <kbd>Enter</kbd> key.\\n *\\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\\n * (usually registered by the {@link module:enter/enter~Enter Enter feature}).\\n *\\n * @event module:engine/view/document~Document#event:enter\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module enter/enter\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport EnterCommand from './entercommand';\\nimport EnterObserver from './enterobserver';\\n\\n/**\\n * The Enter feature. Handles the <kbd>Enter</kbd> and <kbd>Shift + Enter</kbd> keys in the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Enter extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Enter';\\n\\t}\\n\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\n\\t\\tview.addObserver( EnterObserver );\\n\\n\\t\\teditor.commands.add( 'enter', new EnterCommand( editor ) );\\n\\n\\t\\t// TODO We may use the keystroke handler for that.\\n\\t\\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\\n\\t\\t\\teditor.execute( 'enter' );\\n\\t\\t\\tdata.preventDefault();\\n\\t\\t\\tview.scrollToTheSelection();\\n\\t\\t}, { priority: 'low' } );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/changebuffer\\n */\\n\\nimport Batch from '@ckeditor/ckeditor5-engine/src/model/batch';\\n\\n/**\\n * Change buffer allows to group atomic changes (like characters that have been typed) into\\n * {@link module:engine/model/batch~Batch batches}.\\n *\\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\\n *\\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\\n *\\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\\n *\\n *\\t\\tconst buffer = new ChangeBuffer( model, LIMIT );\\n *\\n *\\t\\t// Later on in your feature:\\n *\\t\\tbuffer.batch.insert( pos, insertedCharacters );\\n *\\t\\tbuffer.input( insertedCharacters.length );\\n *\\n */\\nexport default class ChangeBuffer {\\n\\t/**\\n\\t * Creates a new instance of the change buffer.\\n\\t *\\n\\t * @param {module:engine/model/model~Model} model\\n\\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\\n\\t */\\n\\tconstructor( model, limit = 20 ) {\\n\\t\\t/**\\n\\t\\t * The model instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/model/model~Model} #model\\n\\t\\t */\\n\\t\\tthis.model = model;\\n\\n\\t\\t/**\\n\\t\\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\\n\\t\\t * the {@link #batch batch} is set to a new one.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #size\\n\\t\\t */\\n\\t\\tthis.size = 0;\\n\\n\\t\\t/**\\n\\t\\t * The maximum number of atomic changes which can be contained in one batch.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number} #limit\\n\\t\\t */\\n\\t\\tthis.limit = limit;\\n\\n\\t\\t/**\\n\\t\\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #isLocked\\n\\t\\t */\\n\\t\\tthis.isLocked = false;\\n\\n\\t\\t// The function to be called in order to notify the buffer about batches which appeared in the document.\\n\\t\\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\\n\\t\\t//\\n\\t\\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\\n\\t\\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\\n\\t\\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\\n\\t\\tthis._changeCallback = ( evt, batch ) => {\\n\\t\\t\\tif ( batch.type != 'transparent' && batch !== this._batch ) {\\n\\t\\t\\t\\tthis._reset( true );\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis._selectionChangeCallback = () => {\\n\\t\\t\\tthis._reset();\\n\\t\\t};\\n\\n\\t\\tthis.model.document.on( 'change', this._changeCallback );\\n\\n\\t\\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\\n\\t\\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\\n\\n\\t\\t/**\\n\\t\\t * The current batch instance.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member #_batch\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The callback to document the change event which later needs to be removed.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member #_changeCallback\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member #_selectionChangeCallback\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * The current batch to which a feature should add its deltas. Once the {@link #size}\\n\\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\\n\\t *\\n\\t * @type {module:engine/model/batch~Batch}\\n\\t */\\n\\tget batch() {\\n\\t\\tif ( !this._batch ) {\\n\\t\\t\\tthis._batch = new Batch();\\n\\t\\t}\\n\\n\\t\\treturn this._batch;\\n\\t}\\n\\n\\t/**\\n\\t * The input number of changes into the buffer. Once the {@link #size} is\\n\\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\\n\\t *\\n\\t * @param {Number} changeCount The number of atomic changes to input.\\n\\t */\\n\\tinput( changeCount ) {\\n\\t\\tthis.size += changeCount;\\n\\n\\t\\tif ( this.size >= this.limit ) {\\n\\t\\t\\tthis._reset( true );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Locks the buffer.\\n\\t */\\n\\tlock() {\\n\\t\\tthis.isLocked = true;\\n\\t}\\n\\n\\t/**\\n\\t * Unlocks the buffer.\\n\\t */\\n\\tunlock() {\\n\\t\\tthis.isLocked = false;\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the buffer.\\n\\t */\\n\\tdestroy() {\\n\\t\\tthis.model.document.off( 'change', this._changeCallback );\\n\\t\\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\\n\\t\\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\\n\\t}\\n\\n\\t/**\\n\\t * Resets the change buffer.\\n\\t *\\n\\t * @private\\n\\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\\n\\t */\\n\\t_reset( ignoreLock ) {\\n\\t\\tif ( !this.isLocked || ignoreLock ) {\\n\\t\\t\\tthis._batch = null;\\n\\t\\t\\tthis.size = 0;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/inputcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport ChangeBuffer from './changebuffer';\\n\\n/**\\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class InputCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t * @param {Number} undoStepSize The maximum number of atomic changes\\n\\t * which can be contained in one batch in the command buffer.\\n\\t */\\n\\tconstructor( editor, undoStepSize ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * Typing's change buffer used to group subsequent changes into batches.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @private\\n\\t\\t * @member {module:typing/changebuffer~ChangeBuffer} #_buffer\\n\\t\\t */\\n\\t\\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\\n\\t}\\n\\n\\t/**\\n\\t * The current change buffer.\\n\\t *\\n\\t * @type {module:typing/changebuffer~ChangeBuffer}\\n\\t */\\n\\tget buffer() {\\n\\t\\treturn this._buffer;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tdestroy() {\\n\\t\\tsuper.destroy();\\n\\n\\t\\tthis._buffer.destroy();\\n\\t}\\n\\n\\t/**\\n\\t * Executes the input command. It replaces the content within the given range with the given text.\\n\\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\\n\\t * at the beginning of the range (which after the removal is a collapsed range).\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} [options] The command options.\\n\\t * @param {String} [options.text=''] The text to be inserted.\\n\\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\\n\\t * to the first range in the current selection.\\n\\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\\n\\t * should be placed after the insertion. If not specified, the selection will be placed right after\\n\\t * the inserted text.\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst text = options.text || '';\\n\\t\\tconst textInsertions = text.length;\\n\\t\\tconst range = options.range || doc.selection.getFirstRange();\\n\\t\\tconst resultRange = options.resultRange;\\n\\n\\t\\tmodel.enqueueChange( this._buffer.batch, writer => {\\n\\t\\t\\tconst isCollapsedRange = range.isCollapsed;\\n\\n\\t\\t\\tthis._buffer.lock();\\n\\n\\t\\t\\tif ( !isCollapsedRange ) {\\n\\t\\t\\t\\twriter.remove( range );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( text ) {\\n\\t\\t\\t\\twriter.insertText( text, doc.selection.getAttributes(), range.start );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( resultRange ) {\\n\\t\\t\\t\\twriter.setSelection( resultRange );\\n\\t\\t\\t} else if ( isCollapsedRange ) {\\n\\t\\t\\t\\t// If range was collapsed just shift the selection by the number of inserted characters.\\n\\t\\t\\t\\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis._buffer.unlock();\\n\\n\\t\\t\\tthis._buffer.input( textInsertions );\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/input\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\\nimport ViewText from '@ckeditor/ckeditor5-engine/src/view/text';\\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\\nimport InputCommand from './inputcommand';\\n\\n/**\\n * Handles text input coming from the keyboard or other input methods.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Input extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Input';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst editingView = editor.editing.view;\\n\\t\\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\\n\\n\\t\\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\\n\\n\\t\\teditor.commands.add( 'input', inputCommand );\\n\\n\\t\\tthis.listenTo( editingView.document, 'keydown', ( evt, data ) => {\\n\\t\\t\\tthis._handleKeydown( data, inputCommand );\\n\\t\\t}, { priority: 'lowest' } );\\n\\n\\t\\tthis.listenTo( editingView.document, 'mutations', ( evt, mutations, viewSelection ) => {\\n\\t\\t\\tthis._handleMutations( mutations, viewSelection );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Handles the keydown event. We need to guess whether such keystroke is going to result\\n\\t * in typing. If so, then before character insertion happens, any selected content needs\\n\\t * to be deleted. Otherwise the default browser deletion mechanism would be\\n\\t * triggered, resulting in:\\n\\t *\\n\\t * * Hundreds of mutations which could not be handled.\\n\\t * * But most importantly, loss of control over how the content is being deleted.\\n\\t *\\n\\t * The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\\n\\t * to handle the event.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\\n\\t * @param {module:typing/inputcommand~InputCommand} inputCommand\\n\\t */\\n\\t_handleKeydown( evtData, inputCommand ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst buffer = inputCommand.buffer;\\n\\n\\t\\t// By relying on the state of the input command we allow disabling the entire input easily\\n\\t\\t// by just disabling the input command. We could’ve used here the delete command but that\\n\\t\\t// would mean requiring the delete feature which would block loading one without the other.\\n\\t\\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\\n\\t\\t// the input without blocking other features.\\n\\t\\tif ( !inputCommand.isEnabled ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tbuffer.lock();\\n\\n\\t\\tmodel.enqueueChange( buffer.batch, () => {\\n\\t\\t\\tthis.editor.model.deleteContent( doc.selection );\\n\\t\\t} );\\n\\n\\t\\tbuffer.unlock();\\n\\t}\\n\\n\\t/**\\n\\t * Handles DOM mutations.\\n\\t *\\n\\t * @private\\n\\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\\n\\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\\n\\t * @param {module:engine/view/selection~Selection|null} viewSelection\\n\\t */\\n\\t_handleMutations( mutations, viewSelection ) {\\n\\t\\tnew MutationHandler( this.editor ).handle( mutations, viewSelection );\\n\\t}\\n}\\n\\n/**\\n * Helper class for translating DOM mutations into model changes.\\n *\\n * @private\\n */\\nclass MutationHandler {\\n\\t/**\\n\\t * Creates an instance of the mutation handler.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\t/**\\n\\t\\t * Editor instance for which mutations are handled.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:core/editor/editor~Editor} #editor\\n\\t\\t */\\n\\t\\tthis.editor = editor;\\n\\n\\t\\t/**\\n\\t\\t * The editing controller.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\\n\\t\\t */\\n\\t\\tthis.editing = this.editor.editing;\\n\\t}\\n\\n\\t/**\\n\\t * Handles given mutations.\\n\\t *\\n\\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\\n\\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\\n\\t * @param {module:engine/view/selection~Selection|null} viewSelection\\n\\t */\\n\\thandle( mutations, viewSelection ) {\\n\\t\\tif ( containerChildrenMutated( mutations ) ) {\\n\\t\\t\\tthis._handleContainerChildrenMutations( mutations, viewSelection );\\n\\t\\t} else {\\n\\t\\t\\tfor ( const mutation of mutations ) {\\n\\t\\t\\t\\t// Fortunately it will never be both.\\n\\t\\t\\t\\tthis._handleTextMutation( mutation, viewSelection );\\n\\t\\t\\t\\tthis._handleTextNodeInsertion( mutation );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Handles situations when container's children mutated during input. This can happen when\\n\\t * the browser is trying to \\\"fix\\\" DOM in certain situations. For example, when the user starts to type\\n\\t * in `<p><a href=\\\"\\\"><i>Link{}</i></a></p>`, the browser might change the order of elements\\n\\t * to `<p><i><a href=\\\"\\\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\\n\\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\\n\\t *\\n\\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\\n\\t * and then compared with the current model to calculate the proper text change.\\n\\t *\\n\\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\\n\\t * in {@link #_handleTextMutation}).\\n\\t *\\n\\t * @private\\n\\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\\n\\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\\n\\t * @param {module:engine/view/selection~Selection|null} viewSelection\\n\\t */\\n\\t_handleContainerChildrenMutations( mutations, viewSelection ) {\\n\\t\\t// Get common ancestor of all mutations.\\n\\t\\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\\n\\n\\t\\t// Quit if there is no common ancestor.\\n\\t\\tif ( !mutationsCommonAncestor ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst domConverter = this.editor.editing.view.domConverter;\\n\\n\\t\\t// Get common ancestor in DOM.\\n\\t\\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\\n\\n\\t\\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\\n\\t\\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\\n\\t\\tconst freshDomConverter = new DomConverter();\\n\\t\\tconst modelFromCurrentDom = this.editor.data.toModel(\\n\\t\\t\\tfreshDomConverter.domToView( domMutationCommonAncestor )\\n\\t\\t).getChild( 0 );\\n\\n\\t\\t// Current model.\\n\\t\\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\\n\\n\\t\\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\\n\\t\\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\\n\\t\\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\\n\\t\\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\\n\\t\\t// because `<ul>` is not mapped (`<li>`s are).\\n\\t\\t// See https://github.com/ckeditor/ckeditor5/issues/718.\\n\\t\\tif ( !currentModel ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Get children from both ancestors.\\n\\t\\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\\n\\t\\tconst currentModelChildren = Array.from( currentModel.getChildren() );\\n\\n\\t\\t// Skip situations when common ancestor has any elements (cause they are too hard).\\n\\t\\tif ( !hasOnlyTextNodes( modelFromDomChildren ) || !hasOnlyTextNodes( currentModelChildren ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Replace &nbsp; inserted by the browser with normal space.\\n\\t\\t// See comment in `_handleTextMutation`.\\n\\t\\tconst newText = modelFromDomChildren.map( item => item.data ).join( '' ).replace( /\\\\u00A0/g, ' ' );\\n\\t\\tconst oldText = currentModelChildren.map( item => item.data ).join( '' );\\n\\n\\t\\t// Do nothing if mutations created same text.\\n\\t\\tif ( oldText === newText ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst diffResult = diff( oldText, newText );\\n\\n\\t\\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\\n\\n\\t\\t// Try setting new model selection according to passed view selection.\\n\\t\\tlet modelSelectionRange = null;\\n\\n\\t\\tif ( viewSelection ) {\\n\\t\\t\\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\\n\\t\\t}\\n\\n\\t\\tconst insertText = newText.substr( firstChangeAt, insertions );\\n\\t\\tconst removeRange = ModelRange.createFromParentsAndOffsets(\\n\\t\\t\\tcurrentModel,\\n\\t\\t\\tfirstChangeAt,\\n\\t\\t\\tcurrentModel,\\n\\t\\t\\tfirstChangeAt + deletions\\n\\t\\t);\\n\\n\\t\\tthis.editor.execute( 'input', {\\n\\t\\t\\ttext: insertText,\\n\\t\\t\\trange: removeRange,\\n\\t\\t\\tresultRange: modelSelectionRange\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t */\\n\\t_handleTextMutation( mutation, viewSelection ) {\\n\\t\\tif ( mutation.type != 'text' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Replace &nbsp; inserted by the browser with normal space.\\n\\t\\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\\n\\t\\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\\n\\t\\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\\n\\t\\t// However then it will be handled outside of mutations, like enter key is.\\n\\t\\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\\n\\t\\t// take `newText` and compare it to (cleaned up) view.\\n\\t\\t// It could also be done in mutation observer too, however if any outside plugin would like to\\n\\t\\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\\n\\t\\tconst newText = mutation.newText.replace( /\\\\u00A0/g, ' ' );\\n\\t\\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\\n\\t\\tconst oldText = mutation.oldText.replace( /\\\\u00A0/g, ' ' );\\n\\n\\t\\tconst diffResult = diff( oldText, newText );\\n\\n\\t\\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\\n\\n\\t\\t// Try setting new model selection according to passed view selection.\\n\\t\\tlet modelSelectionRange = null;\\n\\n\\t\\tif ( viewSelection ) {\\n\\t\\t\\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\\n\\t\\t}\\n\\n\\t\\t// Get the position in view and model where the changes will happen.\\n\\t\\tconst viewPos = new ViewPosition( mutation.node, firstChangeAt );\\n\\t\\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\\n\\t\\tconst removeRange = ModelRange.createFromPositionAndShift( modelPos, deletions );\\n\\t\\tconst insertText = newText.substr( firstChangeAt, insertions );\\n\\n\\t\\tthis.editor.execute( 'input', {\\n\\t\\t\\ttext: insertText,\\n\\t\\t\\trange: removeRange,\\n\\t\\t\\tresultRange: modelSelectionRange\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @private\\n\\t */\\n\\t_handleTextNodeInsertion( mutation ) {\\n\\t\\tif ( mutation.type != 'children' ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst change = getSingleTextNodeChange( mutation );\\n\\t\\tconst viewPos = new ViewPosition( mutation.node, change.index );\\n\\t\\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\\n\\t\\tconst insertedText = change.values[ 0 ].data;\\n\\n\\t\\tthis.editor.execute( 'input', {\\n\\t\\t\\t// Replace &nbsp; inserted by the browser with normal space.\\n\\t\\t\\t// See comment in `_handleTextMutation`.\\n\\t\\t\\t// In this case we don't need to do this before `diff` because we diff whole nodes.\\n\\t\\t\\t// Just change &nbsp; in case there are some.\\n\\t\\t\\ttext: insertedText.replace( /\\\\u00A0/g, ' ' ),\\n\\t\\t\\trange: new ModelRange( modelPos )\\n\\t\\t} );\\n\\t}\\n}\\n\\nconst safeKeycodes = [\\n\\tgetCode( 'arrowUp' ),\\n\\tgetCode( 'arrowRight' ),\\n\\tgetCode( 'arrowDown' ),\\n\\tgetCode( 'arrowLeft' ),\\n\\t9, // Tab\\n\\t16, // Shift\\n\\t17, // Ctrl\\n\\t18, // Alt\\n\\t20, // CapsLock\\n\\t27, // Escape\\n\\t33, // PageUp\\n\\t34, // PageDown\\n\\t35, // Home\\n\\t36, // End\\n\\t229 // Composition start key\\n];\\n\\n// Function keys.\\nfor ( let code = 112; code <= 135; code++ ) {\\n\\tsafeKeycodes.push( code );\\n}\\n\\n// Returns `true` if a keystroke should not cause any content change caused by \\\"typing\\\".\\n//\\n// Note: This implementation is very simple and will need to be refined with time.\\n//\\n// @private\\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\\n// @returns {Boolean}\\nfunction isSafeKeystroke( keyData ) {\\n\\t// Keystrokes which contain Ctrl don't represent typing.\\n\\tif ( keyData.ctrlKey ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn safeKeycodes.includes( keyData.keyCode );\\n}\\n\\n// Helper function that compares whether two given view nodes are same. It is used in `diff` when it's passed an array\\n// with child nodes.\\nfunction compareChildNodes( oldChild, newChild ) {\\n\\tif ( oldChild instanceof ViewText && newChild instanceof ViewText ) {\\n\\t\\treturn oldChild.data === newChild.data;\\n\\t} else {\\n\\t\\treturn oldChild === newChild;\\n\\t}\\n}\\n\\n// Returns change made to a single text node. Returns `undefined` if more than a single text node was changed.\\n//\\n// @private\\n// @param mutation\\nfunction getSingleTextNodeChange( mutation ) {\\n\\t// One new node.\\n\\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Which is text.\\n\\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\\n\\tconst changes = diffToChanges( diffResult, mutation.newChildren );\\n\\n\\t// In case of [ delete, insert, insert ] the previous check will not exit.\\n\\tif ( changes.length > 1 ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst change = changes[ 0 ];\\n\\n\\t// Which is text.\\n\\tif ( !( change.values[ 0 ] instanceof ViewText ) ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\treturn change;\\n}\\n\\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\\n// or {@link module:engine/view/rootelement~RootElement}.\\n//\\n// @private\\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\\nfunction getMutationsContainer( mutations ) {\\n\\tconst lca = mutations\\n\\t\\t.map( mutation => mutation.node )\\n\\t\\t.reduce( ( commonAncestor, node ) => {\\n\\t\\t\\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\\n\\t\\t} );\\n\\n\\tif ( !lca ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// We need to look for container and root elements only, so check all LCA's\\n\\t// ancestors (starting from itself).\\n\\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\\n\\t\\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\\n}\\n\\n// Returns true if container children have mutated or more than a single text node was changed.\\n//\\n// Single text node child insertion is handled in {@link module:typing/input~MutationHandler#_handleTextNodeInsertion}\\n// while text mutation is handled in {@link module:typing/input~MutationHandler#_handleTextMutation}.\\n//\\n// @private\\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\\n// @returns {Boolean}\\nfunction containerChildrenMutated( mutations ) {\\n\\tif ( mutations.length == 0 ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\\n\\tfor ( const mutation of mutations ) {\\n\\t\\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\treturn false;\\n}\\n\\n// Returns true if provided array contains only {@link module:engine/model/text~Text model text nodes}.\\n//\\n// @param {Array.<module:engine/model/node~Node>} children\\n// @returns {Boolean}\\nfunction hasOnlyTextNodes( children ) {\\n\\treturn children.every( child => child.is( 'text' ) );\\n}\\n\\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\\n//\\n// @private\\n// @param diffResult\\n// @return {{insertions: number, deletions: number, firstChangeAt: *}}\\nfunction calculateChanges( diffResult ) {\\n\\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\\n\\tlet firstChangeAt = null;\\n\\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\\n\\tlet lastChangeAt = null;\\n\\n\\t// Get `firstChangeAt` and `lastChangeAt`.\\n\\tfor ( let i = 0; i < diffResult.length; i++ ) {\\n\\t\\tconst change = diffResult[ i ];\\n\\n\\t\\tif ( change != 'equal' ) {\\n\\t\\t\\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\\n\\t\\t\\tlastChangeAt = i;\\n\\t\\t}\\n\\t}\\n\\n\\t// How many characters, starting from `firstChangeAt`, should be removed.\\n\\tlet deletions = 0;\\n\\t// How many characters, starting from `firstChangeAt`, should be inserted.\\n\\tlet insertions = 0;\\n\\n\\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\\n\\t\\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\\n\\t\\tif ( diffResult[ i ] != 'insert' ) {\\n\\t\\t\\tdeletions++;\\n\\t\\t}\\n\\n\\t\\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\\n\\t\\tif ( diffResult[ i ] != 'delete' ) {\\n\\t\\t\\tinsertions++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn { insertions, deletions, firstChangeAt };\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/difftochanges\\n */\\n\\n/**\\n * Creates a set of changes which need to be applied to the input in order to transform\\n * it into the output. This function can be used with strings or arrays.\\n *\\n *\\t\\tconst input = Array.from( 'abc' );\\n *\\t\\tconst output = Array.from( 'xaby' );\\n *\\t\\tconst changes = diffToChanges( diff( input, output ), output );\\n *\\n *\\t\\tchanges.forEach( change => {\\n *\\t\\t\\tif ( change.type == 'insert' ) {\\n *\\t\\t\\t\\tinput.splice( change.index, 0, ...change.values );\\n *\\t\\t\\t} else if ( change.type == 'delete' ) {\\n *\\t\\t\\t\\tinput.splice( change.index, change.howMany );\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n *\\t\\tinput.join( '' ) == output.join( '' ); // -> true\\n *\\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\\n * @param {String|Array} output The string or array which was passed as diff's output.\\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\\n * in order to transform it into the output.\\n */\\nexport default function diffToChanges( diff, output ) {\\n\\tconst changes = [];\\n\\tlet index = 0;\\n\\tlet lastOperation;\\n\\n\\tdiff.forEach( change => {\\n\\t\\tif ( change == 'equal' ) {\\n\\t\\t\\tpushLast();\\n\\n\\t\\t\\tindex++;\\n\\t\\t} else if ( change == 'insert' ) {\\n\\t\\t\\tif ( isContinuationOf( 'insert' ) ) {\\n\\t\\t\\t\\tlastOperation.values.push( output[ index ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpushLast();\\n\\n\\t\\t\\t\\tlastOperation = {\\n\\t\\t\\t\\t\\ttype: 'insert',\\n\\t\\t\\t\\t\\tindex,\\n\\t\\t\\t\\t\\tvalues: [ output[ index ] ]\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\tindex++;\\n\\t\\t} else /* if ( change == 'delete' ) */ {\\n\\t\\t\\tif ( isContinuationOf( 'delete' ) ) {\\n\\t\\t\\t\\tlastOperation.howMany++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tpushLast();\\n\\n\\t\\t\\t\\tlastOperation = {\\n\\t\\t\\t\\t\\ttype: 'delete',\\n\\t\\t\\t\\t\\tindex,\\n\\t\\t\\t\\t\\thowMany: 1\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} );\\n\\n\\tpushLast();\\n\\n\\treturn changes;\\n\\n\\tfunction pushLast() {\\n\\t\\tif ( lastOperation ) {\\n\\t\\t\\tchanges.push( lastOperation );\\n\\t\\t\\tlastOperation = null;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction isContinuationOf( expected ) {\\n\\t\\treturn lastOperation && lastOperation.type == expected;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/deletecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport Selection from '@ckeditor/ckeditor5-engine/src/model/selection';\\nimport Element from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport ChangeBuffer from './changebuffer';\\nimport count from '@ckeditor/ckeditor5-utils/src/count';\\n\\n/**\\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\\n * <kbd>Backspace</kbd> keys.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class DeleteCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\\n\\t * should consume the content when the selection is collapsed.\\n\\t */\\n\\tconstructor( editor, direction ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * The directionality of the delete describing in what direction it should\\n\\t\\t * consume the content when the selection is collapsed.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {'forward'|'backward'} #direction\\n\\t\\t */\\n\\t\\tthis.direction = direction;\\n\\n\\t\\t/**\\n\\t\\t * Delete's change buffer used to group subsequent changes into batches.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @private\\n\\t\\t * @member {typing.ChangeBuffer} #buffer\\n\\t\\t */\\n\\t\\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\\n\\t * or a piece of content in the {@link #direction defined direction}.\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} [options] The command options.\\n\\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\\n\\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\\n\\t * See the {@link module:engine/view/document~Document#event:delete} event data.\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\n\\t\\tmodel.enqueueChange( this._buffer.batch, writer => {\\n\\t\\t\\tthis._buffer.lock();\\n\\n\\t\\t\\tconst selection = new Selection( doc.selection );\\n\\n\\t\\t\\t// Do not replace the whole selected content if selection was collapsed.\\n\\t\\t\\t// This prevents such situation:\\n\\t\\t\\t//\\n\\t\\t\\t// <h1></h1><p>[]</p>\\t-->  <h1>[</h1><p>]</p> \\t\\t-->  <p></p>\\n\\t\\t\\t// starting content\\t\\t-->   after `modifySelection`\\t-->  after `deleteContent`.\\n\\t\\t\\tconst doNotResetEntireContent = selection.isCollapsed;\\n\\n\\t\\t\\t// Try to extend the selection in the specified direction.\\n\\t\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t\\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check if deleting in an empty editor. See #61.\\n\\t\\t\\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\\n\\t\\t\\t\\tthis._replaceEntireContentWithParagraph( writer );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If selection is still collapsed, then there's nothing to delete.\\n\\t\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet changeCount = 0;\\n\\n\\t\\t\\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\\n\\t\\t\\t\\tchangeCount += count(\\n\\t\\t\\t\\t\\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\\n\\t\\t\\t\\t);\\n\\t\\t\\t} );\\n\\n\\t\\t\\tmodel.deleteContent( selection, { doNotResetEntireContent } );\\n\\t\\t\\tthis._buffer.input( changeCount );\\n\\n\\t\\t\\twriter.setSelection( selection );\\n\\n\\t\\t\\tthis._buffer.unlock();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\\n\\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\\n\\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\\n\\t *\\n\\t * But, if the user pressed the key in an empty editable for the first time,\\n\\t * we want to replace the entire content with a paragraph if:\\n\\t *\\n\\t * * the current limit element is empty,\\n\\t * * the paragraph is allowed in the limit element,\\n\\t * * the limit doesn't already have a paragraph inside.\\n\\t *\\n\\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\\n\\t *\\n\\t * @private\\n\\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\\n\\t * @returns {Boolean}\\n\\t */\\n\\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\\n\\t\\t// Does nothing if user pressed and held the \\\"Backspace\\\" or \\\"Delete\\\" key.\\n\\t\\tif ( sequence > 1 ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst selection = doc.selection;\\n\\t\\tconst limitElement = model.schema.getLimitElement( selection );\\n\\n\\t\\t// If a collapsed selection contains the whole content it means that the content is empty\\n\\t\\t// (from the user perspective).\\n\\t\\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\\n\\n\\t\\tif ( !limitElementIsEmpty ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst limitElementFirstChild = limitElement.getChild( 0 );\\n\\n\\t\\t// Does nothing if the limit element already contains only a paragraph.\\n\\t\\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\\n\\t\\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\\n\\t\\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_replaceEntireContentWithParagraph( writer ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst selection = doc.selection;\\n\\t\\tconst limitElement = model.schema.getLimitElement( selection );\\n\\t\\tconst paragraph = new Element( 'paragraph' );\\n\\n\\t\\twriter.remove( Range.createIn( limitElement ) );\\n\\t\\twriter.insert( paragraph, limitElement );\\n\\n\\t\\twriter.setSelection( paragraph, 0 );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/deleteobserver\\n */\\n\\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\nimport env from '@ckeditor/ckeditor5-utils/src/env';\\n\\n/**\\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\\n *\\n * @extends module:engine/view/observer/observer~Observer\\n */\\nexport default class DeleteObserver extends Observer {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tconst document = view.document;\\n\\t\\tlet sequence = 0;\\n\\n\\t\\tdocument.on( 'keyup', ( evt, data ) => {\\n\\t\\t\\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\\n\\t\\t\\t\\tsequence = 0;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tdocument.on( 'keydown', ( evt, data ) => {\\n\\t\\t\\tconst deleteData = {};\\n\\n\\t\\t\\tif ( data.keyCode == keyCodes.delete ) {\\n\\t\\t\\t\\tdeleteData.direction = 'forward';\\n\\t\\t\\t\\tdeleteData.unit = 'character';\\n\\t\\t\\t} else if ( data.keyCode == keyCodes.backspace ) {\\n\\t\\t\\t\\tdeleteData.direction = 'backward';\\n\\t\\t\\t\\tdeleteData.unit = 'codePoint';\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\\n\\t\\t\\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\\n\\t\\t\\tdeleteData.sequence = ++sequence;\\n\\n\\t\\t\\t// Save the event object to check later if it was stopped or not.\\n\\t\\t\\tlet event;\\n\\t\\t\\tdocument.once( 'delete', evt => ( event = evt ), { priority: 'highest' } );\\n\\n\\t\\t\\tdocument.fire( 'delete', new DomEventData( document, data.domEvent, deleteData ) );\\n\\n\\t\\t\\t// Stop `keydown` event if `delete` event was stopped.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5/issues/753\\n\\t\\t\\tif ( event && event.stop.called ) {\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tobserve() {}\\n}\\n\\n/**\\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\\n *\\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\\n *\\n * @event module:engine/view/document~Document#event:delete\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\\n * @param {'character'|'word'} data.unit The \\\"amount\\\" of content that should be deleted.\\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\\n * If it's 2 or more it means that the key was pressed and hold.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/delete\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport DeleteCommand from './deletecommand';\\nimport DeleteObserver from './deleteobserver';\\n\\n/**\\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Delete extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Delete';\\n\\t}\\n\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\n\\t\\tview.addObserver( DeleteObserver );\\n\\n\\t\\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\\n\\t\\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\\n\\n\\t\\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\\n\\t\\t\\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', { unit: data.unit, sequence: data.sequence } );\\n\\t\\t\\tdata.preventDefault();\\n\\t\\t\\tview.scrollToTheSelection();\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module typing/typing\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Input from './input';\\nimport Delete from './delete';\\n\\n/**\\n * The typing feature. It handles typing.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Typing extends Plugin {\\n\\tstatic get requires() {\\n\\t\\treturn [ Input, Delete ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Typing';\\n\\t}\\n}\\n\\n/**\\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\\n *\\n * Read more in {@link module:typing/typing~TypingConfig}.\\n *\\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\\n */\\n\\n/**\\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( editorElement, {\\n * \\t\\t\\t\\ttyping: ... // Typing feature options.\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface TypingConfig\\n */\\n\\n/**\\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\\n * is created every 20 characters are inserted or deleted.\\n *\\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/basecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport Batch from '@ckeditor/ckeditor5-engine/src/model/batch';\\n\\n/**\\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\\n *\\n * @protected\\n * @extends module:core/command~Command\\n */\\nexport default class BaseCommand extends Command {\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * Stack of items stored by the command. These are pairs of:\\n\\t\\t *\\n\\t\\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\\n\\t\\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {Array} #_stack\\n\\t\\t */\\n\\t\\tthis._stack = [];\\n\\n\\t\\t/**\\n\\t\\t * Stores all batches that were created by this command.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\\n\\t\\t */\\n\\t\\tthis._createdBatches = new WeakSet();\\n\\n\\t\\t// Refresh state, so the command is inactive right after initialization.\\n\\t\\tthis.refresh();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.isEnabled = this._stack.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\\n\\t * created by the editor which this command is registered to.\\n\\t *\\n\\t * @param {module:engine/model/batch~Batch} batch The batch to add.\\n\\t */\\n\\taddBatch( batch ) {\\n\\t\\tconst docSelection = this.editor.model.document.selection;\\n\\n\\t\\tconst selection = {\\n\\t\\t\\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\\n\\t\\t\\tisBackward: docSelection.isBackward\\n\\t\\t};\\n\\n\\t\\tthis._stack.push( { batch, selection } );\\n\\t\\tthis.refresh();\\n\\t}\\n\\n\\t/**\\n\\t * Removes all items from the stack.\\n\\t */\\n\\tclearStack() {\\n\\t\\tthis._stack = [];\\n\\t\\tthis.refresh();\\n\\t}\\n\\n\\t/**\\n\\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\\n\\t *\\n\\t * @protected\\n\\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\\n\\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\\n\\t * @param {Array.<module:engine/model/delta/delta~Delta>} deltas Deltas which has been applied since selection has been stored.\\n\\t */\\n\\t_restoreSelection( ranges, isBackward, deltas ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\n\\t\\t// This will keep the transformed selection ranges.\\n\\t\\tconst selectionRanges = [];\\n\\n\\t\\t// Transform all ranges from the restored selection.\\n\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\tconst transformedRanges = transformSelectionRange( range, deltas );\\n\\n\\t\\t\\t// For each `range` from `ranges`, we take only one transformed range.\\n\\t\\t\\t// This is because we want to prevent situation where single-range selection\\n\\t\\t\\t// got transformed to multi-range selection. We will take the first range that\\n\\t\\t\\t// is not in the graveyard.\\n\\t\\t\\tconst transformedRange = transformedRanges.find(\\n\\t\\t\\t\\trange => range.start.root != document.graveyard\\n\\t\\t\\t);\\n\\n\\t\\t\\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\\n\\t\\t\\tif ( transformedRange ) {\\n\\t\\t\\t\\tselectionRanges.push( transformedRange );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\\n\\t\\tif ( selectionRanges.length ) {\\n\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\twriter.setSelection( selectionRanges, { backward: isBackward } );\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\\n\\t * This is a helper method for {@link #execute}.\\n\\t *\\n\\t * @protected\\n\\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\\n\\t */\\n\\t_undo( batchToUndo ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\n\\t\\t// All changes done by the command execution will be saved as one batch.\\n\\t\\tconst undoingBatch = new Batch();\\n\\t\\tthis._createdBatches.add( undoingBatch );\\n\\n\\t\\tconst deltasToUndo = batchToUndo.deltas.slice();\\n\\t\\tdeltasToUndo.reverse();\\n\\n\\t\\t// We will process each delta from `batchToUndo`, in reverse order. If there were deltas A, B and C in undone batch,\\n\\t\\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\\n\\t\\tfor ( const deltaToUndo of deltasToUndo ) {\\n\\t\\t\\t// For now let's skip deltas with operation applied on detached document.\\n\\t\\t\\t// We assumed that there is no deltas with mixed (document and document fragment) operations\\n\\t\\t\\t// so we can skip entire delta.\\n\\t\\t\\tif ( deltaToUndo.operations.some( op => op.isDocumentOperation ) ) {\\n\\t\\t\\t\\t// Keep in mind that transformation algorithms return arrays. That's because the transformation might result in multiple\\n\\t\\t\\t\\t// deltas, so we need arrays to handle them. To simplify algorithms, it is better to always operate on arrays.\\n\\t\\t\\t\\tconst nextBaseVersion = deltaToUndo.baseVersion + deltaToUndo.operations.length;\\n\\n\\t\\t\\t\\t// Reverse delta from the history.\\n\\t\\t\\t\\tconst historyDeltas = Array.from( document.history.getDeltas( nextBaseVersion ) );\\n\\t\\t\\t\\tconst transformedSets = model.transformDeltas( [ deltaToUndo.getReversed() ], historyDeltas, true );\\n\\t\\t\\t\\tconst reversedDeltas = transformedSets.deltasA;\\n\\n\\t\\t\\t\\t// After reversed delta has been transformed by all history deltas, apply it.\\n\\t\\t\\t\\tfor ( const delta of reversedDeltas ) {\\n\\t\\t\\t\\t\\t// Fix base version.\\n\\t\\t\\t\\t\\tdelta.baseVersion = document.version;\\n\\n\\t\\t\\t\\t\\t// Before applying, add the delta to the `undoingBatch`.\\n\\t\\t\\t\\t\\tundoingBatch.addDelta( delta );\\n\\n\\t\\t\\t\\t\\t// Now, apply all operations of the delta.\\n\\t\\t\\t\\t\\tfor ( const operation of delta.operations ) {\\n\\t\\t\\t\\t\\t\\tmodel.applyOperation( operation );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tdocument.history.setDeltaAsUndone( deltaToUndo, delta );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn undoingBatch;\\n\\t}\\n}\\n\\n// Transforms given range `range` by given `deltas`.\\n// Returns an array containing one or more ranges, which are result of the transformation.\\nfunction transformSelectionRange( range, deltas ) {\\n\\tconst transformed = transformRangesByDeltas( [ range ], deltas );\\n\\n\\t// After `range` got transformed, we have an array of ranges. Some of those\\n\\t// ranges may be \\\"touching\\\" -- they can be next to each other and could be merged.\\n\\t// First, we have to sort those ranges to assure that they are in order.\\n\\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\\n\\n\\t// Then, we check if two consecutive ranges are touching.\\n\\tfor ( let i = 1; i < transformed.length; i++ ) {\\n\\t\\tconst a = transformed[ i - 1 ];\\n\\t\\tconst b = transformed[ i ];\\n\\n\\t\\tif ( a.end.isTouching( b.start ) ) {\\n\\t\\t\\t// And join them together if they are.\\n\\t\\t\\ta.end = b.end;\\n\\t\\t\\ttransformed.splice( i, 1 );\\n\\t\\t\\ti--;\\n\\t\\t}\\n\\t}\\n\\n\\treturn transformed;\\n}\\n\\n// Transforms given set of `ranges` by given set of `deltas`. Returns transformed `ranges`.\\nexport function transformRangesByDeltas( ranges, deltas ) {\\n\\tfor ( const delta of deltas ) {\\n\\t\\tfor ( const operation of delta.operations ) {\\n\\t\\t\\t// We look through all operations from all deltas.\\n\\n\\t\\t\\tfor ( let i = 0; i < ranges.length; i++ ) {\\n\\t\\t\\t\\t// We transform every range by every operation.\\n\\t\\t\\t\\tlet result;\\n\\n\\t\\t\\t\\tswitch ( operation.type ) {\\n\\t\\t\\t\\t\\tcase 'insert':\\n\\t\\t\\t\\t\\t\\tresult = ranges[ i ]._getTransformedByInsertion(\\n\\t\\t\\t\\t\\t\\t\\toperation.position,\\n\\t\\t\\t\\t\\t\\t\\toperation.nodes.maxOffset,\\n\\t\\t\\t\\t\\t\\t\\ttrue\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'move':\\n\\t\\t\\t\\t\\tcase 'remove':\\n\\t\\t\\t\\t\\tcase 'reinsert':\\n\\t\\t\\t\\t\\t\\tresult = ranges[ i ]._getTransformedByMove(\\n\\t\\t\\t\\t\\t\\t\\toperation.sourcePosition,\\n\\t\\t\\t\\t\\t\\t\\toperation.targetPosition,\\n\\t\\t\\t\\t\\t\\t\\toperation.howMany,\\n\\t\\t\\t\\t\\t\\t\\ttrue\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If we have a transformation result, we substitute transformed range with it in `transformed` array.\\n\\t\\t\\t\\t// Keep in mind that the result is an array and may contain multiple ranges.\\n\\t\\t\\t\\tif ( result ) {\\n\\t\\t\\t\\t\\tranges.splice( i, 1, ...result );\\n\\n\\t\\t\\t\\t\\t// Fix iterator.\\n\\t\\t\\t\\t\\ti = i + result.length - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn ranges;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/undocommand\\n */\\n\\nimport BaseCommand from './basecommand';\\n\\n/**\\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\\n *\\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\\n *\\n * @extends module:undo/basecommand~BaseCommand\\n */\\nexport default class UndoCommand extends BaseCommand {\\n\\t/**\\n\\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\\n\\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\\n\\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\\n\\t *\\n\\t * @fires execute\\n\\t * @fires revert\\n\\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\\n\\t */\\n\\texecute( batch = null ) {\\n\\t\\t// If batch is not given, set `batchIndex` to the last index in command stack.\\n\\t\\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\\n\\n\\t\\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\\n\\n\\t\\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\\n\\t\\t// step between consecutive deltas, or won't do changes to the document before selection is properly restored.\\n\\t\\tthis.editor.model.enqueueChange( () => {\\n\\t\\t\\tconst undoingBatch = this._undo( item.batch );\\n\\n\\t\\t\\tconst deltas = this.editor.model.document.history.getDeltas( item.batch.baseVersion );\\n\\t\\t\\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, deltas );\\n\\n\\t\\t\\tthis.fire( 'revert', item.batch, undoingBatch );\\n\\t\\t} );\\n\\n\\t\\tthis.refresh();\\n\\t}\\n}\\n\\n/**\\n * Fired when execution of the command reverts some batch.\\n *\\n * @event revert\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/redocommand\\n */\\n\\nimport BaseCommand from './basecommand';\\n\\n/**\\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\\n *\\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\\n *\\n * @extends module:undo/basecommand~BaseCommand\\n */\\nexport default class RedoCommand extends BaseCommand {\\n\\t/**\\n\\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\\n\\t * the command's stack, applies the reverted and transformed version on the\\n\\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\\n\\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\\n\\t *\\n\\t * @fires execute\\n\\t */\\n\\texecute() {\\n\\t\\tconst item = this._stack.pop();\\n\\n\\t\\t// All changes have to be done in one `enqueueChange` callback so other listeners will not\\n\\t\\t// step between consecutive deltas, or won't do changes to the document before selection is properly restored.\\n\\t\\tthis.editor.model.enqueueChange( () => {\\n\\t\\t\\tconst lastDelta = item.batch.deltas[ item.batch.deltas.length - 1 ];\\n\\t\\t\\tconst nextBaseVersion = lastDelta.baseVersion + lastDelta.operations.length;\\n\\t\\t\\tconst deltas = this.editor.model.document.history.getDeltas( nextBaseVersion );\\n\\n\\t\\t\\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, deltas );\\n\\t\\t\\tthis._undo( item.batch );\\n\\t\\t} );\\n\\n\\t\\tthis.refresh();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/undoediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport UndoCommand from './undocommand';\\nimport RedoCommand from './redocommand';\\n\\n/**\\n * The undo engine feature.\\n *\\n * Undo brings in possibility to undo and redo changes done in the model by deltas through\\n * the {@link module:engine/model/writer~Writer Writer API}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class UndoEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\\n\\t\\t * Created and registered during the {@link #init feature initialization}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\\n\\t\\t * Created and registered during the {@link #init feature initialization}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Keeps track of which batches were registered in undo.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {WeakSet.<module:engine/model/batch~Batch>}\\n\\t\\t */\\n\\t\\tthis._batchRegistry = new WeakSet();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Create commands.\\n\\t\\tthis._undoCommand = new UndoCommand( editor );\\n\\t\\tthis._redoCommand = new RedoCommand( editor );\\n\\n\\t\\t// Register command to the editor.\\n\\t\\teditor.commands.add( 'undo', this._undoCommand );\\n\\t\\teditor.commands.add( 'redo', this._redoCommand );\\n\\n\\t\\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\\n\\t\\t\\tconst operation = args[ 0 ];\\n\\n\\t\\t\\t// Do not register batch if the operation is not a document operation.\\n\\t\\t\\t// This prevents from creating empty undo steps, where all operations where non-document operations.\\n\\t\\t\\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\\n\\t\\t\\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\\n\\t\\t\\t// Such operations should not be reversed.\\n\\t\\t\\tif ( !operation.isDocumentOperation ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst batch = operation.delta.batch;\\n\\n\\t\\t\\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\\n\\t\\t\\tif ( this._batchRegistry.has( batch ) || batch.type == 'transparent' ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ( this._redoCommand._createdBatches.has( batch ) ) {\\n\\t\\t\\t\\t\\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\\n\\t\\t\\t\\t\\tthis._undoCommand.addBatch( batch );\\n\\t\\t\\t\\t} else if ( !this._undoCommand._createdBatches.has( batch ) ) {\\n\\t\\t\\t\\t\\t// A default batch - these are new changes in the document, not introduced by undo feature.\\n\\t\\t\\t\\t\\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\\n\\t\\t\\t\\t\\tthis._undoCommand.addBatch( batch );\\n\\t\\t\\t\\t\\tthis._redoCommand.clearStack();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add the batch to the registry so it will not be processed again.\\n\\t\\t\\tthis._batchRegistry.add( batch );\\n\\t\\t}, { priority: 'highest' } );\\n\\n\\t\\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\\n\\t\\t\\tthis._redoCommand.addBatch( undoingBatch );\\n\\t\\t} );\\n\\n\\t\\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\\n\\t\\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\\n\\t\\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* global DOMParser */\\n\\n/**\\n * @module ui/icon/iconview\\n */\\n\\nimport View from '../view';\\n\\nimport '../../theme/components/icon/icon.css';\\n\\n/**\\n * The icon view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class IconView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor() {\\n\\t\\tsuper();\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * The SVG source of the icon.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #content\\n\\t\\t */\\n\\t\\tthis.set( 'content', '' );\\n\\n\\t\\t/**\\n\\t\\t * This attribute specifies the boundaries to which the\\n\\t\\t * icon content should stretch.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default '0 0 20 20'\\n\\t\\t * @member {String} #viewBox\\n\\t\\t */\\n\\t\\tthis.set( 'viewBox', '0 0 20 20' );\\n\\n\\t\\t/**\\n\\t\\t * The fill color of the child `path.ck-icon__fill`.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default ''\\n\\t\\t * @member {String} #fillColor\\n\\t\\t */\\n\\t\\tthis.set( 'fillColor', '' );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'svg',\\n\\t\\t\\tns: 'http://www.w3.org/2000/svg',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: 'ck-icon',\\n\\t\\t\\t\\tviewBox: bind.to( 'viewBox' )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tthis._updateXMLContent();\\n\\t\\tthis._colorFillPaths();\\n\\n\\t\\t// This is a hack for lack of innerHTML binding.\\n\\t\\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\\n\\t\\tthis.on( 'change:content', () => {\\n\\t\\t\\tthis._updateXMLContent();\\n\\t\\t\\tthis._colorFillPaths();\\n\\t\\t} );\\n\\n\\t\\tthis.on( 'change:fillColor', () => {\\n\\t\\t\\tthis._colorFillPaths();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Updates the {@link #element} with the value of {@link #content}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_updateXMLContent() {\\n\\t\\tif ( this.content ) {\\n\\t\\t\\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\\n\\t\\t\\tconst svg = parsed.querySelector( 'svg' );\\n\\t\\t\\tconst viewBox = svg.getAttribute( 'viewBox' );\\n\\n\\t\\t\\tif ( viewBox ) {\\n\\t\\t\\t\\tthis.viewBox = viewBox;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.element.innerHTML = '';\\n\\n\\t\\t\\twhile ( svg.childNodes.length > 0 ) {\\n\\t\\t\\t\\tthis.element.appendChild( svg.childNodes[ 0 ] );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_colorFillPaths() {\\n\\t\\tif ( this.fillColor ) {\\n\\t\\t\\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\\n\\t\\t\\t\\tpath.style.fill = this.fillColor;\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/tooltip/tooltipview\\n */\\n\\nimport View from '../view';\\n\\nimport '../../theme/components/tooltip/tooltip.css';\\n\\n/**\\n * The tooltip view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class TooltipView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * The text of the tooltip visible to the user.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #text\\n\\t\\t */\\n\\t\\tthis.set( 'text', '' );\\n\\n\\t\\t/**\\n\\t\\t * The position of the tooltip (south or north).\\n\\t\\t *\\n\\t\\t *\\t\\t+-----------+\\n\\t\\t *\\t\\t|   north   |\\n\\t\\t *\\t\\t+-----------+\\n\\t\\t *\\t\\t      V\\n\\t\\t *\\t\\t  [element]\\n\\t\\t *\\n\\t\\t *\\t\\t  [element]\\n\\t\\t *\\t\\t      ^\\n\\t\\t *\\t\\t+-----------+\\n\\t\\t *\\t\\t|   south   |\\n\\t\\t *\\t\\t+-----------+\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default 's'\\n\\t\\t * @member {'s'|'n'} #position\\n\\t\\t */\\n\\t\\tthis.set( 'position', 's' );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'span',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-tooltip',\\n\\t\\t\\t\\t\\tbind.to( 'position', position => 'ck-tooltip_' + position ),\\n\\t\\t\\t\\t\\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttag: 'span',\\n\\n\\t\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t\\t\\t'ck-tooltip__text'\\n\\t\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\tchildren: [\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\ttext: bind.to( 'text' ),\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/button/buttonview\\n */\\n\\nimport View from '../view';\\nimport IconView from '../icon/iconview';\\nimport TooltipView from '../tooltip/tooltipview';\\n\\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\nimport '../../theme/components/button/button.css';\\n\\n/**\\n * The button view class.\\n *\\n *\\t\\tconst view = new ButtonView();\\n *\\n *\\t\\tview.set( {\\n *\\t\\t\\tlabel: 'A button',\\n *\\t\\t\\tkeystroke: 'Ctrl+B',\\n *\\t\\t\\ttooltip: true,\\n *\\t\\t\\twithText: true\\n *\\t\\t} );\\n *\\n *\\t\\tview.render();\\n *\\n *\\t\\tdocument.body.append( view.element );\\n *\\n * @extends module:ui/view~View\\n * @implements module:ui/button/button~Button\\n */\\nexport default class ButtonView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t// Implement the Button interface.\\n\\t\\tthis.set( 'icon' );\\n\\t\\tthis.set( 'isEnabled', true );\\n\\t\\tthis.set( 'isOn', false );\\n\\t\\tthis.set( 'isVisible', true );\\n\\t\\tthis.set( 'keystroke' );\\n\\t\\tthis.set( 'label' );\\n\\t\\tthis.set( 'tabindex', -1 );\\n\\t\\tthis.set( 'tooltip' );\\n\\t\\tthis.set( 'tooltipPosition', 's' );\\n\\t\\tthis.set( 'type', 'button' );\\n\\t\\tthis.set( 'withText', false );\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views inside of the button {@link #element}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.children = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\\n\\t\\t */\\n\\t\\tthis.tooltipView = this._createTooltipView();\\n\\n\\t\\t/**\\n\\t\\t * Label of the button view. It is configurable using the {@link #label label attribute}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/view~View} #labelView\\n\\t\\t */\\n\\t\\tthis.labelView = this._createLabelView();\\n\\n\\t\\t/**\\n\\t\\t * The icon view of the button. Will be added to {@link #children} when the\\n\\t\\t * {@link #icon icon attribute} is defined.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/icon/iconview~IconView} #iconView\\n\\t\\t */\\n\\t\\tthis.iconView = new IconView();\\n\\n\\t\\tthis.iconView.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: 'ck-button__icon'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * Tooltip of the button bound to the template.\\n\\t\\t *\\n\\t\\t * @see #tooltip\\n\\t\\t * @see #_getTooltipString\\n\\t\\t * @private\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #_tooltipString\\n\\t\\t */\\n\\t\\tthis.bind( '_tooltipString' ).to(\\n\\t\\t\\tthis, 'tooltip',\\n\\t\\t\\tthis, 'label',\\n\\t\\t\\tthis, 'keystroke',\\n\\t\\t\\tthis._getTooltipString.bind( this )\\n\\t\\t);\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'button',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-button',\\n\\t\\t\\t\\t\\tbind.to( 'isEnabled', value => value ? 'ck-enabled' : 'ck-disabled' ),\\n\\t\\t\\t\\t\\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\\n\\t\\t\\t\\t\\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\\n\\t\\t\\t\\t\\tbind.if( 'withText', 'ck-button_with-text' )\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\ttype: bind.to( 'type', value => value ? value : 'button' ),\\n\\t\\t\\t\\ttabindex: bind.to( 'tabindex' )\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.children,\\n\\n\\t\\t\\ton: {\\n\\t\\t\\t\\tmousedown: bind.to( evt => {\\n\\t\\t\\t\\t\\tevt.preventDefault();\\n\\t\\t\\t\\t} ),\\n\\n\\t\\t\\t\\tclick: bind.to( evt => {\\n\\t\\t\\t\\t\\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\\n\\t\\t\\t\\t\\t// Though, shouldn't this condition be moved to the button controller?\\n\\t\\t\\t\\t\\tif ( this.isEnabled ) {\\n\\t\\t\\t\\t\\t\\tthis.fire( 'execute' );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// Prevent the default when button is disabled, to block e.g.\\n\\t\\t\\t\\t\\t\\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\\n\\t\\t\\t\\t\\t\\tevt.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tif ( this.icon ) {\\n\\t\\t\\tthis.iconView.bind( 'content' ).to( this, 'icon' );\\n\\t\\t\\tthis.children.add( this.iconView );\\n\\t\\t}\\n\\n\\t\\tthis.children.add( this.tooltipView );\\n\\t\\tthis.children.add( this.labelView );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #element} of the button.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.element.focus();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\\n\\t * attributes.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\\n\\t */\\n\\t_createTooltipView() {\\n\\t\\tconst tooltipView = new TooltipView();\\n\\n\\t\\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\\n\\t\\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\\n\\n\\t\\treturn tooltipView;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a label view instance and binds it with button attributes.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/view~View}\\n\\t */\\n\\t_createLabelView() {\\n\\t\\tconst labelView = new View();\\n\\n\\t\\tlabelView.setTemplate( {\\n\\t\\t\\ttag: 'span',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [ 'ck-button__label' ]\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttext: this.bindTemplate.to( 'label' )\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\treturn labelView;\\n\\t}\\n\\n\\t/**\\n\\t * Gets the text for the {@link #tooltipView} from the combination of\\n\\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\\n\\t *\\n\\t * @private\\n\\t * @see #tooltip\\n\\t * @see #_tooltipString\\n\\t * @param {Boolean|String|Function} tooltip Button tooltip.\\n\\t * @param {String} label Button label.\\n\\t * @param {String} keystroke Button keystroke.\\n\\t * @returns {String}\\n\\t */\\n\\t_getTooltipString( tooltip, label, keystroke ) {\\n\\t\\tif ( tooltip ) {\\n\\t\\t\\tif ( typeof tooltip == 'string' ) {\\n\\t\\t\\t\\treturn tooltip;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif ( keystroke ) {\\n\\t\\t\\t\\t\\tkeystroke = getEnvKeystrokeText( keystroke );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( tooltip instanceof Function ) {\\n\\t\\t\\t\\t\\treturn tooltip( label, keystroke );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn '';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/undoui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport undoIcon from '../theme/icons/undo.svg';\\nimport redoIcon from '../theme/icons/redo.svg';\\n\\n/**\\n * The undo UI feature. It introduces the Undo and Redo buttons to the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class UndoUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\tthis._addButton( 'undo', t( 'Undo' ), 'CTRL+Z', undoIcon );\\n\\t\\tthis._addButton( 'redo', t( 'Redo' ), 'CTRL+Y', redoIcon );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a button for the specified command.\\n\\t *\\n\\t * @private\\n\\t * @param {String} name Command name.\\n\\t * @param {String} label Button label.\\n\\t * @param {String} keystroke Command keystroke.\\n\\t * @param {String} Icon Source of the icon.\\n\\t */\\n\\t_addButton( name, label, keystroke, Icon ) {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\teditor.ui.componentFactory.add( name, locale => {\\n\\t\\t\\tconst command = editor.commands.get( name );\\n\\t\\t\\tconst view = new ButtonView( locale );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tlabel,\\n\\t\\t\\t\\ticon: Icon,\\n\\t\\t\\t\\tkeystroke,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\\n\\n\\t\\t\\tthis.listenTo( view, 'execute', () => editor.execute( name ) );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module undo/undo\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport UndoEditing from './undoediting';\\nimport UndoUI from './undoui';\\n\\n/**\\n * The undo feature.\\n *\\n * It loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\\n *\\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\\n *\\n * Whenever a {@link module:engine/model/delta/delta~Delta delta} is applied to the\\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\\n * The {@link module:engine/model/batch~Batch batch} that owns that delta is also saved, in\\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\\n * delta was applied. A batch is saved instead of the delta because changes are undone batch-by-batch, not delta-by-delta\\n * and a batch is seen as one undo step.\\n *\\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\\n *\\n *\\t\\t  History                           Undo stack\\n *\\t\\t===========             ==================================\\n *\\t\\t[delta A1]                          [batch A]\\n *\\t\\t[delta B1]                          [batch B]\\n *\\t\\t[delta B2]                          [batch C]\\n *\\t\\t[delta C1]\\n *\\t\\t[delta C2]\\n *\\t\\t[delta B3]\\n *\\t\\t[delta C3]\\n *\\n * Where deltas starting with the same letter are from same batch.\\n *\\n * Undoing a batch means that a set of deltas which will reverse the effects of that batch needs to be generated. For example, if a batch\\n * added several letters, undoing the batch should remove them. It is important to apply undoing deltas in the reversed order,\\n * so if a batch has delta `X`, `Y`, `Z`, reversed deltas `Zr`, `Yr` and `Xr` need to be applied. Otherwise reversed delta\\n * `Xr` would operate on a wrong document state, because delta `X` does not know that deltas `Y` and `Z` happened.\\n *\\n * After deltas from an undone batch got {@link module:engine/model/delta/delta~Delta#getReversed reversed},\\n * one needs to make sure if they are ready to be applied. In the scenario above, delta `C3` is the last delta and `C3r`\\n * bases on up-to-date document state, so it can be applied to the document.\\n *\\n *\\t\\t  History                           Undo stack\\n *\\t\\t=============             ==================================\\n *\\t\\t[ delta A1  ]                      [  batch A  ]\\n *\\t\\t[ delta B1  ]                      [  batch B  ]\\n *\\t\\t[ delta B2  ]             [   processing undoing batch C   ]\\n *\\t\\t[ delta C1  ]\\n *\\t\\t[ delta C2  ]\\n *\\t\\t[ delta B3  ]\\n *\\t\\t[ delta C3  ]\\n *\\t\\t[ delta C3r ]\\n *\\n * Next is delta `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\\n * transformed by deltas from history that happened after it, so it \\\"knows\\\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\\n * where `*` means \\\"transformed by\\\". Rest of deltas from that batch are processed in the same fashion.\\n *\\n *\\t\\t  History                           Undo stack                                     Redo stack\\n *\\t\\t=============             ==================================             ==================================\\n *\\t\\t[ delta A1  ]                      [  batch A  ]                                  [ batch Cr ]\\n *\\t\\t[ delta B1  ]                      [  batch B  ]\\n *\\t\\t[ delta B2  ]\\n *\\t\\t[ delta C1  ]\\n *\\t\\t[ delta C2  ]\\n *\\t\\t[ delta B3  ]\\n *\\t\\t[ delta C3  ]\\n *\\t\\t[ delta C3r ]\\n *\\t\\t[ delta C2' ]\\n *\\t\\t[ delta C1' ]\\n *\\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\\n * The same algorithm applies: deltas from a batch (i.e. `A1`) are reversed and then transformed by deltas stored in history.\\n *\\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Deltas from\\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\\n *\\n *\\t\\t  History                           Undo stack                                     Redo stack\\n *\\t\\t=============             ==================================             ==================================\\n *\\t\\t[ delta A1  ]                      [  batch A  ]\\n *\\t\\t[ delta B1  ]                      [  batch B  ]\\n *\\t\\t[ delta B2  ]                      [ batch Crr ]\\n *\\t\\t[ delta C1  ]\\n *\\t\\t[ delta C2  ]\\n *\\t\\t[ delta B3  ]\\n *\\t\\t[ delta C3  ]\\n *\\t\\t[ delta C3r ]\\n *\\t\\t[ delta C2' ]\\n *\\t\\t[ delta C1' ]\\n *\\t\\t[ delta C1'r]\\n *\\t\\t[ delta C2'r]\\n *\\t\\t[ delta C3rr]\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Undo extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ UndoEditing, UndoUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Undo';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module upload/filereader\\n */\\n\\n/* globals window */\\n\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * FileReader class - wrapper over native FileReader.\\n */\\nexport default class FileReader {\\n\\t/**\\n\\t * Creates an instance of the FileReader.\\n\\t */\\n\\tconstructor() {\\n\\t\\tconst reader = new window.FileReader();\\n\\n\\t\\t/**\\n\\t\\t * Instance of native FileReader.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {FileReader} #_reader\\n\\t\\t */\\n\\t\\tthis._reader = reader;\\n\\n\\t\\t/**\\n\\t\\t * Number of bytes loaded.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number} #loaded\\n\\t\\t */\\n\\t\\tthis.set( 'loaded', 0 );\\n\\n\\t\\treader.onprogress = evt => {\\n\\t\\t\\tthis.loaded = evt.loaded;\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Returns error that occurred during file reading.\\n\\t *\\n\\t * @returns {Error}\\n\\t */\\n\\tget error() {\\n\\t\\treturn this._reader.error;\\n\\t}\\n\\n\\t/**\\n\\t * Reads provided file.\\n\\t *\\n\\t * @param {File} file Native File object.\\n\\t * @returns {Promise} Returns a promise that will resolve with file's contents. Promise can be rejected in case of\\n\\t * error or when reading process is aborted.\\n\\t */\\n\\tread( file ) {\\n\\t\\tconst reader = this._reader;\\n\\t\\tthis.total = file.size;\\n\\n\\t\\treturn new Promise( ( resolve, reject ) => {\\n\\t\\t\\treader.onload = () => {\\n\\t\\t\\t\\tresolve( reader.result );\\n\\t\\t\\t};\\n\\n\\t\\t\\treader.onerror = () => {\\n\\t\\t\\t\\treject( 'error' );\\n\\t\\t\\t};\\n\\n\\t\\t\\treader.onabort = () => {\\n\\t\\t\\t\\treject( 'aborted' );\\n\\t\\t\\t};\\n\\n\\t\\t\\tthis._reader.readAsDataURL( file );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Aborts file reader.\\n\\t */\\n\\tabort() {\\n\\t\\tthis._reader.abort();\\n\\t}\\n}\\n\\nmix( FileReader, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module upload/filerepository\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\nimport FileReader from './filereader.js';\\n\\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\\n\\n/**\\n * File repository plugin. A central point for managing file upload.\\n *\\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one\\n * (which boils down to setting the {@link ~FileRepository#createUploadAdapter} factory function – see\\n * {@link module:upload/filerepository~UploadAdapter `UploadAdapter` interface} documentation).\\n *\\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FileRepository extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'FileRepository';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\t/**\\n\\t\\t * Collection of loaders associated with this repository.\\n\\t\\t *\\n\\t\\t * @member {module:utils/collection~Collection} #loaders\\n\\t\\t */\\n\\t\\tthis.loaders = new Collection();\\n\\n\\t\\t/**\\n\\t\\t * A factory function which should be defined before using `FileRepository`.\\n\\t\\t *\\n\\t\\t * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\\n\\t\\t * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\\n\\t\\t * will be passed to that function.\\n\\t\\t *\\n\\t\\t * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\\n\\t\\t *\\n\\t\\t * @member {Function} #createUploadAdapter\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Number of bytes uploaded.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number} #uploaded\\n\\t\\t */\\n\\t\\tthis.set( 'uploaded', 0 );\\n\\n\\t\\t/**\\n\\t\\t * Number of total bytes to upload.\\n\\t\\t *\\n\\t\\t * It might be different than the file size because of headers and additional data.\\n\\t\\t * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\\n\\t\\t * the progress.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number|null} #uploadTotal\\n\\t\\t */\\n\\t\\tthis.set( 'uploadTotal', null );\\n\\n\\t\\t/**\\n\\t\\t * Upload progress in percents.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number} #uploadedPercent\\n\\t\\t */\\n\\t\\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\\n\\t\\t\\treturn total ? ( uploaded / total * 100 ) : 0;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the loader associated with specified file.\\n\\t *\\n\\t * To get loader by id use `fileRepository.loaders.get( id )`.\\n\\t *\\n\\t * @param {File} file Native file handle.\\n\\t * @returns {module:upload/filerepository~FileLoader|null}\\n\\t */\\n\\tgetLoader( file ) {\\n\\t\\tfor ( const loader of this.loaders ) {\\n\\t\\t\\tif ( loader.file == file ) {\\n\\t\\t\\t\\treturn loader;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a loader instance for the given file.\\n\\t *\\n\\t * Requires {@link #createUploadAdapter} factory to be defined.\\n\\t *\\n\\t * @param {File} file Native File object.\\n\\t * @returns {module:upload/filerepository~FileLoader|null}\\n\\t */\\n\\tcreateLoader( file ) {\\n\\t\\tif ( !this.createUploadAdapter ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * You need to enable an upload adapter in order to be able to upload files.\\n\\t\\t\\t *\\n\\t\\t\\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\\n\\t\\t\\t * without {@link #createUploadAdapter definining an upload adapter}.\\n\\t\\t\\t *\\n\\t\\t\\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\\n\\t\\t\\t * it means that you did not configure any of the upload adapters available by default in those builds.\\n\\t\\t\\t * See:\\n\\t\\t\\t *\\n\\t\\t\\t * * {@link module:core/editor/editorconfig~EditorConfig#cloudServices `config.cloudServices`} for\\n\\t\\t\\t * Easy Image with Cloud Services integration,\\n\\t\\t\\t * * {@link module:core/editor/editorconfig~EditorConfig#ckfinder `config.ckfinder`} for CKFinder\\n\\t\\t\\t * file upload integration.\\n\\t\\t\\t *\\n\\t\\t\\t * **If you see this warning when using a custom build** there is a chance that you enabled\\n\\t\\t\\t * a feature like {@link module:image/imageupload~ImageUpload},\\n\\t\\t\\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\\n\\t\\t\\t * You can choose one of the existing upload adapters:\\n\\t\\t\\t *\\n\\t\\t\\t * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}\\n\\t\\t\\t * (remember to {@link module:core/editor/editorconfig~EditorConfig#cloudServices configure it})\\n\\t\\t\\t * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}\\n\\t\\t\\t * (remember to {@link module:core/editor/editorconfig~EditorConfig#ckfinder configure it})\\n\\t\\t\\t *\\n\\t\\t\\t * You can also implement your own upload adapter (in which case, please refer\\n\\t\\t\\t * to the {@link module:upload/filerepository~UploadAdapter `UploadAdapter` interface} documentation).\\n\\t\\t\\t *\\n\\t\\t\\t * @error filerepository-no-upload-adapter\\n\\t\\t\\t */\\n\\t\\t\\tlog.error( 'filerepository-no-upload-adapter: Upload adapter is not defined.' );\\n\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tconst loader = new FileLoader( file );\\n\\t\\tloader._adapter = this.createUploadAdapter( loader );\\n\\n\\t\\tthis.loaders.add( loader );\\n\\n\\t\\tloader.on( 'change:uploaded', () => {\\n\\t\\t\\tlet aggregatedUploaded = 0;\\n\\n\\t\\t\\tfor ( const loader of this.loaders ) {\\n\\t\\t\\t\\taggregatedUploaded += loader.uploaded;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.uploaded = aggregatedUploaded;\\n\\t\\t} );\\n\\n\\t\\tloader.on( 'change:uploadTotal', () => {\\n\\t\\t\\tlet aggregatedTotal = 0;\\n\\n\\t\\t\\tfor ( const loader of this.loaders ) {\\n\\t\\t\\t\\tif ( loader.uploadTotal ) {\\n\\t\\t\\t\\t\\taggregatedTotal += loader.uploadTotal;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.uploadTotal = aggregatedTotal;\\n\\t\\t} );\\n\\n\\t\\treturn loader;\\n\\t}\\n\\n\\t/**\\n\\t * Destroys the given loader.\\n\\t *\\n\\t * @param {File|module:upload/filerepository~FileLoader} fileOrLoader File associated with that loader or loader\\n\\t * itself.\\n\\t */\\n\\tdestroyLoader( fileOrLoader ) {\\n\\t\\tconst loader = fileOrLoader instanceof FileLoader ? fileOrLoader : this.getLoader( fileOrLoader );\\n\\n\\t\\tloader._destroy();\\n\\n\\t\\tthis.loaders.remove( loader );\\n\\t}\\n}\\n\\nmix( FileRepository, ObservableMixin );\\n\\n/**\\n * File loader class.\\n * It is used to control the process of file reading and uploading using specified adapter.\\n */\\nclass FileLoader {\\n\\t/**\\n\\t * Creates a new instance of `FileLoader`.\\n\\t *\\n\\t * @param {File} file A native file instance.\\n\\t * @param {module:upload/filerepository~UploadAdapter} adapter\\n\\t */\\n\\tconstructor( file, adapter ) {\\n\\t\\t/**\\n\\t\\t * Unique id of FileLoader instance.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis.id = uid();\\n\\n\\t\\t/**\\n\\t\\t * A `File` instance associated with this file loader.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {File}\\n\\t\\t */\\n\\t\\tthis.file = file;\\n\\n\\t\\t/**\\n\\t\\t * Adapter instance associated with this file loader.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:upload/filerepository~UploadAdapter}\\n\\t\\t */\\n\\t\\tthis._adapter = adapter;\\n\\n\\t\\t/**\\n\\t\\t * FileReader used by FileLoader.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:upload/filereader~FileReader}\\n\\t\\t */\\n\\t\\tthis._reader = new FileReader();\\n\\n\\t\\t/**\\n\\t\\t * Current status of FileLoader. It can be one of the following:\\n\\t\\t *\\n\\t\\t * * 'idle',\\n\\t\\t * * 'reading',\\n\\t\\t * * 'uploading',\\n\\t\\t * * 'aborted',\\n\\t\\t * * 'error'.\\n\\t\\t *\\n\\t\\t * When reading status can change in a following way:\\n\\t\\t *\\n\\t\\t * `idle` -> `reading` -> `idle`\\n\\t\\t * `idle` -> `reading -> `aborted`\\n\\t\\t * `idle` -> `reading -> `error`\\n\\t\\t *\\n\\t\\t * When uploading status can change in a following way:\\n\\t\\t *\\n\\t\\t * `idle` -> `uploading` -> `idle`\\n\\t\\t * `idle` -> `uploading` -> `aborted`\\n\\t\\t * `idle` -> `uploading` -> `error`\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {String} #status\\n\\t\\t */\\n\\t\\tthis.set( 'status', 'idle' );\\n\\n\\t\\t/**\\n\\t\\t * Number of bytes uploaded.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number} #uploaded\\n\\t\\t */\\n\\t\\tthis.set( 'uploaded', 0 );\\n\\n\\t\\t/**\\n\\t\\t * Number of total bytes to upload.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number|null} #uploadTotal\\n\\t\\t */\\n\\t\\tthis.set( 'uploadTotal', null );\\n\\n\\t\\t/**\\n\\t\\t * Upload progress in percents.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Number} #uploadedPercent\\n\\t\\t */\\n\\t\\tthis.bind( 'uploadedPercent' ).to( this, 'uploaded', this, 'uploadTotal', ( uploaded, total ) => {\\n\\t\\t\\treturn total ? ( uploaded / total * 100 ) : 0;\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * Response of the upload.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @observable\\n\\t\\t * @member {Object|null} #uploadResponse\\n\\t\\t */\\n\\t\\tthis.set( 'uploadResponse', null );\\n\\t}\\n\\n\\t/**\\n\\t * Reads file using {@link module:upload/filereader~FileReader}.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\\n\\t * is different than `idle`.\\n\\t *\\n\\t * Example usage:\\n\\t *\\n\\t *\\tfileLoader.read()\\n\\t *\\t\\t.then( data => { ... } )\\n\\t *\\t\\t.catch( err => {\\n\\t *\\t\\t\\tif ( err === 'aborted' ) {\\n\\t *\\t\\t\\t\\tconsole.log( 'Reading aborted.' );\\n\\t *\\t\\t\\t} else {\\n\\t *\\t\\t\\t\\tconsole.log( 'Reading error.', err );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @returns {Promise} Returns promise that will be resolved with read data. Promise will be rejected if error\\n\\t * occurs or if read process is aborted.\\n\\t */\\n\\tread() {\\n\\t\\tif ( this.status != 'idle' ) {\\n\\t\\t\\tthrow new CKEditorError( 'filerepository-read-wrong-status: You cannot call read if the status is different than idle.' );\\n\\t\\t}\\n\\n\\t\\tthis.status = 'reading';\\n\\n\\t\\treturn this._reader.read( this.file )\\n\\t\\t\\t.then( data => {\\n\\t\\t\\t\\tthis.status = 'idle';\\n\\n\\t\\t\\t\\treturn data;\\n\\t\\t\\t} )\\n\\t\\t\\t.catch( err => {\\n\\t\\t\\t\\tif ( err === 'aborted' ) {\\n\\t\\t\\t\\t\\tthis.status = 'aborted';\\n\\t\\t\\t\\t\\tthrow 'aborted';\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.status = 'error';\\n\\t\\t\\t\\tthrow this._reader.error;\\n\\t\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\\n\\t *\\n\\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\\n\\t * is different than `idle`.\\n\\t * Example usage:\\n\\t *\\n\\t *\\tfileLoader.upload()\\n\\t *\\t\\t.then( data => { ... } )\\n\\t *\\t\\t.catch( e => {\\n\\t *\\t\\t\\tif ( e === 'aborted' ) {\\n\\t *\\t\\t\\t\\tconsole.log( 'Uploading aborted.' );\\n\\t *\\t\\t\\t} else {\\n\\t *\\t\\t\\t\\tconsole.log( 'Uploading error.', e );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t *\\n\\t * @returns {Promise} Returns promise that will be resolved with response data. Promise will be rejected if error\\n\\t * occurs or if read process is aborted.\\n\\t */\\n\\tupload() {\\n\\t\\tif ( this.status != 'idle' ) {\\n\\t\\t\\tthrow new CKEditorError( 'filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.' );\\n\\t\\t}\\n\\n\\t\\tthis.status = 'uploading';\\n\\n\\t\\treturn this._adapter.upload()\\n\\t\\t\\t.then( data => {\\n\\t\\t\\t\\tthis.uploadResponse = data;\\n\\t\\t\\t\\tthis.status = 'idle';\\n\\n\\t\\t\\t\\treturn data;\\n\\t\\t\\t} )\\n\\t\\t\\t.catch( err => {\\n\\t\\t\\t\\tif ( this.status === 'aborted' ) {\\n\\t\\t\\t\\t\\tthrow 'aborted';\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.status = 'error';\\n\\t\\t\\t\\tthrow err;\\n\\t\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Aborts loading process.\\n\\t */\\n\\tabort() {\\n\\t\\tconst status = this.status;\\n\\t\\tthis.status = 'aborted';\\n\\n\\t\\tif ( status == 'reading' ) {\\n\\t\\t\\tthis._reader.abort();\\n\\t\\t}\\n\\n\\t\\tif ( status == 'uploading' && this._adapter.abort ) {\\n\\t\\t\\tthis._adapter.abort();\\n\\t\\t}\\n\\n\\t\\tthis._destroy();\\n\\t}\\n\\n\\t/**\\n\\t * Performs cleanup.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_destroy() {\\n\\t\\tthis._reader = undefined;\\n\\t\\tthis._adapter = undefined;\\n\\t\\tthis.data = undefined;\\n\\t\\tthis.uploadResponse = undefined;\\n\\t\\tthis.file = undefined;\\n\\t}\\n}\\n\\nmix( FileLoader, ObservableMixin );\\n\\n/**\\n * Upload adapter interface used by FileRepository to handle file upload. Upload adapter is a bridge between the editor and server that\\n * handles file uploads. It should contain logic necessary to initiate upload process and monitor its progress.\\n *\\n * It should implement two methods:\\n *\\n * * {@link module:upload/filerepository~UploadAdapter#upload `upload()`},\\n * * {@link module:upload/filerepository~UploadAdapter#abort `abort()`}.\\n *\\n * Example upload adapter implementation:\\n *\\n *\\t\\tclass UploadAdapter {\\n *\\t\\t\\tconstructor( loader ) {\\n *\\t\\t\\t\\t// Save Loader instance to update upload progress.\\n *\\t\\t\\t\\tthis.loader = loader;\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\tupload() {\\n *\\t\\t\\t\\t// Update loader's progress.\\n *\\t\\t\\t\\tserver.onUploadProgress( data => {\\n *\\t\\t\\t\\t\\tloader.uploadTotal = data.total;\\n *\\t\\t\\t\\t\\tloader.uploaded = data.uploaded;\\n *\\t\\t\\t\\t} ):\\n *\\n *\\t\\t\\t\\t// Return promise that will be resolved when file is uploaded.\\n *\\t\\t\\t\\treturn server.upload( loader.file );\\n *\\t\\t\\t}\\n *\\n *\\t\\t\\tabort() {\\n *\\t\\t\\t\\t// Reject promise returned from upload() method.\\n *\\t\\t\\t\\tserver.abortUpload();\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n * Then upload adapter can be set to be used by {@link module:upload/filerepository~FileRepository FileRepository}:\\n *\\n *\\t\\teditor.plugins.get( 'FileRepository' ).createUploadAdapter = function( loader ) {\\n *\\t\\t\\treturn new UploadAdapter( loader );\\n *\\t\\t};\\n *\\n * @interface UploadAdapter\\n */\\n\\n/**\\n * Executes the upload process.\\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\\n * resolved with an object containing information about uploaded file:\\n *\\n *\\t\\t{\\n *\\t\\t\\tdefault: 'http://server/default-size.image.png'\\n *\\t\\t}\\n *\\n * Additionally, other image sizes can be provided:\\n *\\n *\\t\\t{\\n *\\t\\t\\tdefault: 'http://server/default-size.image.png',\\n *\\t\\t\\t'160': 'http://server/size-160.image.png',\\n *\\t\\t\\t'500': 'http://server/size-500.image.png',\\n *\\t\\t\\t'1000': 'http://server/size-1000.image.png',\\n *\\t\\t\\t'1052': 'http://server/default-size.image.png'\\n *\\t\\t}\\n *\\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\\n * correctly set `width` attribute of the image. See this discussion:\\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\\n *\\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\\n *\\n * @method module:upload/filerepository~UploadAdapter#upload\\n * @returns {Promise} Promise that should be resolved when data is uploaded.\\n */\\n\\n/**\\n * Aborts the upload process.\\n * After aborting it should reject promise returned from {@link #upload upload()}.\\n *\\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\\n *\\n * @method module:upload/filerepository~UploadAdapter#abort\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals window, document */\\n\\n/**\\n * @module adapter-ckfinder/utils\\n */\\n\\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\\nconst TOKEN_LENGTH = 40;\\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\\n\\n/**\\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\\n * between the web browser and the CKFinder server.\\n *\\n * @returns {String}\\n */\\nexport function getCsrfToken() {\\n\\tlet token = getCookie( TOKEN_COOKIE_NAME );\\n\\n\\tif ( !token || token.length != TOKEN_LENGTH ) {\\n\\t\\ttoken = generateToken( TOKEN_LENGTH );\\n\\t\\tsetCookie( TOKEN_COOKIE_NAME, token );\\n\\t}\\n\\n\\treturn token;\\n}\\n\\n/**\\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\\n *\\n * @param {String} name\\n * @returns {String|null}\\n */\\nexport function getCookie( name ) {\\n\\tname = name.toLowerCase();\\n\\tconst parts = document.cookie.split( ';' );\\n\\n\\tfor ( const part of parts ) {\\n\\t\\tconst pair = part.split( '=' );\\n\\t\\tconst key = decodeURIComponent( pair[ 0 ].trim().toLowerCase() );\\n\\n\\t\\tif ( key === name ) {\\n\\t\\t\\treturn decodeURIComponent( pair[ 1 ] );\\n\\t\\t}\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/**\\n * Sets the value of the cookie with a given name.\\n *\\n * @param {String} name\\n * @param {String} value\\n */\\nexport function setCookie( name, value ) {\\n\\tdocument.cookie = encodeURIComponent( name ) + '=' + encodeURIComponent( value ) + ';path=/';\\n}\\n\\n// Generates the CSRF token with the given length.\\n//\\n// @private\\n// @param {Number} length\\n// @returns {string}\\nfunction generateToken( length ) {\\n\\tlet result = '';\\n\\tconst randValues = new Uint8Array( length );\\n\\n\\twindow.crypto.getRandomValues( randValues );\\n\\n\\tfor ( let j = 0; j < randValues.length; j++ ) {\\n\\t\\tconst character = tokenCharset.charAt( randValues[ j ] % tokenCharset.length );\\n\\t\\tresult += Math.random() > 0.5 ? character.toUpperCase() : character;\\n\\t}\\n\\n\\treturn result;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* globals XMLHttpRequest, FormData */\\n\\n/**\\n * @module adapter-ckfinder/uploadadapter\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\\nimport { getCsrfToken } from './utils';\\n\\n/**\\n * A plugin that enables CKFinder uploads in CKEditor 5.\\n *\\n * Configure the upload URL in\\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig#uploadUrl `ckfinder.uploadUrl`}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class CKFinderUploadAdapter extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FileRepository ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'CKFinderUploadAdapter';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst url = this.editor.config.get( 'ckfinder.uploadUrl' );\\n\\n\\t\\tif ( !url ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Register CKFinderAdapter\\n\\t\\tthis.editor.plugins.get( FileRepository ).createUploadAdapter = loader => new UploadAdapter( loader, url, this.editor.t );\\n\\t}\\n}\\n\\n/**\\n * Upload adapter for CKFinder.\\n *\\n * @private\\n * @implements module:upload/filerepository~UploadAdapter\\n */\\nclass UploadAdapter {\\n\\t/**\\n\\t * Creates a new adapter instance.\\n\\t *\\n\\t * @param {module:upload/filerepository~FileLoader} loader\\n\\t * @param {String} url\\n\\t * @param {module:utils/locale~Locale#t} t\\n\\t */\\n\\tconstructor( loader, url, t ) {\\n\\t\\t/**\\n\\t\\t * FileLoader instance to use during the upload.\\n\\t\\t *\\n\\t\\t * @member {module:upload/filerepository~FileLoader} #loader\\n\\t\\t */\\n\\t\\tthis.loader = loader;\\n\\n\\t\\t/**\\n\\t\\t * Upload URL.\\n\\t\\t *\\n\\t\\t * @member {String} #url\\n\\t\\t */\\n\\t\\tthis.url = url;\\n\\n\\t\\t/**\\n\\t\\t * Locale translation method.\\n\\t\\t *\\n\\t\\t * @member {module:utils/locale~Locale#t} #t\\n\\t\\t */\\n\\t\\tthis.t = t;\\n\\t}\\n\\n\\t/**\\n\\t * Starts the upload process.\\n\\t *\\n\\t * @see module:upload/filerepository~UploadAdapter#upload\\n\\t * @returns {Promise}\\n\\t */\\n\\tupload() {\\n\\t\\treturn new Promise( ( resolve, reject ) => {\\n\\t\\t\\tthis._initRequest();\\n\\t\\t\\tthis._initListeners( resolve, reject );\\n\\t\\t\\tthis._sendRequest();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Aborts the upload process.\\n\\t *\\n\\t * @see module:upload/filerepository~UploadAdapter#abort\\n\\t * @returns {Promise}\\n\\t */\\n\\tabort() {\\n\\t\\tif ( this.xhr ) {\\n\\t\\t\\tthis.xhr.abort();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Initializes the XMLHttpRequest object.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_initRequest() {\\n\\t\\tconst xhr = this.xhr = new XMLHttpRequest();\\n\\n\\t\\txhr.open( 'POST', this.url, true );\\n\\t\\txhr.responseType = 'json';\\n\\t}\\n\\n\\t/**\\n\\t * Initializes XMLHttpRequest listeners.\\n\\t *\\n\\t * @private\\n\\t * @param {Function} resolve Callback function to be called when the request is successful.\\n\\t * @param {Function} reject Callback function to be called when the request cannot be completed.\\n\\t */\\n\\t_initListeners( resolve, reject ) {\\n\\t\\tconst xhr = this.xhr;\\n\\t\\tconst loader = this.loader;\\n\\t\\tconst t = this.t;\\n\\t\\tconst genericError = t( 'Cannot upload file:' ) + ` ${ loader.file.name }.`;\\n\\n\\t\\txhr.addEventListener( 'error', () => reject( genericError ) );\\n\\t\\txhr.addEventListener( 'abort', () => reject() );\\n\\t\\txhr.addEventListener( 'load', () => {\\n\\t\\t\\tconst response = xhr.response;\\n\\n\\t\\t\\tif ( !response || !response.uploaded ) {\\n\\t\\t\\t\\treturn reject( response && response.error && response.error.message ? response.error.message : genericError );\\n\\t\\t\\t}\\n\\n\\t\\t\\tresolve( {\\n\\t\\t\\t\\tdefault: response.url\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\n\\t\\t// Upload progress when it's supported.\\n\\t\\t/* istanbul ignore else */\\n\\t\\tif ( xhr.upload ) {\\n\\t\\t\\txhr.upload.addEventListener( 'progress', evt => {\\n\\t\\t\\t\\tif ( evt.lengthComputable ) {\\n\\t\\t\\t\\t\\tloader.uploadTotal = evt.total;\\n\\t\\t\\t\\t\\tloader.uploaded = evt.loaded;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Prepares the data and sends the request.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_sendRequest() {\\n\\t\\t// Prepare form data.\\n\\t\\tconst data = new FormData();\\n\\t\\tdata.append( 'upload', this.loader.file );\\n\\t\\tdata.append( 'ckCsrfToken', getCsrfToken() );\\n\\n\\t\\t// Send request.\\n\\t\\tthis.xhr.send( data );\\n\\t}\\n}\\n\\n/**\\n * The configuration of the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter CKFinder upload adapter}.\\n *\\n * Read more in {@link module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig}.\\n *\\n * @member {module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig} module:core/editor/editorconfig~EditorConfig#ckfinder\\n */\\n\\n/**\\n * The configuration of the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter CKFinder upload adapter}.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( editorElement, {\\n * \\t\\t\\t\\tckfinder: {\\n *\\t\\t\\t\\t\\tuploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json'\\n * \\t\\t\\t\\t}\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface CKFinderAdapterConfig\\n */\\n\\n/**\\n * The URL to which files should be uploaded.\\n *\\n * @member {String} module:adapter-ckfinder/uploadadapter~CKFinderAdapterConfig#uploadUrl\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module autoformat/blockautoformatediting\\n */\\n\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\n\\n/**\\n * The block autoformatting engine. It allows to format various block patterns. For example,\\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\\n *\\n * The autoformatting operation is integrated with the undo manager,\\n * so the autoformatting step can be undone if the user's intention was not to format the text.\\n *\\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\\n * (lists, headings, bold and italic).\\n */\\nexport default class BlockAutoformatEditing {\\n\\t/**\\n\\t * Creates a listener triggered on `change` event in the document.\\n\\t * Calls the callback when inserted text matches the regular expression or the command name\\n\\t * if provided instead of the callback.\\n\\t *\\n\\t * Examples of usage:\\n\\t *\\n\\t * To convert a paragraph to heading 1 when `- ` is typed, using just the commmand name:\\n\\t *\\n\\t *\\t\\tnew BlockAutoformatEditing( editor, /^\\\\- $/, 'heading1' );\\n\\t *\\n\\t * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\\n\\t *\\n\\t *\\t\\tnew BlockAutoformatEditing( editor, /^\\\\- $/, ( context ) => {\\n\\t *\\t\\t\\tconst { match } = context;\\n\\t *\\t\\t\\tconst headingLevel = match[ 1 ].length;\\n\\t *\\n\\t *\\t\\t\\teditor.execute( 'heading', {\\n\\t *\\t\\t\\t\\tformatId: `heading${ headingLevel }`\\n\\t *\\t\\t\\t} );\\n\\t * \\t\\t} );\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {RegExp} pattern The regular expression to execute on just inserted text.\\n\\t * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\\n\\t * In case of providing the callback, it receives the following parameter:\\n\\t * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\\n\\t */\\n\\tconstructor( editor, pattern, callbackOrCommand ) {\\n\\t\\tlet callback;\\n\\n\\t\\tif ( typeof callbackOrCommand == 'function' ) {\\n\\t\\t\\tcallback = callbackOrCommand;\\n\\t\\t} else {\\n\\t\\t\\t// We assume that the actual command name was provided.\\n\\t\\t\\tconst command = callbackOrCommand;\\n\\n\\t\\t\\tcallback = () => {\\n\\t\\t\\t\\teditor.execute( command );\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\teditor.model.document.on( 'change', () => {\\n\\t\\t\\tconst changes = Array.from( editor.model.document.differ.getChanges() );\\n\\t\\t\\tconst entry = changes[ 0 ];\\n\\n\\t\\t\\t// Typing is represented by only a single change.\\n\\t\\t\\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tconst item = entry.position.textNode || entry.position.nodeAfter;\\n\\n\\t\\t\\tif ( !item.parent.is( 'paragraph' ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst match = pattern.exec( item.data );\\n\\n\\t\\t\\tif ( !match ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\\n\\t\\t\\teditor.model.enqueueChange( writer => {\\n\\t\\t\\t\\t// Matched range.\\n\\t\\t\\t\\tconst range = Range.createFromParentsAndOffsets( item.parent, 0, item.parent, match[ 0 ].length );\\n\\n\\t\\t\\t\\t// Remove matched text.\\n\\t\\t\\t\\twriter.remove( range );\\n\\n\\t\\t\\t\\tcallback( { match } );\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module autoformat/inlineautoformatediting\\n */\\n\\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\\n\\n/**\\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\\n * it can be configured to make \\\"foo\\\" bold when typed `**foo**` (the `**` markers will be removed).\\n *\\n * The autoformatting operation is integrated with the undo manager,\\n * so the autoformatting step can be undone if the user's intention was not to format the text.\\n *\\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\\n * (lists, headings, bold and italic).\\n */\\nexport default class InlineAutoformatEditing {\\n\\t/**\\n\\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\\n\\t *\\n\\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\\n\\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\\n\\t * and executes the provided action if the text matches given criteria (regular expression or callback).\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\\n\\t * Provided regular expression *must* have three capture groups. The first and the third capture group\\n\\t * should match opening and closing delimiters. The second capture group should match the text to format.\\n\\t *\\n\\t *\\t\\t// Matches the `**bold text**` pattern.\\n\\t *\\t\\t// There are three capturing groups:\\n\\t *\\t\\t// - The first to match the starting `**` delimiter.\\n\\t *\\t\\t// - The second to match the text to format.\\n\\t *\\t\\t// - The third to match the ending `**` delimiter.\\n\\t *\\t\\tnew InlineAutoformatEditing( editor, /(\\\\*\\\\*)([^\\\\*]+?)(\\\\*\\\\*)$/g, 'bold' );\\n\\t *\\n\\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\\n\\t * The function should return proper \\\"ranges\\\" to delete and format.\\n\\t *\\n\\t *\\t\\t{\\n\\t *\\t\\t\\tremove: [\\n\\t *\\t\\t\\t\\t[ 0, 1 ],\\t// Remove the first letter from the given text.\\n\\t *\\t\\t\\t\\t[ 5, 6 ]\\t// Remove the 6th letter from the given text.\\n\\t *\\t\\t\\t],\\n\\t *\\t\\t\\tformat: [\\n\\t *\\t\\t\\t\\t[ 1, 5 ]\\t// Format all letters from 2nd to 5th.\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t}\\n\\t *\\n\\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\\n\\t * formatting.\\n\\t *\\n\\t *\\t\\t// Use attribute name:\\n\\t *\\t\\tnew InlineAutoformatEditing( editor, /(\\\\*\\\\*)([^\\\\*]+?)(\\\\*\\\\*)$/g, 'bold' );\\n\\t *\\n\\t *\\t\\t// Use formatting callback:\\n\\t *\\t\\tnew InlineAutoformatEditing( editor, /(\\\\*\\\\*)([^\\\\*]+?)(\\\\*\\\\*)$/g, ( writer, validRanges ) => {\\n\\t *\\t\\t\\tfor ( let range of validRanges ) {\\n\\t *\\t\\t\\t\\twriter.setAttribute( command, true, range );\\n\\t *\\t\\t\\t}\\n\\t *\\t\\t} );\\n\\t */\\n\\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\\n\\t\\tlet regExp;\\n\\t\\tlet attributeKey;\\n\\t\\tlet testCallback;\\n\\t\\tlet formatCallback;\\n\\n\\t\\tif ( testRegexpOrCallback instanceof RegExp ) {\\n\\t\\t\\tregExp = testRegexpOrCallback;\\n\\t\\t} else {\\n\\t\\t\\ttestCallback = testRegexpOrCallback;\\n\\t\\t}\\n\\n\\t\\tif ( typeof attributeOrCallback == 'string' ) {\\n\\t\\t\\tattributeKey = attributeOrCallback;\\n\\t\\t} else {\\n\\t\\t\\tformatCallback = attributeOrCallback;\\n\\t\\t}\\n\\n\\t\\t// A test callback run on changed text.\\n\\t\\ttestCallback = testCallback || ( text => {\\n\\t\\t\\tlet result;\\n\\t\\t\\tconst remove = [];\\n\\t\\t\\tconst format = [];\\n\\n\\t\\t\\twhile ( ( result = regExp.exec( text ) ) !== null ) {\\n\\t\\t\\t\\t// There should be full match and 3 capture groups.\\n\\t\\t\\t\\tif ( result && result.length < 4 ) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tlet {\\n\\t\\t\\t\\t\\tindex,\\n\\t\\t\\t\\t\\t'1': leftDel,\\n\\t\\t\\t\\t\\t'2': content,\\n\\t\\t\\t\\t\\t'3': rightDel\\n\\t\\t\\t\\t} = result;\\n\\n\\t\\t\\t\\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\\n\\t\\t\\t\\tconst found = leftDel + content + rightDel;\\n\\t\\t\\t\\tindex += result[ 0 ].length - found.length;\\n\\n\\t\\t\\t\\t// Start and End offsets of delimiters to remove.\\n\\t\\t\\t\\tconst delStart = [\\n\\t\\t\\t\\t\\tindex,\\n\\t\\t\\t\\t\\tindex + leftDel.length\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\tconst delEnd = [\\n\\t\\t\\t\\t\\tindex + leftDel.length + content.length,\\n\\t\\t\\t\\t\\tindex + leftDel.length + content.length + rightDel.length\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tremove.push( delStart );\\n\\t\\t\\t\\tremove.push( delEnd );\\n\\n\\t\\t\\t\\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tremove,\\n\\t\\t\\t\\tformat\\n\\t\\t\\t};\\n\\t\\t} );\\n\\n\\t\\t// A format callback run on matched text.\\n\\t\\tformatCallback = formatCallback || ( ( writer, validRanges ) => {\\n\\t\\t\\tfor ( const range of validRanges ) {\\n\\t\\t\\t\\twriter.setAttribute( attributeKey, true, range );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// After applying attribute to the text, remove given attribute from the selection.\\n\\t\\t\\t// This way user is able to type a text without attribute used by auto formatter.\\n\\t\\t\\twriter.removeSelectionAttribute( attributeKey );\\n\\t\\t} );\\n\\n\\t\\teditor.model.document.on( 'change', () => {\\n\\t\\t\\tconst selection = editor.model.document.selection;\\n\\n\\t\\t\\t// Do nothing if selection is not collapsed.\\n\\t\\t\\tif ( !selection.isCollapsed ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst changes = Array.from( editor.model.document.differ.getChanges() );\\n\\t\\t\\tconst entry = changes[ 0 ];\\n\\n\\t\\t\\t// Typing is represented by only a single change.\\n\\t\\t\\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst block = selection.focus.parent;\\n\\t\\t\\tconst text = getText( block ).slice( 0, selection.focus.offset );\\n\\t\\t\\tconst testOutput = testCallback( text );\\n\\t\\t\\tconst rangesToFormat = testOutputToRanges( block, testOutput.format );\\n\\t\\t\\tconst rangesToRemove = testOutputToRanges( block, testOutput.remove );\\n\\n\\t\\t\\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\\n\\t\\t\\teditor.model.enqueueChange( writer => {\\n\\t\\t\\t\\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\\n\\n\\t\\t\\t\\t// Apply format.\\n\\t\\t\\t\\tformatCallback( writer, validRanges );\\n\\n\\t\\t\\t\\t// Remove delimiters - use reversed order to not mix the offsets while removing.\\n\\t\\t\\t\\tfor ( const range of rangesToRemove.reverse() ) {\\n\\t\\t\\t\\t\\twriter.remove( range );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Returns whole text from parent element by adding all data from text nodes together.\\n//\\n// @private\\n// @param {module:engine/model/element~Element} element\\n// @returns {String}\\nfunction getText( element ) {\\n\\treturn Array.from( element.getChildren() ).reduce( ( a, b ) => a + b.data, '' );\\n}\\n\\n// Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\\n// inside provided block.\\n//\\n// @private\\n// @param {module:engine/model/element~Element} block\\n// @param {Array.<Array>} arrays\\nfunction testOutputToRanges( block, arrays ) {\\n\\treturn arrays\\n\\t\\t.filter( array => ( array[ 0 ] !== undefined && array[ 1 ] !== undefined ) )\\n\\t\\t.map( array => ModelRange.createFromParentsAndOffsets( block, array[ 0 ], block, array[ 1 ] ) );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/attributecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\n\\n/**\\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\\n * that toggles a single attribute on a text or an element.\\n *\\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\\n *\\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\\n * for the current selection and to which nodes the attribute can be applied.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class AttributeCommand extends Command {\\n\\t/**\\n\\t * @param {module:core/editor/editor~Editor} editor\\n\\t * @param {String} attributeKey Attribute that will be set by the command.\\n\\t */\\n\\tconstructor( editor, attributeKey ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * The attribute that will be set by the command.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.attributeKey = attributeKey;\\n\\n\\t\\t/**\\n\\t\\t * Flag indicating whether the command is active. The command is active when the\\n\\t\\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\\n\\t\\t *\\n\\t\\t * * If the selection is not empty &ndash; That it starts in a text (or another node) which has the attribute set.\\n\\t\\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\\n\\t\\t * text will have this attribute, too).\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #value\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\\n\\t */\\n\\trefresh() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\n\\t\\tthis.value = doc.selection.hasAttribute( this.attributeKey );\\n\\t\\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\\n\\t *\\n\\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\\n\\t *\\n\\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\\n\\t *\\n\\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\\n\\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\\n\\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\\n\\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\\n\\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\\n\\t * that the selection inherits all attributes from a node if it is in an empty node).\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} [options] Command options.\\n\\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\\n\\t * otherwise the command will remove the attribute.\\n\\t * If not set, the command will look for its current value to decide what it should do.\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst selection = doc.selection;\\n\\t\\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t\\tif ( value ) {\\n\\t\\t\\t\\t\\twriter.setSelectionAttribute( this.attributeKey, true );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twriter.removeSelectionAttribute( this.attributeKey );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\\n\\n\\t\\t\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\t\\t\\tif ( value ) {\\n\\t\\t\\t\\t\\t\\twriter.setAttribute( this.attributeKey, value, range );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\twriter.removeAttribute( this.attributeKey, range );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/bold/boldediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport AttributeCommand from '../attributecommand';\\n\\nconst BOLD = 'bold';\\n\\n/**\\n * The bold editing feature.\\n *\\n * It registers the `bold` command and introduces the `bold` attribute in the model which renders to the view\\n * as a `<strong>` element.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class BoldEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\t// Allow bold attribute on text nodes.\\n\\t\\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\\n\\n\\t\\t// Build converter from model to view for data and editing pipelines.\\n\\n\\t\\teditor.conversion.attributeToElement( {\\n\\t\\t\\tmodel: BOLD,\\n\\t\\t\\tview: 'strong',\\n\\t\\t\\tupcastAlso: [\\n\\t\\t\\t\\t'b',\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstyle: {\\n\\t\\t\\t\\t\\t\\t'font-weight': 'bold'\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\t// Create bold command.\\n\\t\\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\\n\\n\\t\\t// Set the Ctrl+B keystroke.\\n\\t\\teditor.keystrokes.set( 'CTRL+B', BOLD );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/bold/boldui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport boldIcon from '../../theme/icons/bold.svg';\\n\\nconst BOLD = 'bold';\\n\\n/**\\n * The bold UI feature. It introduces the Bold button.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class BoldUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\t// Add bold button to feature components.\\n\\t\\teditor.ui.componentFactory.add( BOLD, locale => {\\n\\t\\t\\tconst command = editor.commands.get( BOLD );\\n\\t\\t\\tconst view = new ButtonView( locale );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tlabel: t( 'Bold' ),\\n\\t\\t\\t\\ticon: boldIcon,\\n\\t\\t\\t\\tkeystroke: 'CTRL+B',\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\\n\\n\\t\\t\\t// Execute command.\\n\\t\\t\\tthis.listenTo( view, 'execute', () => editor.execute( BOLD ) );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/italic/italicediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport AttributeCommand from '../attributecommand';\\n\\nconst ITALIC = 'italic';\\n\\n/**\\n * The italic editing feature.\\n *\\n * It registers the `italic` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\\n * which renders to the view as an `<em>` element.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ItalicEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Allow italic attribute on text nodes.\\n\\t\\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\\n\\n\\t\\teditor.conversion.attributeToElement( {\\n\\t\\t\\tmodel: ITALIC,\\n\\t\\t\\tview: 'i',\\n\\t\\t\\tupcastAlso: [\\n\\t\\t\\t\\t'em',\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstyle: {\\n\\t\\t\\t\\t\\t\\t'font-style': 'italic'\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\t// Create italic command.\\n\\t\\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\\n\\n\\t\\t// Set the Ctrl+I keystroke.\\n\\t\\teditor.keystrokes.set( 'CTRL+I', ITALIC );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/italic/italicui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport italicIcon from '../../theme/icons/italic.svg';\\n\\nconst ITALIC = 'italic';\\n\\n/**\\n * The italic UI feature. It introduces the Italic button.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ItalicUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\t// Add bold button to feature components.\\n\\t\\teditor.ui.componentFactory.add( ITALIC, locale => {\\n\\t\\t\\tconst command = editor.commands.get( ITALIC );\\n\\t\\t\\tconst view = new ButtonView( locale );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tlabel: t( 'Italic' ),\\n\\t\\t\\t\\ticon: italicIcon,\\n\\t\\t\\t\\tkeystroke: 'CTRL+I',\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\\n\\n\\t\\t\\t// Execute command.\\n\\t\\t\\tthis.listenTo( view, 'execute', () => editor.execute( ITALIC ) );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/first\\n */\\n\\n/**\\n * Returns first item of the given `iterable`.\\n *\\n * @param {Iterable.<*>} iterable\\n * @returns {*}\\n */\\nexport default function first( iterable ) {\\n\\tconst iteratorItem = iterable.next();\\n\\n\\tif ( iteratorItem.done ) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\treturn iteratorItem.value;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module block-quote/blockquotecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\n\\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\\nimport Element from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * The block quote command plugin.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class BlockQuoteCommand extends Command {\\n\\t/**\\n\\t * Whether the selection starts in a block quote.\\n\\t *\\n\\t * @observable\\n\\t * @readonly\\n\\t * @member {Boolean} #value\\n\\t */\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.value = this._getValue();\\n\\t\\tthis.isEnabled = this._checkEnabled();\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command. When the command {@link #value is on}, all block quotes within\\n\\t * the selection will be removed. If it is off, all selected blocks will be wrapped with\\n\\t * a block quote.\\n\\t *\\n\\t * @fires execute\\n\\t */\\n\\texecute() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst schema = model.schema;\\n\\t\\tconst blocks = Array.from( doc.selection.getSelectedBlocks() );\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tif ( this.value ) {\\n\\t\\t\\t\\tthis._removeQuote( writer, blocks.filter( findQuote ) );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst blocksToQuote = blocks.filter( block => {\\n\\t\\t\\t\\t\\t// Already quoted blocks needs to be considered while quoting too\\n\\t\\t\\t\\t\\t// in order to reuse their <bQ> elements.\\n\\t\\t\\t\\t\\treturn findQuote( block ) || checkCanBeQuoted( schema, block );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tthis._applyQuote( writer, blocksToQuote );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Checks the command's {@link #value}.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} The current value.\\n\\t */\\n\\t_getValue() {\\n\\t\\tconst firstBlock = first( this.editor.model.document.selection.getSelectedBlocks() );\\n\\n\\t\\t// In the current implementation, the block quote must be an immediate parent of a block element.\\n\\t\\treturn !!( firstBlock && findQuote( firstBlock ) );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the command can be enabled in the current context.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} Whether the command should be enabled.\\n\\t */\\n\\t_checkEnabled() {\\n\\t\\tif ( this.value ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tconst selection = this.editor.model.document.selection;\\n\\t\\tconst schema = this.editor.model.schema;\\n\\n\\t\\tconst firstBlock = first( selection.getSelectedBlocks() );\\n\\n\\t\\tif ( !firstBlock ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn checkCanBeQuoted( schema, firstBlock );\\n\\t}\\n\\n\\t/**\\n\\t * Removes the quote from given blocks.\\n\\t *\\n\\t * If blocks which are supposed to be \\\"unquoted\\\" are in the middle of a quote,\\n\\t * start it or end it, then the quote will be split (if needed) and the blocks\\n\\t * will be moved out of it, so other quoted blocks remained quoted.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/writer~Writer} writer\\n\\t * @param {Array.<module:engine/model/element~Element>} blocks\\n\\t */\\n\\t_removeQuote( writer, blocks ) {\\n\\t\\t// Unquote all groups of block. Iterate in the reverse order to not break following ranges.\\n\\t\\tgetRangesOfBlockGroups( blocks ).reverse().forEach( groupRange => {\\n\\t\\t\\tif ( groupRange.start.isAtStart && groupRange.end.isAtEnd ) {\\n\\t\\t\\t\\twriter.unwrap( groupRange.start.parent );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\\n\\t\\t\\tif ( groupRange.start.isAtStart ) {\\n\\t\\t\\t\\tconst positionBefore = Position.createBefore( groupRange.start.parent );\\n\\n\\t\\t\\t\\twriter.move( groupRange, positionBefore );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\\n\\t\\t\\t// so we move the items there.\\n\\t\\t\\tif ( !groupRange.end.isAtEnd ) {\\n\\t\\t\\t\\twriter.split( groupRange.end );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\\n\\n\\t\\t\\tconst positionAfter = Position.createAfter( groupRange.end.parent );\\n\\n\\t\\t\\twriter.move( groupRange, positionAfter );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Applies the quote to given blocks.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/writer~Writer} writer\\n\\t * @param {Array.<module:engine/model/element~Element>} blocks\\n\\t */\\n\\t_applyQuote( writer, blocks ) {\\n\\t\\tconst quotesToMerge = [];\\n\\n\\t\\t// Quote all groups of block. Iterate in the reverse order to not break following ranges.\\n\\t\\tgetRangesOfBlockGroups( blocks ).reverse().forEach( groupRange => {\\n\\t\\t\\tlet quote = findQuote( groupRange.start );\\n\\n\\t\\t\\tif ( !quote ) {\\n\\t\\t\\t\\tquote = new Element( 'blockQuote' );\\n\\n\\t\\t\\t\\twriter.wrap( groupRange, quote );\\n\\t\\t\\t}\\n\\n\\t\\t\\tquotesToMerge.push( quote );\\n\\t\\t} );\\n\\n\\t\\t// Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\\n\\t\\t// the <bQ> elements in the source order (due to how merge works – it moves the right element's content\\n\\t\\t// to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\\n\\t\\t// we want to keep the reference to the first (furthest left) one.\\n\\t\\tquotesToMerge.reverse().reduce( ( currentQuote, nextQuote ) => {\\n\\t\\t\\tif ( currentQuote.nextSibling == nextQuote ) {\\n\\t\\t\\t\\twriter.merge( Position.createAfter( currentQuote ) );\\n\\n\\t\\t\\t\\treturn currentQuote;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn nextQuote;\\n\\t\\t} );\\n\\t}\\n}\\n\\nfunction findQuote( elementOrPosition ) {\\n\\treturn elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\\n}\\n\\n// Returns a minimal array of ranges containing groups of subsequent blocks.\\n//\\n// content:         abcdefgh\\n// blocks:          [ a, b, d , f, g, h ]\\n// output ranges:   [ab]c[d]e[fgh]\\n//\\n// @param {Array.<module:engine/model/element~Element>} blocks\\n// @returns {Array.<module:engine/model/range~Range>}\\nfunction getRangesOfBlockGroups( blocks ) {\\n\\tlet startPosition;\\n\\tlet i = 0;\\n\\tconst ranges = [];\\n\\n\\twhile ( i < blocks.length ) {\\n\\t\\tconst block = blocks[ i ];\\n\\t\\tconst nextBlock = blocks[ i + 1 ];\\n\\n\\t\\tif ( !startPosition ) {\\n\\t\\t\\tstartPosition = Position.createBefore( block );\\n\\t\\t}\\n\\n\\t\\tif ( !nextBlock || block.nextSibling != nextBlock ) {\\n\\t\\t\\tranges.push( new Range( startPosition, Position.createAfter( block ) ) );\\n\\t\\t\\tstartPosition = null;\\n\\t\\t}\\n\\n\\t\\ti++;\\n\\t}\\n\\n\\treturn ranges;\\n}\\n\\n// Checks whether <bQ> can wrap the block.\\nfunction checkCanBeQuoted( schema, block ) {\\n\\t// TMP will be replaced with schema.checkWrap().\\n\\tconst isBQAllowed = schema.checkChild( block.parent, 'blockQuote' );\\n\\tconst isBlockAllowedInBQ = schema.checkChild( [ '$root', 'blockQuote' ], block );\\n\\n\\treturn isBQAllowed && isBlockAllowedInBQ;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module block-quote/blockquoteediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport BlockQuoteCommand from './blockquotecommand';\\n\\n/**\\n * The block quote editing.\\n *\\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class BlockQuoteEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst schema = editor.model.schema;\\n\\n\\t\\teditor.commands.add( 'blockQuote', new BlockQuoteCommand( editor ) );\\n\\n\\t\\tschema.register( 'blockQuote', {\\n\\t\\t\\tallowWhere: '$block',\\n\\t\\t\\tallowContentOf: '$root'\\n\\t\\t} );\\n\\n\\t\\t// Disallow blockQuote in blockQuote.\\n\\t\\tschema.addChildCheck( ( ctx, childDef ) => {\\n\\t\\t\\tif ( ctx.endsWith( 'blockQuote' ) && childDef.name == 'blockQuote' ) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\teditor.conversion.elementToElement( { model: 'blockQuote', view: 'blockquote' } );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tafterInit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst command = editor.commands.get( 'blockQuote' );\\n\\n\\t\\t// Overwrite default Enter key behavior.\\n\\t\\t// If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\\n\\t\\t// This listener is added in afterInit in order to register it after list's feature listener.\\n\\t\\t// We can't use a priority for this, because 'low' is already used by the enter feature, unless\\n\\t\\t// we'd use numeric priority in this case.\\n\\t\\tthis.listenTo( this.editor.editing.view.document, 'enter', ( evt, data ) => {\\n\\t\\t\\tconst doc = this.editor.model.document;\\n\\t\\t\\tconst positionParent = doc.selection.getLastPosition().parent;\\n\\n\\t\\t\\tif ( doc.selection.isCollapsed && positionParent.isEmpty && command.value ) {\\n\\t\\t\\t\\tthis.editor.execute( 'blockQuote' );\\n\\t\\t\\t\\tthis.editor.editing.view.scrollToTheSelection();\\n\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module block-quote/blockquoteui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport quoteIcon from '@ckeditor/ckeditor5-core/theme/icons/quote.svg';\\nimport '../theme/blockquote.css';\\n\\n/**\\n * The block quote UI plugin.\\n *\\n * It introduces the `'blockQuote'` button.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class BlockQuoteUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\teditor.ui.componentFactory.add( 'blockQuote', locale => {\\n\\t\\t\\tconst command = editor.commands.get( 'blockQuote' );\\n\\t\\t\\tconst buttonView = new ButtonView( locale );\\n\\n\\t\\t\\tbuttonView.set( {\\n\\t\\t\\t\\tlabel: t( 'Block quote' ),\\n\\t\\t\\t\\ticon: quoteIcon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Bind button model to command.\\n\\t\\t\\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\\n\\n\\t\\t\\t// Execute command.\\n\\t\\t\\tthis.listenTo( buttonView, 'execute', () => editor.execute( 'blockQuote' ) );\\n\\n\\t\\t\\treturn buttonView;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* eslint-env browser */\\n\\n'use strict';\\n\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\n\\nconst BASE64_HEADER_REG_EXP = /^data:(\\\\S*?);base64,/;\\n\\n/**\\n * FileUploader class used to upload single file.\\n */\\nclass FileUploader {\\n\\t/**\\n\\t * Creates `FileUploader` instance.\\n\\t *\\n\\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\\n\\t * @param {Token} token Token used for authentication.\\n\\t * @param {String} apiAddress API address.\\n\\t */\\n\\tconstructor( fileOrData, token, apiAddress ) {\\n\\t\\tif ( !fileOrData ) {\\n\\t\\t\\tthrow new Error( 'File must be provided' );\\n\\t\\t}\\n\\n\\t\\tif ( !token ) {\\n\\t\\t\\tthrow new Error( 'Token must be provided' );\\n\\t\\t}\\n\\n\\t\\tif ( !apiAddress ) {\\n\\t\\t\\tthrow new Error( 'Api address must be provided' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * A file that is being uploaded.\\n\\t\\t *\\n\\t\\t * @type {Blob}\\n\\t\\t */\\n\\t\\tthis.file = _isBase64( fileOrData ) ? _base64ToBlob( fileOrData ) : fileOrData;\\n\\n\\t\\t/**\\n\\t\\t * CKEditor Cloud Services access token.\\n\\t\\t *\\n\\t\\t * @type {Token}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._token = token;\\n\\n\\t\\t/**\\n\\t\\t * CKEditor Cloud Services API address.\\n\\t\\t *\\n\\t\\t * @type {String}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._apiAddress = apiAddress;\\n\\t}\\n\\n\\t/**\\n\\t * Registers callback on `progress` event.\\n\\t *\\n\\t * @chainable\\n\\t * @param {Function} callback\\n\\t * @returns {FileUploader}\\n\\t */\\n\\tonProgress( callback ) {\\n\\t\\tthis.on( 'progress', ( event, data ) => callback( data ) );\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Registers callback on `error` event. Event is called once when error occurs.\\n\\t *\\n\\t * @chainable\\n\\t * @param {Function} callback\\n\\t * @returns {FileUploader}\\n\\t */\\n\\tonError( callback ) {\\n\\t\\tthis.once( 'error', ( event, data ) => callback( data ) );\\n\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * Aborts upload process.\\n\\t */\\n\\tabort() {\\n\\t\\tthis.xhr.abort();\\n\\t}\\n\\n\\t/**\\n\\t * Sends XHR request to API.\\n\\t *\\n\\t * @chainable\\n\\t * @returns {Promise.<Object>}\\n\\t */\\n\\tsend() {\\n\\t\\tthis._prepareRequest();\\n\\t\\tthis._attachXHRListeners();\\n\\n\\t\\treturn this._sendRequest();\\n\\t}\\n\\n\\t/**\\n\\t * Prepares XHR request.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_prepareRequest() {\\n\\t\\tconst xhr = new XMLHttpRequest();\\n\\n\\t\\txhr.open( 'POST', this._apiAddress );\\n\\t\\txhr.setRequestHeader( 'Authorization', this._token.value );\\n\\t\\txhr.responseType = 'json';\\n\\n\\t\\tthis.xhr = xhr;\\n\\t}\\n\\n\\t/**\\n\\t * Attaches listeners to the XHR.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_attachXHRListeners() {\\n\\t\\tconst that = this;\\n\\t\\tconst xhr = this.xhr;\\n\\n\\t\\txhr.addEventListener( 'error', onError( 'Network Error' ) );\\n\\t\\txhr.addEventListener( 'abort', onError( 'Abort' ) );\\n\\n\\t\\t/* istanbul ignore else */\\n\\t\\tif ( xhr.upload ) {\\n\\t\\t\\txhr.upload.addEventListener( 'progress', event => {\\n\\t\\t\\t\\tif ( event.lengthComputable ) {\\n\\t\\t\\t\\t\\tthis.fire( 'progress', {\\n\\t\\t\\t\\t\\t\\ttotal: event.total,\\n\\t\\t\\t\\t\\t\\tuploaded: event.loaded\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\txhr.addEventListener( 'load', () => {\\n\\t\\t\\tconst statusCode = xhr.status;\\n\\t\\t\\tconst xhrResponse = xhr.response;\\n\\n\\t\\t\\tif ( statusCode < 200 || statusCode > 299 ) {\\n\\t\\t\\t\\treturn this.fire( 'error', xhrResponse.message || xhrResponse.error );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tfunction onError( message ) {\\n\\t\\t\\treturn () => that.fire( 'error', message );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Sends XHR request.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_sendRequest() {\\n\\t\\tconst formData = new FormData();\\n\\t\\tconst xhr = this.xhr;\\n\\n\\t\\tformData.append( 'file', this.file );\\n\\n\\t\\treturn new Promise( ( resolve, reject ) => {\\n\\t\\t\\txhr.addEventListener( 'load', () => {\\n\\t\\t\\t\\tconst statusCode = xhr.status;\\n\\t\\t\\t\\tconst xhrResponse = xhr.response;\\n\\n\\t\\t\\t\\tif ( statusCode < 200 || statusCode > 299 ) {\\n\\t\\t\\t\\t\\treturn reject( xhrResponse.message || xhrResponse.error );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn resolve( xhrResponse );\\n\\t\\t\\t} );\\n\\n\\t\\t\\txhr.addEventListener( 'error', () => reject( 'Network Error' ) );\\n\\t\\t\\txhr.addEventListener( 'abort', () => reject( 'Abort' ) );\\n\\n\\t\\t\\txhr.send( formData );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Fired when error occurs.\\n\\t *\\n\\t * @event error\\n\\t * @param {String} error Error message\\n\\t */\\n\\n\\t/**\\n\\t * Fired on upload progress.\\n\\t *\\n\\t * @event progress\\n\\t * @param {Object} status Total and uploaded status\\n\\t */\\n}\\n\\nmix( FileUploader, EmitterMixin );\\n\\n/**\\n * Transforms Base64 string data into file.\\n *\\n * @param {String} base64 String data.\\n * @param {Number} [sliceSize=512]\\n * @returns {Blob}\\n * @private\\n */\\nfunction _base64ToBlob( base64, sliceSize = 512 ) {\\n\\ttry {\\n\\t\\tconst contentType = base64.match( BASE64_HEADER_REG_EXP )[ 1 ];\\n\\t\\tconst base64Data = atob( base64.replace( BASE64_HEADER_REG_EXP, '' ) );\\n\\n\\t\\tconst byteArrays = [];\\n\\n\\t\\tfor ( let offset = 0; offset < base64Data.length; offset += sliceSize ) {\\n\\t\\t\\tconst slice = base64Data.slice( offset, offset + sliceSize );\\n\\t\\t\\tconst byteNumbers = new Array( slice.length );\\n\\n\\t\\t\\tfor ( let i = 0; i < slice.length; i++ ) {\\n\\t\\t\\t\\tbyteNumbers[ i ] = slice.charCodeAt( i );\\n\\t\\t\\t}\\n\\n\\t\\t\\tbyteArrays.push( new Uint8Array( byteNumbers ) );\\n\\t\\t}\\n\\n\\t\\treturn new Blob( byteArrays, { type: contentType } );\\n\\t} catch ( error ) {\\n\\t\\tthrow new Error( 'Problem with decoding Base64 image data.' );\\n\\t}\\n}\\n\\n/**\\n * Checks that string is Base64.\\n *\\n * @param {String} string\\n * @returns {Boolean}\\n * @private\\n */\\nfunction _isBase64( string ) {\\n\\tif ( typeof string !== 'string' ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tconst match = string.match( BASE64_HEADER_REG_EXP );\\n\\treturn !!( match && match.length );\\n}\\n\\nexport default FileUploader;\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/* eslint-env browser */\\n\\n'use strict';\\n\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\n\\nconst DEFAULT_OPTIONS = { refreshInterval: 3600000, autoRefresh: true };\\n\\n/**\\n * Class representing the token used for communication with CKEditor Cloud Services.\\n * Value of the token is retrieving from the specified URL and is refreshed every 1 hour by default.\\n *\\n * @mixes ObservableMixin\\n */\\nclass Token {\\n\\t/**\\n\\t * Creates `Token` instance.\\n\\t * Method `init` should be called after using the constructor or use `create` method instead.\\n\\t *\\n\\t * @param {String} tokenUrl Endpoint address to download the token.\\n\\t * @param {Object} options\\n\\t * @param {String} [options.initValue] Initial value of the token.\\n\\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\\n\\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\\n\\t */\\n\\tconstructor( tokenUrl, options = DEFAULT_OPTIONS ) {\\n\\t\\tif ( !tokenUrl ) {\\n\\t\\t\\tthrow new Error( '`tokenUrl` must be provided' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * Value of the token.\\n\\t\\t * The value of the token is null if `initValue` is not provided or `init` method was not called.\\n\\t\\t * `create` method creates token with initialized value from url.\\n\\t\\t *\\n\\t\\t * @name value\\n\\t\\t * @type {String}\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @memberOf Token#\\n\\t\\t */\\n\\t\\tthis.set( 'value', options.initValue );\\n\\n\\t\\t/**\\n\\t\\t * @type {String}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._tokenUrl = tokenUrl;\\n\\n\\t\\t/**\\n\\t\\t * @type {Object}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._options = Object.assign( {}, DEFAULT_OPTIONS, options );\\n\\t}\\n\\n\\t/**\\n\\t * Initializes the token.\\n\\t *\\n\\t * @returns {Promise.<Token>}\\n\\t */\\n\\tinit() {\\n\\t\\treturn new Promise( ( resolve, reject ) => {\\n\\t\\t\\tif ( this._options.autoRefresh ) {\\n\\t\\t\\t\\tthis._startRefreshing();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( !this.value ) {\\n\\t\\t\\t\\tthis._refreshToken()\\n\\t\\t\\t\\t\\t.then( resolve )\\n\\t\\t\\t\\t\\t.catch( reject );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tresolve( this );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Gets the new token.\\n\\t *\\n\\t * @protected\\n\\t * @returns {Promise.<Token>}\\n\\t */\\n\\t_refreshToken() {\\n\\t\\treturn new Promise( ( resolve, reject ) => {\\n\\t\\t\\tconst xhr = new XMLHttpRequest();\\n\\n\\t\\t\\txhr.open( 'GET', this._tokenUrl );\\n\\n\\t\\t\\txhr.addEventListener( 'load', () => {\\n\\t\\t\\t\\tconst statusCode = xhr.status;\\n\\t\\t\\t\\tconst xhrResponse = xhr.response;\\n\\n\\t\\t\\t\\tif ( statusCode < 200 || statusCode > 299 ) {\\n\\t\\t\\t\\t\\treturn reject( 'Cannot download new token!' );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis.set( 'value', xhrResponse );\\n\\n\\t\\t\\t\\treturn resolve( this );\\n\\t\\t\\t} );\\n\\n\\t\\t\\txhr.addEventListener( 'error', () => reject( 'Network Error' ) );\\n\\t\\t\\txhr.addEventListener( 'abort', () => reject( 'Abort' ) );\\n\\n\\t\\t\\txhr.send();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Starts value refreshing every `refreshInterval` time.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_startRefreshing() {\\n\\t\\tthis._refreshInterval = setInterval( this._refreshToken.bind( this ), this._options.refreshInterval );\\n\\t}\\n\\n\\t/**\\n\\t * Stops value refreshing.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_stopRefreshing() {\\n\\t\\tclearInterval( this._refreshInterval );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a initialized {@link Token} instance.\\n\\t *\\n\\t * @param {String} tokenUrl Endpoint address to download the token.\\n\\t * @param {Object} options\\n\\t * @param {String} [options.initValue] Initial value of the token.\\n\\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\\n\\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\\n\\t * @returns {Promise.<Token>}\\n\\t */\\n\\tstatic create( tokenUrl, options = DEFAULT_OPTIONS ) {\\n\\t\\tconst token = new Token( tokenUrl, options );\\n\\n\\t\\treturn token.init();\\n\\t}\\n}\\n\\nmix( Token, ObservableMixin );\\n\\nexport default Token;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module cloudservices/cloudservices\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Token from '@ckeditor/ckeditor-cloudservices-core/src/token/token';\\n\\n/**\\n * Plugin introducing CKEditor 5's Cloud Services integration.\\n * It takes care of the {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudService`}\\n * configuration options and initializes the token provider.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class CloudServices extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst config = editor.config;\\n\\n\\t\\tconst options = config.get( 'cloudServices' ) || {};\\n\\n\\t\\tfor ( const optionName in options ) {\\n\\t\\t\\tthis[ optionName ] = options[ optionName ];\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * The authentication token URL for CKEditor Cloud Services.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String|undefined} #tokenUrl\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * The URL to which the files should be uploaded.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {String} #uploadUrl\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\\n\\t\\t * Its value is `null` when {@link module:cloudservices/cloudservices~CloudServicesConfig#tokenUrl} is not provided.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Object|null} #token\\n\\t\\t */\\n\\n\\t\\tif ( !this.tokenUrl ) {\\n\\t\\t\\tthis.token = null;\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.token = new CloudServices.Token( this.tokenUrl );\\n\\n\\t\\treturn this.token.init();\\n\\t}\\n}\\n\\nCloudServices.Token = Token;\\n\\n/**\\n * The configuration of CKEditor Cloud Services. Introduced by the {@link module:cloudservices/cloudservices~CloudServices} plugin.\\n *\\n * Read more in {@link module:cloudservices/cloudservices~CloudServicesConfig}.\\n *\\n * @member {module:cloudservices/cloudservices~CloudServicesConfig} module:core/editor/editorconfig~EditorConfig#cloudServices\\n */\\n\\n/**\\n * The configuration for all plugins using CKEditor Cloud Services.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( document.querySelector( '#editor' ), {\\n *\\t\\t\\t\\tcloudServices: {\\n *\\t\\t\\t\\t\\ttokenUrl: 'https://example.com/cs-token-endpoint',\\n *\\t\\t\\t\\t\\tuploadUrl: 'https://your-organization-id.cke-cs.com/easyimage/upload/'\\n *\\t\\t\\t\\t}\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface CloudServicesConfig\\n */\\n\\n/**\\n * The URL to the security token endpoint in your application. The role of this endpoint is to securely authorize the\\n * end users of your application to use [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services), only\\n * if they should have access e.g. to upload files with Easy Image.\\n *\\n * You can find more information about token endpoints in the\\n * {@glink @cs guides/quick-start#create-token-endpoint Cloud Services - Quick start}\\n * and {@glink @cs guides/token-endpoints/tokenendpoint Cloud Services - Creating token endpoint} documentation.\\n *\\n * Without a properly working token endpoint (token URL) CKEditor plugins will not be able to connect to CKEditor Cloud Services.\\n *\\n * @member {String} module:cloudservices/cloudservices~CloudServicesConfig#tokenUrl\\n */\\n\\n/**\\n * The endpoint URL for [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services) uploads.\\n * This option must be set for Easy Image to work correctly.\\n *\\n * The upload URL is unique for each customer and can be found in the [CKEditor Ecosystem dashboard](https://dashboard.ckeditor.com)\\n * after subscribing to Easy Image service.\\n * To learn how to start using Easy Image check {@glink @cs guides/quick-start Cloud Services - Quick start} documentation.\\n *\\n * Note: Make sure to also set the {@link module:cloudservices/cloudservices~CloudServicesConfig#tokenUrl} configuration option.\\n *\\n * Read more in [Cloud Services Quick start](https://docs.ckeditor.com/cs/latest/guides/quick-start.html).\\n *\\n * @member {String} module:cloudservices/cloudservices~CloudServicesConfig#uploadUrl\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n* @module easy-image/cloudservicesuploadadapter\\n*/\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\\nimport UploadGateway from '@ckeditor/ckeditor-cloudservices-core/src/uploadgateway/uploadgateway';\\nimport CloudServices from '@ckeditor/ckeditor5-cloudservices/src/cloudservices';\\n\\n/**\\n * A plugin which enables upload to Cloud Services.\\n *\\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\\n *\\n * After enabling this adapter you need to configure the Cloud Services integration through\\n * {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudServices`}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class CloudServicesUploadAdapter extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FileRepository, CloudServices ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\tconst cloudServices = editor.plugins.get( CloudServices );\\n\\n\\t\\tconst token = cloudServices.token;\\n\\t\\tconst uploadUrl = cloudServices.uploadUrl;\\n\\n\\t\\tif ( !token ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis._uploadGateway = new CloudServicesUploadAdapter._UploadGateway( token, uploadUrl );\\n\\n\\t\\teditor.plugins.get( FileRepository ).createUploadAdapter = loader => {\\n\\t\\t\\treturn new Adapter( this._uploadGateway, loader );\\n\\t\\t};\\n\\t}\\n}\\n\\n/**\\n * @private\\n */\\nclass Adapter {\\n\\tconstructor( uploadGateway, loader ) {\\n\\t\\tthis.uploadGateway = uploadGateway;\\n\\n\\t\\tthis.loader = loader;\\n\\t}\\n\\n\\tupload() {\\n\\t\\tthis.fileUploader = this.uploadGateway.upload( this.loader.file );\\n\\n\\t\\tthis.fileUploader.on( 'progress', ( evt, data ) => {\\n\\t\\t\\tthis.loader.uploadTotal = data.total;\\n\\t\\t\\tthis.loader.uploaded = data.uploaded;\\n\\t\\t} );\\n\\n\\t\\treturn this.fileUploader.send();\\n\\t}\\n\\n\\tabort() {\\n\\t\\tthis.fileUploader.abort();\\n\\t}\\n}\\n\\n// Store the API in static property to easily overwrite it in tests.\\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\\nCloudServicesUploadAdapter._UploadGateway = UploadGateway;\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/image/converters\\n */\\n\\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * Returns a function that converts the image view representation:\\n *\\n *\\t\\t<figure class=\\\"image\\\"><img src=\\\"...\\\" alt=\\\"...\\\"></img></figure>\\n *\\n * to the model representation:\\n *\\n *\\t\\t<image src=\\\"...\\\" alt=\\\"...\\\"></image>\\n *\\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\\n * of the `<image>` model element.\\n *\\n * @returns {Function}\\n */\\nexport function viewFigureToModel() {\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'element:figure', converter );\\n\\t};\\n\\n\\tfunction converter( evt, data, conversionApi ) {\\n\\t\\t// Do not convert if this is not an \\\"image figure\\\".\\n\\t\\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, class: 'image' } ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Find an image element inside the figure element.\\n\\t\\tconst viewImage = Array.from( data.viewItem.getChildren() ).find( viewChild => viewChild.is( 'img' ) );\\n\\n\\t\\t// Do not convert if image element is absent, is missing src attribute or was already converted.\\n\\t\\tif ( !viewImage || !viewImage.hasAttribute( 'src' ) || !conversionApi.consumable.test( viewImage, { name: true } ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Convert view image to model image.\\n\\t\\tconst conversionResult = conversionApi.convertItem( viewImage, data.modelCursor );\\n\\n\\t\\t// Get image element from conversion result.\\n\\t\\tconst modelImage = first( conversionResult.modelRange.getItems() );\\n\\n\\t\\t// When image wasn't successfully converted then finish conversion.\\n\\t\\tif ( !modelImage ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Convert rest of the figure element's children as an image children.\\n\\t\\tconversionApi.convertChildren( data.viewItem, ModelPosition.createAt( modelImage ) );\\n\\n\\t\\t// Set image range as conversion result.\\n\\t\\tdata.modelRange = conversionResult.modelRange;\\n\\n\\t\\t// Continue conversion where image conversion ends.\\n\\t\\tdata.modelCursor = conversionResult.modelCursor;\\n\\t}\\n}\\n\\n/**\\n * Converter used to convert `srcset` model image's attribute to `srcset`, `sizes` and `width` attributes in the view.\\n *\\n * @return {Function}\\n */\\nexport function srcsetAttributeConverter() {\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( 'attribute:srcset:image', converter );\\n\\t};\\n\\n\\tfunction converter( evt, data, conversionApi ) {\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst writer = conversionApi.writer;\\n\\t\\tconst figure = conversionApi.mapper.toViewElement( data.item );\\n\\t\\tconst img = figure.getChild( 0 );\\n\\n\\t\\tif ( data.attributeNewValue === null ) {\\n\\t\\t\\tconst srcset = data.attributeOldValue;\\n\\n\\t\\t\\tif ( srcset.data ) {\\n\\t\\t\\t\\twriter.removeAttribute( 'srcset', img );\\n\\t\\t\\t\\twriter.removeAttribute( 'sizes', img );\\n\\n\\t\\t\\t\\tif ( srcset.width ) {\\n\\t\\t\\t\\t\\twriter.removeAttribute( 'width', img );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tconst srcset = data.attributeNewValue;\\n\\n\\t\\t\\tif ( srcset.data ) {\\n\\t\\t\\t\\twriter.setAttribute( 'srcset', srcset.data, img );\\n\\t\\t\\t\\t// Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\\n\\t\\t\\t\\twriter.setAttribute( 'sizes', '100vw', img );\\n\\n\\t\\t\\t\\tif ( srcset.width ) {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'width', srcset.width, img );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function modelToViewAttributeConverter( attributeKey ) {\\n\\treturn dispatcher => {\\n\\t\\tdispatcher.on( `attribute:${ attributeKey }:image`, converter );\\n\\t};\\n\\n\\tfunction converter( evt, data, conversionApi ) {\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst figure = conversionApi.mapper.toViewElement( data.item );\\n\\t\\tconst img = figure.getChild( 0 );\\n\\n\\t\\tif ( data.attributeNewValue !== null ) {\\n\\t\\t\\tviewWriter.setAttribute( data.attributeKey, data.attributeNewValue, img );\\n\\t\\t} else {\\n\\t\\t\\tviewWriter.removeAttribute( data.attributeKey, img );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n'use strict';\\n\\nimport FileUploader from './fileuploader';\\n\\n/**\\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\\n */\\nexport default class UploadGateway {\\n\\t/**\\n\\t * Creates `UploadGateway` instance.\\n\\t *\\n\\t * @param {Token} token Token used for authentication.\\n\\t * @param {String} apiAddress API address.\\n\\t */\\n\\tconstructor( token, apiAddress ) {\\n\\t\\tif ( !token ) {\\n\\t\\t\\tthrow new Error( 'Token must be provided' );\\n\\t\\t}\\n\\n\\t\\tif ( !apiAddress ) {\\n\\t\\t\\tthrow new Error( 'Api address must be provided' );\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * CKEditor Cloud Services access token.\\n\\t\\t *\\n\\t\\t * @type {Token}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._token = token;\\n\\n\\t\\t/**\\n\\t\\t * CKEditor Cloud Services API address.\\n\\t\\t *\\n\\t\\t * @type {String}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._apiAddress = apiAddress;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a {@link FileUploader} instance that wraps file upload process.\\n\\t * The file is being sent at a time when the method {@link FileUploader#then then} is called\\n\\t * or when {@link FileUploader#send send} method is called.\\n\\t *\\n\\t *     const token = await Token.create( 'https://token-endpoint' );\\n\\t *     new UploadGateway( token, 'https://example.org' )\\n\\t *        .upload( 'FILE' )\\n\\t *        .onProgress( ( data ) => console.log( data ) )\\n\\t *        .send()\\n\\t *        .then( ( response ) => console.log( response ) );\\n\\t *\\n\\t *     // OR\\n\\t *\\n\\t *     const token = await Token.create( 'https://token-endpoint' );\\n\\t *     new UploadGateway( token, 'https://example.org' )\\n\\t *         .upload( 'FILE' )\\n\\t *         .onProgress( ( data ) => console.log( data ) )\\n\\t *         .send()\\n\\t *         .then( ( response ) => console.log( response ) );\\n\\t *\\n\\t * @param {Blob/String} fileOrData A blob object or a data string encoded with Base64.\\n\\t * @returns {FileUploader} Returns `FileUploader` instance.\\n\\t */\\n\\tupload( fileOrData ) {\\n\\t\\treturn new FileUploader( fileOrData, this._token, this._apiAddress );\\n\\t}\\n}\\n\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module widget/highlightstack\\n */\\n\\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\n\\n/**\\n * Class used to handle correct order of highlights on elements.\\n *\\n * When different highlights are applied to same element correct order should be preserved:\\n *\\n * * highlight with highest priority should be applied,\\n * * if two highlights have same priority - sort by CSS class provided in\\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor}.\\n *\\n * This way, highlight will be applied with the same rules it is applied on texts.\\n */\\nexport default class HighlightStack {\\n\\t/**\\n\\t * Creates class instance.\\n\\t */\\n\\tconstructor() {\\n\\t\\tthis._stack = [];\\n\\t}\\n\\n\\t/**\\n\\t * Adds highlight descriptor to the stack.\\n\\t *\\n\\t * @fires change:top\\n\\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\\n\\t * @param {module:engine/view/writer~Writer} writer\\n\\t */\\n\\tadd( descriptor, writer ) {\\n\\t\\tconst stack = this._stack;\\n\\n\\t\\t// Save top descriptor and insert new one. If top is changed - fire event.\\n\\t\\tconst oldTop = stack[ 0 ];\\n\\t\\tthis._insertDescriptor( descriptor );\\n\\t\\tconst newTop = stack[ 0 ];\\n\\n\\t\\t// When new object is at the top and stores different information.\\n\\t\\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\\n\\t\\t\\tthis.fire( 'change:top', {\\n\\t\\t\\t\\toldDescriptor: oldTop,\\n\\t\\t\\t\\tnewDescriptor: newTop,\\n\\t\\t\\t\\twriter\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes highlight descriptor from the stack.\\n\\t *\\n\\t * @fires change:top\\n\\t * @param {String} id Id of the descriptor to remove.\\n\\t * @param {module:engine/view/writer~Writer} writer\\n\\t */\\n\\tremove( id, writer ) {\\n\\t\\tconst stack = this._stack;\\n\\n\\t\\tconst oldTop = stack[ 0 ];\\n\\t\\tthis._removeDescriptor( id );\\n\\t\\tconst newTop = stack[ 0 ];\\n\\n\\t\\t// When new object is at the top and stores different information.\\n\\t\\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\\n\\t\\t\\tthis.fire( 'change:top', {\\n\\t\\t\\t\\toldDescriptor: oldTop,\\n\\t\\t\\t\\tnewDescriptor: newTop,\\n\\t\\t\\t\\twriter\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\\n\\t * descriptor with same id is already present.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\\n\\t */\\n\\t_insertDescriptor( descriptor ) {\\n\\t\\tconst stack = this._stack;\\n\\t\\tconst index = stack.findIndex( item => item.id === descriptor.id );\\n\\n\\t\\t// Inserting exact same descriptor - do nothing.\\n\\t\\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// If descriptor with same id but with different information is on the stack - remove it.\\n\\t\\tif ( index > -1 ) {\\n\\t\\t\\tstack.splice( index, 1 );\\n\\t\\t}\\n\\n\\t\\t// Find correct place to insert descriptor in the stack.\\n\\t\\t// It have different information (for example priority) so it must be re-inserted in correct place.\\n\\t\\tlet i = 0;\\n\\n\\t\\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\tstack.splice( i, 0, descriptor );\\n\\t}\\n\\n\\t/**\\n\\t * Removes descriptor with given id from the stack.\\n\\t *\\n\\t * @private\\n\\t * @param {String} id Descriptor's id.\\n\\t */\\n\\t_removeDescriptor( id ) {\\n\\t\\tconst stack = this._stack;\\n\\t\\tconst index = stack.findIndex( item => item.id === id );\\n\\n\\t\\t// If descriptor with same id is on the list - remove it.\\n\\t\\tif ( index > -1 ) {\\n\\t\\t\\tstack.splice( index, 1 );\\n\\t\\t}\\n\\t}\\n}\\n\\nmix( HighlightStack, EmitterMixin );\\n\\n// Compares two descriptors by checking their priority and class list.\\n//\\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\\nfunction compareDescriptors( a, b ) {\\n\\treturn a && b && a.priority == b.priority && classesToString( a.class ) == classesToString( b.class );\\n}\\n\\n// Checks whenever first descriptor should be placed in the stack before second one.\\n//\\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\\n// @returns {Boolean}\\nfunction shouldABeBeforeB( a, b ) {\\n\\tif ( a.priority > b.priority ) {\\n\\t\\treturn true;\\n\\t} else if ( a.priority < b.priority ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// When priorities are equal and names are different - use classes to compare.\\n\\treturn classesToString( a.class ) > classesToString( b.class );\\n}\\n\\n// Converts CSS classes passed with {@link module:engine/conversion/downcast-converters~HighlightDescriptor} to\\n// sorted string.\\n//\\n// @param {String|Array<String>} descriptor\\n// @returns {String}\\nfunction classesToString( classes ) {\\n\\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\\n}\\n\\n/**\\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\\n *\\n * @event change:top\\n * @param {Object} data Additional information about the change.\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.newDescriptor] New highlight\\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.oldDescriptor] Old highlight\\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\\n * @param {module:engine/view/writer~Writer} writer View writer that can be used to modify element.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module widget/utils\\n */\\n\\nimport HighlightStack from './highlightstack';\\n\\nconst widgetSymbol = Symbol( 'isWidget' );\\nconst labelSymbol = Symbol( 'label' );\\n\\n/**\\n * CSS class added to each widget element.\\n *\\n * @const {String}\\n */\\nexport const WIDGET_CLASS_NAME = 'ck-widget';\\n\\n/**\\n * CSS class added to currently selected widget element.\\n *\\n * @const {String}\\n */\\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\\n\\n/**\\n * Returns `true` if given {@link module:engine/view/element~Element} is a widget.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @returns {Boolean}\\n */\\nexport function isWidget( element ) {\\n\\treturn !!element.getCustomProperty( widgetSymbol );\\n}\\n\\n/**\\n * Converts given {@link module:engine/view/element~Element} to widget in following way:\\n * * sets `contenteditable` attribute to `\\\"true\\\"`,\\n * * adds custom `getFillerOffset` method returning `null`,\\n * * adds `ck-widget` CSS class,\\n * * adds custom property allowing to recognize widget elements by using {@link ~isWidget},\\n * * implements `addHighlight` and `removeHighlight` custom properties to handle view highlight on widgets.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @param {module:engine/view/writer~Writer} writer\\n * @param {Object} [options={}]\\n * @param {String|Function} [options.label] Element's label provided to {@link ~setLabel} function. It can be passed as\\n * a plain string or a function returning a string.\\n * @returns {module:engine/view/element~Element} Returns same element.\\n */\\nexport function toWidget( element, writer, options = {} ) {\\n\\twriter.setAttribute( 'contenteditable', 'false', element );\\n\\twriter.addClass( WIDGET_CLASS_NAME, element );\\n\\twriter.setCustomProperty( widgetSymbol, true, element );\\n\\telement.getFillerOffset = getFillerOffset;\\n\\n\\tif ( options.label ) {\\n\\t\\tsetLabel( element, options.label, writer );\\n\\t}\\n\\n\\tsetHighlightHandling(\\n\\t\\telement,\\n\\t\\twriter,\\n\\t\\t( element, descriptor, writer ) => writer.addClass( normalizeToArray( descriptor.class ), element ),\\n\\t\\t( element, descriptor, writer ) => writer.removeClass( normalizeToArray( descriptor.class ), element )\\n\\t);\\n\\n\\treturn element;\\n\\n\\t// Normalizes CSS class in descriptor that can be provided in form of an array or a string.\\n\\tfunction normalizeToArray( classes ) {\\n\\t\\treturn Array.isArray( classes ) ? classes : [ classes ];\\n\\t}\\n}\\n\\n/**\\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\\n * properly determine which highlight descriptor should be used at given time.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @param {module:engine/view/writer~Writer} writer\\n * @param {Function} add\\n * @param {Function} remove\\n */\\nexport function setHighlightHandling( element, writer, add, remove ) {\\n\\tconst stack = new HighlightStack();\\n\\n\\tstack.on( 'change:top', ( evt, data ) => {\\n\\t\\tif ( data.oldDescriptor ) {\\n\\t\\t\\tremove( element, data.oldDescriptor, data.writer );\\n\\t\\t}\\n\\n\\t\\tif ( data.newDescriptor ) {\\n\\t\\t\\tadd( element, data.newDescriptor, data.writer );\\n\\t\\t}\\n\\t} );\\n\\n\\twriter.setCustomProperty( 'addHighlight', ( element, descriptor, writer ) => stack.add( descriptor, writer ), element );\\n\\twriter.setCustomProperty( 'removeHighlight', ( element, id, writer ) => stack.remove( id, writer ), element );\\n}\\n\\n/**\\n * Sets label for given element.\\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\\n * {@link ~getLabel}.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @param {String|Function} labelOrCreator\\n *  * @param {module:engine/view/writer~Writer} writer\\n */\\nexport function setLabel( element, labelOrCreator, writer ) {\\n\\twriter.setCustomProperty( labelSymbol, labelOrCreator, element );\\n}\\n\\n/**\\n * Returns label for provided element.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @return {String}\\n */\\nexport function getLabel( element ) {\\n\\tconst labelCreator = element.getCustomProperty( labelSymbol );\\n\\n\\tif ( !labelCreator ) {\\n\\t\\treturn '';\\n\\t}\\n\\n\\treturn typeof labelCreator == 'function' ? labelCreator() : labelCreator;\\n}\\n\\n/**\\n * Adds functionality to provided {module:engine/view/editableelement~EditableElement} to act as a widget's editable:\\n * * adds `ck-editable` CSS class,\\n * * sets `contenteditable` as `true` when {module:engine/view/editableelement~EditableElement#isReadOnly} is `false`\\n * otherwise set `false`,\\n * * adds `ck-editable_focused` CSS class when editable is focused and removes it when it's blurred.\\n *\\n * @param {module:engine/view/editableelement~EditableElement} editable\\n * @returns {module:engine/view/editableelement~EditableElement} Returns same element that was provided in `editable` param.\\n */\\nexport function toWidgetEditable( editable, writer ) {\\n\\twriter.addClass( 'ck-editable', editable );\\n\\n\\t// Set initial contenteditable value.\\n\\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\\n\\n\\t// Bind contenteditable property to element#isReadOnly.\\n\\teditable.on( 'change:isReadOnly', ( evt, property, is ) => {\\n\\t\\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\\n\\t} );\\n\\n\\teditable.on( 'change:isFocused', ( evt, property, is ) => {\\n\\t\\tif ( is ) {\\n\\t\\t\\twriter.addClass( 'ck-editable_focused', editable );\\n\\t\\t} else {\\n\\t\\t\\twriter.removeClass( 'ck-editable_focused', editable );\\n\\t\\t}\\n\\t} );\\n\\n\\treturn editable;\\n}\\n\\n// Default filler offset function applied to all widget elements.\\n//\\n// @returns {null}\\nfunction getFillerOffset() {\\n\\treturn null;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/image/utils\\n */\\n\\nimport { toWidget, isWidget } from '@ckeditor/ckeditor5-widget/src/utils';\\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\\n\\nconst imageSymbol = Symbol( 'isImage' );\\n\\n/**\\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\\n * * adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element,\\n * * calls the {@link module:widget/utils~toWidget toWidget} function with the proper element's label creator.\\n *\\n * @param {module:engine/view/element~Element} viewElement\\n * @param {module:engine/view/writer~Writer} writer Instance of view writer.\\n * @param {String} label Element's label. It will be concatenated with the image `alt` attribute if one is present.\\n * @returns {module:engine/view/element~Element}\\n */\\nexport function toImageWidget( viewElement, writer, label ) {\\n\\twriter.setCustomProperty( imageSymbol, true, viewElement );\\n\\n\\treturn toWidget( viewElement, writer, { label: labelCreator } );\\n\\n\\tfunction labelCreator() {\\n\\t\\tconst imgElement = viewElement.getChild( 0 );\\n\\t\\tconst altText = imgElement.getAttribute( 'alt' );\\n\\n\\t\\treturn altText ? `${ altText } ${ label }` : label;\\n\\t}\\n}\\n\\n/**\\n * Checks if a given view element is an image widget.\\n *\\n * @param {module:engine/view/element~Element} viewElement\\n * @returns {Boolean}\\n */\\nexport function isImageWidget( viewElement ) {\\n\\treturn !!viewElement.getCustomProperty( imageSymbol ) && isWidget( viewElement );\\n}\\n\\n/**\\n * Checks if an image widget is the only selected element.\\n *\\n * @param {module:engine/view/selection~Selection} viewSelection\\n * @returns {Boolean}\\n */\\nexport function isImageWidgetSelected( viewSelection ) {\\n\\tconst viewElement = viewSelection.getSelectedElement();\\n\\n\\treturn !!( viewElement && isImageWidget( viewElement ) );\\n}\\n\\n/**\\n * Checks if the provided model element is an instance of {@link module:engine/model/element~Element Element} and its name\\n * is `image`.\\n *\\n * @param {module:engine/model/element~Element} modelElement\\n * @returns {Boolean}\\n */\\nexport function isImage( modelElement ) {\\n\\treturn modelElement instanceof ModelElement && modelElement.name == 'image';\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/image/imageediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport {\\n\\tviewFigureToModel,\\n\\tmodelToViewAttributeConverter,\\n\\tsrcsetAttributeConverter\\n} from './converters';\\n\\nimport { toImageWidget } from './utils';\\n\\nimport { downcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\\nimport { upcastElementToElement, upcastAttributeToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\\n\\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\\n\\n/**\\n * The image engine plugin.\\n * Registers `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\\n * Registers converters for editing and data pipelines.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst schema = editor.model.schema;\\n\\t\\tconst t = editor.t;\\n\\t\\tconst conversion = editor.conversion;\\n\\n\\t\\t// Configure schema.\\n\\t\\tschema.register( 'image', {\\n\\t\\t\\tisObject: true,\\n\\t\\t\\tisBlock: true,\\n\\t\\t\\tallowWhere: '$block',\\n\\t\\t\\tallowAttributes: [ 'alt', 'src', 'srcset' ]\\n\\t\\t} );\\n\\n\\t\\tconversion.for( 'dataDowncast' ).add( downcastElementToElement( {\\n\\t\\t\\tmodel: 'image',\\n\\t\\t\\tview: ( modelElement, viewWriter ) => createImageViewElement( viewWriter )\\n\\t\\t} ) );\\n\\n\\t\\tconversion.for( 'editingDowncast' ).add( downcastElementToElement( {\\n\\t\\t\\tmodel: 'image',\\n\\t\\t\\tview: ( modelElement, viewWriter ) => toImageWidget( createImageViewElement( viewWriter ), viewWriter, t( 'image widget' ) )\\n\\t\\t} ) );\\n\\n\\t\\tconversion.for( 'downcast' )\\n\\t\\t\\t.add( modelToViewAttributeConverter( 'src' ) )\\n\\t\\t\\t.add( modelToViewAttributeConverter( 'alt' ) )\\n\\t\\t\\t.add( srcsetAttributeConverter() );\\n\\n\\t\\tconversion.for( 'upcast' )\\n\\t\\t\\t.add( upcastElementToElement( {\\n\\t\\t\\t\\tview: {\\n\\t\\t\\t\\t\\tname: 'img',\\n\\t\\t\\t\\t\\tattribute: {\\n\\t\\t\\t\\t\\t\\tsrc: true\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tmodel: ( viewImage, modelWriter ) => modelWriter.createElement( 'image', { src: viewImage.getAttribute( 'src' ) } )\\n\\t\\t\\t} ) )\\n\\t\\t\\t.add( upcastAttributeToAttribute( {\\n\\t\\t\\t\\tview: {\\n\\t\\t\\t\\t\\tname: 'img',\\n\\t\\t\\t\\t\\tkey: 'alt'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tmodel: 'alt'\\n\\t\\t\\t} ) )\\n\\t\\t\\t.add( upcastAttributeToAttribute( {\\n\\t\\t\\t\\tview: {\\n\\t\\t\\t\\t\\tname: 'img',\\n\\t\\t\\t\\t\\tkey: 'srcset'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tmodel: {\\n\\t\\t\\t\\t\\tkey: 'srcset',\\n\\t\\t\\t\\t\\tvalue: viewImage => {\\n\\t\\t\\t\\t\\t\\tconst value = {\\n\\t\\t\\t\\t\\t\\t\\tdata: viewImage.getAttribute( 'srcset' )\\n\\t\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\t\\tif ( viewImage.hasAttribute( 'width' ) ) {\\n\\t\\t\\t\\t\\t\\t\\tvalue.width = viewImage.getAttribute( 'width' );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} ) )\\n\\t\\t\\t.add( viewFigureToModel() );\\n\\t}\\n}\\n\\n// Creates a view element representing the image.\\n//\\n//\\t\\t<figure class=\\\"image\\\"><img></img></figure>\\n//\\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\\n//\\n// @private\\n// @param {module:engine/view/writer~Writer} writer\\n// @return {module:engine/view/containerelement~ContainerElement}\\nexport function createImageViewElement( writer ) {\\n\\tconst emptyElement = writer.createEmptyElement( 'img' );\\n\\tconst figure = writer.createContainerElement( 'figure', { class: 'image' } );\\n\\n\\twriter.insert( ViewPosition.createAt( figure ), emptyElement );\\n\\n\\treturn figure;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/mouseobserver\\n */\\n\\nimport DomEventObserver from './domeventobserver';\\n\\n/**\\n * Mouse events observer.\\n *\\n * Note that this observer is not available by default. To make it available it needs to be added to\\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class MouseObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tthis.domEventType = 'mousedown';\\n\\t}\\n\\n\\tonDomEvent( domEvent ) {\\n\\t\\tthis.fire( domEvent.type, domEvent );\\n\\t}\\n}\\n\\n/**\\n * Fired when mouse button is pressed down on one of the editables.\\n *\\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\\n *\\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\\n *\\n * @see module:engine/view/observer/mouseobserver~MouseObserver\\n * @event module:engine/view/document~Document#event:mousedown\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module widget/widget\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport ViewEditableElement from '@ckeditor/ckeditor5-engine/src/view/editableelement';\\nimport RootEditableElement from '@ckeditor/ckeditor5-engine/src/view/rooteditableelement';\\nimport { isWidget, WIDGET_SELECTED_CLASS_NAME, getLabel } from './utils';\\nimport { keyCodes, getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\nimport '../theme/widget.css';\\n\\nconst selectAllKeystrokeCode = parseKeystroke( 'Ctrl+A' );\\n\\n/**\\n * The widget plugin.\\n * Registers model to view selection converter for editing pipeline. It is hooked after default selection conversion.\\n * If converted selection is placed around widget element, selection is marked as fake. Additionally, proper CSS class\\n * is added to indicate that widget has been selected.\\n * Adds default {@link module:engine/view/document~Document#event:mousedown mousedown} handling on widget elements.\\n *\\n * @extends module:core/plugin~Plugin.\\n */\\nexport default class Widget extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Widget';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst view = this.editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\n\\t\\t/**\\n\\t\\t * Holds previously selected widgets.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @type {Set.<module:engine/view/element~Element>}\\n\\t\\t */\\n\\t\\tthis._previouslySelected = new Set();\\n\\n\\t\\t// Model to view selection converter.\\n\\t\\t// Converts selection placed over widget element to fake selection\\n\\t\\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\\n\\t\\t\\t// Remove selected class from previously selected widgets.\\n\\t\\t\\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\\n\\n\\t\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\t\\tconst viewSelection = viewWriter.document.selection;\\n\\t\\t\\tconst selectedElement = viewSelection.getSelectedElement();\\n\\n\\t\\t\\tfor ( const range of viewSelection.getRanges() ) {\\n\\t\\t\\t\\tfor ( const value of range ) {\\n\\t\\t\\t\\t\\tconst node = value.item;\\n\\n\\t\\t\\t\\t\\tif ( node.is( 'element' ) && isWidget( node ) ) {\\n\\t\\t\\t\\t\\t\\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\\n\\t\\t\\t\\t\\t\\tthis._previouslySelected.add( node );\\n\\n\\t\\t\\t\\t\\t\\t// Check if widget is a single element selected.\\n\\t\\t\\t\\t\\t\\tif ( node == selectedElement ) {\\n\\t\\t\\t\\t\\t\\t\\tviewWriter.setSelection( viewSelection.getRanges(), { fake: true, label: getLabel( selectedElement ) } );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// If mouse down is pressed on widget - create selection over whole widget.\\n\\t\\tview.addObserver( MouseObserver );\\n\\t\\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\\n\\n\\t\\t// Handle custom keydown behaviour.\\n\\t\\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => this._onKeydown( ...args ), { priority: 'high' } );\\n\\n\\t\\t// Handle custom delete behaviour.\\n\\t\\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\\n\\t\\t\\tif ( this._handleDelete( data.direction == 'forward' ) ) {\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'high' } );\\n\\t}\\n\\n\\t/**\\n\\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\\n\\t *\\n\\t * @private\\n\\t * @param {module:utils/eventinfo~EventInfo} eventInfo\\n\\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\\n\\t */\\n\\t_onMousedown( eventInfo, domEventData ) {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\t\\tlet element = domEventData.target;\\n\\n\\t\\t// Do nothing if inside nested editable.\\n\\t\\tif ( isInsideNestedEditable( element ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// If target is not a widget element - check if one of the ancestors is.\\n\\t\\tif ( !isWidget( element ) ) {\\n\\t\\t\\telement = element.findAncestor( isWidget );\\n\\n\\t\\t\\tif ( !element ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tdomEventData.preventDefault();\\n\\n\\t\\t// Focus editor if is not focused already.\\n\\t\\tif ( !viewDocument.isFocused ) {\\n\\t\\t\\tview.focus();\\n\\t\\t}\\n\\n\\t\\t// Create model selection over widget.\\n\\t\\tconst modelElement = editor.editing.mapper.toModelElement( element );\\n\\n\\t\\teditor.model.change( () => {\\n\\t\\t\\tthis._setSelectionOverElement( modelElement );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\\n\\t *\\n\\t * @private\\n\\t * @param {module:utils/eventinfo~EventInfo} eventInfo\\n\\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\\n\\t */\\n\\t_onKeydown( eventInfo, domEventData ) {\\n\\t\\tconst keyCode = domEventData.keyCode;\\n\\t\\tconst isForward = keyCode == keyCodes.delete || keyCode == keyCodes.arrowdown || keyCode == keyCodes.arrowright;\\n\\t\\tlet wasHandled = false;\\n\\n\\t\\t// Checks if the keys were handled and then prevents the default event behaviour and stops\\n\\t\\t// the propagation.\\n\\t\\tif ( isArrowKeyCode( keyCode ) ) {\\n\\t\\t\\twasHandled = this._handleArrowKeys( isForward );\\n\\t\\t} else if ( isSelectAllKeyCode( domEventData ) ) {\\n\\t\\t\\twasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\\n\\t\\t}\\n\\n\\t\\tif ( wasHandled ) {\\n\\t\\t\\tdomEventData.preventDefault();\\n\\t\\t\\teventInfo.stop();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Handles delete keys: backspace and delete.\\n\\t *\\n\\t * @private\\n\\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\\n\\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\\n\\t */\\n\\t_handleDelete( isForward ) {\\n\\t\\t// Do nothing when the read only mode is enabled.\\n\\t\\tif ( this.editor.isReadOnly ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst modelDocument = this.editor.model.document;\\n\\t\\tconst modelSelection = modelDocument.selection;\\n\\n\\t\\t// Do nothing on non-collapsed selection.\\n\\t\\tif ( !modelSelection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst objectElement = this._getObjectElementNextToSelection( isForward );\\n\\n\\t\\tif ( objectElement ) {\\n\\t\\t\\tthis.editor.model.change( writer => {\\n\\t\\t\\t\\tlet previousNode = modelSelection.anchor.parent;\\n\\n\\t\\t\\t\\t// Remove previous element if empty.\\n\\t\\t\\t\\twhile ( previousNode.isEmpty ) {\\n\\t\\t\\t\\t\\tconst nodeToRemove = previousNode;\\n\\t\\t\\t\\t\\tpreviousNode = nodeToRemove.parent;\\n\\n\\t\\t\\t\\t\\twriter.remove( nodeToRemove );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tthis._setSelectionOverElement( objectElement );\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Handles arrow keys.\\n\\t *\\n\\t * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\\n\\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\\n\\t */\\n\\t_handleArrowKeys( isForward ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst schema = model.schema;\\n\\t\\tconst modelDocument = model.document;\\n\\t\\tconst modelSelection = modelDocument.selection;\\n\\t\\tconst objectElement = modelSelection.getSelectedElement();\\n\\n\\t\\t// If object element is selected.\\n\\t\\tif ( objectElement && schema.isObject( objectElement ) ) {\\n\\t\\t\\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\\n\\t\\t\\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\\n\\n\\t\\t\\tif ( newRange ) {\\n\\t\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\t\\twriter.setSelection( newRange );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// If selection is next to object element.\\n\\t\\t// Return if not collapsed.\\n\\t\\tif ( !modelSelection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst objectElement2 = this._getObjectElementNextToSelection( isForward );\\n\\n\\t\\tif ( objectElement2 instanceof ModelElement && schema.isObject( objectElement2 ) ) {\\n\\t\\t\\tmodel.change( () => {\\n\\t\\t\\t\\tthis._setSelectionOverElement( objectElement2 );\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\\n\\t * content of the nested editable if already anchored in one.\\n\\t *\\n\\t * See: {@link module:engine/model/schema~Schema#getLimitElement}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_selectAllNestedEditableContent() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst documentSelection = model.document.selection;\\n\\t\\tconst limitElement = model.schema.getLimitElement( documentSelection );\\n\\n\\t\\tif ( documentSelection.getFirstRange().root == limitElement ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\twriter.setSelection( ModelRange.createIn( limitElement ) );\\n\\t\\t} );\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Handles <kbd>CTRL + A</kbd> when widget is selected.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\\n\\t */\\n\\t_selectAllContent() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst editing = this.editor.editing;\\n\\t\\tconst view = editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\t\\tconst viewSelection = viewDocument.selection;\\n\\n\\t\\tconst selectedElement = viewSelection.getSelectedElement();\\n\\n\\t\\t// Only widget is selected.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-widget/issues/23\\n\\t\\tif ( selectedElement && isWidget( selectedElement ) ) {\\n\\t\\t\\tconst widgetParent = editing.mapper.toModelElement( selectedElement.parent );\\n\\n\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\twriter.setSelection( ModelRange.createIn( widgetParent ) );\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/element~Element} element\\n\\t */\\n\\t_setSelectionOverElement( element ) {\\n\\t\\tthis.editor.model.change( writer => {\\n\\t\\t\\twriter.setSelection( ModelRange.createOn( element ) );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\\n\\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\\n\\t * {@link module:engine/model/schema~Schema schema} as `object`.\\n\\t *\\n\\t * @private\\n\\t * @param {Boolean} forward Direction of checking.\\n\\t * @returns {module:engine/model/element~Element|null}\\n\\t */\\n\\t_getObjectElementNextToSelection( forward ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst schema = model.schema;\\n\\t\\tconst modelSelection = model.document.selection;\\n\\n\\t\\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\\n\\t\\t// to its current state after undo.\\n\\t\\tconst probe = new ModelSelection( modelSelection );\\n\\t\\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\\n\\t\\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\\n\\n\\t\\tif ( objectElement instanceof ModelElement && schema.isObject( objectElement ) ) {\\n\\t\\t\\treturn objectElement;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\t/**\\n\\t * Removes CSS class from previously selected widgets.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/writer~Writer} writer\\n\\t */\\n\\t_clearPreviouslySelectedWidgets( writer ) {\\n\\t\\tfor ( const widget of this._previouslySelected ) {\\n\\t\\t\\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\\n\\t\\t}\\n\\n\\t\\tthis._previouslySelected.clear();\\n\\t}\\n}\\n\\n// Returns 'true' if provided key code represents one of the arrow keys.\\n//\\n// @param {Number} keyCode\\n// @returns {Boolean}\\nfunction isArrowKeyCode( keyCode ) {\\n\\treturn keyCode == keyCodes.arrowright ||\\n\\t\\tkeyCode == keyCodes.arrowleft ||\\n\\t\\tkeyCode == keyCodes.arrowup ||\\n\\t\\tkeyCode == keyCodes.arrowdown;\\n}\\n\\n// Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\\n//\\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\\n// @returns {Boolean}\\nfunction isSelectAllKeyCode( domEventData ) {\\n\\treturn getCode( domEventData ) == selectAllKeystrokeCode;\\n}\\n\\n// Returns `true` when element is a nested editable or is placed inside one.\\n//\\n// @param {module:engine/view/element~Element}\\n// @returns {Boolean}\\nfunction isInsideNestedEditable( element ) {\\n\\twhile ( element ) {\\n\\t\\tif ( element instanceof ViewEditableElement && !( element instanceof RootEditableElement ) ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\telement = element.parent;\\n\\t}\\n\\n\\treturn false;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetextalternative/imagetextalternativecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport { isImage } from '../image/utils';\\n\\n/**\\n * The image text alternative command. It is used to change the `alt` attribute on `<image>` elements.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class ImageTextAlternativeCommand extends Command {\\n\\t/**\\n\\t * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\\n\\t *\\n\\t * @readonly\\n\\t * @observable\\n\\t * @member {String|Boolean} #value\\n\\t */\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst element = this.editor.model.document.selection.getSelectedElement();\\n\\n\\t\\tthis.isEnabled = isImage( element );\\n\\n\\t\\tif ( isImage( element ) && element.hasAttribute( 'alt' ) ) {\\n\\t\\t\\tthis.value = element.getAttribute( 'alt' );\\n\\t\\t} else {\\n\\t\\t\\tthis.value = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} options\\n\\t * @param {String} options.newValue The new value of the `alt` attribute to set.\\n\\t */\\n\\texecute( options ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst imageElement = model.document.selection.getSelectedElement();\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\twriter.setAttribute( 'alt', options.newValue, imageElement );\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetextalternative/imagetextalternativeediting\\n */\\n\\nimport ImageTextAlternativeCommand from './imagetextalternativecommand';\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\n/**\\n * The image text alternative engine plugin.\\n * Registers the `imageTextAlternative` command.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageTextAlternativeEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tthis.editor.commands.add( 'imageTextAlternative', new ImageTextAlternativeCommand( this.editor ) );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/bindings/clickoutsidehandler\\n */\\n\\n/* global document */\\n\\n/**\\n * Handles clicking **outside** of a specified set of elements, then fires an action.\\n *\\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\\n * certain issues when the user keeps holding the mouse button and the UI cannot react\\n * properly.\\n *\\n * @param {Object} options Configuration options.\\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\\n * should be added.\\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\\n * handler. Clicking any of them or their descendants will **not** fire the callback.\\n * @param {Function} options.callback An action executed by the handler.\\n */\\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\\n\\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\\n\\t\\tif ( !activator() ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tfor ( const contextElement of contextElements ) {\\n\\t\\t\\tif ( contextElement.contains( target ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tcallback();\\n\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/labeledinput/labeledinputview\\n */\\n\\nimport View from '../view';\\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\\n\\nimport LabelView from '../label/labelview';\\n\\n/**\\n * The labeled input view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class LabeledInputView extends View {\\n\\t/**\\n\\t * Creates an instance of the labeled input view class.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} locale The locale instance.\\n\\t * @param {Function} InputView Constructor of the input view.\\n\\t */\\n\\tconstructor( locale, InputView ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst id = `ck-input-${ uid() }`;\\n\\n\\t\\t/**\\n\\t\\t * The text of the label.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #label\\n\\t\\t */\\n\\t\\tthis.set( 'label' );\\n\\n\\t\\t/**\\n\\t\\t * The value of the input.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #value\\n\\t\\t */\\n\\t\\tthis.set( 'value' );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the component is in read-only mode.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\t/**\\n\\t\\t * The label view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/label/labelview~LabelView} #labelView\\n\\t\\t */\\n\\t\\tthis.labelView = this._createLabelView( id );\\n\\n\\t\\t/**\\n\\t\\t * The input view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/view~View} #inputView\\n\\t\\t */\\n\\t\\tthis.inputView = this._createInputView( InputView, id );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-labeled-input',\\n\\t\\t\\t\\t\\tbind.if( 'isReadOnly', 'ck-disabled' )\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis.labelView,\\n\\t\\t\\t\\tthis.inputView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Creates label view class instance and bind with view.\\n\\t *\\n\\t * @private\\n\\t * @param {String} id Unique id to set as labelView#for attribute.\\n\\t * @returns {module:ui/label/labelview~LabelView}\\n\\t */\\n\\t_createLabelView( id ) {\\n\\t\\tconst labelView = new LabelView( this.locale );\\n\\n\\t\\tlabelView.for = id;\\n\\t\\tlabelView.bind( 'text' ).to( this, 'label' );\\n\\n\\t\\treturn labelView;\\n\\t}\\n\\n\\t/**\\n\\t * Creates input view class instance and bind with view.\\n\\t *\\n\\t * @private\\n\\t * @param {Function} InputView Input view constructor.\\n\\t * @param {String} id Unique id to set as inputView#id attribute.\\n\\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\\n\\t */\\n\\t_createInputView( InputView, id ) {\\n\\t\\tconst inputView = new InputView( this.locale );\\n\\n\\t\\tinputView.id = id;\\n\\t\\tinputView.bind( 'value' ).to( this );\\n\\t\\tinputView.bind( 'isReadOnly' ).to( this );\\n\\n\\t\\treturn inputView;\\n\\t}\\n\\n\\t/**\\n\\t * Moves the focus to the input and selects the value.\\n\\t */\\n\\tselect() {\\n\\t\\tthis.inputView.select();\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the input.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.inputView.focus();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/inputtext/inputtextview\\n */\\n\\nimport View from '../view';\\n\\nimport '../../theme/components/inputtext/inputtext.css';\\n\\n/**\\n * The text input view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class InputTextView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * The value of the input.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #value\\n\\t\\t */\\n\\t\\tthis.set( 'value' );\\n\\n\\t\\t/**\\n\\t\\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #id\\n\\t\\t */\\n\\t\\tthis.set( 'id' );\\n\\n\\t\\t/**\\n\\t\\t * The `placeholder` attribute of the input.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #placeholder\\n\\t\\t */\\n\\t\\tthis.set( 'placeholder' );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the input view is in read-only mode.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isReadOnly\\n\\t\\t */\\n\\t\\tthis.set( 'isReadOnly', false );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'input',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\ttype: 'text',\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-input',\\n\\t\\t\\t\\t\\t'ck-input-text'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tid: bind.to( 'id' ),\\n\\t\\t\\t\\tplaceholder: bind.to( 'placeholder' ),\\n\\t\\t\\t\\treadonly: bind.to( 'isReadOnly' )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tconst setValue = value => {\\n\\t\\t\\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\\n\\t\\t};\\n\\n\\t\\tsetValue( this.value );\\n\\n\\t\\t// Bind `this.value` to the DOM element's value.\\n\\t\\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\\n\\t\\tthis.on( 'change:value', ( evt, name, value ) => {\\n\\t\\t\\tsetValue( value );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Moves the focus to the input and selects the value.\\n\\t */\\n\\tselect() {\\n\\t\\tthis.element.select();\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the input.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.element.focus();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/bindings/submithandler\\n */\\n\\n/**\\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\\n *\\n *\\t\\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tclass AnyFormView extends View {\\n *\\t\\t\\tconstructor() {\\n *\\t\\t\\t\\tsuper();\\n *\\n *\\t\\t\\t\\t// ...\\n *\\n *\\t\\t\\t\\tsubmitHandler( {\\n *\\t\\t\\t\\t\\tview: this\\n *\\t\\t\\t\\t} );\\n *\\t\\t\\t}\\n *\\t\\t}\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tconst view = new AnyFormView();\\n *\\n *\\t\\t// A sample listener attached by an emitter working with the view.\\n *\\t\\tthis.listenTo( view, 'submit', () => {\\n *\\t\\t\\tsaveTheFormData();\\n *\\t\\t\\thideTheForm();\\n *\\t\\t} );\\n *\\n * @param {Object} [options] Configuration options.\\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\\n */\\nexport default function submitHandler( { view } ) {\\n\\tview.listenTo( view.element, 'submit', ( evt, domEvt ) => {\\n\\t\\tdomEvt.preventDefault();\\n\\t\\tview.fire( 'submit' );\\n\\t}, { useCapture: true } );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetextalternative/ui/textalternativeformview\\n */\\n\\nimport View from '@ckeditor/ckeditor5-ui/src/view';\\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\\n\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\\n\\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\\n\\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\\nimport '../../../theme/textalternativeform.css';\\n\\n/**\\n * The TextAlternativeFormView class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class TextAlternativeFormView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst t = this.locale.t;\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\t/**\\n\\t\\t * A textarea with a label.\\n\\t\\t *\\n\\t\\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView} #labeledTextarea\\n\\t\\t */\\n\\t\\tthis.labeledInput = this._createLabeledInputView();\\n\\n\\t\\t/**\\n\\t\\t * A button used to submit the form.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\\n\\t\\t */\\n\\t\\tthis.saveButtonView = this._createButton( t( 'Save' ), checkIcon );\\n\\t\\tthis.saveButtonView.type = 'submit';\\n\\n\\t\\t/**\\n\\t\\t * A button used to cancel the form.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\\n\\t\\t */\\n\\t\\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), cancelIcon, 'cancel' );\\n\\n\\t\\t/**\\n\\t\\t * A collection of views which can be focused in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis._focusables = new ViewCollection();\\n\\n\\t\\t/**\\n\\t\\t * Helps cycling over {@link #_focusables} in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/focuscycler~FocusCycler}\\n\\t\\t */\\n\\t\\tthis._focusCycler = new FocusCycler( {\\n\\t\\t\\tfocusables: this._focusables,\\n\\t\\t\\tfocusTracker: this.focusTracker,\\n\\t\\t\\tkeystrokeHandler: this.keystrokes,\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\t// Navigate form fields backwards using the Shift + Tab keystroke.\\n\\t\\t\\t\\tfocusPrevious: 'shift + tab',\\n\\n\\t\\t\\t\\t// Navigate form fields forwards using the Tab key.\\n\\t\\t\\t\\tfocusNext: 'tab'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.saveButtonView.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-button-action'\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'form',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-text-alternative-form',\\n\\t\\t\\t\\t],\\n\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-image/issues/40\\n\\t\\t\\t\\ttabindex: '-1'\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis.labeledInput,\\n\\t\\t\\t\\tthis.saveButtonView,\\n\\t\\t\\t\\tthis.cancelButtonView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\n\\t\\tsubmitHandler( { view: this } );\\n\\n\\t\\t[ this.labeledInput, this.saveButtonView, this.cancelButtonView ]\\n\\t\\t\\t.forEach( v => {\\n\\t\\t\\t\\t// Register the view as focusable.\\n\\t\\t\\t\\tthis._focusables.add( v );\\n\\n\\t\\t\\t\\t// Register the view in the focus tracker.\\n\\t\\t\\t\\tthis.focusTracker.add( v.element );\\n\\t\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Creates the button view.\\n\\t *\\n\\t * @private\\n\\t * @param {String} label The button label\\n\\t * @param {String} icon The button's icon.\\n\\t * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\\n\\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\\n\\t */\\n\\t_createButton( label, icon, eventName ) {\\n\\t\\tconst button = new ButtonView( this.locale );\\n\\n\\t\\tbutton.set( {\\n\\t\\t\\tlabel,\\n\\t\\t\\ticon,\\n\\t\\t\\ttooltip: true\\n\\t\\t} );\\n\\n\\t\\tif ( eventName ) {\\n\\t\\t\\tbutton.delegate( 'execute' ).to( this, eventName );\\n\\t\\t}\\n\\n\\t\\treturn button;\\n\\t}\\n\\n\\t/**\\n\\t * Creates an input with a label.\\n\\t *\\n\\t * @private\\n\\t * @return {module:ui/labeledinput/labeledinputview~LabeledInputView}\\n\\t */\\n\\t_createLabeledInputView() {\\n\\t\\tconst t = this.locale.t;\\n\\t\\tconst labeledInput = new LabeledInputView( this.locale, InputTextView );\\n\\n\\t\\tlabeledInput.label = t( 'Text alternative' );\\n\\t\\tlabeledInput.inputView.placeholder = t( 'Text alternative' );\\n\\n\\t\\treturn labeledInput;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/position\\n */\\n\\nimport global from './global';\\nimport Rect from './rect';\\nimport getPositionedAncestor from './getpositionedancestor';\\nimport getBorderWidths from './getborderwidths';\\nimport isFunction from '../lib/lodash/isFunction';\\n\\n/**\\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\\n * into consideration.\\n *\\n *\\t\\t// The element which is to be positioned.\\n *\\t\\tconst element = document.body.querySelector( '#toolbar' );\\n *\\n *\\t\\t// A target to which the element is positioned relatively.\\n *\\t\\tconst target = document.body.querySelector( '#container' );\\n *\\n *\\t\\t// Finding the optimal coordinates for the positioning.\\n *\\t\\tconst { left, top, name } = getOptimalPosition( {\\n *\\t\\t\\telement: element,\\n *\\t\\t\\ttarget: target,\\n *\\n * \\t\\t\\t// The algorithm will chose among these positions to meet the requirements such\\n * \\t\\t\\t// as \\\"limiter\\\" element or \\\"fitInViewport\\\", set below. The positions are considered\\n * \\t\\t\\t// in the order of the array.\\n *\\t\\t\\tpositions: [\\n *\\t\\t\\t\\t//\\n *\\t\\t\\t \\t//\\t[ Target ]\\n *\\t\\t\\t\\t//\\t+-----------------+\\n *\\t\\t\\t\\t//\\t|     Element     |\\n *\\t\\t\\t\\t//\\t+-----------------+\\n *\\t\\t\\t\\t//\\n *\\t\\t\\t\\ttargetRect => ( {\\n *\\t\\t\\t\\t\\ttop: targetRect.bottom,\\n *\\t\\t\\t\\t\\tleft: targetRect.left,\\n *\\t\\t\\t\\t\\tname: 'mySouthEastPosition'\\n *\\t\\t\\t\\t} ),\\n *\\n *\\t\\t\\t\\t//\\n *\\t\\t\\t\\t//\\t+-----------------+\\n *\\t\\t\\t\\t//\\t|     Element     |\\n *\\t\\t\\t\\t//\\t+-----------------+\\n *\\t\\t\\t\\t//\\t[ Target ]\\n *\\t\\t\\t\\t//\\n *\\t\\t\\t\\t( targetRect, elementRect ) => ( {\\n *\\t\\t\\t\\t\\ttop: targetRect.top - elementRect.height,\\n *\\t\\t\\t\\t\\tleft: targetRect.left,\\n *\\t\\t\\t\\t\\tname: 'myNorthEastPosition'\\n *\\t\\t\\t\\t} )\\n *\\t\\t\\t],\\n *\\n *\\t\\t\\t// Find a position such guarantees the element remains within visible boundaries of <body>.\\n *\\t\\t\\tlimiter: document.body,\\n *\\n *\\t\\t\\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\\n *\\t\\t\\tfitInViewport: true\\n *\\t\\t} );\\n *\\n *\\t\\t// The best position which fits into document.body and the viewport. May be useful\\n *\\t\\t// to set proper class on the `element`.\\n *\\t\\tconsole.log( name ); -> \\\"myNorthEastPosition\\\"\\n *\\n *\\t\\t// Using the absolute coordinates which has been found to position the element\\n *\\t\\t// as in the diagram depicting the \\\"myNorthEastPosition\\\" position.\\n *\\t\\telement.style.top = top;\\n *\\t\\telement.style.left = left;\\n *\\n * @param {module:utils/dom/position~Options} options Positioning options object.\\n * @returns {module:utils/dom/position~Position}\\n */\\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\\n\\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\\n\\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\\n\\tif ( isFunction( target ) ) {\\n\\t\\ttarget = target();\\n\\t}\\n\\n\\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\\n\\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\\n\\tif ( isFunction( limiter ) ) {\\n\\t\\tlimiter = limiter();\\n\\t}\\n\\n\\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\\n\\tconst elementRect = new Rect( element );\\n\\tconst targetRect = new Rect( target );\\n\\n\\tlet bestPosition;\\n\\tlet name;\\n\\n\\t// If there are no limits, just grab the very first position and be done with that drama.\\n\\tif ( !limiter && !fitInViewport ) {\\n\\t\\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\\n\\t} else {\\n\\t\\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\\n\\t\\tconst viewportRect = fitInViewport && new Rect( global.window );\\n\\n\\t\\t[ name, bestPosition ] =\\n\\t\\t\\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\\n\\t\\t\\t// If there's no best position found, i.e. when all intersections have no area because\\n\\t\\t\\t// rects have no width or height, then just use the first available position.\\n\\t\\t\\tgetPosition( positions[ 0 ], targetRect, elementRect );\\n\\t}\\n\\n\\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\\n\\n\\tif ( positionedElementAncestor ) {\\n\\t\\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\\n\\t\\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\\n\\n\\t\\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\\n\\t\\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\\n\\t\\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\\n\\t\\t// with respect to that positioned ancestor.\\n\\t\\tleft -= ancestorPosition.left;\\n\\t\\ttop -= ancestorPosition.top;\\n\\n\\t\\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\\n\\t\\t// If there's some positioned ancestor of the panel, not only its position must be taken into\\n\\t\\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\\n\\t\\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\\n\\t\\t// must compensate that scrolling.\\n\\t\\tleft += positionedElementAncestor.scrollLeft;\\n\\t\\ttop += positionedElementAncestor.scrollTop;\\n\\n\\t\\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\\n\\t\\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\\n\\t\\t// while `position: absolute` positioning does not consider it.\\n\\t\\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\\n\\t\\t// not upper-left corner of its border.\\n\\t\\tleft -= ancestorBorderWidths.left;\\n\\t\\ttop -= ancestorBorderWidths.top;\\n\\t}\\n\\n\\treturn { left, top, name };\\n}\\n\\n// For given position function, returns a corresponding `Rect` instance.\\n//\\n// @private\\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\\n// @returns {Array} An array containing position name and its Rect.\\nfunction getPosition( position, targetRect, elementRect ) {\\n\\tconst { left, top, name } = position( targetRect, elementRect );\\n\\n\\treturn [ name, elementRect.clone().moveTo( left, top ) ];\\n}\\n\\n// For a given array of positioning functions, returns such that provides the best\\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\\n//\\n// @private\\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\\n// @returns {Array} An array containing the name of the position and it's rect.\\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\\n\\tlet maxLimiterIntersectArea = 0;\\n\\tlet maxViewportIntersectArea = 0;\\n\\tlet bestPositionRect;\\n\\tlet bestPositionName;\\n\\n\\t// This is when element is fully visible.\\n\\tconst elementRectArea = elementRect.getArea();\\n\\n\\tpositions.some( position => {\\n\\t\\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\\n\\t\\tlet limiterIntersectArea;\\n\\t\\tlet viewportIntersectArea;\\n\\n\\t\\tif ( limiterRect ) {\\n\\t\\t\\tif ( viewportRect ) {\\n\\t\\t\\t\\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\\n\\t\\t\\t\\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\\n\\n\\t\\t\\t\\tif ( limiterViewportIntersectRect ) {\\n\\t\\t\\t\\t\\t// If the limiter is within the viewport, then check the intersection between that part of the\\n\\t\\t\\t\\t\\t// limiter and actual position.\\n\\t\\t\\t\\t\\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlimiterIntersectArea = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif ( viewportRect ) {\\n\\t\\t\\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\\n\\t\\t}\\n\\n\\t\\t// The only criterion: intersection with the viewport.\\n\\t\\tif ( viewportRect && !limiterRect ) {\\n\\t\\t\\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\\n\\t\\t\\t\\tsetBestPosition();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// The only criterion: intersection with the limiter.\\n\\t\\telse if ( !viewportRect && limiterRect ) {\\n\\t\\t\\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\\n\\t\\t\\t\\tsetBestPosition();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\\n\\t\\telse {\\n\\t\\t\\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\\n\\t\\t\\t\\tsetBestPosition();\\n\\t\\t\\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\\n\\t\\t\\t\\tsetBestPosition();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction setBestPosition() {\\n\\t\\t\\tmaxViewportIntersectArea = viewportIntersectArea;\\n\\t\\t\\tmaxLimiterIntersectArea = limiterIntersectArea;\\n\\t\\t\\tbestPositionRect = positionRect;\\n\\t\\t\\tbestPositionName = positionName;\\n\\t\\t}\\n\\n\\t\\t// If a such position is found that element is fully container by the limiter then, obviously,\\n\\t\\t// there will be no better one, so finishing.\\n\\t\\treturn limiterIntersectArea === elementRectArea;\\n\\t} );\\n\\n\\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\\n}\\n\\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\\n// This function converts Rect to `position: absolute` coordinates.\\n//\\n// @private\\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\\nfunction getAbsoluteRectCoordinates( { left, top } ) {\\n\\tconst { scrollX, scrollY } = global.window;\\n\\n\\treturn {\\n\\t\\tleft: left + scrollX,\\n\\t\\ttop: top + scrollY,\\n\\t};\\n}\\n\\n/**\\n * The `getOptimalPosition` helper options.\\n *\\n * @interface module:utils/dom/position~Options\\n */\\n\\n/**\\n * Element that is to be positioned.\\n *\\n * @member {HTMLElement} #element\\n */\\n\\n/**\\n * Target with respect to which the `element` is to be positioned.\\n *\\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\\n */\\n\\n/**\\n * An array of functions which return {@link module:utils/dom/position~Position} relative\\n * to the `target`, in the order of preference.\\n *\\n * @member {Array.<Function>} #positions\\n */\\n\\n/**\\n * When set, the algorithm will chose position which fits the most in the\\n * limiter's bounding rect.\\n *\\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\\n */\\n\\n/**\\n * When set, the algorithm will chose such a position which fits `element`\\n * the most inside visible viewport.\\n *\\n * @member {Boolean} #fitInViewport\\n */\\n\\n/**\\n * An object describing a position in `position: absolute` coordinate\\n * system, along with position name.\\n *\\n * @typedef {Object} module:utils/dom/position~Position\\n *\\n * @property {Number} top Top position offset.\\n * @property {Number} left Left position offset.\\n * @property {String} name Name of the position.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module utils/dom/getpositionedancestor\\n */\\n\\nimport global from './global';\\n\\n/**\\n * For a given element, returns the nearest ancestor element which CSS position is not \\\"static\\\".\\n *\\n * @param {HTMLElement} element Native DOM element to be checked.\\n * @returns {HTMLElement|null}\\n */\\nexport default function getPositionedAncestor( element ) {\\n\\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\\n\\t\\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\\n\\t\\t\\treturn element;\\n\\t\\t}\\n\\n\\t\\telement = element.parentElement;\\n\\t}\\n\\n\\treturn null;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/panel/balloon/balloonpanelview\\n */\\n\\nimport View from '../../view';\\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\\nimport isElement from '@ckeditor/ckeditor5-utils/src/lib/lodash/isElement';\\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\\n\\nimport '../../../theme/components/panel/balloonpanel.css';\\n\\nconst toPx = toUnit( 'px' );\\nconst defaultLimiterElement = global.document.body;\\n\\n/**\\n * The balloon panel view class.\\n *\\n * A floating container which can\\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\\n * {@link module:utils/dom/position~Options#target target} in DOM and remain in that position\\n * e.g. when the web page is scrolled.\\n *\\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\\n * collection.\\n *\\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\\n * accept any custom position set provided by the user compatible with the\\n * {@link module:utils/dom/position~Options options}.\\n *\\n *\\t\\tconst panel = new BalloonPanelView( locale );\\n *\\t\\tconst childView = new ChildView();\\n *\\t\\tconst positions = BalloonPanelView.defaultPositions;\\n *\\n *\\t\\tpanel.render();\\n *\\n *\\t\\t// Add a child view to the panel's content collection.\\n *\\t\\tpanel.content.add( childView );\\n *\\n *\\t\\t// Start pinning the panel to an element with the \\\"target\\\" id DOM.\\n *\\t\\t// The balloon will remain pinned until unpin() is called.\\n *\\t\\tpanel.pin( {\\n *\\t\\t\\ttarget: document.querySelector( '#target' ),\\n *\\t\\t\\tpositions: [\\n *\\t\\t\\t\\tpositions.northArrowSouth,\\n *\\t\\t\\t\\tpositions.southArrowNorth\\n *\\t\\t\\t]\\n *\\t\\t} );\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class BalloonPanelView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * The absolute top position of the balloon panel in pixels.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default 0\\n\\t\\t * @member {Number} #top\\n\\t\\t */\\n\\t\\tthis.set( 'top', 0 );\\n\\n\\t\\t/**\\n\\t\\t * The absolute left position of the balloon panel in pixels.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default 0\\n\\t\\t * @member {Number} #left\\n\\t\\t */\\n\\t\\tthis.set( 'left', 0 );\\n\\n\\t\\t/**\\n\\t\\t * Balloon panel's current position. The position name is reflected in the CSS class set\\n\\t\\t * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for \\\"arrow_nw\\\" position. The class\\n\\t\\t * controls the minor aspects of the balloon's visual appearance like placement\\n\\t\\t * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\\n\\t\\t *\\n\\t\\t * Default position names correspond with\\n\\t\\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\\n\\t\\t *\\n\\t\\t * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default 'arrow_nw'\\n\\t\\t * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\\n\\t\\t */\\n\\t\\tthis.set( 'position', 'arrow_nw' );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the balloon panel is visible or not.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default false\\n\\t\\t * @member {Boolean} #isVisible\\n\\t\\t */\\n\\t\\tthis.set( 'isVisible', false );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the balloon panel has an arrow. The presence of the arrow\\n\\t\\t * is reflected in `ck-balloon-panel_with-arrow` CSS class.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default true\\n\\t\\t * @member {Boolean} #withArrow\\n\\t\\t */\\n\\t\\tthis.set( 'withArrow', true );\\n\\n\\t\\t/**\\n\\t\\t * An additional CSS class added to the {@link #element}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #className\\n\\t\\t */\\n\\t\\tthis.set( 'className' );\\n\\n\\t\\t/**\\n\\t\\t * A callback that starts pining the panel when {@link #isVisible} gets\\n\\t\\t * `true`. Used by {@link #pin}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Function} #_pinWhenIsVisibleCallback\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views which creates balloon panel contents.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.content = this.createCollection();\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-balloon-panel',\\n\\t\\t\\t\\t\\tbind.to( 'position', value => `ck-balloon-panel_${ value }` ),\\n\\t\\t\\t\\t\\tbind.if( 'isVisible', 'ck-balloon-panel_visible' ),\\n\\t\\t\\t\\t\\tbind.if( 'withArrow', 'ck-balloon-panel_with-arrow' ),\\n\\t\\t\\t\\t\\tbind.to( 'className' )\\n\\t\\t\\t\\t],\\n\\n\\t\\t\\t\\tstyle: {\\n\\t\\t\\t\\t\\ttop: bind.to( 'top', toPx ),\\n\\t\\t\\t\\t\\tleft: bind.to( 'left', toPx )\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.content\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Shows the panel.\\n\\t *\\n\\t * See {@link #isVisible}.\\n\\t */\\n\\tshow() {\\n\\t\\tthis.isVisible = true;\\n\\t}\\n\\n\\t/**\\n\\t * Hides the panel.\\n\\t *\\n\\t * See {@link #isVisible}.\\n\\t */\\n\\thide() {\\n\\t\\tthis.isVisible = false;\\n\\t}\\n\\n\\t/**\\n\\t * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\\n\\t * smart positioning heuristics that choses from available positions to make sure the panel\\n\\t * is visible to the user i.e. within the limits of the viewport.\\n\\t *\\n\\t * This method accepts configuration {@link module:utils/dom/position~Options options}\\n\\t * to set the `target`, optional `limiter` and `positions` the balloon should chose from.\\n\\t *\\n\\t *\\t\\tconst panel = new BalloonPanelView( locale );\\n\\t *\\t\\tconst positions = BalloonPanelView.defaultPositions;\\n\\t *\\n\\t *\\t\\tpanel.render();\\n\\t *\\n\\t *\\t\\t// Attach the panel to an element with the \\\"target\\\" id DOM.\\n\\t *\\t\\tpanel.attachTo( {\\n\\t *\\t\\t\\ttarget: document.querySelector( '#target' ),\\n\\t *\\t\\t\\tpositions: [\\n\\t *\\t\\t\\t\\tpositions.northArrowSouth,\\n\\t *\\t\\t\\t\\tpositions.southArrowNorth\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t * **Note**: Attaching the panel will also automatically {@link #show} it.\\n\\t *\\n\\t * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\\n\\t * See the {@link #pin} method for more permanent positioning strategy.\\n\\t *\\n\\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\\n\\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\\n\\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\\n\\t */\\n\\tattachTo( options ) {\\n\\t\\tthis.show();\\n\\n\\t\\tconst defaultPositions = BalloonPanelView.defaultPositions;\\n\\t\\tconst positionOptions = Object.assign( {}, {\\n\\t\\t\\telement: this.element,\\n\\t\\t\\tpositions: [\\n\\t\\t\\t\\tdefaultPositions.southArrowNorth,\\n\\t\\t\\t\\tdefaultPositions.southArrowNorthWest,\\n\\t\\t\\t\\tdefaultPositions.southArrowNorthEast,\\n\\t\\t\\t\\tdefaultPositions.northArrowSouth,\\n\\t\\t\\t\\tdefaultPositions.northArrowSouthWest,\\n\\t\\t\\t\\tdefaultPositions.northArrowSouthEast\\n\\t\\t\\t],\\n\\t\\t\\tlimiter: defaultLimiterElement,\\n\\t\\t\\tfitInViewport: true\\n\\t\\t}, options );\\n\\n\\t\\tconst { top, left, name: position } = getOptimalPosition( positionOptions );\\n\\n\\t\\tObject.assign( this, { top, left, position } );\\n\\t}\\n\\n\\t/**\\n\\t * Works the same way as the {@link #attachTo} method except that the position of the panel is\\n\\t * continuously updated when:\\n\\t *\\n\\t * * any ancestor of the {@link module:utils/dom/position~Options#target}\\n\\t * or {@link module:utils/dom/position~Options#limiter} is scrolled,\\n\\t * * the browser window gets resized or scrolled.\\n\\t *\\n\\t * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target},\\n\\t * immune to the changing environment.\\n\\t *\\n\\t *\\t\\tconst panel = new BalloonPanelView( locale );\\n\\t *\\t\\tconst positions = BalloonPanelView.defaultPositions;\\n\\t *\\n\\t *\\t\\tpanel.render();\\n\\t *\\n\\t *\\t\\t// Pin the panel to an element with the \\\"target\\\" id DOM.\\n\\t *\\t\\tpanel.pin( {\\n\\t *\\t\\t\\ttarget: document.querySelector( '#target' ),\\n\\t *\\t\\t\\tpositions: [\\n\\t *\\t\\t\\t\\tpositions.northArrowSouth,\\n\\t *\\t\\t\\t\\tpositions.southArrowNorth\\n\\t *\\t\\t\\t]\\n\\t *\\t\\t} );\\n\\t *\\n\\t * To leave the pinned state, use the {@link #unpin} method.\\n\\t *\\n\\t * **Note**: Pinning the panel will also automatically {@link #show} it.\\n\\t *\\n\\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\\n\\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\\n\\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\\n\\t */\\n\\tpin( options ) {\\n\\t\\tthis.unpin();\\n\\n\\t\\tthis._pinWhenIsVisibleCallback = () => {\\n\\t\\t\\tif ( this.isVisible ) {\\n\\t\\t\\t\\tthis._startPinning( options );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis._stopPinning();\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tthis._startPinning( options );\\n\\n\\t\\t// Control the state of the listeners depending on whether the panel is visible\\n\\t\\t// or not.\\n\\t\\t// TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\\n\\t\\tthis.listenTo( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\\n\\t}\\n\\n\\t/**\\n\\t * Stops pinning the panel, as set up by {@link #pin}.\\n\\t */\\n\\tunpin() {\\n\\t\\tif ( this._pinWhenIsVisibleCallback ) {\\n\\t\\t\\t// Deactivate listeners attached by pin().\\n\\t\\t\\tthis._stopPinning();\\n\\n\\t\\t\\t// Deactivate the panel pin() control logic.\\n\\t\\t\\t// TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\\n\\t\\t\\tthis.stopListening( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\\n\\n\\t\\t\\tthis._pinWhenIsVisibleCallback = null;\\n\\n\\t\\t\\tthis.hide();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Starts managing the pinned state of the panel. See {@link #pin}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\\n\\t * {@link module:utils/dom/position~getOptimalPosition}.\\n\\t */\\n\\t_startPinning( options ) {\\n\\t\\tthis.attachTo( options );\\n\\n\\t\\tconst targetElement = getDomElement( options.target );\\n\\t\\tconst limiterElement = options.limiter ? getDomElement( options.limiter ) : defaultLimiterElement;\\n\\n\\t\\t// Then we need to listen on scroll event of eny element in the document.\\n\\t\\tthis.listenTo( global.document, 'scroll', ( evt, domEvt ) => {\\n\\t\\t\\tconst scrollTarget = domEvt.target;\\n\\n\\t\\t\\t// The position needs to be updated if the positioning target is within the scrolled element.\\n\\t\\t\\tconst isWithinScrollTarget = targetElement && scrollTarget.contains( targetElement );\\n\\n\\t\\t\\t// The position needs to be updated if the positioning limiter is within the scrolled element.\\n\\t\\t\\tconst isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains( limiterElement );\\n\\n\\t\\t\\t// The positioning target and/or limiter can be a Rect, object etc..\\n\\t\\t\\t// There's no way to optimize the listener then.\\n\\t\\t\\tif ( isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement ) {\\n\\t\\t\\t\\tthis.attachTo( options );\\n\\t\\t\\t}\\n\\t\\t}, { useCapture: true } );\\n\\n\\t\\t// We need to listen on window resize event and update position.\\n\\t\\tthis.listenTo( global.window, 'resize', () => {\\n\\t\\t\\tthis.attachTo( options );\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Stops managing the pinned state of the panel. See {@link #pin}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_stopPinning() {\\n\\t\\tthis.stopListening( global.document, 'scroll' );\\n\\t\\tthis.stopListening( global.window, 'resize' );\\n\\t}\\n}\\n\\n// Returns the DOM element for given object or null, if there's none,\\n// e.g. when passed object is a Rect instance or so.\\n//\\n// @private\\n// @param {*} object\\n// @returns {HTMLElement|null}\\nfunction getDomElement( object ) {\\n\\tif ( isElement( object ) ) {\\n\\t\\treturn object;\\n\\t}\\n\\n\\tif ( isRange( object ) ) {\\n\\t\\treturn object.commonAncestorContainer;\\n\\t}\\n\\n\\tif ( typeof object == 'function' ) {\\n\\t\\treturn getDomElement( object() );\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/**\\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\\n *\\n *\\t\\t +-----|---------...\\n *\\t\\t |     |\\n *\\t\\t |     |\\n *\\t\\t |     |\\n *\\t\\t |     |\\n *\\t\\t +--+  |  +------...\\n *\\t\\t     \\\\ | /\\n *\\t\\t      \\\\|/\\n *\\t    >|-----|<---------------- horizontal offset\\n *\\n * @default 30\\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\\n */\\nBalloonPanelView.arrowHorizontalOffset = 25;\\n\\n/**\\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\\n *\\n *\\t\\t +-------------...\\n *\\t\\t |\\n *\\t\\t |\\n *\\t\\t |                      /-- vertical offset\\n *\\t\\t |                     V\\n *\\t\\t +--+    +-----...    ---------\\n *\\t\\t     \\\\  /              |\\n *\\t\\t      \\\\/               |\\n *\\t\\t-------------------------------\\n *\\t\\t                       ^\\n *\\n * @default 15\\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\\n */\\nBalloonPanelView.arrowVerticalOffset = 10;\\n\\n/**\\n * A default set of positioning functions used by the balloon panel view\\n * when attaching using {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\\n *\\n * The available positioning functions are as follow:\\n *\\n * **North**\\n *\\n * * `northArrowSouth`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t         V\\n * \\t\\t    [ Target ]\\n *\\n * * `northArrowSouthEast`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t               V\\n * \\t\\t          [ Target ]\\n *\\n * * `northArrowSouthWest`\\n *\\n * \\t\\t  +-----------------+\\n * \\t\\t  |     Balloon     |\\n * \\t\\t  +-----------------+\\n * \\t\\t     V\\n * \\t\\t[ Target ]\\n *\\n * **North west**\\n *\\n * * `northWestArrowSouth`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t         V\\n * \\t\\t         [ Target ]\\n *\\n * * `northWestArrowSouthWest`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t   V\\n * \\t\\t   [ Target ]\\n *\\n * * `northWestArrowSouthEast`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t               V\\n * \\t\\t               [ Target ]\\n *\\n * **North east**\\n *\\n * * `northEastArrowSouth`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t         V\\n * \\t\\t[ Target ]\\n *\\n * * `northEastArrowSouthEast`\\n *\\n * \\t\\t+-----------------+\\n * \\t\\t|     Balloon     |\\n * \\t\\t+-----------------+\\n * \\t\\t               V\\n * \\t\\t      [ Target ]\\n *\\n * * `northEastArrowSouthWest`\\n *\\n * \\t\\t      +-----------------+\\n * \\t\\t      |     Balloon     |\\n * \\t\\t      +-----------------+\\n * \\t\\t         V\\n * \\t\\t[ Target ]\\n *\\n * **South**\\n *\\n * * `southArrowNorth`\\n *\\n *\\t\\t    [ Target ]\\n *\\t\\t         ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southArrowNorthEast`\\n *\\n *\\t\\t          [ Target ]\\n *\\t\\t               ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southArrowNorthWest`\\n *\\n *\\t\\t[ Target ]\\n *\\t\\t     ^\\n *\\t\\t   +-----------------+\\n *\\t\\t   |     Balloon     |\\n *\\t\\t   +-----------------+\\n *\\n * **South west**\\n *\\n * * `southWestArrowNorth`\\n *\\n *\\t\\t         [ Target ]\\n *\\t\\t         ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southWestArrowNorthWest`\\n *\\n *\\t\\t  [ Target ]\\n *\\t\\t  ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southWestArrowNorthEast`\\n *\\n *\\t\\t               [ Target ]\\n *\\t\\t               ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * **South east**\\n *\\n * * `southEastArrowNorth`\\n *\\n *\\t\\t[ Target ]\\n *\\t\\t         ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southEastArrowNorthEast`\\n *\\n *\\t\\t       [ Target ]\\n *\\t\\t                ^\\n *\\t\\t+-----------------+\\n *\\t\\t|     Balloon     |\\n *\\t\\t+-----------------+\\n *\\n * * `southEastArrowNorthWest`\\n *\\n *\\t\\t[ Target ]\\n *\\t\\t         ^\\n *\\t\\t       +-----------------+\\n *\\t\\t       |     Balloon     |\\n *\\t\\t       +-----------------+\\n *\\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\\n *\\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\\n *\\n * The name that position function returns will be reflected in balloon panel's class that\\n * controls the placement of the \\\"arrow\\\". See {@link #position} to learn more.\\n *\\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\\n */\\nBalloonPanelView.defaultPositions = {\\n\\t// ------- North\\n\\n\\tnorthArrowSouth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\\n\\t\\tname: 'arrow_s'\\n\\t} ),\\n\\n\\tnorthArrowSouthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_se'\\n\\t} ),\\n\\n\\tnorthArrowSouthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_sw'\\n\\t} ),\\n\\n\\t// ------- North west\\n\\n\\tnorthWestArrowSouth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - balloonRect.width / 2,\\n\\t\\tname: 'arrow_s'\\n\\t} ),\\n\\n\\tnorthWestArrowSouthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_sw'\\n\\t} ),\\n\\n\\tnorthWestArrowSouthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_se'\\n\\t} ),\\n\\n\\t// ------- North east\\n\\n\\tnorthEastArrowSouth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - balloonRect.width / 2,\\n\\t\\tname: 'arrow_s'\\n\\t} ),\\n\\n\\tnorthEastArrowSouthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_se'\\n\\t} ),\\n\\n\\tnorthEastArrowSouthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getNorthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_sw'\\n\\t} ),\\n\\n\\t// ------- South\\n\\n\\tsouthArrowNorth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\\n\\t\\tname: 'arrow_n'\\n\\t} ),\\n\\n\\tsouthArrowNorthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_ne'\\n\\t} ),\\n\\n\\tsouthArrowNorthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_nw'\\n\\t} ),\\n\\n\\t// ------- South west\\n\\n\\tsouthWestArrowNorth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - balloonRect.width / 2,\\n\\t\\tname: 'arrow_n'\\n\\t} ),\\n\\n\\tsouthWestArrowNorthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_nw'\\n\\t} ),\\n\\n\\tsouthWestArrowNorthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_ne'\\n\\t} ),\\n\\n\\t// ------- South east\\n\\n\\tsouthEastArrowNorth: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - balloonRect.width / 2,\\n\\t\\tname: 'arrow_n'\\n\\t} ),\\n\\n\\tsouthEastArrowNorthEast: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_ne'\\n\\t} ),\\n\\n\\tsouthEastArrowNorthWest: ( targetRect, balloonRect ) => ( {\\n\\t\\ttop: getSouthTop( targetRect, balloonRect ),\\n\\t\\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\\n\\t\\tname: 'arrow_nw'\\n\\t} ),\\n};\\n\\n// Returns the top coordinate for positions starting with `north*`.\\n//\\n// @private\\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\\n// @returns {Number}\\nfunction getNorthTop( targetRect, balloonRect ) {\\n\\treturn targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\\n}\\n\\n// Returns the top coordinate for positions starting with `south*`.\\n//\\n// @private\\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\\n// @returns {Number}\\nfunction getSouthTop( targetRect ) {\\n\\treturn targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/panel/balloon/contextualballoon\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport BalloonPanelView from './balloonpanelview';\\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * Provides the common contextual balloon panel for the editor.\\n *\\n * This plugin allows reusing a single {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance\\n * to display multiple contextual balloon panels in the editor.\\n *\\n * Child views of such a panel are stored in the stack and the last one in the stack is visible. When the\\n * visible view is removed from the stack, the previous view becomes visible, etc. If there are no more\\n * views in the stack, the balloon panel will hide.\\n *\\n * It simplifies managing the views and helps\\n * avoid the unnecessary complexity of handling multiple {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\\n * instances in the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ContextualBalloon extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ContextualBalloon';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\t/**\\n\\t\\t * The common balloon panel view.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\\n\\t\\t */\\n\\t\\tthis.view = new BalloonPanelView();\\n\\n\\t\\t/**\\n\\t\\t * The {@link module:utils/dom/position~Options#limiter position limiter}\\n\\t\\t * for the {@link #view}, used when no `limiter` has been passed into {@link #add}\\n\\t\\t * or {@link #updatePosition}.\\n\\t\\t *\\n\\t\\t * By default, a function, which obtains the farthest DOM\\n\\t\\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\\n\\t\\t * of the {@link module:engine/view/document~Document#selection}.\\n\\t\\t *\\n\\t\\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\\n\\t\\t */\\n\\t\\tthis.positionLimiter = () => {\\n\\t\\t\\tconst view = this.editor.editing.view;\\n\\t\\t\\tconst viewDocument = view.document;\\n\\t\\t\\tconst editableElement = viewDocument.selection.editableElement;\\n\\n\\t\\t\\tif ( editableElement ) {\\n\\t\\t\\t\\treturn view.domConverter.mapViewToDom( editableElement.root );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn null;\\n\\t\\t};\\n\\n\\t\\t/**\\n\\t\\t * Stack of the views injected into the balloon. Last one in the stack is displayed\\n\\t\\t * as a content of {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#view}.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {Map} #_stack\\n\\t\\t */\\n\\t\\tthis._stack = new Map();\\n\\n\\t\\t// Add balloon panel view to editor `body` collection and wait until view will be ready.\\n\\t\\tthis.editor.ui.view.body.add( this.view );\\n\\n\\t\\t// Editor should be focused when contextual balloon is focused.\\n\\t\\tthis.editor.ui.focusTracker.add( this.view.element );\\n\\t}\\n\\n\\t/**\\n\\t * Returns the currently visible view or `null` when there are no\\n\\t * views in the stack.\\n\\t *\\n\\t * @returns {module:ui/view~View|null}\\n\\t */\\n\\tget visibleView() {\\n\\t\\tconst item = this._stack.get( this.view.content.get( 0 ) );\\n\\n\\t\\treturn item ? item.view : null;\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when the given view is in the stack. Otherwise returns `false`.\\n\\t *\\n\\t * @param {module:ui/view~View} view\\n\\t * @returns {Boolean}\\n\\t */\\n\\thasView( view ) {\\n\\t\\treturn this._stack.has( view );\\n\\t}\\n\\n\\t/**\\n\\t * Adds a new view to the stack and makes it visible.\\n\\t *\\n\\t * @param {Object} data Configuration of the view.\\n\\t * @param {module:ui/view~View} [data.view] Content of the balloon.\\n\\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\\n\\t * @param {String} [data.balloonClassName] Additional css class for {@link #view} added when given view is visible.\\n\\t */\\n\\tadd( data ) {\\n\\t\\tif ( this.hasView( data.view ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to add configuration of the same view more than once.\\n\\t\\t\\t *\\n\\t\\t\\t * @error contextualballoon-add-view-exist\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'contextualballoon-add-view-exist: Cannot add configuration of the same view twice.' );\\n\\t\\t}\\n\\n\\t\\t// When adding view to the not empty balloon.\\n\\t\\tif ( this.visibleView ) {\\n\\t\\t\\t// Remove displayed content from the view.\\n\\t\\t\\tthis.view.content.remove( this.visibleView );\\n\\t\\t}\\n\\n\\t\\t// Add new view to the stack.\\n\\t\\tthis._stack.set( data.view, data );\\n\\n\\t\\t// And display it.\\n\\t\\tthis._show( data );\\n\\t}\\n\\n\\t/**\\n\\t * Removes the given view from the stack. If the removed view was visible,\\n\\t * then the view preceding it in the stack will become visible instead.\\n\\t * When there is no view in the stack then balloon will hide.\\n\\t *\\n\\t * @param {module:ui/view~View} view A view to be removed from the balloon.\\n\\t */\\n\\tremove( view ) {\\n\\t\\tif ( !this.hasView( view ) ) {\\n\\t\\t\\t/**\\n\\t\\t\\t * Trying to remove configuration of the view not defined in the stack.\\n\\t\\t\\t *\\n\\t\\t\\t * @error contextualballoon-remove-view-not-exist\\n\\t\\t\\t */\\n\\t\\t\\tthrow new CKEditorError( 'contextualballoon-remove-view-not-exist: Cannot remove configuration of not existing view.' );\\n\\t\\t}\\n\\n\\t\\t// When visible view is being removed.\\n\\t\\tif ( this.visibleView === view ) {\\n\\t\\t\\t// We need to remove it from the view content.\\n\\t\\t\\tthis.view.content.remove( view );\\n\\n\\t\\t\\t// And then remove from the stack.\\n\\t\\t\\tthis._stack.delete( view );\\n\\n\\t\\t\\t// Next we need to check if there is other view in stack to show.\\n\\t\\t\\tconst last = Array.from( this._stack.values() ).pop();\\n\\n\\t\\t\\t// If it is some other view.\\n\\t\\t\\tif ( last ) {\\n\\t\\t\\t\\t// Just show it.\\n\\t\\t\\t\\tthis._show( last );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Hide the balloon panel.\\n\\t\\t\\t\\tthis.view.hide();\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Just remove given view from the stack.\\n\\t\\t\\tthis._stack.delete( view );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Updates the position of the balloon using position data of the first visible view in the stack.\\n\\t * When new position data is given then position data of currently visible panel will be updated.\\n\\t *\\n\\t * @param {module:utils/dom/position~Options} [position] position options.\\n\\t */\\n\\tupdatePosition( position ) {\\n\\t\\tif ( position ) {\\n\\t\\t\\tthis._stack.get( this.visibleView ).position = position;\\n\\t\\t}\\n\\n\\t\\tthis.view.pin( this._getBalloonPosition() );\\n\\t}\\n\\n\\t/**\\n\\t * Sets the view as a content of the balloon and attaches balloon using position\\n\\t * options of the first view.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} data Configuration.\\n\\t * @param {module:ui/view~View} [data.view] View to show in the balloon.\\n\\t * @param {String} [data.balloonClassName=''] Additional class name which will added to the {#_balloon} view.\\n\\t */\\n\\t_show( { view, balloonClassName = '' } ) {\\n\\t\\tthis.view.className = balloonClassName;\\n\\n\\t\\tthis.view.content.add( view );\\n\\t\\tthis.view.pin( this._getBalloonPosition() );\\n\\t}\\n\\n\\t/**\\n\\t * Returns position options of the first view in the stack.\\n\\t * This keeps the balloon in the same position when view is changed.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:utils/dom/position~Options}\\n\\t */\\n\\t_getBalloonPosition() {\\n\\t\\tlet position = first( this._stack.values() ).position;\\n\\n\\t\\t// Use the default limiter if none has been specified.\\n\\t\\tif ( position && !position.limiter ) {\\n\\t\\t\\t// Don't modify the original options object.\\n\\t\\t\\tposition = Object.assign( {}, position, {\\n\\t\\t\\t\\tlimiter: this.positionLimiter\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\treturn position;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/image/ui/utils\\n */\\n\\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\\nimport { isImageWidgetSelected } from '../utils';\\n\\n/**\\n * A helper utility which positions the\\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon} instance\\n * with respect to the image in the editor content, if one is selected.\\n *\\n * @param {module:core/editor/editor~Editor} editor The editor instance.\\n */\\nexport function repositionContextualBalloon( editor ) {\\n\\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\\n\\n\\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\\n\\t\\tconst position = getBalloonPositionData( editor );\\n\\n\\t\\tballoon.updatePosition( position );\\n\\t}\\n}\\n\\n/**\\n * Returns the positioning options that control the geometry of the\\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}, with respect\\n * to the selected element in the editor content.\\n *\\n * @param {module:core/editor/editor~Editor} editor The editor instance.\\n * @returns {module:utils/dom/position~Options}\\n */\\nexport function getBalloonPositionData( editor ) {\\n\\tconst editingView = editor.editing.view;\\n\\tconst defaultPositions = BalloonPanelView.defaultPositions;\\n\\n\\treturn {\\n\\t\\ttarget: editingView.domConverter.viewToDom( editingView.document.selection.getSelectedElement() ),\\n\\t\\tpositions: [\\n\\t\\t\\tdefaultPositions.northArrowSouth,\\n\\t\\t\\tdefaultPositions.northArrowSouthWest,\\n\\t\\t\\tdefaultPositions.northArrowSouthEast,\\n\\t\\t\\tdefaultPositions.southArrowNorth,\\n\\t\\t\\tdefaultPositions.southArrowNorthWest,\\n\\t\\t\\tdefaultPositions.southArrowNorthEast\\n\\t\\t]\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetextalternative/imagetextalternativeui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\\nimport TextAlternativeFormView from './ui/textalternativeformview';\\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\\nimport textAlternativeIcon from '@ckeditor/ckeditor5-core/theme/icons/low-vision.svg';\\nimport { repositionContextualBalloon, getBalloonPositionData } from '../image/ui/utils';\\nimport { isImageWidgetSelected } from '../image/utils';\\n\\n/**\\n * The image text alternative UI plugin.\\n *\\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageTextAlternativeUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ContextualBalloon ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tthis._createButton();\\n\\t\\tthis._createForm();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a button showing the balloon panel for changing the image text alternative and\\n\\t * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_createButton() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\teditor.ui.componentFactory.add( 'imageTextAlternative', locale => {\\n\\t\\t\\tconst command = editor.commands.get( 'imageTextAlternative' );\\n\\t\\t\\tconst view = new ButtonView( locale );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tlabel: t( 'Change image text alternative' ),\\n\\t\\t\\t\\ticon: textAlternativeIcon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\\n\\n\\t\\t\\tthis.listenTo( view, 'execute', () => this._showForm() );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\\n\\t * form.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_createForm() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\n\\t\\t/**\\n\\t\\t * The contextual balloon plugin instance.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\\n\\t\\t */\\n\\t\\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\\n\\n\\t\\t/**\\n\\t\\t * A form containing a textarea and buttons, used to change the `alt` text value.\\n\\t\\t *\\n\\t\\t * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\\n\\t\\t */\\n\\t\\tthis._form = new TextAlternativeFormView( editor.locale );\\n\\n\\t\\t// Render the form so its #element is available for clickOutsideHandler.\\n\\t\\tthis._form.render();\\n\\n\\t\\tthis.listenTo( this._form, 'submit', () => {\\n\\t\\t\\teditor.execute( 'imageTextAlternative', {\\n\\t\\t\\t\\tnewValue: this._form.labeledInput.inputView.element.value\\n\\t\\t\\t} );\\n\\n\\t\\t\\tthis._hideForm( true );\\n\\t\\t} );\\n\\n\\t\\tthis.listenTo( this._form, 'cancel', () => {\\n\\t\\t\\tthis._hideForm( true );\\n\\t\\t} );\\n\\n\\t\\t// Close the form on Esc key press.\\n\\t\\tthis._form.keystrokes.set( 'Esc', ( data, cancel ) => {\\n\\t\\t\\tthis._hideForm( true );\\n\\t\\t\\tcancel();\\n\\t\\t} );\\n\\n\\t\\t// Reposition the balloon or hide the form if an image widget is no longer selected.\\n\\t\\tthis.listenTo( view, 'render', () => {\\n\\t\\t\\tif ( !isImageWidgetSelected( viewDocument.selection ) ) {\\n\\t\\t\\t\\tthis._hideForm( true );\\n\\t\\t\\t} else if ( this._isVisible ) {\\n\\t\\t\\t\\trepositionContextualBalloon( editor );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Close on click outside of balloon panel element.\\n\\t\\tclickOutsideHandler( {\\n\\t\\t\\temitter: this._form,\\n\\t\\t\\tactivator: () => this._isVisible,\\n\\t\\t\\tcontextElements: [ this._form.element ],\\n\\t\\t\\tcallback: () => this._hideForm()\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Shows the {@link #_form} in the {@link #_balloon}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_showForm() {\\n\\t\\tif ( this._isVisible ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst command = editor.commands.get( 'imageTextAlternative' );\\n\\t\\tconst labeledInput = this._form.labeledInput;\\n\\n\\t\\tif ( !this._balloon.hasView( this._form ) ) {\\n\\t\\t\\tthis._balloon.add( {\\n\\t\\t\\t\\tview: this._form,\\n\\t\\t\\t\\tposition: getBalloonPositionData( editor )\\n\\t\\t\\t} );\\n\\t\\t}\\n\\n\\t\\t// Make sure that each time the panel shows up, the field remains in sync with the value of\\n\\t\\t// the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\\n\\t\\t// stays unaltered) and re-opened it without changing the value of the command, they would see the\\n\\t\\t// old value instead of the actual value of the command.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-image/issues/114\\n\\t\\tlabeledInput.value = labeledInput.inputView.element.value = command.value || '';\\n\\n\\t\\tthis._form.labeledInput.select();\\n\\t}\\n\\n\\t/**\\n\\t * Removes the {@link #_form} from the {@link #_balloon}.\\n\\t *\\n\\t * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\\n\\t * @private\\n\\t */\\n\\t_hideForm( focusEditable ) {\\n\\t\\tif ( !this._isVisible ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis._balloon.remove( this._form );\\n\\n\\t\\tif ( focusEditable ) {\\n\\t\\t\\tthis.editor.editing.view.focus();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when the {@link #_form} is the visible view\\n\\t * in the {@link #_balloon}.\\n\\t *\\n\\t * @private\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _isVisible() {\\n\\t\\treturn this._balloon.visibleView == this._form;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetextalternative\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageTextAlternativeEditing from './imagetextalternative/imagetextalternativeediting';\\nimport ImageTextAlternativeUI from './imagetextalternative/imagetextalternativeui';\\n\\n/**\\n * The image text alternative plugin.\\n *\\n * It loads the {@link module:image/imagetextalternative/imagetextalternativeediting~ImageTextAlternativeEditing}\\n * and {@link module:image/imagetextalternative/imagetextalternativeui~ImageTextAlternativeUI} plugins.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageTextAlternative extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageTextAlternativeEditing, ImageTextAlternativeUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageTextAlternative';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/image\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageEditing from '../src/image/imageediting';\\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\\nimport ImageTextAlternative from './imagetextalternative';\\n\\nimport '../theme/image.css';\\n\\n/**\\n * The image plugin.\\n *\\n * Uses the {@link module:image/image/imageediting~ImageEditing}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Image extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageEditing, Widget, ImageTextAlternative ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Image';\\n\\t}\\n}\\n\\n/**\\n * The configuration of the image features. Used by the image features in `@ckeditor/ckeditor5-image` package.\\n *\\n * Read more in {@link module:image/image~ImageConfig}.\\n *\\n * @member {module:image/image~ImageConfig} module:core/editor/editorconfig~EditorConfig#image\\n */\\n\\n/**\\n * The configuration of the image features. Used by the image features in `@ckeditor/ckeditor5-image` package.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( editorElement, {\\n * \\t\\t\\t\\timage: ... // Image feature options.\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface ImageConfig\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module upload/ui/filedialogbuttonview\\n */\\n\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\nimport View from '@ckeditor/ckeditor5-ui/src/view';\\n\\n/**\\n * The file dialog button view.\\n *\\n * This component provides a button that opens the native file selection dialog.\\n * It can be used to implement the UI of a file upload feature.\\n *\\n *\\t\\tconst view = new FileDialogButtonView( locale );\\n *\\n *\\t\\tview.set( {\\n *\\t\\t\\tacceptedType: 'image/*',\\n *\\t\\t\\tallowMultipleFiles: true\\n *\\t\\t} );\\n *\\n *\\t\\tview.buttonView.set( {\\n *\\t\\t\\tlabel: t( 'Insert image' ),\\n *\\t\\t\\ticon: imageIcon,\\n *\\t\\t\\ttooltip: true\\n *\\t\\t} );\\n *\\n *\\t\\tview.on( 'done', ( evt, files ) => {\\n *\\t\\t\\tfor ( const file of Array.from( files ) ) {\\n *\\t\\t\\t\\tconsole.log( 'Selected file', file );\\n *\\t\\t\\t}\\n *\\t\\t} );\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class FileDialogButtonView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * The button view of the component.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView}\\n\\t\\t */\\n\\t\\tthis.buttonView = new ButtonView( locale );\\n\\n\\t\\t/**\\n\\t\\t * A hidden `<input>` view used to execute file dialog.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {module:upload/ui/filedialogbuttonview~FileInputView}\\n\\t\\t */\\n\\t\\tthis._fileInputView = new FileInputView( locale );\\n\\n\\t\\t/**\\n\\t\\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\\n\\t\\t * * `audio/*`,\\n\\t\\t * * `video/*`,\\n\\t\\t * * `image/*`.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #acceptedType\\n\\t\\t */\\n\\t\\tthis._fileInputView.bind( 'acceptedType' ).to( this );\\n\\n\\t\\t/**\\n\\t\\t * Indicates if multiple files can be selected. Defaults to `true`.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #allowMultipleFiles\\n\\t\\t */\\n\\t\\tthis._fileInputView.bind( 'allowMultipleFiles' ).to( this );\\n\\n\\t\\t/**\\n\\t\\t * Fired when file dialog is closed with file selected.\\n\\t\\t *\\n\\t\\t *\\t\\tview.on( 'done', ( evt, files ) => {\\n\\t\\t *\\t\\t\\tfor ( const file of files ) {\\n\\t\\t *\\t\\t\\t\\tconsole.log( 'Selected file', file );\\n\\t\\t *\\t\\t\\t}\\n\\t\\t *\\t\\t}\\n\\t\\t *\\n\\t\\t * @event done\\n\\t\\t * @param {Array.<File>} files Array of selected files.\\n\\t\\t */\\n\\t\\tthis._fileInputView.delegate( 'done' ).to( this );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'span',\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: 'ck-file-dialog-button',\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis.buttonView,\\n\\t\\t\\t\\tthis._fileInputView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\tthis.buttonView.on( 'execute', () => {\\n\\t\\t\\tthis._fileInputView.open();\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #buttonView}.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.buttonView.focus();\\n\\t}\\n}\\n\\n/**\\n * The hidden file input view class.\\n *\\n * @private\\n * @extends {module:ui/view~View}\\n */\\nclass FileInputView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * Accepted file types. Can be provided in form of file extensions, media type or one of:\\n\\t\\t * * `audio/*`,\\n\\t\\t * * `video/*`,\\n\\t\\t * * `image/*`.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #acceptedType\\n\\t\\t */\\n\\t\\tthis.set( 'acceptedType' );\\n\\n\\t\\t/**\\n\\t\\t * Indicates if multiple files can be selected. Defaults to `false`.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #allowMultipleFiles\\n\\t\\t */\\n\\t\\tthis.set( 'allowMultipleFiles', false );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'input',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-hidden'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\ttype: 'file',\\n\\t\\t\\t\\ttabindex: '-1',\\n\\t\\t\\t\\taccept: bind.to( 'acceptedType' ),\\n\\t\\t\\t\\tmultiple: bind.to( 'allowMultipleFiles' )\\n\\t\\t\\t},\\n\\n\\t\\t\\ton: {\\n\\t\\t\\t\\t// Removing from code coverage since we cannot programmatically set input element files.\\n\\t\\t\\t\\tchange: bind.to( /* istanbul ignore next */ () => {\\n\\t\\t\\t\\t\\tif ( this.element && this.element.files && this.element.files.length ) {\\n\\t\\t\\t\\t\\t\\tthis.fire( 'done', this.element.files );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tthis.element.value = '';\\n\\t\\t\\t\\t} )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Opens file dialog.\\n\\t */\\n\\topen() {\\n\\t\\tthis.element.click();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module upload/utils\\n */\\n\\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\\n\\n/**\\n * Checks if given file is an image.\\n *\\n * @param {File} file\\n * @returns {Boolean}\\n */\\nexport function isImageType( file ) {\\n\\tconst types = /^image\\\\/(jpeg|png|gif|bmp)$/;\\n\\n\\treturn types.test( file.type );\\n}\\n\\n/**\\n * Returns a model position which is optimal (in terms of UX) for inserting an image.\\n *\\n * For instance, if a selection is in a middle of a paragraph, position before this paragraph\\n * will be returned, so that it's not split. If the selection is at the end of a paragraph,\\n * position after this paragraph will be returned.\\n *\\n * Note: If selection is placed in an empty block, that block will be returned. If that position\\n * is then passed to {@link module:engine/model/model~Model#insertContent}\\n * that block will be fully replaced by the image.\\n *\\n * @param {module:engine/model/selection~Selection} selection Selection based on which the\\n * insertion position should be calculated.\\n * @returns {module:engine/model/position~Position} The optimal position.\\n */\\nexport function findOptimalInsertionPosition( selection ) {\\n\\tconst selectedElement = selection.getSelectedElement();\\n\\n\\tif ( selectedElement ) {\\n\\t\\treturn ModelPosition.createAfter( selectedElement );\\n\\t}\\n\\n\\tconst firstBlock = selection.getSelectedBlocks().next().value;\\n\\n\\tif ( firstBlock ) {\\n\\t\\t// If inserting into an empty block – return position in that block. It will get\\n\\t\\t// replaced with the image by insertContent(). #42.\\n\\t\\tif ( firstBlock.isEmpty ) {\\n\\t\\t\\treturn ModelPosition.createAt( firstBlock );\\n\\t\\t}\\n\\n\\t\\tconst positionAfter = ModelPosition.createAfter( firstBlock );\\n\\n\\t\\t// If selection is at the end of the block - return position after the block.\\n\\t\\tif ( selection.focus.isTouching( positionAfter ) ) {\\n\\t\\t\\treturn positionAfter;\\n\\t\\t}\\n\\n\\t\\t// Otherwise return position before the block.\\n\\t\\treturn ModelPosition.createBefore( firstBlock );\\n\\t}\\n\\n\\treturn selection.focus;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imageupload/imageuploadui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FileDialogButtonView from '@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview';\\nimport imageIcon from '@ckeditor/ckeditor5-core/theme/icons/image.svg';\\nimport { isImageType, findOptimalInsertionPosition } from './utils';\\n\\n/**\\n * Image upload button plugin.\\n * Adds `imageUpload` button to UI component factory.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageUploadUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\t// Setup `imageUpload` button.\\n\\t\\teditor.ui.componentFactory.add( 'imageUpload', locale => {\\n\\t\\t\\tconst view = new FileDialogButtonView( locale );\\n\\t\\t\\tconst command = editor.commands.get( 'imageUpload' );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tacceptedType: 'image/*',\\n\\t\\t\\t\\tallowMultipleFiles: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.buttonView.set( {\\n\\t\\t\\t\\tlabel: t( 'Insert image' ),\\n\\t\\t\\t\\ticon: imageIcon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.buttonView.bind( 'isEnabled' ).to( command );\\n\\n\\t\\t\\tview.on( 'done', ( evt, files ) => {\\n\\t\\t\\t\\tfor ( const file of Array.from( files ) ) {\\n\\t\\t\\t\\t\\tconst insertAt = findOptimalInsertionPosition( editor.model.document.selection );\\n\\n\\t\\t\\t\\t\\tif ( isImageType( file ) ) {\\n\\t\\t\\t\\t\\t\\teditor.execute( 'imageUpload', { file, insertAt } );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imageupload/imageuploadprogress\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\\nimport ViewRange from '@ckeditor/ckeditor5-engine/src/view/range';\\n\\nimport '../../theme/imageuploadprogress.css';\\n\\n/**\\n * Image upload progress plugin.\\n * Shows placeholder when image is read from disk and progress bar while image is uploading.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageUploadProgress extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * Image's placeholder that is displayed before real image data can be accessed.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @member {String} #placeholder\\n\\t\\t */\\n\\t\\tthis.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent( uploadingPlaceholder );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Upload status change - update image's view according to that status.\\n\\t\\teditor.editing.downcastDispatcher.on( 'attribute:uploadStatus:image', ( ...args ) => this.uploadStatusChange( ...args ) );\\n\\t}\\n\\n\\t/**\\n\\t * This ethod is called each time image's `uploadStatus` attribute is changed.\\n\\t *\\n\\t * @param {module:utils/eventinfo~EventInfo} evt Object containing information about the fired event.\\n\\t * @param {Object} data Additional information about the change.\\n\\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\\n\\t * @param {Object} conversionApi\\n\\t */\\n\\tuploadStatusChange( evt, data, conversionApi ) {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst modelImage = data.item;\\n\\t\\tconst uploadId = modelImage.getAttribute( 'uploadId' );\\n\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) || !uploadId ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst fileRepository = editor.plugins.get( FileRepository );\\n\\t\\tconst placeholder = this.placeholder;\\n\\t\\tconst status = data.attributeNewValue;\\n\\t\\tconst viewFigure = editor.editing.mapper.toViewElement( modelImage );\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t// Show placeholder with infinite progress bar on the top while image is read from disk.\\n\\t\\tif ( status == 'reading' ) {\\n\\t\\t\\tviewWriter.addClass( [ 'ck-appear', 'ck-infinite-progress', 'ck-image-upload-placeholder' ], viewFigure );\\n\\t\\t\\tconst viewImg = viewFigure.getChild( 0 );\\n\\t\\t\\tviewWriter.setAttribute( 'src', placeholder, viewImg );\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Show progress bar on the top of the image when image is uploading.\\n\\t\\tif ( status == 'uploading' ) {\\n\\t\\t\\tconst loader = fileRepository.loaders.get( uploadId );\\n\\n\\t\\t\\tif ( loader ) {\\n\\t\\t\\t\\tconst progressBar = createProgressBar( viewWriter );\\n\\n\\t\\t\\t\\tviewWriter.removeClass( [ 'ck-infinite-progress', 'ck-image-upload-placeholder' ], viewFigure );\\n\\t\\t\\t\\tviewWriter.insert( ViewPosition.createAt( viewFigure, 'end' ), progressBar );\\n\\n\\t\\t\\t\\t// Update progress bar width when uploadedPercent is changed.\\n\\t\\t\\t\\tloader.on( 'change:uploadedPercent', ( evt, name, value ) => {\\n\\t\\t\\t\\t\\teditor.editing.view.change( writer => {\\n\\t\\t\\t\\t\\t\\twriter.setStyle( 'width', value + '%', progressBar );\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Hide progress bar and clean up classes.\\n\\t\\tconst progressBar = getProgressBar( viewFigure );\\n\\n\\t\\tif ( progressBar ) {\\n\\t\\t\\tviewWriter.remove( ViewRange.createOn( progressBar ) );\\n\\t\\t} else {\\n\\t\\t\\tviewWriter.removeClass( 'ck-infinite-progress', viewFigure );\\n\\t\\t}\\n\\n\\t\\tviewWriter.removeClass( [ 'ck-appear', 'ck-image-upload-placeholder' ], viewFigure );\\n\\t}\\n}\\n\\n// Symbol added to progress bar UIElement to distinguish it from other elements.\\nconst progressBarSymbol = Symbol( 'progress-bar' );\\n\\n// Create progress bar element using {@link module:engine/view/uielement~UIElement}.\\n//\\n// @private\\n// @param {module:engine/view/writer~Writer} writer\\n// @returns {module:engine/view/uielement~UIElement}\\nfunction createProgressBar( writer ) {\\n\\tconst progressBar = writer.createUIElement( 'div', { class: 'ck-progress-bar' } );\\n\\twriter.setCustomProperty( progressBarSymbol, true, progressBar );\\n\\n\\treturn progressBar;\\n}\\n\\n// Returns progress bar {@link module:engine/view/uielement~UIElement} from image figure element. Returns `undefined` if\\n// progress bar element is not found.\\n//\\n// @private\\n// @param {module:engine/view/element~Element} imageFigure\\n// @returns {module:engine/view/uielement~UIElement|undefined}\\nfunction getProgressBar( imageFigure ) {\\n\\tfor ( const child of imageFigure.getChildren() ) {\\n\\t\\tif ( child.getCustomProperty( progressBarSymbol ) ) {\\n\\t\\t\\treturn child;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\n\\n/**\\n * @module image/imageupload/imageuploadcommand\\n */\\n\\n/**\\n * Image upload command.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class ImageUploadCommand extends Command {\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} options Options for executed command.\\n\\t * @param {File} options.file Image file to upload.\\n\\t * @param {module:engine/model/position~Position} [options.insertAt] Position at which the image should be inserted.\\n\\t * If the position is not specified the image will be inserted into the current selection.\\n\\t * Note: You can use the {@link module:upload/utils~findOptimalInsertionPosition} function to calculate\\n\\t * (e.g. based on the current selection) a position which is more optimal from UX perspective.\\n\\t */\\n\\texecute( options ) {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst doc = editor.model.document;\\n\\t\\tconst file = options.file;\\n\\t\\tconst fileRepository = editor.plugins.get( FileRepository );\\n\\n\\t\\teditor.model.change( writer => {\\n\\t\\t\\tconst loader = fileRepository.createLoader( file );\\n\\n\\t\\t\\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\\n\\t\\t\\tif ( !loader ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst imageElement = new ModelElement( 'image', {\\n\\t\\t\\t\\tuploadId: loader.id\\n\\t\\t\\t} );\\n\\n\\t\\t\\tlet insertAtSelection;\\n\\n\\t\\t\\tif ( options.insertAt ) {\\n\\t\\t\\t\\tinsertAtSelection = new ModelSelection( [ new ModelRange( options.insertAt ) ] );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinsertAtSelection = doc.selection;\\n\\t\\t\\t}\\n\\n\\t\\t\\teditor.model.insertContent( imageElement, insertAtSelection );\\n\\n\\t\\t\\t// Inserting an image might've failed due to schema regulations.\\n\\t\\t\\tif ( imageElement.parent ) {\\n\\t\\t\\t\\twriter.setSelection( ModelRange.createOn( imageElement ) );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/notification/notification\\n */\\n\\n/* globals window */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\n/**\\n * The Notification plugin.\\n *\\n * This plugin sends few base types of notifications: `success`, `info` and `warning`. This notifications need to be\\n * handled and displayed by plugin responsible for showing UI of the notifications. Using this plugin for dispatching\\n * notifications makes possible to switch the notifications UI.\\n *\\n * Note that every unhandled and not stopped `warning` notification will be displayed as system alert.\\n * See {@link module:ui/notification/notification~Notification#showWarning}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Notification extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Notification';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\t// Each unhandled and not stopped `show:warning` event is displayed as system alert.\\n\\t\\tthis.on( 'show:warning', ( evt, data ) => {\\n\\t\\t\\twindow.alert( data.message ); // eslint-disable-line no-alert\\n\\t\\t}, { priority: 'lowest' } );\\n\\t}\\n\\n\\t/**\\n\\t * Shows success notification.\\n\\t *\\n\\t * At default it fires `show:success` event with given data but event namespace can be extended\\n\\t * by `data.namespace` option e.g.\\n\\t *\\n\\t * \\t\\tshowSuccess( 'Image is uploaded.', {\\n\\t * \\t\\t\\tnamespace: 'upload:image'\\n\\t * \\t\\t} );\\n\\t *\\n\\t * will fire `show:success:upload:image` event.\\n\\t * Title of the notification can be provided:\\n\\t *\\n\\t *\\t\\tshowSuccess( 'Image is uploaded.', {\\n\\t *\\t\\t\\ttitle: 'Image upload success'\\n\\t *\\t\\t});\\n\\t *\\n\\t * @param {String} message Content of the notification.\\n\\t * @param {Object} [data={}] Additional data.\\n\\t * @param {String} [data.namespace] Additional event namespace.\\n\\t * @param {String} [data.title] Title of the notification.\\n\\t */\\n\\tshowSuccess( message, data = {} ) {\\n\\t\\tthis._showNotification( {\\n\\t\\t\\tmessage,\\n\\t\\t\\ttype: 'success',\\n\\t\\t\\tnamespace: data.namespace,\\n\\t\\t\\ttitle: data.title\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Shows info notification.\\n\\t *\\n\\t * At default it fires `show:info` event with given data but event namespace can be extended\\n\\t * by `data.namespace` option e.g.\\n\\t *\\n\\t * \\t\\tshowInfo( 'Editor is offline.', {\\n\\t * \\t\\t\\tnamespace: 'editor:status'\\n\\t * \\t\\t} );\\n\\t *\\n\\t * will fire `show:info:editor:status` event.\\n\\t * Title of the notification can be provided:\\n\\t *\\n\\t *\\t\\tshowInfo( 'Editor is offline.', {\\n\\t *\\t\\t\\ttitle: 'Network information'\\n\\t *\\t\\t});\\n\\t *\\n\\t * @param {String} message Content of the notification.\\n\\t * @param {Object} [data={}] Additional data.\\n\\t * @param {String} [data.namespace] Additional event namespace.\\n\\t * @param {String} [data.title] Title of the notification.\\n\\t */\\n\\tshowInfo( message, data = {} ) {\\n\\t\\tthis._showNotification( {\\n\\t\\t\\tmessage,\\n\\t\\t\\ttype: 'info',\\n\\t\\t\\tnamespace: data.namespace,\\n\\t\\t\\ttitle: data.title\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Shows warning notification.\\n\\t *\\n\\t * At default it fires `show:warning` event with given data but event namespace can be extended\\n\\t * by `data.namespace` option e.g.\\n\\t *\\n\\t * \\t\\tshowWarning( 'Image upload error.', {\\n\\t * \\t\\t\\tnamespace: 'upload:image'\\n\\t * \\t\\t} );\\n\\t *\\n\\t * will fire `show:warning:upload:image` event.\\n\\t * Title of the notification can be provided:\\n\\t *\\n\\t *\\t\\tshowWarning( 'Image upload error.', {\\n\\t *\\t\\t\\ttitle: 'Upload failed'\\n\\t *\\t\\t});\\n\\t *\\n\\t * Note that each unhandled and not stopped `warning` notification will be displayed as system alert.\\n\\t * Plugin responsible for displaying warnings should `stop()` the event to prevent of displaying it as alert:\\n\\t *\\n\\t * \\t\\tnotifications.on( 'show:warning', ( evt, data ) => {\\n\\t * \\t\\t\\t// Do something with data.\\n\\t *\\n\\t * \\t\\t\\t// Stop this event to prevent of displaying as alert.\\n\\t * \\t\\t\\tevt.stop();\\n\\t * \\t\\t} );\\n\\t *\\n\\t * You can attach many listeners to the same event and `stop()` this event in the listener with the low priority:\\n\\t *\\n\\t * \\t\\tnotifications.on( 'show:warning', ( evt, data ) => {\\n\\t * \\t\\t\\t// Show warning in the UI, but not stop it.\\n\\t * \\t\\t} );\\n\\t *\\n\\t * \\t\\tnotifications.on( 'show:warning', ( evt, data ) => {\\n\\t * \\t\\t\\t// Log warning to some error tracker.\\n\\t *\\n\\t * \\t\\t\\t// Stop this event to prevent of displaying as alert.\\n\\t * \\t\\t\\tevt.stop();\\n\\t * \\t\\t}, { priority: 'low' } );\\n\\t *\\n\\t * @param {String} message Content of the notification.\\n\\t * @param {Object} [data={}] Additional data.\\n\\t * @param {String} [data.namespace] Additional event namespace.\\n\\t * @param {String} [data.title] Title of the notification.\\n\\t */\\n\\tshowWarning( message, data = {} ) {\\n\\t\\tthis._showNotification( {\\n\\t\\t\\tmessage,\\n\\t\\t\\ttype: 'warning',\\n\\t\\t\\tnamespace: data.namespace,\\n\\t\\t\\ttitle: data.title\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Fires `show` event with specified type, namespace and message.\\n\\t *\\n\\t * @private\\n\\t * @param {Object} data Message data.\\n\\t * @param {String} data.message Content of the notification.\\n\\t * @param {'success'|'info'|'warning'} data.type Type of message.\\n\\t * @param {String} [data.namespace] Additional event namespace.\\n\\t * @param {String} [data.title=''] Title of the notification.\\n\\t */\\n\\t_showNotification( data ) {\\n\\t\\tconst event = `show:${ data.type }` + ( data.namespace ? `:${ data.namespace }` : '' );\\n\\n\\t\\tthis.fire( event, {\\n\\t\\t\\tmessage: data.message,\\n\\t\\t\\ttype: data.type,\\n\\t\\t\\ttitle: data.title || ''\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Fired when one of `showSuccess`, `showInfo`, `showWarning` methods is called.\\n\\t *\\n\\t * @event show\\n\\t * @param {Object} data Notification data.\\n\\t * @param {String} data.message Content of the notification.\\n\\t * @param {String} data.title Title of the notification.\\n\\t * @param {'success'|'info'|'warning'} data.type Type of notification.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `showSuccess` method is called.\\n\\t *\\n\\t * @event show:success\\n\\t * @param {Object} data Notification data.\\n\\t * @param {String} data.message Content of the notification.\\n\\t * @param {String} data.title Title of the notification.\\n\\t * @param {'success'} data.type Type of notification.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `showInfo` method is called.\\n\\t *\\n\\t * @event show:info\\n\\t * @param {Object} data Notification data.\\n\\t * @param {String} data.message Content of the notification.\\n\\t * @param {String} data.title Title of the notification.\\n\\t * @param {'info'} data.type Type of notification.\\n\\t */\\n\\n\\t/**\\n\\t * Fired when `showWarning` method is called.\\n\\t *\\n\\t * When this event won't be handled and stopped by `event.stop()` then data.message of this event will\\n\\t * be automatically displayed as system alert.\\n\\t *\\n\\t * @event show:warning\\n\\t * @param {Object} data Notification data.\\n\\t * @param {String} data.message Content of the notification.\\n\\t * @param {String} data.title Title of the notification.\\n\\t * @param {'warning'} data.type Type of notification.\\n\\t */\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imageupload/imageuploadediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\\nimport ImageUploadCommand from '../../src/imageupload/imageuploadcommand';\\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\\nimport { isImageType, findOptimalInsertionPosition } from '../../src/imageupload/utils';\\n\\n/**\\n * Image upload editing plugin.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageUploadEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FileRepository, Notification ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst doc = editor.model.document;\\n\\t\\tconst schema = editor.model.schema;\\n\\t\\tconst fileRepository = editor.plugins.get( FileRepository );\\n\\n\\t\\t// Setup schema to allow uploadId and uploadStatus for images.\\n\\t\\tschema.extend( 'image', {\\n\\t\\t\\tallowAttributes: [ 'uploadId', 'uploadStatus' ]\\n\\t\\t} );\\n\\n\\t\\t// Register imageUpload command.\\n\\t\\teditor.commands.add( 'imageUpload', new ImageUploadCommand( editor ) );\\n\\n\\t\\t// Execute imageUpload command when image is dropped or pasted.\\n\\t\\teditor.editing.view.document.on( 'clipboardInput', ( evt, data ) => {\\n\\t\\t\\t// Skip if non empty HTML data is included.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-upload/issues/68\\n\\t\\t\\tif ( isHtmlIncluded( data.dataTransfer ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet targetModelSelection = new ModelSelection(\\n\\t\\t\\t\\tdata.targetRanges.map( viewRange => editor.editing.mapper.toModelRange( viewRange ) )\\n\\t\\t\\t);\\n\\n\\t\\t\\tfor ( const file of data.dataTransfer.files ) {\\n\\t\\t\\t\\tconst insertAt = findOptimalInsertionPosition( targetModelSelection );\\n\\n\\t\\t\\t\\tif ( isImageType( file ) ) {\\n\\t\\t\\t\\t\\teditor.execute( 'imageUpload', { file, insertAt } );\\n\\t\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Use target ranges only for the first image. Then, use that image position\\n\\t\\t\\t\\t// so we keep adding the next ones after the previous one.\\n\\t\\t\\t\\ttargetModelSelection = doc.selection;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Prevents from browser redirecting to the dropped image.\\n\\t\\teditor.editing.view.document.on( 'dragover', ( evt, data ) => {\\n\\t\\t\\tdata.preventDefault();\\n\\t\\t} );\\n\\n\\t\\tdoc.on( 'change', () => {\\n\\t\\t\\tconst changes = doc.differ.getChanges( { includeChangesInGraveyard: true } );\\n\\n\\t\\t\\tfor ( const entry of changes ) {\\n\\t\\t\\t\\tif ( entry.type == 'insert' && entry.name == 'image' ) {\\n\\t\\t\\t\\t\\tconst item = entry.position.nodeAfter;\\n\\t\\t\\t\\t\\tconst isInGraveyard = entry.position.root.rootName == '$graveyard';\\n\\n\\t\\t\\t\\t\\t// Check if the image element still has upload id.\\n\\t\\t\\t\\t\\tconst uploadId = item.getAttribute( 'uploadId' );\\n\\n\\t\\t\\t\\t\\tif ( !uploadId ) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Check if the image is loaded on this client.\\n\\t\\t\\t\\t\\tconst loader = fileRepository.loaders.get( uploadId );\\n\\n\\t\\t\\t\\t\\tif ( !loader ) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif ( isInGraveyard ) {\\n\\t\\t\\t\\t\\t\\t// If the image was inserted to the graveyard - abort the loading process.\\n\\t\\t\\t\\t\\t\\tloader.abort();\\n\\t\\t\\t\\t\\t} else if ( loader.status == 'idle' ) {\\n\\t\\t\\t\\t\\t\\t// If the image was inserted into content and has not been loaded, start loading it.\\n\\t\\t\\t\\t\\t\\tthis._load( loader, item );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Performs image loading. Image is read from the disk and temporary data is displayed, after uploading process\\n\\t * is complete we replace temporary data with target image from the server.\\n\\t *\\n\\t * @private\\n\\t * @param {module:upload/filerepository~FileLoader} loader\\n\\t * @param {module:engine/model/element~Element} imageElement\\n\\t */\\n\\t_load( loader, imageElement ) {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst model = editor.model;\\n\\t\\tconst t = editor.locale.t;\\n\\t\\tconst fileRepository = editor.plugins.get( FileRepository );\\n\\t\\tconst notification = editor.plugins.get( Notification );\\n\\n\\t\\tmodel.enqueueChange( 'transparent', writer => {\\n\\t\\t\\twriter.setAttribute( 'uploadStatus', 'reading', imageElement );\\n\\t\\t} );\\n\\n\\t\\tloader.read()\\n\\t\\t\\t.then( data => {\\n\\t\\t\\t\\tconst viewFigure = editor.editing.mapper.toViewElement( imageElement );\\n\\t\\t\\t\\tconst viewImg = viewFigure.getChild( 0 );\\n\\t\\t\\t\\tconst promise = loader.upload();\\n\\n\\t\\t\\t\\teditor.editing.view.change( writer => {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'src', data, viewImg );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tmodel.enqueueChange( 'transparent', writer => {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'uploadStatus', 'uploading', imageElement );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\treturn promise;\\n\\t\\t\\t} )\\n\\t\\t\\t.then( data => {\\n\\t\\t\\t\\tmodel.enqueueChange( 'transparent', writer => {\\n\\t\\t\\t\\t\\twriter.setAttributes( { uploadStatus: 'complete', src: data.default }, imageElement );\\n\\n\\t\\t\\t\\t\\t// Srcset attribute for responsive images support.\\n\\t\\t\\t\\t\\tlet maxWidth = 0;\\n\\t\\t\\t\\t\\tconst srcsetAttribute = Object.keys( data )\\n\\t\\t\\t\\t\\t\\t// Filter out keys that are not integers.\\n\\t\\t\\t\\t\\t\\t.filter( key => {\\n\\t\\t\\t\\t\\t\\t\\tconst width = parseInt( key, 10 );\\n\\n\\t\\t\\t\\t\\t\\t\\tif ( !isNaN( width ) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tmaxWidth = Math.max( maxWidth, width );\\n\\n\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} )\\n\\n\\t\\t\\t\\t\\t\\t// Convert each key to srcset entry.\\n\\t\\t\\t\\t\\t\\t.map( key => `${ data[ key ] } ${ key }w` )\\n\\n\\t\\t\\t\\t\\t\\t// Join all entries.\\n\\t\\t\\t\\t\\t\\t.join( ', ' );\\n\\n\\t\\t\\t\\t\\tif ( srcsetAttribute != '' ) {\\n\\t\\t\\t\\t\\t\\twriter.setAttribute( 'srcset', {\\n\\t\\t\\t\\t\\t\\t\\tdata: srcsetAttribute,\\n\\t\\t\\t\\t\\t\\t\\twidth: maxWidth\\n\\t\\t\\t\\t\\t\\t}, imageElement );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tclean();\\n\\t\\t\\t} )\\n\\t\\t\\t.catch( msg => {\\n\\t\\t\\t\\t// Might be 'aborted'.\\n\\t\\t\\t\\tif ( loader.status == 'error' ) {\\n\\t\\t\\t\\t\\tnotification.showWarning( msg, {\\n\\t\\t\\t\\t\\t\\ttitle: t( 'Upload failed' ),\\n\\t\\t\\t\\t\\t\\tnamespace: 'upload'\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tclean();\\n\\n\\t\\t\\t\\t// Permanently remove image from insertion batch.\\n\\t\\t\\t\\tmodel.enqueueChange( 'transparent', writer => {\\n\\t\\t\\t\\t\\twriter.remove( imageElement );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t} );\\n\\n\\t\\tfunction clean() {\\n\\t\\t\\tmodel.enqueueChange( 'transparent', writer => {\\n\\t\\t\\t\\twriter.removeAttribute( 'uploadId', imageElement );\\n\\t\\t\\t\\twriter.removeAttribute( 'uploadStatus', imageElement );\\n\\t\\t\\t} );\\n\\n\\t\\t\\tfileRepository.destroyLoader( loader );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Returns true if non-empty `text/html` is included in data transfer.\\n//\\n// @param {module:clipboard/datatransfer~DataTransfer} dataTransfer\\n// @returns {Boolean}\\nexport function isHtmlIncluded( dataTransfer ) {\\n\\treturn Array.from( dataTransfer.types ).includes( 'text/html' ) && dataTransfer.getData( 'text/html' ) !== '';\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imageupload\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageUploadUI from './imageupload/imageuploadui';\\nimport ImageUploadProgress from './imageupload/imageuploadprogress';\\nimport ImageUploadEditing from './imageupload/imageuploadediting';\\n\\n/**\\n * Image upload plugin.\\n *\\n * This plugin do not do anything directly, but loads set of specific plugins to enable image uploading:\\n * * {@link module:image/imageupload/imageuploadediting~ImageUploadEditing},\\n * * {@link module:image/imageupload/imageuploadui~ImageUploadUI},\\n * * {@link module:image/imageupload/imageuploadprogress~ImageUploadProgress}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageUpload extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageUpload';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageUploadEditing, ImageUploadUI, ImageUploadProgress ];\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module paragraph/paragraphcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * The paragraph command.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class ParagraphCommand extends Command {\\n\\t/**\\n\\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\\n\\t *\\n\\t * @readonly\\n\\t * @observable\\n\\t * @member {Boolean} #value\\n\\t */\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\t\\tconst block = first( document.selection.getSelectedBlocks() );\\n\\n\\t\\tthis.value = !!block && block.is( 'paragraph' );\\n\\t\\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\\n\\t * will be turned to paragraphs.\\n\\t *\\n\\t * @fires execute\\n\\t * @param {Object} [options] Options for the executed command.\\n\\t * @param {module:engine/model/selection~Selection} [options.selection] The selection that the command should be applied to.\\n\\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\\n\\n\\t\\t\\tfor ( const block of blocks ) {\\n\\t\\t\\t\\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\\n\\t\\t\\t\\t\\twriter.rename( block, 'paragraph' );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Checks whether the given block can be replaced by a paragraph.\\n//\\n// @private\\n// @param {module:engine/model/element~Element} block A block to be tested.\\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\\n// @returns {Boolean}\\nfunction checkCanBecomeParagraph( block, schema ) {\\n\\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module paragraph/paragraph\\n */\\n\\nimport ParagraphCommand from './paragraphcommand';\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport { SchemaContext } from '@ckeditor/ckeditor5-engine/src/model/schema';\\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\n\\n/**\\n * The paragraph feature for the editor.\\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Paragraph extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Paragraph';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst model = editor.model;\\n\\t\\tconst data = editor.data;\\n\\n\\t\\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\\n\\n\\t\\t// Schema.\\n\\t\\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\\n\\n\\t\\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\\n\\n\\t\\t// Content autoparagraphing. --------------------------------------------------\\n\\n\\t\\t// Handles elements not converted by plugins and checks if would be converted if\\n\\t\\t// we wraps them by a paragraph or changes them to a paragraph.\\n\\t\\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\\n\\t\\t\\t// When element is already consumed by higher priority converters then do nothing.\\n\\t\\t\\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// When element is paragraph-like lets try to change it into a paragraph.\\n\\t\\t\\tif ( Paragraph.paragraphLikeElements.has( data.viewItem.name ) ) {\\n\\t\\t\\t\\tif ( data.viewItem.isEmpty ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\\n\\n\\t\\t\\t\\t// Find allowed parent for paragraph that we are going to insert.\\n\\t\\t\\t\\t// If current parent does not allow to insert paragraph but one of the ancestors does\\n\\t\\t\\t\\t// then split nodes to allowed parent.\\n\\t\\t\\t\\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\\n\\n\\t\\t\\t\\t// When there is no split result it means that we can't insert paragraph in this position.\\n\\t\\t\\t\\tif ( !splitResult ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Insert paragraph in allowed position.\\n\\t\\t\\t\\tconversionApi.writer.insert( paragraph, splitResult.position );\\n\\n\\t\\t\\t\\t// Convert children to paragraph.\\n\\t\\t\\t\\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, Position.createAt( paragraph ) );\\n\\n\\t\\t\\t\\t// Output range starts before paragraph but ends inside it after last child.\\n\\t\\t\\t\\t// This is because we want to keep siblings inside the same paragraph as long as it is possible.\\n\\t\\t\\t\\t// When next node won't be allowed in a paragraph it will split this paragraph anyway.\\n\\t\\t\\t\\tdata.modelRange = new Range( Position.createBefore( paragraph ), modelRange.end );\\n\\t\\t\\t\\tdata.modelCursor = data.modelRange.end;\\n\\n\\t\\t\\t// When element is not paragraph-like lets try to wrap it by a paragraph.\\n\\t\\t\\t} else if ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\\n\\t\\t\\t\\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'low' } );\\n\\n\\t\\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\\n\\t\\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\\n\\t\\t\\t// When node is already converted then do nothing.\\n\\t\\t\\tif ( data.modelRange ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\\n\\t\\t\\t\\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\\n\\t\\t\\t}\\n\\t\\t}, { priority: 'lowest' } );\\n\\n\\t\\t// Empty roots autoparagraphing. -----------------------------------------------\\n\\n\\t\\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\\n\\t\\t// Besides fixing content on #changesDone we also need to handle #dataReady because\\n\\t\\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\\n\\t\\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\\n\\n\\t\\teditor.on( 'dataReady', () => {\\n\\t\\t\\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\\n\\t\\t}, { priority: 'lowest' } );\\n\\t}\\n\\n\\t/**\\n\\t * Fixes all empty roots.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\\n\\t */\\n\\t_autoparagraphEmptyRoots( writer ) {\\n\\t\\tconst model = this.editor.model;\\n\\n\\t\\tfor ( const rootName of model.document.getRootNames() ) {\\n\\t\\t\\tconst root = model.document.getRoot( rootName );\\n\\n\\t\\t\\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\\n\\t\\t\\t\\t// If paragraph element is allowed in the root, create paragraph element.\\n\\t\\t\\t\\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\\n\\t\\t\\t\\t\\twriter.insertElement( 'paragraph', root );\\n\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * A list of element names which should be treated by the autoparagraphing algorithms as\\n * paragraph-like. This means that e.g. the following content:\\n *\\n *\\t\\t<h1>Foo</h1>\\n *\\t\\t<table>\\n *\\t\\t\\t<tr>\\n *\\t\\t\\t\\t<td>X</td>\\n *\\t\\t\\t\\t<td>\\n *\\t\\t\\t\\t\\t<ul>\\n *\\t\\t\\t\\t\\t\\t<li>Y</li>\\n *\\t\\t\\t\\t\\t\\t<li>Z</li>\\n *\\t\\t\\t\\t\\t</ul>\\n *\\t\\t\\t\\t</td>\\n *\\t\\t\\t</tr>\\n *\\t\\t</table>\\n *\\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\\n * by the paragraph feature and converted to:\\n *\\n *\\t\\t<p>Foo</p>\\n *\\t\\t<p>X</p>\\n *\\t\\t<p>Y</p>\\n *\\t\\t<p>Z</p>\\n *\\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\\n * have a priority upon conversion.\\n *\\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\\n */\\nParagraph.paragraphLikeElements = new Set( [\\n\\t'blockquote',\\n\\t'dd',\\n\\t'div',\\n\\t'dt',\\n\\t'h1',\\n\\t'h2',\\n\\t'h3',\\n\\t'h4',\\n\\t'h5',\\n\\t'h6',\\n\\t'li',\\n\\t'p',\\n\\t'td'\\n] );\\n\\nfunction wrapInParagraph( input, position, conversionApi ) {\\n\\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\\n\\n\\tconversionApi.writer.insert( paragraph, position );\\n\\treturn conversionApi.convertItem( input, Position.createAt( paragraph ) );\\n}\\n\\nfunction isParagraphable( node, position, schema ) {\\n\\tconst context = new SchemaContext( position );\\n\\n\\t// When paragraph is allowed in this context...\\n\\tif ( !schema.checkChild( context, 'paragraph' ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// And a node would be allowed in this paragraph...\\n\\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treturn true;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module heading/headingcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class HeadingCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor Editor instance.\\n\\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\\n\\t */\\n\\tconstructor( editor, modelElements ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\\n\\t\\t * the value is set to the name of that heading model element.\\n\\t\\t * It is  set to `false` otherwise.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean|String} #value\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Set of defined model's elements names that this command support.\\n\\t\\t * See {@link module:heading/heading~HeadingOption}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<String>}\\n\\t\\t */\\n\\t\\tthis.modelElements = modelElements;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\\n\\n\\t\\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\\n\\t\\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\\n\\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\\n\\t *\\n\\t * @param {Object} options\\n\\t * @param {String} options.value Name of the element which this command will apply in the model.\\n\\t * @fires execute\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\n\\t\\tconst modelElement = options.value;\\n\\n\\t\\tif ( !this.modelElements.includes( modelElement ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\\n\\t\\t\\t\\t.filter( block => {\\n\\t\\t\\t\\t\\treturn checkCanBecomeHeading( block, modelElement, model.schema );\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\tfor ( const block of blocks ) {\\n\\t\\t\\t\\tif ( !block.is( modelElement ) ) {\\n\\t\\t\\t\\t\\twriter.rename( block, modelElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Checks whether the given block can be replaced by a specific heading.\\n//\\n// @private\\n// @param {module:engine/model/element~Element} block A block to be tested.\\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\\n// @returns {Boolean}\\nfunction checkCanBecomeHeading( block, heading, schema ) {\\n\\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module heading/headingediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\\nimport HeadingCommand from './headingcommand';\\n\\nconst defaultModelElement = 'paragraph';\\n\\n/**\\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class HeadingEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\teditor.config.define( 'heading', {\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\\n\\t\\t\\t\\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\\n\\t\\t\\t\\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\\n\\t\\t\\t\\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ Paragraph ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst options = editor.config.get( 'heading.options' );\\n\\n\\t\\tconst modelElements = [];\\n\\n\\t\\tfor ( const option of options ) {\\n\\t\\t\\t// Skip paragraph - it is defined in required Paragraph feature.\\n\\t\\t\\tif ( option.model !== defaultModelElement ) {\\n\\t\\t\\t\\t// Schema.\\n\\t\\t\\t\\teditor.model.schema.register( option.model, {\\n\\t\\t\\t\\t\\tinheritAllFrom: '$block'\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\teditor.conversion.elementToElement( option );\\n\\n\\t\\t\\t\\tmodelElements.push( option.model );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Register the heading command for this option.\\n\\t\\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tafterInit() {\\n\\t\\t// If the enter command is added to the editor, alter its behavior.\\n\\t\\t// Enter at the end of a heading element should create a paragraph.\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst enterCommand = editor.commands.get( 'enter' );\\n\\t\\tconst options = editor.config.get( 'heading.options' );\\n\\n\\t\\tif ( enterCommand ) {\\n\\t\\t\\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\\n\\t\\t\\t\\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\\n\\t\\t\\t\\tconst isHeading = options.some( option => positionParent.is( option.model ) );\\n\\n\\t\\t\\t\\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\\n\\t\\t\\t\\t\\tdata.writer.rename( positionParent, defaultModelElement );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/model\\n */\\n\\nimport extend from '@ckeditor/ckeditor5-utils/src/lib/lodash/extend';\\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\\n\\n/**\\n * The base MVC model class.\\n *\\n * @mixes module:utils/observablemixin~ObservableMixin\\n */\\nexport default class Model {\\n\\t/**\\n\\t * Creates a new Model instance.\\n\\t *\\n\\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\\n\\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\\n\\t */\\n\\tconstructor( attributes, properties ) {\\n\\t\\t// Extend this instance with the additional (out of state) properties.\\n\\t\\tif ( properties ) {\\n\\t\\t\\textend( this, properties );\\n\\t\\t}\\n\\n\\t\\t// Initialize the attributes.\\n\\t\\tif ( attributes ) {\\n\\t\\t\\tthis.set( attributes );\\n\\t\\t}\\n\\t}\\n}\\n\\nmix( Model, ObservableMixin );\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/dropdown/dropdownpanelview\\n */\\n\\nimport View from '../view';\\n\\n/**\\n * The dropdown panel view class.\\n *\\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class DropdownPanelView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the panel is visible.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isVisible\\n\\t\\t */\\n\\t\\tthis.set( 'isVisible', false );\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child views in this panel.\\n\\t\\t *\\n\\t\\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\\n\\t\\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\\n\\t\\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.children = this.createCollection();\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-reset',\\n\\t\\t\\t\\t\\t'ck-dropdown__panel',\\n\\t\\t\\t\\t\\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.children,\\n\\n\\t\\t\\ton: {\\n\\t\\t\\t\\t// Drag and drop in the panel should not break the selection in the editor.\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\\n\\t\\t\\t\\tselectstart: bind.to( evt => evt.preventDefault() )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the view element or first item in view collection on opening dropdown's panel.\\n\\t *\\n\\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\\n\\t */\\n\\tfocus() {\\n\\t\\tif ( this.children.length ) {\\n\\t\\t\\tthis.children.first.focus();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the view element or last item in view collection on opening dropdown's panel.\\n\\t *\\n\\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\\n\\t */\\n\\tfocusLast() {\\n\\t\\tif ( this.children.length ) {\\n\\t\\t\\tconst lastChild = this.children.last;\\n\\n\\t\\t\\tif ( typeof lastChild.focusLast === 'function' ) {\\n\\t\\t\\t\\tlastChild.focusLast();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlastChild.focus();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/dropdown/dropdownview\\n */\\n\\nimport View from '../view';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\nimport '../../theme/components/dropdown/dropdown.css';\\n\\n/**\\n * The dropdown view class. It manages the dropdown button and dropdown panel.\\n *\\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\\n * util:\\n *\\n *\\t\\tconst dropdown = createDropdown( locale );\\n *\\n *\\t\\t// Configure dropdown's button properties:\\n *\\t\\tdropdown.buttonView.set( {\\n *\\t\\t\\tlabel: 'A dropdown',\\n *\\t\\t\\twithText: true\\n *\\t\\t} );\\n *\\n *\\t\\tdropdown.render();\\n *\\n *\\t\\tdropdown.panelView.element.textContent = 'Content of the panel';\\n *\\n *\\t\\t// Will render a dropdown with a panel containing a \\\"Content of the panel\\\" text.\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\\n *\\n * If you want to create a completely custom dropdown, then you can compose it manually:\\n *\\n *\\t\\tconst button = new DropdownButtonView( locale );\\n *\\t\\tconst panel = new DropdownPanelView( locale );\\n *\\t\\tconst dropdown = new DropdownView( locale, button, panel );\\n *\\n *\\t\\tbutton.set( {\\n *\\t\\t\\tlabel: 'A dropdown',\\n *\\t\\t\\twithText: true\\n *\\t\\t} );\\n *\\n *\\t\\tdropdown.render();\\n *\\n *\\t\\tpanel.element.textContent = 'Content of the panel';\\n *\\n *\\t\\t// Will render a dropdown with a panel containing a \\\"Content of the panel\\\" text.\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class DropdownView extends View {\\n\\t/**\\n\\t * Creates an instance of the dropdown.\\n\\t *\\n\\t * Also see {@link #render}.\\n\\t *\\n\\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\\n\\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\\n\\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\\n\\t */\\n\\tconstructor( locale, buttonView, panelView ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\t/**\\n\\t\\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\\n\\t\\t */\\n\\t\\tthis.buttonView = buttonView;\\n\\n\\t\\t/**\\n\\t\\t * Panel of the dropdown. It opens when the {@link #buttonView} is\\n\\t\\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\\n\\t\\t *\\n\\t\\t * Child views can be added to the panel's `children` collection:\\n\\t\\t *\\n\\t\\t *\\t\\tdropdown.panelView.children.add( childView );\\n\\t\\t *\\n\\t\\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\\n\\t\\t * {@link module:ui/viewcollection~ViewCollection#add}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\\n\\t\\t */\\n\\t\\tthis.panelView = panelView;\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isOpen\\n\\t\\t */\\n\\t\\tthis.set( 'isOpen', false );\\n\\n\\t\\t/**\\n\\t\\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\\n\\t\\t *\\n\\t\\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isEnabled\\n\\t\\t */\\n\\t\\tthis.set( 'isEnabled', true );\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the dropdown.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\\n\\t\\t * keystrokes of the dropdown:\\n\\t\\t *\\n\\t\\t * * <kbd>▼</kbd> opens the dropdown,\\n\\t\\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-dropdown',\\n\\t\\t\\t\\t\\tbind.to( 'isEnabled', isEnabled => isEnabled ? '' : 'ck-disabled' )\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tbuttonView,\\n\\t\\t\\t\\tpanelView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\tbuttonView.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-dropdown__button',\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\\n\\t\\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\\n\\t\\t *\\n\\t\\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/list/listview~ListView} #listView\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * A child toolbar of the dropdown located in the\\n\\t\\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\\n\\t\\t *\\n\\t\\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Fired when the toolbar button or list item is executed.\\n\\t\\t *\\n\\t\\t * For {@link #listView} It fires when one of the list items has been\\n\\t\\t * {@link module:ui/list/listitemview~ListItemView#event:execute executed}.\\n\\t\\t *\\n\\t\\t * For {@link #toolbarView} It fires when one of the buttons has been\\n\\t\\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\\n\\t\\t *\\n\\t\\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\\n\\t\\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\\n\\t\\t *\\n\\t\\t * @event execute\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\t// Toggle the dropdown when its button has been clicked.\\n\\t\\tthis.listenTo( this.buttonView, 'open', () => {\\n\\t\\t\\tthis.isOpen = !this.isOpen;\\n\\t\\t} );\\n\\n\\t\\t// Toggle the visibility of the panel when the dropdown becomes open.\\n\\t\\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\\n\\n\\t\\t// Listen for keystrokes coming from within #element.\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\n\\t\\t// Register #element in the focus tracker.\\n\\t\\tthis.focusTracker.add( this.element );\\n\\n\\t\\tconst closeDropdown = ( data, cancel ) => {\\n\\t\\t\\tif ( this.isOpen ) {\\n\\t\\t\\t\\tthis.buttonView.focus();\\n\\t\\t\\t\\tthis.isOpen = false;\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Open the dropdown panel using the arrow down key, just like with return or space.\\n\\t\\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\\n\\t\\t\\t// Don't open if the dropdown is disabled or already open.\\n\\t\\t\\tif ( this.buttonView.isEnabled && !this.isOpen ) {\\n\\t\\t\\t\\tthis.isOpen = true;\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Block the right arrow key (until nested dropdowns are implemented).\\n\\t\\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\\n\\t\\t\\tif ( this.isOpen ) {\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Close the dropdown using the arrow left/escape key.\\n\\t\\tthis.keystrokes.set( 'arrowleft', closeDropdown );\\n\\t\\tthis.keystrokes.set( 'esc', closeDropdown );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the {@link #buttonView}.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.buttonView.focus();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/dropdown/button/dropdownbuttonview\\n */\\n\\nimport ButtonView from '../../button/buttonview';\\n\\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\\nimport IconView from '../../icon/iconview';\\n\\n/**\\n * The default dropdown button view class.\\n *\\n *\\t\\tconst view = new DropdownButtonView();\\n *\\n *\\t\\tview.set( {\\n *\\t\\t\\tlabel: 'A button',\\n *\\t\\t\\tkeystroke: 'Ctrl+B',\\n *\\t\\t\\ttooltip: true\\n *\\t\\t} );\\n *\\n *\\t\\tview.render();\\n *\\n *\\t\\tdocument.body.append( view.element );\\n *\\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\\n *\\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\\n * @extends module:ui/button/buttonview~ButtonView\\n */\\nexport default class DropdownButtonView extends ButtonView {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\t/**\\n\\t\\t * An icon that displays arrow to indicate a dropdown button.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/icon/iconview~IconView}\\n\\t\\t */\\n\\t\\tthis.arrowView = this._createArrowView();\\n\\n\\t\\t// The DropdownButton interface expects the open event upon which will open the dropdown.\\n\\t\\tthis.delegate( 'execute' ).to( this, 'open' );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tthis.children.add( this.arrowView );\\n\\t}\\n\\n\\t/**\\n\\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/icon/iconview~IconView}\\n\\t */\\n\\t_createArrowView() {\\n\\t\\tconst arrowView = new IconView();\\n\\n\\t\\tarrowView.content = dropdownArrowIcon;\\n\\n\\t\\tarrowView.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: 'ck-dropdown__arrow'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\treturn arrowView;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/list/listview\\n */\\n\\nimport View from '../view';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport FocusCycler from '../focuscycler';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\nimport '../../theme/components/list/list.css';\\n\\n/**\\n * The list view class.\\n *\\n * @extends module:ui/view~View\\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\\n */\\nexport default class ListView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor() {\\n\\t\\tsuper();\\n\\n\\t\\t/**\\n\\t\\t * Collection of the child list views.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis.items = this.createCollection();\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the list.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\t/**\\n\\t\\t * Helps cycling over focusable {@link #items} in the list.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/focuscycler~FocusCycler}\\n\\t\\t */\\n\\t\\tthis._focusCycler = new FocusCycler( {\\n\\t\\t\\tfocusables: this.items,\\n\\t\\t\\tfocusTracker: this.focusTracker,\\n\\t\\t\\tkeystrokeHandler: this.keystrokes,\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\t// Navigate list items backwards using the arrowup key.\\n\\t\\t\\t\\tfocusPrevious: 'arrowup',\\n\\n\\t\\t\\t\\t// Navigate toolbar items forwards using the arrowdown key.\\n\\t\\t\\t\\tfocusNext: 'arrowdown',\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'ul',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-reset',\\n\\t\\t\\t\\t\\t'ck-list'\\n\\t\\t\\t\\t]\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: this.items\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\t// Items added before rendering should be known to the #focusTracker.\\n\\t\\tfor ( const item of this.items ) {\\n\\t\\t\\tthis.focusTracker.add( item.element );\\n\\t\\t}\\n\\n\\t\\tthis.items.on( 'add', ( evt, item ) => {\\n\\t\\t\\tthis.focusTracker.add( item.element );\\n\\t\\t} );\\n\\n\\t\\tthis.items.on( 'remove', ( evt, item ) => {\\n\\t\\t\\tthis.focusTracker.remove( item.element );\\n\\t\\t} );\\n\\n\\t\\t// Start listening for the keystrokes coming from #element.\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the first focusable in {@link #items}.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis._focusCycler.focusFirst();\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the last focusable in {@link #items}.\\n\\t */\\n\\tfocusLast() {\\n\\t\\tthis._focusCycler.focusLast();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/list/listitemview\\n */\\n\\nimport View from '../view';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\n/**\\n * The list item view class.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class ListItemView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor() {\\n\\t\\tsuper();\\n\\n\\t\\t/**\\n\\t\\t * Controls the `tabindex` attribute of the item.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @default -1\\n\\t\\t * @member {String} #tabindex\\n\\t\\t */\\n\\t\\tthis.set( 'tabindex', -1 );\\n\\n\\t\\t/**\\n\\t\\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\tconst bind = this.bindTemplate;\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'li',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-list__item',\\n\\t\\t\\t\\t\\tbind.to( 'class' ),\\n\\t\\t\\t\\t\\tbind.if( 'isActive', 'ck-list__item_active' )\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\tstyle: bind.to( 'style' ),\\n\\t\\t\\t\\ttabindex: bind.to( 'tabindex' )\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttext: bind.to( 'label' )\\n\\t\\t\\t\\t}\\n\\t\\t\\t],\\n\\n\\t\\t\\ton: {\\n\\t\\t\\t\\tclick: bind.to( 'execute' )\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t/**\\n\\t\\t * The label of the list item.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #label\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * (Optional) The DOM style attribute of the list item.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #style\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * (Optional) The additional class set on the {@link #element}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String} #class\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * (Optional) When set, it marks the item as active among the others.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {Boolean} #isActive\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * Fired when the list item has been clicked.\\n\\t\\t *\\n\\t\\t * @event execute\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tconst onKeystrokePress = ( data, cancel ) => {\\n\\t\\t\\tthis.fire( 'execute' );\\n\\t\\t\\tcancel();\\n\\t\\t};\\n\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\n\\t\\t// Execute on Enter and Space key press.\\n\\t\\tthis.keystrokes.set( 'Enter', onKeystrokePress );\\n\\t\\tthis.keystrokes.set( 'Space', onKeystrokePress );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the list item.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis.element.focus();\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module ui/dropdown/utils\\n */\\n\\nimport DropdownPanelView from './dropdownpanelview';\\nimport DropdownView from './dropdownview';\\nimport DropdownButtonView from './button/dropdownbuttonview';\\nimport ToolbarView from '../toolbar/toolbarview';\\nimport ListView from '../list/listview';\\nimport ListItemView from '../list/listitemview';\\n\\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\\n\\nimport '../../theme/components/dropdown/toolbardropdown.css';\\nimport '../../theme/components/dropdown/listdropdown.css';\\n\\n/**\\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\\n *\\n * # Creating dropdowns\\n *\\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\\n * definition of the button:\\n *\\n *\\t\\tconst dropdown = createDropdown( model );\\n *\\n *\\t\\t// Configure dropdown's button properties:\\n *\\t\\tdropdown.buttonView.set( {\\n *\\t\\t\\tlabel: 'A dropdown',\\n *\\t\\t\\twithText: true\\n *\\t\\t} );\\n *\\n *\\t\\tdropdown.render();\\n *\\n *\\t\\t// Will render a dropdown labeled \\\"A dropdown\\\" with an empty panel.\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * You can also provide other button views (they need to implement the\\n * {module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\\n *\\n *\\t\\tconst dropdown = createDropdown( model, SplitButtonView );\\n *\\n *\\t\\t// Configure dropdown's button properties:\\n *\\t\\tdropdown.buttonView.set( {\\n *\\t\\t\\tlabel: 'A dropdown',\\n *\\t\\t\\twithText: true\\n *\\t\\t} );\\n *\\n *\\t\\tdropdown.buttonView.on( 'execute', () => {\\n *\\t\\t\\t// Add the behavior of the \\\"action part\\\" of the split button.\\n *\\t\\t\\t// Split button consists of the \\\"action part\\\" and \\\"arrow part\\\".\\n *\\t\\t\\t// The arrow opens the dropdown while the action part can have some other behavior.\\n * \\t\\t} );\\n *\\n *\\t\\tdropdown.render();\\n *\\n *\\t\\t// Will render a dropdown labeled \\\"A dropdown\\\" with an empty panel.\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * # Adding content to the dropdown's panel\\n *\\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\\n *\\n *\\t\\tdropdown.panelView.element.textContent = 'Content of the panel';\\n *\\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\\n *\\n * @param {module:utils/locale~Locale} locale The locale instance.\\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\\n */\\nexport function createDropdown( locale, ButtonClass = DropdownButtonView ) {\\n\\tconst buttonView = new ButtonClass( locale );\\n\\n\\tconst panelView = new DropdownPanelView( locale );\\n\\tconst dropdownView = new DropdownView( locale, buttonView, panelView );\\n\\n\\tbuttonView.bind( 'isEnabled' ).to( dropdownView );\\n\\n\\tif ( buttonView instanceof DropdownButtonView ) {\\n\\t\\tbuttonView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\\n\\t} else {\\n\\t\\tbuttonView.arrowView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\\n\\t}\\n\\n\\taddDefaultBehavior( dropdownView );\\n\\n\\treturn dropdownView;\\n}\\n\\n/**\\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\\n *\\n *\\t\\tconst buttons = [];\\n *\\n *\\t\\t// Either create a new ButtonView instance or create existing.\\n *\\t\\tbuttons.push( new ButtonView() );\\n *\\t\\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\\n *\\n *\\t\\tconst dropdown = createDropdown( locale );\\n *\\n *\\t\\taddToolbarToDropdown( dropdown, buttons );\\n *\\n *\\t\\tdropdown.toolbarView.isVertical = true;\\n *\\n *\\t\\t// Will render a vertical button dropdown labeled \\\"A button dropdown\\\"\\n *\\t\\t// with a button group in the panel containing two buttons.\\n *\\t\\tdropdown.render()\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\\n *\\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\\n */\\nexport function addToolbarToDropdown( dropdownView, buttons ) {\\n\\tconst toolbarView = dropdownView.toolbarView = new ToolbarView();\\n\\n\\tdropdownView.extendTemplate( {\\n\\t\\tattributes: {\\n\\t\\t\\tclass: [ 'ck-toolbar-dropdown' ]\\n\\t\\t}\\n\\t} );\\n\\n\\tbuttons.map( view => toolbarView.items.add( view ) );\\n\\n\\tdropdownView.panelView.children.add( toolbarView );\\n\\ttoolbarView.items.delegate( 'execute' ).to( dropdownView );\\n}\\n\\n/**\\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\\n *\\n *\\t\\tconst items = new Collection();\\n *\\n *\\t\\titems.add( new Model( { label: 'First item', style: 'color: red' } ) );\\n *\\t\\titems.add( new Model( { label: 'Second item', style: 'color: green', class: 'foo' } ) );\\n *\\n *\\t\\tconst dropdown = createDropdown( locale );\\n *\\n *\\t\\taddListToDropdown( dropdown, items );\\n *\\n *\\t\\t// Will render a dropdown with a list in the panel containing two items.\\n *\\t\\tdropdown.render()\\n *\\t\\tdocument.body.appendChild( dropdown.element );\\n *\\n * The `items` collection passed to this methods controls the presence and attributes of respective\\n * {@link module:ui/list/listitemview~ListItemView list items}.\\n *\\n *\\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\\n *\\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\\n * @param {module:utils/collection~Collection} items\\n * that the inner dropdown {@link module:ui/list/listview~ListView} children are created from.\\n *\\n * Usually, it is a collection of {@link module:ui/model~Model models}.\\n */\\nexport function addListToDropdown( dropdownView, items ) {\\n\\tconst locale = dropdownView.locale;\\n\\tconst listView = dropdownView.listView = new ListView( locale );\\n\\n\\tlistView.items.bindTo( items ).using( itemModel => {\\n\\t\\tconst item = new ListItemView( locale );\\n\\n\\t\\t// Bind all attributes of the model to the item view.\\n\\t\\titem.bind( ...Object.keys( itemModel ) ).to( itemModel );\\n\\n\\t\\treturn item;\\n\\t} );\\n\\n\\tdropdownView.panelView.children.add( listView );\\n\\n\\tlistView.items.delegate( 'execute' ).to( dropdownView );\\n}\\n\\n// Add a set of default behaviors to dropdown view.\\n//\\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\\nfunction addDefaultBehavior( dropdownView ) {\\n\\tcloseDropdownOnBlur( dropdownView );\\n\\tcloseDropdownOnExecute( dropdownView );\\n\\tfocusDropdownContentsOnArrows( dropdownView );\\n}\\n\\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\\n//\\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\\nfunction closeDropdownOnBlur( dropdownView ) {\\n\\tdropdownView.on( 'render', () => {\\n\\t\\tclickOutsideHandler( {\\n\\t\\t\\temitter: dropdownView,\\n\\t\\t\\tactivator: () => dropdownView.isOpen,\\n\\t\\t\\tcallback: () => {\\n\\t\\t\\t\\tdropdownView.isOpen = false;\\n\\t\\t\\t},\\n\\t\\t\\tcontextElements: [ dropdownView.element ]\\n\\t\\t} );\\n\\t} );\\n}\\n\\n// Adds a behavior to a dropdownView that closes the dropdown view on \\\"execute\\\" event.\\n//\\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\\nfunction closeDropdownOnExecute( dropdownView ) {\\n\\t// Close the dropdown when one of the list items has been executed.\\n\\tdropdownView.on( 'execute', () => {\\n\\t\\tdropdownView.isOpen = false;\\n\\t} );\\n}\\n\\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\\n//\\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\\nfunction focusDropdownContentsOnArrows( dropdownView ) {\\n\\t// If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\\n\\tdropdownView.keystrokes.set( 'arrowdown', ( data, cancel ) => {\\n\\t\\tif ( dropdownView.isOpen ) {\\n\\t\\t\\tdropdownView.panelView.focus();\\n\\t\\t\\tcancel();\\n\\t\\t}\\n\\t} );\\n\\n\\t// If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\\n\\tdropdownView.keystrokes.set( 'arrowup', ( data, cancel ) => {\\n\\t\\tif ( dropdownView.isOpen ) {\\n\\t\\t\\tdropdownView.panelView.focusLast();\\n\\t\\t\\tcancel();\\n\\t\\t}\\n\\t} );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module heading/headingui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\\n\\nimport { createDropdown, addListToDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\\n\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\n\\nimport '../theme/heading.css';\\n\\n/**\\n * The headings UI feature. It introduces the `headings` dropdown.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class HeadingUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\t\\tconst options = this._getLocalizedOptions();\\n\\t\\tconst defaultTitle = t( 'Choose heading' );\\n\\t\\tconst dropdownTooltip = t( 'Heading' );\\n\\n\\t\\t// Register UI component.\\n\\t\\teditor.ui.componentFactory.add( 'heading', locale => {\\n\\t\\t\\tconst titles = {};\\n\\t\\t\\tconst dropdownItems = new Collection();\\n\\n\\t\\t\\tconst headingCommand = editor.commands.get( 'heading' );\\n\\t\\t\\tconst paragraphCommand = editor.commands.get( 'paragraph' );\\n\\n\\t\\t\\tconst commands = [ headingCommand ];\\n\\n\\t\\t\\tfor ( const option of options ) {\\n\\t\\t\\t\\tconst itemModel = new Model( {\\n\\t\\t\\t\\t\\tlabel: option.title,\\n\\t\\t\\t\\t\\tclass: option.class\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\tif ( option.model === 'paragraph' ) {\\n\\t\\t\\t\\t\\titemModel.bind( 'isActive' ).to( paragraphCommand, 'value' );\\n\\t\\t\\t\\t\\titemModel.set( 'commandName', 'paragraph' );\\n\\t\\t\\t\\t\\tcommands.push( paragraphCommand );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\titemModel.bind( 'isActive' ).to( headingCommand, 'value', value => value === option.model );\\n\\t\\t\\t\\t\\titemModel.set( {\\n\\t\\t\\t\\t\\t\\tcommandName: 'heading',\\n\\t\\t\\t\\t\\t\\tcommandValue: option.model\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add the option to the collection.\\n\\t\\t\\t\\tdropdownItems.add( itemModel );\\n\\n\\t\\t\\t\\ttitles[ option.model ] = option.title;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst dropdownView = createDropdown( locale );\\n\\t\\t\\taddListToDropdown( dropdownView, dropdownItems );\\n\\n\\t\\t\\tdropdownView.buttonView.set( {\\n\\t\\t\\t\\tisOn: false,\\n\\t\\t\\t\\twithText: true,\\n\\t\\t\\t\\ttooltip: dropdownTooltip\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.extendTemplate( {\\n\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t\\t'ck-heading-dropdown'\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\\n\\t\\t\\t\\treturn areEnabled.some( isEnabled => isEnabled );\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.buttonView.bind( 'label' ).to( headingCommand, 'value', paragraphCommand, 'value', ( value, para ) => {\\n\\t\\t\\t\\tconst whichModel = value || para && 'paragraph';\\n\\t\\t\\t\\t// If none of the commands is active, display default title.\\n\\t\\t\\t\\treturn titles[ whichModel ] ? titles[ whichModel ] : defaultTitle;\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Execute command when an item from the dropdown is selected.\\n\\t\\t\\tthis.listenTo( dropdownView, 'execute', evt => {\\n\\t\\t\\t\\teditor.execute( evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined );\\n\\t\\t\\t\\teditor.editing.view.focus();\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn dropdownView;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Returns heading options as defined in `config.heading.options` but processed to consider\\n\\t * editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\\n\\t * in the correct language.\\n\\t *\\n\\t * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\\n\\t * when the user config is defined because the editor does not exist yet.\\n\\t *\\n\\t * @private\\n\\t * @returns {Array.<module:heading/heading~HeadingOption>}.\\n\\t */\\n\\t_getLocalizedOptions() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\t\\tconst localizedTitles = {\\n\\t\\t\\tParagraph: t( 'Paragraph' ),\\n\\t\\t\\t'Heading 1': t( 'Heading 1' ),\\n\\t\\t\\t'Heading 2': t( 'Heading 2' ),\\n\\t\\t\\t'Heading 3': t( 'Heading 3' )\\n\\t\\t};\\n\\n\\t\\treturn editor.config.get( 'heading.options' ).map( option => {\\n\\t\\t\\tconst title = localizedTitles[ option.title ];\\n\\n\\t\\t\\tif ( title && title != option.title ) {\\n\\t\\t\\t\\t// Clone the option to avoid altering the original `config.heading.options`.\\n\\t\\t\\t\\toption = Object.assign( {}, option, { title } );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn option;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/placeholder\\n */\\n\\nimport '../../theme/placeholder.css';\\n\\n// Each document stores information about its placeholder elements and check functions.\\nconst documentPlaceholders = new WeakMap();\\n\\n/**\\n * Attaches placeholder to provided element and updates it's visibility. To change placeholder simply call this method\\n * once again with new parameters.\\n *\\n * @param {module:engine/view/view~View} view View controller.\\n * @param {module:engine/view/element~Element} element Element to attach placeholder to.\\n * @param {String} placeholderText Placeholder text to use.\\n * @param {Function} [checkFunction] If provided it will be called before checking if placeholder should be displayed.\\n * If function returns `false` placeholder will not be showed.\\n */\\nexport function attachPlaceholder( view, element, placeholderText, checkFunction ) {\\n\\tconst document = view.document;\\n\\n\\t// Single listener per document.\\n\\tif ( !documentPlaceholders.has( document ) ) {\\n\\t\\tdocumentPlaceholders.set( document, new Map() );\\n\\n\\t\\t// Create view post fixer that will add placeholder where needed.\\n\\t\\tdocument.registerPostFixer( writer => updateAllPlaceholders( document, writer ) );\\n\\t}\\n\\n\\t// Store information about element with placeholder.\\n\\tdocumentPlaceholders.get( document ).set( element, { placeholderText, checkFunction } );\\n\\n\\t// Update view right away.\\n\\tview.render();\\n}\\n\\n/**\\n * Removes placeholder functionality from given element.\\n *\\n * @param {module:engine/view/view~View} view\\n * @param {module:engine/view/element~Element} element\\n */\\nexport function detachPlaceholder( view, element ) {\\n\\tconst document = element.document;\\n\\n\\tif ( documentPlaceholders.has( document ) ) {\\n\\t\\tdocumentPlaceholders.get( document ).delete( element );\\n\\t}\\n\\n\\tview.change( writer => {\\n\\t\\twriter.removeClass( 'ck-placeholder', element );\\n\\t\\twriter.removeAttribute( 'data-placeholder', element );\\n\\t} );\\n}\\n\\n// Updates all placeholders of given document.\\n//\\n// @private\\n// @param {module:engine/view/document~Document} view\\n// @param {module:engine/view/writer~Writer} writer\\nfunction updateAllPlaceholders( document, writer ) {\\n\\tconst placeholders = documentPlaceholders.get( document );\\n\\tlet changed = false;\\n\\n\\tfor ( const [ element, info ] of placeholders ) {\\n\\t\\tif ( updateSinglePlaceholder( writer, element, info ) ) {\\n\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\t}\\n\\n\\treturn changed;\\n}\\n\\n// Updates placeholder class of given element.\\n//\\n// @private\\n// @param {module:engine/view/writer~Writer} writer\\n// @param {module:engine/view/element~Element} element\\n// @param {Object} info\\nfunction updateSinglePlaceholder( writer, element, info ) {\\n\\tconst document = element.document;\\n\\tconst text = info.placeholderText;\\n\\tlet changed = false;\\n\\n\\t// Element was removed from document.\\n\\tif ( !document ) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// Update data attribute if needed.\\n\\tif ( element.getAttribute( 'data-placeholder' ) !== text ) {\\n\\t\\twriter.setAttribute( 'data-placeholder', text, element );\\n\\t\\tchanged = true;\\n\\t}\\n\\n\\tconst viewSelection = document.selection;\\n\\tconst anchor = viewSelection.anchor;\\n\\tconst checkFunction = info.checkFunction;\\n\\n\\t// If checkFunction is provided and returns false - remove placeholder.\\n\\tif ( checkFunction && !checkFunction() ) {\\n\\t\\tif ( element.hasClass( 'ck-placeholder' ) ) {\\n\\t\\t\\twriter.removeClass( 'ck-placeholder', element );\\n\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\n\\t\\treturn changed;\\n\\t}\\n\\n\\t// Element is empty for placeholder purposes when it has no children or only ui elements.\\n\\t// This check is taken from `view.ContainerElement#getFillerOffset`.\\n\\tconst isEmptyish = !Array.from( element.getChildren() ).some( element => !element.is( 'uiElement' ) );\\n\\n\\t// If element is empty and editor is blurred.\\n\\tif ( !document.isFocused && isEmptyish ) {\\n\\t\\tif ( !element.hasClass( 'ck-placeholder' ) ) {\\n\\t\\t\\twriter.addClass( 'ck-placeholder', element );\\n\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\n\\t\\treturn changed;\\n\\t}\\n\\n\\t// It there are no child elements and selection is not placed inside element.\\n\\tif ( isEmptyish && anchor && anchor.parent !== element ) {\\n\\t\\tif ( !element.hasClass( 'ck-placeholder' ) ) {\\n\\t\\t\\twriter.addClass( 'ck-placeholder', element );\\n\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\t} else {\\n\\t\\tif ( element.hasClass( 'ck-placeholder' ) ) {\\n\\t\\t\\twriter.removeClass( 'ck-placeholder', element );\\n\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\t}\\n\\n\\treturn changed;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagecaption/utils\\n */\\n\\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport { attachPlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\\n\\nconst captionSymbol = Symbol( 'imageCaption' );\\n\\n/**\\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\\n *\\n * @param {module:engine/view/view~View} view\\n * @param {String} placeholderText The text to be displayed when the caption is empty.\\n * @return {Function}\\n */\\nexport function captionElementCreator( view, placeholderText ) {\\n\\treturn writer => {\\n\\t\\tconst editable = writer.createEditableElement( 'figcaption' );\\n\\t\\twriter.setCustomProperty( captionSymbol, true, editable );\\n\\t\\tattachPlaceholder( view, editable, placeholderText );\\n\\n\\t\\treturn toWidgetEditable( editable, writer );\\n\\t};\\n}\\n\\n/**\\n * Returns `true` if a given view element is the image caption editable.\\n *\\n * @param {module:engine/view/element~Element} viewElement\\n * @return {Boolean}\\n */\\nexport function isCaption( viewElement ) {\\n\\treturn !!viewElement.getCustomProperty( captionSymbol );\\n}\\n\\n/**\\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\\n *\\n * @param {module:engine/model/element~Element} imageModelElement\\n * @return {module:engine/model/element~Element|null}\\n */\\nexport function getCaptionFromImage( imageModelElement ) {\\n\\tfor ( const node of imageModelElement.getChildren() ) {\\n\\t\\tif ( node instanceof ModelElement && node.name == 'caption' ) {\\n\\t\\t\\treturn node;\\n\\t\\t}\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/**\\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\\n * inside the image `<figure>` element.\\n *\\n * @param {module:engine/view/element~Element} element\\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\\n * cannot be matched.\\n */\\nexport function matchImageCaption( element ) {\\n\\tconst parent = element.parent;\\n\\n\\t// Convert only captions for images.\\n\\tif ( element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass( 'image' ) ) {\\n\\t\\treturn { name: true };\\n\\t}\\n\\n\\treturn null;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagecaption/imagecaptionediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\\nimport { isImage } from '../image/utils';\\nimport {\\n\\tcaptionElementCreator,\\n\\tgetCaptionFromImage,\\n\\tmatchImageCaption\\n} from './utils';\\n\\n/**\\n * The image caption engine plugin.\\n *\\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\\n * to the model document.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageCaptionEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst view = editor.editing.view;\\n\\t\\tconst schema = editor.model.schema;\\n\\t\\tconst data = editor.data;\\n\\t\\tconst editing = editor.editing;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\t/**\\n\\t\\t * Last selected caption editable.\\n\\t\\t * It is used for hiding the editable when it is empty and the image widget is no longer selected.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\\n\\t\\t */\\n\\n\\t\\t// Schema configuration.\\n\\t\\tschema.register( 'caption', {\\n\\t\\t\\tallowIn: 'image',\\n\\t\\t\\tallowContentOf: '$block',\\n\\t\\t\\tisLimit: true\\n\\t\\t} );\\n\\n\\t\\t// Add caption element to each image inserted without it.\\n\\t\\teditor.model.document.registerPostFixer( writer => this._insertMissingModelCaptionElement( writer ) );\\n\\n\\t\\t// View to model converter for the data pipeline.\\n\\t\\teditor.conversion.for( 'upcast' ).add( upcastElementToElement( {\\n\\t\\t\\tview: matchImageCaption,\\n\\t\\t\\tmodel: 'caption'\\n\\t\\t} ) );\\n\\n\\t\\t// Model to view converter for the data pipeline.\\n\\t\\tconst createCaptionForData = writer => writer.createContainerElement( 'figcaption' );\\n\\t\\tdata.downcastDispatcher.on( 'insert:caption', captionModelToView( createCaptionForData, false ) );\\n\\n\\t\\t// Model to view converter for the editing pipeline.\\n\\t\\tconst createCaptionForEditing = captionElementCreator( view, t( 'Enter image caption' ) );\\n\\t\\tediting.downcastDispatcher.on( 'insert:caption', captionModelToView( createCaptionForEditing ) );\\n\\n\\t\\t// Always show caption in view when something is inserted in model.\\n\\t\\tediting.downcastDispatcher.on(\\n\\t\\t\\t'insert',\\n\\t\\t\\tthis._fixCaptionVisibility( data => data.item ),\\n\\t\\t\\t{ priority: 'high' }\\n\\t\\t);\\n\\n\\t\\t// Hide caption when everything is removed from it.\\n\\t\\tediting.downcastDispatcher.on( 'remove', this._fixCaptionVisibility( data => data.position.parent ), { priority: 'high' } );\\n\\n\\t\\t// Update caption visibility on view in post fixer.\\n\\t\\tview.document.registerPostFixer( writer => this._updateCaptionVisibility( writer ) );\\n\\t}\\n\\n\\t/**\\n\\t * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\\n\\t * and then visible when the image is selected.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/view/writer~Writer} viewWriter\\n\\t * @returns {Boolean} Returns `true` when view is updated.\\n\\t */\\n\\t_updateCaptionVisibility( viewWriter ) {\\n\\t\\tconst mapper = this.editor.editing.mapper;\\n\\t\\tconst lastCaption = this._lastSelectedCaption;\\n\\t\\tlet viewCaption;\\n\\n\\t\\t// If whole image is selected.\\n\\t\\tconst modelSelection = this.editor.model.document.selection;\\n\\t\\tconst selectedElement = modelSelection.getSelectedElement();\\n\\n\\t\\tif ( selectedElement && selectedElement.is( 'image' ) ) {\\n\\t\\t\\tconst modelCaption = getCaptionFromImage( selectedElement );\\n\\t\\t\\tviewCaption = mapper.toViewElement( modelCaption );\\n\\t\\t}\\n\\n\\t\\t// If selection is placed inside caption.\\n\\t\\tconst position = modelSelection.getFirstPosition();\\n\\t\\tconst modelCaption = getParentCaption( position.parent );\\n\\n\\t\\tif ( modelCaption ) {\\n\\t\\t\\tviewCaption = mapper.toViewElement( modelCaption );\\n\\t\\t}\\n\\n\\t\\t// Is currently any caption selected?\\n\\t\\tif ( viewCaption ) {\\n\\t\\t\\t// Was any caption selected before?\\n\\t\\t\\tif ( lastCaption ) {\\n\\t\\t\\t\\t// Same caption as before?\\n\\t\\t\\t\\tif ( lastCaption === viewCaption ) {\\n\\t\\t\\t\\t\\treturn showCaption( viewCaption, viewWriter );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thideCaptionIfEmpty( lastCaption, viewWriter );\\n\\t\\t\\t\\t\\tthis._lastSelectedCaption = viewCaption;\\n\\n\\t\\t\\t\\t\\treturn showCaption( viewCaption, viewWriter );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis._lastSelectedCaption = viewCaption;\\n\\t\\t\\t\\treturn showCaption( viewCaption, viewWriter );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t// Was any caption selected before?\\n\\t\\t\\tif ( lastCaption ) {\\n\\t\\t\\t\\tconst viewModified = hideCaptionIfEmpty( lastCaption, viewWriter );\\n\\t\\t\\t\\tthis._lastSelectedCaption = null;\\n\\n\\t\\t\\t\\treturn viewModified;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns converter that fixes caption visibility during the model-to-view conversion.\\n\\t * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\\n\\t *\\n\\t * @private\\n\\t * @param {Function} nodeFinder\\n\\t * @returns {Function}\\n\\t */\\n\\t_fixCaptionVisibility( nodeFinder ) {\\n\\t\\treturn ( evt, data, conversionApi ) => {\\n\\t\\t\\tconst node = nodeFinder( data );\\n\\t\\t\\tconst modelCaption = getParentCaption( node );\\n\\t\\t\\tconst mapper = this.editor.editing.mapper;\\n\\t\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t\\tif ( modelCaption ) {\\n\\t\\t\\t\\tconst viewCaption = mapper.toViewElement( modelCaption );\\n\\n\\t\\t\\t\\tif ( viewCaption ) {\\n\\t\\t\\t\\t\\tif ( modelCaption.childCount ) {\\n\\t\\t\\t\\t\\t\\tviewWriter.removeClass( 'ck-hidden', viewCaption );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tviewWriter.addClass( 'ck-hidden', viewCaption );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether data inserted to the model document have image element that has no caption element inside it.\\n\\t * If there is none - adds it to the image element.\\n\\t *\\n\\t * @private\\n\\t * @param {module:engine/model/writer~Writer} writer Writer to make changes with.\\n\\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\\n\\t */\\n\\t_insertMissingModelCaptionElement( writer ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst changes = model.document.differ.getChanges();\\n\\n\\t\\tfor ( const entry of changes ) {\\n\\t\\t\\tif ( entry.type == 'insert' && entry.name == 'image' ) {\\n\\t\\t\\t\\tconst item = entry.position.nodeAfter;\\n\\n\\t\\t\\t\\tif ( !getCaptionFromImage( item ) ) {\\n\\t\\t\\t\\t\\twriter.appendElement( 'caption', item );\\n\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n// Creates a converter that converts image caption model element to view element.\\n//\\n// @private\\n// @param {Function} elementCreator\\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\\n// @return {Function}\\nfunction captionModelToView( elementCreator, hide = true ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tconst captionElement = data.item;\\n\\n\\t\\t// Return if element shouldn't be present when empty.\\n\\t\\tif ( !captionElement.childCount && !hide ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif ( isImage( captionElement.parent ) ) {\\n\\t\\t\\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst viewImage = conversionApi.mapper.toViewElement( data.range.start.parent );\\n\\t\\t\\tconst viewCaption = elementCreator( conversionApi.writer );\\n\\t\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\t\\t// Hide if empty.\\n\\t\\t\\tif ( !captionElement.childCount ) {\\n\\t\\t\\t\\tviewWriter.addClass( 'ck-hidden', viewCaption );\\n\\t\\t\\t}\\n\\n\\t\\t\\tinsertViewCaptionAndBind( viewCaption, data.item, viewImage, conversionApi );\\n\\t\\t}\\n\\t};\\n}\\n\\n// Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\\n//\\n// @private\\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\\n// @param {module:engine/model/element~Element} modelCaption\\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\\n// @param {Object} conversionApi\\nfunction insertViewCaptionAndBind( viewCaption, modelCaption, viewImage, conversionApi ) {\\n\\tconst viewPosition = ViewPosition.createAt( viewImage, 'end' );\\n\\n\\tconversionApi.writer.insert( viewPosition, viewCaption );\\n\\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\\n}\\n\\n// Checks if the provided node or one of its ancestors is a caption element, and returns it.\\n//\\n// @private\\n// @param {module:engine/model/node~Node} node\\n// @returns {module:engine/model/element~Element|null}\\nfunction getParentCaption( node ) {\\n\\tconst ancestors = node.getAncestors( { includeSelf: true } );\\n\\tconst caption = ancestors.find( ancestor => ancestor.name == 'caption' );\\n\\n\\tif ( caption && caption.parent && caption.parent.name == 'image' ) {\\n\\t\\treturn caption;\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n// Hides given caption in the view if it's empty.\\n//\\n// @private\\n// @param {module:engine/view/containerelement~ContainerElement} caption\\n// @param {module:engine/view/writer~Writer} viewWriter\\n// @returns {Boolean} Returns `true` if view was modified.\\nfunction hideCaptionIfEmpty( caption, viewWriter ) {\\n\\tif ( !caption.childCount && !caption.hasClass( 'ck-hidden' ) ) {\\n\\t\\tviewWriter.addClass( 'ck-hidden', caption );\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\\n// Shows the caption\\n//\\n// @private\\n// @param {module:engine/view/containerelement~ContainerElement} caption\\n// @param {module:engine/view/writer~Writer} viewWriter\\n// @returns {Boolean} Returns `true` if view was modified.\\nfunction showCaption( caption, viewWriter ) {\\n\\tif ( caption.hasClass( 'ck-hidden' ) ) {\\n\\t\\tviewWriter.removeClass( 'ck-hidden', caption );\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagestyle/imagestylecommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport { isImage } from '../image/utils';\\n\\n/**\\n * The image style command. It is used to apply different image styles.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class ImageStyleCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the image style command. Each command instance is handling one style.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles A styles that this command supports.\\n\\t */\\n\\tconstructor( editor, styles ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * Cached name of the default style if present. If there is no default style it defaults to `false`.\\n\\t\\t *\\n\\t\\t * @type {Boolean|String}\\n\\t\\t * @private\\n\\t\\t */\\n\\t\\tthis._defaultStyle = false;\\n\\n\\t\\t/**\\n\\t\\t * A style handled by this command.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} #styles\\n\\t\\t */\\n\\t\\tthis.styles = styles.reduce( ( styles, style ) => {\\n\\t\\t\\tstyles[ style.name ] = style;\\n\\n\\t\\t\\tif ( style.isDefault ) {\\n\\t\\t\\t\\tthis._defaultStyle = style.name;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn styles;\\n\\t\\t}, {} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst element = this.editor.model.document.selection.getSelectedElement();\\n\\n\\t\\tthis.isEnabled = isImage( element );\\n\\n\\t\\tif ( !element ) {\\n\\t\\t\\tthis.value = false;\\n\\t\\t} else if ( element.hasAttribute( 'imageStyle' ) ) {\\n\\t\\t\\tconst attributeValue = element.getAttribute( 'imageStyle' );\\n\\t\\t\\tthis.value = this.styles[ attributeValue ] ? attributeValue : false;\\n\\t\\t} else {\\n\\t\\t\\tthis.value = this._defaultStyle;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t *\\t\\teditor.execute( 'imageStyle', { value: 'side' } );\\n\\t *\\n\\t * @param {Object} options\\n\\t * @param {String} options.value The name of the style (based on the\\n\\t * {@link module:image/image~ImageConfig#styles `image.styles`} configuration option).\\n\\t * @fires execute\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst styleName = options.value;\\n\\n\\t\\tif ( !this.styles[ styleName ] ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst imageElement = model.document.selection.getSelectedElement();\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\t// Default style means that there is no `imageStyle` attribute in the model.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-image/issues/147\\n\\t\\t\\tif ( this.styles[ styleName ].isDefault ) {\\n\\t\\t\\t\\twriter.removeAttribute( 'imageStyle', imageElement );\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twriter.setAttribute( 'imageStyle', styleName, imageElement );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * @module image/imagestyle/converters\\n */\\n\\n/**\\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\\n *\\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\\n * for more details.\\n * @returns {Function} A model-to-view attribute converter.\\n */\\nexport function modelToViewStyleAttribute( styles ) {\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Check if there is class name associated with given value.\\n\\t\\tconst newStyle = getStyleByName( data.attributeNewValue, styles );\\n\\t\\tconst oldStyle = getStyleByName( data.attributeOldValue, styles );\\n\\n\\t\\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\n\\t\\tif ( oldStyle ) {\\n\\t\\t\\tviewWriter.removeClass( oldStyle.className, viewElement );\\n\\t\\t}\\n\\n\\t\\tif ( newStyle ) {\\n\\t\\t\\tviewWriter.addClass( newStyle.className, viewElement );\\n\\t\\t}\\n\\t};\\n}\\n\\n/**\\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\\n *\\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles Styles for which the converter is created.\\n * @returns {Function} A view-to-model converter.\\n */\\nexport function viewToModelStyleAttribute( styles ) {\\n\\t// Convert only non–default styles.\\n\\tconst filteredStyles = styles.filter( style => !style.isDefault );\\n\\n\\treturn ( evt, data, conversionApi ) => {\\n\\t\\tif ( !data.modelRange ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst viewFigureElement = data.viewItem;\\n\\t\\tconst modelImageElement = first( data.modelRange.getItems() );\\n\\n\\t\\t// Check if `imageStyle` attribute is allowed for current element.\\n\\t\\tif ( !conversionApi.schema.checkAttribute( modelImageElement, 'imageStyle' ) ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Convert style one by one.\\n\\t\\tfor ( const style of filteredStyles ) {\\n\\t\\t\\t// Try to consume class corresponding with style.\\n\\t\\t\\tif ( conversionApi.consumable.consume( viewFigureElement, { class: style.className } ) ) {\\n\\t\\t\\t\\t// And convert this style to model attribute.\\n\\t\\t\\t\\tconversionApi.writer.setAttribute( 'imageStyle', style.name, modelImageElement );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n// Returns style with given `name` from array of styles.\\n//\\n// @param {String} name\\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\\n// @return {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\\nfunction getStyleByName( name, styles ) {\\n\\tfor ( const style of styles ) {\\n\\t\\tif ( style.name === name ) {\\n\\t\\t\\treturn style;\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagestyle/utils\\n */\\n\\nimport log from '@ckeditor/ckeditor5-utils/src/log';\\n\\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\\n\\n/**\\n * Default image styles provided by the plugin, which can be referred in the\\n * {@link module:image/image~ImageConfig#styles} config.\\n *\\n * Among them, 2 default semantic content styles are available:\\n *\\n * * `full` is a full–width image without any CSS class,\\n * * `side` is a side image styled with the `image-style-side` CSS class\\n *\\n * There are also 3 styles focused on formatting:\\n *\\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\\n * * `alignCenter` centers the image to the left using the `image-style-align-center` class,\\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\\n *\\n * @member {Object.<String,Object>}\\n */\\nconst defaultStyles = {\\n\\t// This option is equal to situation when no style is applied.\\n\\tfull: {\\n\\t\\tname: 'full',\\n\\t\\ttitle: 'Full size image',\\n\\t\\ticon: fullWidthIcon,\\n\\t\\tisDefault: true\\n\\t},\\n\\n\\t// This represents side image.\\n\\tside: {\\n\\t\\tname: 'side',\\n\\t\\ttitle: 'Side image',\\n\\t\\ticon: rightIcon,\\n\\t\\tclassName: 'image-style-side'\\n\\t},\\n\\n\\t// This style represents an imaged aligned to the left.\\n\\talignLeft: {\\n\\t\\tname: 'alignLeft',\\n\\t\\ttitle: 'Left aligned image',\\n\\t\\ticon: leftIcon,\\n\\t\\tclassName: 'image-style-align-left'\\n\\t},\\n\\n\\t// This style represents a centered imaged.\\n\\talignCenter: {\\n\\t\\tname: 'alignCenter',\\n\\t\\ttitle: 'Centered image',\\n\\t\\ticon: centerIcon,\\n\\t\\tclassName: 'image-style-align-center'\\n\\t},\\n\\n\\t// This style represents an imaged aligned to the right.\\n\\talignRight: {\\n\\t\\tname: 'alignRight',\\n\\t\\ttitle: 'Right aligned image',\\n\\t\\ticon: rightIcon,\\n\\t\\tclassName: 'image-style-align-right'\\n\\t}\\n};\\n\\n/**\\n * Default image style icons provided by the plugin, which can be referred in the\\n * {@link module:image/image~ImageConfig#styles} config.\\n *\\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\\n *\\n * @member {Object.<String, String>}\\n */\\nconst defaultIcons = {\\n\\tfull: fullWidthIcon,\\n\\tleft: leftIcon,\\n\\tright: rightIcon,\\n\\tcenter: centerIcon\\n};\\n\\n/**\\n * Returns {@link module:image/image~ImageConfig#styles} array with items normalized in the\\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\\n *\\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\\n */\\nexport function normalizeImageStyles( configuredStyles = [] ) {\\n\\treturn configuredStyles\\n\\t\\t.map( _normalizeStyle )\\n\\t\\t.map( style => Object.assign( {}, style ) );\\n}\\n\\n// Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\\n//\\n// @param {Object} style\\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\\nfunction _normalizeStyle( style ) {\\n\\t// Just the name of the style has been passed.\\n\\tif ( typeof style == 'string' ) {\\n\\t\\tconst styleName = style;\\n\\n\\t\\t// If it's one of the defaults, just use it.\\n\\t\\tif ( defaultStyles[ styleName ] ) {\\n\\t\\t\\t// Clone the style to avoid overriding defaults.\\n\\t\\t\\tstyle = Object.assign( {}, defaultStyles[ styleName ] );\\n\\t\\t}\\n\\t\\t// If it's just a name but none of the defaults, warn because probably it's a mistake.\\n\\t\\telse {\\n\\t\\t\\tlog.warn(\\n\\t\\t\\t\\t'image-style-not-found: There is no such image style of given name.',\\n\\t\\t\\t\\t{ name: styleName }\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Normalize the style anyway to prevent errors.\\n\\t\\t\\tstyle = {\\n\\t\\t\\t\\tname: styleName\\n\\t\\t\\t};\\n\\t\\t}\\n\\t}\\n\\t// If an object style has been passed and if the name matches one of the defaults,\\n\\t// extend it with defaults – the user wants to customize a default style.\\n\\t// Note: Don't override the user–defined style object, clone it instead.\\n\\telse if ( defaultStyles[ style.name ] ) {\\n\\t\\tconst defaultStyle = defaultStyles[ style.name ];\\n\\t\\tconst extendedStyle = Object.assign( {}, style );\\n\\n\\t\\tfor ( const prop in defaultStyle ) {\\n\\t\\t\\tif ( !style.hasOwnProperty( prop ) ) {\\n\\t\\t\\t\\textendedStyle[ prop ] = defaultStyle[ prop ];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tstyle = extendedStyle;\\n\\t}\\n\\n\\t// If an icon is defined as a string and correspond with a name\\n\\t// in default icons, use the default icon provided by the plugin.\\n\\tif ( typeof style.icon == 'string' && defaultIcons[ style.icon ] ) {\\n\\t\\tstyle.icon = defaultIcons[ style.icon ];\\n\\t}\\n\\n\\treturn style;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagestyle/imagestyleediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageStyleCommand from './imagestylecommand';\\nimport ImageEditing from '../image/imageediting';\\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\\nimport { normalizeImageStyles } from './utils';\\n\\n/**\\n * The image style engine plugin. It sets the default configuration, creates converters and registers\\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\\n *\\n * @extends {module:core/plugin~Plugin}\\n */\\nexport default class ImageStyleEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageEditing ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageStyleEditing';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst schema = editor.model.schema;\\n\\t\\tconst data = editor.data;\\n\\t\\tconst editing = editor.editing;\\n\\n\\t\\t// Define default configuration.\\n\\t\\teditor.config.define( 'image.styles', [ 'full', 'side' ] );\\n\\n\\t\\t// Get configuration.\\n\\t\\tconst styles = normalizeImageStyles( editor.config.get( 'image.styles' ) );\\n\\n\\t\\t// Allow imageStyle attribute in image.\\n\\t\\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\\n\\t\\tschema.extend( 'image', { allowAttributes: 'imageStyle' } );\\n\\n\\t\\t// Converters for imageStyle attribute from model to view.\\n\\t\\tconst modelToViewConverter = modelToViewStyleAttribute( styles );\\n\\t\\tediting.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\\n\\t\\tdata.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\\n\\n\\t\\t// Converter for figure element from view to model.\\n\\t\\tdata.upcastDispatcher.on( 'element:figure', viewToModelStyleAttribute( styles ), { priority: 'low' } );\\n\\n\\t\\t// Register imageStyle command.\\n\\t\\teditor.commands.add( 'imageStyle', new ImageStyleCommand( editor, styles ) );\\n\\t}\\n}\\n\\n/**\\n * Image style format descriptor.\\n *\\n *\\t\\timport fullSizeIcon from 'path/to/icon.svg';\\n *\\n *\\t\\tconst imageStyleFormat = {\\n *\\t\\t\\tname: 'fullSize',\\n *\\t\\t\\ticon: fullSizeIcon,\\n *\\t\\t\\ttitle: 'Full size image',\\n *\\t\\t\\tclassName: 'image-full-size'\\n *\\t\\t}\\n *\\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\\n *\\n * @property {String} name The unique name of the style. It will be used to:\\n *\\n * * store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element,\\n * * as a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\\n * * when registering button for each of the styles (`'imageStyle:{name}'`) in the\\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin),\\n *\\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\\n * A default style does not apply any CSS class to the view element.\\n *\\n * @property {String} icon One of the following to be used when creating the style's button:\\n *\\n * * An SVG icon source (as an XML string),\\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\\n *\\n * @property {String} title The style's title.\\n *\\n * @property {String} className The CSS class used to represent the style in view.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagestyle/imagestyleui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport { normalizeImageStyles } from './utils';\\n\\nimport '../../theme/imagestyle.css';\\n\\n/**\\n * The image style UI plugin.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageStyleUI extends Plugin {\\n\\t/**\\n\\t * Returns the default localized style titles provided by the plugin.\\n\\t *\\n\\t * The following localized titles corresponding with\\n\\t * {@link module:image/imagestyle/utils~defaultStyles} are available:\\n\\t *\\n\\t * * `'Full size image'`,\\n\\t * * `'Side image'`,\\n\\t * * `'Left aligned image'`,\\n\\t * * `'Centered image'`,\\n\\t * * `'Right aligned image'`\\n\\t *\\n\\t * @returns {Object.<String,String>}\\n\\t */\\n\\tget localizedDefaultStylesTitles() {\\n\\t\\tconst t = this.editor.t;\\n\\n\\t\\treturn {\\n\\t\\t\\t'Full size image': t( 'Full size image' ),\\n\\t\\t\\t'Side image': t( 'Side image' ),\\n\\t\\t\\t'Left aligned image': t( 'Left aligned image' ),\\n\\t\\t\\t'Centered image': t( 'Centered image' ),\\n\\t\\t\\t'Right aligned image': t( 'Right aligned image' )\\n\\t\\t};\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst configuredStyles = editor.config.get( 'image.styles' );\\n\\n\\t\\tconst translatedStyles = translateStyles( normalizeImageStyles( configuredStyles ), this.localizedDefaultStylesTitles );\\n\\n\\t\\tfor ( const style of translatedStyles ) {\\n\\t\\t\\tthis._createButton( style );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\\n\\t *\\n\\t * @private\\n\\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\\n\\t */\\n\\t_createButton( style ) {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\tconst componentName = `imageStyle:${ style.name }`;\\n\\n\\t\\teditor.ui.componentFactory.add( componentName, locale => {\\n\\t\\t\\tconst command = editor.commands.get( 'imageStyle' );\\n\\t\\t\\tconst view = new ButtonView( locale );\\n\\n\\t\\t\\tview.set( {\\n\\t\\t\\t\\tlabel: style.title,\\n\\t\\t\\t\\ticon: style.icon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\\n\\t\\t\\tview.bind( 'isOn' ).to( command, 'value', value => value === style.name );\\n\\n\\t\\t\\tthis.listenTo( view, 'execute', () => editor.execute( 'imageStyle', { value: style.name } ) );\\n\\n\\t\\t\\treturn view;\\n\\t\\t} );\\n\\t}\\n}\\n\\n/**\\n * Returns translated `title` from the passed styles array.\\n *\\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\\n * @param titles\\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\\n */\\nfunction translateStyles( styles, titles ) {\\n\\tfor ( const style of styles ) {\\n\\t\\t// Localize the titles of the styles, if a title corresponds with\\n\\t\\t// a localized default provided by the plugin.\\n\\t\\tif ( titles[ style.title ] ) {\\n\\t\\t\\tstyle.title = titles[ style.title ];\\n\\t\\t}\\n\\t}\\n\\n\\treturn styles;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagetoolbar\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\\nimport { isImageWidgetSelected } from './image/utils';\\nimport { repositionContextualBalloon, getBalloonPositionData } from './image/ui/utils';\\n\\nconst balloonClassName = 'ck-toolbar-container';\\n\\n/**\\n * The image toolbar class. Creates an image toolbar that shows up when the image widget is selected.\\n *\\n * Toolbar components are created using the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}\\n * based on the {@link module:core/editor/editor~Editor#config configuration} stored under `image.toolbar`.\\n *\\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageToolbar extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ContextualBalloon ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageToolbar';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst balloonToolbar = editor.plugins.get( 'BalloonToolbar' );\\n\\n\\t\\t// If `BalloonToolbar` plugin is loaded, it should be disabled for images\\n\\t\\t// which have their own toolbar to avoid duplication.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-image/issues/110\\n\\t\\tif ( balloonToolbar ) {\\n\\t\\t\\tthis.listenTo( balloonToolbar, 'show', evt => {\\n\\t\\t\\t\\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\\n\\t\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, { priority: 'high' } );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tafterInit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst toolbarConfig = editor.config.get( 'image.toolbar' );\\n\\n\\t\\t// Don't add the toolbar if there is no configuration.\\n\\t\\tif ( !toolbarConfig || !toolbarConfig.length ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t/**\\n\\t\\t * The contextual balloon plugin instance.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\\n\\t\\t */\\n\\t\\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\\n\\n\\t\\t/**\\n\\t\\t * A `ToolbarView` instance used to display the buttons specific for image\\n\\t\\t * editing.\\n\\t\\t *\\n\\t\\t * @protected\\n\\t\\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\\n\\t\\t */\\n\\t\\tthis._toolbar = new ToolbarView();\\n\\n\\t\\t// Add buttons to the toolbar.\\n\\t\\tthis._toolbar.fillFromConfig( toolbarConfig, editor.ui.componentFactory );\\n\\n\\t\\t// Show balloon panel each time image widget is selected.\\n\\t\\tthis.listenTo( editor.editing.view, 'render', () => {\\n\\t\\t\\tthis._checkIsVisible();\\n\\t\\t} );\\n\\n\\t\\t// There is no render method after focus is back in editor, we need to check if balloon panel should be visible.\\n\\t\\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => {\\n\\t\\t\\tthis._checkIsVisible();\\n\\t\\t}, { priority: 'low' } );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the toolbar should show up or hide depending on the\\n\\t * current selection.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_checkIsVisible() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\tif ( !editor.ui.focusTracker.isFocused ) {\\n\\t\\t\\tthis._hideToolbar();\\n\\t\\t} else {\\n\\t\\t\\tif ( isImageWidgetSelected( editor.editing.view.document.selection ) ) {\\n\\t\\t\\t\\tthis._showToolbar();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis._hideToolbar();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Shows the {@link #_toolbar} in the {@link #_balloon}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_showToolbar() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\tif ( this._isVisible ) {\\n\\t\\t\\trepositionContextualBalloon( editor );\\n\\t\\t} else {\\n\\t\\t\\tif ( !this._balloon.hasView( this._toolbar ) ) {\\n\\t\\t\\t\\tthis._balloon.add( {\\n\\t\\t\\t\\t\\tview: this._toolbar,\\n\\t\\t\\t\\t\\tposition: getBalloonPositionData( editor ),\\n\\t\\t\\t\\t\\tballoonClassName\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Removes the {@link #_toolbar} from the {@link #_balloon}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_hideToolbar() {\\n\\t\\tif ( !this._isVisible ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis._balloon.remove( this._toolbar );\\n\\t}\\n\\n\\t/**\\n\\t * Returns `true` when the {@link #_toolbar} is the visible view\\n\\t * in the {@link #_balloon}.\\n\\t *\\n\\t * @private\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _isVisible() {\\n\\t\\treturn this._balloon.visibleView == this._toolbar;\\n\\t}\\n}\\n\\n/**\\n * Items to be placed in the image toolbar.\\n * The option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\\n *\\n * Assuming that you use the following features:\\n *\\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\\n * * {@link module:image/imagetextalternative~ImageTextAlternative}.\\n *\\n * Three toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\\n * `'imageStyle:full'`, `'imageStyle:side'`, and `'imageTextAlternative'` so you can configure the toolbar like this:\\n *\\n *\\t\\tconst imageConfig = {\\n *\\t\\t\\ttoolbar: [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\\n *\\t\\t};\\n *\\n * Of course, the same buttons can also be used in the\\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\\n *\\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\\n *\\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/findlinkrange\\n */\\n\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport Position from '@ckeditor/ckeditor5-engine/src/model/position';\\n\\n/**\\n * Walks backward and forward from the start position, node by node, as long as they have the same `linkHref` attribute value and return\\n * a {@link module:engine/model/range~Range Range} with the found link.\\n *\\n * @param {module:engine/model/position~Position} position The start position.\\n * @param {String} value The `linkHref` attribute value.\\n * @returns {module:engine/model/range~Range} The link range.\\n */\\nexport default function findLinkRange( position, value ) {\\n\\treturn new Range( _findBound( position, value, true ), _findBound( position, value, false ) );\\n}\\n\\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\\n//\\n// @param {module:engine/model/position~Position} position The start position.\\n// @param {String} value The `linkHref` attribute value.\\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\\nfunction _findBound( position, value, lookBack ) {\\n\\t// Get node before or after position (depends on `lookBack` flag).\\n\\t// When position is inside text node then start searching from text node.\\n\\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\\n\\n\\tlet lastNode = null;\\n\\n\\twhile ( node && node.getAttribute( 'linkHref' ) == value ) {\\n\\t\\tlastNode = node;\\n\\t\\tnode = lookBack ? node.previousSibling : node.nextSibling;\\n\\t}\\n\\n\\treturn lastNode ? Position.createAt( lastNode, lookBack ? 'before' : 'after' ) : position;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/linkcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport Range from '@ckeditor/ckeditor5-engine/src/model/range';\\nimport findLinkRange from './findlinkrange';\\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\\n\\n/**\\n * The link command. It is used by the {@link module:link/link~Link link feature}.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class LinkCommand extends Command {\\n\\t/**\\n\\t * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\\n\\t *\\n\\t * @observable\\n\\t * @readonly\\n\\t * @member {Object|undefined} #value\\n\\t */\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\n\\t\\tthis.value = doc.selection.getAttribute( 'linkHref' );\\n\\t\\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\\n\\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\\n\\t *\\n\\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, the\\n\\t * new {@link module:engine/model/text~Text Text node} with the `linkHref` attribute will be inserted in place of caret, but\\n\\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\\n\\t * The selection will be updated to wrap the just inserted text node.\\n\\t *\\n\\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\\n\\t *\\n\\t * @fires execute\\n\\t * @param {String} href Link destination.\\n\\t */\\n\\texecute( href ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst selection = model.document.selection;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\t// If selection is collapsed then update selected link or insert new one at the place of caret.\\n\\t\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t\\tconst position = selection.getFirstPosition();\\n\\n\\t\\t\\t\\t// When selection is inside text with `linkHref` attribute.\\n\\t\\t\\t\\tif ( selection.hasAttribute( 'linkHref' ) ) {\\n\\t\\t\\t\\t\\t// Then update `linkHref` value.\\n\\t\\t\\t\\t\\tconst linkRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) );\\n\\n\\t\\t\\t\\t\\twriter.setAttribute( 'linkHref', href, linkRange );\\n\\n\\t\\t\\t\\t\\t// Create new range wrapping changed link.\\n\\t\\t\\t\\t\\twriter.setSelection( linkRange );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If not then insert text node with `linkHref` attribute in place of caret.\\n\\t\\t\\t\\t// However, since selection in collapsed, attribute value will be used as data for text node.\\n\\t\\t\\t\\t// So, if `href` is empty, do not create text node.\\n\\t\\t\\t\\telse if ( href !== '' ) {\\n\\t\\t\\t\\t\\tconst attributes = toMap( selection.getAttributes() );\\n\\n\\t\\t\\t\\t\\tattributes.set( 'linkHref', href );\\n\\n\\t\\t\\t\\t\\tconst node = writer.createText( href, attributes );\\n\\n\\t\\t\\t\\t\\twriter.insert( node, position );\\n\\n\\t\\t\\t\\t\\t// Create new range wrapping created node.\\n\\t\\t\\t\\t\\twriter.setSelection( Range.createOn( node ) );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\\n\\t\\t\\t\\t// omitting nodes where `linkHref` attribute is disallowed.\\n\\t\\t\\t\\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\\n\\n\\t\\t\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'linkHref', href, range );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/unlinkcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport findLinkRange from './findlinkrange';\\n\\n/**\\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class UnlinkCommand extends Command {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.isEnabled = this.editor.model.document.selection.hasAttribute( 'linkHref' );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * When the selection is collapsed, removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\\n\\t * When the selection is non-collapsed, removes the `linkHref` attribute from each node in selected ranges.\\n\\t *\\n\\t * @fires execute\\n\\t */\\n\\texecute() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst selection = model.document.selection;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\t// Get ranges to unlink.\\n\\t\\t\\tconst rangesToUnlink = selection.isCollapsed ?\\n\\t\\t\\t\\t[ findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) ) ] : selection.getRanges();\\n\\n\\t\\t\\t// Remove `linkHref` attribute from specified ranges.\\n\\t\\t\\tfor ( const range of rangesToUnlink ) {\\n\\t\\t\\t\\twriter.removeAttribute( 'linkHref', range );\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/utils\\n */\\n\\nconst linkElementSymbol = Symbol( 'linkElement' );\\n\\n/**\\n * Returns `true` if a given view node is the link element.\\n *\\n * @param {module:engine/view/node~Node} node\\n * @return {Boolean}\\n */\\nexport function isLinkElement( node ) {\\n\\treturn node.is( 'attributeElement' ) && !!node.getCustomProperty( linkElementSymbol );\\n}\\n\\n/**\\n * Creates link {@link module:engine/view/attributeelement~AttributeElement} with provided `href` attribute.\\n *\\n * @param {String} href\\n * @return {module:engine/view/attributeelement~AttributeElement}\\n */\\nexport function createLinkElement( href, writer ) {\\n\\t// Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\\n\\tconst linkElement = writer.createAttributeElement( 'a', { href }, 5 );\\n\\twriter.setCustomProperty( linkElementSymbol, true, linkElement );\\n\\n\\treturn linkElement;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/utils/bindtwostepcarettoattribute\\n */\\n\\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\\n\\n/**\\n * This helper adds two-step caret movement behavior for the given attribute.\\n *\\n * For example, when this behavior is enabled for the `linkHref` attribute (which converts to `<a>` element in the view)\\n * and the caret is just before an `<a>` element (at a link boundary), then pressing\\n * the right arrow key will move caret into that `<a>`element instead of moving it after the next character:\\n *\\n * * With two-step caret movement: `<p>foo{}<a>bar</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>{}bar</a>biz<p>`\\n * * Without two-step caret movement: `<p>foo{}<a>bar</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>b{}ar</a>biz<p>`\\n *\\n * The same behavior will be changed fo \\\"leaving\\\" an attribute element:\\n *\\n * * With two-step caret movement: `<p>foo<a>bar{}</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>bar</a>{}biz<p>`\\n * * Without two-step caret movement: `<p>foo<a>bar{}</a>biz<p>` + <kbd>→</kbd> => `<p>foo<a>bar</a>b{}iz<p>`\\n *\\n * And when moving left:\\n *\\n * * With two-step caret movement: `<p>foo<a>bar</a>b{}iz<p>` + <kbd>←</kbd> => `<p>foo<a>bar</a>{}biz<p>` +\\n * <kbd>←</kbd> => `<p>foo<a>bar{}</a>biz<p>`\\n * * Without two-step caret movement: `<p>foo<a>bar</a>b{}iz<p>` + <kbd>←</kbd> => `<p>foo<a>bar{}</a>biz<p>`\\n *\\n * @param {module:engine/view/view~View} view View controller instance.\\n * @param {module:engine/model/model~Model} model Data model instance.\\n * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\\n * (e.g. a plugin instance).\\n * @param {String} attribute Attribute for which this behavior will be added.\\n */\\nexport default function bindTwoStepCaretToAttribute( view, model, emitter, attribute ) {\\n\\tconst modelSelection = model.document.selection;\\n\\n\\t// Listen to keyboard events and handle cursor before the move.\\n\\temitter.listenTo( view.document, 'keydown', ( evt, data ) => {\\n\\t\\tconst arrowRightPressed = data.keyCode == keyCodes.arrowright;\\n\\t\\tconst arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\\n\\n\\t\\t// When neither left or right arrow has been pressed then do noting.\\n\\t\\tif ( !arrowRightPressed && !arrowLeftPressed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// This implementation works only for collapsed selection.\\n\\t\\tif ( !modelSelection.isCollapsed ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// When user tries to expand selection or jump over the whole word or to the beginning/end then\\n\\t\\t// two-steps movement is not necessary.\\n\\t\\tif ( data.shiftKey || data.altKey || data.ctrlKey ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst position = modelSelection.getFirstPosition();\\n\\n\\t\\t// Moving right.\\n\\t\\tif ( arrowRightPressed ) {\\n\\t\\t\\t// If gravity is already overridden then do nothing.\\n\\t\\t\\t// It means that we already enter `foo<a>{}bar</a>biz` or left `foo<a>bar</a>{}biz` text with attribute\\n\\t\\t\\t// and gravity will be restored just after caret movement.\\n\\t\\t\\tif ( modelSelection.isGravityOverridden ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If caret sticks to the bound of Text with attribute it means that we are going to\\n\\t\\t\\t// enter `foo{}<a>bar</a>biz` or leave `foo<a>bar{}</a>biz` the text with attribute.\\n\\t\\t\\tif ( isAtAttributeBoundary( position.nodeAfter, position.nodeBefore, attribute ) ) {\\n\\t\\t\\t\\t// So we need to prevent caret from being moved.\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t\\t// And override default selection gravity.\\n\\t\\t\\t\\tmodel.change( writer => writer.overrideSelectionGravity() );\\n\\t\\t\\t}\\n\\n\\t\\t// Moving left.\\n\\t\\t} else {\\n\\t\\t\\t// If caret sticks to the bound of Text with attribute and gravity is already overridden it means that\\n\\t\\t\\t// we are going to enter `foo<a>bar</a>{}biz` or leave `foo<a>{}bar</a>biz` text with attribute.\\n\\t\\t\\tif ( modelSelection.isGravityOverridden && isAtAttributeBoundary( position.nodeBefore, position.nodeAfter, attribute ) ) {\\n\\t\\t\\t\\t// So we need to prevent cater from being moved.\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t\\t// And restore the gravity.\\n\\t\\t\\t\\tmodel.change( writer => writer.restoreSelectionGravity() );\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we are here we need to check if caret is a one character before the text with attribute bound\\n\\t\\t\\t// `foo<a>bar</a>b{}iz` or `foo<a>b{}ar</a>biz`.\\n\\t\\t\\tconst nextPosition = position.getShiftedBy( -1 );\\n\\n\\t\\t\\t// When position is the same it means that parent bound has been reached.\\n\\t\\t\\tif ( !nextPosition.isBefore( position ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// When caret is going stick to the bound of Text with attribute after movement then we need to override\\n\\t\\t\\t// the gravity before the move. But we need to do it in a custom way otherwise `selection#change:range`\\n\\t\\t\\t// event following the overriding will restore the gravity.\\n\\t\\t\\tif ( isAtAttributeBoundary( nextPosition.nodeBefore, nextPosition.nodeAfter, attribute ) ) {\\n\\t\\t\\t\\tmodel.change( writer => {\\n\\t\\t\\t\\t\\tlet counter = 0;\\n\\n\\t\\t\\t\\t\\t// So let's override the gravity.\\n\\t\\t\\t\\t\\twriter.overrideSelectionGravity( true );\\n\\n\\t\\t\\t\\t\\t// But skip the following `change:range` event and restore the gravity on the next one.\\n\\t\\t\\t\\t\\temitter.listenTo( modelSelection, 'change:range', ( evt, data ) => {\\n\\t\\t\\t\\t\\t\\tif ( counter++ && data.directChange ) {\\n\\t\\t\\t\\t\\t\\t\\twriter.restoreSelectionGravity();\\n\\t\\t\\t\\t\\t\\t\\tevt.off();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t} );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} );\\n}\\n\\n// @param {module:engine/model/node~Node} nextNode Node before the position.\\n// @param {module:engine/model/node~Node} prevNode Node after the position.\\n// @param {String} attribute Attribute name.\\n// @returns {Boolean} `true` when position between the nodes sticks to the bound of text with given attribute.\\nfunction isAtAttributeBoundary( nextNode, prevNode, attribute ) {\\n\\tconst isAttrInNext = nextNode ? nextNode.hasAttribute( attribute ) : false;\\n\\tconst isAttrInPrev = prevNode ? prevNode.hasAttribute( attribute ) : false;\\n\\n\\tif ( isAttrInNext && isAttrInPrev && nextNode.getAttributeKeys( attribute ) !== prevNode.getAttribute( attribute ) ) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn isAttrInNext && !isAttrInPrev || !isAttrInNext && isAttrInPrev;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/linkediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport {\\n\\tdowncastAttributeToElement,\\n\\tdowncastMarkerToHighlight,\\n\\tcreateViewElementFromHighlightDescriptor\\n} from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\\nimport { upcastElementToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\\nimport LinkCommand from './linkcommand';\\nimport UnlinkCommand from './unlinkcommand';\\nimport { createLinkElement } from './utils';\\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\\nimport findLinkRange from './findlinkrange';\\nimport '../theme/link.css';\\nimport DocumentSelection from '@ckeditor/ckeditor5-engine/src/model/documentselection';\\nimport ModelSelection from '@ckeditor/ckeditor5-engine/src/model/selection';\\n\\n/**\\n * The link engine feature.\\n *\\n * It introduces the `linkHref=\\\"url\\\"` attribute in the model which renders to the view as a `<a href=\\\"url\\\">` element.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class LinkEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Allow link attribute on all inline nodes.\\n\\t\\teditor.model.schema.extend( '$text', { allowAttributes: 'linkHref' } );\\n\\n\\t\\teditor.conversion.for( 'downcast' )\\n\\t\\t\\t.add( downcastAttributeToElement( { model: 'linkHref', view: createLinkElement } ) );\\n\\n\\t\\teditor.conversion.for( 'upcast' )\\n\\t\\t\\t.add( upcastElementToAttribute( {\\n\\t\\t\\t\\tview: {\\n\\t\\t\\t\\t\\tname: 'a',\\n\\t\\t\\t\\t\\tattribute: {\\n\\t\\t\\t\\t\\t\\thref: true\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tmodel: {\\n\\t\\t\\t\\t\\tkey: 'linkHref',\\n\\t\\t\\t\\t\\tvalue: viewElement => viewElement.getAttribute( 'href' )\\n\\t\\t\\t\\t}\\n\\t\\t\\t} ) );\\n\\n\\t\\t// Create linking commands.\\n\\t\\teditor.commands.add( 'link', new LinkCommand( editor ) );\\n\\t\\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\\n\\n\\t\\t// Enable two-step caret movement for `linkHref` attribute.\\n\\t\\tbindTwoStepCaretToAttribute( editor.editing.view, editor.model, this, 'linkHref' );\\n\\n\\t\\t// Setup highlight over selected link.\\n\\t\\tthis._setupLinkHighlight();\\n\\t}\\n\\n\\t/**\\n\\t * Adds highlight over link which has selection inside, together with two-step caret movement indicates whenever\\n\\t * user is typing inside the link.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_setupLinkHighlight() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tconst highlightDescriptor = {\\n\\t\\t\\tid: 'linkBoundaries',\\n\\t\\t\\tclass: 'ck-link_selected',\\n\\t\\t\\tpriority: 1\\n\\t\\t};\\n\\n\\t\\t// Convert linkBoundaries marker to view highlight.\\n\\t\\teditor.conversion.for( 'editingDowncast' )\\n\\t\\t\\t.add( downcastMarkerToHighlight( {\\n\\t\\t\\t\\tmodel: 'linkBoundaries',\\n\\t\\t\\t\\tview: highlightDescriptor\\n\\t\\t\\t} ) );\\n\\n\\t\\t// Create marker over whole link when selection has \\\"linkHref\\\" attribute.\\n\\t\\tdoc.registerPostFixer( writer => {\\n\\t\\t\\tconst selection = doc.selection;\\n\\t\\t\\tconst marker = model.markers.get( 'linkBoundaries' );\\n\\n\\t\\t\\t// Create marker over link when selection is inside or remove marker otherwise.\\n\\t\\t\\tif ( selection.hasAttribute( 'linkHref' ) ) {\\n\\t\\t\\t\\tconst modelRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) );\\n\\n\\t\\t\\t\\tif ( !marker || !marker.getRange().isEqual( modelRange ) ) {\\n\\t\\t\\t\\t\\twriter.setMarker( 'linkBoundaries', modelRange );\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( marker ) {\\n\\t\\t\\t\\twriter.removeMarker( 'linkBoundaries' );\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t} );\\n\\n\\t\\t// Custom converter for selection's \\\"linkHref\\\" attribute - when collapsed selection has this attribute it is\\n\\t\\t// wrapped with <span> similar to that used by highlighting mechanism. This <span> will be merged together with\\n\\t\\t// highlight wrapper. This prevents link splitting When selection is at the beginning or at the end of the link.\\n\\t\\t// Without this converter:\\n\\t\\t//\\n\\t\\t//\\t\\t<a href=\\\"url\\\">{}</a><span class=\\\"ck-link_selected\\\"><a href=\\\"url\\\">foo</a></span>\\n\\t\\t//\\n\\t\\t// When converter is applied:\\n\\t\\t//\\n\\t\\t//\\t\\t<span class=\\\"ck-link_selected\\\"><a href=\\\"url\\\">{}foo</a></span>\\n\\t\\teditor.editing.downcastDispatcher.on( 'attribute:linkHref', ( evt, data, conversionApi ) => {\\n\\t\\t\\tconst selection = data.item;\\n\\n\\t\\t\\tif ( !( selection instanceof DocumentSelection || selection instanceof ModelSelection ) || !selection.isCollapsed ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst writer = conversionApi.writer;\\n\\t\\t\\tconst viewSelection = writer.document.selection;\\n\\t\\t\\tconst wrapper = createViewElementFromHighlightDescriptor( highlightDescriptor );\\n\\n\\t\\t\\tconversionApi.writer.wrap( viewSelection.getFirstRange(), wrapper );\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module engine/view/observer/clickobserver\\n */\\n\\nimport DomEventObserver from './domeventobserver';\\n\\n/**\\n * {@link module:engine/view/document~Document#event:click Click} event observer.\\n *\\n * Note that this observer is not available by default. To make it available it needs to be added to\\n * {@link module:engine/view/view~View view controller}\\n * by a {@link module:engine/view/view~View#addObserver} method.\\n *\\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\\n */\\nexport default class ClickObserver extends DomEventObserver {\\n\\tconstructor( view ) {\\n\\t\\tsuper( view );\\n\\n\\t\\tthis.domEventType = 'click';\\n\\t}\\n\\n\\tonDomEvent( domEvent ) {\\n\\t\\tthis.fire( domEvent.type, domEvent );\\n\\t}\\n}\\n\\n/**\\n * Fired when one of the editables has been clicked.\\n *\\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\\n *\\n * Note that this event is not available by default. To make it available\\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\\n *\\n * @see module:engine/view/observer/clickobserver~ClickObserver\\n * @event module:engine/view/document~Document#event:click\\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/ui/linkformview\\n */\\n\\nimport View from '@ckeditor/ckeditor5-ui/src/view';\\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\\n\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\\n\\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\\nimport '../../theme/linkform.css';\\n\\n/**\\n * The link form view controller class.\\n *\\n * See {@link module:link/ui/linkformview~LinkFormView}.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class LinkFormView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst t = locale.t;\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\t/**\\n\\t\\t * The URL input view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\\n\\t\\t */\\n\\t\\tthis.urlInputView = this._createUrlInput();\\n\\n\\t\\t/**\\n\\t\\t * The Save button view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView}\\n\\t\\t */\\n\\t\\tthis.saveButtonView = this._createButton( t( 'Save' ), checkIcon );\\n\\t\\tthis.saveButtonView.type = 'submit';\\n\\n\\t\\t/**\\n\\t\\t * The Cancel button view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView}\\n\\t\\t */\\n\\t\\tthis.cancelButtonView = this._createButton( t( 'Cancel' ), cancelIcon, 'cancel' );\\n\\n\\t\\t/**\\n\\t\\t * A collection of views which can be focused in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis._focusables = new ViewCollection();\\n\\n\\t\\t/**\\n\\t\\t * Helps cycling over {@link #_focusables} in the form.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/focuscycler~FocusCycler}\\n\\t\\t */\\n\\t\\tthis._focusCycler = new FocusCycler( {\\n\\t\\t\\tfocusables: this._focusables,\\n\\t\\t\\tfocusTracker: this.focusTracker,\\n\\t\\t\\tkeystrokeHandler: this.keystrokes,\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\t// Navigate form fields backwards using the Shift + Tab keystroke.\\n\\t\\t\\t\\tfocusPrevious: 'shift + tab',\\n\\n\\t\\t\\t\\t// Navigate form fields forwards using the Tab key.\\n\\t\\t\\t\\tfocusNext: 'tab'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.saveButtonView.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-button-action'\\n\\t\\t\\t\\t]\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'form',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-link-form',\\n\\t\\t\\t\\t],\\n\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-link/issues/90\\n\\t\\t\\t\\ttabindex: '-1'\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis.urlInputView,\\n\\t\\t\\t\\tthis.saveButtonView,\\n\\t\\t\\t\\tthis.cancelButtonView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tsubmitHandler( {\\n\\t\\t\\tview: this\\n\\t\\t} );\\n\\n\\t\\tconst childViews = [\\n\\t\\t\\tthis.urlInputView,\\n\\t\\t\\tthis.saveButtonView,\\n\\t\\t\\tthis.cancelButtonView\\n\\t\\t];\\n\\n\\t\\tchildViews.forEach( v => {\\n\\t\\t\\t// Register the view as focusable.\\n\\t\\t\\tthis._focusables.add( v );\\n\\n\\t\\t\\t// Register the view in the focus tracker.\\n\\t\\t\\tthis.focusTracker.add( v.element );\\n\\t\\t} );\\n\\n\\t\\t// Start listening for the keystrokes coming from #element.\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the fist {@link #_focusables} in the form.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis._focusCycler.focusFirst();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a labeled input view.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\\n\\t */\\n\\t_createUrlInput() {\\n\\t\\tconst t = this.locale.t;\\n\\n\\t\\tconst labeledInput = new LabeledInputView( this.locale, InputTextView );\\n\\n\\t\\tlabeledInput.label = t( 'Link URL' );\\n\\t\\tlabeledInput.inputView.placeholder = 'https://example.com';\\n\\n\\t\\treturn labeledInput;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a button view.\\n\\t *\\n\\t * @private\\n\\t * @param {String} label The button label.\\n\\t * @param {String} icon The button's icon.\\n\\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\\n\\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\\n\\t */\\n\\t_createButton( label, icon, eventName ) {\\n\\t\\tconst button = new ButtonView( this.locale );\\n\\n\\t\\tbutton.set( {\\n\\t\\t\\tlabel,\\n\\t\\t\\ticon,\\n\\t\\t\\ttooltip: true\\n\\t\\t} );\\n\\n\\t\\tif ( eventName ) {\\n\\t\\t\\tbutton.delegate( 'execute' ).to( this, eventName );\\n\\t\\t}\\n\\n\\t\\treturn button;\\n\\t}\\n}\\n\\n/**\\n * Fired when the form view is submitted (when one of the children triggered the submit event),\\n * e.g. click on {@link #saveButtonView}.\\n *\\n * @event submit\\n */\\n\\n/**\\n * Fired when the form view is canceled, e.g. click on {@link #cancelButtonView}.\\n *\\n * @event cancel\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/ui/linkactionsview\\n */\\n\\nimport View from '@ckeditor/ckeditor5-ui/src/view';\\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\\n\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\\n\\nimport unlinkIcon from '../../theme/icons/unlink.svg';\\nimport pencilIcon from '@ckeditor/ckeditor5-core/theme/icons/pencil.svg';\\nimport '../../theme/linkactions.css';\\n\\n/**\\n * The link actions view class. This view displays link preview, allows\\n * unlinking or editing the link.\\n *\\n * @extends module:ui/view~View\\n */\\nexport default class LinkActionsView extends View {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( locale ) {\\n\\t\\tsuper( locale );\\n\\n\\t\\tconst t = locale.t;\\n\\n\\t\\t/**\\n\\t\\t * Tracks information about DOM focus in the actions.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/focustracker~FocusTracker}\\n\\t\\t */\\n\\t\\tthis.focusTracker = new FocusTracker();\\n\\n\\t\\t/**\\n\\t\\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\\n\\t\\t */\\n\\t\\tthis.keystrokes = new KeystrokeHandler();\\n\\n\\t\\t/**\\n\\t\\t * The href preview view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/view~View}\\n\\t\\t */\\n\\t\\tthis.previewButtonView = this._createPreviewButton();\\n\\n\\t\\t/**\\n\\t\\t * The unlink button view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView}\\n\\t\\t */\\n\\t\\tthis.unlinkButtonView = this._createButton( t( 'Unlink' ), unlinkIcon, 'unlink' );\\n\\n\\t\\t/**\\n\\t\\t * The edit link button view.\\n\\t\\t *\\n\\t\\t * @member {module:ui/button/buttonview~ButtonView}\\n\\t\\t */\\n\\t\\tthis.editButtonView = this._createButton( t( 'Edit link' ), pencilIcon, 'edit' );\\n\\n\\t\\t/**\\n\\t\\t * Value of the \\\"href\\\" attribute of the link to use in the {@link #previewButtonView}.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @member {String}\\n\\t\\t */\\n\\t\\tthis.set( 'href' );\\n\\n\\t\\t/**\\n\\t\\t * A collection of views which can be focused in the view.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/viewcollection~ViewCollection}\\n\\t\\t */\\n\\t\\tthis._focusables = new ViewCollection();\\n\\n\\t\\t/**\\n\\t\\t * Helps cycling over {@link #_focusables} in the view.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @protected\\n\\t\\t * @member {module:ui/focuscycler~FocusCycler}\\n\\t\\t */\\n\\t\\tthis._focusCycler = new FocusCycler( {\\n\\t\\t\\tfocusables: this._focusables,\\n\\t\\t\\tfocusTracker: this.focusTracker,\\n\\t\\t\\tkeystrokeHandler: this.keystrokes,\\n\\t\\t\\tactions: {\\n\\t\\t\\t\\t// Navigate fields backwards using the Shift + Tab keystroke.\\n\\t\\t\\t\\tfocusPrevious: 'shift + tab',\\n\\n\\t\\t\\t\\t// Navigate fields forwards using the Tab key.\\n\\t\\t\\t\\tfocusNext: 'tab'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tthis.setTemplate( {\\n\\t\\t\\ttag: 'div',\\n\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-link-actions',\\n\\t\\t\\t\\t],\\n\\n\\t\\t\\t\\t// https://github.com/ckeditor/ckeditor5-link/issues/90\\n\\t\\t\\t\\ttabindex: '-1'\\n\\t\\t\\t},\\n\\n\\t\\t\\tchildren: [\\n\\t\\t\\t\\tthis.previewButtonView,\\n\\t\\t\\t\\tthis.editButtonView,\\n\\t\\t\\t\\tthis.unlinkButtonView\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trender() {\\n\\t\\tsuper.render();\\n\\n\\t\\tconst childViews = [\\n\\t\\t\\tthis.previewButtonView,\\n\\t\\t\\tthis.editButtonView,\\n\\t\\t\\tthis.unlinkButtonView\\n\\t\\t];\\n\\n\\t\\tchildViews.forEach( v => {\\n\\t\\t\\t// Register the view as focusable.\\n\\t\\t\\tthis._focusables.add( v );\\n\\n\\t\\t\\t// Register the view in the focus tracker.\\n\\t\\t\\tthis.focusTracker.add( v.element );\\n\\t\\t} );\\n\\n\\t\\t// Start listening for the keystrokes coming from #element.\\n\\t\\tthis.keystrokes.listenTo( this.element );\\n\\t}\\n\\n\\t/**\\n\\t * Focuses the fist {@link #_focusables} in the actions.\\n\\t */\\n\\tfocus() {\\n\\t\\tthis._focusCycler.focusFirst();\\n\\t}\\n\\n\\t/**\\n\\t * Creates a button view.\\n\\t *\\n\\t * @private\\n\\t * @param {String} label The button label.\\n\\t * @param {String} icon The button's icon.\\n\\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\\n\\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\\n\\t */\\n\\t_createButton( label, icon, eventName ) {\\n\\t\\tconst button = new ButtonView( this.locale );\\n\\n\\t\\tbutton.set( {\\n\\t\\t\\tlabel,\\n\\t\\t\\ticon,\\n\\t\\t\\ttooltip: true\\n\\t\\t} );\\n\\n\\t\\tbutton.delegate( 'execute' ).to( this, eventName );\\n\\n\\t\\treturn button;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a link href preview button.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\\n\\t */\\n\\t_createPreviewButton() {\\n\\t\\tconst button = new ButtonView( this.locale );\\n\\t\\tconst bind = this.bindTemplate;\\n\\t\\tconst t = this.t;\\n\\n\\t\\tbutton.set( {\\n\\t\\t\\twithText: true,\\n\\t\\t\\ttooltip: t( 'Open link in new tab' )\\n\\t\\t} );\\n\\n\\t\\tbutton.extendTemplate( {\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t'ck-link-actions__preview'\\n\\t\\t\\t\\t],\\n\\t\\t\\t\\thref: bind.to( 'href' ),\\n\\t\\t\\t\\ttarget: '_blank'\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\tbutton.bind( 'label' ).to( this, 'href', href => {\\n\\t\\t\\treturn href || t( 'This link has no URL' );\\n\\t\\t} );\\n\\n\\t\\tbutton.bind( 'isEnabled' ).to( this, 'href', href => !!href );\\n\\n\\t\\tbutton.template.tag = 'a';\\n\\t\\tbutton.template.eventListeners = {};\\n\\n\\t\\treturn button;\\n\\t}\\n}\\n\\n/**\\n * Fired when the {@link #editButtonView} is clicked.\\n *\\n * @event edit\\n */\\n\\n/**\\n * Fired when the {@link #unlinkButtonView} is clicked.\\n *\\n * @event unlink\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/linkui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\\nimport Range from '@ckeditor/ckeditor5-engine/src/view/range';\\nimport { isLinkElement } from './utils';\\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\\n\\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\\n\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\nimport LinkFormView from './ui/linkformview';\\nimport LinkActionsView from './ui/linkactionsview';\\n\\nimport linkIcon from '../theme/icons/link.svg';\\n\\nconst linkKeystroke = 'Ctrl+K';\\n\\n/**\\n * The link UI plugin. It introduces the Link and Unlink buttons and the <kbd>Ctrl+K</kbd> keystroke.\\n *\\n * It uses the\\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class LinkUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ContextualBalloon ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\teditor.editing.view.addObserver( ClickObserver );\\n\\n\\t\\t/**\\n\\t\\t * The actions view displayed inside of the balloon.\\n\\t\\t *\\n\\t\\t * @member {module:link/ui/linkactionsview~LinkActionsView}\\n\\t\\t */\\n\\t\\tthis.actionsView = this._createActionsView();\\n\\n\\t\\t/**\\n\\t\\t * The form view displayed inside the balloon.\\n\\t\\t *\\n\\t\\t * @member {module:link/ui/linkformview~LinkFormView}\\n\\t\\t */\\n\\t\\tthis.formView = this._createFormView();\\n\\n\\t\\t/**\\n\\t\\t * The contextual balloon plugin instance.\\n\\t\\t *\\n\\t\\t * @private\\n\\t\\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\\n\\t\\t */\\n\\t\\tthis._balloon = editor.plugins.get( ContextualBalloon );\\n\\n\\t\\t// Create toolbar buttons.\\n\\t\\tthis._createToolbarLinkButton();\\n\\n\\t\\t// Attach lifecycle actions to the the balloon.\\n\\t\\tthis._enableUserBalloonInteractions();\\n\\t}\\n\\n\\t/**\\n\\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\\n\\t */\\n\\t_createActionsView() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst actionsView = new LinkActionsView( editor.locale );\\n\\t\\tconst linkCommand = editor.commands.get( 'link' );\\n\\t\\tconst unlinkCommand = editor.commands.get( 'unlink' );\\n\\n\\t\\tactionsView.bind( 'href' ).to( linkCommand, 'value' );\\n\\t\\tactionsView.editButtonView.bind( 'isEnabled' ).to( linkCommand );\\n\\t\\tactionsView.unlinkButtonView.bind( 'isEnabled' ).to( unlinkCommand );\\n\\n\\t\\t// Execute unlink command after clicking on the \\\"Edit\\\" button.\\n\\t\\tthis.listenTo( actionsView, 'edit', () => {\\n\\t\\t\\tthis._addFormView();\\n\\t\\t} );\\n\\n\\t\\t// Execute unlink command after clicking on the \\\"Unlink\\\" button.\\n\\t\\tthis.listenTo( actionsView, 'unlink', () => {\\n\\t\\t\\teditor.execute( 'unlink' );\\n\\t\\t\\tthis._hideUI();\\n\\t\\t} );\\n\\n\\t\\t// Close the panel on esc key press when the **actions have focus**.\\n\\t\\tactionsView.keystrokes.set( 'Esc', ( data, cancel ) => {\\n\\t\\t\\tthis._hideUI();\\n\\t\\t\\tcancel();\\n\\t\\t} );\\n\\n\\t\\treturn actionsView;\\n\\t}\\n\\n\\t/**\\n\\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:link/ui/linkformview~LinkFormView} The link form instance.\\n\\t */\\n\\t_createFormView() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst formView = new LinkFormView( editor.locale );\\n\\t\\tconst linkCommand = editor.commands.get( 'link' );\\n\\n\\t\\tformView.urlInputView.bind( 'value' ).to( linkCommand, 'value' );\\n\\n\\t\\t// Form elements should be read-only when corresponding commands are disabled.\\n\\t\\tformView.urlInputView.bind( 'isReadOnly' ).to( linkCommand, 'isEnabled', value => !value );\\n\\t\\tformView.saveButtonView.bind( 'isEnabled' ).to( linkCommand );\\n\\n\\t\\t// Execute link command after clicking the \\\"Save\\\" button.\\n\\t\\tthis.listenTo( formView, 'submit', () => {\\n\\t\\t\\teditor.execute( 'link', formView.urlInputView.inputView.element.value );\\n\\t\\t\\tthis._removeFormView();\\n\\t\\t} );\\n\\n\\t\\t// Hide the panel after clicking the \\\"Cancel\\\" button.\\n\\t\\tthis.listenTo( formView, 'cancel', () => {\\n\\t\\t\\tthis._removeFormView();\\n\\t\\t} );\\n\\n\\t\\t// Close the panel on esc key press when the **form has focus**.\\n\\t\\tformView.keystrokes.set( 'Esc', ( data, cancel ) => {\\n\\t\\t\\tthis._removeFormView();\\n\\t\\t\\tcancel();\\n\\t\\t} );\\n\\n\\t\\treturn formView;\\n\\t}\\n\\n\\t/**\\n\\t * Creates a toolbar Link button. Clicking this button will show\\n\\t * a {@link #_balloon} attached to the selection.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_createToolbarLinkButton() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst linkCommand = editor.commands.get( 'link' );\\n\\t\\tconst t = editor.t;\\n\\n\\t\\t// Handle the `Ctrl+K` keystroke and show the panel.\\n\\t\\teditor.keystrokes.set( linkKeystroke, ( keyEvtData, cancel ) => {\\n\\t\\t\\t// Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\\n\\t\\t\\tcancel();\\n\\n\\t\\t\\tif ( linkCommand.isEnabled ) {\\n\\t\\t\\t\\tthis._showUI();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\teditor.ui.componentFactory.add( 'link', locale => {\\n\\t\\t\\tconst button = new ButtonView( locale );\\n\\n\\t\\t\\tbutton.isEnabled = true;\\n\\t\\t\\tbutton.label = t( 'Link' );\\n\\t\\t\\tbutton.icon = linkIcon;\\n\\t\\t\\tbutton.keystroke = linkKeystroke;\\n\\t\\t\\tbutton.tooltip = true;\\n\\n\\t\\t\\t// Bind button to the command.\\n\\t\\t\\tbutton.bind( 'isEnabled' ).to( linkCommand, 'isEnabled' );\\n\\n\\t\\t\\t// Show the panel on button click.\\n\\t\\t\\tthis.listenTo( button, 'execute', () => this._showUI() );\\n\\n\\t\\t\\treturn button;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Attaches actions that control whether the balloon panel containing the\\n\\t * {@link #formView} is visible or not.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_enableUserBalloonInteractions() {\\n\\t\\tconst viewDocument = this.editor.editing.view.document;\\n\\n\\t\\t// Handle click on view document and show panel when selection is placed inside the link element.\\n\\t\\t// Keep panel open until selection will be inside the same link element.\\n\\t\\tthis.listenTo( viewDocument, 'click', () => {\\n\\t\\t\\tconst parentLink = this._getSelectedLinkElement();\\n\\n\\t\\t\\tif ( parentLink ) {\\n\\t\\t\\t\\t// Then show panel but keep focus inside editor editable.\\n\\t\\t\\t\\tthis._showUI();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Focus the form if the balloon is visible and the Tab key has been pressed.\\n\\t\\tthis.editor.keystrokes.set( 'Tab', ( data, cancel ) => {\\n\\t\\t\\tif ( this._areActionsVisible && !this.actionsView.focusTracker.isFocused ) {\\n\\t\\t\\t\\tthis.actionsView.focus();\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t}\\n\\t\\t}, {\\n\\t\\t\\t// Use the high priority because the link UI navigation is more important\\n\\t\\t\\t// than other feature's actions, e.g. list indentation.\\n\\t\\t\\t// https://github.com/ckeditor/ckeditor5-link/issues/146\\n\\t\\t\\tpriority: 'high'\\n\\t\\t} );\\n\\n\\t\\t// Close the panel on the Esc key press when the editable has focus and the balloon is visible.\\n\\t\\tthis.editor.keystrokes.set( 'Esc', ( data, cancel ) => {\\n\\t\\t\\tif ( this._isUIVisible ) {\\n\\t\\t\\t\\tthis._hideUI();\\n\\t\\t\\t\\tcancel();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Close on click outside of balloon panel element.\\n\\t\\tclickOutsideHandler( {\\n\\t\\t\\temitter: this.formView,\\n\\t\\t\\tactivator: () => this._isUIVisible,\\n\\t\\t\\tcontextElements: [ this._balloon.view.element ],\\n\\t\\t\\tcallback: () => this._hideUI()\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Adds the {@link #actionsView} to the {@link #_balloon}.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_addActionsView() {\\n\\t\\tthis._balloon.add( {\\n\\t\\t\\tview: this.actionsView,\\n\\t\\t\\tposition: this._getBalloonPositionData()\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Adds the {@link #formView} to the {@link #_balloon}.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_addFormView() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst linkCommand = editor.commands.get( 'link' );\\n\\n\\t\\tthis._balloon.add( {\\n\\t\\t\\tview: this.formView,\\n\\t\\t\\tposition: this._getBalloonPositionData()\\n\\t\\t} );\\n\\n\\t\\tthis.formView.urlInputView.select();\\n\\n\\t\\t// Make sure that each time the panel shows up, the URL field remains in sync with the value of\\n\\t\\t// the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\\n\\t\\t// unaltered) and re-opened it without changing the value of the link command (e.g. because they\\n\\t\\t// clicked the same link), they would see the old value instead of the actual value of the command.\\n\\t\\t// https://github.com/ckeditor/ckeditor5-link/issues/78\\n\\t\\t// https://github.com/ckeditor/ckeditor5-link/issues/123\\n\\t\\tthis.formView.urlInputView.inputView.element.value = linkCommand.value || '';\\n\\t}\\n\\n\\t/**\\n\\t * Removes the {@link #formView} from the {@link #_balloon}.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_removeFormView() {\\n\\t\\tif ( this._isFormInPanel ) {\\n\\t\\t\\tthis._balloon.remove( this.formView );\\n\\n\\t\\t\\t// Because the form has an input which has focus, the focus must be brought back\\n\\t\\t\\t// to the editor. Otherwise, it would be lost.\\n\\t\\t\\tthis.editor.editing.view.focus();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Shows the right kind of the UI for current state of the command. It's either\\n\\t * {@link #formView} or {@link #actionsView}.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_showUI() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst linkCommand = editor.commands.get( 'link' );\\n\\n\\t\\tif ( !linkCommand.isEnabled || this._isUIInPanel ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// When there's no link under the selection, go straight to the editing UI.\\n\\t\\tif ( !this._getSelectedLinkElement() ) {\\n\\t\\t\\tthis._addActionsView();\\n\\t\\t\\tthis._addFormView();\\n\\t\\t}\\n\\t\\t// Otherwise display just the actions UI.\\n\\t\\telse {\\n\\t\\t\\tthis._addActionsView();\\n\\t\\t}\\n\\n\\t\\t// Begin responding to view#render once the UI is added.\\n\\t\\tthis._startUpdatingUIOnViewRender();\\n\\t}\\n\\n\\t/**\\n\\t * Removes the {@link #formView} from the {@link #_balloon}.\\n\\t *\\n\\t * See {@link #_addFormView}, {@link #_addActionsView}.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_hideUI() {\\n\\t\\tif ( !this._isUIInPanel ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst editingView = this.editor.editing.view;\\n\\n\\t\\tthis.stopListening( editingView, 'render' );\\n\\n\\t\\t// Remove form first because it's on top of the stack.\\n\\t\\tthis._removeFormView();\\n\\n\\t\\t// Then remove the actions view because it's beneath the form.\\n\\t\\tthis._balloon.remove( this.actionsView );\\n\\n\\t\\t// Make sure the focus always gets back to the editable.\\n\\t\\teditingView.focus();\\n\\t}\\n\\n\\t/**\\n\\t * Makes the UI react to the {@link module:engine/view/view~View#event:render} in the view to\\n\\t * reposition itself as the document changes.\\n\\t *\\n\\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `render` event.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\t_startUpdatingUIOnViewRender() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst editing = editor.editing;\\n\\t\\tconst editingView = editing.view;\\n\\n\\t\\tlet prevSelectedLink = this._getSelectedLinkElement();\\n\\t\\tlet prevSelectionParent = getSelectionParent();\\n\\n\\t\\tthis.listenTo( editingView, 'render', () => {\\n\\t\\t\\tconst selectedLink = this._getSelectedLinkElement();\\n\\t\\t\\tconst selectionParent = getSelectionParent();\\n\\n\\t\\t\\t// Hide the panel if:\\n\\t\\t\\t//\\n\\t\\t\\t// * the selection went out of the EXISTING link element. E.g. user moved the caret out\\n\\t\\t\\t//   of the link,\\n\\t\\t\\t// * the selection went to a different parent when creating a NEW link. E.g. someone\\n\\t\\t\\t//   else modified the document.\\n\\t\\t\\t// * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\\n\\t\\t\\t//\\n\\t\\t\\t// Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\\n\\t\\t\\t// when fully selected.\\n\\t\\t\\tif ( ( prevSelectedLink && !selectedLink ) ||\\n\\t\\t\\t\\t( !prevSelectedLink && selectionParent !== prevSelectionParent ) ) {\\n\\t\\t\\t\\tthis._hideUI();\\n\\t\\t\\t}\\n\\t\\t\\t// Update the position of the panel when:\\n\\t\\t\\t//  * the selection remains in the original link element,\\n\\t\\t\\t//  * there was no link element in the first place, i.e. creating a new link\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// If still in a link element, simply update the position of the balloon.\\n\\t\\t\\t\\t// If there was no link (e.g. inserting one), the balloon must be moved\\n\\t\\t\\t\\t// to the new position in the editing view (a new native DOM range).\\n\\t\\t\\t\\tthis._balloon.updatePosition( this._getBalloonPositionData() );\\n\\t\\t\\t}\\n\\n\\t\\t\\tprevSelectedLink = selectedLink;\\n\\t\\t\\tprevSelectionParent = selectionParent;\\n\\t\\t} );\\n\\n\\t\\tfunction getSelectionParent() {\\n\\t\\t\\treturn editingView.document.selection.focus.getAncestors()\\n\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t.find( node => node.is( 'element' ) );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns true when {@link #formView} is in the {@link #_balloon}.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _isFormInPanel() {\\n\\t\\treturn this._balloon.hasView( this.formView );\\n\\t}\\n\\n\\t/**\\n\\t * Returns true when {@link #actionsView} is in the {@link #_balloon}.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _areActionsInPanel() {\\n\\t\\treturn this._balloon.hasView( this.actionsView );\\n\\t}\\n\\n\\t/**\\n\\t * Returns true when {@link #actionsView} is in the {@link #_balloon} and it is\\n\\t * currently visible.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _areActionsVisible() {\\n\\t\\treturn this._balloon.visibleView === this.actionsView;\\n\\t}\\n\\n\\t/**\\n\\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _isUIInPanel() {\\n\\t\\treturn this._isFormInPanel || this._areActionsInPanel;\\n\\t}\\n\\n\\t/**\\n\\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\\n\\t * currently visible.\\n\\t *\\n\\t * @readonly\\n\\t * @protected\\n\\t * @type {Boolean}\\n\\t */\\n\\tget _isUIVisible() {\\n\\t\\tconst visibleView = this._balloon.visibleView;\\n\\n\\t\\treturn visibleView == this.formView || this._areActionsVisible;\\n\\t}\\n\\n\\t/**\\n\\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\\n\\t * to the target element or selection.\\n\\t *\\n\\t * If the selection is collapsed and inside a link element, the panel will be attached to the\\n\\t * entire link element. Otherwise, it will be attached to the selection.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:utils/dom/position~Options}\\n\\t */\\n\\t_getBalloonPositionData() {\\n\\t\\tconst view = this.editor.editing.view;\\n\\t\\tconst viewDocument = view.document;\\n\\t\\tconst targetLink = this._getSelectedLinkElement();\\n\\n\\t\\tconst target = targetLink ?\\n\\t\\t\\t// When selection is inside link element, then attach panel to this element.\\n\\t\\t\\tview.domConverter.mapViewToDom( targetLink ) :\\n\\t\\t\\t// Otherwise attach panel to the selection.\\n\\t\\t\\tview.domConverter.viewRangeToDom( viewDocument.selection.getFirstRange() );\\n\\n\\t\\treturn { target };\\n\\t}\\n\\n\\t/**\\n\\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\\n\\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\\n\\t * if there is none.\\n\\t *\\n\\t * **Note**: For a non–collapsed selection the link element is only returned when **fully**\\n\\t * selected and the **only** element within the selection boundaries.\\n\\t *\\n\\t * @private\\n\\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\\n\\t */\\n\\t_getSelectedLinkElement() {\\n\\t\\tconst selection = this.editor.editing.view.document.selection;\\n\\n\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\treturn findLinkElementAncestor( selection.getFirstPosition() );\\n\\t\\t} else {\\n\\t\\t\\t// The range for fully selected link is usually anchored in adjacent text nodes.\\n\\t\\t\\t// Trim it to get closer to the actual link element.\\n\\t\\t\\tconst range = selection.getFirstRange().getTrimmed();\\n\\t\\t\\tconst startLink = findLinkElementAncestor( range.start );\\n\\t\\t\\tconst endLink = findLinkElementAncestor( range.end );\\n\\n\\t\\t\\tif ( !startLink || startLink != endLink ) {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check if the link element is fully selected.\\n\\t\\t\\tif ( Range.createIn( startLink ).getTrimmed().isEqual( range ) ) {\\n\\t\\t\\t\\treturn startLink;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n// Returns a link element if there's one among the ancestors of the provided `Position`.\\n//\\n// @private\\n// @param {module:engine/view/position~Position} View position to analyze.\\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\\nfunction findLinkElementAncestor( position ) {\\n\\treturn position.getAncestors().find( ancestor => isLinkElement( ancestor ) );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/listcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * The list command. It is used by the {@link module:list/list~List list feature}.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class ListCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\\n\\t */\\n\\tconstructor( editor, type ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * The type of the list created by the command.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {'numbered'|'bulleted'}\\n\\t\\t */\\n\\t\\tthis.type = type == 'bulleted' ? 'bulleted' : 'numbered';\\n\\n\\t\\t/**\\n\\t\\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} #value\\n\\t\\t */\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.value = this._getValue();\\n\\t\\tthis.isEnabled = this._checkEnabled();\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command.\\n\\t *\\n\\t * @protected\\n\\t */\\n\\texecute() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\t\\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\\n\\t\\t\\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\\n\\n\\t\\t// Whether we are turning off some items.\\n\\t\\tconst turnOff = this.value === true;\\n\\t\\t// If we are turning off items, we are going to rename them to paragraphs.\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\\n\\t\\t\\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\\n\\t\\t\\tif ( turnOff ) {\\n\\t\\t\\t\\t// Start from the model item that is just after the last turned-off item.\\n\\t\\t\\t\\tlet next = blocks[ blocks.length - 1 ].nextSibling;\\n\\t\\t\\t\\tlet currentIndent = Number.POSITIVE_INFINITY;\\n\\t\\t\\t\\tlet changes = [];\\n\\n\\t\\t\\t\\t// Correct indent of all items after the last turned off item.\\n\\t\\t\\t\\t// Rules that should be followed:\\n\\t\\t\\t\\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\\n\\t\\t\\t\\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\\n\\t\\t\\t\\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\\n\\t\\t\\t\\t//    should not end up as a child of any of list items that they were not children of before.\\n\\t\\t\\t\\t// 3. All other items should have their indent changed relatively to it's parent.\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// For example:\\n\\t\\t\\t\\t// 1  * --------\\n\\t\\t\\t\\t// 2     * --------\\n\\t\\t\\t\\t// 3        * --------\\t\\t\\t<-- this is turned off.\\n\\t\\t\\t\\t// 4           * --------\\t\\t<-- this has to become indent = 0, because it will be first item on a new list.\\n\\t\\t\\t\\t// 5              * --------\\t<-- this should be still be a child of item above, so indent = 1.\\n\\t\\t\\t\\t// 6        * --------\\t\\t\\t<-- this has to become indent = 0, because it should not be a child of any of items above.\\n\\t\\t\\t\\t// 7           * --------\\t\\t<-- this should be still be a child of item above, so indent = 1.\\n\\t\\t\\t\\t// 8     * --------\\t\\t\\t\\t<-- this has to become indent = 0.\\n\\t\\t\\t\\t// 9        * --------\\t\\t\\t<-- this should still be a child of item above, so indent = 1.\\n\\t\\t\\t\\t// 10          * --------\\t\\t<-- this should still be a child of item above, so indent = 2.\\n\\t\\t\\t\\t// 11          * --------\\t\\t<-- this should still be at the same level as item above, so indent = 2.\\n\\t\\t\\t\\t// 12 * --------\\t\\t\\t\\t<-- this and all below are left unchanged.\\n\\t\\t\\t\\t// 13    * --------\\n\\t\\t\\t\\t// 14       * --------\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// After turning off 3 the list becomes:\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// 1  * --------\\n\\t\\t\\t\\t// 2     * --------\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// 3  --------\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// 4  * --------\\n\\t\\t\\t\\t// 5     * --------\\n\\t\\t\\t\\t// 6  * --------\\n\\t\\t\\t\\t// 7     * --------\\n\\t\\t\\t\\t// 8  * --------\\n\\t\\t\\t\\t// 9     * --------\\n\\t\\t\\t\\t// 10       * --------\\n\\t\\t\\t\\t// 11       * --------\\n\\t\\t\\t\\t// 12 * --------\\n\\t\\t\\t\\t// 13    * --------\\n\\t\\t\\t\\t// 14       * --------\\n\\t\\t\\t\\t//\\n\\t\\t\\t\\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\\n\\t\\t\\t\\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\\n\\t\\t\\t\\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\\n\\t\\t\\t\\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\\n\\t\\t\\t\\t// less conversion (faster).\\n\\t\\t\\t\\twhile ( next && next.name == 'listItem' && next.getAttribute( 'indent' ) !== 0 ) {\\n\\t\\t\\t\\t\\t// Check each next list item, as long as its indent is bigger than 0.\\n\\t\\t\\t\\t\\t// If the indent is 0 we are not going to change anything anyway.\\n\\t\\t\\t\\t\\tconst indent = next.getAttribute( 'indent' );\\n\\n\\t\\t\\t\\t\\t// We check if that's item indent is lower as current relative indent.\\n\\t\\t\\t\\t\\tif ( indent < currentIndent ) {\\n\\t\\t\\t\\t\\t\\t// If it is, current relative indent becomes that indent.\\n\\t\\t\\t\\t\\t\\tcurrentIndent = indent;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Fix indent relatively to current relative indent.\\n\\t\\t\\t\\t\\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\\n\\t\\t\\t\\t\\tconst newIndent = indent - currentIndent;\\n\\n\\t\\t\\t\\t\\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\\n\\t\\t\\t\\t\\t// reverse the changes so the last item is changed first.\\n\\t\\t\\t\\t\\t// This is to keep model in correct state all the time.\\n\\t\\t\\t\\t\\tchanges.push( { element: next, indent: newIndent } );\\n\\n\\t\\t\\t\\t\\t// Find next item.\\n\\t\\t\\t\\t\\tnext = next.nextSibling;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tchanges = changes.reverse();\\n\\n\\t\\t\\t\\tfor ( const item of changes ) {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'indent', item.indent, item.element );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\\n\\t\\t\\t// Changing one nested list item to other type should also trigger changing all its siblings so the\\n\\t\\t\\t// whole nested list is of the same type.\\n\\t\\t\\t// Example (assume changing to numbered list):\\n\\t\\t\\t// * ------\\t\\t\\t\\t<-- do not fix, top level item\\n\\t\\t\\t//   * ------\\t\\t\\t<-- fix, because latter list item of this item's list is changed\\n\\t\\t\\t//      * ------\\t\\t<-- do not fix, item is not affected (different list)\\n\\t\\t\\t//   * ------\\t\\t\\t<-- fix, because latter list item of this item's list is changed\\n\\t\\t\\t//      * ------\\t\\t<-- fix, because latter list item of this item's list is changed\\n\\t\\t\\t//      * ---[--\\t\\t<-- already in selection\\n\\t\\t\\t//   * ------\\t\\t\\t<-- already in selection\\n\\t\\t\\t//   * ------\\t\\t\\t<-- already in selection\\n\\t\\t\\t// * ------\\t\\t\\t\\t<-- already in selection, but does not cause other list items to change because is top-level\\n\\t\\t\\t//   * ---]--\\t\\t\\t<-- already in selection\\n\\t\\t\\t//   * ------\\t\\t\\t<-- fix, because preceding list item of this item's list is changed\\n\\t\\t\\t//      * ------\\t\\t<-- do not fix, item is not affected (different list)\\n\\t\\t\\t// * ------\\t\\t\\t\\t<-- do not fix, top level item\\n\\t\\t\\tif ( !turnOff ) {\\n\\t\\t\\t\\t// Find lowest indent among selected items. This will be indicator what is the indent of\\n\\t\\t\\t\\t// top-most list affected by the command.\\n\\t\\t\\t\\tlet lowestIndent = Number.POSITIVE_INFINITY;\\n\\n\\t\\t\\t\\tfor ( const item of blocks ) {\\n\\t\\t\\t\\t\\tif ( item.is( 'listItem' ) && item.getAttribute( 'indent' ) < lowestIndent ) {\\n\\t\\t\\t\\t\\t\\tlowestIndent = item.getAttribute( 'indent' );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Do not execute the fix for top-level lists.\\n\\t\\t\\t\\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\\n\\n\\t\\t\\t\\t// Fix types of list items that are \\\"before\\\" the selected blocks.\\n\\t\\t\\t\\t_fixType( blocks, true, lowestIndent );\\n\\n\\t\\t\\t\\t// Fix types of list items that are \\\"after\\\" the selected blocks.\\n\\t\\t\\t\\t_fixType( blocks, false, lowestIndent );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Phew! Now it will be easier :).\\n\\t\\t\\t// For each block element that was in the selection, we will either: turn it to list item,\\n\\t\\t\\t// turn it to paragraph, or change it's type. Or leave it as it is.\\n\\t\\t\\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\\n\\t\\t\\tfor ( const element of blocks.reverse() ) {\\n\\t\\t\\t\\tif ( turnOff && element.name == 'listItem' ) {\\n\\t\\t\\t\\t\\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\\n\\t\\t\\t\\t\\t// List item specific attributes are removed by post fixer.\\n\\t\\t\\t\\t\\twriter.rename( element, 'paragraph' );\\n\\t\\t\\t\\t} else if ( !turnOff && element.name != 'listItem' ) {\\n\\t\\t\\t\\t\\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\\n\\t\\t\\t\\t\\t// The order of operations is important to keep model in correct state.\\n\\t\\t\\t\\t\\twriter.setAttributes( { type: this.type, indent: 0 }, element );\\n\\t\\t\\t\\t\\twriter.rename( element, 'listItem' );\\n\\t\\t\\t\\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'type' ) != this.type ) {\\n\\t\\t\\t\\t\\t// We are turning on and the element is a `listItem` but has different type - change it's type and\\n\\t\\t\\t\\t\\t// type of it's all siblings that have same indent.\\n\\t\\t\\t\\t\\twriter.setAttribute( 'type', this.type, element );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Checks the command's {@link #value}.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} The current value.\\n\\t */\\n\\t_getValue() {\\n\\t\\t// Check whether closest `listItem` ancestor of the position has a correct type.\\n\\t\\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\\n\\n\\t\\treturn !!listItem && listItem.is( 'listItem' ) && listItem.getAttribute( 'type' ) == this.type;\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the command can be enabled in the current context.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} Whether the command should be enabled.\\n\\t */\\n\\t_checkEnabled() {\\n\\t\\t// If command value is true it means that we are in list item, so the command should be enabled.\\n\\t\\tif ( this.value ) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tconst selection = this.editor.model.document.selection;\\n\\t\\tconst schema = this.editor.model.schema;\\n\\n\\t\\tconst firstBlock = first( selection.getSelectedBlocks() );\\n\\n\\t\\tif ( !firstBlock ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Otherwise, check if list item can be inserted at the position start.\\n\\t\\treturn checkCanBecomeListItem( firstBlock, schema );\\n\\t}\\n}\\n\\n// Helper function used when one or more list item have their type changed. Fixes type of other list items\\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\\n// not to duplicated code, as same fix has to be performed before and after selection.\\n//\\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\\n// or blocks after last selected block (`false`).\\n// @param {Number} lowestIndent Lowest indent among selected blocks.\\nfunction _fixType( blocks, isBackward, lowestIndent ) {\\n\\t// We need to check previous sibling of first changed item and next siblings of last changed item.\\n\\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\\n\\n\\tif ( startingItem.is( 'listItem' ) ) {\\n\\t\\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\\n\\t\\t// During processing items, keeps the lowest indent of already processed items.\\n\\t\\t// This saves us from changing too many items.\\n\\t\\t// Following example is for going forward as it is easier to read, however same applies to going backward.\\n\\t\\t// * ------\\n\\t\\t//   * ------\\n\\t\\t//     * --[---\\n\\t\\t//   * ------\\t\\t<-- `lowestIndent` should be 1\\n\\t\\t//     * --]---\\t\\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\\n\\t\\t//     * ------\\t\\t<-- should be fixed, `indent` == 2 == `currentIndent`\\n\\t\\t//   * ------\\t\\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\\n\\t\\t//     * ------\\t\\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\\n\\t\\t//   * ------\\t\\t<-- should be fixed, `indent` == 1 == `currentIndent`\\n\\t\\t// * ------\\t\\t\\t<-- break loop (`indent` < `lowestIndent`)\\n\\t\\tlet currentIndent = startingItem.getAttribute( 'indent' );\\n\\n\\t\\t// Look back until a list item with indent lower than reference `lowestIndent`.\\n\\t\\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\\n\\t\\twhile ( item && item.is( 'listItem' ) && item.getAttribute( 'indent' ) >= lowestIndent ) {\\n\\t\\t\\tif ( currentIndent > item.getAttribute( 'indent' ) ) {\\n\\t\\t\\t\\tcurrentIndent = item.getAttribute( 'indent' );\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Found an item that is in the same nested sublist.\\n\\t\\t\\tif ( item.getAttribute( 'indent' ) == currentIndent ) {\\n\\t\\t\\t\\t// Just add the item to selected blocks like it was selected by the user.\\n\\t\\t\\t\\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\\n\\t\\t\\t}\\n\\n\\t\\t\\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\\n\\t\\t}\\n\\t}\\n}\\n\\n// Checks whether the given block can be replaced by a listItem.\\n//\\n// @private\\n// @param {module:engine/model/element~Element} block A block to be tested.\\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\\n// @returns {Boolean}\\nfunction checkCanBecomeListItem( block, schema ) {\\n\\treturn schema.checkChild( block.parent, 'listItem' ) && !schema.isObject( block );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/indentcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\nimport first from '@ckeditor/ckeditor5-utils/src/first';\\n\\n/**\\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class IndentCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor The editor instance.\\n\\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\\n\\t * will outdent a list item.\\n\\t */\\n\\tconstructor( editor, indentDirection ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * Determines by how much the command will change the list item's indent attribute.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @private\\n\\t\\t * @member {Number}\\n\\t\\t */\\n\\t\\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tthis.isEnabled = this._checkEnabled();\\n\\t}\\n\\n\\t/**\\n\\t * Indents or outdents (depends on the {@link #constructor}'s `indentDirection` parameter) selected list items.\\n\\t *\\n\\t * @fires execute\\n\\t */\\n\\texecute() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\t\\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\\n\\n\\t\\t\\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\\n\\t\\t\\tlet next = lastItem.nextSibling;\\n\\n\\t\\t\\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\\n\\t\\t\\twhile ( next && next.name == 'listItem' && next.getAttribute( 'indent' ) > lastItem.getAttribute( 'indent' ) ) {\\n\\t\\t\\t\\titemsToChange.push( next );\\n\\n\\t\\t\\t\\tnext = next.nextSibling;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// We need to be sure to keep model in correct state after each small change, because converters\\n\\t\\t\\t// bases on that state and assumes that model is correct.\\n\\t\\t\\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\\n\\t\\t\\t// it is safer.\\n\\t\\t\\tif ( this._indentBy < 0 ) {\\n\\t\\t\\t\\titemsToChange = itemsToChange.reverse();\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor ( const item of itemsToChange ) {\\n\\t\\t\\t\\tconst indent = item.getAttribute( 'indent' ) + this._indentBy;\\n\\n\\t\\t\\t\\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\\n\\t\\t\\t\\t// This means that we need to convert that list item to paragraph.\\n\\t\\t\\t\\tif ( indent < 0 ) {\\n\\t\\t\\t\\t\\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\\n\\t\\t\\t\\t\\t// as listItem without attributes is very incorrect and will cause problems in converters.\\n\\t\\t\\t\\t\\t// No need to remove attributes, will be removed by post fixer.\\n\\t\\t\\t\\t\\twriter.rename( item, 'paragraph' );\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// If indent is >= 0, change the attribute value.\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\twriter.setAttribute( 'indent', indent, item );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Checks whether the command can be enabled in the current context.\\n\\t *\\n\\t * @private\\n\\t * @returns {Boolean} Whether the command should be enabled.\\n\\t */\\n\\t_checkEnabled() {\\n\\t\\t// Check whether any of position's ancestor is a list item.\\n\\t\\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\\n\\n\\t\\t// If selection is not in a list item, the command is disabled.\\n\\t\\tif ( !listItem || !listItem.is( 'listItem' ) ) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif ( this._indentBy > 0 ) {\\n\\t\\t\\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\\n\\t\\t\\t// To be in the same list, the item has to have same attributes and cannot be \\\"split\\\" by an item with lower indent.\\n\\t\\t\\tconst indent = listItem.getAttribute( 'indent' );\\n\\t\\t\\tconst type = listItem.getAttribute( 'type' );\\n\\n\\t\\t\\tlet prev = listItem.previousSibling;\\n\\n\\t\\t\\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'indent' ) >= indent ) {\\n\\t\\t\\t\\tif ( prev.getAttribute( 'indent' ) == indent ) {\\n\\t\\t\\t\\t\\t// The item is on the same level.\\n\\t\\t\\t\\t\\t// If it has same type, it means that we found a preceding sibling from the same list.\\n\\t\\t\\t\\t\\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\\n\\t\\t\\t\\t\\t// on top level lists, though).\\n\\t\\t\\t\\t\\treturn prev.getAttribute( 'type' ) == type;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tprev = prev.previousSibling;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Could not find similar list item, this means that `listItem` is first in its list.\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\\n\\t\\treturn true;\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/utils\\n */\\n\\n/**\\n * Creates list item {@link module:engine/view/containerelement~ContainerElement}.\\n *\\n * @param {module:engine/view/writer~Writer} writer The writer instance.\\n * @returns {module:engine/view/containerelement~ContainerElement}\\n */\\nexport function createViewListItemElement( writer ) {\\n\\tconst viewItem = writer.createContainerElement( 'li' );\\n\\tviewItem.getFillerOffset = getFillerOffset;\\n\\n\\treturn viewItem;\\n}\\n\\n// Implementation of getFillerOffset for view list item element.\\n//\\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\\nfunction getFillerOffset() {\\n\\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\\n\\n\\treturn this.isEmpty || hasOnlyLists ? 0 : null;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/converters\\n */\\n\\nimport ModelElement from '@ckeditor/ckeditor5-engine/src/model/element';\\nimport ModelPosition from '@ckeditor/ckeditor5-engine/src/model/position';\\nimport ModelRange from '@ckeditor/ckeditor5-engine/src/model/range';\\n\\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\\nimport ViewRange from '@ckeditor/ckeditor5-engine/src/view/range';\\nimport ViewTreeWalker from '@ckeditor/ckeditor5-engine/src/view/treewalker';\\nimport { createViewListItemElement } from './utils';\\n\\n/**\\n * A model-to-view converter for `listItem` model element insertion.\\n *\\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\\n * position, and merges the list with surrounding lists (if available).\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewInsertion( evt, data, conversionApi ) {\\n\\tconst consumable = conversionApi.consumable;\\n\\n\\tif ( !consumable.test( data.item, 'insert' ) ||\\n\\t\\t!consumable.test( data.item, 'attribute:type' ) ||\\n\\t\\t!consumable.test( data.item, 'attribute:indent' )\\n\\t) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconsumable.consume( data.item, 'insert' );\\n\\tconsumable.consume( data.item, 'attribute:type' );\\n\\tconsumable.consume( data.item, 'attribute:indent' );\\n\\n\\tconst modelItem = data.item;\\n\\tconst viewItem = generateLiInUl( modelItem, conversionApi );\\n\\n\\tinjectViewList( modelItem, viewItem, conversionApi );\\n}\\n\\n/**\\n * A model-to-view converter for `listItem` model element removal.\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewRemove( evt, data, conversionApi ) {\\n\\tconst viewStart = conversionApi.mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'li' ) );\\n\\tconst viewItem = viewStart.nodeAfter;\\n\\tconst viewWriter = conversionApi.writer;\\n\\n\\t// 1. Break the container after and before the list item.\\n\\t// This will create a view list with one view list item - the one to remove.\\n\\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\\n\\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\\n\\n\\t// 2. Remove the list with the item to remove.\\n\\tconst viewList = viewItem.parent;\\n\\tconst viewListPrev = viewList.previousSibling;\\n\\tconst removeRange = ViewRange.createOn( viewList );\\n\\tconst removed = viewWriter.remove( removeRange );\\n\\n\\t// 3. Merge the whole created by breaking and removing the list.\\n\\tif ( viewListPrev && viewListPrev.nextSibling ) {\\n\\t\\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\\n\\t}\\n\\n\\t// 4. Bring back nested list that was in the removed <li>.\\n\\tconst modelItem = conversionApi.mapper.toModelElement( viewItem );\\n\\n\\thoistNestedLists( modelItem.getAttribute( 'indent' ) + 1, data.position, removeRange.start, viewItem, conversionApi );\\n\\n\\t// 5. Unbind removed view item and all children.\\n\\tfor ( const child of ViewRange.createIn( removed ).getItems() ) {\\n\\t\\tconversionApi.mapper.unbindViewElement( child );\\n\\t}\\n\\n\\tevt.stop();\\n}\\n\\n/**\\n * A model-to-view converter for `type` attribute change on `listItem` model element.\\n *\\n * This change means that `<li>` elements parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\\n * by breaking view elements, changing their name and merging them.\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewChangeType( evt, data, conversionApi ) {\\n\\tif ( !conversionApi.consumable.consume( data.item, 'attribute:type' ) ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\\n\\tconst viewWriter = conversionApi.writer;\\n\\n\\t// 1. Break the container after and before the list item.\\n\\t// This will create a view list with one view list item -- the one that changed type.\\n\\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\\n\\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\\n\\n\\t// 2. Change name of the view list that holds the changed view item.\\n\\t// We cannot just change name property, because that would not render properly.\\n\\tlet viewList = viewItem.parent;\\n\\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\\n\\tviewList = viewWriter.rename( viewList, listName );\\n\\n\\t// 3. Merge the changed view list with other lists, if possible.\\n\\tmergeViewLists( viewWriter, viewList, viewList.nextSibling );\\n\\tmergeViewLists( viewWriter, viewList.previousSibling, viewList );\\n\\n\\t// 4. Consumable insertion of children inside the item. They are already handled by re-building the item in view.\\n\\tfor ( const child of data.item.getChildren() ) {\\n\\t\\tconversionApi.consumable.consume( child, 'insert' );\\n\\t}\\n}\\n\\n/**\\n * A model-to-view converter for `indent` attribute change on `listItem` model element.\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewChangeIndent( evt, data, conversionApi ) {\\n\\tif ( !conversionApi.consumable.consume( data.item, 'attribute:indent' ) ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\\n\\tconst viewWriter = conversionApi.writer;\\n\\n\\t// 1. Break the container after and before the list item.\\n\\t// This will create a view list with one view list item -- the one that changed type.\\n\\tviewWriter.breakContainer( ViewPosition.createBefore( viewItem ) );\\n\\tviewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\\n\\n\\t// 2. Extract view list with changed view list item and merge \\\"hole\\\" possibly created by breaking and removing elements.\\n\\tconst viewList = viewItem.parent;\\n\\tconst viewListPrev = viewList.previousSibling;\\n\\tconst removeRange = ViewRange.createOn( viewList );\\n\\tviewWriter.remove( removeRange );\\n\\n\\tif ( viewListPrev && viewListPrev.nextSibling ) {\\n\\t\\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\\n\\t}\\n\\n\\t// 3. Bring back nested list that was in the removed <li>.\\n\\thoistNestedLists( data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi );\\n\\n\\t// 4. Inject view list like it is newly inserted.\\n\\tinjectViewList( data.item, viewItem, conversionApi );\\n\\n\\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\\n\\tfor ( const child of data.item.getChildren() ) {\\n\\t\\tconversionApi.consumable.consume( child, 'insert' );\\n\\t}\\n}\\n\\n/**\\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\\n *\\n * The converter prevents such situations:\\n *\\n *\\t\\t// Model:                        // View:\\n *\\t\\t<listItem>foo</listItem>         <ul>\\n *\\t\\t<listItem>bar</listItem>             <li>foo</li>\\n *\\t\\t                                     <li>bar</li>\\n *\\t\\t                                 </ul>\\n *\\n *\\t\\t// After change:                 // Correct view guaranteed by this converter:\\n *\\t\\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\\n *\\t\\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\\n *\\t\\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewSplitOnInsert( evt, data, conversionApi ) {\\n\\tif ( data.item.name != 'listItem' ) {\\n\\t\\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\\n\\n\\t\\tconst viewWriter = conversionApi.writer;\\n\\t\\tconst lists = [];\\n\\n\\t\\t// Break multiple ULs/OLs if there are.\\n\\t\\t//\\n\\t\\t// Imagine following list:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1 --------\\n\\t\\t//     1.1.1 --------\\n\\t\\t//     1.1.2 --------\\n\\t\\t//     1.1.3 --------\\n\\t\\t//       1.1.3.1 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//     1.2.1 --------\\n\\t\\t// 2 --------\\n\\t\\t//\\n\\t\\t// Insert paragraph after item 1.1.1:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1 --------\\n\\t\\t//     1.1.1 --------\\n\\t\\t//\\n\\t\\t// Lorem ipsum.\\n\\t\\t//\\n\\t\\t//     1.1.2 --------\\n\\t\\t//     1.1.3 --------\\n\\t\\t//       1.1.3.1 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//     1.2.1 --------\\n\\t\\t// 2 --------\\n\\t\\t//\\n\\t\\t// In this case 1.1.2 has to become beginning of a new list.\\n\\t\\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\\n\\t\\t// Then we need to move those broken pieces one after another and merge:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1 --------\\n\\t\\t//     1.1.1 --------\\n\\t\\t//\\n\\t\\t// Lorem ipsum.\\n\\t\\t//\\n\\t\\t// 1.1.2 --------\\n\\t\\t//   1.1.3 --------\\n\\t\\t//     1.1.3.1 --------\\n\\t\\t// 1.2 --------\\n\\t\\t//   1.2.1 --------\\n\\t\\t// 2 --------\\n\\t\\t//\\n\\t\\twhile ( viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol' ) {\\n\\t\\t\\tviewPosition = viewWriter.breakContainer( viewPosition );\\n\\n\\t\\t\\tif ( viewPosition.parent.name != 'li' ) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remove lists that are after inserted element.\\n\\t\\t\\t// They will be brought back later, below the inserted element.\\n\\t\\t\\tconst removeStart = viewPosition;\\n\\t\\t\\tconst removeEnd = ViewPosition.createAt( viewPosition.parent, 'end' );\\n\\n\\t\\t\\t// Don't remove if there is nothing to remove.\\n\\t\\t\\tif ( !removeStart.isEqual( removeEnd ) ) {\\n\\t\\t\\t\\tconst removed = viewWriter.remove( new ViewRange( removeStart, removeEnd ) );\\n\\t\\t\\t\\tlists.push( removed );\\n\\t\\t\\t}\\n\\n\\t\\t\\tviewPosition = ViewPosition.createAfter( viewPosition.parent );\\n\\t\\t}\\n\\n\\t\\t// Bring back removed lists.\\n\\t\\tif ( lists.length > 0 ) {\\n\\t\\t\\tfor ( let i = 0; i < lists.length; i++ ) {\\n\\t\\t\\t\\tconst previousList = viewPosition.nodeBefore;\\n\\t\\t\\t\\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\\n\\t\\t\\t\\tviewPosition = insertedRange.end;\\n\\n\\t\\t\\t\\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\\n\\t\\t\\t\\tif ( i > 0 ) {\\n\\t\\t\\t\\t\\tconst mergePos = mergeViewLists( viewWriter, previousList, previousList.nextSibling );\\n\\n\\t\\t\\t\\t\\t// If `mergePos` is in `previousList` it means that the lists got merged.\\n\\t\\t\\t\\t\\t// In this case, we need to fix insert position.\\n\\t\\t\\t\\t\\tif ( mergePos && mergePos.parent == previousList ) {\\n\\t\\t\\t\\t\\t\\tviewPosition.offset--;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Merge last inserted list with element after it.\\n\\t\\t\\tmergeViewLists( viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter );\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\\n * merging view lists after something is removed or moved from near them.\\n *\\n * Example:\\n *\\n *\\t\\t// Model:                        // View:\\n *\\t\\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\\n *\\t\\t<paragraph>xxx</paragraph>       <p>xxx</p>\\n *\\t\\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\\n *\\n *\\t\\t// After change:                 // Correct view guaranteed by this converter:\\n *\\t\\t<listItem>foo</listItem>         <ul>\\n *\\t\\t<listItem>bar</listItem>             <li>foo</li>\\n *\\t\\t                                     <li>bar</li>\\n *\\t\\t                                 </ul>\\n *\\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data Additional information about the change.\\n * @param {Object} conversionApi Conversion interface.\\n */\\nexport function modelViewMergeAfter( evt, data, conversionApi ) {\\n\\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\\n\\tconst viewItemPrev = viewPosition.nodeBefore;\\n\\tconst viewItemNext = viewPosition.nodeAfter;\\n\\n\\t// Merge lists if something (remove, move) was done from inside of list.\\n\\t// Merging will be done only if both items are view lists of the same type.\\n\\t// The check is done inside the helper function.\\n\\tmergeViewLists( conversionApi.writer, viewItemPrev, viewItemNext );\\n}\\n\\n/**\\n * A view-to-model converter that converts `<li>` view elements into `listItem` model elements.\\n *\\n * To set correct values of the `type` and `indent` attributes the converter:\\n * * checks `<li>`'s parent,\\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\\n *\\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\\n * @param {Object} conversionApi Conversion interface to be used by the callback.\\n */\\nexport function viewModelConverter( evt, data, conversionApi ) {\\n\\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\\n\\t\\tconst writer = conversionApi.writer;\\n\\t\\tconst conversionStore = this.conversionApi.store;\\n\\n\\t\\t// 1. Create `listItem` model element.\\n\\t\\tconst listItem = writer.createElement( 'listItem' );\\n\\n\\t\\t// 2. Handle `listItem` model element attributes.\\n\\t\\tconversionStore.indent = conversionStore.indent || 0;\\n\\t\\twriter.setAttribute( 'indent', conversionStore.indent, listItem );\\n\\n\\t\\t// Set 'bulleted' as default. If this item is pasted into a context,\\n\\t\\tconst type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\\n\\t\\twriter.setAttribute( 'type', type, listItem );\\n\\n\\t\\t// `listItem`s created recursively should have bigger indent.\\n\\t\\tconversionStore.indent++;\\n\\n\\t\\t// Try to find allowed parent for list item.\\n\\t\\tconst splitResult = conversionApi.splitToAllowedParent( listItem, data.modelCursor );\\n\\n\\t\\t// When there is no allowed parent it means that list item cannot be converted at current model position\\n\\t\\t// and in any of position ancestors.\\n\\t\\tif ( !splitResult ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\twriter.insert( listItem, splitResult.position );\\n\\n\\t\\t// Remember position after list item, next list items will be inserted at this position.\\n\\t\\tlet nextPosition = ModelPosition.createAfter( listItem );\\n\\n\\t\\t// Check all children of the converted `<li>`.\\n\\t\\t// At this point we assume there are no \\\"whitespace\\\" view text nodes in view list, between view list items.\\n\\t\\t// This should be handled by `<ul>` and `<ol>` converters.\\n\\t\\tfor ( const child of data.viewItem.getChildren() ) {\\n\\t\\t\\t// If this is a view list element, we will convert it after last `listItem` model element.\\n\\t\\t\\tif ( child.name == 'ul' || child.name == 'ol' ) {\\n\\t\\t\\t\\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\\n\\t\\t\\t}\\n\\t\\t\\t// If it was not a list it was a \\\"regular\\\" list item content. Just convert it to `listItem`.\\n\\t\\t\\telse {\\n\\t\\t\\t\\tconversionApi.convertItem( child, ModelPosition.createAt( listItem, 'end' ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconversionStore.indent--;\\n\\n\\t\\t// Result range starts before the first item and ends after the last.\\n\\t\\tdata.modelRange = new ModelRange( data.modelCursor, nextPosition );\\n\\n\\t\\t// When modelCursor parent had to be split to insert list item.\\n\\t\\tif ( splitResult.cursorParent ) {\\n\\t\\t\\t// Then continue conversion in split element.\\n\\t\\t\\tdata.modelCursor = ModelPosition.createAt( splitResult.cursorParent );\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise continue conversion after last list item.\\n\\t\\t\\tdata.modelCursor = data.modelRange.end;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * A view-to-model converter for `<ul>` and `<ol>` view elements that cleans the input view of garbage.\\n * This is mostly to clean whitespaces from between `<li>` view elements inside the view list element, however, also\\n * incorrect data can be cleared if the view was incorrect.\\n *\\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\\n * @param {Object} conversionApi Conversion interface to be used by the callback.\\n */\\nexport function cleanList( evt, data, conversionApi ) {\\n\\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\\n\\t\\t// Caching children because when we start removing them iterating fails.\\n\\t\\tconst children = Array.from( data.viewItem.getChildren() );\\n\\n\\t\\tfor ( const child of children ) {\\n\\t\\t\\tif ( !child.is( 'li' ) ) {\\n\\t\\t\\t\\tchild._remove();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * A view-to-model converter for `<li>` elements that cleans whitespace formatting from the input view.\\n *\\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\\n * @param {Object} conversionApi Conversion interface to be used by the callback.\\n */\\nexport function cleanListItem( evt, data, conversionApi ) {\\n\\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\\n\\t\\tif ( data.viewItem.childCount === 0 ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst children = [ ...data.viewItem.getChildren() ];\\n\\n\\t\\tlet foundList = false;\\n\\t\\tlet firstNode = true;\\n\\n\\t\\tfor ( const child of children ) {\\n\\t\\t\\tif ( foundList && !child.is( 'ul' ) && !child.is( 'ol' ) ) {\\n\\t\\t\\t\\tchild._remove();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( child.is( 'text' ) ) {\\n\\t\\t\\t\\t// If this is the first node and it's a text node, left-trim it.\\n\\t\\t\\t\\tif ( firstNode ) {\\n\\t\\t\\t\\t\\tconversionApi.writer.setTextData( child.data.replace( /^\\\\s+/, '' ), child );\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If this is the last text node before <ul> or <ol>, right-trim it.\\n\\t\\t\\t\\tif ( !child.nextSibling || ( child.nextSibling.is( 'ul' ) || child.nextSibling.is( 'ol' ) ) ) {\\n\\t\\t\\t\\t\\tconversionApi.writer.setTextData( child.data.replace( /\\\\s+$/, '' ), child );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if ( child.is( 'ul' ) || child.is( 'ol' ) ) {\\n\\t\\t\\t\\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\\n\\t\\t\\t\\tfoundList = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfirstNode = false;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * The callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\\n * positions between `listItem` elements that would be incorrectly mapped because of how list items are represented in model\\n * and view.\\n *\\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data An object containing additional data and placeholder for mapping result.\\n */\\nexport function modelToViewPosition( evt, data ) {\\n\\tif ( data.isPhantom ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst modelItem = data.modelPosition.nodeBefore;\\n\\n\\tif ( modelItem && modelItem.is( 'listItem' ) ) {\\n\\t\\tconst viewItem = data.mapper.toViewElement( modelItem );\\n\\t\\tconst topmostViewList = viewItem.getAncestors().find( element => element.is( 'ul' ) || element.is( 'ol' ) );\\n\\t\\tconst walker = new ViewTreeWalker( {\\n\\t\\t\\tstartPosition: ViewPosition.createAt( viewItem, 0 )\\n\\t\\t} );\\n\\n\\t\\tfor ( const value of walker ) {\\n\\t\\t\\tif ( value.type == 'elementStart' && value.item.is( 'li' ) ) {\\n\\t\\t\\t\\tdata.viewPosition = value.previousPosition;\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\\n\\t\\t\\t\\tdata.viewPosition = value.nextPosition;\\n\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\\n * positions between `<li>` elements that would be incorrectly mapped because of how list items are represented in model\\n * and view.\\n *\\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Object} data An object containing additional data and placeholder for mapping result.\\n */\\nexport function viewToModelPosition( evt, data ) {\\n\\tconst viewPos = data.viewPosition;\\n\\tconst viewParent = viewPos.parent;\\n\\tconst mapper = data.mapper;\\n\\n\\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\\n\\t\\t// Position is directly in <ul> or <ol>.\\n\\t\\tif ( !viewPos.isAtEnd ) {\\n\\t\\t\\t// If position is not at the end, it must be before <li>.\\n\\t\\t\\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\\n\\t\\t\\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter );\\n\\n\\t\\t\\tdata.modelPosition = ModelPosition.createBefore( modelNode );\\n\\t\\t} else {\\n\\t\\t\\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\\n\\t\\t\\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\\n\\t\\t\\t// because that <li> may contain nested items.\\n\\t\\t\\t// We will check \\\"model length\\\" of that <li>, in other words - how many `listItem`s are in that <li>.\\n\\t\\t\\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore );\\n\\t\\t\\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore );\\n\\n\\t\\t\\t// Then we get model position before mapped `listItem` and shift it accordingly.\\n\\t\\t\\tdata.modelPosition = ModelPosition.createBefore( modelNode ).getShiftedBy( modelLength );\\n\\t\\t}\\n\\n\\t\\tevt.stop();\\n\\t} else if ( viewParent.name == 'li' && viewPos.nodeBefore && ( viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol' ) ) {\\n\\t\\t// In most cases when view position is in <li> it is in text and this is a correct position.\\n\\t\\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\\n\\t\\tconst modelNode = mapper.toModelElement( viewParent );\\n\\n\\t\\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\\n\\t\\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\\n\\t\\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\\n\\t\\tlet viewList = viewPos.nodeBefore;\\n\\n\\t\\twhile ( viewList && ( viewList.is( 'ul' ) || viewList.is( 'ol' ) ) ) {\\n\\t\\t\\tmodelLength += mapper.getModelLength( viewList );\\n\\n\\t\\t\\tviewList = viewList.previousSibling;\\n\\t\\t}\\n\\n\\t\\tdata.modelPosition = ModelPosition.createBefore( modelNode ).getShiftedBy( modelLength );\\n\\n\\t\\tevt.stop();\\n\\t}\\n}\\n\\n/**\\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\\n *\\n * In an example below, there is a correct list structure.\\n * Then the middle element will be removed so the list structure will become incorrect:\\n *\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=0>Item 1</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=1>Item 2</listItem>   <--- this is removed.\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=2>Item 3</listItem>\\n *\\n * List structure after the middle element removed:\\n *\\n * \\t\\t<listItem type=\\\"bulleted\\\" indent=0>Item 1</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=2>Item 3</listItem>\\n *\\n * Should become:\\n *\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=0>Item 1</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=1>Item 3</listItem>   <--- note that indent got post-fixed.\\n *\\n * @param {module:engine/model/model~Model} model The data model.\\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\\n */\\nexport function modelChangePostFixer( model, writer ) {\\n\\tconst changes = model.document.differ.getChanges();\\n\\tconst itemToListHead = new Map();\\n\\n\\tlet applied = false;\\n\\n\\tfor ( const entry of changes ) {\\n\\t\\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\\n\\t\\t\\t_addListToFix( entry.position );\\n\\t\\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\\n\\t\\t\\tif ( entry.name != '$text' ) {\\n\\t\\t\\t\\t// In case of renamed element.\\n\\t\\t\\t\\tconst item = entry.position.nodeAfter;\\n\\n\\t\\t\\t\\tif ( item.hasAttribute( 'indent' ) ) {\\n\\t\\t\\t\\t\\twriter.removeAttribute( 'indent', item );\\n\\n\\t\\t\\t\\t\\tapplied = true;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif ( item.hasAttribute( 'type' ) ) {\\n\\t\\t\\t\\t\\twriter.removeAttribute( 'type', item );\\n\\n\\t\\t\\t\\t\\tapplied = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst posAfter = entry.position.getShiftedBy( entry.length );\\n\\n\\t\\t\\t_addListToFix( posAfter );\\n\\t\\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\\n\\t\\t\\t_addListToFix( entry.position );\\n\\t\\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'indent' ) {\\n\\t\\t\\t_addListToFix( entry.range.start );\\n\\t\\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'type' ) {\\n\\t\\t\\t_addListToFix( entry.range.start );\\n\\t\\t}\\n\\t}\\n\\n\\tfor ( const listHead of itemToListHead.values() ) {\\n\\t\\t_fixListIndents( listHead );\\n\\t\\t_fixListTypes( listHead );\\n\\t}\\n\\n\\treturn applied;\\n\\n\\tfunction _addListToFix( position ) {\\n\\t\\tconst prev = position.nodeBefore;\\n\\n\\t\\tif ( !prev || !prev.is( 'listItem' ) ) {\\n\\t\\t\\tconst item = position.nodeAfter;\\n\\n\\t\\t\\tif ( item && item.is( 'listItem' ) ) {\\n\\t\\t\\t\\titemToListHead.set( item, item );\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tlet listHead = prev;\\n\\n\\t\\t\\tif ( itemToListHead.has( listHead ) ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\twhile ( listHead.previousSibling && listHead.previousSibling.is( 'listItem' ) ) {\\n\\t\\t\\t\\tlistHead = listHead.previousSibling;\\n\\n\\t\\t\\t\\tif ( itemToListHead.has( listHead ) ) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\titemToListHead.set( position.nodeBefore, listHead );\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _fixListIndents( item ) {\\n\\t\\tlet maxIndent = 0;\\n\\t\\tlet fixBy = null;\\n\\n\\t\\twhile ( item && item.is( 'listItem' ) ) {\\n\\t\\t\\tconst itemIndent = item.getAttribute( 'indent' );\\n\\n\\t\\t\\tif ( itemIndent > maxIndent ) {\\n\\t\\t\\t\\tlet newIndent;\\n\\n\\t\\t\\t\\tif ( fixBy === null ) {\\n\\t\\t\\t\\t\\tfixBy = itemIndent - maxIndent;\\n\\t\\t\\t\\t\\tnewIndent = maxIndent;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tif ( fixBy > itemIndent ) {\\n\\t\\t\\t\\t\\t\\tfixBy = itemIndent;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tnewIndent = itemIndent - fixBy;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\twriter.setAttribute( 'indent', newIndent, item );\\n\\n\\t\\t\\t\\tapplied = true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfixBy = null;\\n\\t\\t\\t\\tmaxIndent = item.getAttribute( 'indent' ) + 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\titem = item.nextSibling;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _fixListTypes( item ) {\\n\\t\\tlet typesStack = [];\\n\\t\\tlet prev = null;\\n\\n\\t\\twhile ( item && item.is( 'listItem' ) ) {\\n\\t\\t\\tconst itemIndent = item.getAttribute( 'indent' );\\n\\n\\t\\t\\tif ( prev && prev.getAttribute( 'indent' ) > itemIndent ) {\\n\\t\\t\\t\\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( itemIndent != 0 ) {\\n\\t\\t\\t\\tif ( typesStack[ itemIndent ] ) {\\n\\t\\t\\t\\t\\tconst type = typesStack[ itemIndent ];\\n\\n\\t\\t\\t\\t\\tif ( item.getAttribute( 'type' ) != type ) {\\n\\t\\t\\t\\t\\t\\twriter.setAttribute( 'type', type, item );\\n\\n\\t\\t\\t\\t\\t\\tapplied = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttypesStack[ itemIndent ] = item.getAttribute( 'type' );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tprev = item;\\n\\t\\t\\titem = item.nextSibling;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * A fixer for pasted content that includes list items.\\n *\\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\\n *\\n * Example:\\n *\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=0>A</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=1>B^</listItem>\\n *\\t\\t// At ^ paste:  <listItem type=\\\"bulleted\\\" indent=4>X</listItem>\\n *\\t\\t//              <listItem type=\\\"bulleted\\\" indent=5>Y</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=2>C</listItem>\\n *\\n * Should become:\\n *\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=0>A</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=1>BX</listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=2>Y/listItem>\\n *\\t\\t<listItem type=\\\"bulleted\\\" indent=2>C</listItem>\\n *\\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\\n */\\nexport function modelIndentPasteFixer( evt, [ content, selection ] ) {\\n\\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\\n\\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\\n\\t// that list will be broken.\\n\\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\\n\\t// would create incorrect model.\\n\\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\\n\\n\\tif ( item && item.is( 'listItem' ) ) {\\n\\t\\t// Get a reference list item. Inserted list items will be fixed according to that item.\\n\\t\\tconst pos = selection.getFirstPosition();\\n\\t\\tlet refItem = null;\\n\\n\\t\\tif ( pos.parent.is( 'listItem' ) ) {\\n\\t\\t\\trefItem = pos.parent;\\n\\t\\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'listItem' ) ) {\\n\\t\\t\\trefItem = pos.nodeBefore;\\n\\t\\t}\\n\\n\\t\\t// If there is `refItem` it means that we do insert list items into an existing list.\\n\\t\\tif ( refItem ) {\\n\\t\\t\\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\\n\\t\\t\\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\\n\\t\\t\\t// Indent of all those items has to be adjusted to reference item.\\n\\t\\t\\tconst indentChange = refItem.getAttribute( 'indent' );\\n\\n\\t\\t\\t// Fix only if there is anything to fix.\\n\\t\\t\\tif ( indentChange > 0 ) {\\n\\t\\t\\t\\t// Adjust indent of all \\\"first\\\" list items in inserted data.\\n\\t\\t\\t\\twhile ( item && item.is( 'listItem' ) ) {\\n\\t\\t\\t\\t\\titem._setAttribute( 'indent', item.getAttribute( 'indent' ) + indentChange );\\n\\n\\t\\t\\t\\t\\titem = item.nextSibling;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n// Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of given `modelItem` model `listItem` element.\\n// Then, it binds created view list item (<li>) with model `listItem` element.\\n// The function then returns created view list item (<li>).\\nfunction generateLiInUl( modelItem, conversionApi ) {\\n\\tconst mapper = conversionApi.mapper;\\n\\tconst viewWriter = conversionApi.writer;\\n\\tconst listType = modelItem.getAttribute( 'type' ) == 'numbered' ? 'ol' : 'ul';\\n\\tconst viewItem = createViewListItemElement( viewWriter );\\n\\n\\tconst viewList = viewWriter.createContainerElement( listType, null );\\n\\tviewWriter.insert( ViewPosition.createAt( viewList ), viewItem );\\n\\n\\tmapper.bindElements( modelItem, viewItem );\\n\\n\\treturn viewItem;\\n}\\n\\n// Helper function that seeks for a list item sibling of given model item (or position) which meets given criteria.\\n// `options` object may contain one or more of given values (by default they are `false`):\\n// `options.sameIndent` - whether sought sibling should have same indent (default = no),\\n// `options.smallerIndent` - whether sought sibling should have smaller indent (default = no).\\n// `options.indent` - used as reference item when first parameter is a position\\n// Either `options.sameIndent` or `options.biggerIndent` should be set to `true`.\\nfunction getSiblingListItem( modelItemOrPosition, options ) {\\n\\tconst sameIndent = !!options.sameIndent;\\n\\tconst smallerIndent = !!options.smallerIndent;\\n\\n\\tconst indent = modelItemOrPosition instanceof ModelElement ? modelItemOrPosition.getAttribute( 'indent' ) : options.indent;\\n\\tlet item = modelItemOrPosition instanceof ModelElement ? modelItemOrPosition.previousSibling : modelItemOrPosition.nodeBefore;\\n\\n\\twhile ( item && item.name == 'listItem' ) {\\n\\t\\tconst itemIndent = item.getAttribute( 'indent' );\\n\\n\\t\\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\\n\\t\\t\\treturn item;\\n\\t\\t}\\n\\n\\t\\titem = item.previousSibling;\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n// Helper function that takes two parameters, that are expected to be view list elements, and merges them.\\n// The merge happen only if both parameters are UL or OL elements.\\nfunction mergeViewLists( viewWriter, firstList, secondList ) {\\n\\tif ( firstList && secondList && ( firstList.name == 'ul' || firstList.name == 'ol' ) && firstList.name == secondList.name ) {\\n\\t\\treturn viewWriter.mergeContainers( ViewPosition.createAfter( firstList ) );\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n// Helper function that takes model list item element `modelItem`, corresponding view list item element `injectedItem`\\n// that is not added to the view and is inside a view list element (`ul` or `ol`) and is that's list only child.\\n// The list is inserted at correct position (element breaking may be needed) and then merged with it's siblings.\\n// See comments below to better understand the algorithm.\\nfunction injectViewList( modelItem, injectedItem, conversionApi ) {\\n\\tconst injectedList = injectedItem.parent;\\n\\tconst mapper = conversionApi.mapper;\\n\\tconst viewWriter = conversionApi.writer;\\n\\n\\t// Position where view list will be inserted.\\n\\tlet insertPosition = mapper.toViewPosition( ModelPosition.createBefore( modelItem ) );\\n\\n\\t// 1. Find previous list item that has same or smaller indent. Basically we are looking for a first model item\\n\\t// that is \\\"parent\\\" or \\\"sibling\\\" of injected model item.\\n\\t// If there is no such list item, it means that injected list item is the first item in \\\"its list\\\".\\n\\tconst refItem = getSiblingListItem( modelItem, { sameIndent: true, smallerIndent: true } );\\n\\tconst prevItem = modelItem.previousSibling;\\n\\n\\tif ( refItem && refItem.getAttribute( 'indent' ) == modelItem.getAttribute( 'indent' ) ) {\\n\\t\\t// There is a list item with same indent - we found same-level sibling.\\n\\t\\t// Break the list after it. Inserted view item will be inserted in the broken space.\\n\\t\\tconst viewItem = mapper.toViewElement( refItem );\\n\\t\\tinsertPosition = viewWriter.breakContainer( ViewPosition.createAfter( viewItem ) );\\n\\t} else {\\n\\t\\t// There is no list item with same indent. Check previous model item.\\n\\t\\tif ( prevItem && prevItem.name == 'listItem' ) {\\n\\t\\t\\t// If it is a list item, it has to have lower indent.\\n\\t\\t\\t// It means that inserted item should be added to it as its nested item.\\n\\t\\t\\tinsertPosition = mapper.toViewPosition( ModelPosition.createAt( prevItem, 'end' ) );\\n\\t\\t} else {\\n\\t\\t\\t// Previous item is not a list item (or does not exist at all).\\n\\t\\t\\t// Just map the position and insert the view item at mapped position.\\n\\t\\t\\tinsertPosition = mapper.toViewPosition( ModelPosition.createBefore( modelItem ) );\\n\\t\\t}\\n\\t}\\n\\n\\tinsertPosition = positionAfterUiElements( insertPosition );\\n\\n\\t// Insert the view item.\\n\\tviewWriter.insert( insertPosition, injectedList );\\n\\n\\t// 2. Handle possible children of injected model item.\\n\\tif ( prevItem && prevItem.name == 'listItem' ) {\\n\\t\\tconst prevView = mapper.toViewElement( prevItem );\\n\\n\\t\\tconst walker = new ViewTreeWalker( {\\n\\t\\t\\tboundaries: new ViewRange(\\n\\t\\t\\t\\tViewPosition.createAt( prevView, 0 ),\\n\\t\\t\\t\\tinsertPosition\\n\\t\\t\\t),\\n\\t\\t\\tignoreElementEnd: true\\n\\t\\t} );\\n\\n\\t\\tfor ( const value of walker ) {\\n\\t\\t\\tif ( value.item.is( 'li' ) ) {\\n\\t\\t\\t\\tconst breakPosition = viewWriter.breakContainer( ViewPosition.createBefore( value.item ) );\\n\\t\\t\\t\\tconst viewList = value.item.parent;\\n\\n\\t\\t\\t\\tconst targetPosition = ViewPosition.createAt( injectedItem, 'end' );\\n\\t\\t\\t\\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\\n\\t\\t\\t\\tviewWriter.move( ViewRange.createOn( viewList ), targetPosition );\\n\\n\\t\\t\\t\\twalker.position = breakPosition;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tconst nextViewList = injectedList.nextSibling;\\n\\n\\t\\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\\n\\t\\t\\tlet lastSubChild = null;\\n\\n\\t\\t\\tfor ( const child of nextViewList.getChildren() ) {\\n\\t\\t\\t\\tconst modelChild = mapper.toModelElement( child );\\n\\n\\t\\t\\t\\tif ( modelChild && modelChild.getAttribute( 'indent' ) > modelItem.getAttribute( 'indent' ) ) {\\n\\t\\t\\t\\t\\tlastSubChild = child;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif ( lastSubChild ) {\\n\\t\\t\\t\\tviewWriter.breakContainer( ViewPosition.createAfter( lastSubChild ) );\\n\\t\\t\\t\\tviewWriter.move( ViewRange.createOn( lastSubChild.parent ), ViewPosition.createAt( injectedItem, 'end' ) );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Merge inserted view list with its possible neighbour lists.\\n\\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\\n\\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\\n}\\n\\n// Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\\n// to other given parameters.\\nfunction hoistNestedLists( nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi ) {\\n\\t// Find correct previous model list item element.\\n\\t// The element has to have either same or smaller indent than given reference indent.\\n\\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\\n\\t// Keep in mind that such element might not be found, if removed item was the first item.\\n\\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition, {\\n\\t\\tsameIndent: true,\\n\\t\\tsmallerIndent: true,\\n\\t\\tindent: nextIndent\\n\\t} );\\n\\n\\tconst mapper = conversionApi.mapper;\\n\\tconst viewWriter = conversionApi.writer;\\n\\n\\t// Indent of found element or `null` if the element has not been found.\\n\\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'indent' ) : null;\\n\\n\\tlet insertPosition;\\n\\n\\tif ( !prevModelItem ) {\\n\\t\\t// If element has not been found, simply insert lists at the position where the removed item was:\\n\\t\\t//\\n\\t\\t// Lorem ipsum.\\n\\t\\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\\n\\t\\t//   1.1 --------       <--- this is reference indent.\\n\\t\\t//     1.1.1 --------\\n\\t\\t//     1.1.2 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//\\n\\t\\t// Becomes:\\n\\t\\t//\\n\\t\\t// Lorem ipsum.\\n\\t\\t// 1.1 --------\\n\\t\\t//   1.1.1 --------\\n\\t\\t//   1.1.2 --------\\n\\t\\t// 1.2 --------\\n\\t\\tinsertPosition = viewRemoveStartPosition;\\n\\t} else if ( prevIndent == nextIndent ) {\\n\\t\\t// If element has been found and has same indent as reference indent it means that nested items should\\n\\t\\t// become siblings of found element:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1 --------\\n\\t\\t//   1.2 --------       <--- this is `prevModelItem`.\\n\\t\\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\\n\\t\\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\\n\\t\\t//   2.2 --------\\n\\t\\t//\\n\\t\\t// Becomes:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//   2.1 --------\\n\\t\\t//   2.2 --------\\n\\t\\tconst prevViewList = mapper.toViewElement( prevModelItem ).parent;\\n\\t\\tinsertPosition = ViewPosition.createAfter( prevViewList );\\n\\t} else {\\n\\t\\t// If element has been found and has smaller indent as reference indent it means that nested items\\n\\t\\t// should become nested items of found item:\\n\\t\\t//\\n\\t\\t// 1 --------           <--- this is `prevModelItem`.\\n\\t\\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\\n\\t\\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\\n\\t\\t//     1.1.2 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//\\n\\t\\t// Becomes:\\n\\t\\t//\\n\\t\\t// 1 --------\\n\\t\\t//   1.1.1 --------\\n\\t\\t//   1.1.2 --------\\n\\t\\t//   1.2 --------\\n\\t\\t//\\n\\t\\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\\n\\t\\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\\n\\t\\tconst modelPosition = ModelPosition.createAt( prevModelItem, 'end' );\\n\\t\\tinsertPosition = mapper.toViewPosition( modelPosition );\\n\\t}\\n\\n\\tinsertPosition = positionAfterUiElements( insertPosition );\\n\\n\\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\\n\\t// are inserted after the first list (no need to recalculate insertion position for them).\\n\\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\\n\\t\\tif ( child.is( 'ul' ) || child.is( 'ol' ) ) {\\n\\t\\t\\tinsertPosition = viewWriter.move( ViewRange.createOn( child ), insertPosition ).end;\\n\\n\\t\\t\\tmergeViewLists( viewWriter, child, child.nextSibling );\\n\\t\\t\\tmergeViewLists( viewWriter, child.previousSibling, child );\\n\\t\\t}\\n\\t}\\n}\\n\\n// Helper function that for given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\\n// are after given position.\\n// For example:\\n// <container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</contain:p>\\n// For position ^, a position before \\\"bar\\\" will be returned.\\nfunction positionAfterUiElements( viewPosition ) {\\n\\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/listediting\\n */\\n\\nimport ListCommand from './listcommand';\\nimport IndentCommand from './indentcommand';\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\\n\\nimport {\\n\\tcleanList,\\n\\tcleanListItem,\\n\\tmodelViewInsertion,\\n\\tmodelViewChangeType,\\n\\tmodelViewMergeAfter,\\n\\tmodelViewRemove,\\n\\tmodelViewSplitOnInsert,\\n\\tmodelViewChangeIndent,\\n\\tmodelChangePostFixer,\\n\\tmodelIndentPasteFixer,\\n\\tviewModelConverter,\\n\\tmodelToViewPosition,\\n\\tviewToModelPosition\\n} from './converters';\\n\\n/**\\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\\n * It registers the `numberedList`, `bulletedList`, `indentList` and `outdentList` commands.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ListEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ Paragraph ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Schema.\\n\\t\\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\\n\\t\\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\\n\\t\\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\\n\\t\\teditor.model.schema.register( 'listItem', {\\n\\t\\t\\tinheritAllFrom: '$block',\\n\\t\\t\\tallowAttributes: [ 'type', 'indent' ]\\n\\t\\t} );\\n\\n\\t\\t// Converters.\\n\\t\\tconst data = editor.data;\\n\\t\\tconst editing = editor.editing;\\n\\n\\t\\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\\n\\n\\t\\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\\n\\t\\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\\n\\n\\t\\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition );\\n\\t\\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition );\\n\\t\\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition );\\n\\n\\t\\tediting.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\\n\\t\\tediting.downcastDispatcher.on( 'insert:listItem', modelViewInsertion );\\n\\t\\tdata.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\\n\\t\\tdata.downcastDispatcher.on( 'insert:listItem', modelViewInsertion );\\n\\n\\t\\tediting.downcastDispatcher.on( 'attribute:type:listItem', modelViewChangeType );\\n\\t\\tdata.downcastDispatcher.on( 'attribute:type:listItem', modelViewChangeType );\\n\\t\\tediting.downcastDispatcher.on( 'attribute:indent:listItem', modelViewChangeIndent );\\n\\t\\tdata.downcastDispatcher.on( 'attribute:indent:listItem', modelViewChangeIndent );\\n\\n\\t\\tediting.downcastDispatcher.on( 'remove:listItem', modelViewRemove );\\n\\t\\tediting.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\\n\\t\\tdata.downcastDispatcher.on( 'remove:listItem', modelViewRemove );\\n\\t\\tdata.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\\n\\n\\t\\tdata.upcastDispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\\n\\t\\tdata.upcastDispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\\n\\t\\tdata.upcastDispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\\n\\t\\tdata.upcastDispatcher.on( 'element:li', viewModelConverter );\\n\\n\\t\\t// Fix indentation of pasted items.\\n\\t\\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\\n\\n\\t\\t// Register commands for numbered and bulleted list.\\n\\t\\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\\n\\t\\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\\n\\n\\t\\t// Register commands for indenting.\\n\\t\\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\\n\\t\\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\\n\\n\\t\\tconst viewDocument = this.editor.editing.view.document;\\n\\n\\t\\t// Overwrite default Enter key behavior.\\n\\t\\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\\n\\t\\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\\n\\t\\t\\tconst doc = this.editor.model.document;\\n\\t\\t\\tconst positionParent = doc.selection.getLastPosition().parent;\\n\\n\\t\\t\\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\\n\\t\\t\\t\\tthis.editor.execute( 'outdentList' );\\n\\n\\t\\t\\t\\tdata.preventDefault();\\n\\t\\t\\t\\tevt.stop();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\n\\t\\t// Overwrite default Backspace key behavior.\\n\\t\\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\\n\\t\\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\\n\\t\\t\\t// Check conditions from those that require less computations like those immediately available.\\n\\t\\t\\tif ( data.direction !== 'backward' ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst selection = this.editor.model.document.selection;\\n\\n\\t\\t\\tif ( !selection.isCollapsed ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst firstPosition = selection.getFirstPosition();\\n\\n\\t\\t\\tif ( !firstPosition.isAtStart ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst positionParent = firstPosition.parent;\\n\\n\\t\\t\\tif ( positionParent.name !== 'listItem' ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\\n\\n\\t\\t\\tif ( previousIsAListItem ) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.editor.execute( 'outdentList' );\\n\\n\\t\\t\\tdata.preventDefault();\\n\\t\\t\\tevt.stop();\\n\\t\\t}, { priority: 'high' } );\\n\\n\\t\\tconst getCommandExecuter = commandName => {\\n\\t\\t\\treturn ( data, cancel ) => {\\n\\t\\t\\t\\tconst command = this.editor.commands.get( commandName );\\n\\n\\t\\t\\t\\tif ( command.isEnabled ) {\\n\\t\\t\\t\\t\\tthis.editor.execute( commandName );\\n\\t\\t\\t\\t\\tcancel();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t};\\n\\n\\t\\tthis.editor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\\n\\t\\tthis.editor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\\n\\t}\\n}\\n\\nfunction getViewListItemLength( element ) {\\n\\tlet length = 1;\\n\\n\\tfor ( const child of element.getChildren() ) {\\n\\t\\tif ( child.name == 'ul' || child.name == 'ol' ) {\\n\\t\\t\\tfor ( const item of child.getChildren() ) {\\n\\t\\t\\t\\tlength += getViewListItemLength( item );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn length;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/listui\\n */\\n\\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\\n\\n/**\\n * The list UI feature. It introduces the `numberedList` and `bulletedList` buttons that\\n * allow to convert paragraphs to and from list items and indent or outdent them.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ListUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\t// Create two buttons and link them with numberedList and bulletedList commands.\\n\\t\\tconst t = this.editor.t;\\n\\t\\tthis._addButton( 'numberedList', t( 'Numbered List' ), numberedListIcon );\\n\\t\\tthis._addButton( 'bulletedList', t( 'Bulleted List' ), bulletedListIcon );\\n\\t}\\n\\n\\t/**\\n\\t * Helper method for initializing a button and linking it with an appropriate command.\\n\\t *\\n\\t * @private\\n\\t * @param {String} commandName The name of the command.\\n\\t * @param {Object} label The button label.\\n\\t * @param {String} icon The source of the icon.\\n\\t */\\n\\t_addButton( commandName, label, icon ) {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\teditor.ui.componentFactory.add( commandName, locale => {\\n\\t\\t\\tconst command = editor.commands.get( commandName );\\n\\n\\t\\t\\tconst buttonView = new ButtonView( locale );\\n\\n\\t\\t\\tbuttonView.set( {\\n\\t\\t\\t\\tlabel,\\n\\t\\t\\t\\ticon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\t// Bind button model to command.\\n\\t\\t\\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\\n\\n\\t\\t\\t// Execute command.\\n\\t\\t\\tthis.listenTo( buttonView, 'execute', () => editor.execute( commandName ) );\\n\\n\\t\\t\\treturn buttonView;\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontcommand\\n */\\n\\nimport Command from '@ckeditor/ckeditor5-core/src/command';\\n\\n/**\\n * The base font command.\\n *\\n * @extends module:core/command~Command\\n */\\nexport default class FontCommand extends Command {\\n\\t/**\\n\\t * Creates an instance of the command.\\n\\t *\\n\\t * @param {module:core/editor/editor~Editor} editor Editor instance.\\n\\t * @param {String} attributeKey Name of an model attribute on which this command operates.\\n\\t */\\n\\tconstructor( editor, attributeKey ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t/**\\n\\t\\t * When set, it reflects the {@link #attributeKey} value of the selection.\\n\\t\\t *\\n\\t\\t * @observable\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:font/fontcommand~FontCommand#value\\n\\t\\t */\\n\\n\\t\\t/**\\n\\t\\t * A model attribute on which this command operates.\\n\\t\\t *\\n\\t\\t * @readonly\\n\\t\\t * @member {Boolean} module:font/fontcommand~FontCommand#attributeKey\\n\\t\\t */\\n\\t\\tthis.attributeKey = attributeKey;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\trefresh() {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst doc = model.document;\\n\\n\\t\\tthis.value = doc.selection.getAttribute( this.attributeKey );\\n\\t\\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\\n\\t}\\n\\n\\t/**\\n\\t * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\\n\\t * If no `value` is passed, it removes the attribute from the selection.\\n\\t *\\n\\t * @protected\\n\\t * @param {Object} [options] Options for the executed command.\\n\\t * @param {String} [options.value] a value to apply.\\n\\t * @fires execute\\n\\t */\\n\\texecute( options = {} ) {\\n\\t\\tconst model = this.editor.model;\\n\\t\\tconst document = model.document;\\n\\t\\tconst selection = document.selection;\\n\\n\\t\\tconst value = options.value;\\n\\n\\t\\tmodel.change( writer => {\\n\\t\\t\\tif ( selection.isCollapsed ) {\\n\\t\\t\\t\\tif ( value ) {\\n\\t\\t\\t\\t\\twriter.setSelectionAttribute( this.attributeKey, value );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twriter.removeSelectionAttribute( this.attributeKey );\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\\n\\n\\t\\t\\t\\tfor ( const range of ranges ) {\\n\\t\\t\\t\\t\\tif ( value ) {\\n\\t\\t\\t\\t\\t\\twriter.setAttribute( this.attributeKey, value, range );\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\twriter.removeAttribute( this.attributeKey, range );\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontfamily/fontfamilycommand\\n */\\n\\nimport FontCommand from '../fontcommand';\\n\\n/**\\n * The font family command. It is used by the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing}\\n * to apply the font family.\\n *\\n *\\t\\teditor.execute( 'fontFamily', { value: 'Arial' } );\\n *\\n * **Note**: Executing the command without the value removes the attribute from the model.\\n *\\n * @extends module:font/fontcommand~FontCommand\\n */\\nexport default class FontFamilyCommand extends FontCommand {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor, 'fontFamily' );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontfamily/utils\\n */\\n\\n/**\\n * Normalizes the {@link module:font/fontfamily~FontFamilyConfig#options config options}\\n * to the {@link module:font/fontfamily~FontFamilyOption} format.\\n *\\n * @param {Array.<String|Object>} configuredOptions An array of options taken from configuration.\\n * @returns {Array.<module:font/fontfamily~FontFamilyOption>}\\n */\\nexport function normalizeOptions( configuredOptions ) {\\n\\t// Convert options to objects.\\n\\treturn configuredOptions\\n\\t\\t.map( getOptionDefinition )\\n\\t\\t// Filter out undefined values that `getOptionDefinition` might return.\\n\\t\\t.filter( option => !!option );\\n}\\n\\n// Returns an option definition either created from string shortcut.\\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\\n//\\n// @param {String|Object} option\\n// @returns {undefined|module:font/fontfamily~FontFamilyOption}\\nfunction getOptionDefinition( option ) {\\n\\t// Treat any object as full item definition provided by user in configuration.\\n\\tif ( typeof option === 'object' ) {\\n\\t\\treturn option;\\n\\t}\\n\\n\\t// Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\\n\\tif ( option === 'default' ) {\\n\\t\\treturn {\\n\\t\\t\\ttitle: 'Default',\\n\\t\\t\\tmodel: undefined\\n\\t\\t};\\n\\t}\\n\\n\\t// Ignore values that we cannot parse to a definition.\\n\\tif ( typeof option !== 'string' ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Return font family definition from font string.\\n\\treturn generateFontPreset( option );\\n}\\n\\n// Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\\n// A font definition is passed as coma delimited set of font family names. Font names might be quoted.\\n//\\n// @param {String} A font definition form configuration.\\nfunction generateFontPreset( fontDefinition ) {\\n\\t// Remove quotes from font names. They will be normalized later.\\n\\tconst fontNames = fontDefinition.replace( /\\\"|'/g, '' ).split( ',' );\\n\\n\\t// The first matched font name will be used as dropdown list item title and as model value.\\n\\tconst firstFontName = fontNames[ 0 ];\\n\\n\\t// CSS-compatible font names.\\n\\tconst cssFontNames = fontNames.map( normalizeFontNameForCSS ).join( ', ' );\\n\\n\\treturn {\\n\\t\\ttitle: firstFontName,\\n\\t\\tmodel: firstFontName,\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\t'font-family': cssFontNames\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\\n// Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\\n//\\n// @param {String} fontName\\n// @returns {String}\\nfunction normalizeFontNameForCSS( fontName ) {\\n\\tfontName = fontName.trim();\\n\\n\\t// Compound font names should be quoted.\\n\\tif ( fontName.indexOf( ' ' ) > 0 ) {\\n\\t\\tfontName = `'${ fontName }'`;\\n\\t}\\n\\n\\treturn fontName;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/utils\\n */\\n\\n/**\\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\\n *\\n * @param {String} modelAttributeKey Key\\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\\n */\\nexport function buildDefinition( modelAttributeKey, options ) {\\n\\tconst definition = {\\n\\t\\tmodel: {\\n\\t\\t\\tkey: modelAttributeKey,\\n\\t\\t\\tvalues: []\\n\\t\\t},\\n\\t\\tview: {},\\n\\t\\tupcastAlso: {}\\n\\t};\\n\\n\\tfor ( const option of options ) {\\n\\t\\tdefinition.model.values.push( option.model );\\n\\t\\tdefinition.view[ option.model ] = option.view;\\n\\n\\t\\tif ( option.upcastAlso ) {\\n\\t\\t\\tdefinition.upcastAlso[ option.model ] = option.upcastAlso;\\n\\t\\t}\\n\\t}\\n\\n\\treturn definition;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontfamily/fontfamilyediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport FontFamilyCommand from './fontfamilycommand';\\nimport { normalizeOptions } from './utils';\\nimport { buildDefinition } from '../utils';\\n\\nconst FONT_FAMILY = 'fontFamily';\\n\\n/**\\n * The font family editing feature.\\n *\\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\\n * in the {@link module:engine/view/view view} as an inline span (`<span style=\\\"font-family: Arial\\\">`),\\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontFamilyEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t// Define default configuration using font families shortcuts.\\n\\t\\teditor.config.define( FONT_FAMILY, {\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t'default',\\n\\t\\t\\t\\t'Arial, Helvetica, sans-serif',\\n\\t\\t\\t\\t'Courier New, Courier, monospace',\\n\\t\\t\\t\\t'Georgia, serif',\\n\\t\\t\\t\\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\\n\\t\\t\\t\\t'Tahoma, Geneva, sans-serif',\\n\\t\\t\\t\\t'Times New Roman, Times, serif',\\n\\t\\t\\t\\t'Trebuchet MS, Helvetica, sans-serif',\\n\\t\\t\\t\\t'Verdana, Geneva, sans-serif'\\n\\t\\t\\t]\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Allow fontFamily attribute on text nodes.\\n\\t\\teditor.model.schema.extend( '$text', { allowAttributes: FONT_FAMILY } );\\n\\n\\t\\t// Get configured font family options without \\\"default\\\" option.\\n\\t\\tconst options = normalizeOptions( editor.config.get( 'fontFamily.options' ) ).filter( item => item.model );\\n\\t\\tconst definition = buildDefinition( FONT_FAMILY, options );\\n\\n\\t\\t// Set-up the two-way conversion.\\n\\t\\teditor.conversion.attributeToElement( definition );\\n\\n\\t\\teditor.commands.add( FONT_FAMILY, new FontFamilyCommand( editor ) );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontfamily/fontfamilyui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\n\\nimport { createDropdown, addListToDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\\nimport { normalizeOptions } from './utils';\\nimport fontFamilyIcon from '../../theme/icons/font-family.svg';\\n\\n/**\\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontFamilyUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\tconst options = this._getLocalizedOptions();\\n\\n\\t\\tconst command = editor.commands.get( 'fontFamily' );\\n\\n\\t\\t// Register UI component.\\n\\t\\teditor.ui.componentFactory.add( 'fontFamily', locale => {\\n\\t\\t\\tconst dropdownView = createDropdown( locale );\\n\\t\\t\\taddListToDropdown( dropdownView, _prepareListOptions( options, command ) );\\n\\n\\t\\t\\tdropdownView.buttonView.set( {\\n\\t\\t\\t\\tlabel: t( 'Font Family' ),\\n\\t\\t\\t\\ticon: fontFamilyIcon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.extendTemplate( {\\n\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\tclass: 'ck-font-family-dropdown'\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.bind( 'isEnabled' ).to( command );\\n\\n\\t\\t\\t// Execute command when an item from the dropdown is selected.\\n\\t\\t\\tthis.listenTo( dropdownView, 'execute', evt => {\\n\\t\\t\\t\\teditor.execute( evt.source.commandName, { value: evt.source.commandParam } );\\n\\t\\t\\t\\teditor.editing.view.focus();\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn dropdownView;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Returns options as defined in `config.fontFamily.options` but processed to consider\\n\\t * editor localization, i.e. to display {@link module:font/fontfamily~FontFamilyOption}\\n\\t * in the correct language.\\n\\t *\\n\\t * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\\n\\t * when the user config is defined because the editor does not exist yet.\\n\\t *\\n\\t * @private\\n\\t * @returns {Array.<module:font/fontfamily~FontFamilyOption>}.\\n\\t */\\n\\t_getLocalizedOptions() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\tconst options = normalizeOptions( editor.config.get( 'fontFamily.options' ) );\\n\\n\\t\\treturn options.map( option => {\\n\\t\\t\\t// The only title to localize is \\\"Default\\\" others are font names.\\n\\t\\t\\tif ( option.title === 'Default' ) {\\n\\t\\t\\t\\toption.title = t( 'Default' );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn option;\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Prepares FontFamily dropdown items.\\n// @private\\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\\nfunction _prepareListOptions( options, command ) {\\n\\tconst dropdownItems = new Collection();\\n\\n\\t// Create dropdown items.\\n\\tfor ( const option of options ) {\\n\\t\\tconst itemModel = new Model( {\\n\\t\\t\\tcommandName: 'fontFamily',\\n\\t\\t\\tcommandParam: option.model,\\n\\t\\t\\tlabel: option.title\\n\\t\\t} );\\n\\n\\t\\titemModel.bind( 'isActive' ).to( command, 'value', value => value === option.model );\\n\\n\\t\\t// Try to set a dropdown list item style.\\n\\t\\tif ( option.view && option.view.style ) {\\n\\t\\t\\titemModel.set( 'style', `font-family: ${ option.view.style[ 'font-family' ] }` );\\n\\t\\t}\\n\\n\\t\\tdropdownItems.add( itemModel );\\n\\t}\\n\\treturn dropdownItems;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontfamily\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FontFamilyEditing from './fontfamily/fontfamilyediting';\\nimport FontFamilyUI from './fontfamily/fontfamilyui';\\n\\n/**\\n * The font family plugin.\\n *\\n * It enables {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} and\\n * {@link module:font/fontfamily/fontfamilyui~FontFamilyUI} features in the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontFamily extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FontFamilyEditing, FontFamilyUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'FontFamily';\\n\\t}\\n}\\n\\n/**\\n * Font family option descriptor.\\n *\\n * @typedef {Object} module:font/fontfamily~FontFamilyOption\\n *\\n * @property {String} title The user-readable title of the option.\\n * @property {String} model Attribute's unique value in the model.\\n * @property {module:engine/view/elementdefinition~ElementDefinition} view View element configuration.\\n * @property {Array.<module:engine/view/elementdefinition~ElementDefinition>} [upcastAlso] An array with all matched elements that\\n * view to model conversion should also accept.\\n */\\n\\n/**\\n * The configuration of the font family feature.\\n * Introduced by the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} feature.\\n *\\n * Read more in {@link module:font/fontfamily~FontFamilyConfig}.\\n *\\n * @member {module:font/fontfamily~FontFamilyConfig} module:core/editor/editorconfig~EditorConfig#fontFamily\\n */\\n\\n/**\\n * The configuration of the font family feature.\\n * The option is used by the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} feature.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( {\\n * \\t\\t\\t\\tfontFamily: ... // Font family feature config.\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface module:font/fontfamily~FontFamilyConfig\\n */\\n\\n/**\\n * Available font family options defined as an array of strings. The default value is:\\n *\\n *\\t\\tconst fontFamilyConfig = {\\n *\\t\\t\\toptions: [\\n *\\t\\t\\t\\t'default',\\n *\\t\\t\\t\\t'Arial, Helvetica, sans-serif',\\n *\\t\\t\\t\\t'Courier New, Courier, monospace',\\n *\\t\\t\\t\\t'Georgia, serif',\\n *\\t\\t\\t\\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\\n *\\t\\t\\t\\t'Tahoma, Geneva, sans-serif',\\n *\\t\\t\\t\\t'Times New Roman, Times, serif',\\n *\\t\\t\\t\\t'Trebuchet MS, Helvetica, sans-serif',\\n *\\t\\t\\t\\t'Verdana, Geneva, sans-serif'\\n *\\t\\t\\t]\\n *\\t\\t};\\n *\\n * which configures 8 font family options. Each option consist of one or more comma–separated font-family names. The first font name is\\n * used as a dropdown item description in the UI.\\n *\\n * **Note:** The family names that consist of spaces should not have quotes (as opposed to the CSS standard). The necessary quotes\\n * will be added automatically in the view. For example, the `\\\"Lucida Sans Unicode\\\"` will render as follows:\\n *\\n * \\t\\t<span style=\\\"font-family:'Lucida Sans Unicode', 'Lucida Grande', sans-serif\\\">...</span>\\n *\\n * The \\\"default\\\" option removes the `fontFamily` attribute from the selection. In such case, the text will\\n * be rendered in the view using the default font family defined in the styles of the web page.\\n *\\n * Font family can be applied using the command API. To do that, use the `fontFamily` command and pass the desired family as a `value`.\\n * For example, the following code will apply the `fontFamily` attribute with the `'Arial'` `value` to the current selection:\\n *\\n *\\t\\teditor.execute( 'fontFamily', { value: 'Arial' } );\\n *\\n * Executing `fontFamily` command without any value will remove `fontFamily` attribute from the current selection.\\n *\\n * @member {Array.<String|module:font/fontfamily~FontFamilyOption>} module:font/fontfamily~FontFamilyConfig#options\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontsize/fontsizecommand\\n */\\n\\nimport FontCommand from '../fontcommand';\\n\\n/**\\n * The font size command. It is used by the {@link module:font/fontsize/fontsizeediting~FontSizeEditing}\\n * to apply the font size.\\n *\\n *\\t\\teditor.execute( 'fontSize', { value: 'small' } );\\n *\\n * **Note**: Executing the command without the value removes the attribute from the model.\\n *\\n * @extends module:font/fontcommand~FontCommand\\n */\\nexport default class FontSizeCommand extends FontCommand {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor, 'fontSize' );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontsize/utils\\n */\\n\\n/**\\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options config options}\\n * to the {@link module:font/fontsize~FontSizeOption} format.\\n *\\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from configuration.\\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\\n */\\nexport function normalizeOptions( configuredOptions ) {\\n\\t// Convert options to objects.\\n\\treturn configuredOptions\\n\\t\\t.map( getOptionDefinition )\\n\\t\\t// Filter out undefined values that `getOptionDefinition` might return.\\n\\t\\t.filter( option => !!option );\\n}\\n\\n// Default named presets map.\\nconst namedPresets = {\\n\\ttiny: {\\n\\t\\ttitle: 'Tiny',\\n\\t\\tmodel: 'tiny',\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tclass: 'text-tiny'\\n\\t\\t}\\n\\t},\\n\\tsmall: {\\n\\t\\ttitle: 'Small',\\n\\t\\tmodel: 'small',\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tclass: 'text-small'\\n\\t\\t}\\n\\t},\\n\\tbig: {\\n\\t\\ttitle: 'Big',\\n\\t\\tmodel: 'big',\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tclass: 'text-big'\\n\\t\\t}\\n\\t},\\n\\thuge: {\\n\\t\\ttitle: 'Huge',\\n\\t\\tmodel: 'huge',\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tclass: 'text-huge'\\n\\t\\t}\\n\\t}\\n};\\n\\n// Returns an option definition either from preset or creates one from number shortcut.\\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\\n//\\n// @param {String|Number|Object} item\\n// @returns {undefined|module:font/fontsize~FontSizeOption}\\nfunction getOptionDefinition( option ) {\\n\\t// Treat any object as full item definition provided by user in configuration.\\n\\tif ( typeof option === 'object' ) {\\n\\t\\treturn option;\\n\\t}\\n\\n\\t// Item is a named preset.\\n\\tif ( namedPresets[ option ] ) {\\n\\t\\treturn namedPresets[ option ];\\n\\t}\\n\\n\\t// 'Default' font size. It will be used to remove the fontSize attribute.\\n\\tif ( option === 'default' ) {\\n\\t\\treturn {\\n\\t\\t\\tmodel: undefined,\\n\\t\\t\\ttitle: 'Default'\\n\\t\\t};\\n\\t}\\n\\n\\t// At this stage we probably have numerical value to generate a preset so parse it's value.\\n\\tconst sizePreset = parseFloat( option );\\n\\n\\t// Discard any faulty values.\\n\\tif ( isNaN( sizePreset ) ) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// Return font size definition from size value.\\n\\treturn generatePixelPreset( sizePreset );\\n}\\n\\n// Creates a predefined preset for pixel size.\\n//\\n// @param {Number} size Font size in pixels.\\n// @returns {module:font/fontsize~FontSizeOption}\\nfunction generatePixelPreset( size ) {\\n\\tconst sizeName = String( size );\\n\\n\\treturn {\\n\\t\\ttitle: sizeName,\\n\\t\\tmodel: size,\\n\\t\\tview: {\\n\\t\\t\\tname: 'span',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\t'font-size': `${ size }px`\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontsize/fontsizeediting\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport FontSizeCommand from './fontsizecommand';\\nimport { normalizeOptions } from './utils';\\nimport { buildDefinition } from '../utils';\\n\\nconst FONT_SIZE = 'fontSize';\\n\\n/**\\n * The font size editing feature.\\n *\\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\\n * as a `<span>` element with either:\\n * * a style attribute (`<span style=\\\"font-size:12px\\\">...</span>`),\\n * * or a class attribute (`<span class=\\\"text-small\\\">...</span>`)\\n *\\n * depending on the {@link module:font/fontsize~FontSizeConfig configuration}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontSizeEditing extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tconstructor( editor ) {\\n\\t\\tsuper( editor );\\n\\n\\t\\t// Define default configuration using named presets.\\n\\t\\teditor.config.define( FONT_SIZE, {\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t'tiny',\\n\\t\\t\\t\\t'small',\\n\\t\\t\\t\\t'default',\\n\\t\\t\\t\\t'big',\\n\\t\\t\\t\\t'huge'\\n\\t\\t\\t]\\n\\t\\t} );\\n\\n\\t\\t// Define view to model conversion.\\n\\t\\tconst options = normalizeOptions( this.editor.config.get( 'fontSize.options' ) ).filter( item => item.model );\\n\\t\\tconst definition = buildDefinition( FONT_SIZE, options );\\n\\n\\t\\t// Set-up the two-way conversion.\\n\\t\\teditor.conversion.attributeToElement( definition );\\n\\n\\t\\t// Add FontSize command.\\n\\t\\teditor.commands.add( FONT_SIZE, new FontSizeCommand( editor ) );\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\n\\t\\t// Allow fontSize attribute on text nodes.\\n\\t\\teditor.model.schema.extend( '$text', { allowAttributes: FONT_SIZE } );\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontsize/fontsizeui\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\\n\\nimport { createDropdown, addListToDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\\nimport { normalizeOptions } from '../fontsize/utils';\\n\\nimport fontSizeIcon from '../../theme/icons/font-size.svg';\\nimport '../../theme/fontsize.css';\\n\\n/**\\n * The font family UI plugin. It introduces the `'fontSize'` dropdown.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontSizeUI extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tinit() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\tconst options = this._getLocalizedOptions();\\n\\n\\t\\tconst command = editor.commands.get( 'fontSize' );\\n\\n\\t\\t// Register UI component.\\n\\t\\teditor.ui.componentFactory.add( 'fontSize', locale => {\\n\\t\\t\\tconst dropdownView = createDropdown( locale );\\n\\t\\t\\taddListToDropdown( dropdownView, _prepareListOptions( options, command ) );\\n\\n\\t\\t\\t// Create dropdown model.\\n\\t\\t\\tdropdownView.buttonView.set( {\\n\\t\\t\\t\\tlabel: t( 'Font Size' ),\\n\\t\\t\\t\\ticon: fontSizeIcon,\\n\\t\\t\\t\\ttooltip: true\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.extendTemplate( {\\n\\t\\t\\t\\tattributes: {\\n\\t\\t\\t\\t\\tclass: [\\n\\t\\t\\t\\t\\t\\t'ck-font-size-dropdown'\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\n\\t\\t\\tdropdownView.bind( 'isEnabled' ).to( command );\\n\\n\\t\\t\\t// Execute command when an item from the dropdown is selected.\\n\\t\\t\\tthis.listenTo( dropdownView, 'execute', evt => {\\n\\t\\t\\t\\teditor.execute( evt.source.commandName, { value: evt.source.commandParam } );\\n\\t\\t\\t\\teditor.editing.view.focus();\\n\\t\\t\\t} );\\n\\n\\t\\t\\treturn dropdownView;\\n\\t\\t} );\\n\\t}\\n\\n\\t/**\\n\\t * Returns options as defined in `config.fontSize.options` but processed to consider\\n\\t * editor localization, i.e. to display {@link module:font/fontsize~FontSizeOption}\\n\\t * in the correct language.\\n\\t *\\n\\t * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\\n\\t * when the user config is defined because the editor does not exist yet.\\n\\t *\\n\\t * @private\\n\\t * @returns {Array.<module:font/fontsize~FontSizeOption>}.\\n\\t */\\n\\t_getLocalizedOptions() {\\n\\t\\tconst editor = this.editor;\\n\\t\\tconst t = editor.t;\\n\\n\\t\\tconst localizedTitles = {\\n\\t\\t\\tDefault: t( 'Default' ),\\n\\t\\t\\tTiny: t( 'Tiny' ),\\n\\t\\t\\tSmall: t( 'Small' ),\\n\\t\\t\\tBig: t( 'Big' ),\\n\\t\\t\\tHuge: t( 'Huge' )\\n\\t\\t};\\n\\n\\t\\tconst options = normalizeOptions( editor.config.get( 'fontSize.options' ) );\\n\\n\\t\\treturn options.map( option => {\\n\\t\\t\\tconst title = localizedTitles[ option.title ];\\n\\n\\t\\t\\tif ( title && title != option.title ) {\\n\\t\\t\\t\\t// Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\\n\\t\\t\\t\\toption = Object.assign( {}, option, { title } );\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn option;\\n\\t\\t} );\\n\\t}\\n}\\n\\n// Prepares FontSize dropdown items.\\n// @private\\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\\nfunction _prepareListOptions( options, command ) {\\n\\tconst dropdownItems = new Collection();\\n\\n\\tfor ( const option of options ) {\\n\\t\\tconst itemModel = new Model( {\\n\\t\\t\\tcommandName: 'fontSize',\\n\\t\\t\\tcommandParam: option.model,\\n\\t\\t\\tlabel: option.title,\\n\\t\\t\\tclass: 'ck-fontsize-option'\\n\\t\\t} );\\n\\n\\t\\tif ( option.view && option.view.style ) {\\n\\t\\t\\titemModel.set( 'style', `font-size:${ option.view.style[ 'font-size' ] }` );\\n\\t\\t}\\n\\n\\t\\tif ( option.view && option.view.class ) {\\n\\t\\t\\titemModel.set( 'class', `${ itemModel.class } ${ option.view.class }` );\\n\\t\\t}\\n\\n\\t\\titemModel.bind( 'isActive' ).to( command, 'value', value => value === option.model );\\n\\n\\t\\t// Add the option to the collection.\\n\\t\\tdropdownItems.add( itemModel );\\n\\t}\\n\\n\\treturn dropdownItems;\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/fontsize\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport FontSizeEditing from './fontsize/fontsizeediting';\\nimport FontSizeUI from './fontsize/fontsizeui';\\n\\n/**\\n * The font size plugin.\\n *\\n * It enables {@link module:font/fontsize/fontsizeediting~FontSizeEditing} and\\n * {@link module:font/fontsize/fontsizeui~FontSizeUI} features in the editor.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class FontSize extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FontSizeEditing, FontSizeUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'FontSize';\\n\\t}\\n}\\n\\n/**\\n * Font size option descriptor.\\n *\\n * @typedef {Object} module:font/fontsize~FontSizeOption\\n *\\n * @property {String} title The user-readable title of the option.\\n * @property {String} model Attribute's unique value in the model.\\n * @property {module:engine/view/elementdefinition~ElementDefinition} view View element configuration.\\n * @property {Array.<module:engine/view/elementdefinition~ElementDefinition>} [upcastAlso] An array with all matched elements that\\n * view to model conversion should also accept.\\n */\\n\\n/**\\n * The configuration of the font size feature.\\n * Introduced by the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} feature.\\n *\\n * Read more in {@link module:font/fontsize~FontSizeConfig}.\\n *\\n * @member {module:font/fontsize~FontSizeConfig} module:core/editor/editorconfig~EditorConfig#fontSize\\n */\\n\\n/**\\n * The configuration of the font size feature.\\n * The option is used by the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} feature.\\n *\\n * \\t\\tClassicEditor\\n * \\t\\t\\t.create( {\\n * \\t\\t\\t\\tfontSize: ... // Font size feature config.\\n *\\t\\t\\t} )\\n * \\t\\t\\t.then( ... )\\n * \\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface module:font/fontsize~FontSizeConfig\\n */\\n\\n/**\\n * Available font size options. Expressed as predefined presets, numerical \\\"pixel\\\" values\\n * or the {@link module:font/fontsize~FontSizeOption}.\\n *\\n * The default value is:\\n *\\n *\\t\\tconst fontSizeConfig = {\\n *\\t\\t\\toptions: [\\n *\\t\\t\\t\\t'tiny',\\n * \\t\\t\\t\\t'small',\\n * \\t\\t\\t\\t'default',\\n * \\t\\t\\t\\t'big',\\n * \\t\\t\\t\\t'huge'\\n *\\t\\t\\t]\\n *\\t\\t};\\n *\\n * It defines 4 sizes: **tiny**, **small**, **big**, and **huge**. These values will be rendered as `span` elements in view.\\n * The **default** defines a text without the `fontSize` attribute.\\n *\\n * Each `span` has the `class` attribute set to the corresponding size name. For instance, this is what the **small** size looks\\n * like in the view:\\n *\\n * \\t\\t<span class=\\\"text-small\\\">...</span>\\n *\\n * As an alternative, the font size might be defined using the numerical values (either as a `Number` or as a `String`):\\n *\\n * \\t\\tconst fontSizeConfig = {\\n * \\t\\t\\toptions: [ 9, 10, 11, 12, 13, 14, 15 ]\\n * \\t\\t};\\n *\\n * Font size can be applied using the command API. To do that, use the `fontSize` command and pass the desired font size as a `value`.\\n * For example, the below code will apply the `fontSize` attribute with the **tiny** value to the current selection:\\n *\\n *\\t\\teditor.execute( 'fontSize', { value: 'tiny' } );\\n *\\n * Executing `fontSize` command without value will remove `fontSize` attribute from the current selection.\\n *\\n * @member {Array.<String|Number|module:font/fontsize~FontSizeOption>} module:font/fontsize~FontSizeConfig#options\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\nimport ClassicEditorBase from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\\nimport EssentialsPlugin from '@ckeditor/ckeditor5-essentials/src/essentials';\\nimport UploadadapterPlugin from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\\nimport AutoformatPlugin from '@ckeditor/ckeditor5-autoformat/src/autoformat';\\nimport BoldPlugin from '@ckeditor/ckeditor5-basic-styles/src/bold';\\nimport ItalicPlugin from '@ckeditor/ckeditor5-basic-styles/src/italic';\\nimport BlockquotePlugin from '@ckeditor/ckeditor5-block-quote/src/blockquote';\\nimport EasyimagePlugin from '@ckeditor/ckeditor5-easy-image/src/easyimage';\\nimport HeadingPlugin from '@ckeditor/ckeditor5-heading/src/heading';\\nimport ImagePlugin from '@ckeditor/ckeditor5-image/src/image';\\nimport ImagecaptionPlugin from '@ckeditor/ckeditor5-image/src/imagecaption';\\nimport ImagestylePlugin from '@ckeditor/ckeditor5-image/src/imagestyle';\\nimport ImagetoolbarPlugin from '@ckeditor/ckeditor5-image/src/imagetoolbar';\\nimport ImageuploadPlugin from '@ckeditor/ckeditor5-image/src/imageupload';\\nimport LinkPlugin from '@ckeditor/ckeditor5-link/src/link';\\nimport ListPlugin from '@ckeditor/ckeditor5-list/src/list';\\nimport ParagraphPlugin from '@ckeditor/ckeditor5-paragraph/src/paragraph';\\nimport Imageupload1Plugin from '@ckeditor/ckeditor5-image/src/imageupload';\\n\\nimport Font from '@ckeditor/ckeditor5-font/src/font';\\nexport default class ClassicEditor extends ClassicEditorBase {}\\n\\nClassicEditor.build = {\\n\\tplugins: [\\n\\t\\tEssentialsPlugin,\\n\\t\\tUploadadapterPlugin,\\n\\t\\tAutoformatPlugin,\\n\\t\\tBoldPlugin,\\n\\t\\tItalicPlugin,\\n\\t\\tBlockquotePlugin,\\n\\t\\tEasyimagePlugin,\\n\\t\\tHeadingPlugin,\\n\\t\\tImagePlugin,\\n\\t\\tImagecaptionPlugin,\\n\\t\\tImagestylePlugin,\\n\\t\\tImagetoolbarPlugin,\\n\\t\\tImageuploadPlugin,\\n\\t\\tLinkPlugin,\\n\\t\\tListPlugin,\\n\\t\\tParagraphPlugin,\\n\\t\\tImageupload1Plugin,\\n\\t\\tFont\\n\\t],\\n\\tconfig: {\\n\\t\\ttoolbar: {\\n\\t\\t\\titems: [\\n\\t\\t\\t'fontSize', 'fontFamily',\\n\\t\\t\\t\\t'heading',\\n\\t\\t\\t\\t'|',\\n\\t\\t\\t\\t'bold',\\n\\t\\t\\t\\t'italic',\\n\\t\\t\\t\\t'link',\\n\\t\\t\\t\\t'bulletedList',\\n\\t\\t\\t\\t'numberedList',\\n\\t\\t\\t\\t'imageUpload',\\n\\t\\t\\t\\t'blockQuote',\\n\\t\\t\\t\\t'undo',\\n\\t\\t\\t\\t'redo'\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\timage: {\\n\\t\\t\\ttoolbar: [\\n\\t\\t\\t\\t'imageStyle:full',\\n\\t\\t\\t\\t'imageStyle:side',\\n\\t\\t\\t\\t'|',\\n\\t\\t\\t\\t'imageTextAlternative'\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\tlanguage: 'en'\\n\\t}\\n};\\n\\n\\n\\n//////////////////\\n// WEBPACK FOOTER\\n// ./src/ckeditor.js\\n// module id = null\\n// module chunks = \",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module essentials/essentials\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\\n\\n/**\\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\\n * to a `<textarea>` element.\\n *\\n * It includes:\\n *\\n * * {@link module:clipboard/clipboard~Clipboard},\\n * * {@link module:enter/enter~Enter},\\n * * {@link module:typing/typing~Typing},\\n * * {@link module:undo/undo~Undo}.\\n *\\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\\n * If your editor is supposed to handle block content, make sure to include it.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Essentials extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ Clipboard, Enter, Typing, Undo ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Essentials';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module autoformat/autoformat\\n */\\n\\nimport BlockAutoformatEditing from './blockautoformatediting';\\nimport InlineAutoformatEditing from './inlineautoformatediting';\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\n/**\\n * Includes a set of predefined autoformatting actions. For a detailed overview, check\\n * the {@glink features/autoformat Autoformatting feature documentation}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Autoformat extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Autoformat';\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tafterInit() {\\n\\t\\tthis._addListAutoformats();\\n\\t\\tthis._addBasicStylesAutoformats();\\n\\t\\tthis._addHeadingAutoformats();\\n\\t\\tthis._addBlockQuoteAutoformats();\\n\\t}\\n\\n\\t/**\\n\\t * Adds autoformatting related to the {@link module:list/list~List}.\\n\\t *\\n\\t * When typed:\\n\\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\\n\\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\\\"1\\\" can be any digit or a list of digits).\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_addListAutoformats() {\\n\\t\\tconst commands = this.editor.commands;\\n\\n\\t\\tif ( commands.get( 'bulletedList' ) ) {\\n\\t\\t\\t// eslint-disable-next-line no-new\\n\\t\\t\\tnew BlockAutoformatEditing( this.editor, /^[*-]\\\\s$/, 'bulletedList' );\\n\\t\\t}\\n\\n\\t\\tif ( commands.get( 'numberedList' ) ) {\\n\\t\\t\\t// eslint-disable-next-line no-new\\n\\t\\t\\tnew BlockAutoformatEditing( this.editor, /^\\\\d+[.|)]\\\\s$/, 'numberedList' );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\\n\\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\\n\\t *\\n\\t * When typed:\\n\\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\\n\\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\\n\\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\\n\\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\\n\\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_addBasicStylesAutoformats() {\\n\\t\\tconst commands = this.editor.commands;\\n\\n\\t\\tif ( commands.get( 'bold' ) ) {\\n\\t\\t\\t/* eslint-disable no-new */\\n\\t\\t\\tnew InlineAutoformatEditing( this.editor, /(\\\\*\\\\*)([^*]+)(\\\\*\\\\*)$/g, 'bold' );\\n\\t\\t\\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, 'bold' );\\n\\t\\t\\t/* eslint-enable no-new */\\n\\t\\t}\\n\\n\\t\\tif ( commands.get( 'italic' ) ) {\\n\\t\\t\\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\\n\\t\\t\\t// text before the pattern (e.g. `(?:^|[^\\\\*])`).\\n\\n\\t\\t\\t/* eslint-disable no-new */\\n\\t\\t\\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\\\*)([^*_]+)(\\\\*)$/g, 'italic' );\\n\\t\\t\\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, 'italic' );\\n\\t\\t\\t/* eslint-enable no-new */\\n\\t\\t}\\n\\n\\t\\tif ( commands.get( 'code' ) ) {\\n\\t\\t\\t/* eslint-disable no-new */\\n\\t\\t\\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, 'code' );\\n\\t\\t\\t/* eslint-enable no-new */\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\\n\\t *\\n\\t * It is using a number at the end of the command name to associate it with the proper trigger:\\n\\t *\\n\\t * * `heading` with value `heading1` will be executed when typing `#`,\\n\\t * * `heading` with value `heading2` will be executed when typing `##`,\\n\\t * * ... up to `heading6` and `######`.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_addHeadingAutoformats() {\\n\\t\\tconst command = this.editor.commands.get( 'heading' );\\n\\n\\t\\tif ( command ) {\\n\\t\\t\\tcommand.modelElements\\n\\t\\t\\t\\t.filter( name => name.match( /^heading[1-6]$/ ) )\\n\\t\\t\\t\\t.forEach( commandValue => {\\n\\t\\t\\t\\t\\tconst level = commandValue[ 7 ];\\n\\t\\t\\t\\t\\tconst pattern = new RegExp( `^(#{${ level }})\\\\\\\\s$` );\\n\\n\\t\\t\\t\\t\\t// eslint-disable-next-line no-new\\n\\t\\t\\t\\t\\tnew BlockAutoformatEditing( this.editor, pattern, () => {\\n\\t\\t\\t\\t\\t\\tthis.editor.execute( 'heading', { value: commandValue } );\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t} );\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\\n\\t *\\n\\t * When typed:\\n\\t * * `> ` &ndash; A paragraph will be changed to a block quote.\\n\\t *\\n\\t * @private\\n\\t */\\n\\t_addBlockQuoteAutoformats() {\\n\\t\\tif ( this.editor.commands.get( 'blockQuote' ) ) {\\n\\t\\t\\t// eslint-disable-next-line no-new\\n\\t\\t\\tnew BlockAutoformatEditing( this.editor, /^>\\\\s$/, 'blockQuote' );\\n\\t\\t}\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/bold\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport BoldEditing from './bold/boldediting';\\nimport BoldUI from './bold/boldui';\\n\\n/**\\n * The bold feature.\\n *\\n * It loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Bold extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ BoldEditing, BoldUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Bold';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module basic-styles/italic\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ItalicEditing from './italic/italicediting';\\nimport ItalicUI from './italic/italicui';\\n\\n/**\\n * The italic feature.\\n *\\n * It loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Italic extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ItalicEditing, ItalicUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Italic';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module block-quote/blockquote\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport BlockQuoteEditing from './blockquoteediting';\\nimport BlockQuoteUI from './blockquoteui';\\n\\n/**\\n * The block quote plugin.\\n *\\n * It loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class BlockQuote extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ BlockQuoteEditing, BlockQuoteUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'BlockQuote';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module easy-image/easyimage\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport CloudServicesUploadAdapter from './cloudservicesuploadadapter';\\nimport Image from '@ckeditor/ckeditor5-image/src/image';\\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\\n\\n/**\\n * The Easy Image feature.\\n *\\n * This plugin enables:\\n *\\n * * {@link module:image/image~Image},\\n * * {@link module:image/imageupload~ImageUpload},\\n * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}.\\n *\\n * After enabling the Easy Image plugin you need to configure the Cloud Services integration through\\n * {@link module:cloudservices/cloudservices~CloudServicesConfig `config.cloudServices`}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class EasyImage extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [\\n\\t\\t\\tCloudServicesUploadAdapter,\\n\\t\\t\\tImage,\\n\\t\\t\\tImageUpload\\n\\t\\t];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'EasyImage';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module heading/heading\\n */\\n\\nimport HeadingEditing from './headingediting';\\nimport HeadingUI from './headingui';\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport '../theme/heading.css';\\n\\n/**\\n * The headings feature.\\n *\\n * It loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\\n *\\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Heading extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ HeadingEditing, HeadingUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Heading';\\n\\t}\\n}\\n\\n/**\\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\\n *\\n * Read more in {@link module:heading/heading~HeadingConfig}.\\n *\\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\\n */\\n\\n/**\\n * The configuration of the heading feature.\\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\\n *\\n *\\t\\tClassicEditor\\n *\\t\\t\\t.create( {\\n * \\t\\t\\t\\theading: ... // Heading feature config.\\n *\\t\\t\\t} )\\n *\\t\\t\\t.then( ... )\\n *\\t\\t\\t.catch( ... );\\n *\\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\\n *\\n * @interface HeadingConfig\\n */\\n\\n/**\\n * The available heading options.\\n *\\n * The default value is:\\n *\\n *\\t\\tconst headingConfig = {\\n *\\t\\t\\toptions: [\\n *\\t\\t\\t\\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\\n *\\t\\t\\t\\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\\n *\\t\\t\\t\\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\\n *\\t\\t\\t\\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\\n *\\t\\t\\t]\\n *\\t\\t};\\n *\\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\\n * if you choose \\\"Heading 1\\\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\\n * which will result in rendering (and outputting to data) the `<h2>` element.\\n *\\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\\n * Usually, the first option in the headings dropdown is the \\\"Paragraph\\\" option, hence it's also defined on the list.\\n * However, you don't need to define its view representation because it's handled by\\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\\n * the {@link module:heading/headingediting~HeadingEditing} feature).\\n *\\n * You can **read more** about configuring heading levels and **see more examples** in\\n * the {@glink features/headings Headings} guide.\\n *\\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\\n * they should use when applying the first level heading.\\n *\\n * The defined headings are also available as values passed to `heading` command under their model names.\\n * For example, the below code will apply `<heading1>` to the current selection:\\n *\\n *\\t\\teditor.execute( 'heading', { value: 'heading1' } );\\n *\\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\\n */\\n\\n/**\\n * Heading option descriptor.\\n *\\n * @typedef {Object} module:heading/heading~HeadingOption\\n * @property {String} model Name of the model element to convert.\\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\\n * @property {String} title The user-readable title of the option.\\n * @property {String} class The class which will be added to the dropdown item representing this option.\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagecaption\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageCaptionEditing from './imagecaption/imagecaptionediting';\\n\\nimport '../theme/imagecaption.css';\\n\\n/**\\n * The image caption plugin.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageCaption extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageCaptionEditing ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageCaption';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module image/imagestyle\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\\nimport ImageStyleUI from './imagestyle/imagestyleui';\\n\\n/**\\n * The image style plugin.\\n *\\n * It loads the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing}\\n * and {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugins.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class ImageStyle extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ImageStyleEditing, ImageStyleUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'ImageStyle';\\n\\t}\\n}\\n\\n/**\\n * Available image styles.\\n *\\n * The default value is:\\n *\\n *\\t\\tconst imageConfig = {\\n *\\t\\t\\tstyles: [ 'full', 'side' ]\\n *\\t\\t};\\n *\\n * which configures two default styles:\\n *\\n *  * the \\\"full\\\" style which doesn't apply any class, e.g. for images styled to span 100% width of the content,\\n *  * the \\\"side\\\" style with the `.image-style-side` CSS class.\\n *\\n * See {@link module:image/imagestyle/utils~defaultStyles} to learn more about default\\n * styles provided by the image feature.\\n *\\n * The {@link module:image/imagestyle/utils~defaultStyles default styles} can be customized,\\n * e.g. to change the icon, title or CSS class of the style. The feature also provides several\\n * {@link module:image/imagestyle/utils~defaultIcons default icons} to chose from.\\n *\\n *\\t\\timport customIcon from 'custom-icon.svg';\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tconst imageConfig = {\\n *\\t\\t\\tstyles: [\\n *\\t\\t\\t\\t// This will only customize the icon of the \\\"full\\\" style.\\n *\\t\\t\\t\\t// Note: 'right' is one of default icons provided by the feature.\\n *\\t\\t\\t\\t{ name: 'full', icon: 'right' },\\n *\\n *\\t\\t\\t\\t// This will customize the icon, title and CSS class of the default \\\"side\\\" style.\\n *\\t\\t\\t\\t{ name: 'side', icon: customIcon, title: 'My side style', class: 'custom-side-image' }\\n *\\t\\t\\t]\\n *\\t\\t};\\n *\\n * If none of the default styles is good enough, it is possible to define independent custom styles too:\\n *\\n *\\t\\timport fullSizeIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\\n *\\t\\timport sideIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\\n *\\n *\\t\\t// ...\\n *\\n *\\t\\tconst imageConfig = {\\n *\\t\\t\\tstyles: [\\n *\\t\\t\\t\\t// A completely custom full size style with no class, used as a default.\\n *\\t\\t\\t\\t{ name: 'fullSize', title: 'Full size', icon: fullSizeIcon, isDefault: true },\\n *\\n *\\t\\t\\t\\t{ name: 'side', title: 'To the side', icon: sideIcon, className: 'side-image' }\\n *\\t\\t\\t]\\n *\\t\\t};\\n *\\n * Note: Setting `title` to one of {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\\n * will automatically translate it to the language of the editor.\\n *\\n * Read more about styling images in the {@glink features/image#image-styles Image styles guide}.\\n *\\n * The feature creates commands based on defined styles, so you can change the style of a selected image by executing\\n * the following command:\\n *\\n *\\t\\teditor.execute( 'imageStyle' { value: 'side' } );\\n *\\n * The feature creates also buttons which execute the command. So, assuming that you use the\\n * default image styles setting, you can {@link module:image/image~ImageConfig#toolbar configure the image toolbar}\\n * (or any other toolbar) to contain these options:\\n *\\n *\\t\\tconst imageConfig = {\\n *\\t\\t\\ttoolbar: [ 'imageStyle:full', 'imageStyle:side' ]\\n *\\t\\t};\\n *\\n * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} module:image/image~ImageConfig#styles\\n */\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module link/link\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\nimport LinkEditing from './linkediting';\\nimport LinkUI from './linkui';\\n\\n/**\\n * The link plugin. It introduces the Link and Unlink buttons and the <kbd>Ctrl+K</kbd> keystroke.\\n *\\n * It loads the {@link module:link/linkediting~LinkEditing link editing feature}\\n * and {@link module:link/linkui~LinkUI link UI feature}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Link extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ LinkEditing, LinkUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Link';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module list/list\\n */\\n\\nimport ListEditing from './listediting';\\nimport ListUI from './listui';\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\n/**\\n * The list feature.\\n *\\n * It loads the {@link module:list/listediting~ListEditing list editing feature}\\n * and {@link module:list/listui~ListUI list UI feature}.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class List extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ ListEditing, ListUI ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'List';\\n\\t}\\n}\\n\",\"/**\\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\\n * For licensing, see LICENSE.md.\\n */\\n\\n/**\\n * @module font/font\\n */\\n\\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\\n\\nimport FontFamily from './fontfamily';\\nimport FontSize from './fontsize';\\n\\n/**\\n * A plugin that enables (aggregates) a set of text styling features:\\n * * {@link module:font/fontsize~FontSize},\\n * * {@link module:font/fontfamily~FontFamily}.\\n *\\n * Read more about the feature in the {@glink api/font font package} page.\\n *\\n * @extends module:core/plugin~Plugin\\n */\\nexport default class Font extends Plugin {\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get requires() {\\n\\t\\treturn [ FontFamily, FontSize ];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritDoc\\n\\t */\\n\\tstatic get pluginName() {\\n\\t\\treturn 'Font';\\n\\t}\\n}\\n\",\"var g;\\r\\n\\r\\n// This works in non-strict mode\\r\\ng = (function() {\\r\\n\\treturn this;\\r\\n})();\\r\\n\\r\\ntry {\\r\\n\\t// This works if eval is allowed (see CSP)\\r\\n\\tg = g || Function(\\\"return this\\\")() || (1, eval)(\\\"this\\\");\\r\\n} catch (e) {\\r\\n\\t// This works if the window reference is available\\r\\n\\tif (typeof window === \\\"object\\\") g = window;\\r\\n}\\r\\n\\r\\n// g can still be undefined, but nothing to do about it...\\r\\n// We return undefined, instead of nothing here, so it's\\r\\n// easier to handle this case. if(!global) { ...}\\r\\n\\r\\nmodule.exports = g;\\r\\n\"]}","code":"!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.ClassicEditor=e():t.ClassicEditor=e()}(window,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,\"__esModule\",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=28)}([function(t,e,n){\"use strict\";(function(t,i){var r=n(1),s={function:!0,object:!0},o=s[typeof exports]&&exports&&!exports.nodeType?exports:void 0,a=s[typeof t]&&t&&!t.nodeType?t:void 0,l=Object(r.a)(o&&a&&\"object\"==typeof i&&i),c=Object(r.a)(s[typeof self]&&self),h=Object(r.a)(s[typeof window]&&window),u=Object(r.a)(s[void 0]&&void 0),d=l||h!==(u&&u.window)&&h||c||u||Function(\"return this\")();e.a=d}).call(this,n(9)(t),n(56))},function(t,e,n){\"use strict\";e.a=function(t){return t&&t.Object===Object?t:null}},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.06 10l4.597 4.596a.75.75 0 1 1-1.06 1.06L10 11.062l-4.596 4.596a.75.75 0 1 1-1.06-1.06L8.938 10 4.343 5.404a.75.75 0 1 1 1.06-1.06L10 8.938l4.596-4.596a.75.75 0 0 1 1.06 1.06L11.062 10z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.688 14.44l-4.196-4.195a.758.758 0 0 0-1.066-.006.742.742 0 0 0-.006 1.054l5.268 5.269L18.074 5.176a.742.742 0 0 0-.006-1.055.758.758 0 0 0-1.067.006L6.688 14.44z\" fill=\"#000\" fill-rule=\"nonzero\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"nonzero\"><path d=\"M2 4.5V3h16v1.5zM2 7.5V6h5.674v1.5zM2 10.5V9h5.674v1.5zM2 13.5V12h5.674v1.5zM10.5 7.5V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z\"/></g></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"nonzero\"><path d=\"M2 4.5V3h16v1.5zM6.5 7.5V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z\"/></g></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" stroke-linejoin=\"round\" stroke-miterlimit=\"1.414\"><path d=\"M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z\" fill-rule=\"nonzero\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"nonzero\"><path d=\"M2 4.5V3h16v1.5zM4.5 7.5V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06C3.475 13.5 3 13.093 3 12.59V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z\"/></g></svg>\\n| ')},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-heading_heading1 {\\n| \\tfont-size: 20px;\\n| }\")},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,\"loaded\",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,\"id\",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,\"exports\",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"evenodd\"><path d=\"M9.816 11.5L7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zM17.986 15.279l.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z\"/></g></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"evenodd\"><path d=\"M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zM10.816 11.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z\"/></g></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\" fill=\"#454545\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\" fill=\"#454545\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955c.02-.095.06-.189.12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z\" fill=\"#000\" fill-rule=\"nonzero\"/></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"evenodd\"><path d=\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955c.02-.095.06-.189.12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zM16.927 17.695l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\"/></g></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 700 250\"><g fill=\"none\" fill-rule=\"evenodd\"><rect width=\"700\" height=\"250\" fill=\"#F7F7F7\" rx=\"4\"/><text fill=\"#5F6F77\" font-family=\"Arial,sans-serif\" font-size=\"24\"><tspan x=\"247.9\" y=\"135\">Uploading image…</tspan></text></g></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\" fill=\"#000\" fill-rule=\"nonzero\"/></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012.9.093 1.676.675 2.017 1.513.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"evenodd\"><path d=\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.011-.563zM11 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.011-.563z\"/></g></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\" fill=\"#333\" fill-rule=\"evenodd\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\" fill=\"#000\" fill-rule=\"evenodd\"/></svg>\\n| ')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\" fill=\"#000\" fill-rule=\"nonzero\"/></svg>')},function(t,e){throw new Error('Module parse failed: Unexpected token (1:0)\\nYou may need an appropriate loader to handle this file type.\\n| <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\" fill=\"#000\" fill-rule=\"nonzero\"/></svg>')},function(t,e,n){\"use strict\";e.a=function(t){return function(){return t}}},function(t,e,n){\"use strict\";(function(t){var i=n(26),r=n(0),s={function:!0,object:!0},o=s[typeof exports]&&exports&&!exports.nodeType?exports:void 0,a=s[typeof t]&&t&&!t.nodeType?t:void 0,l=(a&&a.exports===o?o:void 0)?r.a.Buffer:void 0,c=l?function(t){return t instanceof l}:Object(i.a)(!1);e.a=c}).call(this,n(9)(t))},function(t,e,n){\"use strict\";n.r(e);var i=Object.getPrototypeOf;var r=function(t){return i(Object(t))};var s=function(t){var e=!1;if(null!=t&&\"function\"!=typeof t.toString)try{e=!!(t+\"\")}catch(t){}return e};var o=function(t){return!!t&&\"object\"==typeof t},a=\"[object Object]\",l=Object.prototype,c=Function.prototype.toString,h=l.hasOwnProperty,u=c.call(Object),d=l.toString;var f=function(t){if(!o(t)||d.call(t)!=a||s(t))return!1;var e=r(t);if(null===e)return!0;var n=h.call(e,\"constructor\")&&e.constructor;return\"function\"==typeof n&&n instanceof n&&c.call(n)==u};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class m{constructor(t,e){this._config={},e&&this.define(e),t&&this._setObjectToTarget(this._config,t)}set(t,e){this._setToTarget(this._config,t,e)}define(t,e){this._setToTarget(this._config,t,e,!0)}get(t){return this._getFromSource(this._config,t)}_setToTarget(t,e,n,i=!1){if(f(e))return void this._setObjectToTarget(t,e,i);const r=e.split(\".\");e=r.pop();for(const e of r)f(t[e])||(t[e]={}),t=t[e];if(f(n))return f(t[e])||(t[e]={}),t=t[e],void this._setObjectToTarget(t,n,i);i&&void 0!==t[e]||(t[e]=n)}_getFromSource(t,e){const n=e.split(\".\");e=n.pop();for(const e of n){if(!f(t[e])){t=null;break}t=t[e]}return t?t[e]:void 0}_setObjectToTarget(t,e,n){Object.keys(e).forEach(i=>{this._setToTarget(t,i,e[i],n)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const p=\"https://docs.ckeditor.com/ckeditor5/latest/framework/guides/support/error-codes.html\";class g extends Error{constructor(t,e){t=w(t),e&&(t+=\" \"+JSON.stringify(e)),super(t),this.name=\"CKEditorError\",this.data=e}static isCKEditorError(t){return t instanceof g}}function w(t){const e=t.match(/^([^:]+):/);return e?t+` Read more: ${p}#error-${e[1]}\\n`:t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var b=function(){return function t(){t.called=!0}};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class v{constructor(t,e){this.source=t,this.name=e,this.path=[],this.stop=b(),this.off=b()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function _(){let t=\"e\";for(let e=0;e<8;e++)t+=Math.floor(65536*(1+Math.random())).toString(16).substring(1);return t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var y={get(t){return\"number\"!=typeof t?this[t]||this.normal:t},highest:1e5,high:1e3,normal:0,low:-1e3,lowest:-1e5};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const k=Symbol(\"listeningTo\"),x=Symbol(\"emitterId\");var A={on(t,e,n={}){this.listenTo(this,t,e,n)},once(t,e,n){this.listenTo(this,t,function(t,...n){t.off(),e.call(this,t,...n)},n)},off(t,e){this.stopListening(this,t,e)},listenTo(t,e,n,i={}){let r,s;this[k]||(this[k]={});const o=this[k];T(t)||C(t);const a=T(t);(r=o[a])||(r=o[a]={emitter:t,callbacks:{}}),(s=r.callbacks[e])||(s=r.callbacks[e]=[]),s.push(n),function(t,e){const n=S(t);if(n[e])return;let i=e,r=null;const s=[];for(;\"\"!==i&&!n[i];)n[i]={callbacks:[],childEvents:[]},s.push(n[i]),r&&n[i].childEvents.push(r),r=i,i=i.substr(0,i.lastIndexOf(\":\"));if(\"\"!==i){for(const t of s)t.callbacks=n[i].callbacks.slice();n[i].childEvents.push(r)}}(t,e);const l=P(t,e),c=y.get(i.priority),h={callback:n,priority:c};for(const t of l){let e=!1;for(let n=0;n<t.length;n++)if(t[n].priority<c){t.splice(n,0,h),e=!0;break}e||t.push(h)}},stopListening(t,e,n){const i=this[k];let r=t&&T(t);const s=i&&r&&i[r],o=s&&e&&s.callbacks[e];if(!(!i||t&&!s||e&&!o))if(n)O(t,e,n);else if(o){for(;n=o.pop();)O(t,e,n);delete s.callbacks[e]}else if(s){for(e in s.callbacks)this.stopListening(t,e);delete i[r]}else{for(r in i)this.stopListening(i[r].emitter);delete this[k]}},fire(t,...e){const n=t instanceof v?t:new v(this,t),i=n.name;let r=function t(e,n){let i;if(!e._events||!(i=e._events[n])||!i.callbacks.length)return n.indexOf(\":\")>-1?t(e,n.substr(0,n.lastIndexOf(\":\"))):null;return i.callbacks}(this,i);if(n.path.push(this),r){const t=[n,...e];r=Array.from(r);for(let e=0;e<r.length&&(r[e].callback.apply(this,t),n.off.called&&(delete n.off.called,O(this,i,r[e].callback)),!n.stop.called);e++);}if(this._delegations){const t=this._delegations.get(i),r=this._delegations.get(\"*\");t&&E(t,n,e),r&&E(r,n,e)}return n.return},delegate(...t){return{to:(e,n)=>{this._delegations||(this._delegations=new Map);for(const i of t){const t=this._delegations.get(i);t?t.set(e,n):this._delegations.set(i,new Map([[e,n]]))}}}},stopDelegating(t,e){if(this._delegations)if(t)if(e){const n=this._delegations.get(t);n&&n.delete(e)}else this._delegations.delete(t);else this._delegations.clear()}};function C(t,e){t[x]||(t[x]=e||_())}function T(t){return t[x]}function S(t){return t._events||Object.defineProperty(t,\"_events\",{value:{}}),t._events}function P(t,e){const n=S(t)[e];if(!n)return[];let i=[n.callbacks];for(let e=0;e<n.childEvents.length;e++){const r=P(t,n.childEvents[e]);i=i.concat(r)}return i}function E(t,e,n){for(let[i,r]of t){r?\"function\"==typeof r&&(r=r(e.name)):r=e.name;const t=new v(e.source,r);t.path=[...e.path],i.fire(t,...n)}}function O(t,e,n){const i=P(t,e);for(const t of i)for(let e=0;e<t.length;e++)t[e].callback==n&&(t.splice(e,1),e--)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function R(t,...e){e.forEach(e=>{Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e)).forEach(n=>{if(n in t.prototype)return;const i=Object.getOwnPropertyDescriptor(e,n);i.enumerable=!1,Object.defineProperty(t.prototype,n,i)})})}var M=function(){this.__data__=[]};var F=function(t,e){return t===e||t!=t&&e!=e};var V=function(t,e){for(var n=t.length;n--;)if(F(t[n][0],e))return n;return-1},I=Array.prototype.splice;var N=function(t){var e=this.__data__,n=V(e,t);return!(n<0||(n==e.length-1?e.pop():I.call(e,n,1),0))};var D=function(t){var e=this.__data__,n=V(e,t);return n<0?void 0:e[n][1]};var B=function(t){return V(this.__data__,t)>-1};var L=function(t,e){var n=this.__data__,i=V(n,t);return i<0?n.push([t,e]):n[i][1]=e,this};function j(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}j.prototype.clear=M,j.prototype.delete=N,j.prototype.get=D,j.prototype.has=B,j.prototype.set=L;var U=j;var z=function(){this.__data__=new U};var q=function(t){return this.__data__.delete(t)};var W=function(t){return this.__data__.get(t)};var H=function(t){return this.__data__.has(t)};var $=function(t){var e=typeof t;return!!t&&(\"object\"==e||\"function\"==e)},K=\"[object Function]\",G=\"[object GeneratorFunction]\",Y=Object.prototype.toString;var J=function(t){var e=$(t)?Y.call(t):\"\";return e==K||e==G},Q=Function.prototype.toString;var X=function(t){if(null!=t){try{return Q.call(t)}catch(t){}try{return t+\"\"}catch(t){}}return\"\"},Z=/^\\[object .+?Constructor\\]$/,tt=Object.prototype,et=Function.prototype.toString,nt=tt.hasOwnProperty,it=RegExp(\"^\"+et.call(nt).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\");var rt=function(t){return!!$(t)&&(J(t)||s(t)?it:Z).test(X(t))};var st=function(t,e){var n=t[e];return rt(n)?n:void 0},ot=st(Object,\"create\");var at=function(){this.__data__=ot?ot(null):{}};var lt=function(t){return this.has(t)&&delete this.__data__[t]},ct=\"__lodash_hash_undefined__\",ht=Object.prototype.hasOwnProperty;var ut=function(t){var e=this.__data__;if(ot){var n=e[t];return n===ct?void 0:n}return ht.call(e,t)?e[t]:void 0},dt=Object.prototype.hasOwnProperty;var ft=function(t){var e=this.__data__;return ot?void 0!==e[t]:dt.call(e,t)},mt=\"__lodash_hash_undefined__\";var pt=function(t,e){return this.__data__[t]=ot&&void 0===e?mt:e,this};function gt(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}gt.prototype.clear=at,gt.prototype.delete=lt,gt.prototype.get=ut,gt.prototype.has=ft,gt.prototype.set=pt;var wt=gt,bt=n(0),vt=st(bt.a,\"Map\");var _t=function(){this.__data__={hash:new wt,map:new(vt||U),string:new wt}};var yt=function(t){var e=typeof t;return\"string\"==e||\"number\"==e||\"symbol\"==e||\"boolean\"==e?\"__proto__\"!==t:null===t};var kt=function(t,e){var n=t.__data__;return yt(e)?n[\"string\"==typeof e?\"string\":\"hash\"]:n.map};var xt=function(t){return kt(this,t).delete(t)};var At=function(t){return kt(this,t).get(t)};var Ct=function(t){return kt(this,t).has(t)};var Tt=function(t,e){return kt(this,t).set(t,e),this};function St(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}St.prototype.clear=_t,St.prototype.delete=xt,St.prototype.get=At,St.prototype.has=Ct,St.prototype.set=Tt;var Pt=St,Et=200;var Ot=function(t,e){var n=this.__data__;return n instanceof U&&n.__data__.length==Et&&(n=this.__data__=new Pt(n.__data__)),n.set(t,e),this};function Rt(t){this.__data__=new U(t)}Rt.prototype.clear=z,Rt.prototype.delete=q,Rt.prototype.get=W,Rt.prototype.has=H,Rt.prototype.set=Ot;var Mt=Rt;var Ft=function(t,e){for(var n=-1,i=t.length;++n<i&&!1!==e(t[n],n,t););return t},Vt=Object.prototype.hasOwnProperty;var It=function(t,e,n){var i=t[e];Vt.call(t,e)&&F(i,n)&&(void 0!==n||e in t)||(t[e]=n)};var Nt=function(t,e,n,i){n||(n={});for(var r=-1,s=e.length;++r<s;){var o=e[r],a=i?i(n[o],t[o],o,n,t):t[o];It(n,o,a)}return n},Dt=Object.prototype.hasOwnProperty;var Bt=function(t,e){return Dt.call(t,e)||\"object\"==typeof t&&e in t&&null===r(t)},Lt=Object.keys;var jt=function(t){return Lt(Object(t))};var Ut=function(t,e){for(var n=-1,i=Array(t);++n<t;)i[n]=e(n);return i};var zt=function(t){return function(e){return null==e?void 0:e[t]}},qt=zt(\"length\"),Wt=9007199254740991;var Ht=function(t){return\"number\"==typeof t&&t>-1&&t%1==0&&t<=Wt};var $t=function(t){return null!=t&&Ht(qt(t))&&!J(t)};var Kt=function(t){return o(t)&&$t(t)},Gt=\"[object Arguments]\",Yt=Object.prototype,Jt=Yt.hasOwnProperty,Qt=Yt.toString,Xt=Yt.propertyIsEnumerable;var Zt=function(t){return Kt(t)&&Jt.call(t,\"callee\")&&(!Xt.call(t,\"callee\")||Qt.call(t)==Gt)},te=Array.isArray,ee=\"[object String]\",ne=Object.prototype.toString;var ie=function(t){return\"string\"==typeof t||!te(t)&&o(t)&&ne.call(t)==ee};var re=function(t){var e=t?t.length:void 0;return Ht(e)&&(te(t)||ie(t)||Zt(t))?Ut(e,String):null},se=9007199254740991,oe=/^(?:0|[1-9]\\d*)$/;var ae=function(t,e){return!!(e=null==e?se:e)&&(\"number\"==typeof t||oe.test(t))&&t>-1&&t%1==0&&t<e},le=Object.prototype;var ce=function(t){var e=t&&t.constructor;return t===(\"function\"==typeof e&&e.prototype||le)};var he=function(t){var e=ce(t);if(!e&&!$t(t))return jt(t);var n=re(t),i=!!n,r=n||[],s=r.length;for(var o in t)!Bt(t,o)||i&&(\"length\"==o||ae(o,s))||e&&\"constructor\"==o||r.push(o);return r};var ue=function(t,e){return t&&Nt(e,he(e),t)};var de=function(t,e){if(e)return t.slice();var n=new t.constructor(t.length);return t.copy(n),n};var fe=function(t,e){var n=-1,i=t.length;for(e||(e=Array(i));++n<i;)e[n]=t[n];return e},me=Object.getOwnPropertySymbols;function pe(t){return me(Object(t))}me||(pe=function(){return[]});var ge=pe;var we=function(t,e){return Nt(t,ge(t),e)};var be=function(t,e){for(var n=-1,i=e.length,r=t.length;++n<i;)t[r+n]=e[n];return t};var ve=function(t,e,n){var i=e(t);return te(t)?i:be(i,n(t))};var _e=function(t){return ve(t,he,ge)},ye=st(bt.a,\"DataView\"),ke=st(bt.a,\"Promise\"),xe=st(bt.a,\"Set\"),Ae=st(bt.a,\"WeakMap\"),Ce=Object.prototype.toString,Te=X(ye),Se=X(vt),Pe=X(ke),Ee=X(xe),Oe=X(Ae);function Re(t){return Ce.call(t)}(ye&&\"[object DataView]\"!=Re(new ye(new ArrayBuffer(1)))||vt&&\"[object Map]\"!=Re(new vt)||ke&&\"[object Promise]\"!=Re(ke.resolve())||xe&&\"[object Set]\"!=Re(new xe)||Ae&&\"[object WeakMap]\"!=Re(new Ae))&&(Re=function(t){var e=Ce.call(t),n=\"[object Object]\"==e?t.constructor:void 0,i=n?X(n):void 0;if(i)switch(i){case Te:return\"[object DataView]\";case Se:return\"[object Map]\";case Pe:return\"[object Promise]\";case Ee:return\"[object Set]\";case Oe:return\"[object WeakMap]\"}return e});var Me=Re,Fe=Object.prototype.hasOwnProperty;var Ve=function(t){var e=t.length,n=t.constructor(e);return e&&\"string\"==typeof t[0]&&Fe.call(t,\"index\")&&(n.index=t.index,n.input=t.input),n},Ie=bt.a.Uint8Array;var Ne=function(t){var e=new t.constructor(t.byteLength);return new Ie(e).set(new Ie(t)),e};var De=function(t,e){var n=e?Ne(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)};var Be=function(t,e){return t.set(e[0],e[1]),t};var Le=function(t,e,n,i){var r=-1,s=t.length;for(i&&s&&(n=t[++r]);++r<s;)n=e(n,t[r],r,t);return n};var je=function(t){var e=-1,n=Array(t.size);return t.forEach(function(t,i){n[++e]=[i,t]}),n};var Ue=function(t,e,n){var i=e?n(je(t),!0):je(t);return Le(i,Be,new t.constructor)},ze=/\\w*$/;var qe=function(t){var e=new t.constructor(t.source,ze.exec(t));return e.lastIndex=t.lastIndex,e};var We=function(t,e){return t.add(e),t};var He=function(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n};var $e=function(t,e,n){var i=e?n(He(t),!0):He(t);return Le(i,We,new t.constructor)},Ke=bt.a.Symbol,Ge=Ke?Ke.prototype:void 0,Ye=Ge?Ge.valueOf:void 0;var Je=function(t){return Ye?Object(Ye.call(t)):{}};var Qe=function(t,e){var n=e?Ne(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)},Xe=\"[object Boolean]\",Ze=\"[object Date]\",tn=\"[object Map]\",en=\"[object Number]\",nn=\"[object RegExp]\",rn=\"[object Set]\",sn=\"[object String]\",on=\"[object Symbol]\",an=\"[object ArrayBuffer]\",ln=\"[object DataView]\",cn=\"[object Float32Array]\",hn=\"[object Float64Array]\",un=\"[object Int8Array]\",dn=\"[object Int16Array]\",fn=\"[object Int32Array]\",mn=\"[object Uint8Array]\",pn=\"[object Uint8ClampedArray]\",gn=\"[object Uint16Array]\",wn=\"[object Uint32Array]\";var bn=function(t,e,n,i){var r=t.constructor;switch(e){case an:return Ne(t);case Xe:case Ze:return new r(+t);case ln:return De(t,i);case cn:case hn:case un:case dn:case fn:case mn:case pn:case gn:case wn:return Qe(t,i);case tn:return Ue(t,i,n);case en:case sn:return new r(t);case nn:return qe(t);case rn:return $e(t,i,n);case on:return Je(t)}},vn=Object.create;var _n=function(t){return $(t)?vn(t):{}};var yn=function(t){return\"function\"!=typeof t.constructor||ce(t)?{}:_n(r(t))},kn=n(27),xn=\"[object Arguments]\",An=\"[object Function]\",Cn=\"[object GeneratorFunction]\",Tn=\"[object Object]\",Sn={};Sn[xn]=Sn[\"[object Array]\"]=Sn[\"[object ArrayBuffer]\"]=Sn[\"[object DataView]\"]=Sn[\"[object Boolean]\"]=Sn[\"[object Date]\"]=Sn[\"[object Float32Array]\"]=Sn[\"[object Float64Array]\"]=Sn[\"[object Int8Array]\"]=Sn[\"[object Int16Array]\"]=Sn[\"[object Int32Array]\"]=Sn[\"[object Map]\"]=Sn[\"[object Number]\"]=Sn[Tn]=Sn[\"[object RegExp]\"]=Sn[\"[object Set]\"]=Sn[\"[object String]\"]=Sn[\"[object Symbol]\"]=Sn[\"[object Uint8Array]\"]=Sn[\"[object Uint8ClampedArray]\"]=Sn[\"[object Uint16Array]\"]=Sn[\"[object Uint32Array]\"]=!0,Sn[\"[object Error]\"]=Sn[An]=Sn[\"[object WeakMap]\"]=!1;var Pn=function t(e,n,i,r,o,a,l){var c;if(r&&(c=a?r(e,o,a,l):r(e)),void 0!==c)return c;if(!$(e))return e;var h=te(e);if(h){if(c=Ve(e),!n)return fe(e,c)}else{var u=Me(e),d=u==An||u==Cn;if(Object(kn.a)(e))return de(e,n);if(u==Tn||u==xn||d&&!a){if(s(e))return a?e:{};if(c=yn(d?{}:e),!n)return we(e,ue(c,e))}else{if(!Sn[u])return a?e:{};c=bn(e,u,t,n)}}l||(l=new Mt);var f=l.get(e);if(f)return f;if(l.set(e,c),!h)var m=i?_e(e):he(e);return Ft(m||e,function(s,o){m&&(s=e[o=s]),It(c,o,t(s,n,i,r,o,e,l))}),c};var En=function(t){return Pn(t,!1,!0)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class On{constructor(){this.parent=null}get index(){let t;if(!this.parent)return null;if(-1==(t=this.parent.getChildIndex(this)))throw new g(\"view-node-not-found-in-parent: The node's parent does not contain this node.\");return t}get nextSibling(){const t=this.index;return null!==t&&this.parent.getChild(t+1)||null}get previousSibling(){const t=this.index;return null!==t&&this.parent.getChild(t-1)||null}get root(){let t=this;for(;t.parent;)t=t.parent;return t}get document(){return this.parent instanceof On?this.parent.document:null}getAncestors(t={includeSelf:!1,parentFirst:!1}){const e=[];let n=t.includeSelf?this:this.parent;for(;n;)e[t.parentFirst?\"push\":\"unshift\"](n),n=n.parent;return e}getCommonAncestor(t,e={}){const n=this.getAncestors(e),i=t.getAncestors(e);let r=0;for(;n[r]==i[r]&&n[r];)r++;return 0===r?null:n[r-1]}_remove(){this.parent._removeChildren(this.index)}_fireChange(t,e){this.fire(\"change:\"+t,e),this.parent&&this.parent._fireChange(t,e)}toJSON(){const t=En(this);return delete t.parent,t}}R(On,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Rn extends On{constructor(t){super(),this._textData=t}is(t){return\"text\"==t}get data(){return this._textData}get _data(){return this.data}set _data(t){this._fireChange(\"text\",this),this._textData=t}isSimilar(t){return t instanceof Rn&&(this===t||this.data===t.data)}_clone(){return new Rn(this.data)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Mn{constructor(t,e,n){if(this.textNode=t,e<0||e>t.data.length)throw new g(\"view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.\");if(n<0||e+n>t.data.length)throw new g(\"view-textproxy-wrong-length: Given length value is incorrect.\");this.data=t.data.substring(e,e+n),this.offsetInText=e}get offsetSize(){return this.data.length}get isPartial(){return this.data.length!==this.textNode.data.length}get parent(){return this.textNode.parent}get root(){return this.textNode.root}get document(){return this.textNode.document}is(t){return\"textProxy\"==t}getAncestors(t={includeSelf:!1,parentFirst:!1}){const e=[];let n=t.includeSelf?this.textNode:this.parent;for(;null!==n;)e[t.parentFirst?\"push\":\"unshift\"](n),n=n.parent;return e}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Fn(t){const e=new Map;for(const n in t)e.set(n,t[n]);return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Vn(t){return!(!t||!t[Symbol.iterator])}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class In{constructor(...t){this._patterns=[],this.add(...t)}add(...t){for(let e of t)(\"string\"==typeof e||e instanceof RegExp)&&(e={name:e}),e.class&&(\"string\"==typeof e.class||e.class instanceof RegExp)&&(e.class=[e.class]),this._patterns.push(e)}match(...t){for(const e of t)for(const t of this._patterns){const n=Nn(e,t);if(n)return{element:e,pattern:t,match:n}}return null}matchAll(...t){const e=[];for(const n of t)for(const t of this._patterns){const i=Nn(n,t);i&&e.push({element:n,pattern:t,match:i})}return e.length>0?e:null}getElementName(){if(1!==this._patterns.length)return null;const t=this._patterns[0],e=t.name;return\"function\"==typeof t||!e||e instanceof RegExp?null:e}}function Nn(t,e){if(\"function\"==typeof e)return e(t);const n={};return e.name&&(n.name=function(t,e){if(t instanceof RegExp)return t.test(e);return t===e}(e.name,t.name),!n.name)?null:e.attribute&&(n.attribute=function(t,e){const n=[];for(const i in t){const r=t[i];if(!e.hasAttribute(i))return null;{const t=e.getAttribute(i);if(!0===r)n.push(i);else if(r instanceof RegExp){if(!r.test(t))return null;n.push(i)}else{if(t!==r)return null;n.push(i)}}}return n}(e.attribute,t),!n.attribute)?null:!(e.class&&(n.class=function(t,e){const n=[];for(const i of t)if(i instanceof RegExp){const t=e.getClassNames();for(const e of t)i.test(e)&&n.push(e);if(0===n.length)return null}else{if(!e.hasClass(i))return null;n.push(i)}return n}(e.class,t),!n.class))&&(!(e.style&&(n.style=function(t,e){const n=[];for(const i in t){const r=t[i];if(!e.hasStyle(i))return null;{const t=e.getStyle(i);if(r instanceof RegExp){if(!r.test(t))return null;n.push(i)}else{if(t!==r)return null;n.push(i)}}}return n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e.style,t),!n.style))&&n)}class Dn extends On{constructor(t,e,n){if(super(),this.name=t,this._attrs=function(t){t=f(t)?Fn(t):new Map(t);for(const[e,n]of t)null===n?t.delete(e):\"string\"!=typeof n&&t.set(e,String(n));return t}(e),this._children=[],n&&this._insertChildren(0,n),this._classes=new Set,this._attrs.has(\"class\")){const t=this._attrs.get(\"class\");Ln(this._classes,t),this._attrs.delete(\"class\")}this._styles=new Map,this._attrs.has(\"style\")&&(Bn(this._styles,this._attrs.get(\"style\")),this._attrs.delete(\"style\")),this._customProperties=new Map}get childCount(){return this._children.length}get isEmpty(){return 0===this._children.length}is(t,e=null){return e?\"element\"==t&&e==this.name:\"element\"==t||t==this.name}getChild(t){return this._children[t]}getChildIndex(t){return this._children.indexOf(t)}getChildren(){return this._children[Symbol.iterator]()}*getAttributeKeys(){this._classes.size>0&&(yield\"class\"),this._styles.size>0&&(yield\"style\");for(const t of this._attrs.keys())yield t}*getAttributes(){yield*this._attrs.entries(),this._classes.size>0&&(yield[\"class\",this.getAttribute(\"class\")]),this._styles.size>0&&(yield[\"style\",this.getAttribute(\"style\")])}getAttribute(t){if(\"class\"==t)return this._classes.size>0?[...this._classes].join(\" \"):void 0;if(\"style\"!=t)return this._attrs.get(t);if(this._styles.size>0){let t=\"\";for(const[e,n]of this._styles)t+=`${e}:${n};`;return t}}hasAttribute(t){return\"class\"==t?this._classes.size>0:\"style\"==t?this._styles.size>0:this._attrs.has(t)}isSimilar(t){if(!(t instanceof Dn))return!1;if(this===t)return!0;if(this.name!=t.name)return!1;if(this._attrs.size!==t._attrs.size||this._classes.size!==t._classes.size||this._styles.size!==t._styles.size)return!1;for(const[e,n]of this._attrs)if(!t._attrs.has(e)||t._attrs.get(e)!==n)return!1;for(const e of this._classes)if(!t._classes.has(e))return!1;for(const[e,n]of this._styles)if(!t._styles.has(e)||t._styles.get(e)!==n)return!1;return!0}hasClass(...t){for(const e of t)if(!this._classes.has(e))return!1;return!0}getClassNames(){return this._classes.keys()}getStyle(t){return this._styles.get(t)}getStyleNames(){return this._styles.keys()}hasStyle(...t){for(const e of t)if(!this._styles.has(e))return!1;return!0}findAncestor(...t){const e=new In(...t);let n=this.parent;for(;n;){if(e.match(n))return n;n=n.parent}return null}getCustomProperty(t){return this._customProperties.get(t)}*getCustomProperties(){yield*this._customProperties.entries()}getIdentity(){const t=Array.from(this._classes).sort().join(\",\"),e=Array.from(this._styles).map(t=>`${t[0]}:${t[1]}`).sort().join(\";\"),n=Array.from(this._attrs).map(t=>`${t[0]}=\"${t[1]}\"`).sort().join(\" \");return this.name+(\"\"==t?\"\":` class=\"${t}\"`)+(\"\"==e?\"\":` style=\"${e}\"`)+(\"\"==n?\"\":` ${n}`)}_clone(t=!1){const e=[];if(t)for(const n of this.getChildren())e.push(n._clone(t));const n=new this.constructor(this.name,this._attrs,e);return n._classes=new Set(this._classes),n._styles=new Map(this._styles),n._customProperties=new Map(this._customProperties),n.getFillerOffset=this.getFillerOffset,n}_appendChildren(t){return this._insertChildren(this.childCount,t)}_insertChildren(t,e){this._fireChange(\"children\",this);let n=0;const i=function(t){if(\"string\"==typeof t)return[new Rn(t)];Vn(t)||(t=[t]);return Array.from(t).map(t=>\"string\"==typeof t?new Rn(t):t instanceof Mn?new Rn(t.data):t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e);for(const e of i)null!==e.parent&&e._remove(),e.parent=this,this._children.splice(t,0,e),t++,n++;return n}_removeChildren(t,e=1){this._fireChange(\"children\",this);for(let n=t;n<t+e;n++)this._children[n].parent=null;return this._children.splice(t,e)}_setAttribute(t,e){e=String(e),this._fireChange(\"attributes\",this),\"class\"==t?Ln(this._classes,e):\"style\"==t?Bn(this._styles,e):this._attrs.set(t,e)}_removeAttribute(t){return this._fireChange(\"attributes\",this),\"class\"==t?this._classes.size>0&&(this._classes.clear(),!0):\"style\"==t?this._styles.size>0&&(this._styles.clear(),!0):this._attrs.delete(t)}_addClass(t){this._fireChange(\"attributes\",this),(t=Array.isArray(t)?t:[t]).forEach(t=>this._classes.add(t))}_removeClass(t){this._fireChange(\"attributes\",this),(t=Array.isArray(t)?t:[t]).forEach(t=>this._classes.delete(t))}_setStyle(t,e){if(this._fireChange(\"attributes\",this),f(t)){const e=Object.keys(t);for(const n of e)this._styles.set(n,t[n])}else this._styles.set(t,e)}_removeStyle(t){this._fireChange(\"attributes\",this),(t=Array.isArray(t)?t:[t]).forEach(t=>this._styles.delete(t))}_setCustomProperty(t,e){this._customProperties.set(t,e)}_removeCustomProperty(t){return this._customProperties.delete(t)}}function Bn(t,e){let n=null,i=0,r=0,s=null;if(t.clear(),\"\"!==e){\";\"!=e.charAt(e.length-1)&&(e+=\";\");for(let o=0;o<e.length;o++){const a=e.charAt(o);if(null===n)switch(a){case\":\":s||(s=e.substr(i,o-i),r=o+1);break;case'\"':case\"'\":n=a;break;case\";\":const l=e.substr(r,o-r);s&&t.set(s.trim(),l.trim()),s=null,i=o+1}else a===n&&(n=null)}}}function Ln(t,e){const n=e.split(/\\s+/);t.clear(),n.forEach(e=>t.add(e))}class jn extends Dn{constructor(t,e,n){super(t,e,n),this.getFillerOffset=Un}is(t,e=null){return e?\"containerElement\"==t&&e==this.name||super.is(t,e):\"containerElement\"==t||super.is(t)}}function Un(){for(const t of this.getChildren())if(!t.is(\"uiElement\"))return null;return this.childCount}var zn=function(t,e,n){if(!$(n))return!1;var i=typeof e;return!!(\"number\"==i?$t(n)&&ae(e,n.length):\"string\"==i&&e in n)&&F(n[e],t)};var qn=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)},Wn=\"[object Symbol]\",Hn=Object.prototype.toString;var $n=function(t){return\"symbol\"==typeof t||o(t)&&Hn.call(t)==Wn},Kn=NaN,Gn=/^\\s+|\\s+$/g,Yn=/^[-+]0x[0-9a-f]+$/i,Jn=/^0b[01]+$/i,Qn=/^0o[0-7]+$/i,Xn=parseInt;var Zn=function(t){if(\"number\"==typeof t)return t;if($n(t))return Kn;if($(t)){var e=J(t.valueOf)?t.valueOf():t;t=$(e)?e+\"\":e}if(\"string\"!=typeof t)return 0===t?t:+t;t=t.replace(Gn,\"\");var n=Jn.test(t);return n||Qn.test(t)?Xn(t.slice(2),n?2:8):Yn.test(t)?Kn:+t},ti=1/0,ei=1.7976931348623157e308;var ni=function(t){return t?(t=Zn(t))===ti||t===-ti?(t<0?-1:1)*ei:t==t?t:0:0===t?t:0};var ii=function(t){var e=ni(t),n=e%1;return e==e?n?e-n:e:0},ri=\"Expected a function\",si=Math.max;var oi=function(t,e){if(\"function\"!=typeof t)throw new TypeError(ri);return e=si(void 0===e?t.length-1:ii(e),0),function(){for(var n=arguments,i=-1,r=si(n.length-e,0),s=Array(r);++i<r;)s[i]=n[e+i];switch(e){case 0:return t.call(this,s);case 1:return t.call(this,n[0],s);case 2:return t.call(this,n[0],n[1],s)}var o=Array(e+1);for(i=-1;++i<e;)o[i]=n[i];return o[e]=s,qn(t,this,o)}};var ai=function(t){return oi(function(e,n){var i=-1,r=n.length,s=r>1?n[r-1]:void 0,o=r>2?n[2]:void 0;for(s=t.length>3&&\"function\"==typeof s?(r--,s):void 0,o&&zn(n[0],n[1],o)&&(s=r<3?void 0:s,r=1),e=Object(e);++i<r;){var a=n[i];a&&t(e,a,i,s)}return e})},li=bt.a.Reflect;var ci=function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n},hi=Object.prototype,ui=li?li.enumerate:void 0,di=hi.propertyIsEnumerable;function fi(t){t=null==t?t:Object(t);var e=[];for(var n in t)e.push(n);return e}ui&&!di.call({valueOf:1},\"valueOf\")&&(fi=function(t){return ci(ui(t))});var mi=fi,pi=Object.prototype.hasOwnProperty;var gi=function(t){for(var e=-1,n=ce(t),i=mi(t),r=i.length,s=re(t),o=!!s,a=s||[],l=a.length;++e<r;){var c=i[e];o&&(\"length\"==c||ae(c,l))||\"constructor\"==c&&(n||!pi.call(t,c))||a.push(c)}return a},wi=!Object.prototype.propertyIsEnumerable.call({valueOf:1},\"valueOf\"),bi=ai(function(t,e){if(wi||ce(e)||$t(e))Nt(e,gi(e),t);else for(var n in e)It(t,n,e[n])});\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst vi=Symbol(\"observableProperties\"),_i=Symbol(\"boundObservables\"),yi=Symbol(\"boundProperties\"),ki={set(t,e){if($(t))return void Object.keys(t).forEach(e=>{this.set(e,t[e])},this);Ai(this);const n=this[vi];if(t in this&&!n.has(t))throw new g(\"observable-set-cannot-override: Cannot override an existing property.\");Object.defineProperty(this,t,{enumerable:!0,configurable:!0,get:()=>n.get(t),set(e){const i=n.get(t);i===e&&n.has(t)||(n.set(t,e),this.fire(\"change:\"+t,t,e,i))}}),this[t]=e},bind(...t){if(!t.length||!Si(t))throw new g(\"observable-bind-wrong-properties: All properties must be strings.\");if(new Set(t).size!==t.length)throw new g(\"observable-bind-duplicate-properties: Properties must be unique.\");Ai(this);const e=this[yi];t.forEach(t=>{if(e.has(t))throw new g(\"observable-bind-rebind: Cannot bind the same property more that once.\")});const n=new Map;return t.forEach(t=>{const i={property:t,to:[]};e.set(t,i),n.set(t,i)}),{to:Ci,toMany:Ti,_observable:this,_bindProperties:t,_to:[],_bindings:n}},unbind(...t){if(!(vi in this))return;const e=this[yi],n=this[_i];if(t.length){if(!Si(t))throw new g(\"observable-unbind-wrong-properties: Properties must be strings.\");t.forEach(t=>{const i=e.get(t);if(!i)return;let r,s,o,a;i.to.forEach(t=>{r=t[0],s=t[1],o=n.get(r),(a=o[s]).delete(i),a.size||delete o[s],Object.keys(o).length||(n.delete(r),this.stopListening(r,\"change\"))}),e.delete(t)})}else n.forEach((t,e)=>{this.stopListening(e,\"change\")}),n.clear(),e.clear()},decorate(t){const e=this[t];if(!e)throw new g(\"observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.\",{object:this,methodName:t});this.on(t,(t,n)=>{t.return=e.apply(this,n)}),this[t]=function(...e){return this.fire(t,e)}}};bi(ki,A);var xi=ki;function Ai(t){vi in t||(Object.defineProperty(t,vi,{value:new Map}),Object.defineProperty(t,_i,{value:new Map}),Object.defineProperty(t,yi,{value:new Map}))}function Ci(...t){const e=function(...t){if(!t.length)throw new g(\"observable-bind-to-parse-error: Invalid argument syntax in `to()`.\");const e={to:[]};let n;\"function\"==typeof t[t.length-1]&&(e.callback=t.pop());return t.forEach(t=>{if(\"string\"==typeof t)n.properties.push(t);else{if(\"object\"!=typeof t)throw new g(\"observable-bind-to-parse-error: Invalid argument syntax in `to()`.\");n={observable:t,properties:[]},e.to.push(n)}}),e}(...t),n=Array.from(this._bindings.keys()),i=n.length;if(!e.callback&&e.to.length>1)throw new g(\"observable-bind-to-no-callback: Binding multiple observables only possible with callback.\");if(i>1&&e.callback)throw new g(\"observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.\");var r;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */e.to.forEach(t=>{if(t.properties.length&&t.properties.length!==i)throw new g(\"observable-bind-to-properties-length: The number of properties must match.\");t.properties.length||(t.properties=this._bindProperties)}),this._to=e.to,e.callback&&(this._bindings.get(n[0]).callback=e.callback),r=this._observable,this._to.forEach(t=>{const e=r[_i];let n;e.get(t.observable)||r.listenTo(t.observable,\"change\",(i,s)=>{(n=e.get(t.observable)[s])&&n.forEach(t=>{Pi(r,t.property)})})}),function(t){let e;t._bindings.forEach((n,i)=>{t._to.forEach(r=>{e=r.properties[n.callback?0:t._bindProperties.indexOf(i)],n.to.push([r.observable,e]),function(t,e,n,i){const r=t[_i],s=r.get(n),o=s||{};o[i]||(o[i]=new Set);o[i].add(e),s||r.set(n,o)}(t._observable,n,r.observable,e)})})}(this),this._bindProperties.forEach(t=>{Pi(this._observable,t)})}function Ti(t,e,n){if(this._bindings.size>1)throw new g(\"observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().\");this.to(...function(t,e){const n=t.map(t=>[t,e]);return Array.prototype.concat.apply([],n)}(t,e),n)}function Si(t){return t.every(t=>\"string\"==typeof t)}function Pi(t,e){const n=t[yi].get(e);let i;i=n.callback?n.callback.apply(t,n.to.map(t=>t[0][t[1]])):(i=n.to[0])[0][i[1]],t.hasOwnProperty(e)?t[e]=i:t.set(e,i)}const Ei=Symbol(\"document\");class Oi extends jn{constructor(t,e,n){super(t,e,n),this.set(\"isReadOnly\",!1),this.set(\"isFocused\",!1)}get document(){return this.getCustomProperty(Ei)}set _document(t){if(this.getCustomProperty(Ei))throw new g(\"view-editableelement-document-already-set: View document is already set.\");this._setCustomProperty(Ei,t),this.bind(\"isReadOnly\").to(t),this.bind(\"isFocused\").to(t,\"isFocused\",e=>e&&t.selection.editableElement==this),this.listenTo(t.selection,\"change\",()=>{this.isFocused=t.isFocused&&t.selection.editableElement==this})}}R(Oi,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst Ri=Symbol(\"rootName\");class Mi extends Oi{constructor(t){super(t),this.rootName=\"main\"}is(t,e=null){return e?\"rootElement\"==t&&e==this.name||super.is(t,e):\"rootElement\"==t||super.is(t)}get rootName(){return this.getCustomProperty(Ri)}set rootName(t){this._setCustomProperty(Ri,t)}set _name(t){this.name=t}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Fi{constructor(t={}){if(!t.boundaries&&!t.startPosition)throw new g(\"view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.\");if(t.direction&&\"forward\"!=t.direction&&\"backward\"!=t.direction)throw new g(\"view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.\",{direction:t.direction});this.boundaries=t.boundaries||null,t.startPosition?this.position=Ii.createFromPosition(t.startPosition):this.position=Ii.createFromPosition(t.boundaries[\"backward\"==t.direction?\"end\":\"start\"]),this.direction=t.direction||\"forward\",this.singleCharacters=!!t.singleCharacters,this.shallow=!!t.shallow,this.ignoreElementEnd=!!t.ignoreElementEnd,this._boundaryStartParent=this.boundaries?this.boundaries.start.parent:null,this._boundaryEndParent=this.boundaries?this.boundaries.end.parent:null}[Symbol.iterator](){return this}skip(t){let e,n,i;do{i=this.position,({done:e,value:n}=this.next())}while(!e&&t(n));e||(this.position=i)}next(){return\"forward\"==this.direction?this._next():this._previous()}_next(){let t=Ii.createFromPosition(this.position);const e=this.position,n=t.parent;if(null===n.parent&&t.offset===n.childCount)return{done:!0};if(n===this._boundaryEndParent&&t.offset==this.boundaries.end.offset)return{done:!0};let i;if(n instanceof Rn){if(t.isAtEnd)return this.position=Ii.createAfter(n),this._next();i=n.data[t.offset]}else i=n.getChild(t.offset);if(i instanceof Dn)return this.shallow?t.offset++:t=new Ii(i,0),this.position=t,this._formatReturnValue(\"elementStart\",i,e,t,1);if(i instanceof Rn){if(this.singleCharacters)return t=new Ii(i,0),this.position=t,this._next();{let n,r=i.data.length;return i==this._boundaryEndParent?(r=this.boundaries.end.offset,n=new Mn(i,0,r),t=Ii.createAfter(n)):(n=new Mn(i,0,i.data.length),t.offset++),this.position=t,this._formatReturnValue(\"text\",n,e,t,r)}}if(\"string\"==typeof i){let i;if(this.singleCharacters)i=1;else{i=(n===this._boundaryEndParent?this.boundaries.end.offset:n.data.length)-t.offset}const r=new Mn(n,t.offset,i);return t.offset+=i,this.position=t,this._formatReturnValue(\"text\",r,e,t,i)}return t=Ii.createAfter(n),this.position=t,this.ignoreElementEnd?this._next():this._formatReturnValue(\"elementEnd\",n,e,t)}_previous(){let t=Ii.createFromPosition(this.position);const e=this.position,n=t.parent;if(null===n.parent&&0===t.offset)return{done:!0};if(n==this._boundaryStartParent&&t.offset==this.boundaries.start.offset)return{done:!0};let i;if(n instanceof Rn){if(t.isAtStart)return this.position=Ii.createBefore(n),this._previous();i=n.data[t.offset-1]}else i=n.getChild(t.offset-1);if(i instanceof Dn)return this.shallow?(t.offset--,this.position=t,this._formatReturnValue(\"elementStart\",i,e,t,1)):(t=new Ii(i,i.childCount),this.position=t,this.ignoreElementEnd?this._previous():this._formatReturnValue(\"elementEnd\",i,e,t));if(i instanceof Rn){if(this.singleCharacters)return t=new Ii(i,i.data.length),this.position=t,this._previous();{let n,r=i.data.length;if(i==this._boundaryStartParent){const e=this.boundaries.start.offset;r=(n=new Mn(i,e,i.data.length-e)).data.length,t=Ii.createBefore(n)}else n=new Mn(i,0,i.data.length),t.offset--;return this.position=t,this._formatReturnValue(\"text\",n,e,t,r)}}if(\"string\"==typeof i){let i;if(this.singleCharacters)i=1;else{const e=n===this._boundaryStartParent?this.boundaries.start.offset:0;i=t.offset-e}t.offset-=i;const r=new Mn(n,t.offset,i);return this.position=t,this._formatReturnValue(\"text\",r,e,t,i)}return t=Ii.createBefore(n),this.position=t,this._formatReturnValue(\"elementStart\",n,e,t,1)}_formatReturnValue(t,e,n,i,r){return e instanceof Mn&&(e.offsetInText+e.data.length==e.textNode.data.length&&(\"forward\"!=this.direction||this.boundaries&&this.boundaries.end.isEqual(this.position)?n=Ii.createAfter(e.textNode):(i=Ii.createAfter(e.textNode),this.position=i)),0===e.offsetInText&&(\"backward\"!=this.direction||this.boundaries&&this.boundaries.start.isEqual(this.position)?n=Ii.createBefore(e.textNode):(i=Ii.createBefore(e.textNode),this.position=i))),{done:!1,value:{type:t,item:e,previousPosition:n,nextPosition:i,length:r}}}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Vi(t,e){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++)if(t[i]!=e[i])return i;return t.length==e.length?\"same\":t.length<e.length?\"prefix\":\"extension\"}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ii{constructor(t,e){this.parent=t,this.offset=e}get nodeAfter(){return this.parent.is(\"text\")?null:this.parent.getChild(this.offset)||null}get nodeBefore(){return this.parent.is(\"text\")?null:this.parent.getChild(this.offset-1)||null}get isAtStart(){return 0===this.offset}get isAtEnd(){const t=this.parent.is(\"text\")?this.parent.data.length:this.parent.childCount;return this.offset===t}get root(){return this.parent.root}get editableElement(){let t=this.parent;for(;!(t instanceof Oi);){if(!t.parent)return null;t=t.parent}return t}getShiftedBy(t){const e=Ii.createFromPosition(this),n=e.offset+t;return e.offset=n<0?0:n,e}getLastMatchingPosition(t,e={}){e.startPosition=this;const n=new Fi(e);return n.skip(t),n.position}getAncestors(){return this.parent.is(\"documentFragment\")?[this.parent]:this.parent.getAncestors({includeSelf:!0})}getCommonAncestor(t){const e=this.getAncestors(),n=t.getAncestors();let i=0;for(;e[i]==n[i]&&e[i];)i++;return 0===i?null:e[i-1]}isEqual(t){return this.parent==t.parent&&this.offset==t.offset}isBefore(t){return\"before\"==this.compareWith(t)}isAfter(t){return\"after\"==this.compareWith(t)}compareWith(t){if(this.isEqual(t))return\"same\";if(this.parent===t.parent)return this.offset-t.offset<0?\"before\":\"after\";const e=this.getAncestors(),n=t.getAncestors(),i=Vi(e,n);let r;switch(i){case 0:return\"different\";case\"prefix\":r=e.length-1;break;case\"extension\":r=n.length-1;break;default:r=i-1}const s=e[r],o=e[r+1],a=n[r+1];if(s===this.parent){return this.offset-a.index<=0?\"before\":\"after\"}if(s===t.parent){return o.index-t.offset<0?\"before\":\"after\"}return o.index-a.index<0?\"before\":\"after\"}static createAt(t,e){if(t instanceof Ii)return this.createFromPosition(t);{const n=t;if(\"end\"==e)e=n.is(\"text\")?n.data.length:n.childCount;else{if(\"before\"==e)return this.createBefore(n);if(\"after\"==e)return this.createAfter(n);e||(e=0)}return new Ii(n,e)}}static createAfter(t){if(t.is(\"textProxy\"))return new Ii(t.textNode,t.offsetInText+t.data.length);if(!t.parent)throw new g(\"view-position-after-root: You can not make position after root.\",{root:t});return new Ii(t.parent,t.index+1)}static createBefore(t){if(t.is(\"textProxy\"))return new Ii(t.textNode,t.offsetInText);if(!t.parent)throw new g(\"view-position-before-root: You can not make position before root.\",{root:t});return new Ii(t.parent,t.index)}static createFromPosition(t){return new this(t.parent,t.offset)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ni{constructor(t,e=null){this.start=Ii.createFromPosition(t),this.end=e?Ii.createFromPosition(e):Ii.createFromPosition(t)}*[Symbol.iterator](){yield*new Fi({boundaries:this,ignoreElementEnd:!0})}get isCollapsed(){return this.start.isEqual(this.end)}get isFlat(){return this.start.parent===this.end.parent}get root(){return this.start.root}getEnlarged(){let t=this.start.getLastMatchingPosition(Di,{direction:\"backward\"}),e=this.end.getLastMatchingPosition(Di);return t.parent.is(\"text\")&&t.isAtStart&&(t=Ii.createBefore(t.parent)),e.parent.is(\"text\")&&e.isAtEnd&&(e=Ii.createAfter(e.parent)),new Ni(t,e)}getTrimmed(){let t=this.start.getLastMatchingPosition(Di);if(t.isAfter(this.end)||t.isEqual(this.end))return new Ni(t,t);let e=this.end.getLastMatchingPosition(Di,{direction:\"backward\"});const n=t.nodeAfter,i=e.nodeBefore;return n&&n.is(\"text\")&&(t=new Ii(n,0)),i&&i.is(\"text\")&&(e=new Ii(i,i.data.length)),new Ni(t,e)}isEqual(t){return this==t||this.start.isEqual(t.start)&&this.end.isEqual(t.end)}containsPosition(t){return t.isAfter(this.start)&&t.isBefore(this.end)}containsRange(t,e=!1){t.isCollapsed&&(e=!1);const n=this.containsPosition(t.start)||e&&this.start.isEqual(t.start),i=this.containsPosition(t.end)||e&&this.end.isEqual(t.end);return n&&i}getDifference(t){const e=[];return this.isIntersecting(t)?(this.containsPosition(t.start)&&e.push(new Ni(this.start,t.start)),this.containsPosition(t.end)&&e.push(new Ni(t.end,this.end))):e.push(Ni.createFromRange(this)),e}getIntersection(t){if(this.isIntersecting(t)){let e=this.start,n=this.end;return this.containsPosition(t.start)&&(e=t.start),this.containsPosition(t.end)&&(n=t.end),new Ni(e,n)}return null}getWalker(t={}){return t.boundaries=this,new Fi(t)}getCommonAncestor(){return this.start.getCommonAncestor(this.end)}*getItems(t={}){t.boundaries=this,t.ignoreElementEnd=!0;const e=new Fi(t);for(const t of e)yield t.item}*getPositions(t={}){t.boundaries=this;const e=new Fi(t);yield e.position;for(const t of e)yield t.nextPosition}isIntersecting(t){return this.start.isBefore(t.end)&&this.end.isAfter(t.start)}static createFromParentsAndOffsets(t,e,n,i){return new this(new Ii(t,e),new Ii(n,i))}static createFromRange(t){return new this(t.start,t.end)}static createFromPositionAndShift(t,e){const n=t,i=t.getShiftedBy(e);return e>0?new this(n,i):new this(i,n)}static createIn(t){return this.createFromParentsAndOffsets(t,0,t,t.childCount)}static createOn(t){const e=t.is(\"textProxy\")?t.offsetSize:1;return this.createFromPositionAndShift(Ii.createBefore(t),e)}static createCollapsedAt(t,e){const n=Ii.createAt(t,e),i=Ii.createFromPosition(n);return new Ni(n,i)}}function Di(t){return!(!t.item.is(\"attributeElement\")&&!t.item.is(\"uiElement\"))}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Bi(t){let e=0;for(const n of t)e++;return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Li{constructor(t=null,e,n){this._ranges=[],this._lastRangeBackward=!1,this._isFake=!1,this._fakeSelectionLabel=\"\",this._setTo(t,e,n)}get isFake(){return this._isFake}get fakeSelectionLabel(){return this._fakeSelectionLabel}get anchor(){if(!this._ranges.length)return null;const t=this._ranges[this._ranges.length-1],e=this._lastRangeBackward?t.end:t.start;return Ii.createFromPosition(e)}get focus(){if(!this._ranges.length)return null;const t=this._ranges[this._ranges.length-1],e=this._lastRangeBackward?t.start:t.end;return Ii.createFromPosition(e)}get isCollapsed(){return 1===this.rangeCount&&this._ranges[0].isCollapsed}get rangeCount(){return this._ranges.length}get isBackward(){return!this.isCollapsed&&this._lastRangeBackward}get editableElement(){return this.anchor?this.anchor.editableElement:null}*getRanges(){for(const t of this._ranges)yield Ni.createFromRange(t)}getFirstRange(){let t=null;for(const e of this._ranges)t&&!e.start.isBefore(t.start)||(t=e);return t?Ni.createFromRange(t):null}getLastRange(){let t=null;for(const e of this._ranges)t&&!e.end.isAfter(t.end)||(t=e);return t?Ni.createFromRange(t):null}getFirstPosition(){const t=this.getFirstRange();return t?Ii.createFromPosition(t.start):null}getLastPosition(){const t=this.getLastRange();return t?Ii.createFromPosition(t.end):null}isEqual(t){if(this.isFake!=t.isFake)return!1;if(this.isFake&&this.fakeSelectionLabel!=t.fakeSelectionLabel)return!1;if(this.rangeCount!=t.rangeCount)return!1;if(0===this.rangeCount)return!0;if(!this.anchor.isEqual(t.anchor)||!this.focus.isEqual(t.focus))return!1;for(const e of this._ranges){let n=!1;for(const i of t._ranges)if(e.isEqual(i)){n=!0;break}if(!n)return!1}return!0}isSimilar(t){if(this.isBackward!=t.isBackward)return!1;const e=Bi(this.getRanges());if(e!=Bi(t.getRanges()))return!1;if(0==e)return!0;for(let e of this.getRanges()){e=e.getTrimmed();let n=!1;for(let i of t.getRanges())if(i=i.getTrimmed(),e.start.isEqual(i.start)&&e.end.isEqual(i.end)){n=!0;break}if(!n)return!1}return!0}getSelectedElement(){if(1!==this.rangeCount)return null;const t=this.getFirstRange(),e=t.start.nodeAfter,n=t.end.nodeBefore;return e instanceof Dn&&e==n?e:null}_setTo(t,e,n){if(null===t)this._setRanges([]),this._setFakeOptions(e);else if(t instanceof Li)this._setRanges(t.getRanges(),t.isBackward),this._setFakeOptions({fake:t.isFake,label:t.fakeSelectionLabel});else if(t instanceof Ni)this._setRanges([t],e&&e.backward),this._setFakeOptions(e);else if(t instanceof Ii)this._setRanges([new Ni(t)]),this._setFakeOptions(e);else if(t instanceof On){const i=!!n&&!!n.backward;let r;if(void 0===e)throw new g(\"view-selection-setTo-required-second-parameter: selection.setTo requires the second parameter when the first parameter is a node.\");r=\"in\"==e?Ni.createIn(t):\"on\"==e?Ni.createOn(t):Ni.createCollapsedAt(t,e),this._setRanges([r],i),this._setFakeOptions(n)}else{if(!Vn(t))throw new g(\"view-selection-setTo-not-selectable: Cannot set selection to given place.\");this._setRanges(t,e&&e.backward),this._setFakeOptions(e)}this.fire(\"change\")}_setRanges(t,e=!1){t=Array.from(t),this._ranges=[];for(const e of t)this._addRange(e);this._lastRangeBackward=!!e}_setFocus(t,e){if(null===this.anchor)throw new g(\"view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.\");const n=Ii.createAt(t,e);if(\"same\"==n.compareWith(this.focus))return;const i=this.anchor;this._ranges.pop(),\"before\"==n.compareWith(i)?this._addRange(new Ni(n,i),!0):this._addRange(new Ni(i,n)),this.fire(\"change\")}_setFakeOptions(t={}){this._isFake=!!t.fake,this._fakeSelectionLabel=t.fake&&t.label||\"\"}_addRange(t,e=!1){if(!(t instanceof Ni))throw new g(\"view-selection-invalid-range: Invalid Range.\");this._pushRange(t),this._lastRangeBackward=!!e}_pushRange(t){for(const e of this._ranges)if(t.isIntersecting(e))throw new g(\"view-selection-range-intersects: Trying to add a range that intersects with another range from selection.\",{addedRange:t,intersectingRange:e});this._ranges.push(Ni.createFromRange(t))}}R(Li,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass ji{constructor(t={}){this._items=[],this._itemMap=new Map,this._idProperty=t.idProperty||\"id\",this._bindToExternalToInternalMap=new WeakMap,this._bindToInternalToExternalMap=new WeakMap,this._skippedIndexesFromExternal=[]}get length(){return this._items.length}get first(){return this._items[0]||null}get last(){return this._items[this.length-1]||null}add(t,e){let n;const i=this._idProperty;if(i in t){if(\"string\"!=typeof(n=t[i]))throw new g(\"collection-add-invalid-id\");if(this.get(n))throw new g(\"collection-add-item-already-exists\")}else t[i]=n=_();if(void 0===e)e=this._items.length;else if(e>this._items.length||e<0)throw new g(\"collection-add-item-invalid-index\");return this._items.splice(e,0,t),this._itemMap.set(n,t),this.fire(\"add\",t,e),this}get(t){let e;if(\"string\"==typeof t)e=this._itemMap.get(t);else{if(\"number\"!=typeof t)throw new g(\"collection-get-invalid-arg: Index or id must be given.\");e=this._items[t]}return e||null}getIndex(t){let e;return e=\"string\"==typeof t?this._itemMap.get(t):t,this._items.indexOf(e)}remove(t){let e,n,i,r=!1;const s=this._idProperty;if(\"string\"==typeof t?(n=t,r=!(i=this._itemMap.get(n)),i&&(e=this._items.indexOf(i))):\"number\"==typeof t?(e=t,r=!(i=this._items[e]),i&&(n=i[s])):(n=(i=t)[s],r=-1==(e=this._items.indexOf(i))||!this._itemMap.get(n)),r)throw new g(\"collection-remove-404: Item not found.\");this._items.splice(e,1),this._itemMap.delete(n);const o=this._bindToInternalToExternalMap.get(i);return this._bindToInternalToExternalMap.delete(i),this._bindToExternalToInternalMap.delete(o),this.fire(\"remove\",i,e),i}map(t,e){return this._items.map(t,e)}find(t,e){return this._items.find(t,e)}filter(t,e){return this._items.filter(t,e)}clear(){for(this._bindToCollection&&(this.stopListening(this._bindToCollection),this._bindToCollection=null);this.length;)this.remove(0)}bindTo(t){if(this._bindToCollection)throw new g(\"collection-bind-to-rebind: The collection cannot be bound more than once.\");return this._bindToCollection=t,{as:t=>{this._setUpBindToBinding(e=>new t(e))},using:t=>{\"function\"==typeof t?this._setUpBindToBinding(e=>t(e)):this._setUpBindToBinding(e=>e[t])}}}_setUpBindToBinding(t){const e=this._bindToCollection,n=(n,i,r)=>{const s=e._bindToCollection==this,o=e._bindToInternalToExternalMap.get(i);if(s&&o)this._bindToExternalToInternalMap.set(i,o),this._bindToInternalToExternalMap.set(o,i);else{const n=t(i);if(!n)return void this._skippedIndexesFromExternal.push(r);let s=r;for(const t of this._skippedIndexesFromExternal)r>t&&s--;for(const t of e._skippedIndexesFromExternal)s>=t&&s++;this._bindToExternalToInternalMap.set(i,n),this._bindToInternalToExternalMap.set(n,i),this.add(n,s);for(let t=0;t<e._skippedIndexesFromExternal.length;t++)s<=e._skippedIndexesFromExternal[t]&&e._skippedIndexesFromExternal[t]++}};for(const t of e)n(0,t,e.getIndex(t));this.listenTo(e,\"add\",n),this.listenTo(e,\"remove\",(t,e,n)=>{const i=this._bindToExternalToInternalMap.get(e);i&&this.remove(i),this._skippedIndexesFromExternal=this._skippedIndexesFromExternal.reduce((t,e)=>(n<e&&t.push(e-1),n>e&&t.push(e),t),[])})}[Symbol.iterator](){return this._items[Symbol.iterator]()}}R(ji,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ui{constructor(){this.selection=new Li,this.roots=new ji({idProperty:\"rootName\"}),this.set(\"isReadOnly\",!1),this.set(\"isFocused\",!1),this.set(\"isComposing\",!1),this._postFixers=new Set}getRoot(t=\"main\"){return this.roots.get(t)}registerPostFixer(t){this._postFixers.add(t)}_callPostFixers(t){let e=!1;do{for(const n of this._postFixers)if(e=n(t))break}while(e)}}R(Ui,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst zi=10;class qi extends Dn{constructor(t,e,n){super(t,e,n),this._priority=zi,this.getFillerOffset=Wi}get priority(){return this._priority}is(t,e=null){return e?\"attributeElement\"==t&&e==this.name||super.is(t,e):\"attributeElement\"==t||super.is(t)}isSimilar(t){return super.isSimilar(t)&&this.priority==t.priority}_clone(t){const e=super._clone(t);return e._priority=this._priority,e}}function Wi(){if(Hi(this))return null;let t=this.parent;for(;t&&t.is(\"attributeElement\");){if(Hi(t)>1)return null;t=t.parent}return!t||Hi(t)>1?null:this.childCount}function Hi(t){return Array.from(t.getChildren()).filter(t=>!t.is(\"uiElement\")).length}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */qi.DEFAULT_PRIORITY=zi;class $i extends Dn{constructor(t,e,n){super(t,e,n),this.getFillerOffset=Ki}is(t,e=null){return e?\"emptyElement\"==t&&e==this.name||super.is(t,e):\"emptyElement\"==t||super.is(t)}_insertChildren(t,e){if(e&&(e instanceof On||Array.from(e).length>0))throw new g(\"view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.\")}}function Ki(){return null}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var Gi={isMac:function(t){return t.indexOf(\"macintosh\")>-1}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(navigator.userAgent.toLowerCase())};const Yi={\"⌘\":\"ctrl\",\"⇧\":\"shift\",\"⌥\":\"alt\"},Ji={ctrl:\"⌘\",shift:\"⇧\",alt:\"⌥\"},Qi=function(){const t={arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,backspace:8,delete:46,enter:13,space:32,esc:27,tab:9,ctrl:1114112,cmd:1114112,shift:2228224,alt:4456448};for(let e=65;e<=90;e++){const n=String.fromCharCode(e);t[n.toLowerCase()]=e}for(let e=48;e<=57;e++)t[e-48]=e;for(let e=112;e<=123;e++)t[\"f\"+(e-111)]=e;return t}();function Xi(t){let e;if(\"string\"==typeof t){if(!(e=Qi[t.toLowerCase()]))throw new g(\"keyboard-unknown-key: Unknown key name.\",{key:t})}else e=t.keyCode+(t.altKey?Qi.alt:0)+(t.ctrlKey?Qi.ctrl:0)+(t.shiftKey?Qi.shift:0);return e}function Zi(t){return\"string\"==typeof t&&(t=tr(t)),t.map(t=>\"string\"==typeof t?Xi(t):t).reduce((t,e)=>e+t,0)}function tr(t){return t.split(/\\s*\\+\\s*/)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class er extends Dn{constructor(t,e,n){super(t,e,n),this.getFillerOffset=ir}is(t,e=null){return e?\"uiElement\"==t&&e==this.name||super.is(t,e):\"uiElement\"==t||super.is(t)}_insertChildren(t,e){if(e&&(e instanceof On||Array.from(e).length>0))throw new g(\"view-uielement-cannot-add: Cannot add child nodes to UIElement instance.\")}render(t){return this.toDomElement(t)}toDomElement(t){const e=t.createElement(this.name);for(const t of this.getAttributeKeys())e.setAttribute(t,this.getAttribute(t));return e}}function nr(t){t.document.on(\"keydown\",(e,n)=>(function(t,e,n){if(e.keyCode==Qi.arrowright){const t=e.domTarget.ownerDocument.defaultView.getSelection(),i=1==t.rangeCount&&t.getRangeAt(0).collapsed;if(i||e.shiftKey){const e=t.focusNode,r=t.focusOffset,s=n.domPositionToView(e,r);if(null===s)return;let o=!1;const a=s.getLastMatchingPosition(t=>(t.item.is(\"uiElement\")&&(o=!0),!(!t.item.is(\"uiElement\")&&!t.item.is(\"attributeElement\"))));if(o){const e=n.viewPositionToDom(a);i?t.collapse(e.parent,e.offset):t.extend(e.parent,e.offset)}}}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */)(0,n,t.domConverter))}function ir(){return null}class rr{constructor(t){this._children=[],t&&this._insertChildren(0,t)}[Symbol.iterator](){return this._children[Symbol.iterator]()}get childCount(){return this._children.length}get isEmpty(){return 0===this.childCount}get root(){return this}get parent(){return null}is(t){return\"documentFragment\"==t}_appendChildren(t){return this._insertChildren(this.childCount,t)}getChild(t){return this._children[t]}getChildIndex(t){return this._children.indexOf(t)}getChildren(){return this._children[Symbol.iterator]()}_insertChildren(t,e){this._fireChange(\"children\",this);let n=0;const i=function(t){if(\"string\"==typeof t)return[new Rn(t)];Vn(t)||(t=[t]);return Array.from(t).map(t=>\"string\"==typeof t?new Rn(t):t instanceof Mn?new Rn(t.data):t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e);for(const e of i)null!==e.parent&&e._remove(),e.parent=this,this._children.splice(t,0,e),t++,n++;return n}_removeChildren(t,e=1){this._fireChange(\"children\",this);for(let n=t;n<t+e;n++)this._children[n].parent=null;return this._children.splice(t,e)}_fireChange(t,e){this.fire(\"change:\"+t,e)}}R(rr,A);class sr{constructor(t){this.document=t}setSelection(t,e,n){this.document.selection._setTo(t,e,n)}setSelectionFocus(t,e){this.document.selection._setFocus(t,e)}createText(t){return new Rn(t)}createAttributeElement(t,e,n){const i=new qi(t,e);return n&&(i._priority=n),i}createContainerElement(t,e){return new jn(t,e)}createEditableElement(t,e){const n=new Oi(t,e);return n._document=this.document,n}createEmptyElement(t,e){return new $i(t,e)}createUIElement(t,e,n){const i=new er(t,e);return n&&(i.render=n),i}setTextData(t,e){e._data=t}setAttribute(t,e,n){n._setAttribute(t,e)}removeAttribute(t,e){e._removeAttribute(t)}addClass(t,e){e._addClass(t)}removeClass(t,e){e._removeClass(t)}setStyle(t,e,n){f(t)&&void 0===n&&(n=e),n._setStyle(t,e)}removeStyle(t,e){e._removeStyle(t)}setCustomProperty(t,e,n){n._setCustomProperty(t,e)}removeCustomProperty(t,e){return e._removeCustomProperty(t)}breakAttributes(t){return t instanceof Ii?lr(t):ar(t)}breakContainer(t){const e=t.parent;if(!e.is(\"containerElement\"))throw new g(\"view-writer-break-non-container-element: Trying to break an element which is not a container element.\");if(!e.parent)throw new g(\"view-writer-break-root: Trying to break root element.\");if(t.isAtStart)return Ii.createBefore(e);if(!t.isAtEnd){const n=e._clone(!1);this.insert(Ii.createAfter(e),n);const i=new Ni(t,Ii.createAt(e,\"end\")),r=new Ii(n,0);this.move(i,r)}return Ii.createAfter(e)}mergeAttributes(t){const e=t.offset,n=t.parent;if(n.is(\"text\"))return t;if(n.is(\"attributeElement\")&&0===n.childCount){const t=n.parent,e=n.index;return n._remove(),this.mergeAttributes(new Ii(t,e))}const i=n.getChild(e-1),r=n.getChild(e);if(!i||!r)return t;if(i.is(\"text\")&&r.is(\"text\"))return dr(i,r);if(i.is(\"attributeElement\")&&r.is(\"attributeElement\")&&i.isSimilar(r)){const t=i.childCount;return i._appendChildren(r.getChildren()),r._remove(),this.mergeAttributes(new Ii(i,t))}return t}mergeContainers(t){const e=t.nodeBefore,n=t.nodeAfter;if(!(e&&n&&e.is(\"containerElement\")&&n.is(\"containerElement\")))throw new g(\"view-writer-merge-containers-invalid-position: Element before and after given position cannot be merged.\");const i=e.getChild(e.childCount-1),r=i instanceof Rn?Ii.createAt(i,\"end\"):Ii.createAt(e,\"end\");return this.move(Ni.createIn(n),Ii.createAt(e,\"end\")),this.remove(Ni.createOn(n)),r}insert(t,e){(function t(e){for(const n of e){if(!fr.some(t=>n instanceof t))throw new g(\"view-writer-insert-invalid-node\");n.is(\"text\")||t(n.getChildren())}})(e=Vn(e)?[...e]:[e]);const n=or(t);if(!n)throw new g(\"view-writer-invalid-position-container\");const i=lr(t,!0),r=n._insertChildren(i.offset,e),s=i.getShiftedBy(r),o=this.mergeAttributes(i);if(0===r)return new Ni(o,o);{o.isEqual(i)||s.offset--;const t=this.mergeAttributes(s);return new Ni(o,t)}}remove(t){if(pr(t),t.isCollapsed)return new rr;const{start:e,end:n}=ar(t,!0),i=e.parent,r=n.offset-e.offset,s=i._removeChildren(e.offset,r),o=this.mergeAttributes(e);return t.start=o,t.end=Ii.createFromPosition(o),new rr(s)}clear(t,e){pr(t);const n=t.getWalker({direction:\"backward\",ignoreElementEnd:!0});for(const i of n){const n=i.item;let r;if(n.is(\"element\")&&e.isSimilar(n))r=Ni.createOn(n);else if(!i.nextPosition.isAfter(t.start)&&n.is(\"textProxy\")){const t=n.getAncestors().find(t=>t.is(\"element\")&&e.isSimilar(t));t&&(r=Ni.createIn(t))}r&&(r.end.isAfter(t.end)&&(r.end=t.end),r.start.isBefore(t.start)&&(r.start=t.start),this.remove(r))}}move(t,e){let n;if(e.isAfter(t.end)){const i=(e=lr(e,!0)).parent,r=i.childCount;t=ar(t,!0),n=this.remove(t),e.offset+=i.childCount-r}else n=this.remove(t);return this.insert(e,n)}wrap(t,e){if(!(e instanceof qi))throw new g(\"view-writer-wrap-invalid-attribute\");if(pr(t),t.isCollapsed){let i=t.start;i.parent.is(\"element\")&&(n=i.parent,!Array.from(n.getChildren()).some(t=>!t.is(\"uiElement\")))&&(i=i.getLastMatchingPosition(t=>t.item.is(\"uiElement\"))),i=this._wrapPosition(i,e);const r=this.document.selection;return r.isCollapsed&&r.getFirstPosition().isEqual(t.start)&&this.setSelection(i),new Ni(i)}return this._wrapRange(t,e);var n}unwrap(t,e){if(!(e instanceof qi))throw new g(\"view-writer-unwrap-invalid-attribute\");if(pr(t),t.isCollapsed)return t;const{start:n,end:i}=ar(t,!0);if(i.isEqual(n.getShiftedBy(1))){const t=n.nodeAfter;if(!e.isSimilar(t)&&t instanceof qi&&this._unwrapAttributeElement(e,t)){const t=this.mergeAttributes(n);t.isEqual(n)||i.offset--;const e=this.mergeAttributes(i);return new Ni(t,e)}}const r=n.parent,s=this._unwrapChildren(r,n.offset,i.offset,e),o=this.mergeAttributes(s.start);o.isEqual(s.start)||s.end.offset--;const a=this.mergeAttributes(s.end);return new Ni(o,a)}rename(t,e){const n=new jn(e,t.getAttributes());return this.insert(Ii.createAfter(t),n),this.move(Ni.createIn(t),Ii.createAt(n)),this.remove(Ni.createOn(t)),n}_wrapChildren(t,e,n,i){let r=e;const s=[];for(;r<n;){const e=t.getChild(r),n=e.is(\"text\"),o=e.is(\"attributeElement\"),a=e.is(\"emptyElement\"),l=e.is(\"uiElement\");if(n||a||l||o&&cr(i,e)){const n=i._clone();e._remove(),n._appendChildren(e),t._insertChildren(r,n),s.push(new Ii(t,r))}else o&&this._wrapChildren(e,0,e.childCount,i);r++}let o=0;for(const t of s){if(t.offset-=o,t.offset==e)continue;this.mergeAttributes(t).isEqual(t)||(o++,n--)}return Ni.createFromParentsAndOffsets(t,e,t,n)}_unwrapChildren(t,e,n,i){let r=e;const s=[];for(;r<n;){const e=t.getChild(r);if(e.isSimilar(i)){const i=e.getChildren(),o=e.childCount;e._remove(),t._insertChildren(r,i),s.push(new Ii(t,r),new Ii(t,r+o)),r+=o,n+=o-1}else e.is(\"attributeElement\")&&this._unwrapChildren(e,0,e.childCount,i),r++}let o=0;for(const t of s){if(t.offset-=o,t.offset==e||t.offset==n)continue;this.mergeAttributes(t).isEqual(t)||(o++,n--)}return Ni.createFromParentsAndOffsets(t,e,t,n)}_wrapRange(t,e){if(function(t){return t.start.parent==t.end.parent&&t.start.parent.is(\"attributeElement\")&&0===t.start.offset&&t.end.offset===t.start.parent.childCount}(t)&&this._wrapAttributeElement(e,t.start.parent)){const e=t.start.parent,n=this.mergeAttributes(Ii.createAfter(e)),i=this.mergeAttributes(Ii.createBefore(e));return new Ni(i,n)}const{start:n,end:i}=ar(t,!0);if(i.isEqual(n.getShiftedBy(1))){const t=n.nodeAfter;if(t instanceof qi&&this._wrapAttributeElement(e,t)){const t=this.mergeAttributes(n);t.isEqual(n)||i.offset--;const e=this.mergeAttributes(i);return new Ni(t,e)}}const r=n.parent,s=this._unwrapChildren(r,n.offset,i.offset,e),o=this._wrapChildren(r,s.start.offset,s.end.offset,e),a=this.mergeAttributes(o.start);a.isEqual(o.start)||o.end.offset--;const l=this.mergeAttributes(o.end);return new Ni(a,l)}_wrapPosition(t,e){if(e.isSimilar(t.parent))return hr(Ii.createFromPosition(t));t.parent.is(\"text\")&&(t=ur(t));const n=this.createAttributeElement();n._priority=Number.POSITIVE_INFINITY,n.isSimilar=(()=>!1),t.parent._insertChildren(t.offset,n);const i=new Ni(t,t.getShiftedBy(1));this.wrap(i,e);const r=new Ii(n.parent,n.index);n._remove();const s=r.nodeBefore,o=r.nodeAfter;return s instanceof Rn&&o instanceof Rn?dr(s,o):hr(r)}_wrapAttributeElement(t,e){if(t.name!==e.name||t.priority!==e.priority)return!1;for(const n of t.getAttributeKeys())if(\"class\"!==n&&\"style\"!==n&&e.hasAttribute(n)&&e.getAttribute(n)!==t.getAttribute(n))return!1;for(const n of t.getStyleNames())if(e.hasStyle(n)&&e.getStyle(n)!==t.getStyle(n))return!1;for(const n of t.getAttributeKeys())\"class\"!==n&&\"style\"!==n&&(e.hasAttribute(n)||this.setAttribute(n,t.getAttribute(n),e));for(const n of t.getStyleNames())e.hasStyle(n)||this.setStyle(n,t.getStyle(n),e);for(const n of t.getClassNames())e.hasClass(n)||this.addClass(n,e);return!0}_unwrapAttributeElement(t,e){if(t.name!==e.name||t.priority!==e.priority)return!1;for(const n of t.getAttributeKeys())if(\"class\"!==n&&\"style\"!==n&&(!e.hasAttribute(n)||e.getAttribute(n)!==t.getAttribute(n)))return!1;if(!e.hasClass(...t.getClassNames()))return!1;for(const n of t.getStyleNames())if(!e.hasStyle(n)||e.getStyle(n)!==t.getStyle(n))return!1;for(const n of t.getAttributeKeys())\"class\"!==n&&\"style\"!==n&&this.removeAttribute(n,e);return this.removeClass(Array.from(t.getClassNames()),e),this.removeStyle(Array.from(t.getStyleNames()),e),!0}}function or(t){let e=t.parent;for(;!mr(e);){if(!e)return;e=e.parent}return e}function ar(t,e=!1){const n=t.start,i=t.end;if(pr(t),t.isCollapsed){const n=lr(t.start,e);return new Ni(n,n)}const r=lr(i,e),s=r.parent.childCount,o=lr(n,e);return r.offset+=r.parent.childCount-s,new Ni(o,r)}function lr(t,e=!1){const n=t.offset,i=t.parent;if(t.parent.is(\"emptyElement\"))throw new g(\"view-writer-cannot-break-empty-element\");if(t.parent.is(\"uiElement\"))throw new g(\"view-writer-cannot-break-ui-element\");if(!e&&i.is(\"text\")&&mr(i.parent))return Ii.createFromPosition(t);if(mr(i))return Ii.createFromPosition(t);if(i.is(\"text\"))return lr(ur(t),e);if(n==i.childCount){return lr(new Ii(i.parent,i.index+1),e)}if(0===n){return lr(new Ii(i.parent,i.index),e)}{const t=i.index+1,r=i._clone();i.parent._insertChildren(t,r);const s=i.childCount-n,o=i._removeChildren(n,s);return r._appendChildren(o),lr(new Ii(i.parent,t),e)}}function cr(t,e){return t.priority<e.priority||!(t.priority>e.priority)&&t.getIdentity()<e.getIdentity()}function hr(t){const e=t.nodeBefore;if(e&&e.is(\"text\"))return new Ii(e,e.data.length);const n=t.nodeAfter;return n&&n.is(\"text\")?new Ii(n,0):t}function ur(t){if(t.offset==t.parent.data.length)return new Ii(t.parent.parent,t.parent.index+1);if(0===t.offset)return new Ii(t.parent.parent,t.parent.index);const e=t.parent.data.slice(t.offset);return t.parent._data=t.parent.data.slice(0,t.offset),t.parent.parent._insertChildren(t.parent.index+1,new Rn(e)),new Ii(t.parent.parent,t.parent.index+1)}function dr(t,e){const n=t.data.length;return t._data+=e.data,e._remove(),new Ii(t,n)}const fr=[Rn,qi,jn,$i,er];function mr(t){return t&&(t.is(\"containerElement\")||t.is(\"documentFragment\"))}function pr(t){const e=or(t.start),n=or(t.end);if(!e||!n||e!==n)throw new g(\"view-writer-invalid-range-container\")}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const gr=t=>{const e=t.createElement(\"br\");return e.dataset.ckeFiller=!0,e},wr=t=>t.createTextNode(\" \"),br=7;let vr=\"\";for(let t=0;t<br;t++)vr+=\"​\";function _r(t){return t instanceof Text&&t.data.substr(0,br)===vr}function yr(t){return t.data.length==br&&_r(t)}function kr(t){return _r(t)?t.data.slice(br):t.data}const xr=new WeakMap;function Ar(t,e){let n=xr.get(e);return n||(n=e(window.document),xr.set(e,n)),t.isEqualNode(n)}function Cr(t,e){if(e.keyCode==Qi.arrowleft){const t=e.domTarget.ownerDocument.defaultView.getSelection();if(1==t.rangeCount&&t.getRangeAt(0).collapsed){const e=t.getRangeAt(0).startContainer,n=t.getRangeAt(0).startOffset;_r(e)&&n<=br&&t.collapse(e,0)}}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Tr(t,e,n){let i,r;if(n=n||function(t,e){return t===e},e.length<t.length){const n=t;t=e,e=n,i=\"delete\",r=\"insert\"}else i=\"insert\",r=\"delete\";const s=t.length,o=e.length,a=o-s,l={},c={};function h(a){const h=(void 0!==c[a-1]?c[a-1]:-1)+1,u=void 0!==c[a+1]?c[a+1]:-1,d=h>u?-1:1;l[a+d]&&(l[a]=l[a+d].slice(0)),l[a]||(l[a]=[]),l[a].push(h>u?i:r);let f=Math.max(h,u),m=f-a;for(;m<s&&f<o&&n(t[m],e[f]);)m++,f++,l[a].push(\"equal\");return f}let u,d=0;do{for(u=-d;u<a;u++)c[u]=h(u);for(u=a+d;u>a;u--)c[u]=h(u);c[a]=h(a),d++}while(c[a]!==o);return l[a].slice(1)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Sr(t,e,n){t.insertBefore(n,t.childNodes[e]||null)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Pr(t){const e=t.parentNode;e&&e.removeChild(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Er(t){return\"[object Text]\"==Object.prototype.toString.call(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Or{constructor(t,e){this.domDocuments=new Set,this.domConverter=t,this.markedAttributes=new Set,this.markedChildren=new Set,this.markedTexts=new Set,this.selection=e,this._inlineFiller=null,this.isFocused=!1,this._fakeSelectionContainer=null}markToSync(t,e){if(\"text\"===t)this.domConverter.mapViewToDom(e.parent)&&this.markedTexts.add(e);else{if(!this.domConverter.mapViewToDom(e))return;if(\"attributes\"===t)this.markedAttributes.add(e);else{if(\"children\"!==t)throw new g(\"view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.\");this.markedChildren.add(e)}}}render(){let t;this._inlineFiller&&!this._isSelectionInInlineFiller()&&this._removeInlineFiller(),this._inlineFiller?t=this._getInlineFillerPosition():this._needsInlineFillerAtSelection()&&(t=this.selection.getFirstPosition(),this.markedChildren.add(t.parent));for(const e of this.markedTexts)!this.markedChildren.has(e.parent)&&this.domConverter.mapViewToDom(e.parent)&&this._updateText(e,{inlineFillerPosition:t});for(const t of this.markedAttributes)this._updateAttrs(t);for(const e of this.markedChildren)this._updateChildren(e,{inlineFillerPosition:t});if(t){const e=this.domConverter.viewPositionToDom(t),n=e.parent.ownerDocument;_r(e.parent)?this._inlineFiller=e.parent:this._inlineFiller=this._addInlineFiller(n,e.parent,e.offset)}else this._inlineFiller=null;this._updateSelection(),this._updateFocus(),this.markedTexts.clear(),this.markedAttributes.clear(),this.markedChildren.clear()}_addInlineFiller(t,e,n){const i=e instanceof Array?e:e.childNodes,r=i[n];if(Er(r))return r.data=vr+r.data,r;{const r=t.createTextNode(vr);return Array.isArray(e)?i.splice(n,0,r):Sr(e,n,r),r}}_getInlineFillerPosition(){const t=this.selection.getFirstPosition();return t.parent.is(\"text\")?Ii.createBefore(this.selection.getFirstPosition().parent):t}_isSelectionInInlineFiller(){if(1!=this.selection.rangeCount||!this.selection.isCollapsed)return!1;const t=this.selection.getFirstPosition(),e=this.domConverter.viewPositionToDom(t);return!!(e&&Er(e.parent)&&_r(e.parent))}_removeInlineFiller(){const t=this._inlineFiller;if(!_r(t))throw new g(\"view-renderer-filler-was-lost: The inline filler node was lost.\");yr(t)?t.parentNode.removeChild(t):t.data=t.data.substr(br),this._inlineFiller=null}_needsInlineFillerAtSelection(){if(1!=this.selection.rangeCount||!this.selection.isCollapsed)return!1;const t=this.selection.getFirstPosition(),e=t.parent,n=t.offset;if(!this.domConverter.mapViewToDom(e.root))return!1;if(!e.is(\"element\"))return!1;if(!function(t){if(\"false\"==t.getAttribute(\"contenteditable\"))return!1;const e=t.findAncestor(t=>t.hasAttribute(\"contenteditable\"));return!e||\"true\"==e.getAttribute(\"contenteditable\")}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e))return!1;if(n===e.getFillerOffset())return!1;const i=t.nodeBefore,r=t.nodeAfter;return!(i instanceof Rn||r instanceof Rn)}_updateText(t,e){const n=this.domConverter.findCorrespondingDomText(t),i=this.domConverter.viewToDom(t,n.ownerDocument),r=n.data;let s=i.data;const o=e.inlineFillerPosition;o&&o.parent==t.parent&&o.offset==t.index&&(s=vr+s),r!=s&&(n.data=s)}_updateAttrs(t){const e=this.domConverter.mapViewToDom(t),n=Array.from(e.attributes).map(t=>t.name),i=t.getAttributeKeys();for(const n of i)e.setAttribute(n,t.getAttribute(n));for(const i of n)t.hasAttribute(i)||e.removeAttribute(i)}_updateChildren(t,e){const n=this.domConverter,i=n.mapViewToDom(t);if(!i)return;const r=i.ownerDocument,s=e.inlineFillerPosition,o=i.childNodes,a=Array.from(n.viewChildrenToDom(t,r,{bind:!0}));s&&s.parent==t&&this._addInlineFiller(r,a,s.offset);const l=Tr(o,a,function(t,e){if(t===e)return!0;if(Er(t)&&Er(e))return t.data===e.data;if(Ar(t,n.blockFiller)&&Ar(e,n.blockFiller))return!0;return!1});let c=0;const h=new Set;for(const t of l)\"insert\"===t?(Sr(i,c,a[c]),c++):\"delete\"===t?(h.add(o[c]),Pr(o[c])):c++;for(const t of h)t.parentNode||this.domConverter.unbindDomElement(t)}_updateSelection(){if(0===this.selection.rangeCount)return this._removeDomSelection(),void this._removeFakeSelection();const t=this.domConverter.mapViewToDom(this.selection.editableElement);this.isFocused&&t&&(this.selection.isFake?this._updateFakeSelection(t):(this._removeFakeSelection(),this._updateDomSelection(t)))}_updateFakeSelection(t){const e=t.ownerDocument;let n=this._fakeSelectionContainer;n||(this._fakeSelectionContainer=n=e.createElement(\"div\"),Object.assign(n.style,{position:\"fixed\",top:0,left:\"-9999px\",width:\"42px\"}),n.appendChild(e.createTextNode(\" \"))),n.parentElement||t.appendChild(n),n.firstChild.data=this.selection.fakeSelectionLabel||\" \";const i=e.getSelection(),r=e.createRange();i.removeAllRanges(),r.selectNodeContents(n),i.addRange(r),this.domConverter.bindFakeSelection(n,this.selection)}_updateDomSelection(t){const e=t.ownerDocument.defaultView.getSelection();if(!this._domSelectionNeedsUpdate(e))return;const n=this.domConverter.viewPositionToDom(this.selection.anchor),i=this.domConverter.viewPositionToDom(this.selection.focus);t.focus(),e.collapse(n.parent,n.offset),e.extend(i.parent,i.offset)}_domSelectionNeedsUpdate(t){if(!this.domConverter.isDomSelectionCorrect(t))return!0;const e=t&&this.domConverter.domSelectionToView(t);return(!e||!this.selection.isEqual(e))&&!(!this.selection.isCollapsed&&this.selection.isSimilar(e))}_removeDomSelection(){for(const t of this.domDocuments){if(t.getSelection().rangeCount){const e=t.activeElement,n=this.domConverter.mapDomToView(e);e&&n&&t.getSelection().removeAllRanges()}}}_removeFakeSelection(){const t=this._fakeSelectionContainer;t&&t.remove()}_updateFocus(){if(this.isFocused){const t=this.selection.editableElement;t&&this.domConverter.focus(t)}}}R(Or,xi);var Rr={window:window,document:document};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Mr(t){let e=0;for(;t.previousSibling;)t=t.previousSibling,e++;return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Fr(t){const e=[];for(;t&&t.nodeType!=Node.DOCUMENT_NODE;)e.unshift(t),t=t.parentNode;return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Vr{constructor(t={}){this.blockFiller=t.blockFiller||gr,this.preElements=[\"pre\"],this.blockElements=[\"p\",\"div\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\"],this._domToViewMapping=new WeakMap,this._viewToDomMapping=new WeakMap,this._fakeSelectionMapping=new WeakMap}bindFakeSelection(t,e){this._fakeSelectionMapping.set(t,new Li(e))}fakeSelectionToView(t){return this._fakeSelectionMapping.get(t)}bindElements(t,e){this._domToViewMapping.set(t,e),this._viewToDomMapping.set(e,t)}unbindDomElement(t){const e=this._domToViewMapping.get(t);if(e){this._domToViewMapping.delete(t),this._viewToDomMapping.delete(e);for(const e of Array.from(t.childNodes))this.unbindDomElement(e)}}bindDocumentFragments(t,e){this._domToViewMapping.set(t,e),this._viewToDomMapping.set(e,t)}viewToDom(t,e,n={}){if(t.is(\"text\")){const n=this._processDataFromViewText(t);return e.createTextNode(n)}{if(this.mapViewToDom(t))return this.mapViewToDom(t);let i;if(t.is(\"documentFragment\"))i=e.createDocumentFragment(),n.bind&&this.bindDocumentFragments(i,t);else{if(t.is(\"uiElement\"))return i=t.render(e),n.bind&&this.bindElements(i,t),i;i=e.createElement(t.name),n.bind&&this.bindElements(i,t);for(const e of t.getAttributeKeys())i.setAttribute(e,t.getAttribute(e))}if(n.withChildren||void 0===n.withChildren)for(const r of this.viewChildrenToDom(t,e,n))i.appendChild(r);return i}}*viewChildrenToDom(t,e,n={}){const i=t.getFillerOffset&&t.getFillerOffset();let r=0;for(const s of t.getChildren())i===r&&(yield this.blockFiller(e)),yield this.viewToDom(s,e,n),r++;i===r&&(yield this.blockFiller(e))}viewRangeToDom(t){const e=this.viewPositionToDom(t.start),n=this.viewPositionToDom(t.end),i=document.createRange();return i.setStart(e.parent,e.offset),i.setEnd(n.parent,n.offset),i}viewPositionToDom(t){const e=t.parent;if(e.is(\"text\")){const n=this.findCorrespondingDomText(e);if(!n)return null;let i=t.offset;return _r(n)&&(i+=br),{parent:n,offset:i}}{let n,i,r;if(0===t.offset){if(!(n=this.mapViewToDom(e)))return null;r=n.childNodes[0]}else{const e=t.nodeBefore;if(!(i=e.is(\"text\")?this.findCorrespondingDomText(e):this.mapViewToDom(t.nodeBefore)))return null;n=i.parentNode,r=i.nextSibling}if(Er(r)&&_r(r))return{parent:r,offset:br};return{parent:n,offset:i?Mr(i)+1:0}}}domToView(t,e={}){if(Ar(t,this.blockFiller))return null;const n=this.getParentUIElement(t,this._domToViewMapping);if(n)return n;if(Er(t)){if(yr(t))return null;{const e=this._processDataFromDomText(t);return\"\"===e?null:new Rn(e)}}if(this.isComment(t))return null;{if(this.mapDomToView(t))return this.mapDomToView(t);let n;if(this.isDocumentFragment(t))n=new rr,e.bind&&this.bindDocumentFragments(t,n);else{const i=e.keepOriginalCase?t.tagName:t.tagName.toLowerCase();n=new Dn(i),e.bind&&this.bindElements(t,n);const r=t.attributes;for(let t=r.length-1;t>=0;t--)n._setAttribute(r[t].name,r[t].value)}if(e.withChildren||void 0===e.withChildren)for(const i of this.domChildrenToView(t,e))n._appendChildren(i);return n}}*domChildrenToView(t,e={}){for(let n=0;n<t.childNodes.length;n++){const i=t.childNodes[n],r=this.domToView(i,e);null!==r&&(yield r)}}domSelectionToView(t){if(1===t.rangeCount){let e=t.getRangeAt(0).startContainer;Er(e)&&(e=e.parentNode);const n=this.fakeSelectionToView(e);if(n)return n}const e=this.isDomSelectionBackward(t),n=[];for(let e=0;e<t.rangeCount;e++){const i=t.getRangeAt(e),r=this.domRangeToView(i);r&&n.push(r)}return new Li(n,{backward:e})}domRangeToView(t){const e=this.domPositionToView(t.startContainer,t.startOffset),n=this.domPositionToView(t.endContainer,t.endOffset);return e&&n?new Ni(e,n):null}domPositionToView(t,e){if(Ar(t,this.blockFiller))return this.domPositionToView(t.parentNode,Mr(t));const n=this.mapDomToView(t);if(n&&n.is(\"uiElement\"))return Ii.createBefore(n);if(Er(t)){if(yr(t))return this.domPositionToView(t.parentNode,Mr(t));const n=this.findCorrespondingViewText(t);let i=e;return n?(_r(t)&&(i=(i-=br)<0?0:i),new Ii(n,i)):null}if(0===e){const e=this.mapDomToView(t);if(e)return new Ii(e,0)}else{const n=t.childNodes[e-1],i=Er(n)?this.findCorrespondingViewText(n):this.mapDomToView(n);if(i&&i.parent)return new Ii(i.parent,i.index+1)}return null}mapDomToView(t){return this.getParentUIElement(t)||this._domToViewMapping.get(t)}findCorrespondingViewText(t){if(yr(t))return null;const e=this.getParentUIElement(t);if(e)return e;const n=t.previousSibling;if(n){if(!this.isElement(n))return null;const t=this.mapDomToView(n);if(t){return t.nextSibling instanceof Rn?t.nextSibling:null}}else{const e=this.mapDomToView(t.parentNode);if(e){const t=e.getChild(0);return t instanceof Rn?t:null}}return null}mapViewToDom(t){return this._viewToDomMapping.get(t)}findCorrespondingDomText(t){const e=t.previousSibling;return e&&this.mapViewToDom(e)?this.mapViewToDom(e).nextSibling:!e&&t.parent&&this.mapViewToDom(t.parent)?this.mapViewToDom(t.parent).childNodes[0]:null}focus(t){const e=this.mapViewToDom(t);if(e&&e.ownerDocument.activeElement!==e){const{scrollX:t,scrollY:n}=Rr.window,i=[];Nr(e,t=>{const{scrollLeft:e,scrollTop:n}=t;i.push([e,n])}),e.focus(),Nr(e,t=>{const[e,n]=i.shift();t.scrollLeft=e,t.scrollTop=n}),Rr.window.scrollTo(t,n)}}isElement(t){return t&&t.nodeType==Node.ELEMENT_NODE}isDocumentFragment(t){return t&&t.nodeType==Node.DOCUMENT_FRAGMENT_NODE}isComment(t){return t&&t.nodeType==Node.COMMENT_NODE}isDomSelectionBackward(t){if(t.isCollapsed)return!1;const e=document.createRange();e.setStart(t.anchorNode,t.anchorOffset),e.setEnd(t.focusNode,t.focusOffset);const n=e.collapsed;return e.detach(),n}getParentUIElement(t){const e=Fr(t);for(e.pop();e.length;){const t=e.pop(),n=this._domToViewMapping.get(t);if(n&&n.is(\"uiElement\"))return n}return null}isDomSelectionCorrect(t){return this._isDomSelectionPositionCorrect(t.anchorNode,t.anchorOffset)&&this._isDomSelectionPositionCorrect(t.focusNode,t.focusOffset)}_isDomSelectionPositionCorrect(t,e){if(Er(t)&&_r(t)&&e<br)return!1;if(this.isElement(t)&&_r(t.childNodes[e]))return!1;const n=this.mapDomToView(t);return!n||!n.is(\"uiElement\")}_processDataFromViewText(t){let e=t.data;if(t.getAncestors().some(t=>this.preElements.includes(t.name)))return e;if(\" \"==e.charAt(0)){const n=this._getTouchingViewTextNode(t,!1);!(n&&this._nodeEndsWithSpace(n))&&n||(e=\" \"+e.substr(1))}if(\" \"==e.charAt(e.length-1)){this._getTouchingViewTextNode(t,!0)||(e=e.substr(0,e.length-1)+\" \")}return e.replace(/ {2}/g,\"  \")}_nodeEndsWithSpace(t){if(t.getAncestors().some(t=>this.preElements.includes(t.name)))return!1;const e=this._processDataFromViewText(t);return\" \"==e.charAt(e.length-1)}_processDataFromDomText(t){let e=t.data;if(Ir(t,this.preElements))return kr(t);e=e.replace(/[ \\n\\t\\r]{1,}/g,\" \");const n=this._getTouchingDomTextNode(t,!1),i=this._getTouchingDomTextNode(t,!0);return n&&!/[^\\S\\u00A0]/.test(n.data.charAt(n.data.length-1))||(e=e.replace(/^ /,\"\")),i||_r(t)||(e=e.replace(/ $/,\"\")),e=(e=kr(new Text(e))).replace(/ \\u00A0/g,\"  \"),n&&!/[^\\S\\u00A0]/.test(n.data.charAt(n.data.length-1))||(e=e.replace(/^\\u00A0/,\" \")),i&&\" \"!=i.data.charAt(0)||(e=e.replace(/\\u00A0( *)$/,\" $1\")),e}_getTouchingViewTextNode(t,e){const n=new Fi({startPosition:e?Ii.createAfter(t):Ii.createBefore(t),direction:e?\"forward\":\"backward\"});for(const t of n){if(t.item.is(\"containerElement\"))return null;if(t.item.is(\"textProxy\"))return t.item}return null}_getTouchingDomTextNode(t,e){if(!t.parentNode)return null;const n=e?\"nextNode\":\"previousNode\",i=t.ownerDocument,r=Fr(t)[0],s=i.createTreeWalker(r,NodeFilter.SHOW_TEXT);s.currentNode=t;const o=s[n]();if(null!==o){const e=function(t,e){const n=Fr(t),i=Fr(e);let r=0;for(;n[r]==i[r]&&n[r];)r++;return 0===r?null:n[r-1]}(t,o);if(e&&!Ir(t,this.blockElements,e)&&!Ir(o,this.blockElements,e))return o}return null}}function Ir(t,e,n){let i=Fr(t);return n&&(i=i.slice(i.indexOf(n)+1)),i.some(t=>t.tagName&&e.includes(t.tagName.toLowerCase()))}function Nr(t,e){for(;t&&t!=Rr.document;)e(t),t=t.parentNode}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Dr(t){if(t){if(t.defaultView)return t instanceof t.defaultView.Document;if(t.ownerDocument&&t.ownerDocument.defaultView)return t instanceof t.ownerDocument.defaultView.Node}return!1}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Br(t){return\"[object Window]\"==Object.prototype.toString.apply(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var Lr=bi({},A,{listenTo(t,...e){if(Dr(t)||Br(t)){const n=this._getProxyEmitter(t)||new jr(t);n.attach(...e),t=n}A.listenTo.call(this,t,...e)},stopListening(t,e,n){if(Dr(t)||Br(t)){const e=this._getProxyEmitter(t);if(!e)return;t=e}A.stopListening.call(this,t,e,n),t instanceof jr&&t.detach(e)},_getProxyEmitter(t){return e=this,n=Ur(t),e[k]&&e[k][n]?e[k][n].emitter:null;var e,n}});class jr{constructor(t){C(this,Ur(t)),this._domNode=t}}function Ur(t){return t[\"data-ck-expando\"]||(t[\"data-ck-expando\"]=_())}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */bi(jr.prototype,A,{attach(t,e,n={}){if(this._domListeners&&this._domListeners[t])return;const i=this._createDomListener(t,!!n.useCapture);this._domNode.addEventListener(t,i,!!n.useCapture),this._domListeners||(this._domListeners={}),this._domListeners[t]=i},detach(t){let e;!this._domListeners[t]||(e=this._events[t])&&e.callbacks.length||this._domListeners[t].removeListener()},_createDomListener(t,e){const n=e=>{this.fire(t,e)};return n.removeListener=(()=>{this._domNode.removeEventListener(t,n,e),delete this._domListeners[t]}),n}});class zr{constructor(t){this.view=t,this.document=t.document,this.isEnabled=!1}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1}destroy(){this.disable(),this.stopListening()}}R(zr,Lr);var qr=\"__lodash_hash_undefined__\";var Wr=function(t){return this.__data__.set(t,qr),this};var Hr=function(t){return this.__data__.has(t)};function $r(t){var e=-1,n=t?t.length:0;for(this.__data__=new Pt;++e<n;)this.add(t[e])}$r.prototype.add=$r.prototype.push=Wr,$r.prototype.has=Hr;var Kr=$r;var Gr=function(t,e){for(var n=-1,i=t.length;++n<i;)if(e(t[n],n,t))return!0;return!1},Yr=1,Jr=2;var Qr=function(t,e,n,i,r,s){var o=r&Jr,a=t.length,l=e.length;if(a!=l&&!(o&&l>a))return!1;var c=s.get(t);if(c)return c==e;var h=-1,u=!0,d=r&Yr?new Kr:void 0;for(s.set(t,e);++h<a;){var f=t[h],m=e[h];if(i)var p=o?i(m,f,h,e,t,s):i(f,m,h,t,e,s);if(void 0!==p){if(p)continue;u=!1;break}if(d){if(!Gr(e,function(t,e){if(!d.has(e)&&(f===t||n(f,t,i,r,s)))return d.add(e)})){u=!1;break}}else if(f!==m&&!n(f,m,i,r,s)){u=!1;break}}return s.delete(t),u},Xr=1,Zr=2,ts=\"[object Boolean]\",es=\"[object Date]\",ns=\"[object Error]\",is=\"[object Map]\",rs=\"[object Number]\",ss=\"[object RegExp]\",os=\"[object Set]\",as=\"[object String]\",ls=\"[object Symbol]\",cs=\"[object ArrayBuffer]\",hs=\"[object DataView]\",us=Ke?Ke.prototype:void 0,ds=us?us.valueOf:void 0;var fs=function(t,e,n,i,r,s,o){switch(n){case hs:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case cs:return!(t.byteLength!=e.byteLength||!i(new Ie(t),new Ie(e)));case ts:case es:return+t==+e;case ns:return t.name==e.name&&t.message==e.message;case rs:return t!=+t?e!=+e:t==+e;case ss:case as:return t==e+\"\";case is:var a=je;case os:var l=s&Zr;if(a||(a=He),t.size!=e.size&&!l)return!1;var c=o.get(t);return c?c==e:(s|=Xr,o.set(t,e),Qr(a(t),a(e),i,r,s,o));case ls:if(ds)return ds.call(t)==ds.call(e)}return!1},ms=2;var ps=function(t,e,n,i,r,s){var o=r&ms,a=he(t),l=a.length;if(l!=he(e).length&&!o)return!1;for(var c=l;c--;){var h=a[c];if(!(o?h in e:Bt(e,h)))return!1}var u=s.get(t);if(u)return u==e;var d=!0;s.set(t,e);for(var f=o;++c<l;){var m=t[h=a[c]],p=e[h];if(i)var g=o?i(p,m,h,e,t,s):i(m,p,h,t,e,s);if(!(void 0===g?m===p||n(m,p,i,r,s):g)){d=!1;break}f||(f=\"constructor\"==h)}if(d&&!f){var w=t.constructor,b=e.constructor;w!=b&&\"constructor\"in t&&\"constructor\"in e&&!(\"function\"==typeof w&&w instanceof w&&\"function\"==typeof b&&b instanceof b)&&(d=!1)}return s.delete(t),d},gs={};gs[\"[object Float32Array]\"]=gs[\"[object Float64Array]\"]=gs[\"[object Int8Array]\"]=gs[\"[object Int16Array]\"]=gs[\"[object Int32Array]\"]=gs[\"[object Uint8Array]\"]=gs[\"[object Uint8ClampedArray]\"]=gs[\"[object Uint16Array]\"]=gs[\"[object Uint32Array]\"]=!0,gs[\"[object Arguments]\"]=gs[\"[object Array]\"]=gs[\"[object ArrayBuffer]\"]=gs[\"[object Boolean]\"]=gs[\"[object DataView]\"]=gs[\"[object Date]\"]=gs[\"[object Error]\"]=gs[\"[object Function]\"]=gs[\"[object Map]\"]=gs[\"[object Number]\"]=gs[\"[object Object]\"]=gs[\"[object RegExp]\"]=gs[\"[object Set]\"]=gs[\"[object String]\"]=gs[\"[object WeakMap]\"]=!1;var ws=Object.prototype.toString;var bs=function(t){return o(t)&&Ht(t.length)&&!!gs[ws.call(t)]},vs=2,_s=\"[object Arguments]\",ys=\"[object Array]\",ks=\"[object Object]\",xs=Object.prototype.hasOwnProperty;var As=function(t,e,n,i,r,o){var a=te(t),l=te(e),c=ys,h=ys;a||(c=(c=Me(t))==_s?ks:c),l||(h=(h=Me(e))==_s?ks:h);var u=c==ks&&!s(t),d=h==ks&&!s(e),f=c==h;if(f&&!u)return o||(o=new Mt),a||bs(t)?Qr(t,e,n,i,r,o):fs(t,e,c,n,i,r,o);if(!(r&vs)){var m=u&&xs.call(t,\"__wrapped__\"),p=d&&xs.call(e,\"__wrapped__\");if(m||p){var g=m?t.value():t,w=p?e.value():e;return o||(o=new Mt),n(g,w,i,r,o)}}return!!f&&(o||(o=new Mt),ps(t,e,n,i,r,o))};var Cs=function t(e,n,i,r,s){return e===n||(null==e||null==n||!$(e)&&!o(n)?e!=e&&n!=n:As(e,n,t,i,r,s))};var Ts=function(t,e,n){var i=(n=\"function\"==typeof n?n:void 0)?n(t,e):void 0;return void 0===i?Cs(t,e,n):!!i};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ss extends zr{constructor(t){super(t),this._config={childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0},this.domConverter=t.domConverter,this.renderer=t._renderer,this._domElements=[],this._mutationObserver=new window.MutationObserver(this._onMutations.bind(this))}flush(){this._onMutations(this._mutationObserver.takeRecords())}observe(t){this._domElements.push(t),this.isEnabled&&this._mutationObserver.observe(t,this._config)}enable(){super.enable();for(const t of this._domElements)this._mutationObserver.observe(t,this._config)}disable(){super.disable(),this._mutationObserver.disconnect()}destroy(){super.destroy(),this._mutationObserver.disconnect()}_onMutations(t){if(0===t.length)return;const e=this.domConverter,n=new Map,i=new Set;for(const n of t)if(\"childList\"===n.type){const t=e.mapDomToView(n.target);if(t&&t.is(\"uiElement\"))continue;t&&!this._isBogusBrMutation(n)&&i.add(t)}for(const r of t){const t=e.mapDomToView(r.target);if((!t||!t.is(\"uiElement\"))&&\"characterData\"===r.type){const t=e.findCorrespondingViewText(r.target);t&&!i.has(t.parent)?n.set(t,{type:\"text\",oldText:t.data,newText:kr(r.target),node:t}):!t&&_r(r.target)&&i.add(e.mapDomToView(r.target.parentNode))}}const r=[];for(const t of n.values())this.renderer.markToSync(\"text\",t.node),r.push(t);for(const t of i){const n=e.mapViewToDom(t),i=Array.from(t.getChildren()),s=Array.from(e.domChildrenToView(n));Ts(i,s,a)||(this.renderer.markToSync(\"children\",t),r.push({type:\"children\",oldChildren:i,newChildren:s,node:t}))}const s=t[0].target.ownerDocument.getSelection();let o=null;if(s&&s.anchorNode){const t=e.domPositionToView(s.anchorNode,s.anchorOffset),n=e.domPositionToView(s.focusNode,s.focusOffset);t&&n&&(o=new Li(t))._setFocus(n)}function a(t,e){if(!Array.isArray(t))return t===e||!(!t.is(\"text\")||!e.is(\"text\"))&&t.data===e.data}this.document.fire(\"mutations\",r,o),this.view.render()}_isBogusBrMutation(t){let e=null;return null===t.nextSibling&&0===t.removedNodes.length&&1==t.addedNodes.length&&(e=this.domConverter.domToView(t.addedNodes[0],{withChildren:!1})),e&&e.is(\"element\",\"br\")}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ps{constructor(t,e,n){this.view=t,this.document=t.document,this.domEvent=e,this.domTarget=e.target,bi(this,n)}get target(){return this.view.domConverter.mapDomToView(this.domTarget)}preventDefault(){this.domEvent.preventDefault()}stopPropagation(){this.domEvent.stopPropagation()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Es extends zr{constructor(t){super(t),this.useCapture=!1}observe(t){(\"string\"==typeof this.domEventType?[this.domEventType]:this.domEventType).forEach(e=>{this.listenTo(t,e,(t,e)=>{this.isEnabled&&this.onDomEvent(e)},{useCapture:this.useCapture})})}fire(t,e,n){this.isEnabled&&this.document.fire(t,new Ps(this.view,e,n))}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Os extends Es{constructor(t){super(t),this.domEventType=[\"keydown\",\"keyup\"]}onDomEvent(t){this.fire(t.type,t,{keyCode:t.keyCode,altKey:t.altKey,ctrlKey:t.ctrlKey||t.metaKey,shiftKey:t.shiftKey,get keystroke(){return Xi(this)}})}}var Rs=Date.now,Ms=\"Expected a function\",Fs=Math.max,Vs=Math.min;var Is=function(t,e,n){var i,r,s,o,a,l=0,c=0,h=!1,u=!1,d=!0;if(\"function\"!=typeof t)throw new TypeError(Ms);function f(e){var n=i,s=r;return i=r=void 0,c=e,o=t.apply(s,n)}function m(t){var n=t-l;return!l||n>=e||n<0||u&&t-c>=s}function p(){var t=Rs();if(m(t))return g(t);a=setTimeout(p,function(t){var n=e-(t-l);return u?Vs(n,s-(t-c)):n}(t))}function g(t){return clearTimeout(a),a=void 0,d&&i?f(t):(i=r=void 0,o)}function w(){var t=Rs(),n=m(t);if(i=arguments,r=this,l=t,n){if(void 0===a)return function(t){return c=t,a=setTimeout(p,e),h?f(t):o}(l);if(u)return clearTimeout(a),a=setTimeout(p,e),f(l)}return void 0===a&&(a=setTimeout(p,e)),o}return e=Zn(e)||0,$(n)&&(h=!!n.leading,s=(u=\"maxWait\"in n)?Fs(Zn(n.maxWait)||0,e):s,d=\"trailing\"in n?!!n.trailing:d),w.cancel=function(){void 0!==a&&clearTimeout(a),l=c=0,i=r=a=void 0},w.flush=function(){return void 0===a?o:g(Rs())},w};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ns extends zr{constructor(t){super(t),this._fireSelectionChangeDoneDebounced=Is(t=>this.document.fire(\"selectionChangeDone\",t),200)}observe(){const t=this.document;var e;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */t.on(\"keydown\",(n,i)=>{t.selection.isFake&&((e=i.keyCode)==Qi.arrowright||e==Qi.arrowleft||e==Qi.arrowup||e==Qi.arrowdown)&&this.isEnabled&&(i.preventDefault(),this._handleSelectionMove(i.keyCode))},{priority:\"lowest\"})}destroy(){super.destroy(),this._fireSelectionChangeDoneDebounced.cancel()}_handleSelectionMove(t){const e=this.document.selection,n=new Li(e.getRanges(),{backward:e.isBackward,fake:!1});t!=Qi.arrowleft&&t!=Qi.arrowup||n._setTo(n.getFirstPosition()),t!=Qi.arrowright&&t!=Qi.arrowdown||n._setTo(n.getLastPosition());const i={oldSelection:e,newSelection:n,domSelection:null};this.document.fire(\"selectionChange\",i),this._fireSelectionChangeDoneDebounced(i)}}var Ds={error(t,e){console.error(w(t),e)},warn(t,e){console.warn(w(t),e)}};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Bs extends zr{constructor(t){super(t),this.mutationObserver=t.getObserver(Ss),this.selection=this.document.selection,this.domConverter=t.domConverter,this._documents=new WeakSet,this._fireSelectionChangeDoneDebounced=Is(t=>this.document.fire(\"selectionChangeDone\",t),200),this._clearInfiniteLoopInterval=setInterval(()=>this._clearInfiniteLoop(),1e3),this._loopbackCounter=0}observe(t){const e=t.ownerDocument;this._documents.has(e)||(this.listenTo(e,\"selectionchange\",()=>{this._handleSelectionChange(e)}),this._documents.add(e))}destroy(){super.destroy(),clearInterval(this._clearInfiniteLoopInterval),this._fireSelectionChangeDoneDebounced.cancel()}_handleSelectionChange(t){if(!this.isEnabled||!this.document.isFocused&&!this.document.isReadOnly)return;this.mutationObserver.flush();const e=t.defaultView.getSelection(),n=this.domConverter.domSelectionToView(e);if(!this.selection.isEqual(n)||!this.domConverter.isDomSelectionCorrect(e))if(++this._loopbackCounter>60)Ds.warn(\"selectionchange-infinite-loop: Selection change observer detected an infinite rendering loop.\");else if(this.selection.isSimilar(n))this.view.render();else{const t={oldSelection:this.selection,newSelection:n,domSelection:e};this.document.fire(\"selectionChange\",t),this._fireSelectionChangeDoneDebounced(t)}}_clearInfiniteLoop(){this._loopbackCounter=0}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ls extends Es{constructor(t){super(t),this.domEventType=[\"focus\",\"blur\"],this.useCapture=!0;const e=this.document;e.on(\"focus\",()=>{e.isFocused=!0,this._renderTimeoutId=setTimeout(()=>t.render(),50)}),e.on(\"blur\",(n,i)=>{const r=e.selection.editableElement;null!==r&&r!==i.target||(e.isFocused=!1,t.render())})}onDomEvent(t){this.fire(t.type,t)}destroy(){this._renderTimeoutId&&clearTimeout(this._renderTimeoutId),super.destroy()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class js extends Es{constructor(t){super(t),this.domEventType=[\"compositionstart\",\"compositionupdate\",\"compositionend\"];const e=this.document;e.on(\"compositionstart\",()=>{e.isComposing=!0}),e.on(\"compositionend\",()=>{e.isComposing=!1})}onDomEvent(t){this.fire(t.type,t)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Us(t){return\"[object Range]\"==Object.prototype.toString.apply(t)}var zs=function(t){return!!t&&1===t.nodeType&&o(t)&&!f(t)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function qs(t){const e=t.ownerDocument.defaultView.getComputedStyle(t);return{top:parseInt(e.borderTopWidth,10),right:parseInt(e.borderRightWidth,10),bottom:parseInt(e.borderBottomWidth,10),left:parseInt(e.borderLeftWidth,10)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ws{constructor(t){const e=Us(t);if(Object.defineProperty(this,\"_source\",{value:t._source||t,writable:!0,enumerable:!1}),zs(t)||e){const n=e?t.startContainer:t;n.ownerDocument&&n.ownerDocument.body.contains(n)||Ds.warn(\"rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.\",{source:t}),$s(this,e?Ws.getDomRangeRects(t)[0]:t.getBoundingClientRect())}else if(Br(t)){const{innerWidth:e,innerHeight:n}=t;$s(this,{top:0,right:e,bottom:n,left:0,width:e,height:n})}else $s(this,t)}clone(){return new Ws(this)}moveTo(t,e){return this.top=e,this.right=t+this.width,this.bottom=e+this.height,this.left=t,this}moveBy(t,e){return this.top+=e,this.right+=t,this.left+=t,this.bottom+=e,this}getIntersection(t){const e={top:Math.max(this.top,t.top),right:Math.min(this.right,t.right),bottom:Math.min(this.bottom,t.bottom),left:Math.max(this.left,t.left)};return e.width=e.right-e.left,e.height=e.bottom-e.top,e.width<0||e.height<0?null:new Ws(e)}getIntersectionArea(t){const e=this.getIntersection(t);return e?e.getArea():0}getArea(){return this.width*this.height}getVisible(){const t=this._source;let e=this.clone();if(!Ks(t)){let n=t.parentNode||t.commonAncestorContainer;for(;n&&!Ks(n);){const t=new Ws(n),i=e.getIntersection(t);if(!i)return null;i.getArea()<e.getArea()&&(e=i),n=n.parentNode}}return e}isEqual(t){for(const e of Hs)if(this[e]!==t[e])return!1;return!0}contains(t){const e=this.getIntersection(t);return!(!e||!e.isEqual(t))}excludeScrollbarsAndBorders(){const t=this._source;let e,n;if(Br(t))e=t.innerWidth-t.document.documentElement.clientWidth,n=t.innerHeight-t.document.documentElement.clientHeight;else{const i=qs(this._source);e=t.offsetWidth-t.clientWidth,n=t.offsetHeight-t.clientHeight,this.moveBy(i.left,i.top)}return this.width-=e,this.right-=e,this.height-=n,this.bottom-=n,this}static getDomRangeRects(t){const e=[],n=Array.from(t.getClientRects());if(n.length)for(const t of n)e.push(new Ws(t));else{let n=t.startContainer;Er(n)&&(n=n.parentNode);const i=new Ws(n.getBoundingClientRect());i.right=i.left,i.width=0,e.push(i)}return e}}const Hs=[\"top\",\"right\",\"bottom\",\"left\",\"width\",\"height\"];function $s(t,e){for(const n of Hs)t[n]=e[n]}function Ks(t){return!!zs(t)&&t===t.ownerDocument.body}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Gs({target:t,viewportOffset:e=0}){const n=eo(t);let i=n,r=null;for(;i;){let s;Js(s=no(i==n?t:r),()=>io(t,i));const o=io(t,i);Ys(i,o,e),i.parent!=i?(r=i.frameElement,i=i.parent):i=null}}function Ys(t,e,n){const i=e.clone().moveBy(0,n),r=e.clone().moveBy(0,-n),s=new Ws(t).excludeScrollbarsAndBorders();if(![r,i].every(t=>s.contains(t))){let{scrollX:o,scrollY:a}=t;Xs(r,s)?a-=s.top-e.top+n:Qs(i,s)&&(a+=e.bottom-s.bottom+n),Zs(e,s)?o-=s.left-e.left+n:to(e,s)&&(o+=e.right-s.right+n),t.scrollTo(o,a)}}function Js(t,e){const n=eo(t);let i,r;for(;t!=n.document.body;)r=e(),(i=new Ws(t).excludeScrollbarsAndBorders()).contains(r)||(Xs(r,i)?t.scrollTop-=i.top-r.top:Qs(r,i)&&(t.scrollTop+=r.bottom-i.bottom),Zs(r,i)?t.scrollLeft-=i.left-r.left:to(r,i)&&(t.scrollLeft+=r.right-i.right)),t=t.parentNode}function Qs(t,e){return t.bottom>e.bottom}function Xs(t,e){return t.top<e.top}function Zs(t,e){return t.left<e.left}function to(t,e){return t.right>e.right}function eo(t){return Us(t)?t.startContainer.ownerDocument.defaultView:t.ownerDocument.defaultView}function no(t){if(Us(t)){let e=t.commonAncestorContainer;return Er(e)&&(e=e.parentNode),e}return t.parentNode}function io(t,e){const n=eo(t),i=new Ws(t);if(n===e)return i;{let t=n;for(;t!=e;){const e=t.frameElement,n=new Ws(e).excludeScrollbarsAndBorders();i.moveBy(n.left,n.top),t=t.parent}}return i}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */Object.assign({},{scrollViewportToShowTarget:Gs,scrollAncestorsToShowTarget:function(t){Js(no(t),()=>new Ws(t))}});class ro{constructor(){this.document=new Ui,this.domConverter=new Vr,this._renderer=new Or(this.domConverter,this.document.selection),this._renderer.bind(\"isFocused\").to(this.document),this.domRoots=new Map,this._observers=new Map,this._ongoingChange=!1,this._renderingInProgress=!1,this._postFixersInProgress=!1,this._writer=new sr(this.document),this.addObserver(Ss),this.addObserver(Bs),this.addObserver(Ls),this.addObserver(Os),this.addObserver(Ns),this.addObserver(js),this.document.on(\"keydown\",Cr),nr(this),this.on(\"render\",()=>{this._render()})}attachDomRoot(t,e=\"main\"){const n=this.document.getRoot(e);n._name=t.tagName.toLowerCase(),this.domRoots.set(e,t),this.domConverter.bindElements(t,n),this._renderer.markToSync(\"children\",n),this._renderer.domDocuments.add(t.ownerDocument),n.on(\"change:children\",(t,e)=>this._renderer.markToSync(\"children\",e)),n.on(\"change:attributes\",(t,e)=>this._renderer.markToSync(\"attributes\",e)),n.on(\"change:text\",(t,e)=>this._renderer.markToSync(\"text\",e));for(const n of this._observers.values())n.observe(t,e)}getDomRoot(t=\"main\"){return this.domRoots.get(t)}addObserver(t){let e=this._observers.get(t);if(e)return e;e=new t(this),this._observers.set(t,e);for(const[t,n]of this.domRoots)e.observe(n,t);return e.enable(),e}getObserver(t){return this._observers.get(t)}disableObservers(){for(const t of this._observers.values())t.disable()}enableObservers(){for(const t of this._observers.values())t.enable()}scrollToTheSelection(){const t=this.document.selection.getFirstRange();t&&Gs({target:this.domConverter.viewRangeToDom(t),viewportOffset:20})}focus(){if(!this.document.isFocused){const t=this.document.selection.editableElement;t?(this.domConverter.focus(t),this.render()):Ds.warn(\"view-focus-no-selection: There is no selection in any editable to focus.\")}}change(t){if(this._renderingInProgress||this._postFixersInProgress)throw new g(\"cannot-change-view-tree: Attempting to make changes to the view when it is in incorrect state: rendering or post fixers are in progress. This may cause some unexpected behaviour and inconsistency between the DOM and the view.\");this._ongoingChange?t(this._writer):(this._ongoingChange=!0,t(this._writer),this._ongoingChange=!1,this._postFixersInProgress=!0,this.document._callPostFixers(this._writer),this._postFixersInProgress=!1,this.fire(\"render\"))}render(){this.change(()=>{})}destroy(){for(const t of this._observers.values())t.destroy();this.stopListening()}_render(){this._renderingInProgress=!0,this.disableObservers(),this._renderer.render(),this.enableObservers(),this._renderingInProgress=!1}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction so(t){return f(t)?Fn(t):new Map(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(ro,xi);class oo{constructor(t){this.parent=null,this._attrs=so(t)}get index(){let t;if(!this.parent)return null;if(null===(t=this.parent.getChildIndex(this)))throw new g(\"model-node-not-found-in-parent: The node's parent does not contain this node.\");return t}get startOffset(){let t;if(!this.parent)return null;if(null===(t=this.parent.getChildStartOffset(this)))throw new g(\"model-node-not-found-in-parent: The node's parent does not contain this node.\");return t}get offsetSize(){return 1}get endOffset(){return this.parent?this.startOffset+this.offsetSize:null}get nextSibling(){const t=this.index;return null!==t&&this.parent.getChild(t+1)||null}get previousSibling(){const t=this.index;return null!==t&&this.parent.getChild(t-1)||null}get root(){let t=this;for(;t.parent;)t=t.parent;return t}get document(){return this.root==this?null:this.root.document||null}getPath(){const t=[];let e=this;for(;e.parent;)t.unshift(e.startOffset),e=e.parent;return t}getAncestors(t={includeSelf:!1,parentFirst:!1}){const e=[];let n=t.includeSelf?this:this.parent;for(;n;)e[t.parentFirst?\"push\":\"unshift\"](n),n=n.parent;return e}getCommonAncestor(t,e={}){const n=this.getAncestors(e),i=t.getAncestors(e);let r=0;for(;n[r]==i[r]&&n[r];)r++;return 0===r?null:n[r-1]}hasAttribute(t){return this._attrs.has(t)}getAttribute(t){return this._attrs.get(t)}getAttributes(){return this._attrs.entries()}getAttributeKeys(){return this._attrs.keys()}toJSON(){const t={};return this._attrs.size&&(t.attributes=[...this._attrs]),t}_clone(){return new oo(this._attrs)}_remove(){this.parent._removeChildren(this.index)}_setAttribute(t,e){this._attrs.set(t,e)}_setAttributesTo(t){this._attrs=so(t)}_removeAttribute(t){return this._attrs.delete(t)}_clearAttributes(){this._attrs.clear()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ao extends oo{constructor(t,e){super(e),this._data=t||\"\"}get offsetSize(){return this.data.length}get data(){return this._data}is(t){return\"text\"==t}toJSON(){const t=super.toJSON();return t.data=this.data,t}_clone(){return new ao(this.data,this.getAttributes())}static fromJSON(t){return new ao(t.data,t.attributes)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class lo{constructor(t,e,n){if(this.textNode=t,e<0||e>t.offsetSize)throw new g(\"model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.\");if(n<0||e+n>t.offsetSize)throw new g(\"model-textproxy-wrong-length: Given length value is incorrect.\");this.data=t.data.substring(e,e+n),this.offsetInText=e}get startOffset(){return null!==this.textNode.startOffset?this.textNode.startOffset+this.offsetInText:null}get offsetSize(){return this.data.length}get endOffset(){return null!==this.startOffset?this.startOffset+this.offsetSize:null}get isPartial(){return this.offsetSize!==this.textNode.offsetSize}get parent(){return this.textNode.parent}get root(){return this.textNode.root}get document(){return this.textNode.document}is(t){return\"textProxy\"==t}getPath(){const t=this.textNode.getPath();return t.length>0&&(t[t.length-1]+=this.offsetInText),t}getAncestors(t={includeSelf:!1,parentFirst:!1}){const e=[];let n=t.includeSelf?this:this.parent;for(;n;)e[t.parentFirst?\"push\":\"unshift\"](n),n=n.parent;return e}hasAttribute(t){return this.textNode.hasAttribute(t)}getAttribute(t){return this.textNode.getAttribute(t)}getAttributes(){return this.textNode.getAttributes()}getAttributeKeys(){return this.textNode.getAttributeKeys()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class co{constructor(t){this._nodes=[],t&&this._insertNodes(0,t)}[Symbol.iterator](){return this._nodes[Symbol.iterator]()}get length(){return this._nodes.length}get maxOffset(){return this._nodes.reduce((t,e)=>t+e.offsetSize,0)}getNode(t){return this._nodes[t]||null}getNodeIndex(t){const e=this._nodes.indexOf(t);return-1==e?null:e}getNodeStartOffset(t){const e=this.getNodeIndex(t);return null===e?null:this._nodes.slice(0,e).reduce((t,e)=>t+e.offsetSize,0)}indexToOffset(t){if(t==this._nodes.length)return this.maxOffset;const e=this._nodes[t];if(!e)throw new g(\"model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.\");return this.getNodeStartOffset(e)}offsetToIndex(t){let e=0;for(const n of this._nodes){if(t>=e&&t<e+n.offsetSize)return this.getNodeIndex(n);e+=n.offsetSize}if(e!=t)throw new g(\"model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.\");return this.length}_insertNodes(t,e){for(const t of e)if(!(t instanceof oo))throw new g(\"model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.\");this._nodes.splice(t,0,...e)}_removeNodes(t,e=1){return this._nodes.splice(t,e)}toJSON(){return this._nodes.map(t=>t.toJSON())}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ho extends oo{constructor(t,e,n){super(e),this.name=t,this._children=new co,n&&this._insertChildren(0,n)}get childCount(){return this._children.length}get maxOffset(){return this._children.maxOffset}get isEmpty(){return 0===this.childCount}is(t,e=null){return e?\"element\"==t&&e==this.name:\"element\"==t||t==this.name}getChild(t){return this._children.getNode(t)}getChildren(){return this._children[Symbol.iterator]()}getChildIndex(t){return this._children.getNodeIndex(t)}getChildStartOffset(t){return this._children.getNodeStartOffset(t)}offsetToIndex(t){return this._children.offsetToIndex(t)}getNodeByPath(t){let e=this;for(const n of t)e=e.getChild(e.offsetToIndex(n));return e}toJSON(){const t=super.toJSON();if(t.name=this.name,this._children.length>0){t.children=[];for(const e of this._children)t.children.push(e.toJSON())}return t}_clone(t=!1){const e=t?Array.from(this._children).map(t=>t._clone(!0)):null;return new ho(this.name,this.getAttributes(),e)}_appendChildren(t){this._insertChildren(this.childCount,t)}_insertChildren(t,e){const n=function(t){if(\"string\"==typeof t)return[new ao(t)];Vn(t)||(t=[t]);return Array.from(t).map(t=>\"string\"==typeof t?new ao(t):t instanceof lo?new ao(t.data,t.getAttributes()):t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e);for(const t of n)null!==t.parent&&t._remove(),t.parent=this;this._children._insertNodes(t,n)}_removeChildren(t,e=1){const n=this._children._removeNodes(t,e);for(const t of n)t.parent=null;return n}static fromJSON(t){let e=null;if(t.children){e=[];for(const n of t.children)n.name?e.push(ho.fromJSON(n)):e.push(ao.fromJSON(n))}return new ho(t.name,t.attributes,e)}}class uo{constructor(t={}){if(!t.boundaries&&!t.startPosition)throw new g(\"model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.\");const e=t.direction||\"forward\";if(\"forward\"!=e&&\"backward\"!=e)throw new g(\"model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.\",{direction:e});this.direction=e,this.boundaries=t.boundaries||null,t.startPosition?this.position=po.createFromPosition(t.startPosition):this.position=po.createFromPosition(this.boundaries[\"backward\"==this.direction?\"end\":\"start\"]),this.singleCharacters=!!t.singleCharacters,this.shallow=!!t.shallow,this.ignoreElementEnd=!!t.ignoreElementEnd,this._boundaryStartParent=this.boundaries?this.boundaries.start.parent:null,this._boundaryEndParent=this.boundaries?this.boundaries.end.parent:null,this._visitedParent=this.position.parent}[Symbol.iterator](){return this}skip(t){let e,n,i,r;do{i=this.position,r=this._visitedParent,({done:e,value:n}=this.next())}while(!e&&t(n));e||(this.position=i,this._visitedParent=r)}next(){return\"forward\"==this.direction?this._next():this._previous()}_next(){const t=this.position,e=po.createFromPosition(this.position),n=this._visitedParent;if(null===n.parent&&e.offset===n.maxOffset)return{done:!0};if(n===this._boundaryEndParent&&e.offset==this.boundaries.end.offset)return{done:!0};const i=e.textNode?e.textNode:e.nodeAfter;if(i instanceof ho)return this.shallow?e.offset++:(e.path.push(0),this._visitedParent=i),this.position=e,fo(\"elementStart\",i,t,e,1);if(i instanceof ao){let r;if(this.singleCharacters)r=1;else{let t=i.endOffset;this._boundaryEndParent==n&&this.boundaries.end.offset<t&&(t=this.boundaries.end.offset),r=t-e.offset}const s=e.offset-i.startOffset,o=new lo(i,s,r);return e.offset+=r,this.position=e,fo(\"text\",o,t,e,r)}return e.path.pop(),e.offset++,this.position=e,this._visitedParent=n.parent,this.ignoreElementEnd?this._next():fo(\"elementEnd\",n,t,e)}_previous(){const t=this.position,e=po.createFromPosition(this.position),n=this._visitedParent;if(null===n.parent&&0===e.offset)return{done:!0};if(n==this._boundaryStartParent&&e.offset==this.boundaries.start.offset)return{done:!0};const i=e.textNode?e.textNode:e.nodeBefore;if(i instanceof ho)return e.offset--,this.shallow?(this.position=e,fo(\"elementStart\",i,t,e,1)):(e.path.push(i.maxOffset),this.position=e,this._visitedParent=i,this.ignoreElementEnd?this._previous():fo(\"elementEnd\",i,t,e));if(i instanceof ao){let r;if(this.singleCharacters)r=1;else{let t=i.startOffset;this._boundaryStartParent==n&&this.boundaries.start.offset>t&&(t=this.boundaries.start.offset),r=e.offset-t}const s=e.offset-i.startOffset,o=new lo(i,s-r,r);return e.offset-=r,this.position=e,fo(\"text\",o,t,e,r)}return e.path.pop(),this.position=e,this._visitedParent=n.parent,fo(\"elementStart\",n,t,e,1)}}function fo(t,e,n,i,r){return{done:!1,value:{type:t,item:e,previousPosition:n,nextPosition:i,length:r}}}var mo=function(t){var e=t?t.length:0;return e?t[e-1]:void 0};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class po{constructor(t,e){if(!t.is(\"element\")&&!t.is(\"documentFragment\"))throw new g(\"model-position-root-invalid: Position root invalid.\");if(!(e instanceof Array)||0===e.length)throw new g(\"model-position-path-incorrect: Position path must be an array with at least one item.\",{path:e});e=t.getPath().concat(e),t=t.root,this.root=t,this.path=e}get offset(){return mo(this.path)}set offset(t){this.path[this.path.length-1]=t}get parent(){let t=this.root;for(let e=0;e<this.path.length-1;e++)t=t.getChild(t.offsetToIndex(this.path[e]));return t}get index(){return this.parent.offsetToIndex(this.offset)}get textNode(){const t=this.parent.getChild(this.index);return t instanceof ao&&t.startOffset<this.offset?t:null}get nodeAfter(){return null===this.textNode?this.parent.getChild(this.index):null}get nodeBefore(){return null===this.textNode?this.parent.getChild(this.index-1):null}get isAtStart(){return 0===this.offset}get isAtEnd(){return this.offset==this.parent.maxOffset}compareWith(t){if(this.root!=t.root)return\"different\";const e=Vi(this.path,t.path);switch(e){case\"same\":return\"same\";case\"prefix\":return\"before\";case\"extension\":return\"after\";default:return this.path[e]<t.path[e]?\"before\":\"after\"}}getLastMatchingPosition(t,e={}){e.startPosition=this;const n=new uo(e);return n.skip(t),n.position}getParentPath(){return this.path.slice(0,-1)}getAncestors(){return this.parent.is(\"documentFragment\")?[this.parent]:this.parent.getAncestors({includeSelf:!0})}getCommonPath(t){if(this.root!=t.root)return[];const e=Vi(this.path,t.path),n=\"string\"==typeof e?Math.min(this.path.length,t.path.length):e;return this.path.slice(0,n)}getCommonAncestor(t){const e=this.getAncestors(),n=t.getAncestors();let i=0;for(;e[i]==n[i]&&e[i];)i++;return 0===i?null:e[i-1]}getShiftedBy(t){const e=po.createFromPosition(this),n=e.offset+t;return e.offset=n<0?0:n,e}isAfter(t){return\"after\"==this.compareWith(t)}isBefore(t){return\"before\"==this.compareWith(t)}isEqual(t){return\"same\"==this.compareWith(t)}isTouching(t){let e=null,n=null;switch(this.compareWith(t)){case\"same\":return!0;case\"before\":e=po.createFromPosition(this),n=po.createFromPosition(t);break;case\"after\":e=po.createFromPosition(t),n=po.createFromPosition(this);break;default:return!1}let i=e.parent;for(;e.path.length+n.path.length;){if(e.isEqual(n))return!0;if(e.path.length>n.path.length){if(e.offset!==i.maxOffset)return!1;e.path=e.path.slice(0,-1),i=i.parent,e.offset++}else{if(0!==n.offset)return!1;n.path=n.path.slice(0,-1)}}}_getTransformedByDeletion(t,e){const n=po.createFromPosition(this);if(this.root!=t.root)return n;if(\"same\"==Vi(t.getParentPath(),this.getParentPath())){if(t.offset<this.offset){if(t.offset+e>this.offset)return null;n.offset-=e}}else if(\"prefix\"==Vi(t.getParentPath(),this.getParentPath())){const i=t.path.length-1;if(t.offset<=this.path[i]){if(t.offset+e>this.path[i])return null;n.path[i]-=e}}return n}_getTransformedByInsertion(t,e,n){const i=po.createFromPosition(this);if(this.root!=t.root)return i;if(\"same\"==Vi(t.getParentPath(),this.getParentPath()))(t.offset<this.offset||t.offset==this.offset&&n)&&(i.offset+=e);else if(\"prefix\"==Vi(t.getParentPath(),this.getParentPath())){const n=t.path.length-1;t.offset<=this.path[n]&&(i.path[n]+=e)}return i}_getTransformedByMove(t,e,n,i,r){let s=this._getTransformedByDeletion(t,n);return e=e._getTransformedByDeletion(t,n),s=null===s||r&&s.isEqual(t)?this._getCombined(t,e):s._getTransformedByInsertion(e,n,i)}_getCombined(t,e){const n=t.path.length-1,i=po.createFromPosition(e);return i.offset=i.offset+this.path[n]-t.offset,i.path=i.path.concat(this.path.slice(n+1)),i}static createAt(t,e){if(t instanceof po)return this.createFromPosition(t);{const n=t;if(\"end\"==e)e=n.maxOffset;else{if(\"before\"==e)return this.createBefore(n);if(\"after\"==e)return this.createAfter(n);e||(e=0)}return this.createFromParentAndOffset(n,e)}}static createAfter(t){if(!t.parent)throw new g(\"model-position-after-root: You cannot make a position after root.\",{root:t});return this.createFromParentAndOffset(t.parent,t.endOffset)}static createBefore(t){if(!t.parent)throw new g(\"model-position-before-root: You cannot make a position before root.\",{root:t});return this.createFromParentAndOffset(t.parent,t.startOffset)}static createFromParentAndOffset(t,e){if(!t.is(\"element\")&&!t.is(\"documentFragment\"))throw new g(\"model-position-parent-incorrect: Position parent have to be a element or document fragment.\");const n=t.getPath();return n.push(e),new this(t.root,n)}static createFromPosition(t){return new this(t.root,t.path.slice())}static fromJSON(t,e){if(\"$graveyard\"===t.root)return new po(e.graveyard,t.path);if(!e.getRoot(t.root))throw new g(\"model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.\",{rootName:t.root});return new po(e.getRoot(t.root),t.path)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class go{constructor(t,e=null){this.start=po.createFromPosition(t),this.end=e?po.createFromPosition(e):po.createFromPosition(t)}*[Symbol.iterator](){yield*new uo({boundaries:this,ignoreElementEnd:!0})}get isCollapsed(){return this.start.isEqual(this.end)}get isFlat(){return this.start.parent===this.end.parent}get root(){return this.start.root}containsPosition(t){return t.isAfter(this.start)&&t.isBefore(this.end)}containsRange(t,e=!1){t.isCollapsed&&(e=!1);const n=this.containsPosition(t.start)||e&&this.start.isEqual(t.start),i=this.containsPosition(t.end)||e&&this.end.isEqual(t.end);return n&&i}containsItem(t){const e=po.createBefore(t);return this.containsPosition(e)||this.start.isEqual(e)}isEqual(t){return this.start.isEqual(t.start)&&this.end.isEqual(t.end)}isIntersecting(t){return this.start.isBefore(t.end)&&this.end.isAfter(t.start)}getDifference(t){const e=[];return this.isIntersecting(t)?(this.containsPosition(t.start)&&e.push(new go(this.start,t.start)),this.containsPosition(t.end)&&e.push(new go(t.end,this.end))):e.push(go.createFromRange(this)),e}getIntersection(t){if(this.isIntersecting(t)){let e=this.start,n=this.end;return this.containsPosition(t.start)&&(e=t.start),this.containsPosition(t.end)&&(n=t.end),new go(e,n)}return null}getMinimalFlatRanges(){const t=[],e=this.start.getCommonPath(this.end).length,n=po.createFromPosition(this.start);let i=n.parent;for(;n.path.length>e+1;){const e=i.maxOffset-n.offset;0!==e&&t.push(new go(n,n.getShiftedBy(e))),n.path=n.path.slice(0,-1),n.offset++,i=i.parent}for(;n.path.length<=this.end.path.length;){const e=this.end.path[n.path.length-1],i=e-n.offset;0!==i&&t.push(new go(n,n.getShiftedBy(i))),n.offset=e,n.path.push(0)}return t}getWalker(t={}){return t.boundaries=this,new uo(t)}*getItems(t={}){t.boundaries=this,t.ignoreElementEnd=!0;const e=new uo(t);for(const t of e)yield t.item}*getPositions(t={}){t.boundaries=this;const e=new uo(t);yield e.position;for(const t of e)yield t.nextPosition}getTransformedByDelta(t){const e=[go.createFromRange(this)],n=new Set([\"insert\",\"move\",\"remove\",\"reinsert\"]);for(const i of t.operations)if(n.has(i.type))for(let n=0;n<e.length;n++){const r=e[n]._getTransformedByDocumentChange(i.type,t.type,i.targetPosition||i.position,i.howMany||i.nodes.maxOffset,i.sourcePosition);e.splice(n,1,...r),n+=r.length-1}return e}getTransformedByDeltas(t){const e=[go.createFromRange(this)];for(const n of t)for(let t=0;t<e.length;t++){const i=e[t].getTransformedByDelta(n);e.splice(t,1,...i),t+=i.length-1}for(let t=0;t<e.length;t++){const n=e[t];for(let i=t+1;i<e.length;i++){const t=e[i];(n.containsRange(t)||t.containsRange(n)||n.isEqual(t))&&e.splice(i,1)}}return e}getCommonAncestor(){return this.start.getCommonAncestor(this.end)}_getTransformedByDocumentChange(t,e,n,i,r){if(\"insert\"==t)return this._getTransformedByInsertion(n,i,!1,!1);{const t=go.createFromPositionAndShift(r,i);if(\"merge\"==e&&this.isCollapsed&&(this.start.isEqual(t.start)||this.start.isEqual(t.end))){const e=this.start.offset-t.start.offset;return[new go(n.getShiftedBy(e))]}if(\"split\"==e&&this.isCollapsed&&this.end.isEqual(t.end))return[new go(n.getShiftedBy(i))];if((t.containsPosition(this.start)||t.start.isEqual(this.start))&&this.containsPosition(t.end)&&this.end.isAfter(n)){const t=this.start._getCombined(r,n._getTransformedByDeletion(r,i)),e=this.end._getTransformedByMove(r,n,i,!1,!1);return[new go(t,e)]}if((t.containsPosition(this.end)||t.end.isEqual(this.end))&&this.containsPosition(t.start)&&this.start.isBefore(n)){const t=this.start._getTransformedByMove(r,n,i,!0,!1),e=this.end._getCombined(r,n._getTransformedByDeletion(r,i));return[new go(t,e)]}return this._getTransformedByMove(r,n,i)}}_getTransformedByInsertion(t,e,n=!1,i=!1){if(n&&this.containsPosition(t))return[new go(this.start,t),new go(t._getTransformedByInsertion(t,e,!0),this.end._getTransformedByInsertion(t,e,this.isCollapsed))];{const n=go.createFromRange(this),r=!i,s=!!n.isCollapsed||i;return n.start=n.start._getTransformedByInsertion(t,e,r),n.end=n.end._getTransformedByInsertion(t,e,s),[n]}}_getTransformedByMove(t,e,n){if(this.isCollapsed){const i=this.start._getTransformedByMove(t,e,n,!0,!1);return[new go(i)]}let i;const r=new go(t,t.getShiftedBy(n)),s=this.getDifference(r);let o=null;const a=this.getIntersection(r);1==s.length?o=new go(s[0].start._getTransformedByDeletion(t,n),s[0].end._getTransformedByDeletion(t,n)):2==s.length&&(o=new go(this.start,this.end._getTransformedByDeletion(t,n)));const l=e._getTransformedByDeletion(t,n);return i=o?o._getTransformedByInsertion(l,n,null!==a):[],a&&i.push(new go(a.start._getCombined(r.start,l),a.end._getCombined(r.start,l))),i}static createFromPositionAndShift(t,e){const n=t,i=t.getShiftedBy(e);return e>0?new this(n,i):new this(i,n)}static createFromParentsAndOffsets(t,e,n,i){return new this(po.createFromParentAndOffset(t,e),po.createFromParentAndOffset(n,i))}static createFromRange(t){return new this(t.start,t.end)}static createIn(t){return this.createFromParentsAndOffsets(t,0,t,t.maxOffset)}static createOn(t){return this.createFromPositionAndShift(po.createBefore(t),t.offsetSize)}static createCollapsedAt(t,e){const n=po.createAt(t,e),i=po.createFromPosition(n);return new go(n,i)}static createFromRanges(t){if(0===t.length)throw new g(\"range-create-from-ranges-empty-array: At least one range has to be passed.\");if(1==t.length)return this.createFromRange(t[0]);const e=t[0];t.sort((t,e)=>t.start.isAfter(e.start)?1:-1);const n=t.indexOf(e),i=new this(e.start,e.end);for(let e=n-1;e>=0&&t[e].end.isEqual(i.start);e++)i.start=po.createFromPosition(t[e].start);for(let e=n+1;e<t.length&&t[e].start.isEqual(i.end);e++)i.end=po.createFromPosition(t[e].end);return i}static fromJSON(t,e){return new this(po.fromJSON(t.start,e),po.fromJSON(t.end,e))}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class wo{constructor(){this._modelToViewMapping=new WeakMap,this._viewToModelMapping=new WeakMap,this._viewToModelLengthCallbacks=new Map,this.on(\"modelToViewPosition\",(t,e)=>{if(e.viewPosition)return;const n=this._modelToViewMapping.get(e.modelPosition.parent);e.viewPosition=this._findPositionIn(n,e.modelPosition.offset)},{priority:\"low\"}),this.on(\"viewToModelPosition\",(t,e)=>{if(e.modelPosition)return;let n=e.viewPosition.parent,i=this._viewToModelMapping.get(n);for(;!i;)n=n.parent,i=this._viewToModelMapping.get(n);const r=this._toModelOffset(e.viewPosition.parent,e.viewPosition.offset,n);e.modelPosition=po.createFromParentAndOffset(i,r)},{priority:\"low\"})}bindElements(t,e){this._modelToViewMapping.set(t,e),this._viewToModelMapping.set(e,t)}unbindViewElement(t){const e=this.toModelElement(t);this._viewToModelMapping.delete(t),this._modelToViewMapping.get(e)==t&&this._modelToViewMapping.delete(e)}unbindModelElement(t){const e=this.toViewElement(t);this._modelToViewMapping.delete(t),this._viewToModelMapping.get(e)==t&&this._viewToModelMapping.delete(e)}clearBindings(){this._modelToViewMapping=new WeakMap,this._viewToModelMapping=new WeakMap}toModelElement(t){return this._viewToModelMapping.get(t)}toViewElement(t){return this._modelToViewMapping.get(t)}toModelRange(t){return new go(this.toModelPosition(t.start),this.toModelPosition(t.end))}toViewRange(t){return new Ni(this.toViewPosition(t.start),this.toViewPosition(t.end))}toModelPosition(t){const e={viewPosition:t,mapper:this};return this.fire(\"viewToModelPosition\",e),e.modelPosition}toViewPosition(t,e={isPhantom:!1}){const n={modelPosition:t,mapper:this,isPhantom:e.isPhantom};return this.fire(\"modelToViewPosition\",n),n.viewPosition}registerViewToModelLength(t,e){this._viewToModelLengthCallbacks.set(t,e)}_toModelOffset(t,e,n){if(n!=t){return this._toModelOffset(t.parent,t.index,n)+this._toModelOffset(t,e,t)}if(t.is(\"text\"))return e;let i=0;for(let n=0;n<e;n++)i+=this.getModelLength(t.getChild(n));return i}getModelLength(t){if(this._viewToModelLengthCallbacks.get(t.name)){return this._viewToModelLengthCallbacks.get(t.name)(t)}if(this._viewToModelMapping.has(t))return 1;if(t.is(\"text\"))return t.data.length;if(t.is(\"uiElement\"))return 0;{let e=0;for(const n of t.getChildren())e+=this.getModelLength(n);return e}}_findPositionIn(t,e){let n,i=0,r=0,s=0;if(t.is(\"text\"))return new Ii(t,e);for(;r<e;)n=t.getChild(s),r+=i=this.getModelLength(n),s++;return r==e?this._moveViewPositionToTextNode(new Ii(t,s)):this._findPositionIn(n,e-(r-i))}_moveViewPositionToTextNode(t){const e=t.nodeBefore,n=t.nodeAfter;return e instanceof Rn?new Ii(e,e.data.length):n instanceof Rn?new Ii(n,0):t}}R(wo,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass bo{constructor(){this._consumable=new Map,this._textProxyRegistry=new Map}add(t,e){e=vo(e),t instanceof lo&&(t=this._getSymbolForTextProxy(t)),this._consumable.has(t)||this._consumable.set(t,new Map),this._consumable.get(t).set(e,!0)}consume(t,e){return e=vo(e),t instanceof lo&&(t=this._getSymbolForTextProxy(t)),!!this.test(t,e)&&(this._consumable.get(t).set(e,!1),!0)}test(t,e){e=vo(e),t instanceof lo&&(t=this._getSymbolForTextProxy(t));const n=this._consumable.get(t);if(void 0===n)return null;const i=n.get(e);return void 0===i?null:i}revert(t,e){e=vo(e),t instanceof lo&&(t=this._getSymbolForTextProxy(t));const n=this.test(t,e);return!1===n?(this._consumable.get(t).set(e,!0),!0):!0!==n&&null}_getSymbolForTextProxy(t){let e=null;const n=this._textProxyRegistry.get(t.startOffset);if(n){const i=n.get(t.endOffset);i&&(e=i.get(t.parent))}return e||(e=this._addSymbolForTextProxy(t.startOffset,t.endOffset,t.parent)),e}_addSymbolForTextProxy(t,e,n){const i=Symbol(\"textProxySymbol\");let r,s;return(r=this._textProxyRegistry.get(t))||(r=new Map,this._textProxyRegistry.set(t,r)),(s=r.get(e))||(s=new Map,r.set(e,s)),s.set(n,i),i}}function vo(t){const e=t.split(\":\");return e.length>1?e[0]+\":\"+e[1]:e[0]}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class _o{constructor(t={}){this.conversionApi=bi({dispatcher:this},t)}convertChanges(t,e){for(const n of t.getChanges())\"insert\"==n.type?this.convertInsert(go.createFromPositionAndShift(n.position,n.length),e):\"remove\"==n.type?this.convertRemove(n.position,n.length,n.name,e):this.convertAttribute(n.range,n.attributeKey,n.attributeOldValue,n.attributeNewValue,e);for(const n of t.getMarkersToAdd())this.convertMarkerAdd(n.name,n.range,e)}convertInsert(t,e){this.conversionApi.writer=e,this.conversionApi.consumable=this._createInsertConsumable(t);for(const e of t){const t=e.item,n={item:t,range:go.createFromPositionAndShift(e.previousPosition,e.length)};this._testAndFire(\"insert\",n);for(const e of t.getAttributeKeys())n.attributeKey=e,n.attributeOldValue=null,n.attributeNewValue=t.getAttribute(e),this._testAndFire(`attribute:${e}`,n)}this._clearConversionApi()}convertRemove(t,e,n,i){this.conversionApi.writer=i,this.fire(\"remove:\"+n,{position:t,length:e},this.conversionApi),this._clearConversionApi()}convertAttribute(t,e,n,i,r){this.conversionApi.writer=r,this.conversionApi.consumable=this._createConsumableForRange(t,`attribute:${e}`);for(const r of t){const t={item:r.item,range:go.createFromPositionAndShift(r.previousPosition,r.length),attributeKey:e,attributeOldValue:n,attributeNewValue:i};this._testAndFire(`attribute:${e}`,t)}this._clearConversionApi()}convertSelection(t,e,n){const i=Array.from(e.getMarkersAtPosition(t.getFirstPosition()));if(this.conversionApi.writer=n,this.conversionApi.consumable=this._createSelectionConsumable(t,i),this.fire(\"selection\",{selection:t},this.conversionApi),t.isCollapsed){for(const e of i){const n=e.getRange();if(!yo(t.getFirstPosition(),e,this.conversionApi.mapper))continue;const i={item:t,markerName:e.name,markerRange:n};this.conversionApi.consumable.test(t,\"addMarker:\"+e.name)&&this.fire(\"addMarker:\"+e.name,i,this.conversionApi)}for(const e of t.getAttributeKeys()){const n={item:t,range:t.getFirstRange(),attributeKey:e,attributeOldValue:null,attributeNewValue:t.getAttribute(e)};this.conversionApi.consumable.test(t,\"attribute:\"+n.attributeKey)&&this.fire(\"attribute:\"+n.attributeKey,n,this.conversionApi)}this._clearConversionApi()}}convertMarkerAdd(t,e,n){if(!e.root.document||\"$graveyard\"==e.root.rootName)return;this.conversionApi.writer=n;const i=\"addMarker:\"+t;if(e.isCollapsed){const n=new bo;return n.add(e,i),this.conversionApi.consumable=n,void this.fire(i,{markerName:t,markerRange:e},this.conversionApi)}this.conversionApi.consumable=this._createConsumableForRange(e,i);for(const n of e.getItems()){if(!this.conversionApi.consumable.test(n,i))continue;const r={item:n,range:go.createOn(n),markerName:t,markerRange:e};this.fire(i,r,this.conversionApi)}this._clearConversionApi()}convertMarkerRemove(t,e,n){e.root.document&&\"$graveyard\"!=e.root.rootName&&(this.conversionApi.writer=n,this.fire(\"removeMarker:\"+t,{markerName:t,markerRange:e},this.conversionApi),this._clearConversionApi())}_createInsertConsumable(t){const e=new bo;for(const n of t){const t=n.item;e.add(t,\"insert\");for(const n of t.getAttributeKeys())e.add(t,\"attribute:\"+n)}return e}_createConsumableForRange(t,e){const n=new bo;for(const i of t.getItems())n.add(i,e);return n}_createSelectionConsumable(t,e){const n=new bo;n.add(t,\"selection\");for(const i of e)n.add(t,\"addMarker:\"+i.name);for(const e of t.getAttributeKeys())n.add(t,\"attribute:\"+e);return n}_testAndFire(t,e){if(!this.conversionApi.consumable.test(e.item,t))return;const n=e.item.name||\"$text\";this.fire(t+\":\"+n,e,this.conversionApi)}_clearConversionApi(){delete this.conversionApi.writer,delete this.conversionApi.consumable}}function yo(t,e,n){const i=e.getRange(),r=Array.from(t.getAncestors());return r.shift(),r.reverse(),!r.some(t=>{if(i.containsItem(t)){return!!n.toViewElement(t).getCustomProperty(\"addHighlight\")}})}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(_o,A);class ko{constructor(t,e,n){this._lastRangeBackward=!1,this._ranges=[],this._attrs=new Map,t&&this.setTo(t,e,n)}get anchor(){if(this._ranges.length>0){const t=this._ranges[this._ranges.length-1];return this._lastRangeBackward?t.end:t.start}return null}get focus(){if(this._ranges.length>0){const t=this._ranges[this._ranges.length-1];return this._lastRangeBackward?t.start:t.end}return null}get isCollapsed(){return 1===this._ranges.length&&this._ranges[0].isCollapsed}get rangeCount(){return this._ranges.length}get isBackward(){return!this.isCollapsed&&this._lastRangeBackward}isEqual(t){if(this.rangeCount!=t.rangeCount)return!1;if(0===this.rangeCount)return!0;if(!this.anchor.isEqual(t.anchor)||!this.focus.isEqual(t.focus))return!1;for(const e of this._ranges){let n=!1;for(const i of t._ranges)if(e.isEqual(i)){n=!0;break}if(!n)return!1}return!0}*getRanges(){for(const t of this._ranges)yield go.createFromRange(t)}getFirstRange(){let t=null;for(const e of this._ranges)t&&!e.start.isBefore(t.start)||(t=e);return t?go.createFromRange(t):null}getLastRange(){let t=null;for(const e of this._ranges)t&&!e.end.isAfter(t.end)||(t=e);return t?go.createFromRange(t):null}getFirstPosition(){const t=this.getFirstRange();return t?po.createFromPosition(t.start):null}getLastPosition(){const t=this.getLastRange();return t?po.createFromPosition(t.end):null}setTo(t,e,n){if(null===t)this._setRanges([]);else if(t instanceof ko)this._setRanges(t.getRanges(),t.isBackward);else if(t&&\"function\"==typeof t.getRanges)this._setRanges(t.getRanges(),t.isBackward);else if(t instanceof go)this._setRanges([t],!!e&&!!e.backward);else if(t instanceof po)this._setRanges([new go(t)]);else if(t instanceof oo){const i=!!n&&!!n.backward;let r;if(\"in\"==e)r=go.createIn(t);else if(\"on\"==e)r=go.createOn(t);else{if(void 0===e)throw new g(\"model-selection-setTo-required-second-parameter: selection.setTo requires the second parameter when the first parameter is a node.\");r=go.createCollapsedAt(t,e)}this._setRanges([r],i)}else{if(!Vn(t))throw new g(\"model-selection-setTo-not-selectable: Cannot set selection to given place.\");this._setRanges(t,e&&!!e.backward)}}_setRanges(t,e=!1){const n=(t=Array.from(t)).some(t=>{if(!(t instanceof go))throw new g(\"model-selection-added-not-range: Trying to add an object that is not an instance of Range.\");return this._ranges.every(e=>!e.isEqual(t))});if(t.length!==this._ranges.length||n){this._removeAllRanges();for(const e of t)this._pushRange(e);this._lastRangeBackward=!!e,this.fire(\"change:range\",{directChange:!0})}}setFocus(t,e){if(null===this.anchor)throw new g(\"model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.\");const n=po.createAt(t,e);if(\"same\"==n.compareWith(this.focus))return;const i=this.anchor;this._ranges.length&&this._popRange(),\"before\"==n.compareWith(i)?(this._pushRange(new go(n,i)),this._lastRangeBackward=!0):(this._pushRange(new go(i,n)),this._lastRangeBackward=!1),this.fire(\"change:range\",{directChange:!0})}getAttribute(t){return this._attrs.get(t)}getAttributes(){return this._attrs.entries()}getAttributeKeys(){return this._attrs.keys()}hasAttribute(t){return this._attrs.has(t)}removeAttribute(t){this.hasAttribute(t)&&(this._attrs.delete(t),this.fire(\"change:attribute\",{attributeKeys:[t],directChange:!0}))}setAttribute(t,e){this.getAttribute(t)!==e&&(this._attrs.set(t,e),this.fire(\"change:attribute\",{attributeKeys:[t],directChange:!0}))}getSelectedElement(){if(1!==this.rangeCount)return null;const t=this.getFirstRange(),e=t.start.nodeAfter,n=t.end.nodeBefore;return e instanceof ho&&e==n?e:null}*getSelectedBlocks(){const t=new WeakSet;for(const e of this.getRanges()){const n=Ao(e.start,t);n&&(yield n);for(const n of e.getWalker())\"elementEnd\"==n.type&&xo(n.item,t)&&(yield n.item);const i=Ao(e.end,t);i&&!e.end.isTouching(po.createAt(i))&&(yield i)}}containsEntireContent(t=this.anchor.root){const e=po.createAt(t),n=po.createAt(t,\"end\");return e.isTouching(this.getFirstPosition())&&n.isTouching(this.getLastPosition())}_pushRange(t){this._checkRange(t),this._ranges.push(go.createFromRange(t))}_checkRange(t){for(let e=0;e<this._ranges.length;e++)if(t.isIntersecting(this._ranges[e]))throw new g(\"model-selection-range-intersects: Trying to add a range that intersects with another range from selection.\",{addedRange:t,intersectingRange:this._ranges[e]})}_removeAllRanges(){for(;this._ranges.length>0;)this._popRange()}_popRange(){this._ranges.pop()}}function xo(t,e){return!e.has(t)&&(e.add(t),t.document.model.schema.isBlock(t)&&t.parent)}function Ao(t,e){const n=t.parent.getAncestors({parentFirst:!0,includeSelf:!0}),i=n.find(t=>xo(t,e));return n.forEach(t=>e.add(t)),i}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(ko,A);class Co extends go{constructor(t,e){super(t,e),function(){const t=new Set([\"insert\",\"move\",\"remove\",\"reinsert\"]);this.listenTo(this.root.document.model,\"applyOperation\",(e,n)=>{const i=n[0];i.isDocumentOperation&&t.has(i.type)&&function(t){const e=t.type,n=t.delta.batch;let i,r;\"insert\"==e?i=go.createFromPositionAndShift(t.position,t.nodes.maxOffset):(i=go.createFromPositionAndShift(t.getMovedRangeStart(),t.howMany),r=t.sourcePosition);const s=i.end.offset-i.start.offset;let o=i.start;\"move\"!=e&&\"remove\"!=e&&\"reinsert\"!=e||(o=o._getTransformedByInsertion(r,s));const a=this._getTransformedByDocumentChange(e,t.delta.type,o,s,r);\"move\"!=e&&\"remove\"!=e&&\"reinsert\"!=e||3!=a.length||(a[2]=i);const l=go.createFromRanges(a),c=!l.isEqual(this),h=this.containsPosition(o),u=r&&(this.containsPosition(r)||this.start.isEqual(r)),d=h||u;if(c){const t=go.createFromRange(this);this.start=l.start,this.end=l.end,this.fire(\"change:range\",t,{type:e,batch:n,range:i,sourcePosition:r})}else d&&this.fire(\"change:content\",go.createFromRange(this),{type:e,batch:n,range:i,sourcePosition:r})}.call(this,i)},{priority:\"low\"})}.call(this)}detach(){this.stopListening()}}R(Co,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst To=\"selection:\";class So{constructor(t){this._selection=new Po(t),this._selection.delegate(\"change:range\").to(this),this._selection.delegate(\"change:attribute\").to(this)}get isCollapsed(){return this._selection.isCollapsed}get anchor(){return this._selection.anchor}get focus(){return this._selection.focus}get rangeCount(){return this._selection.rangeCount}get hasOwnRange(){return this._selection.hasOwnRange}get isBackward(){return this._selection.isBackward}get isGravityOverridden(){return this._selection.isGravityOverridden}get _ranges(){return this._selection._ranges}getRanges(){return this._selection.getRanges()}getFirstPosition(){return this._selection.getFirstPosition()}getLastPosition(){return this._selection.getLastPosition()}getFirstRange(){return this._selection.getFirstRange()}getLastRange(){return this._selection.getLastRange()}getSelectedBlocks(){return this._selection.getSelectedBlocks()}getSelectedElement(){return this._selection.getSelectedElement()}containsEntireContent(t){return this._selection.containsEntireContent(t)}destroy(){this._selection.destroy()}getAttributeKeys(){return this._selection.getAttributeKeys()}getAttributes(){return this._selection.getAttributes()}getAttribute(t){return this._selection.getAttribute(t)}hasAttribute(t){return this._selection.hasAttribute(t)}_setFocus(t,e){this._selection.setFocus(t,e)}_setTo(t,e,n){this._selection.setTo(t,e,n)}_setAttribute(t,e){this._selection.setAttribute(t,e)}_removeAttribute(t){this._selection.removeAttribute(t)}_getStoredAttributes(){return this._selection._getStoredAttributes()}_overrideGravity(t){this._selection.overrideGravity(t)}_restoreGravity(){this._selection.restoreGravity()}static _getStoreAttributeKey(t){return To+t}static _isStoreAttributeKey(t){return t.startsWith(To)}}R(So,A);class Po extends ko{constructor(t){super(),this._model=t.model,this._document=t,this._attributePriority=new Map,this._fixGraveyardRangesData=[],this._hasChangedRange=!1,this._overriddenGravityCounter=0,this.on(\"change:range\",()=>{for(const t of this.getRanges())if(!this._document._validateSelectionRange(t))throw new g(\"document-selection-wrong-position: Range from document selection starts or ends at incorrect position.\",{range:t})}),this.listenTo(this._document,\"change\",(t,e)=>{this._updateAttributes(!1),function(t,e){const n=t.document.differ;for(const i of n.getChanges()){if(\"insert\"!=i.type)continue;const n=i.position.parent,r=i.length===n.maxOffset;r&&t.enqueueChange(e,t=>{const e=Array.from(n.getAttributeKeys()).filter(t=>t.startsWith(To));for(const i of e)t.removeAttribute(i,n)})}}(this._model,e)}),this.listenTo(this._model,\"applyOperation\",()=>{for(;this._fixGraveyardRangesData.length;){const{liveRange:t,sourcePosition:e}=this._fixGraveyardRangesData.shift();this._fixGraveyardSelection(t,e)}this._hasChangedRange&&(this._hasChangedRange=!1,this.fire(\"change:range\",{directChange:!1}))},{priority:\"lowest\"})}get isCollapsed(){return 0===this._ranges.length?this._document._getDefaultRange().isCollapsed:super.isCollapsed}get anchor(){return super.anchor||this._document._getDefaultRange().start}get focus(){return super.focus||this._document._getDefaultRange().end}get rangeCount(){return this._ranges.length?this._ranges.length:1}get hasOwnRange(){return this._ranges.length>0}get isGravityOverridden(){return this._overriddenGravityCounter>0}destroy(){for(let t=0;t<this._ranges.length;t++)this._ranges[t].detach();this.stopListening()}*getRanges(){this._ranges.length?yield*super.getRanges():yield this._document._getDefaultRange()}getFirstRange(){return super.getFirstRange()||this._document._getDefaultRange()}getLastRange(){return super.getLastRange()||this._document._getDefaultRange()}setTo(t,e,n){super.setTo(t,e,n),this._refreshAttributes()}setFocus(t,e){super.setFocus(t,e),this._refreshAttributes()}setAttribute(t,e){if(this._setAttribute(t,e)){const e=[t];this.fire(\"change:attribute\",{attributeKeys:e,directChange:!0})}}removeAttribute(t){if(this._removeAttribute(t)){const e=[t];this.fire(\"change:attribute\",{attributeKeys:e,directChange:!0})}}overrideGravity(t){this._overriddenGravityCounter++,1==this._overriddenGravityCounter&&(t||this.on(\"change:range\",(t,e)=>{e.directChange&&(this.restoreGravity(),t.off())}),this._updateAttributes())}restoreGravity(){this._overriddenGravityCounter--,this.isGravityOverridden||this._updateAttributes()}_refreshAttributes(){this._updateAttributes(!0)}_popRange(){this._ranges.pop().detach()}_pushRange(t){const e=this._prepareRange(t);e&&this._ranges.push(e)}_prepareRange(t){if(this._checkRange(t),t.root==this._document.graveyard)return void Ds.warn(\"model-selection-range-in-graveyard: Trying to add a Range that is in the graveyard root. Range rejected.\");const e=Co.createFromRange(t);return e.on(\"change:range\",(t,n,i)=>{this._hasChangedRange=!0,e.root==this._document.graveyard&&this._fixGraveyardRangesData.push({liveRange:e,sourcePosition:i.sourcePosition})}),e}_updateAttributes(t){const e=so(this._getSurroundingAttributes()),n=so(this.getAttributes());if(t)this._attributePriority=new Map,this._attrs=new Map;else for(const[t,e]of this._attributePriority)\"low\"==e&&(this._attrs.delete(t),this._attributePriority.delete(t));this._setAttributesTo(e);const i=[];for(const[t,e]of this.getAttributes())n.has(t)&&n.get(t)===e||i.push(t);for(const[t]of n)this.hasAttribute(t)||i.push(t);i.length>0&&this.fire(\"change:attribute\",{attributeKeys:i,directChange:!1})}_setAttribute(t,e,n=!0){const i=n?\"normal\":\"low\";return(\"low\"!=i||\"normal\"!=this._attributePriority.get(t))&&(super.getAttribute(t)!==e&&(this._attrs.set(t,e),this._attributePriority.set(t,i),!0))}_removeAttribute(t,e=!0){const n=e?\"normal\":\"low\";return(\"low\"!=n||\"normal\"!=this._attributePriority.get(t))&&(this._attributePriority.set(t,n),!!super.hasAttribute(t)&&(this._attrs.delete(t),!0))}_setAttributesTo(t){const e=new Set;for(const[e,n]of this.getAttributes())t.get(e)!==n&&this._removeAttribute(e,!1);for(const[n,i]of t){this._setAttribute(n,i,!1)&&e.add(n)}return e}*_getStoredAttributes(){const t=this.getFirstPosition().parent;if(this.isCollapsed&&t.isEmpty)for(const e of t.getAttributeKeys())if(e.startsWith(To)){yield[e.substr(To.length),t.getAttribute(e)]}}_getSurroundingAttributes(){const t=this.getFirstPosition(),e=this._model.schema;let n=null;if(this.isCollapsed){const e=t.textNode?t.textNode:t.nodeBefore,i=t.textNode?t.textNode:t.nodeAfter;if(this.isGravityOverridden||(n=Eo(e)),n||(n=Eo(i)),!this.isGravityOverridden&&!n){let t=e;for(;t&&!n;)n=Eo(t=t.previousSibling)}if(!n){let t=i;for(;t&&!n;)n=Eo(t=t.nextSibling)}n||(n=this._getStoredAttributes())}else{const t=this.getFirstRange();for(const i of t){if(i.item.is(\"element\")&&e.isObject(i.item))break;\"text\"==i.type&&null===n&&(n=i.item.getAttributes())}}return n}_fixGraveyardSelection(t,e){const n=po.createFromPosition(e),i=this._model.schema.getNearestSelectionRange(n),r=this._ranges.indexOf(t);if(this._ranges.splice(r,1),t.detach(),i){const t=this._prepareRange(i);this._ranges.splice(r,0,t)}}}function Eo(t){return t instanceof lo||t instanceof ao?t.getAttributes():null}var Oo=function(t){return Pn(t,!0,!0)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Ro(t){return(t=Oo(t)).view=Io(t.view,\"container\"),n=>{n.on(\"insert:\"+t.model,(e=t.view,(t,n,i)=>{const r=e(n.item,i.writer);if(!r)return;if(!i.consumable.consume(n.item,\"insert\"))return;const s=i.mapper.toViewPosition(n.range.start);i.mapper.bindElements(n.item,r),i.writer.insert(s,r)}),{priority:t.priority||\"normal\"})};var e}function Mo(t){const e=(t=Oo(t)).model.key?t.model.key:t.model;if(t.model.values)for(const e of t.model.values)t.view[e]=Io(t.view[e],\"attribute\");else t.view=Io(t.view,\"attribute\");const n=No(t);return i=>{i.on(\"attribute:\"+e,function(t){return(e,n,i)=>{const r=t(n.attributeOldValue,i.writer),s=t(n.attributeNewValue,i.writer);if(!r&&!s)return;if(!i.consumable.consume(n.item,e.name))return;const o=i.writer,a=o.document.selection;if(n.item instanceof ko||n.item instanceof So)o.wrap(a.getFirstRange(),s);else{let t=i.mapper.toViewRange(n.range);null!==n.attributeOldValue&&r&&(t=o.unwrap(t,r)),null!==n.attributeNewValue&&s&&o.wrap(t,s)}}}(n),{priority:t.priority||\"normal\"})}}function Fo(t){let e=\"attribute:\"+((t=Oo(t)).model.key?t.model.key:t.model);if(t.model.name&&(e+=\":\"+t.model.name),t.model.values)for(const e of t.model.values)t.view[e]=Do(t.view[e]);else t.view=Do(t.view);const n=No(t);return r=>{r.on(e,(i=(i=n)||((t,e)=>({value:t,key:e.attributeKey})),(t,e,n)=>{if(!n.consumable.consume(e.item,t.name))return;const r=n.mapper.toViewElement(e.item),s=n.writer,o=i(e.attributeOldValue,e);if(null!==e.attributeOldValue&&o)if(\"class\"==o.key){const t=Array.isArray(o.value)?o.value:[o.value];for(const e of t)s.removeClass(e,r)}else if(\"style\"==o.key){const t=Object.keys(o.value);for(const e of t)s.removeStyle(e,r)}else s.removeAttribute(o.key,r);const a=i(e.attributeNewValue,e);if(null!==e.attributeNewValue&&a)if(\"class\"==a.key){const t=Array.isArray(a.value)?a.value:[a.value];for(const e of t)s.addClass(e,r)}else if(\"style\"==a.key){const t=Object.keys(a.value);for(const e of t)s.setStyle(e,a.value[e],r)}else s.setAttribute(a.key,a.value,r)}),{priority:t.priority||\"normal\"})};var i}function Vo(t){return n=>{n.on(\"addMarker:\"+t.model,(e=t.view,(t,n,i)=>{if(n.markerRange.isCollapsed)return;if(!(n.item instanceof ko||n.item instanceof So||n.item.is(\"textProxy\")))return;const r=Bo(e,n,i);if(!r)return;if(!i.consumable.consume(n.item,t.name))return;const s=Lo(r),o=i.writer,a=o.document.selection;if(n.item instanceof ko||n.item instanceof So)o.wrap(a.getFirstRange(),s,a);else{const t=i.mapper.toViewRange(n.range);o.wrap(t,s)}}),{priority:t.priority||\"normal\"}),n.on(\"addMarker:\"+t.model,function(t){return(e,n,i)=>{if(n.markerRange.isCollapsed)return;if(!(n.item instanceof ho))return;const r=Bo(t,n,i);if(!r)return;if(!i.consumable.test(n.item,e.name))return;const s=i.mapper.toViewElement(n.item);if(s&&s.getCustomProperty(\"addHighlight\")){i.consumable.consume(n.item,e.name);for(const t of go.createIn(n.item))i.consumable.consume(t.item,e.name);s.getCustomProperty(\"addHighlight\")(s,r,i.writer)}}}(t.view),{priority:t.priority||\"normal\"}),n.on(\"removeMarker:\"+t.model,function(t){return(e,n,i)=>{if(n.markerRange.isCollapsed)return;const r=Bo(t,n,i);if(!r)return;const s=i.mapper.toViewRange(n.markerRange),o=new Set(s.getItems());for(const t of o)if(t.is(\"containerElement\")&&t.getCustomProperty(\"removeHighlight\")){t.getCustomProperty(\"removeHighlight\")(t,r.id,i.writer);for(const e of Ni.createIn(t))o.delete(e)}const a=Lo(r),l=i.writer;for(const t of Array.from(o).reverse())t.is(\"textProxy\")&&l.unwrap(Ni.createOn(t),a)}}(t.view),{priority:t.priority||\"normal\"})};var e}function Io(t,e){return\"function\"==typeof t?t:(n,i)=>(function(t,e,n){\"string\"==typeof t&&(t={name:t});let i;i=\"container\"==n?e.createContainerElement(t.name,Object.assign({},t.attribute)):\"attribute\"==n?e.createAttributeElement(t.name,Object.assign({},t.attribute)):e.createUIElement(t.name,Object.assign({},t.attribute));if(t.style){const n=Object.keys(t.style);for(const r of n)e.setStyle(r,t.style[r],i)}if(t.class){const n=t.class;if(\"string\"==typeof n)e.addClass(n,i);else for(const t of n)e.addClass(t,i)}return i})(t,i,e)}function No(t){return t.model.values?(e,n)=>{const i=t.view[e];return i?i(e,n):null}:t.view}function Do(t){return\"string\"==typeof t?e=>({key:t,value:e}):\"object\"==typeof t?()=>t:t}function Bo(t,e,n){const i=\"function\"==typeof t?t(e,n):t;return i?(i.priority||(i.priority=10),i.id||(i.id=e.markerName),i):null}function Lo(t){const e=new jo(\"span\",t.attributes);return t.class&&e._addClass(t.class),t.priority&&(e._priority=t.priority),e._setCustomProperty(\"highlightDescriptorId\",t.id),e}class jo extends qi{isSimilar(t){return!!t.is(\"attributeElement\")&&this.getCustomProperty(\"highlightDescriptorId\")===t.getCustomProperty(\"highlightDescriptorId\")}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Uo{constructor(t){this.model=t,this.view=new ro,this.mapper=new wo,this.downcastDispatcher=new _o({mapper:this.mapper});const e=this.model.document,n=e.selection,i=this.model.markers;this.listenTo(e,\"change\",()=>{this.view.change(t=>{this.downcastDispatcher.convertChanges(e.differ,t),this.downcastDispatcher.convertSelection(n,i,t)})},{priority:\"low\"}),this.listenTo(this.view.document,\"selectionChange\",function(t,e){return(n,i)=>{const r=i.newSelection,s=new ko,o=[];for(const t of r.getRanges())o.push(e.toModelRange(t));s.setTo(o,{backward:r.isBackward}),s.isEqual(t.document.selection)||t.change(t=>{t.setSelection(s)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(this.model,this.mapper)),this.downcastDispatcher.on(\"insert:$text\",(t,e,n)=>{if(!n.consumable.consume(e.item,\"insert\"))return;const i=n.writer,r=n.mapper.toViewPosition(e.range.start),s=i.createText(e.item.data);i.insert(r,s)},{priority:\"lowest\"}),this.downcastDispatcher.on(\"remove\",(t,e,n)=>{const i=n.mapper.toViewPosition(e.position),r=e.position.getShiftedBy(e.length),s=n.mapper.toViewPosition(r,{isPhantom:!0}),o=new Ni(i,s),a=n.writer.remove(o.getTrimmed());for(const t of Ni.createIn(a).getItems())n.mapper.unbindViewElement(t)},{priority:\"low\"}),this.downcastDispatcher.on(\"selection\",(t,e,n)=>{const i=n.writer,r=i.document.selection;for(const t of r.getRanges())t.isCollapsed&&t.end.parent.document&&n.writer.mergeAttributes(t.start);i.setSelection(null)},{priority:\"low\"}),this.downcastDispatcher.on(\"selection\",(t,e,n)=>{const i=e.selection;if(i.isCollapsed)return;if(!n.consumable.consume(i,\"selection\"))return;const r=[];for(const t of i.getRanges()){const e=n.mapper.toViewRange(t);r.push(e)}n.writer.setSelection(r,{backward:i.isBackward})},{priority:\"low\"}),this.downcastDispatcher.on(\"selection\",(t,e,n)=>{const i=e.selection;if(!i.isCollapsed)return;if(!n.consumable.consume(i,\"selection\"))return;const r=n.writer,s=i.getFirstPosition(),o=n.mapper.toViewPosition(s),a=r.breakAttributes(o);r.setSelection(a)},{priority:\"low\"});const r=new Set,s=new sr(this.view.document);this.listenTo(t,\"applyOperation\",(e,n)=>{const i=n[0];for(const e of t.markers){if(r.has(e.name))continue;const t=e.getRange();zo(i,e)&&(r.add(e.name),this.downcastDispatcher.convertMarkerRemove(e.name,t,s),this.model.document.differ.bufferMarkerChange(e.name,t,t))}},{priority:\"high\"}),this.listenTo(t.markers,\"update\",(t,e,n)=>{n&&!r.has(e.name)&&(r.add(e.name),this.downcastDispatcher.convertMarkerRemove(e.name,n,s))}),this.listenTo(t,\"_change\",()=>{r.clear()},{priority:\"low\"}),this.view.document.roots.bindTo(this.model.document.roots).using(t=>{if(\"$graveyard\"==t.rootName)return null;const e=new Mi(t.name);return e.rootName=t.rootName,e._document=this.view.document,this.mapper.bindElements(t,e),e})}destroy(){this.view.destroy(),this.stopListening()}}function zo(t,e){const n=e.getRange();return\"insert\"==t.type||\"rename\"==t.type?qo(t.position,n):\"move\"==t.type||\"remove\"==t.type||\"reinsert\"==t.type?qo(t.targetPosition,n)||qo(t.sourcePosition,n):\"marker\"==t.type&&t.name==e.name}function qo(t,e){return e.containsPosition(t)||!e.start._getTransformedByInsertion(t,1,!0).isEqual(e.start)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(Uo,xi);class Wo{constructor(t,e=[]){this._editor=t,this._availablePlugins=new Map,this._plugins=new Map;for(const t of e)this._availablePlugins.set(t,t),t.pluginName&&this._availablePlugins.set(t.pluginName,t)}*[Symbol.iterator](){for(const t of this._plugins)\"function\"==typeof t[0]&&(yield t)}get(t){return this._plugins.get(t)}load(t,e=[]){const n=this,i=this._editor,r=new Set,s=[],o=u(t),a=u(e),l=function(t){const e=[];for(const n of t)h(n)||e.push(n);return e.length?e:null}(t);if(l){const t=\"plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.\";return Ds.error(t,{plugins:l}),Promise.reject(new g(t,{plugins:l}))}return Promise.all(o.map(c)).then(()=>s);function c(t){if(!a.includes(t)&&!n.get(t)&&!r.has(t))return function(t){return new Promise(o=>{r.add(t),t.requires&&t.requires.forEach(n=>{const i=h(n);if(e.includes(i))throw new g(\"plugincollection-required: Cannot load a plugin because one of its dependencies is listed inthe `removePlugins` option.\",{plugin:i,requiredBy:t});c(i)});const a=new t(i);n._add(t,a),s.push(a),o()})}(t).catch(e=>{throw Ds.error(\"plugincollection-load: It was not possible to load the plugin.\",{plugin:t}),e})}function h(t){return\"function\"==typeof t?t:n._availablePlugins.get(t)}function u(t){return t.map(t=>h(t)).filter(t=>!!t)}}destroy(){const t=Array.from(this).map(([,t])=>t).filter(t=>\"function\"==typeof t.destroy).map(t=>t.destroy());return Promise.all(t)}_add(t,e){this._plugins.set(t,e);const n=t.pluginName;n&&(this._plugins.has(n)?Ds.warn(\"plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.\",{pluginName:n,plugin1:this._plugins.get(n).constructor,plugin2:t}):this._plugins.set(n,e))}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ho{constructor(){this._commands=new Map}add(t,e){this._commands.set(t,e)}get(t){return this._commands.get(t)}execute(t,...e){const n=this.get(t);if(!n)throw new g(\"commandcollection-command-not-found: Command does not exist.\",{commandName:t});n.execute(...e)}*names(){yield*this._commands.keys()}*commands(){yield*this._commands.values()}[Symbol.iterator](){return this._commands[Symbol.iterator]()}destroy(){for(const t of this.commands())t.destroy()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */let $o={};function Ko(t,e){const n=Object.keys($o).length;return 1===n&&(t=Object.keys($o)[0]),0!==n&&function(t,e){return t in $o&&e in $o[t]}(t,e)?$o[t][e].replace(/ \\[context: [^\\]]+\\]$/,\"\"):e.replace(/ \\[context: [^\\]]+\\]$/,\"\")}window.CKEDITOR_TRANSLATIONS=window.CKEDITOR_TRANSLATIONS||{},window.CKEDITOR_TRANSLATIONS.add=function(t,e){$o[t]=$o[t]||{},Object.assign($o[t],e)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Go{constructor(t){this.language=t||\"en\",this.t=((...t)=>this._t(...t))}_t(t,e){let n=Ko(this.language,t);return e&&(n=n.replace(/%(\\d+)/g,(t,n)=>n<e.length?e[n]:t)),n}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Yo{constructor(){this._consumables=new Map}add(t,e){let n;t.is(\"text\")||t.is(\"documentFragment\")?this._consumables.set(t,!0):(this._consumables.has(t)?n=this._consumables.get(t):(n=new Jo,this._consumables.set(t,n)),n.add(e))}test(t,e){const n=this._consumables.get(t);return void 0===n?null:t.is(\"text\")||t.is(\"documentFragment\")?n:n.test(e)}consume(t,e){return!!this.test(t,e)&&(t.is(\"text\")||t.is(\"documentFragment\")?this._consumables.set(t,!1):this._consumables.get(t).consume(e),!0)}revert(t,e){const n=this._consumables.get(t);void 0!==n&&(t.is(\"text\")||t.is(\"documentFragment\")?this._consumables.set(t,!0):n.revert(e))}static consumablesFromElement(t){const e={name:!0,attribute:[],class:[],style:[]},n=t.getAttributeKeys();for(const t of n)\"style\"!=t&&\"class\"!=t&&e.attribute.push(t);const i=t.getClassNames();for(const t of i)e.class.push(t);const r=t.getStyleNames();for(const t of r)e.style.push(t);return e}static createFrom(t,e){if(e||(e=new Yo),t.is(\"text\"))return e.add(t),e;t.is(\"element\")&&e.add(t,Yo.consumablesFromElement(t)),t.is(\"documentFragment\")&&e.add(t);for(const n of t.getChildren())e=Yo.createFrom(n,e);return e}}class Jo{constructor(){this._canConsumeName=null,this._consumables={attribute:new Map,style:new Map,class:new Map}}add(t){t.name&&(this._canConsumeName=!0);for(const e in this._consumables)e in t&&this._add(e,t[e])}test(t){if(t.name&&!this._canConsumeName)return this._canConsumeName;for(const e in this._consumables)if(e in t){const n=this._test(e,t[e]);if(!0!==n)return n}return!0}consume(t){t.name&&(this._canConsumeName=!1);for(const e in this._consumables)e in t&&this._consume(e,t[e])}revert(t){t.name&&(this._canConsumeName=!0);for(const e in this._consumables)e in t&&this._revert(e,t[e])}_add(t,e){const n=te(e)?e:[e],i=this._consumables[t];for(const e of n){if(\"attribute\"===t&&(\"class\"===e||\"style\"===e))throw new g(\"viewconsumable-invalid-attribute: Classes and styles should be handled separately.\");i.set(e,!0)}}_test(t,e){const n=te(e)?e:[e],i=this._consumables[t];for(const e of n)if(\"attribute\"!==t||\"class\"!==e&&\"style\"!==e){const t=i.get(e);if(void 0===t)return null;if(!t)return!1}else{const t=this._test(e,[...this._consumables[e].keys()]);if(!0!==t)return t}return!0}_consume(t,e){const n=te(e)?e:[e],i=this._consumables[t];for(const e of n)\"attribute\"!==t||\"class\"!==e&&\"style\"!==e?i.set(e,!1):this._consume(e,[...this._consumables[e].keys()])}_revert(t,e){const n=te(e)?e:[e],i=this._consumables[t];for(const e of n)if(\"attribute\"!==t||\"class\"!==e&&\"style\"!==e){!1===i.get(e)&&i.set(e,!0)}else this._revert(e,[...this._consumables[e].keys()])}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Qo{constructor(){this._sourceDefinitions={},this.decorate(\"checkChild\"),this.decorate(\"checkAttribute\"),this.on(\"checkAttribute\",(t,e)=>{e[0]=new Xo(e[0])},{priority:\"highest\"}),this.on(\"checkChild\",(t,e)=>{e[0]=new Xo(e[0]),e[1]=this.getDefinition(e[1])},{priority:\"highest\"})}register(t,e){if(this._sourceDefinitions[t])throw new g(\"schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.\",{itemName:t});this._sourceDefinitions[t]=[Object.assign({},e)],this._clearCache()}extend(t,e){if(!this._sourceDefinitions[t])throw new g(\"schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.\",{itemName:t});this._sourceDefinitions[t].push(Object.assign({},e)),this._clearCache()}getDefinitions(){return this._compiledDefinitions||this._compile(),this._compiledDefinitions}getDefinition(t){let e;return e=\"string\"==typeof t?t:t.is&&(t.is(\"text\")||t.is(\"textProxy\"))?\"$text\":t.name,this.getDefinitions()[e]}isRegistered(t){return!!this.getDefinition(t)}isBlock(t){const e=this.getDefinition(t);return!(!e||!e.isBlock)}isLimit(t){const e=this.getDefinition(t);return!(!e||!e.isLimit)}isObject(t){const e=this.getDefinition(t);return!(!e||!e.isObject)}checkChild(t,e){return!!e&&this._checkContextMatch(e,t)}checkAttribute(t,e){const n=this.getDefinition(t.last);return!!n&&n.allowAttributes.includes(e)}checkMerge(t,e=null){if(t instanceof po){const e=t.nodeBefore,n=t.nodeAfter;if(!(e instanceof ho))throw new g(\"schema-check-merge-no-element-before: The node before the merge position must be an element.\");if(!(n instanceof ho))throw new g(\"schema-check-merge-no-element-after: The node after the merge position must be an element.\");return this.checkMerge(e,n)}for(const n of e.getChildren())if(!this.checkChild(t,n))return!1;return!0}addChildCheck(t){this.on(\"checkChild\",(e,[n,i])=>{if(!i)return;const r=t(n,i);\"boolean\"==typeof r&&(e.stop(),e.return=r)},{priority:\"high\"})}addAttributeCheck(t){this.on(\"checkAttribute\",(e,[n,i])=>{const r=t(n,i);\"boolean\"==typeof r&&(e.stop(),e.return=r)},{priority:\"high\"})}getLimitElement(t){let e=Array.from(t.getRanges()).reduce((t,e)=>{const n=e.getCommonAncestor();return t?t.getCommonAncestor(n,{includeSelf:!0}):n},null);for(;!this.isLimit(e)&&e.parent;)e=e.parent;return e}checkAttributeInSelection(t,e){if(t.isCollapsed)return this.checkAttribute([...t.getFirstPosition().getAncestors(),\"$text\"],e);{const n=t.getRanges();for(const t of n)for(const n of t)if(this.checkAttribute(n.item,e))return!0}return!1}getValidRanges(t,e){const n=[];for(const i of t){let t=i.start,r=i.start;const s=i.end;for(const s of i.getWalker())this.checkAttribute(s.item,e)||(r.isEqual(t)||n.push(new go(r,t)),r=s.nextPosition),t=s.nextPosition;r&&!r.isEqual(s)&&n.push(new go(r,s))}return n}getNearestSelectionRange(t,e=\"both\"){if(this.checkChild(t,\"$text\"))return new go(t);let n,i;\"both\"!=e&&\"backward\"!=e||(n=new uo({startPosition:t,direction:\"backward\"})),\"both\"!=e&&\"forward\"!=e||(i=new uo({startPosition:t}));for(const t of function*(t,e){let n=!1;for(;!n;){if(n=!0,t){const e=t.next();e.done||(n=!1,yield{walker:t,value:e.value})}if(e){const t=e.next();t.done||(n=!1,yield{walker:e,value:t.value})}}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(n,i)){const e=t.walker==n?\"elementEnd\":\"elementStart\",i=t.value;if(i.type==e&&this.isObject(i.item))return go.createOn(i.item);if(this.checkChild(i.nextPosition,\"$text\"))return new go(i.nextPosition)}return null}findAllowedParent(t,e){let n=e.parent;for(;n;){if(this.checkChild(n,t))return n;if(this.isLimit(n)||this.isObject(n))return null;n=n.parent}return null}removeDisallowedAttributes(t,e){for(const n of t){for(const t of n.getAttributeKeys())this.checkAttribute(n,t)||e.removeAttribute(t,n);n.is(\"element\")&&this.removeDisallowedAttributes(n.getChildren(),e)}}_clearCache(){this._compiledDefinitions=null}_compile(){const t={},e=this._sourceDefinitions,n=Object.keys(e);for(const i of n)t[i]=Zo(e[i],i);for(const e of n)ta(t,e);for(const e of n)ea(t,e);for(const e of n)na(t,e),ia(t,e);for(const e of n)ra(t,e),sa(t,e);this._compiledDefinitions=t}_checkContextMatch(t,e,n=e.length-1){const i=e.getItem(n);if(t.allowIn.includes(i.name)){if(0==n)return!0;{const t=this.getDefinition(i);return this._checkContextMatch(t,e,n-1)}}return!1}}R(Qo,xi);class Xo{constructor(t){if(t instanceof Xo)return t;\"string\"==typeof t?t=[t]:Array.isArray(t)||(t=t.getAncestors({includeSelf:!0})),t[0]&&\"string\"!=typeof t[0]&&t[0].is(\"documentFragment\")&&t.shift(),this._items=t.map(la)}get length(){return this._items.length}get last(){return this._items[this._items.length-1]}[Symbol.iterator](){return this._items[Symbol.iterator]()}push(t){const e=new Xo([t]);return e._items=[...this._items,...e._items],e}getItem(t){return this._items[t]}*getNames(){yield*this._items.map(t=>t.name)}endsWith(t){return Array.from(this.getNames()).join(\" \").endsWith(t)}}function Zo(t,e){const n={name:e,allowIn:[],allowContentOf:[],allowWhere:[],allowAttributes:[],allowAttributesOf:[],inheritTypesFrom:[]};return function(t,e){for(const n of t){const t=Object.keys(n).filter(t=>t.startsWith(\"is\"));for(const i of t)e[i]=n[i]}}(t,n),oa(t,n,\"allowIn\"),oa(t,n,\"allowContentOf\"),oa(t,n,\"allowWhere\"),oa(t,n,\"allowAttributes\"),oa(t,n,\"allowAttributesOf\"),oa(t,n,\"inheritTypesFrom\"),function(t,e){for(const n of t){const t=n.inheritAllFrom;t&&(e.allowContentOf.push(t),e.allowWhere.push(t),e.allowAttributesOf.push(t),e.inheritTypesFrom.push(t))}}(t,n),n}function ta(t,e){for(const n of t[e].allowContentOf)if(t[n]){aa(t,n).forEach(t=>{t.allowIn.push(e)})}delete t[e].allowContentOf}function ea(t,e){for(const n of t[e].allowWhere){const i=t[n];if(i){const n=i.allowIn;t[e].allowIn.push(...n)}}delete t[e].allowWhere}function na(t,e){for(const n of t[e].allowAttributesOf){const i=t[n];if(i){const n=i.allowAttributes;t[e].allowAttributes.push(...n)}}delete t[e].allowAttributesOf}function ia(t,e){const n=t[e];for(const e of n.inheritTypesFrom){const i=t[e];if(i){const t=Object.keys(i).filter(t=>t.startsWith(\"is\"));for(const e of t)e in n||(n[e]=i[e])}}delete n.inheritTypesFrom}function ra(t,e){const n=t[e],i=n.allowIn.filter(e=>t[e]);n.allowIn=Array.from(new Set(i))}function sa(t,e){const n=t[e];n.allowAttributes=Array.from(new Set(n.allowAttributes))}function oa(t,e,n){for(const i of t)\"string\"==typeof i[n]?e[n].push(i[n]):Array.isArray(i[n])&&e[n].push(...i[n])}function aa(t,e){const n=t[e];return(i=t,Object.keys(i).map(t=>i[t])).filter(t=>t.allowIn.includes(n.name));var i}function la(t){return\"string\"==typeof t?{name:t,*getAttributeKeys(){},getAttribute(){}}:{name:t.is(\"element\")?t.name:\"$text\",*getAttributeKeys(){yield*t.getAttributeKeys()},getAttribute:e=>t.getAttribute(e)}}class ca{constructor(t={}){this._removeIfEmpty=new Set,this._modelCursor=null,this.conversionApi=Object.assign({},t),this.conversionApi.convertItem=this._convertItem.bind(this),this.conversionApi.convertChildren=this._convertChildren.bind(this),this.conversionApi.splitToAllowedParent=this._splitToAllowedParent.bind(this)}convert(t,e,n=[\"$root\"]){this.fire(\"viewCleanup\",t),this._modelCursor=function(t,e){let n;for(const i of new Xo(t)){const t={};for(const e of i.getAttributeKeys())t[e]=i.getAttribute(e);const r=e.createElement(i.name,t);n&&e.append(r,n),n=po.createAt(r)}return n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(n,e),this.conversionApi.writer=e,this.conversionApi.consumable=Yo.createFrom(t),this.conversionApi.store={};const{modelRange:i}=this._convertItem(t,this._modelCursor),r=e.createDocumentFragment();if(i){this._removeEmptyElements();for(const t of Array.from(this._modelCursor.parent.getChildren()))e.append(t,r);r.markers=function(t,e){const n=new Set,i=new Map,r=go.createIn(t).getItems();for(const t of r)\"$marker\"==t.name&&n.add(t);for(const t of n){const n=t.getAttribute(\"data-name\"),r=po.createBefore(t);i.has(n)?i.get(n).end=po.createFromPosition(r):i.set(n,new go(po.createFromPosition(r))),e.remove(t)}return i}(r,e)}return this._modelCursor=null,this._removeIfEmpty.clear(),this.conversionApi.writer=null,this.conversionApi.store=null,r}_convertItem(t,e){const n=Object.assign({viewItem:t,modelCursor:e,modelRange:null});if(t.is(\"element\")?this.fire(\"element:\"+t.name,n,this.conversionApi):t.is(\"text\")?this.fire(\"text\",n,this.conversionApi):this.fire(\"documentFragment\",n,this.conversionApi),n.modelRange&&!(n.modelRange instanceof go))throw new g(\"view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.\");return{modelRange:n.modelRange,modelCursor:n.modelCursor}}_convertChildren(t,e){const n=new go(e);let i=e;for(const e of Array.from(t.getChildren())){const t=this._convertItem(e,i);t.modelRange instanceof go&&(n.end=t.modelRange.end,i=t.modelCursor)}return{modelRange:n,modelCursor:i}}_splitToAllowedParent(t,e){const n=this.conversionApi.schema.findAllowedParent(t,e);if(!n)return null;if(n===e.parent)return{position:e};if(this._modelCursor.parent.getAncestors().includes(n))return null;const i=this.conversionApi.writer.split(e,n);for(const t of i.range.getPositions())t.isEqual(i.position)||this._removeIfEmpty.add(t.parent);return{position:i.position,cursorParent:i.range.end.parent}}_removeEmptyElements(){let t=!1;for(const e of this._removeIfEmpty)e.isEmpty&&(this.conversionApi.writer.remove(e),this._removeIfEmpty.delete(e),t=!0);t&&this._removeEmptyElements()}}function ha(t){const e=function(t){const e=new In(t.view);return(s,o,a)=>{const l=e.match(o.viewItem);if(!l)return;l.match.name=!0;const c=(n=t.model,i=o.viewItem,r=a.writer,n instanceof Function?n(i,r):r.createElement(n));if(!c)return;if(!a.consumable.test(o.viewItem,l.match))return;const h=a.splitToAllowedParent(c,o.modelCursor);if(!h)return;a.writer.insert(c,h.position);const u=a.convertChildren(o.viewItem,po.createAt(c));a.consumable.consume(o.viewItem,l.match),o.modelRange=new go(po.createBefore(c),po.createAfter(u.modelCursor.parent)),h.cursorParent?o.modelCursor=po.createAt(h.cursorParent):o.modelCursor=o.modelRange.end};var n,i,r}(t=Oo(t)),n=fa(t),i=n?\"element:\"+n:\"element\";return n=>{n.on(i,e,{priority:t.priority||\"normal\"})}}function ua(t){ma(t=Oo(t));const e=pa(t,!0),n=fa(t),i=n?\"element:\"+n:\"element\";return n=>{n.on(i,e,{priority:t.priority||\"normal\"})}}function da(t){let e=null;(\"string\"==typeof(t=Oo(t)).view||t.view.key)&&(e=function(t){\"string\"==typeof t.view&&(t.view={key:t.view});const e=t.view.key;let n;if(\"class\"==e||\"style\"==e)n={[e]:t.view.value};else{const i=void 0===t.view.value?/[\\s\\S]*/:t.view.value;n={attribute:{[e]:i}}}t.view.name&&(n.name=t.view.name);return t.view=n,e}(t)),ma(t,e);const n=pa(t,!1);return e=>{e.on(\"element\",n,{priority:t.priority||\"low\"})}}function fa(t){return\"string\"==typeof t.view?t.view:\"object\"==typeof t.view&&\"string\"==typeof t.view.name?t.view.name:null}function ma(t,e=null){const n=null===e||(t=>t.getAttribute(e)),i=\"object\"!=typeof t.model?t.model:t.model.key,r=\"object\"!=typeof t.model?n:t.model.value;t.model={key:i,value:r}}function pa(t,e){const n=new In(t.view);return(i,r,s)=>{const o=n.match(r.viewItem);if(!o)return;const a=t.model.key,l=\"function\"==typeof t.model.value?t.model.value(r.viewItem):t.model.value;null!==l&&(e?o.match.name=!0:delete o.match.name,s.consumable.test(r.viewItem,o.match)&&(r.modelRange||(r=Object.assign(r,s.convertChildren(r.viewItem,r.modelCursor))),function(t,e,n){let i=!1;for(const r of Array.from(t.getItems()))n.schema.checkAttribute(r,e.key)&&(n.writer.setAttribute(e.key,e.value,r),i=!0);return i}(r.modelRange,{key:a,value:l},s)&&s.consumable.consume(r.viewItem,o.match)))}}R(ca,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass ga{constructor(t,e){this.model=t,this.processor=e,this.mapper=new wo,this.downcastDispatcher=new _o({mapper:this.mapper}),this.downcastDispatcher.on(\"insert:$text\",(t,e,n)=>{if(!n.consumable.consume(e.item,\"insert\"))return;const i=n.writer,r=n.mapper.toViewPosition(e.range.start),s=i.createText(e.item.data);i.insert(r,s)},{priority:\"lowest\"}),this.upcastDispatcher=new ca({schema:t.schema}),this.upcastDispatcher.on(\"text\",(t,e,n)=>{if(n.schema.checkChild(e.modelCursor,\"$text\")&&n.consumable.consume(e.viewItem)){const t=n.writer.createText(e.viewItem.data);n.writer.insert(t,e.modelCursor),e.modelRange=go.createFromPositionAndShift(e.modelCursor,t.offsetSize),e.modelCursor=e.modelRange.end}},{priority:\"lowest\"}),this.upcastDispatcher.on(\"element\",(t,e,n)=>{if(!e.modelRange&&n.consumable.consume(e.viewItem,{name:!0})){const{modelRange:t,modelCursor:i}=n.convertChildren(e.viewItem,e.modelCursor);e.modelRange=t,e.modelCursor=i}},{priority:\"lowest\"}),this.upcastDispatcher.on(\"documentFragment\",(t,e,n)=>{if(!e.modelRange&&n.consumable.consume(e.viewItem,{name:!0})){const{modelRange:t,modelCursor:i}=n.convertChildren(e.viewItem,e.modelCursor);e.modelRange=t,e.modelCursor=i}},{priority:\"lowest\"}),this.decorate(\"init\")}get(t=\"main\"){return this.stringify(this.model.document.getRoot(t))}stringify(t){const e=this.toView(t);return this.processor.toData(e)}toView(t){const e=go.createIn(t),n=new rr,i=new sr(new Ui);if(this.mapper.bindElements(t,n),this.downcastDispatcher.convertInsert(e,i),!t.is(\"documentFragment\")){const e=function(t){const e=[],n=t.root.document;if(!n)return[];const i=go.createIn(t);for(const t of n.model.markers){const n=i.getIntersection(t.getRange());n&&e.push([t.name,n])}return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(t);for(const[t,n]of e)this.downcastDispatcher.convertMarkerAdd(t,n,i)}return this.mapper.clearBindings(),n}init(t,e=\"main\"){if(this.model.document.version)throw new g(\"datacontroller-init-document-not-empty: Trying to set initial data to not empty document.\");const n=this.model.document.getRoot(e);this.model.enqueueChange(\"transparent\",e=>{e.insert(this.parse(t,n),n)})}set(t,e=\"main\"){const n=this.model.document.getRoot(e);this.model.enqueueChange(\"transparent\",e=>{e.setSelection(null),e.removeSelectionAttribute(this.model.document.selection.getAttributeKeys()),e.remove(go.createIn(n)),e.insert(this.parse(t,n),n)})}parse(t,e=\"$root\"){const n=this.processor.toView(t);return this.toModel(n,e)}toModel(t,e=\"$root\"){return this.model.change(n=>this.upcastDispatcher.convert(t,n,e))}destroy(){}}R(ga,xi);class wa{constructor(){this._dispatchersGroups=new Map}register(t,e){if(this._dispatchersGroups.has(t))throw new g(\"conversion-register-group-exists: Trying to register a group name that was already registered.\");this._dispatchersGroups.set(t,e)}for(t){const e=this._getDispatchers(t);return{add(t){return function(t,e){for(const n of t)e(n)}(e,t),this}}}elementToElement(t){this.for(\"downcast\").add(Ro(t));for(const{model:e,view:n}of ba(t))this.for(\"upcast\").add(ha({model:e,view:n,priority:t.priority}))}attributeToElement(t){this.for(\"downcast\").add(Mo(t));for(const{model:e,view:n}of ba(t))this.for(\"upcast\").add(ua({view:n,model:e,priority:t.priority}))}attributeToAttribute(t){this.for(\"downcast\").add(Fo(t));for(const{model:e,view:n}of ba(t))this.for(\"upcast\").add(da({view:n,model:e}))}_getDispatchers(t){const e=this._dispatchersGroups.get(t);if(!e)throw new g(\"conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.\");return e}}function*ba(t){if(t.model.values)for(const e of t.model.values){yield*va({key:t.model.key,value:e},t.view[e],t.upcastAlso?t.upcastAlso[e]:void 0)}else yield*va(t.model,t.view,t.upcastAlso)}function*va(t,e,n){if(yield{model:t,view:e},n){n=Array.isArray(n)?n:[n];for(const e of n)yield{model:t,view:e}}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class _a{constructor(t){this.baseVersion=t,this.isDocumentOperation=null!==this.baseVersion}_validate(){}toJSON(){const t=En(this,!0);return t.__className=this.constructor.className,delete t.delta,delete t.isDocumentOperation,t}static get className(){return\"engine.model.operation.Operation\"}static fromJSON(t){return new this(t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ya{constructor(t){this.markers=new Map,this._children=new co,t&&this._insertChildren(0,t)}[Symbol.iterator](){return this.getChildren()}get childCount(){return this._children.length}get maxOffset(){return this._children.maxOffset}get isEmpty(){return 0===this.childCount}get root(){return this}get parent(){return null}is(t){return\"documentFragment\"==t}getChild(t){return this._children.getNode(t)}getChildren(){return this._children[Symbol.iterator]()}getChildIndex(t){return this._children.getNodeIndex(t)}getChildStartOffset(t){return this._children.getNodeStartOffset(t)}getPath(){return[]}getNodeByPath(t){let e=this;for(const n of t)e=e.getChild(e.offsetToIndex(n));return e}offsetToIndex(t){return this._children.offsetToIndex(t)}toJSON(){const t=[];for(const e of this._children)t.push(e.toJSON());return t}static fromJSON(t){const e=[];for(const n of t)n.name?e.push(ho.fromJSON(n)):e.push(ao.fromJSON(n));return new ya(e)}_appendChildren(t){this._insertChildren(this.childCount,t)}_insertChildren(t,e){const n=function(t){if(\"string\"==typeof t)return[new ao(t)];Vn(t)||(t=[t]);return Array.from(t).map(t=>\"string\"==typeof t?new ao(t):t instanceof lo?new ao(t.data,t.getAttributes()):t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(e);for(const t of n)null!==t.parent&&t._remove(),t.parent=this;this._children._insertNodes(t,n)}_removeChildren(t,e=1){const n=this._children._removeNodes(t,e);for(const t of n)t.parent=null;return n}}function ka(t,e){const n=(e=Aa(e)).reduce((t,e)=>t+e.offsetSize,0),i=t.parent;Ta(t);const r=t.index;return i._insertChildren(r,e),Ca(i,r+e.length),Ca(i,r),new go(t,t.getShiftedBy(n))}function xa(t){if(!t.isFlat)throw new g(\"operation-utils-remove-range-not-flat: Trying to remove a range which starts and ends in different element.\");const e=t.start.parent;Ta(t.start),Ta(t.end);const n=e._removeChildren(t.start.index,t.end.index-t.start.index);return Ca(e,t.start.index),n}function Aa(t){const e=[];t instanceof Array||(t=[t]);for(let n=0;n<t.length;n++)if(\"string\"==typeof t[n])e.push(new ao(t[n]));else if(t[n]instanceof lo)e.push(new ao(t[n].data,t[n].getAttributes()));else if(t[n]instanceof ya||t[n]instanceof co)for(const i of t[n])e.push(i);else t[n]instanceof oo&&e.push(t[n]);for(let t=1;t<e.length;t++){const n=e[t],i=e[t-1];n instanceof ao&&i instanceof ao&&Sa(n,i)&&(e.splice(t-1,2,new ao(i.data+n.data,i.getAttributes())),t--)}return e}function Ca(t,e){const n=t.getChild(e-1),i=t.getChild(e);if(n&&i&&n.is(\"text\")&&i.is(\"text\")&&Sa(n,i)){const r=new ao(n.data+i.data,n.getAttributes());t._removeChildren(e-1,2),t._insertChildren(e-1,r)}}function Ta(t){const e=t.textNode,n=t.parent;if(e){const i=t.offset-e.startOffset,r=e.index;n._removeChildren(r,1);const s=new ao(e.data.substr(0,i),e.getAttributes()),o=new ao(e.data.substr(i),e.getAttributes());n._insertChildren(r,[s,o])}}function Sa(t,e){const n=t.getAttributes(),i=e.getAttributes();for(const t of n){if(t[1]!==e.getAttribute(t[0]))return!1;i.next()}return i.next().done}var Pa=function(t,e){return Cs(t,e)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ea extends _a{constructor(t,e,n,i,r){super(r),this.range=go.createFromRange(t),this.key=e,this.oldValue=void 0===n?null:n,this.newValue=void 0===i?null:i}get type(){return null===this.oldValue?\"addAttribute\":null===this.newValue?\"removeAttribute\":\"changeAttribute\"}clone(){return new Ea(this.range,this.key,this.oldValue,this.newValue,this.baseVersion)}getReversed(){return new Ea(this.range,this.key,this.newValue,this.oldValue,this.baseVersion+1)}_validate(){for(const t of this.range.getItems()){if(null!==this.oldValue&&!Pa(t.getAttribute(this.key),this.oldValue))throw new g(\"attribute-operation-wrong-old-value: Changed node has different attribute value than operation's old attribute value.\",{item:t,key:this.key,value:this.oldValue});if(null===this.oldValue&&null!==this.newValue&&t.hasAttribute(this.key))throw new g(\"attribute-operation-attribute-exists: The attribute with given key already exists.\",{node:t,key:this.key})}}_execute(){Pa(this.oldValue,this.newValue)||function(t,e,n){Ta(t.start),Ta(t.end);for(const i of t.getItems()){const t=i.is(\"textProxy\")?i.textNode:i;null!==n?t._setAttribute(e,n):t._removeAttribute(e),Ca(t.parent,t.index)}Ca(t.end.parent,t.end.index)}(this.range,this.key,this.newValue)}static get className(){return\"engine.model.operation.AttributeOperation\"}static fromJSON(t,e){return new Ea(go.fromJSON(t.range,e),t.key,t.oldValue,t.newValue,t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Oa extends _a{constructor(t,e,n,i){super(i),this.sourcePosition=po.createFromPosition(t),this.howMany=e,this.targetPosition=po.createFromPosition(n),this.isSticky=!1}get type(){return\"move\"}clone(){const t=new this.constructor(this.sourcePosition,this.howMany,this.targetPosition,this.baseVersion);return t.isSticky=this.isSticky,t}getMovedRangeStart(){return this.targetPosition._getTransformedByDeletion(this.sourcePosition,this.howMany)}getReversed(){const t=this.sourcePosition._getTransformedByInsertion(this.targetPosition,this.howMany),e=new this.constructor(this.getMovedRangeStart(),this.howMany,t,this.baseVersion+1);return e.isSticky=this.isSticky,e}_validate(){const t=this.sourcePosition.parent,e=this.targetPosition.parent,n=this.sourcePosition.offset,i=this.targetPosition.offset;if(!t||!e)throw new g(\"move-operation-position-invalid: Source position or target position is invalid.\");if(n+this.howMany>t.maxOffset)throw new g(\"move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.\");if(t===e&&n<i&&i<n+this.howMany)throw new g(\"move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.\");if(this.sourcePosition.root==this.targetPosition.root&&\"prefix\"==Vi(this.sourcePosition.getParentPath(),this.targetPosition.getParentPath())){const t=this.sourcePosition.path.length-1;if(this.targetPosition.path[t]>=n&&this.targetPosition.path[t]<n+this.howMany)throw new g(\"move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.\")}}_execute(){!function(t,e){if(!t.isFlat)throw new g(\"operation-utils-move-range-not-flat: Trying to move a range which starts and ends in different element.\");const n=xa(t);ka(e=e._getTransformedByDeletion(t.start,t.end.offset-t.start.offset),n)}(go.createFromPositionAndShift(this.sourcePosition,this.howMany),this.targetPosition)}static get className(){return\"engine.model.operation.MoveOperation\"}static fromJSON(t,e){const n=po.fromJSON(t.sourcePosition,e),i=po.fromJSON(t.targetPosition,e),r=new this(n,t.howMany,i,t.baseVersion);return t.isSticky&&(r.isSticky=!0),r}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ra extends Oa{get position(){return this.targetPosition}set position(t){this.targetPosition=t}get type(){return\"reinsert\"}getReversed(){const t=this.sourcePosition._getTransformedByInsertion(this.targetPosition,this.howMany);return new Ma(this.getMovedRangeStart(),this.howMany,t,this.baseVersion+1)}_validate(){if(super._validate(),!this.sourcePosition.root.document)throw new g(\"reinsert-operation-on-detached-item: Cannot reinsert detached item.\");if(!this.targetPosition.root.document)throw new g(\"reinsert-operation-to-detached-parent: Cannot reinsert item to detached parent.\")}static get className(){return\"engine.model.operation.ReinsertOperation\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ma extends Oa{get type(){return\"remove\"}getReversed(){const t=this.sourcePosition._getTransformedByInsertion(this.targetPosition,this.howMany);return new Ra(this.getMovedRangeStart(),this.howMany,t,this.baseVersion+1)}_validate(){if(super._validate(),!this.sourcePosition.root.document)throw new g(\"remove-operation-on-detached-item: Cannot remove detached item.\")}static get className(){return\"engine.model.operation.RemoveOperation\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Fa extends _a{constructor(t,e,n){super(n),this.position=po.createFromPosition(t),this.nodes=new co(Aa(e))}get type(){return\"insert\"}clone(){const t=new co([...this.nodes].map(t=>t._clone(!0)));return new Fa(this.position,t,this.baseVersion)}getReversed(){const t=this.position.root.document.graveyard,e=new po(t,[0]);return new Ma(this.position,this.nodes.maxOffset,e,this.baseVersion+1)}_validate(){const t=this.position.parent;if(!t||t.maxOffset<this.position.offset)throw new g(\"insert-operation-position-invalid: Insertion position is invalid.\")}_execute(){const t=this.nodes;this.nodes=new co([...t].map(t=>t._clone(!0))),ka(this.position,t)}static get className(){return\"engine.model.operation.InsertOperation\"}static fromJSON(t,e){const n=[];for(const e of t.nodes)e.name?n.push(ho.fromJSON(e)):n.push(ao.fromJSON(e));return new Fa(po.fromJSON(t.position,e),n,t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Va extends _a{constructor(t,e,n,i,r){super(r),this.name=t,this.oldRange=e?go.createFromRange(e):null,this.newRange=n?go.createFromRange(n):null,this._markers=i}get type(){return\"marker\"}clone(){return new Va(this.name,this.oldRange,this.newRange,this._markers,this.baseVersion)}getReversed(){return new Va(this.name,this.newRange,this.oldRange,this._markers,this.baseVersion+1)}_execute(){const t=this.newRange?\"_set\":\"_remove\";this._markers[t](this.name,this.newRange,!0)}toJSON(){const t=super.toJSON();return delete t._markers,t}static get className(){return\"engine.model.operation.MarkerOperation\"}static fromJSON(t,e){return new Va(t.name,t.oldRange?go.fromJSON(t.oldRange,e):null,t.newRange?go.fromJSON(t.newRange,e):null,e.model.markers,t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ia extends _a{get type(){return\"noop\"}clone(){return new Ia(this.baseVersion)}getReversed(){return new Ia(this.baseVersion+1)}_execute(){}static get className(){return\"engine.model.operation.NoOperation\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Na extends _a{constructor(t,e,n,i){super(i),this.position=t,this.oldName=e,this.newName=n}get type(){return\"rename\"}clone(){return new Na(po.createFromPosition(this.position),this.oldName,this.newName,this.baseVersion)}getReversed(){return new Na(po.createFromPosition(this.position),this.newName,this.oldName,this.baseVersion+1)}_validate(){const t=this.position.nodeAfter;if(!(t instanceof ho))throw new g(\"rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.\");if(t.name!==this.oldName)throw new g(\"rename-operation-wrong-name: Element to change has different name than operation's old name.\")}_execute(){this.position.nodeAfter.name=this.newName}static get className(){return\"engine.model.operation.RenameOperation\"}static fromJSON(t,e){return new Na(po.fromJSON(t.position,e),t.oldName,t.newName,t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Da extends _a{constructor(t,e,n,i,r){super(r),this.root=t,this.key=e,this.oldValue=n,this.newValue=i}get type(){return null===this.oldValue?\"addRootAttribute\":null===this.newValue?\"removeRootAttribute\":\"changeRootAttribute\"}clone(){return new Da(this.root,this.key,this.oldValue,this.newValue,this.baseVersion)}getReversed(){return new Da(this.root,this.key,this.newValue,this.oldValue,this.baseVersion+1)}_validate(){if(this.root!=this.root.root||this.root.is(\"documentFragment\"))throw new g(\"rootattribute-operation-not-a-root: The element to change is not a root element.\",{root:this.root,key:this.key});if(null!==this.oldValue&&this.root.getAttribute(this.key)!==this.oldValue)throw new g(\"rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation's old attribute value.\",{root:this.root,key:this.key});if(null===this.oldValue&&null!==this.newValue&&this.root.hasAttribute(this.key))throw new g(\"rootattribute-operation-attribute-exists: The attribute with given key already exists.\",{root:this.root,key:this.key})}_execute(){null!==this.newValue?this.root._setAttribute(this.key,this.newValue):this.root._removeAttribute(this.key)}static get className(){return\"engine.model.operation.RootAttributeOperation\"}static fromJSON(t,e){if(!e.getRoot(t.root))throw new g(\"rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.\",{rootName:t});return new Da(e.getRoot(t.root),t.key,t.oldValue,t.newValue,t.baseVersion)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Ba={};Ba[Ea.className]=Ea,Ba[Fa.className]=Fa,Ba[Va.className]=Va,Ba[Oa.className]=Oa,Ba[Ia.className]=Ia,Ba[_a.className]=_a,Ba[Ra.className]=Ra,Ba[Ma.className]=Ma,Ba[Na.className]=Na,Ba[Da.className]=Da;class La{static fromJSON(t,e){return Ba[t.__className].fromJSON(t,e)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const ja=new Map;class Ua{static fromJSON(t,e){if(!ja.has(t.__className))throw new g(\"delta-fromjson-no-deserializer: This delta has no defined deserializer\",{name:t.__className});const n=new(ja.get(t.__className));for(const i of t.operations)n.addOperation(La.fromJSON(i,e));for(const e in t)\"__className\"!=e&&void 0===n[e]&&(n[e]=t[e]);return n}static register(t){ja.set(t.className,t)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class za{constructor(){this.batch=null,this.operations=[]}get baseVersion(){return this.operations.length>0?this.operations[0].baseVersion:null}set baseVersion(t){for(const e of this.operations)e.baseVersion=t++}get _reverseDeltaClass(){return za}addOperation(t){return t.delta=this,this.operations.push(t),t}clone(){const t=new this.constructor;for(const e of this.operations)t.addOperation(e.clone());return t}getReversed(){const t=new this._reverseDeltaClass;for(const e of this.operations)t.addOperation(e.getReversed());t.operations.reverse();for(let e=0;e<t.operations.length;e++)t.operations[e].baseVersion=this.operations[this.operations.length-1].baseVersion+e+1;return t}toJSON(){const t=En(this);return t.__className=this.constructor.className,delete t.batch,t}static get className(){return\"engine.model.delta.Delta\"}}Ua.register(za);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass qa extends za{get type(){return\"attribute\"}get key(){return this.operations[0]?this.operations[0].key:null}get value(){return this.operations[0]?this.operations[0].newValue:null}get range(){if(this._range)return this._range;let t=null,e=null;for(const n of this.operations)n instanceof Ia||((null===t||t.isAfter(n.range.start))&&(t=n.range.start),(null===e||e.isBefore(n.range.end))&&(e=n.range.end));return t&&e?(this._range=new go(t,e),this._range):null}get _reverseDeltaClass(){return qa}toJSON(){const t=super.toJSON();return delete t._range,t}static get className(){return\"engine.model.delta.AttributeDelta\"}}Ua.register(qa);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Wa extends za{get type(){return\"split\"}get position(){return this._moveOperation?this._moveOperation.sourcePosition:null}get _cloneOperation(){return this.operations[0]||null}get _moveOperation(){return this.operations[1]&&this.operations[1]instanceof Oa?this.operations[1]:null}get _reverseDeltaClass(){return Ha}static get className(){return\"engine.model.delta.SplitDelta\"}}Ua.register(Wa);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ha extends za{get type(){return\"merge\"}get position(){return this._removeOperation?this._removeOperation.sourcePosition:null}get _removeOperation(){return this.operations[1]||null}get _reverseDeltaClass(){return Wa}static get className(){return\"engine.model.delta.MergeDelta\"}}Ua.register(Ha);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass $a extends za{get type(){return\"move\"}get howMany(){return this._moveOperation?this._moveOperation.howMany:null}get sourcePosition(){return this._moveOperation?this._moveOperation.sourcePosition:null}get targetPosition(){return this._moveOperation?this._moveOperation.targetPosition:null}get _moveOperation(){return this.operations[0]||null}get _reverseDeltaClass(){return $a}static get className(){return\"engine.model.delta.MoveDelta\"}}Ua.register($a);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ka extends $a{static get className(){return\"engine.model.delta.RemoveDelta\"}}Ua.register(Ka);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ga extends za{get type(){return\"rename\"}get _reverseDeltaClass(){return Ga}static get className(){return\"engine.model.delta.RenameDelta\"}}Ua.register(Ga);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ya extends za{get type(){return\"wrap\"}get range(){const t=this._moveOperation;return t?go.createFromPositionAndShift(t.sourcePosition,t.howMany):null}get howMany(){const t=this.range;return t?t.end.offset-t.start.offset:0}get _insertOperation(){return this.operations[0]||null}get _moveOperation(){return this.operations[1]||null}get _reverseDeltaClass(){return Ja}static get className(){return\"engine.model.delta.WrapDelta\"}}Ua.register(Ya);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ja extends za{get type(){return\"unwrap\"}get position(){return this._moveOperation?this._moveOperation.targetPosition:null}get _moveOperation(){return this.operations[0]||null}get _reverseDeltaClass(){return Ya}static get className(){return\"engine.model.delta.UnwrapDelta\"}}Ua.register(Ja);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Qa extends za{get type(){return\"insert\"}get position(){return this._insertOperation?this._insertOperation.position:null}get nodes(){return this._insertOperation?this._insertOperation.nodes:null}get _insertOperation(){return this.operations[0]||null}get _reverseDeltaClass(){return Ka}static get className(){return\"engine.model.delta.InsertDelta\"}}Ua.register(Qa);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Xa extends Qa{static get className(){return\"engine.model.delta.WeakInsertDelta\"}}Ua.register(Xa);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var Za=function(t,e,n={isStrong:!1}){let i,r;t instanceof Fa?i=tl.InsertOperation:t instanceof Ea?i=tl.AttributeOperation:t instanceof Da?i=tl.RootAttributeOperation:t instanceof Na?i=tl.RenameOperation:t instanceof Va?i=tl.MarkerOperation:t instanceof Oa?i=tl.MoveOperation:r=el;i&&(r=e instanceof Fa?i.InsertOperation:e instanceof Ea?i.AttributeOperation:e instanceof Da?i.RootAttributeOperation:e instanceof Na?i.RenameOperation:e instanceof Va?i.MarkerOperation:e instanceof Oa?i.MoveOperation:el);const s=r(t,e,n);return function(t,e){for(let n=0;n<e.length;n++)e[n].baseVersion=t+n+1;return e}(t.baseVersion,s)};const tl={InsertOperation:{InsertOperation(t,e,n){const i=t.clone(),r=void 0===n.insertBefore?!n.isStrong:n.insertBefore;return i.position=i.position._getTransformedByInsertion(e.position,e.nodes.maxOffset,r),[i]},AttributeOperation:el,RootAttributeOperation:el,RenameOperation:el,MarkerOperation:el,MoveOperation(t,e,n){const i=t.clone(),r=void 0===n.insertBefore?!n.isStrong:n.insertBefore;return i.position=t.position._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,r,e.isSticky&&!n.forceNotSticky),[i]}},AttributeOperation:{InsertOperation:(t,e)=>t.range._getTransformedByInsertion(e.position,e.nodes.maxOffset,!0,!1).reverse().map(e=>new Ea(e,t.key,t.oldValue,t.newValue,t.baseVersion)),AttributeOperation(t,e,n){if(t.key===e.key){const i=t.range.getDifference(e.range).map(e=>new Ea(e,t.key,t.oldValue,t.newValue,t.baseVersion)),r=t.range.getIntersection(e.range);return r&&(n.isStrong?i.push(new Ea(r,e.key,e.newValue,t.newValue,t.baseVersion)):0===i.length&&i.push(new Ia(0))),i}return[t.clone()]},RootAttributeOperation:el,RenameOperation:el,MarkerOperation:el,MoveOperation(t,e){const n=go.createFromPositionAndShift(e.sourcePosition,e.howMany);let i=[];const r=function(t){return 0===t.length?null:1==t.length?t[0]:(t[0].end=t[t.length-1].end,t[0])}(t.range.getDifference(n)),s=t.range.getIntersection(n);return null!==r&&(r.start=r.start._getTransformedByDeletion(e.sourcePosition,e.howMany),r.end=r.end._getTransformedByDeletion(e.sourcePosition,e.howMany),i=r._getTransformedByInsertion(e.getMovedRangeStart(),e.howMany,!0,!1).reverse()),null!==s&&(s.start=s.start._getCombined(e.sourcePosition,e.getMovedRangeStart()),s.end=s.end._getCombined(e.sourcePosition,e.getMovedRangeStart()),i.push(s)),i.map(e=>new Ea(e,t.key,t.oldValue,t.newValue,t.baseVersion))}},RootAttributeOperation:{InsertOperation:el,AttributeOperation:el,RootAttributeOperation:(t,e,n)=>t.root!==e.root||t.key!==e.key||(t.newValue===e.newValue||n.isStrong)&&t.newValue!==e.newValue?[t.clone()]:[new Ia(t.baseVersion)],RenameOperation:el,MarkerOperation:el,MoveOperation:el},RenameOperation:{InsertOperation(t,e){const n=t.clone();return n.position=n.position._getTransformedByInsertion(e.position,e.nodes.maxOffset,!0),[n]},AttributeOperation:el,RootAttributeOperation:el,RenameOperation(t,e,n){const i=t.clone();if(t.position.isEqual(e.position)){if(!n.isStrong)return[new Ia(t.baseVersion)];i.oldName=e.newName}return[i]},MarkerOperation:el,MoveOperation(t,e){const n=t.clone(),i=n.position.isEqual(e.sourcePosition);return n.position=n.position._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,!0,i),[n]}},MarkerOperation:{InsertOperation(t,e){const n=t.clone();return n.oldRange&&(n.oldRange=n.oldRange._getTransformedByInsertion(e.position,e.nodes.maxOffset,!1,!1)[0]),n.newRange&&(n.newRange=n.newRange._getTransformedByInsertion(e.position,e.nodes.maxOffset,!1,!1)[0]),[n]},AttributeOperation:el,RootAttributeOperation:el,RenameOperation:el,MarkerOperation(t,e,n){const i=t.clone();if(t.name==e.name){if(!n.isStrong)return[new Ia(t.baseVersion)];i.oldRange=e.newRange}return[i]},MoveOperation(t,e){const n=t.clone();if(n.oldRange){const t=n.oldRange._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany);n.oldRange=go.createFromRanges(t)}if(n.newRange){const t=n.newRange._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany);n.newRange=go.createFromRanges(t)}return[n]}},MoveOperation:{InsertOperation(t,e,n){let i=go.createFromPositionAndShift(t.sourcePosition,t.howMany);const r=t.isSticky&&!n.forceNotSticky;i=i._getTransformedByInsertion(e.position,e.nodes.maxOffset,!1,r)[0];const s=void 0===n.insertBefore?!n.isStrong:n.insertBefore,o=new t.constructor(i.start,i.end.offset-i.start.offset,t.targetPosition._getTransformedByInsertion(e.position,e.nodes.maxOffset,s),t.baseVersion);return o.isSticky=t.isSticky,[o]},AttributeOperation:el,RootAttributeOperation:el,RenameOperation:el,MarkerOperation:el,MoveOperation(t,e,n){const i=go.createFromPositionAndShift(t.sourcePosition,t.howMany),r=go.createFromPositionAndShift(e.sourcePosition,e.howMany);let s=n.isStrong;const o=t.isSticky&&!n.forceNotSticky,a=void 0===n.insertBefore?!s:n.insertBefore,l=t.targetPosition._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,a,e.isSticky&&!n.forceNotSticky);if(nl(t,e)&&nl(e,t))return[e.getReversed()];const c=i.containsPosition(e.targetPosition)||i.start.isEqual(e.targetPosition)&&o||i.end.isEqual(e.targetPosition)&&o;if(c&&i.containsRange(r,!0))return i.start=i.start._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,!o),i.end=i.end._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,o),il([i],l,t);if((r.containsPosition(t.targetPosition)||r.start.isEqual(t.targetPosition)&&e.isSticky&&!n.forceNotSticky||r.end.isEqual(t.targetPosition)&&e.isSticky&&!n.forceNotSticky)&&r.containsRange(i,!0))return i.start=i.start._getCombined(e.sourcePosition,e.getMovedRangeStart()),i.end=i.end._getCombined(e.sourcePosition,e.getMovedRangeStart()),il([i],l,t);const h=Vi(t.sourcePosition.getParentPath(),e.sourcePosition.getParentPath());if(\"prefix\"==h||\"extension\"==h)return i.start=i.start._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,!o),i.end=i.end._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,o),il([i],l,t);n.forceWeakRemove||(t instanceof Ma&&!(e instanceof Ma)?s=!0:!(t instanceof Ma)&&e instanceof Ma&&(s=!1));const u=[],d=i.getDifference(r);for(const t of d){t.start=t.start._getTransformedByDeletion(e.sourcePosition,e.howMany),t.end=t.end._getTransformedByDeletion(e.sourcePosition,e.howMany);const n=\"same\"==Vi(t.start.getParentPath(),e.getMovedRangeStart().getParentPath()),i=t._getTransformedByInsertion(e.getMovedRangeStart(),e.howMany,n,o);u.push(...i)}const f=i.getIntersection(r);return null!==f&&s&&!c&&(f.start=f.start._getCombined(e.sourcePosition,e.getMovedRangeStart()),f.end=f.end._getCombined(e.sourcePosition,e.getMovedRangeStart()),0===u.length?u.push(f):1==u.length?r.start.isBefore(i.start)||r.start.isEqual(i.start)?u.unshift(f):u.push(f):u.splice(1,0,f)),0===u.length?[new Ia(t.baseVersion)]:il(u,l,t)}}};function el(t){return[t.clone()]}function nl(t,e){return null===t.targetPosition._getTransformedByDeletion(e.sourcePosition,e.howMany)}function il(t,e,n){const i=[];for(let r=0;r<t.length;r++){const s=rl(t[r],e,n.isSticky);i.push(s);for(let e=r+1;e<t.length;e++)t[e]=t[e]._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany)[0];e=e._getTransformedByMove(s.sourcePosition,s.targetPosition,s.howMany,!0,!1)}return i}function rl(t,e,n){let i;const r=new(i=\"$graveyard\"==e.root.rootName?Ma:\"$graveyard\"==t.start.root.rootName?Ra:Oa)(t.start,t.end.offset-t.start.offset,e,0);return r.isSticky=n,r}var sl=function(t,e,n){var i=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(n=n>r?r:n)<0&&(n+=r),r=e>n?0:n-e>>>0,e>>>=0;for(var s=Array(r);++i<r;)s[i]=t[i+e];return s},ol=Math.ceil,al=Math.max;var ll=function(t,e,n){e=(n?zn(t,e,n):void 0===e)?1:al(ii(e),0);var i=t?t.length:0;if(!i||e<1)return[];for(var r=0,s=0,o=Array(ol(i/e));r<i;)o[s++]=sl(t,r,r+=e);return o};var cl=function(t){for(var e=-1,n=t?t.length:0,i=0,r=[];++e<n;){var s=t[e];s&&(r[i++]=s)}return r};var hl=function(t){return te(t)||Zt(t)};var ul=function t(e,n,i,r,s){var o=-1,a=e.length;for(i||(i=hl),s||(s=[]);++o<a;){var l=e[o];n>0&&i(l)?n>1?t(l,n-1,i,r,s):be(s,l):r||(s[s.length]=l)}return s};var dl=function(){for(var t=arguments.length,e=Array(t?t-1:0),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return t?be(te(n)?fe(n):[n],ul(e,1)):[]};var fl=function(t,e,n){for(var i=t.length,r=e+(n?0:-1);n?r--:++r<i;){var s=t[r];if(s!=s)return r}return-1};var ml=function(t,e,n){if(e!=e)return fl(t,n);for(var i=n-1,r=t.length;++i<r;)if(t[i]===e)return i;return-1};var pl=function(t,e){return!!t.length&&ml(t,e,0)>-1};var gl=function(t,e,n){for(var i=-1,r=t.length;++i<r;)if(n(e,t[i]))return!0;return!1};var wl=function(t,e){for(var n=-1,i=t.length,r=Array(i);++n<i;)r[n]=e(t[n],n,t);return r};var bl=function(t){return function(e){return t(e)}};var vl=function(t,e){return t.has(e)},_l=200;var yl=function(t,e,n,i){var r=-1,s=pl,o=!0,a=t.length,l=[],c=e.length;if(!a)return l;n&&(e=wl(e,bl(n))),i?(s=gl,o=!1):e.length>=_l&&(s=vl,o=!1,e=new Kr(e));t:for(;++r<a;){var h=t[r],u=n?n(h):h;if(h=i||0!==h?h:0,o&&u==u){for(var d=c;d--;)if(e[d]===u)continue t;l.push(h)}else s(e,u,i)||l.push(h)}return l},kl=oi(function(t,e){return Kt(t)?yl(t,ul(e,1,Kt,!0)):[]}),xl=1,Al=2;var Cl=function(t,e,n,i){var r=n.length,s=r,o=!i;if(null==t)return!s;for(t=Object(t);r--;){var a=n[r];if(o&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++r<s;){var l=(a=n[r])[0],c=t[l],h=a[1];if(o&&a[2]){if(void 0===c&&!(l in t))return!1}else{var u=new Mt;if(i)var d=i(c,h,l,t,e,u);if(!(void 0===d?Cs(h,c,i,xl|Al,u):d))return!1}}return!0};var Tl=function(t){return t==t&&!$(t)};var Sl=function(t,e){return wl(e,function(e){return[e,t[e]]})};var Pl=function(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n},El=\"[object Map]\",Ol=\"[object Set]\";var Rl=function(t){return function(e){var n=Me(e);return n==El?je(e):n==Ol?Pl(e):Sl(e,t(e))}}(he);var Ml=function(t){for(var e=Rl(t),n=e.length;n--;)e[n][2]=Tl(e[n][1]);return e};var Fl=function(t,e){return function(n){return null!=n&&n[t]===e&&(void 0!==e||t in Object(n))}};var Vl=function(t){var e=Ml(t);return 1==e.length&&e[0][2]?Fl(e[0][0],e[0][1]):function(n){return n===t||Cl(n,t,e)}},Il=\"Expected a function\";function Nl(t,e){if(\"function\"!=typeof t||e&&\"function\"!=typeof e)throw new TypeError(Il);var n=function(){var i=arguments,r=e?e.apply(this,i):i[0],s=n.cache;if(s.has(r))return s.get(r);var o=t.apply(this,i);return n.cache=s.set(r,o),o};return n.cache=new(Nl.Cache||Pt),n}Nl.Cache=Pt;var Dl=Nl,Bl=1/0,Ll=Ke?Ke.prototype:void 0,jl=Ll?Ll.toString:void 0;var Ul=function(t){if(\"string\"==typeof t)return t;if($n(t))return jl?jl.call(t):\"\";var e=t+\"\";return\"0\"==e&&1/t==-Bl?\"-0\":e};var zl=function(t){return null==t?\"\":Ul(t)},ql=/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g,Wl=/\\\\(\\\\)?/g,Hl=Dl(function(t){var e=[];return zl(t).replace(ql,function(t,n,i,r){e.push(i?r.replace(Wl,\"$1\"):n||t)}),e});var $l=function(t){return te(t)?t:Hl(t)},Kl=/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,Gl=/^\\w*$/;var Yl=function(t,e){if(te(t))return!1;var n=typeof t;return!(\"number\"!=n&&\"symbol\"!=n&&\"boolean\"!=n&&null!=t&&!$n(t))||Gl.test(t)||!Kl.test(t)||null!=e&&t in Object(e)},Jl=1/0;var Ql=function(t){if(\"string\"==typeof t||$n(t))return t;var e=t+\"\";return\"0\"==e&&1/t==-Jl?\"-0\":e};var Xl=function(t,e){for(var n=0,i=(e=Yl(e,t)?[e]:$l(e)).length;null!=t&&n<i;)t=t[Ql(e[n++])];return n&&n==i?t:void 0};var Zl=function(t,e,n){var i=null==t?void 0:Xl(t,e);return void 0===i?n:i};var tc=function(t,e){return e in Object(t)};var ec=function(t,e,n){for(var i,r=-1,s=(e=Yl(e,t)?[e]:$l(e)).length;++r<s;){var o=Ql(e[r]);if(!(i=null!=t&&n(t,o)))break;t=t[o]}return i||!!(s=t?t.length:0)&&Ht(s)&&ae(o,s)&&(te(t)||ie(t)||Zt(t))};var nc=function(t,e){return null!=t&&ec(t,e,tc)},ic=1,rc=2;var sc=function(t,e){return Yl(t)&&Tl(e)?Fl(Ql(t),e):function(n){var i=Zl(n,t);return void 0===i&&i===e?nc(n,t):Cs(e,i,void 0,ic|rc)}};var oc=function(t){return t};var ac=function(t){return function(e){return Xl(e,t)}};var lc=function(t){return Yl(t)?zt(Ql(t)):ac(t)};var cc=function(t){return\"function\"==typeof t?t:null==t?oc:\"object\"==typeof t?te(t)?sc(t[0],t[1]):Vl(t):lc(t)},hc=oi(function(t,e){var n=mo(e);return Kt(n)&&(n=void 0),Kt(t)?yl(t,ul(e,1,Kt,!0),cc(n)):[]}),uc=oi(function(t,e){var n=mo(e);return Kt(n)&&(n=void 0),Kt(t)?yl(t,ul(e,1,Kt,!0),void 0,n):[]});var dc=function(t,e,n){var i=t?t.length:0;return i?(e=n||void 0===e?1:ii(e),sl(t,e<0?0:e,i)):[]};var fc=function(t,e,n){var i=t?t.length:0;return i?(e=n||void 0===e?1:ii(e),sl(t,0,(e=i-e)<0?0:e)):[]};var mc=function(t,e,n,i){for(var r=t.length,s=i?r:-1;(i?s--:++s<r)&&e(t[s],s,t););return n?sl(t,i?0:s,i?s+1:r):sl(t,i?s+1:0,i?r:s)};var pc=function(t,e){return t&&t.length?mc(t,cc(e,3),!0,!0):[]};var gc=function(t,e){return t&&t.length?mc(t,cc(e,3),!0):[]};var wc=function(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t},bc=4294967295;var vc=function(t){return t?wc(ii(t),0,bc):0};var _c=function(t,e,n,i){var r=t.length;for((n=ii(n))<0&&(n=-n>r?0:r+n),(i=void 0===i||i>r?r:ii(i))<0&&(i+=r),i=n>i?0:vc(i);n<i;)t[n++]=e;return t};var yc=function(t,e,n,i){var r=t?t.length:0;return r?(n&&\"number\"!=typeof n&&zn(t,e,n)&&(n=0,i=r),_c(t,e,n,i)):[]};var kc=function(t,e,n){for(var i=t.length,r=n?i:-1;n?r--:++r<i;)if(e(t[r],r,t))return r;return-1};var xc=function(t,e){return t&&t.length?kc(t,cc(e,3)):-1};var Ac=function(t,e){return t&&t.length?kc(t,cc(e,3),!0):-1};var Cc=function(t){return t&&t.length?t[0]:void 0};var Tc=function(t){return t&&t.length?ul(t,1):[]},Sc=1/0;var Pc=function(t){return t&&t.length?ul(t,Sc):[]};var Ec=function(t,e){return t&&t.length?(e=void 0===e?1:ii(e),ul(t,e)):[]};var Oc=function(t){for(var e=-1,n=t?t.length:0,i={};++e<n;){var r=t[e];i[r[0]]=r[1]}return i},Rc=Math.max;var Mc=function(t,e,n){var i=t?t.length:0;return i?((n=ii(n))<0&&(n=Rc(i+n,0)),ml(t,e,n)):-1};var Fc=function(t){return fc(t,1)},Vc=Math.min;var Ic=function(t,e,n){for(var i=n?gl:pl,r=t[0].length,s=t.length,o=s,a=Array(s),l=1/0,c=[];o--;){var h=t[o];o&&e&&(h=wl(h,bl(e))),l=Vc(h.length,l),a[o]=!n&&(e||r>=120&&h.length>=120)?new Kr(o&&h):void 0}h=t[0];var u=-1,d=a[0];t:for(;++u<r&&c.length<l;){var f=h[u],m=e?e(f):f;if(f=n||0!==f?f:0,!(d?vl(d,m):i(c,m,n))){for(o=s;--o;){var p=a[o];if(!(p?vl(p,m):i(t[o],m,n)))continue t}d&&d.push(m),c.push(f)}}return c};var Nc=function(t){return Kt(t)?t:[]},Dc=oi(function(t){var e=wl(t,Nc);return e.length&&e[0]===t[0]?Ic(e):[]}),Bc=oi(function(t){var e=mo(t),n=wl(t,Nc);return e===mo(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?Ic(n,cc(e)):[]}),Lc=oi(function(t){var e=mo(t),n=wl(t,Nc);return e===mo(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?Ic(n,void 0,e):[]}),jc=Array.prototype.join;var Uc=function(t,e){return t?jc.call(t,e):\"\"},zc=Math.max,qc=Math.min;var Wc=function(t,e,n){var i=t?t.length:0;if(!i)return-1;var r=i;if(void 0!==n&&(r=((r=ii(n))<0?zc(i+r,0):qc(r,i-1))+1),e!=e)return fl(t,r,!0);for(;r--;)if(t[r]===e)return r;return-1};var Hc=function(t,e){var n=t.length;if(n)return ae(e+=e<0?n:0,n)?t[e]:void 0};var $c=function(t,e){return t&&t.length?Hc(t,ii(e)):void 0};var Kc=function(t,e,n,i){for(var r=n-1,s=t.length;++r<s;)if(i(t[r],e))return r;return-1},Gc=Array.prototype.splice;var Yc=function(t,e,n,i){var r=i?Kc:ml,s=-1,o=e.length,a=t;for(n&&(a=wl(t,bl(n)));++s<o;)for(var l=0,c=e[s],h=n?n(c):c;(l=r(a,h,l,i))>-1;)a!==t&&Gc.call(a,l,1),Gc.call(t,l,1);return t};var Jc=function(t,e){return t&&t.length&&e&&e.length?Yc(t,e):t},Qc=oi(Jc);var Xc=function(t,e,n){return t&&t.length&&e&&e.length?Yc(t,e,cc(n)):t};var Zc=function(t,e,n){return t&&t.length&&e&&e.length?Yc(t,e,void 0,n):t};var th=function(t,e){for(var n=-1,i=null==t,r=e.length,s=Array(r);++n<r;)s[n]=i?void 0:Zl(t,e[n]);return s};var eh=function(t,e){return 1==e.length?t:Xl(t,sl(e,0,-1))},nh=Array.prototype.splice;var ih=function(t,e){for(var n=t?e.length:0,i=n-1;n--;){var r=e[n];if(n==i||r!==s){var s=r;if(ae(r))nh.call(t,r,1);else if(Yl(r,t))delete t[Ql(r)];else{var o=$l(r),a=eh(t,o);null!=a&&delete a[Ql(mo(o))]}}}return t};var rh=function(t,e){if(t!==e){var n=void 0!==t,i=null===t,r=t==t,s=$n(t),o=void 0!==e,a=null===e,l=e==e,c=$n(e);if(!a&&!c&&!s&&t>e||s&&o&&l&&!a&&!c||i&&o&&l||!n&&l||!r)return 1;if(!i&&!s&&!c&&t<e||c&&n&&r&&!i&&!s||a&&n&&r||!o&&r||!l)return-1}return 0},sh=oi(function(t,e){e=ul(e,1);var n=t?t.length:0,i=th(t,e);return ih(t,wl(e,function(t){return ae(t,n)?+t:t}).sort(rh)),i});var oh=function(t,e){var n=[];if(!t||!t.length)return n;var i=-1,r=[],s=t.length;for(e=cc(e,3);++i<s;){var o=t[i];e(o,i,t)&&(n.push(o),r.push(i))}return ih(t,r),n},ah=Array.prototype.reverse;var lh=function(t){return t?ah.call(t):t};var ch=function(t,e,n){var i=t?t.length:0;return i?(n&&\"number\"!=typeof n&&zn(t,e,n)?(e=0,n=i):(e=null==e?0:ii(e),n=void 0===n?i:ii(n)),sl(t,e,n)):[]},hh=4294967294,uh=Math.floor,dh=Math.min;var fh=function(t,e,n,i){e=n(e);for(var r=0,s=t?t.length:0,o=e!=e,a=null===e,l=$n(e),c=void 0===e;r<s;){var h=uh((r+s)/2),u=n(t[h]),d=void 0!==u,f=null===u,m=u==u,p=$n(u);if(o)var g=i||m;else g=c?m&&(i||d):a?m&&d&&(i||!f):l?m&&d&&!f&&(i||!p):!f&&!p&&(i?u<=e:u<e);g?r=h+1:s=h}return dh(s,hh)},mh=2147483647;var ph=function(t,e,n){var i=0,r=t?t.length:i;if(\"number\"==typeof e&&e==e&&r<=mh){for(;i<r;){var s=i+r>>>1,o=t[s];null!==o&&!$n(o)&&(n?o<=e:o<e)?i=s+1:r=s}return r}return fh(t,e,oc,n)};var gh=function(t,e){return ph(t,e)};var wh=function(t,e,n){return fh(t,e,cc(n))};var bh=function(t,e){var n=t?t.length:0;if(n){var i=ph(t,e);if(i<n&&F(t[i],e))return i}return-1};var vh=function(t,e){return ph(t,e,!0)};var _h=function(t,e,n){return fh(t,e,cc(n),!0)};var yh=function(t,e){if(t&&t.length){var n=ph(t,e,!0)-1;if(F(t[n],e))return n}return-1};var kh=function(t,e){for(var n=-1,i=t.length,r=0,s=[];++n<i;){var o=t[n],a=e?e(o):o;if(!n||!F(a,l)){var l=a;s[r++]=0===o?0:o}}return s};var xh=function(t){return t&&t.length?kh(t):[]};var Ah=function(t,e){return t&&t.length?kh(t,cc(e)):[]};var Ch=function(t){return dc(t,1)};var Th=function(t,e,n){return t&&t.length?(e=n||void 0===e?1:ii(e),sl(t,0,e<0?0:e)):[]};var Sh=function(t,e,n){var i=t?t.length:0;return i?(e=n||void 0===e?1:ii(e),sl(t,(e=i-e)<0?0:e,i)):[]};var Ph=function(t,e){return t&&t.length?mc(t,cc(e,3),!1,!0):[]};var Eh=function(t,e){return t&&t.length?mc(t,cc(e,3)):[]};var Oh=function(){},Rh=xe&&1/He(new xe([,-0]))[1]==1/0?function(t){return new xe(t)}:Oh,Mh=200;var Fh=function(t,e,n){var i=-1,r=pl,s=t.length,o=!0,a=[],l=a;if(n)o=!1,r=gl;else if(s>=Mh){var c=e?null:Rh(t);if(c)return He(c);o=!1,r=vl,l=new Kr}else l=e?[]:a;t:for(;++i<s;){var h=t[i],u=e?e(h):h;if(h=n||0!==h?h:0,o&&u==u){for(var d=l.length;d--;)if(l[d]===u)continue t;e&&l.push(u),a.push(h)}else r(l,u,n)||(l!==a&&l.push(u),a.push(h))}return a},Vh=oi(function(t){return Fh(ul(t,1,Kt,!0))}),Ih=oi(function(t){var e=mo(t);return Kt(e)&&(e=void 0),Fh(ul(t,1,Kt,!0),cc(e))}),Nh=oi(function(t){var e=mo(t);return Kt(e)&&(e=void 0),Fh(ul(t,1,Kt,!0),void 0,e)});var Dh=function(t){return t&&t.length?Fh(t):[]};var Bh=function(t,e){return t&&t.length?Fh(t,cc(e)):[]};var Lh=function(t,e){return t&&t.length?Fh(t,void 0,e):[]};var jh=function(t,e){for(var n=-1,i=t.length,r=0,s=[];++n<i;){var o=t[n];e(o,n,t)&&(s[r++]=o)}return s},Uh=Math.max;var zh=function(t){if(!t||!t.length)return[];var e=0;return t=jh(t,function(t){if(Kt(t))return e=Uh(t.length,e),!0}),Ut(e,function(e){return wl(t,zt(e))})};var qh=function(t,e){if(!t||!t.length)return[];var n=zh(t);return null==e?n:wl(n,function(t){return qn(e,void 0,t)})},Wh=oi(function(t,e){return Kt(t)?yl(t,e):[]});var Hh=function(t,e,n){for(var i=-1,r=t.length;++i<r;)var s=s?be(yl(s,t[i],e,n),yl(t[i],s,e,n)):t[i];return s&&s.length?Fh(s,e,n):[]},$h=oi(function(t){return Hh(jh(t,Kt))}),Kh=oi(function(t){var e=mo(t);return Kt(e)&&(e=void 0),Hh(jh(t,Kt),cc(e))}),Gh=oi(function(t){var e=mo(t);return Kt(e)&&(e=void 0),Hh(jh(t,Kt),void 0,e)}),Yh=oi(zh);var Jh=function(t,e,n){for(var i=-1,r=t.length,s=e.length,o={};++i<r;){var a=i<s?e[i]:void 0;n(o,t[i],a)}return o};var Qh=function(t,e){return Jh(t||[],e||[],It)};var Xh=function(t,e,n,i){for(var r=-1,s=(e=Yl(e,t)?[e]:$l(e)).length,o=s-1,a=t;null!=a&&++r<s;){var l=Ql(e[r]);if($(a)){var c=n;if(r!=o){var h=a[l];void 0===(c=i?i(h,l,a):void 0)&&(c=null==h?ae(e[r+1])?[]:{}:h)}It(a,l,c)}a=a[l]}return t};var Zh=function(t,e){return Jh(t||[],e||[],Xh)},tu=oi(function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n=\"function\"==typeof n?(t.pop(),n):void 0,qh(t,n)}),eu={chunk:ll,compact:cl,concat:dl,difference:kl,differenceBy:hc,differenceWith:uc,drop:dc,dropRight:fc,dropRightWhile:pc,dropWhile:gc,fill:yc,findIndex:xc,findLastIndex:Ac,first:Cc,flatten:Tc,flattenDeep:Pc,flattenDepth:Ec,fromPairs:Oc,head:Cc,indexOf:Mc,initial:Fc,intersection:Dc,intersectionBy:Bc,intersectionWith:Lc,join:Uc,last:mo,lastIndexOf:Wc,nth:$c,pull:Qc,pullAll:Jc,pullAllBy:Xc,pullAllWith:Zc,pullAt:sh,remove:oh,reverse:lh,slice:ch,sortedIndex:gh,sortedIndexBy:wh,sortedIndexOf:bh,sortedLastIndex:vh,sortedLastIndexBy:_h,sortedLastIndexOf:yh,sortedUniq:xh,sortedUniqBy:Ah,tail:Ch,take:Th,takeRight:Sh,takeRightWhile:Ph,takeWhile:Eh,union:Vh,unionBy:Ih,unionWith:Nh,uniq:Dh,uniqBy:Bh,uniqWith:Lh,unzip:zh,unzipWith:qh,without:Wh,xor:$h,xorBy:Kh,xorWith:Gh,zip:Yh,zipObject:Qh,zipObjectDeep:Zh,zipWith:tu};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst nu=new Map,iu={transform(t,e,n){const i=(iu.getTransformationCase(t,e)||iu.defaultTransform)(t,e,Object.assign({},n));return function(t,e){for(const n of e)for(const e of n.operations)e.baseVersion=++t;return e}(eu.last(e.operations).baseVersion,i)},defaultTransform(t,e,n){const i=[];let r=e.operations,s=[];for(const e of t.operations){const t=[e];for(const e of r)for(let i=0;i<t.length;i++){const r=t[i],o=Za(r,e,n);Array.prototype.splice.apply(t,[i,1].concat(o)),i+=o.length-1;const a=Object.assign({},n);a.isStrong=!n.isStrong,a.insertBefore=void 0!==n.insertBefore?!n.insertBefore:void 0;const l=Za(e,r,a);Array.prototype.push.apply(s,l)}r=s,s=[];for(const e of t)i.push(e)}return function t(e,n){let i=[];let r=null;let s;switch(e){case $a:case Ka:for(const t of n)(r=t instanceof Ia?new za:t instanceof Ma?new Ka:new $a).addOperation(t),i.push(r);return i;case Wa:case Ya:return(r=new e).addOperation(n[0]),r.addOperation(n[1]),i=t($a,n.slice(2)),[r].concat(i);case Ha:case Ja:return i=t($a,n.slice(0,-2)),(r=new e).addOperation(n[n.length-2]),r.addOperation(n[n.length-1]),i.concat(r);case Ga:return(r=n[0]instanceof Ia?new za:new Ga).addOperation(n[0]),[r];case qa:for(s=0;s<n.length&&n[s]instanceof Ia;s++);s==n.length?r=new za:(r=new qa,0!=s&&n.unshift(n.splice(s,1)[0]));for(const t of n)r.addOperation(t);return[r];default:r=new e;for(const t of n)r.addOperation(t);return[r]}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(t.constructor,i)},addTransformationCase(t,e,n){let i=nu.get(t);i||(i=new Map,nu.set(t,i)),i.set(e,n)},getTransformationCase(t,e){let n=nu.get(t.constructor);if(!n||!n.get(e.constructor)){const i=nu.keys();for(const r of i)if(t instanceof r&&nu.get(r).get(e.constructor)){n=nu.get(r);break}}if(n)return n.get(e.constructor)},transformDeltaSets(t,e,n=null){const i=Array.from(t),r=Array.from(e),s=null!==n,o={isStrong:!0};if(s){o.wasAffected=new Map,o.originalDelta=new Map,o.document=n,o.undoMode=!0;for(const t of r)o.originalDelta.set(t,t)}for(let t=0;t<i.length;t++){const e=[i[t]];for(let t=0;t<r.length;t++){const n=[r[t]];for(let t=0;t<e.length;t++)for(let i=0;i<n.length;i++){s&&au(e[t],n[i],o);const r=iu.transform(e[t],n[i],{insertBefore:o.insertBefore,forceNotSticky:o.forceNotSticky,isStrong:o.isStrong,forceWeakRemove:o.forceWeakRemove,undoMode:o.undoMode}),a=iu.transform(n[i],e[t],{insertBefore:!o.insertBefore,forceNotSticky:o.forceNotSticky,isStrong:!o.isStrong,forceWeakRemove:o.forceWeakRemove,undoMode:o.undoMode});if(s){cu(e[t],r,o);const s=o.originalDelta.get(n[i]);for(const t of a)o.originalDelta.set(t,s)}e.splice(t,1,...r),t+=r.length-1,n.splice(i,1,...a),i+=a.length-1}r.splice(t,1,...n),t+=n.length-1}i.splice(t,1,...e),t+=e.length-1}const a=su(i)-su(t),l=su(r)-su(e);return l<a?ou(r,a-l):a<l&&ou(i,l-a),{deltasA:i,deltasB:r}}};var ru=iu;function su(t){return t.reduce((t,e)=>t+e.operations.length,0)}function ou(t,e){const n=t[t.length-1];let i=n.operations.length+n.baseVersion;const r=new za;for(let t=0;t<e;t++)r.addOperation(new Ia(i++));t.push(r)}function au(t,e,n){!function(t,e,n){n.wasAffected.get(t)||n.wasAffected.set(t,new Map);const i=n.originalDelta.get(e);let r=!!n.wasAffected.get(t).get(i);for(const n of t.operations){for(const t of e.operations)if(n instanceof Oa&&t instanceof Oa&&lu(n,t)){r=!0;break}if(r)break}n.wasAffected.get(t).set(i,r)}(t,e,n),function(t,e,n){const i=n.originalDelta.get(e);if(n.document.history.isUndoingDelta(i)){const e=n.document.history.getUndoneDelta(i),r=n.wasAffected.get(t),s=r.get(e);void 0!==s&&(n.insertBefore=s)}}(t,e,n),function(t,e){const n=e.document.history,i=e.originalDelta.get(t);e.forceWeakRemove=n.isUndoneDelta(i)}(e,n),function(t,e){const n=e.originalDelta.get(t),i=e.document.history;e.forceNotSticky=i.isUndoneDelta(n)||i.isUndoingDelta(n)}(e,n)}function lu(t,e){const n=t.targetPosition,i=e.sourcePosition,r=Vi(i.getParentPath(),n.getParentPath());return n.root==i.root&&(\"same\"==r&&i.offset<n.offset)}function cu(t,e,n){delete n.insertBefore,delete n.forceNotSticky,delete n.forceWeakRemove;const i=n.wasAffected.get(t);n.wasAffected.delete(t);for(const t of e)n.wasAffected.set(t,new Map(i))}class hu extends za{get type(){return\"marker\"}get _reverseDeltaClass(){return hu}static get className(){return\"engine.model.delta.MarkerDelta\"}}Ua.register(hu);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst uu=ru.addTransformationCase,du=ru.defaultTransform;function fu(t,e){const n=t.clone(),i=n.operations[0];return i.oldRange&&(i.oldRange=i.oldRange.getTransformedByDelta(e)[0]),i.newRange&&(i.newRange=i.newRange.getTransformedByDelta(e)[0]),[n]}function mu(t,e){const n=new qa,i=t.nodes;let r=i.getNode(0).getAttribute(e.key),s=0,o=i.getNode(0).offsetSize;for(let t=1;t<i.length;t++){const n=i.getNode(t),l=n.getAttribute(e.key);l!=r&&(r!=e.value&&a(),r=l,s=o),o+=n.offsetSize}return a(),n;function a(){const i=new go(t.position.getShiftedBy(s),t.position.getShiftedBy(o)),a=new Ea(i,e.key,r,e.value,0);n.addOperation(a)}}function pu(){const t=new za;return t.addOperation(new Ia(0)),t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */uu(qa,Xa,(t,e,n)=>{const i=du(t,e,n);return t.range.containsPosition(e.position)&&i.push(mu(e,t)),i}),uu(qa,Wa,(t,e,n)=>{if(!e.position)return du(t,e,n);const i=n.undoMode,r=new po(e.position.root,e.position.path.slice(0,-1)),s=du(t,e,n);if(i||!(e._cloneOperation instanceof Fa))return s;for(const n of t.operations)if(n.range.containsPosition(r)||n.range.start.isEqual(r)){const t=new qa,i=r.getShiftedBy(1),o=po.createFromPosition(i);o.path.push(0);const a=e._cloneOperation.nodes.getNode(0).getAttribute(n.key);t.addOperation(new Ea(new go(i,o),n.key,void 0===a?null:a,n.newValue,0)),s.push(t);break}return s}),uu(Qa,Ha,(t,e,n)=>{if(!e.position)return du(t,e,n);return!n.undoMode&&t.position.isEqual(e.position)?[e.getReversed(),t.clone()]:du(t,e,n)}),uu(hu,Wa,fu),uu(hu,Ha,fu),uu(hu,Ya,fu),uu(hu,Ja,fu),uu(hu,$a,fu),uu(hu,Ga,fu),uu($a,Ha,(t,e,n)=>{if(n.undoMode||!e.position)return du(t,e,n);const i=t.sourcePosition.root==e.position.root&&\"same\"===Vi(t.sourcePosition.getParentPath(),e.position.getParentPath()),r=t.sourcePosition.offset<=e.position.offset&&t.sourcePosition.offset+t.howMany>e.position.offset;return i&&r?[e.getReversed(),t.clone()]:du(t,e,n)}),uu(Ha,Qa,(t,e,n)=>{if(!t.position)return du(t,e,n);return!n.undoMode&&t.position.isEqual(e.position)?[pu()]:du(t,e,n)}),uu(Ha,$a,(t,e,n)=>{if(n.undoMode||!t.position)return du(t,e,n);const i=t.position.root==e.sourcePosition.root&&\"same\"===Vi(t.position.getParentPath(),e.sourcePosition.getParentPath()),r=e.sourcePosition.offset<=t.position.offset&&e.sourcePosition.offset+e.howMany>t.position.offset;return i&&r?[pu()]:du(t,e,n)}),uu(Wa,Wa,(t,e,n)=>{if(n.undoMode)return du(t,e,n);if(!t.position||!e.position)return du(t,e,n);const i=t.position.getParentPath(),r=e.position.getParentPath();if(t.position.root==e.position.root&&\"same\"==Vi(i,r)){if((t=t.clone()).position.offset<e.position.offset||t.position.offset==e.position.offset&&n.isStrong){t._cloneOperation instanceof Ra&&e._cloneOperation instanceof Ra&&t._cloneOperation.sourcePosition.offset>e._cloneOperation.sourcePosition.offset&&t._cloneOperation.sourcePosition.offset--;const n=go.createFromPositionAndShift(t.position,t._moveOperation.howMany),i=go.createFromPositionAndShift(e.position,e._moveOperation.howMany),r=n.getDifference(i);let s=0;for(const t of r)s+=t.end.offset-t.start.offset;return 0===s?(t.operations.pop(),t.addOperation(new Ia(t.operations[0].baseVersion+1))):t.operations[1].howMany=s,[t]}{const i=Object.assign({},n);return i.isStrong=!0,i.insertBefore=!0,du(t,e,i)}}return du(t,e,n)}),uu(Wa,Ja,(t,e,n)=>t.position&&t.position.root==e.position.root&&\"same\"===Vi(e.position.path,t.position.getParentPath())?[pu()]:du(t,e,n)),uu(Wa,Ya,(t,e,n)=>{if(!t.position)return du(t,e,n);const i=t.position.root==e.range.start.root,r=i&&\"same\"===Vi(t.position.getParentPath(),e.range.start.getParentPath()),s=e.range.start.offset<t.position.offset&&e.range.end.offset>=t.position.offset;if(r&&s)return[pu()];if(i&&\"same\"===Vi(t.position.getParentPath(),e.range.end.getShiftedBy(-1).path)){const n=t.clone(),i=po.createFromPosition(e.range.start);i.path.push(e.howMany-1);const r=i.getShiftedBy(1);n._cloneOperation.position=r;const s=po.createFromPosition(i);s.path.push(t.position.offset),n._moveOperation.sourcePosition=s;const o=po.createFromPosition(r);return o.path.push(0),n._moveOperation.targetPosition=o,[n]}return du(t,e,n)}),uu(Wa,qa,(t,e,n)=>{if(!t.position)return du(t,e,n);t=t.clone();const i=n.undoMode,r=new po(t.position.root,t.position.path.slice(0,-1));if(i||!(t._cloneOperation instanceof Fa))return[t];for(const n of e.operations)if(n.range.containsPosition(r)||n.range.start.isEqual(r)){null!==n.newValue?t._cloneOperation.nodes.getNode(0)._setAttribute(n.key,n.newValue):t._cloneOperation.nodes.getNode(0)._removeAttribute(n.key);break}return[t]}),uu(Ja,Wa,(t,e,n)=>e.position&&t.position.root==e.position.root&&\"same\"===Vi(t.position.path,e.position.getParentPath())?[e.getReversed(),t.clone()]:du(t,e,n)),uu(Xa,qa,(t,e)=>{const n=[t.clone()];return e.range.containsPosition(t.position)&&n.push(mu(t,e)),n}),uu(Ya,Wa,(t,e,n)=>{if(!e.position)return du(t,e,n);const i=t.range.start.root==e.position.root,r=i&&\"same\"===Vi(t.range.start.getParentPath(),e.position.getParentPath()),s=t.range.start.offset<e.position.offset&&t.range.end.offset>=e.position.offset;if(r&&s)return[e.getReversed(),t.clone()];if(i&&\"same\"===Vi(e.position.getParentPath(),t.range.end.getShiftedBy(-1).path)){const e=t.clone();return e._insertOperation.position.offset++,e._moveOperation.howMany++,e._moveOperation.targetPosition.path[e._moveOperation.targetPosition.path.length-2]++,[e]}return du(t,e,n)}),uu(Ga,Wa,(t,e,n)=>{const i=n.undoMode,r=du(t,e,n);if(i||!(e._cloneOperation instanceof Fa))return r;const s=e._cloneOperation.position.getShiftedBy(-1);if(s&&t.operations[0].position.isEqual(s)){const e=t.clone();e.operations[0].position=s.getShiftedBy(1),r.push(e)}return r}),uu(Wa,Ga,(t,e,n)=>{t=t.clone();const i=n.undoMode;if(i||!(t._cloneOperation instanceof Fa))return[t];const r=t._cloneOperation.position.getShiftedBy(-1);if(r&&!i&&e.operations[0].position.isEqual(r)){const n=e.clone();return n.operations[0].position=r.getShiftedBy(1),n.operations[0].oldName=t._cloneOperation.nodes.getNode(0).name,[t,n]}return[t]}),uu(Ka,Wa,(t,e,n)=>{const i=du(t,e,n),r=e._cloneOperation.position||e._cloneOperation.targetPosition;if(!r)return du(t,e,n);if(n.undoMode)return i;for(const t of i)if(t instanceof Ka){const e=t._moveOperation;e.sourcePosition.getShiftedBy(e.howMany).isEqual(r)&&(e.howMany+=1)}return i}),uu(Wa,Ka,(t,e,n)=>{if(n.undoMode)return du(t,e,n);const i=t._cloneOperation.position||t._cloneOperation.targetPosition;if(!i)return du(t,e,n);const r=(e=e.clone())._moveOperation;return r.sourcePosition.getShiftedBy(r.howMany).isEqual(i)&&(r.howMany+=1),du(t,e,n)});class gu{constructor(t=\"default\"){this.deltas=[],this.type=t}get baseVersion(){for(const t of this.deltas)if(null!==t.baseVersion)return t.baseVersion;return null}addDelta(t){return t.batch=this,this.deltas.push(t),t}*getOperations(){for(const t of this.deltas)yield*t.operations}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class wu extends za{static get className(){return\"engine.model.delta.RootAttributeDelta\"}}Ua.register(wu);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass bu extends _a{constructor(t,e){super(null),this.sourcePosition=po.createFromPosition(t),this.howMany=e}get type(){return\"detach\"}_validate(){if(this.sourcePosition.root.document)throw new g(\"detach-operation-on-document-node: Cannot detach document node.\")}_execute(){xa(go.createFromPositionAndShift(this.sourcePosition,this.howMany))}static get className(){return\"engine.model.operation.DetachOperation\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class vu extends ho{constructor(t,e,n=\"main\"){super(e),this._doc=t,this.rootName=n}get document(){return this._doc}is(t,e){return e?\"rootElement\"==t&&e==this.name||super.is(t,e):\"rootElement\"==t||super.is(t)}toJSON(){return this.rootName}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class _u{constructor(t,e){this.model=t,this.batch=e}createText(t,e){return new ao(t,e)}createElement(t,e){return new ho(t,e)}createDocumentFragment(){return new ya}insert(t,e,n){this._assertWriterUsedCorrectly();const i=po.createAt(e,n),r=t instanceof ao&&!t.parent?new Xa:new Qa;if(t.parent){if(Cu(t.root,i.root))return void this.move(go.createOn(t),i);if(t.root.document)throw new Error(\"model-writer-insert-forbidden-move: Cannot move a node from a document to a different tree.\");this.remove(t)}const s=i.root.document?i.root.document.version:null,o=new Fa(i,t,s);if(this.batch.addDelta(r),r.addOperation(o),this.model.applyOperation(o),t instanceof ya)for(const[e,n]of t.markers){const t=po.createAt(n.root),r=new go(n.start._getCombined(t,i),n.end._getCombined(t,i));this.setMarker(e,r,{usingOperation:!0})}}insertText(t,e,n,i){e instanceof ya||e instanceof ho||e instanceof po?this.insert(this.createText(t),e,n):this.insert(this.createText(t,e),n,i)}insertElement(t,e,n,i){e instanceof ya||e instanceof ho||e instanceof po?this.insert(this.createElement(t),e,n):this.insert(this.createElement(t,e),n,i)}append(t,e){this.insert(t,e,\"end\")}appendText(t,e,n){e instanceof ya||e instanceof ho?this.insert(this.createText(t),e,\"end\"):this.insert(this.createText(t,e),n,\"end\")}appendElement(t,e,n){e instanceof ya||e instanceof ho?this.insert(this.createElement(t),e,\"end\"):this.insert(this.createElement(t,e),n,\"end\")}setTextData(t,e){e._data=t}setAttribute(t,e,n){this._assertWriterUsedCorrectly(),n instanceof go?yu(this,t,e,n):ku(this,t,e,n)}setAttributes(t,e){for(const[n,i]of so(t))this.setAttribute(n,i,e)}removeAttribute(t,e){this._assertWriterUsedCorrectly(),e instanceof go?yu(this,t,null,e):ku(this,t,null,e)}clearAttributes(t){this._assertWriterUsedCorrectly();const e=t=>{for(const e of t.getAttributeKeys())this.removeAttribute(e,t)};if(t instanceof go)for(const n of t.getItems())e(n);else e(t)}move(t,e,n){if(this._assertWriterUsedCorrectly(),!(t instanceof go))throw new g(\"writer-move-invalid-range: Invalid range to move.\");if(!t.isFlat)throw new g(\"writer-move-range-not-flat: Range to move is not flat.\");const i=po.createAt(e,n);if(!Cu(t.root,i.root))throw new g(\"writer-move-different-document: Range is going to be moved between different documents.\");const r=new $a;this.batch.addDelta(r);const s=t.root.document?t.root.document.version:null,o=new Oa(t.start,t.end.offset-t.start.offset,i,s);r.addOperation(o),this.model.applyOperation(o)}remove(t){this._assertWriterUsedCorrectly();const e=(t,e)=>{const n=new Ka;this.batch.addDelta(n),Au(t,e,n,this.model)};if(t instanceof go){const n=t.getMinimalFlatRanges().reverse();for(const t of n)e(t.start,t.end.offset-t.start.offset)}else{const n=t.is(\"text\")?t.offsetSize:1;e(po.createBefore(t),n)}}merge(t){this._assertWriterUsedCorrectly();const e=new Ha;this.batch.addDelta(e);const n=t.nodeBefore,i=t.nodeAfter;if(!(n instanceof ho))throw new g(\"writer-merge-no-element-before: Node before merge position must be an element.\");if(!(i instanceof ho))throw new g(\"writer-merge-no-element-after: Node after merge position must be an element.\");const r=po.createFromParentAndOffset(i,0),s=po.createFromParentAndOffset(n,n.maxOffset),o=t.root.document?t.root.document.version:null,a=new Oa(r,i.maxOffset,s,o);a.isSticky=!0,e.addOperation(a),this.model.applyOperation(a),Au(t,1,e,this.model)}rename(t,e){if(this._assertWriterUsedCorrectly(),!(t instanceof ho))throw new g(\"writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.\");const n=new Ga;this.batch.addDelta(n);const i=t.root.document?t.root.document.version:null,r=new Na(po.createBefore(t),t.name,e,i);n.addOperation(r),this.model.applyOperation(r)}split(t,e){this._assertWriterUsedCorrectly();let n,i,r=t.parent;if(!r.parent)throw new g(\"writer-split-element-no-parent: Element with no parent can not be split.\");if(e||(e=r.parent),!t.parent.getAncestors({includeSelf:!0}).includes(e))throw new g(\"writer-split-invalid-limit-element: Limit element is not a position ancestor.\");do{const e=new Wa;this.batch.addDelta(e);const s=new ho(r.name,r.getAttributes()),o=r.root.document?r.root.document.version:null,a=new Fa(po.createAfter(r),s,o);e.addOperation(a),this.model.applyOperation(a);const l=null!==o?o+1:null,c=new Oa(t,r.maxOffset-t.offset,po.createFromParentAndOffset(s,0),l);c.isSticky=!0,e.addOperation(c),this.model.applyOperation(c),n||i||(n=r,i=s),r=(t=po.createBefore(s)).parent}while(r!==e);return{position:t,range:new go(po.createAt(n,\"end\"),po.createAt(i))}}wrap(t,e){if(this._assertWriterUsedCorrectly(),!t.isFlat)throw new g(\"writer-wrap-range-not-flat: Range to wrap is not flat.\");const n=e instanceof ho?e:new ho(e);if(n.childCount>0)throw new g(\"writer-wrap-element-not-empty: Element to wrap with is not empty.\");if(null!==n.parent)throw new g(\"writer-wrap-element-attached: Element to wrap with is already attached to tree model.\");const i=new Ya;this.batch.addDelta(i);const r=t.root.document?t.root.document.version:null,s=new Fa(t.end,n,r);i.addOperation(s),this.model.applyOperation(s);const o=null!==r?r+1:null,a=po.createFromParentAndOffset(n,0),l=new Oa(t.start,t.end.offset-t.start.offset,a,o);i.addOperation(l),this.model.applyOperation(l)}unwrap(t){if(this._assertWriterUsedCorrectly(),null===t.parent)throw new g(\"writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.\");const e=new Ja;this.batch.addDelta(e);const n=po.createFromParentAndOffset(t,0),i=n.root.document?n.root.document.version:null,r=new Oa(n,t.maxOffset,po.createBefore(t),i);r.isSticky=!0,e.addOperation(r),this.model.applyOperation(r),Au(po.createBefore(t),1,e,this.model)}setMarker(t,e,n){let i,r,s;this._assertWriterUsedCorrectly(),t instanceof go?(i=_(),r=t,s=!!e&&!!e.usingOperation):(i=\"string\"==typeof t?t:t.name,e instanceof go?(r=e,s=!!n&&!!n.usingOperation):(r=null,s=!!e&&!!e.usingOperation));const o=this.model.markers.get(i);if(!s){if(!r)throw new g(\"writer-setMarker-no-range: Range parameter is required when adding a new marker.\");return o&&o.managedUsingOperations&&!s&&xu(this,i,o.getRange(),null),this.model.markers._set(i,r,s)}if(!r&&!o)throw new g(\"writer-setMarker-no-range: Range parameter is required when adding a new marker.\");const a=o?o.getRange():null;return r?xu(this,i,a,r):xu(this,i,null,a),this.model.markers.get(i)}removeMarker(t){this._assertWriterUsedCorrectly();const e=\"string\"==typeof t?t:t.name;if(!this.model.markers.has(e))throw new g(\"writer-removeMarker-no-marker: Trying to remove marker which does not exist.\");const n=this.model.markers.get(e);n.managedUsingOperations?xu(this,e,n.getRange(),null):this.model.markers._remove(e)}setSelection(t,e,n){this._assertWriterUsedCorrectly(),this.model.document.selection._setTo(t,e,n)}setSelectionFocus(t,e){this._assertWriterUsedCorrectly(),this.model.document.selection._setFocus(t,e)}setSelectionAttribute(t,e){if(this._assertWriterUsedCorrectly(),\"string\"==typeof t)this._setSelectionAttribute(t,e);else for(const[e,n]of so(t))this._setSelectionAttribute(e,n)}removeSelectionAttribute(t){if(this._assertWriterUsedCorrectly(),\"string\"==typeof t)this._removeSelectionAttribute(t);else for(const e of t)this._removeSelectionAttribute(e)}overrideSelectionGravity(t){this.model.document.selection._overrideGravity(t)}restoreSelectionGravity(){this.model.document.selection._restoreGravity()}_setSelectionAttribute(t,e){const n=this.model.document.selection;if(n.isCollapsed&&n.anchor.parent.isEmpty){const i=So._getStoreAttributeKey(t);this.setAttribute(i,e,n.anchor.parent)}n._setAttribute(t,e)}_removeSelectionAttribute(t){const e=this.model.document.selection;if(e.isCollapsed&&e.anchor.parent.isEmpty){const n=So._getStoreAttributeKey(t);this.removeAttribute(n,e.anchor.parent)}e._removeAttribute(t)}_assertWriterUsedCorrectly(){if(this.model._currentWriter!==this)throw new g(\"writer-incorrect-use: Trying to use a writer outside the change() block.\")}}function yu(t,e,n,i){const r=new qa,s=t.model,o=s.document;let a,l,c,h=i.start;for(const t of i)c=t.item.getAttribute(e),a&&l!=c&&(l!=n&&u(),h=a),a=t.nextPosition,l=c;function u(){0===r.operations.length&&t.batch.addDelta(r);const i=new go(h,a),c=i.root.document?o.version:null,u=new Ea(i,e,l,n,c);r.addOperation(u),s.applyOperation(u)}a instanceof po&&a!=h&&l!=n&&u()}function ku(t,e,n,i){const r=t.model,s=r.document,o=i.getAttribute(e);let a,l;if(o!=n){const c=i.root===i,h=c?new wu:new qa;if(t.batch.addDelta(h),c){const t=i.document?s.version:null;l=new Da(i,e,o,n,t)}else{const t=(a=i.is(\"element\")?new go(po.createBefore(i),po.createFromParentAndOffset(i,0)):new go(po.createBefore(i),po.createAfter(i))).root.document?s.version:null;l=new Ea(a,e,o,n,t)}h.addOperation(l),r.applyOperation(l)}}function xu(t,e,n,i){const r=t.model,s=r.document,o=new hu,a=new Va(e,n,i,r.markers,s.version);t.batch.addDelta(o),o.addOperation(a),r.applyOperation(a)}function Au(t,e,n,i){let r;if(t.root.document){const n=i.document,s=new po(n.graveyard,[0]);r=new Ma(t,e,s,n.version)}else r=new bu(t,e);n.addOperation(r),i.applyOperation(r)}function Cu(t,e){return t===e||t instanceof vu&&e instanceof vu}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Tu{constructor(){this._changesInElement=new Map,this._elementSnapshots=new Map,this._changedMarkers=new Map,this._changeCount=0,this._cachedChanges=null,this._cachedChangesWithGraveyard=null}get isEmpty(){return 0==this._changesInElement.size&&0==this._changedMarkers.size}bufferOperation(t){switch(t.type){case\"insert\":if(this._isInInsertedElement(t.position.parent))return;this._markInsert(t.position.parent,t.position.offset,t.nodes.maxOffset);break;case\"addAttribute\":case\"removeAttribute\":case\"changeAttribute\":for(const e of t.range.getItems())this._isInInsertedElement(e.parent)||this._markAttribute(e);break;case\"remove\":case\"move\":case\"reinsert\":{const e=this._isInInsertedElement(t.sourcePosition.parent),n=this._isInInsertedElement(t.targetPosition.parent);e||this._markRemove(t.sourcePosition.parent,t.sourcePosition.offset,t.howMany),n||this._markInsert(t.targetPosition.parent,t.getMovedRangeStart().offset,t.howMany);break}case\"rename\":if(this._isInInsertedElement(t.position.parent))return;this._markRemove(t.position.parent,t.position.offset,1),this._markInsert(t.position.parent,t.position.offset,1)}this._cachedChanges=null}bufferMarkerChange(t,e,n){const i=this._changedMarkers.get(t);i?(i.newRange=n,null==i.oldRange&&null==i.newRange&&this._changedMarkers.delete(t)):this._changedMarkers.set(t,{oldRange:e,newRange:n})}getMarkersToRemove(){const t=[];for(const[e,n]of this._changedMarkers)null!=n.oldRange&&t.push({name:e,range:n.oldRange});return t}getMarkersToAdd(){const t=[];for(const[e,n]of this._changedMarkers)null!=n.newRange&&t.push({name:e,range:n.newRange});return t}getChanges(t={includeChangesInGraveyard:!1}){if(this._cachedChanges)return t.includeChangesInGraveyard?this._cachedChangesWithGraveyard.slice():this._cachedChanges.slice();const e=[];for(const t of this._changesInElement.keys()){const n=this._changesInElement.get(t).sort((t,e)=>t.offset===e.offset?t.type!=e.type?\"remove\"==t.type?-1:1:0:t.offset<e.offset?-1:1),i=this._elementSnapshots.get(t),r=Su(t.getChildren()),s=Pu(i.length,n);let o=0,a=0;for(const n of s)if(\"i\"===n)e.push(this._getInsertDiff(t,o,r[o].name)),o++;else if(\"r\"===n)e.push(this._getRemoveDiff(t,o,i[a].name)),a++;else if(\"a\"===n){const n=r[o].attributes,s=i[a].attributes;let l;if(\"$text\"==r[o].name)l=go.createFromParentsAndOffsets(t,o,t,o+1);else{const e=t.offsetToIndex(o);l=go.createFromParentsAndOffsets(t,o,t.getChild(e),0)}e.push(...this._getAttributesDiff(l,s,n)),o++,a++}else o++,a++}e.sort((t,e)=>t.position.root!=e.position.root?t.position.root.rootName<e.position.root.rootName?-1:1:t.position.isEqual(e.position)?t.changeCount<e.changeCount?-1:1:t.position.isBefore(e.position)?-1:1);for(let t=1;t<e.length;t++){const n=e[t-1],i=e[t],r=\"remove\"==n.type&&\"remove\"==i.type&&\"$text\"==n.name&&\"$text\"==i.name&&n.position.isEqual(i.position),s=\"insert\"==n.type&&\"insert\"==i.type&&\"$text\"==n.name&&\"$text\"==i.name&&n.position.parent==i.position.parent&&n.position.offset+n.length==i.position.offset,o=\"attribute\"==n.type&&\"attribute\"==i.type&&n.position.parent==i.position.parent&&n.range.isFlat&&i.range.isFlat&&n.position.offset+n.length==i.position.offset&&n.attributeKey==i.attributeKey&&n.attributeOldValue==i.attributeOldValue&&n.attributeNewValue==i.attributeNewValue;(r||s||o)&&(e[t-1].length++,o&&(e[t-1].range.end=e[t-1].range.end.getShiftedBy(1)),e.splice(t,1),t--)}for(const t of e)delete t.changeCount,\"attribute\"==t.type&&(delete t.position,delete t.length);return this._changeCount=0,this._cachedChangesWithGraveyard=e.slice(),this._cachedChanges=e.slice().filter(Eu),t.includeChangesInGraveyard?this._cachedChangesWithGraveyard:this._cachedChanges}reset(){this._changesInElement.clear(),this._elementSnapshots.clear(),this._changedMarkers.clear(),this._cachedChanges=null}_markInsert(t,e,n){const i={type:\"insert\",offset:e,howMany:n,count:this._changeCount++};this._markChange(t,i)}_markRemove(t,e,n){const i={type:\"remove\",offset:e,howMany:n,count:this._changeCount++};this._markChange(t,i),this._removeAllNestedChanges(t,e,n)}_markAttribute(t){const e={type:\"attribute\",offset:t.startOffset,howMany:t.offsetSize,count:this._changeCount++};this._markChange(t.parent,e)}_markChange(t,e){this._makeSnapshot(t);const n=this._getChangesForElement(t);this._handleChange(e,n),n.push(e);for(let t=0;t<n.length;t++)n[t].howMany<1&&(n.splice(t,1),t--)}_getChangesForElement(t){let e;return this._changesInElement.has(t)?e=this._changesInElement.get(t):(e=[],this._changesInElement.set(t,e)),e}_makeSnapshot(t){this._elementSnapshots.has(t)||this._elementSnapshots.set(t,Su(t.getChildren()))}_handleChange(t,e){t.nodesToHandle=t.howMany;for(const n of e){const i=t.offset+t.howMany,r=n.offset+n.howMany;if(\"insert\"==t.type&&(\"insert\"==n.type&&(t.offset<=n.offset?n.offset+=t.howMany:t.offset<r&&(n.howMany+=t.nodesToHandle,t.nodesToHandle=0)),\"remove\"==n.type&&t.offset<n.offset&&(n.offset+=t.howMany),\"attribute\"==n.type))if(t.offset<=n.offset)n.offset+=t.howMany;else if(t.offset<r){const r=n.howMany;n.howMany=t.offset-n.offset,e.unshift({type:\"attribute\",offset:i,howMany:r-n.howMany,count:this._changeCount++})}if(\"remove\"==t.type){if(\"insert\"==n.type)if(i<=n.offset)n.offset-=t.howMany;else if(i<=r)if(t.offset<n.offset){const e=i-n.offset;n.offset=t.offset,n.howMany-=e,t.nodesToHandle-=e}else n.howMany-=t.nodesToHandle,t.nodesToHandle=0;else if(t.offset<=n.offset)t.nodesToHandle-=n.howMany,n.howMany=0;else if(t.offset<r){const e=r-t.offset;n.howMany-=e,t.nodesToHandle-=e}if(\"remove\"==n.type&&(t.offset+t.howMany<=n.offset?n.offset-=t.howMany:t.offset<n.offset&&(n.offset=t.offset,n.howMany+=t.nodesToHandle,t.nodesToHandle=0)),\"attribute\"==n.type)if(i<=n.offset)n.offset-=t.howMany;else if(t.offset<n.offset){const e=i-n.offset;n.offset=t.offset,n.howMany-=e}else if(t.offset<r)if(i<=r){const i=n.howMany;n.howMany=t.offset-n.offset;const r=i-n.howMany-t.nodesToHandle;e.unshift({type:\"attribute\",offset:t.offset,howMany:r,count:this._changeCount++})}else n.howMany-=r-t.offset}if(\"attribute\"==t.type){if(\"insert\"==n.type)if(t.offset<n.offset&&i>n.offset){if(i>r){const t={type:\"attribute\",offset:r,howMany:i-r,count:this._changeCount++};this._handleChange(t,e),e.push(t)}t.nodesToHandle=n.offset-t.offset}else t.offset>=n.offset&&t.offset<r&&(i>r?(t.nodesToHandle=i-r,t.offset=r):t.nodesToHandle=0);\"attribute\"==n.type&&t.offset>=n.offset&&i<=r&&(t.nodesToHandle=0)}}t.howMany=t.nodesToHandle,delete t.nodesToHandle}_getInsertDiff(t,e,n){return{type:\"insert\",position:po.createFromParentAndOffset(t,e),name:n,length:1,changeCount:this._changeCount++}}_getRemoveDiff(t,e,n){return{type:\"remove\",position:po.createFromParentAndOffset(t,e),name:n,length:1,changeCount:this._changeCount++}}_getAttributesDiff(t,e,n){const i=[];n=new Map(n);for(const[r,s]of e){const e=n.has(r)?n.get(r):null;e!==s&&i.push({type:\"attribute\",position:t.start,range:go.createFromRange(t),length:1,attributeKey:r,attributeOldValue:s,attributeNewValue:e,changeCount:this._changeCount++}),n.delete(r)}for(const[e,r]of n)i.push({type:\"attribute\",position:t.start,range:go.createFromRange(t),length:1,attributeKey:e,attributeOldValue:null,attributeNewValue:r,changeCount:this._changeCount++});return i}_isInInsertedElement(t){const e=t.parent;if(!e)return!1;const n=this._changesInElement.get(e),i=t.startOffset;if(n)for(const t of n)if(\"insert\"==t.type&&i>=t.offset&&i<t.offset+t.howMany)return!0;return this._isInInsertedElement(e)}_removeAllNestedChanges(t,e,n){const i=go.createFromParentsAndOffsets(t,e,t,e+n);for(const t of i.getItems({shallow:!0}))t.is(\"element\")&&(this._elementSnapshots.delete(t),this._changesInElement.delete(t),this._removeAllNestedChanges(t,0,t.maxOffset))}}function Su(t){const e=[];for(const n of t)if(n.is(\"text\"))for(let t=0;t<n.data.length;t++)e.push({name:\"$text\",attributes:new Map(n.getAttributes())});else e.push({name:n.name,attributes:new Map(n.getAttributes())});return e}function Pu(t,e){const n=[];let i=0,r=0;for(const t of e)t.offset>i&&(n.push(...\"e\".repeat(t.offset-i).split(\"\")),r+=t.offset-i),\"insert\"==t.type?(n.push(...\"i\".repeat(t.howMany).split(\"\")),i=t.offset+t.howMany):\"remove\"==t.type?(n.push(...\"r\".repeat(t.howMany).split(\"\")),i=t.offset,r+=t.howMany):(n.push(...\"a\".repeat(t.howMany).split(\"\")),i=t.offset+t.howMany,r+=t.howMany);return r<t&&n.push(...\"e\".repeat(t-r).split(\"\")),n}function Eu(t){const e=t.position&&\"$graveyard\"==t.position.root.rootName,n=t.range&&\"$graveyard\"==t.range.root.rootName;return!e&&!n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ou{constructor(){this._deltas=[],this._historyPoints=new Map,this._undoPairs=new Map,this._undoneDeltas=new Set}addDelta(t){if(t.operations.length>0&&!this._historyPoints.has(t.baseVersion)){const e=this._deltas.length;this._deltas[e]=t,this._historyPoints.set(t.baseVersion,e)}}*getDeltas(t=0,e=Number.POSITIVE_INFINITY){if(0===this._deltas.length)return;let n=this._getIndex(t);if(-1!=n)for(;n<this._deltas.length;){const t=this._deltas[n++];if(t.baseVersion>=e)break;yield t}}getDelta(t){const e=this._historyPoints.get(t);return void 0===e?null:this._deltas[e]}setDeltaAsUndone(t,e){this._undoPairs.set(e,t),this._undoneDeltas.add(t)}isUndoingDelta(t){return this._undoPairs.has(t)}isUndoneDelta(t){return this._undoneDeltas.has(t)}getUndoneDelta(t){return this._undoPairs.get(t)}_getIndex(t){const e=this._historyPoints.get(t);if(void 0===e){const e=this._deltas[this._deltas.length-1],n=e.baseVersion+e.operations.length;if(t<0||t>=n)return-1;throw new g(\"model-history-wrong-version: Given base version points to the middle of a delta.\")}return e}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Ru(t,e){return!!(n=t.charAt(e-1))&&1==n.length&&/[\\ud800-\\udbff]/.test(n)&&function(t){return!!t&&1==t.length&&/[\\udc00-\\udfff]/.test(t)}(t.charAt(e));var n}function Mu(t,e){return!!(n=t.charAt(e))&&1==n.length&&/[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(n);var n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Fu=\"$graveyard\";class Vu{constructor(t){this.model=t,this.version=0,this.history=new Ou(this),this.selection=new So(this),this.roots=new ji({idProperty:\"rootName\"}),this.differ=new Tu,this._postFixers=new Set,this.createRoot(\"$root\",Fu),this.listenTo(t,\"applyOperation\",(t,e)=>{const n=e[0];if(n.isDocumentOperation&&n.baseVersion!==this.version)throw new g(\"model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.\",{operation:n})},{priority:\"highest\"}),this.listenTo(t,\"applyOperation\",(t,e)=>{const n=e[0];n.isDocumentOperation&&this.differ.bufferOperation(n)},{priority:\"high\"}),this.listenTo(t,\"applyOperation\",(t,e)=>{const n=e[0];n.isDocumentOperation&&(this.version++,this.history.addDelta(n.delta))},{priority:\"low\"});let e=!1;this.listenTo(this.selection,\"change\",()=>{e=!0}),this.listenTo(t,\"_change\",(t,n)=>{this.differ.isEmpty&&!e||(this._callPostFixers(n),this.fire(\"change\",n.batch),this.differ.reset(),e=!1)}),this.listenTo(t.markers,\"update\",(t,e,n,i)=>{this.differ.bufferMarkerChange(e.name,n,i),n||e.on(\"change\",(t,n)=>{this.differ.bufferMarkerChange(e.name,n,e.getRange())})})}get graveyard(){return this.getRoot(Fu)}createRoot(t=\"$root\",e=\"main\"){if(this.roots.get(e))throw new g(\"model-document-createRoot-name-exists: Root with specified name already exists.\",{name:e});const n=new vu(this,t,e);return this.roots.add(n),n}destroy(){this.selection.destroy(),this.stopListening()}getRoot(t=\"main\"){return this.roots.get(t)}getRootNames(){return Array.from(this.roots,t=>t.rootName).filter(t=>t!=Fu)}registerPostFixer(t){this._postFixers.add(t)}toJSON(){const t=En(this);return t.selection=\"[engine.model.DocumentSelection]\",t.model=\"[engine.model.Model]\",t}_getDefaultRoot(){for(const t of this.roots)if(t!==this.graveyard)return t;return this.graveyard}_getDefaultRange(){const t=this._getDefaultRoot(),e=this.model.schema,n=new po(t,[0]);return e.getNearestSelectionRange(n)||new go(n)}_validateSelectionRange(t){return Iu(t.start)&&Iu(t.end)}_callPostFixers(t){let e=!1;do{for(const n of this._postFixers)if(e=n(t))break}while(e)}}function Iu(t){const e=t.textNode;if(e){const n=e.data,i=t.offset-e.startOffset;return!Ru(n,i)&&!Mu(n,i)}return!0}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(Vu,A);class Nu{constructor(){this._markers=new Map}[Symbol.iterator](){return this._markers.values()}has(t){return this._markers.has(t)}get(t){return this._markers.get(t)||null}_set(t,e,n=!1){const i=t instanceof Du?t.name:t,r=this._markers.get(i);if(r){const t=r.getRange();let s=!1;return t.isEqual(e)||(r._attachLiveRange(Co.createFromRange(e)),s=!0),n!=r.managedUsingOperations&&(r._managedUsingOperations=n,s=!0),s&&this.fire(\"update:\"+i,r,t,e),r}const s=Co.createFromRange(e),o=new Du(i,s,n);return this._markers.set(i,o),this.fire(\"update:\"+i,o,null,e),o}_remove(t){const e=t instanceof Du?t.name:t,n=this._markers.get(e);return!!n&&(this._markers.delete(e),this.fire(\"update:\"+e,n,n.getRange(),null),this._destroyMarker(n),!0)}*getMarkersAtPosition(t){for(const e of this)e.getRange().containsPosition(t)&&(yield e)}destroy(){for(const t of this._markers.values())this._destroyMarker(t);this._markers=null,this.stopListening()}*getMarkersGroup(t){for(const e of this._markers.values())e.name.startsWith(t+\":\")&&(yield e)}_destroyMarker(t){t.stopListening(),t._detachLiveRange()}}R(Nu,A);class Du{constructor(t,e,n){this.name=t,this._managedUsingOperations=n,this._liveRange=this._attachLiveRange(e)}get managedUsingOperations(){if(!this._liveRange)throw new g(\"marker-destroyed: Cannot use a destroyed marker instance.\");return this._managedUsingOperations}getStart(){if(!this._liveRange)throw new g(\"marker-destroyed: Cannot use a destroyed marker instance.\");return po.createFromPosition(this._liveRange.start)}getEnd(){if(!this._liveRange)throw new g(\"marker-destroyed: Cannot use a destroyed marker instance.\");return po.createFromPosition(this._liveRange.end)}getRange(){if(!this._liveRange)throw new g(\"marker-destroyed: Cannot use a destroyed marker instance.\");return go.createFromRange(this._liveRange)}_attachLiveRange(t){return this._liveRange&&this._detachLiveRange(),t.delegate(\"change:range\").to(this),t.delegate(\"change:content\").to(this),this._liveRange=t,t}_detachLiveRange(){this._liveRange.stopDelegating(\"change:range\",this),this._liveRange.stopDelegating(\"change:content\",this),this._liveRange.detach(),this._liveRange=null}}R(Du,A);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Bu extends po{constructor(t,e,n){if(super(t,e),!this.root.is(\"rootElement\"))throw new g(\"model-liveposition-root-not-rootelement: LivePosition's root has to be an instance of RootElement.\");this.stickiness=n||\"sticksToNext\",function(){const t=new Set([\"insert\",\"move\",\"remove\",\"reinsert\"]);this.listenTo(this.root.document.model,\"applyOperation\",(e,n)=>{const i=n[0];i.isDocumentOperation&&t.has(i.type)&&function(t){let e,n;\"insert\"==t.type?e=go.createFromPositionAndShift(t.position,t.nodes.maxOffset):(e=go.createFromPositionAndShift(t.getMovedRangeStart(),t.howMany),n=t.sourcePosition);const i=e.end.offset-e.start.offset;let r;switch(t.type){case\"insert\":const s=\"sticksToNext\"==this.stickiness;r=this._getTransformedByInsertion(e.start,i,s);break;case\"move\":case\"remove\":case\"reinsert\":const o=go.createFromPositionAndShift(n,i),a=o.containsPosition(this)||o.start.isEqual(this)&&\"sticksToNext\"==this.stickiness||o.end.isEqual(this)&&\"sticksToPrevious\"==this.stickiness;if(a)r=this._getCombined(n,e.start);else{const t=\"sticksToNext\"==this.stickiness,s=e.start._getTransformedByInsertion(n,i);r=this._getTransformedByMove(n,s,i,t)}}if(!this.isEqual(r)){const t=po.createFromPosition(this);this.path=r.path,this.root=r.root,this.fire(\"change\",t)}}.call(this,i)},{priority:\"low\"})}.call(this)}detach(){this.stopListening()}}R(Bu,A);class Lu{constructor(t,e,n){this.model=t,this.writer=e,this.position=n,this.canMergeWith=new Set([this.position.parent]),this.schema=t.schema,this._filterAttributesOf=[]}handleNodes(t,e){t=Array.from(t);for(let n=0;n<t.length;n++){const i=t[n];this._handleNode(i,{isFirst:0===n&&e.isFirst,isLast:n===t.length-1&&e.isLast})}this.schema.removeDisallowedAttributes(this._filterAttributesOf,this.writer),this._filterAttributesOf=[]}getSelectionRange(){return this.nodeToSelect?go.createOn(this.nodeToSelect):this.model.schema.getNearestSelectionRange(this.position)}_handleNode(t,e){if(this.schema.isObject(t))return void this._handleObject(t,e);this._checkAndSplitToAllowedPosition(t,e)?(this._insert(t),this._mergeSiblingsOf(t,e)):this._handleDisallowedNode(t,e)}_handleObject(t,e){this._checkAndSplitToAllowedPosition(t)?this._insert(t):this._tryAutoparagraphing(t,e)}_handleDisallowedNode(t,e){t.is(\"element\")?this.handleNodes(t.getChildren(),e):this._tryAutoparagraphing(t,e)}_insert(t){if(!this.schema.checkChild(this.position,t))return void Ds.error(\"insertcontent-wrong-position: The node cannot be inserted on the given position.\",{node:t,position:this.position});const e=Bu.createFromPosition(this.position);this.writer.insert(t,this.position),this.position=po.createFromPosition(e),e.detach(),this.schema.isObject(t)&&!this.schema.checkChild(this.position,\"$text\")?this.nodeToSelect=t:this.nodeToSelect=null,this._filterAttributesOf.push(t)}_mergeSiblingsOf(t,e){if(!(t instanceof ho))return;const n=this._canMergeLeft(t,e),i=this._canMergeRight(t,e),r=Bu.createBefore(t),s=Bu.createAfter(t);if(n){const t=Bu.createFromPosition(this.position);this.writer.merge(r),this.position=po.createFromPosition(t),t.detach()}if(i){this.position.isEqual(s)||Ds.error(\"insertcontent-wrong-position-on-merge: The insertion position should equal the merge position\"),this.position=po.createAt(s.nodeBefore,\"end\");const t=new Bu(this.position.root,this.position.path,\"sticksToPrevious\");this.writer.merge(s),this.position=po.createFromPosition(t),t.detach()}(n||i)&&this._filterAttributesOf.push(this.position.parent),r.detach(),s.detach()}_canMergeLeft(t,e){const n=t.previousSibling;return e.isFirst&&n instanceof ho&&this.canMergeWith.has(n)&&this.model.schema.checkMerge(n,t)}_canMergeRight(t,e){const n=t.nextSibling;return e.isLast&&n instanceof ho&&this.canMergeWith.has(n)&&this.model.schema.checkMerge(t,n)}_tryAutoparagraphing(t,e){const n=this.writer.createElement(\"paragraph\");this._getAllowedIn(n,this.position.parent)&&this.schema.checkChild(n,t)&&(n._appendChildren(t),this._handleNode(n,e))}_checkAndSplitToAllowedPosition(t){const e=this._getAllowedIn(t,this.position.parent);if(!e)return!1;for(;e!=this.position.parent;){if(this.schema.isLimit(this.position.parent))return!1;if(this.position.isAtStart){const t=this.position.parent;this.position=po.createBefore(t),t.isEmpty&&this.writer.remove(t)}else if(this.position.isAtEnd)this.position=po.createAfter(this.position.parent);else{const t=po.createAfter(this.position.parent);this.writer.split(this.position),this.position=t,this.canMergeWith.add(this.position.nodeAfter)}}return!0}_getAllowedIn(t,e){return this.schema.checkChild(e,t)?e:e.parent?this._getAllowedIn(t,e.parent):null}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function ju(t,e,n={}){if(e.isCollapsed)return;const i=t.schema;t.change(t=>{if(!n.doNotResetEntireContent&&function(t,e){const n=t.getLimitElement(e);if(!e.containsEntireContent(n))return!1;const i=e.getFirstRange();if(i.start.parent==i.end.parent)return!1;return t.checkChild(n,\"paragraph\")}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(i,e))return void function(t,e){const n=t.model.schema.getLimitElement(e);t.remove(go.createIn(n)),Uu(t,po.createAt(n),e)}(t,e);const r=e.getFirstRange(),s=r.start,o=Bu.createFromPosition(r.end);r.start.isTouching(r.end)||t.remove(r),n.leaveUnmerged||(!function t(e,n,i){const r=n.parent;const s=i.parent;if(r==s)return;if(!r.parent||!s.parent)return;if(!function(t,e,n){const i=new go(t,e);for(const t of i.getWalker())if(n.isObject(t.item)||n.isLimit(t.item))return!1;return!0}(n,i,e.model.schema))return;n=po.createAfter(r);i=po.createBefore(s);i.isEqual(n)||e.insert(s,n);e.merge(n);for(;i.parent.isEmpty;){const t=i.parent;i=po.createBefore(t),e.remove(t)}t(e,n,i)}(t,s,o),i.removeDisallowedAttributes(s.parent.getChildren(),t)),e instanceof So?t.setSelection(s):e.setTo(s),function(t,e){const n=t.checkChild(e,\"$text\"),i=t.checkChild(e,\"paragraph\");return!n&&i}(i,s)&&Uu(t,s,e),o.detach()})}function Uu(t,e,n){const i=t.createElement(\"paragraph\");t.insert(i,e),n instanceof So?t.setSelection(i,0):n.setTo(i,0)}const zu=' ,.?!:;\"-()';function qu(t,e,n={}){const i=t.schema,r=\"backward\"!=n.direction,s=n.unit?n.unit:\"character\",o=e.focus,a=new uo({boundaries:function(t,e){const n=t.root,i=po.createAt(n,e?\"end\":0);return e?new go(t,i):new go(i,t)}(o,r),singleCharacters:!0,direction:r?\"forward\":\"backward\"}),l={walker:a,schema:i,isForward:r,unit:s};let c;for(;c=a.next();){if(c.done)return;const n=Wu(l,c.value);if(n)return void(e instanceof So?t.change(t=>{t.setSelectionFocus(n)}):e.setFocus(n))}}function Wu(t,e){if(\"text\"==e.type)return\"word\"===t.unit?function(t,e){let n=t.position.textNode;if(n){let i=t.position.offset-n.startOffset;for(;!Hu(n.data,i,e)&&!$u(n,i,e);){t.next();const r=e?t.position.nodeAfter:t.position.nodeBefore;if(r){const i=r.data.charAt(e?0:r.data.length-1);zu.includes(i)||(t.next(),n=t.position.textNode)}i=t.position.offset-n.startOffset}}return t.position}(t.walker,t.isForward):function(t,e){const n=t.position.textNode;if(n){const i=n.data;let r=t.position.offset-n.startOffset;for(;Ru(i,r)||\"character\"==e&&Mu(i,r);)t.next(),r=t.position.offset-n.startOffset}return t.position}(t.walker,t.unit,t.isForward);if(e.type==(t.isForward?\"elementStart\":\"elementEnd\")){if(t.schema.isObject(e.item))return po.createAt(e.item,t.isForward?\"after\":\"before\");if(t.schema.checkChild(e.nextPosition,\"$text\"))return e.nextPosition}else{if(t.schema.isLimit(e.item))return void t.walker.skip(()=>!0);if(t.schema.checkChild(e.nextPosition,\"$text\"))return e.nextPosition}}function Hu(t,e,n){const i=e+(n?0:-1);return zu.includes(t.charAt(i))}function $u(t,e,n){return e===(n?t.endOffset:0)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Ku(t,e){const n=[];Array.from(t.getItems({direction:\"backward\"})).map(t=>go.createOn(t)).filter(e=>{return(e.start.isAfter(t.start)||e.start.isEqual(t.start))&&(e.end.isBefore(t.end)||e.end.isEqual(t.end))}).forEach(t=>{n.push(t.start.parent),e.remove(t)}),n.forEach(t=>{let n=t;for(;n.parent&&n.isEmpty;){const t=go.createOn(n);n=n.parent,e.remove(t)}})}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Gu{constructor(){this.markers=new Nu,this.document=new Vu(this),this.schema=new Qo,this._pendingChanges=[],this._currentWriter=null,[\"insertContent\",\"deleteContent\",\"modifySelection\",\"getSelectedContent\",\"applyOperation\"].forEach(t=>this.decorate(t)),this.on(\"applyOperation\",(t,e)=>{e[0]._validate()},{priority:\"highest\"}),this.schema.register(\"$root\",{isLimit:!0}),this.schema.register(\"$block\",{allowIn:\"$root\",isBlock:!0}),this.schema.register(\"$text\",{allowIn:\"$block\"}),this.schema.register(\"$clipboardHolder\",{allowContentOf:\"$root\",isLimit:!0}),this.schema.extend(\"$text\",{allowIn:\"$clipboardHolder\"}),this.schema.register(\"$marker\",{allowIn:[\"$root\",\"$block\"]})}change(t){return 0===this._pendingChanges.length?(this._pendingChanges.push({batch:new gu,callback:t}),this._runPendingChanges()[0]):t(this._currentWriter)}enqueueChange(t,e){\"string\"==typeof t?t=new gu(t):\"function\"==typeof t&&(e=t,t=new gu),this._pendingChanges.push({batch:t,callback:e}),1==this._pendingChanges.length&&this._runPendingChanges()}applyOperation(t){t._execute()}transformDeltas(t,e,n=!1){return ru.transformDeltaSets(t,e,n?this.document:null)}insertContent(t,e){!\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction(t,e,n){t.change(i=>{n.isCollapsed||t.deleteContent(n);const r=new Lu(t,i,n.anchor);let s;s=e.is(\"documentFragment\")?e.getChildren():[e],r.handleNodes(s,{isFirst:!0,isLast:!0});const o=r.getSelectionRange();o?n instanceof So?i.setSelection(o):n.setTo(o):Ds.warn(\"insertcontent-no-range: Cannot determine a proper selection range after insertion.\")})}(this,t,e)}deleteContent(t,e){ju(this,t,e)}modifySelection(t,e){qu(this,t,e)}getSelectedContent(t){return function(t,e){return t.change(t=>{const n=t.createDocumentFragment(),i=e.getFirstRange();if(!i||i.isCollapsed)return n;const r=i.start.root,s=i.start.getCommonPath(i.end),o=r.getNodeByPath(s);let a;const l=(a=i.start.parent==i.end.parent?i:go.createFromParentsAndOffsets(o,i.start.path[s.length],o,i.end.path[s.length]+1)).end.offset-a.start.offset;for(const e of a.getItems({shallow:!0}))e.is(\"textProxy\")?t.appendText(e.data,e.getAttributes(),n):t.append(e._clone(!0),n);if(a!=i){const e=i._getTransformedByMove(a.start,po.createAt(n,0),l)[0],r=new go(po.createAt(n),e.start);Ku(new go(e.end,po.createAt(n,\"end\")),t),Ku(r,t)}return n})}(this,t)}hasContent(t){if(t instanceof ho&&(t=go.createIn(t)),t.isCollapsed)return!1;for(const e of t.getItems())if(e.is(\"textProxy\")||this.schema.isObject(e))return!0;return!1}destroy(){this.document.destroy(),this.stopListening()}_runPendingChanges(){const t=[];for(;this._pendingChanges.length;){const e=this._pendingChanges[0].batch;this._currentWriter=new _u(this,e);const n=this._pendingChanges[0].callback(this._currentWriter);t.push(n),this.fire(\"_change\",this._currentWriter),this._pendingChanges.shift(),this._currentWriter=null}return t}}R(Gu,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Yu{constructor(){this._listener=Object.create(Lr)}listenTo(t){this._listener.listenTo(t,\"keydown\",(t,e)=>{this._listener.fire(\"_keydown:\"+Xi(e),e)})}set(t,e,n={}){const i=Zi(t),r=n.priority;this._listener.listenTo(this._listener,\"_keydown:\"+i,(t,n)=>{e(n,()=>{n.preventDefault(),n.stopPropagation(),t.stop()}),t.return=!0},{priority:r})}press(t){return!!this._listener.fire(\"_keydown:\"+Xi(t),t)}destroy(){this._listener.stopListening()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ju extends Yu{constructor(t){super(),this.editor=t}set(t,e,n={}){if(\"string\"==typeof e){const t=e;e=((e,n)=>{this.editor.execute(t),n()})}super.set(t,e,n)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Qu{constructor(t){const e=this.constructor.build&&this.constructor.build.plugins;this.config=new m(t,this.constructor.build&&this.constructor.build.config),this.config.define(\"plugins\",e),this.plugins=new Wo(this,e),this.commands=new Ho,this.locale=new Go(this.config.get(\"language\")),this.t=this.locale.t,this.set(\"isReadOnly\",!1),this.model=new Gu,this.data=new ga(this.model),this.editing=new Uo(this.model),this.editing.view.document.bind(\"isReadOnly\").to(this),this.conversion=new wa,this.conversion.register(\"downcast\",[this.editing.downcastDispatcher,this.data.downcastDispatcher]),this.conversion.register(\"editingDowncast\",[this.editing.downcastDispatcher]),this.conversion.register(\"dataDowncast\",[this.data.downcastDispatcher]),this.conversion.register(\"upcast\",[this.data.upcastDispatcher]),this.keystrokes=new Ju(this),this.keystrokes.listenTo(this.editing.view.document)}initPlugins(){const t=this,e=this.config;return function(){const n=e.get(\"plugins\")||[],i=e.get(\"removePlugins\")||[];return t.plugins.load(n,i)}().then(t=>n(t,\"init\").then(()=>n(t,\"afterInit\"))).then(()=>this.fire(\"pluginsReady\"));function n(t,e){return t.reduce((t,n)=>n[e]?t.then(n[e].bind(n)):t,Promise.resolve())}}destroy(){return this.fire(\"destroy\"),this.stopListening(),this.commands.destroy(),this.plugins.destroy().then(()=>{this.model.destroy(),this.data.destroy(),this.editing.destroy(),this.keystrokes.destroy()})}execute(...t){this.commands.execute(...t)}static create(t){return new Promise(e=>{const n=new this(t);e(n.initPlugins().then(()=>{n.fire(\"dataReady\"),n.fire(\"ready\")}).then(()=>n))})}}R(Qu,xi);var Xu={setData(t){this.data.set(t)},getData(){return this.data.get()}};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */var Zu={updateElement(){var t,e;\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */t=this.element,e=this.data.get(),t instanceof HTMLTextAreaElement&&(t.value=e),t.innerHTML=e}};\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass td{getHtml(t){const e=document.implementation.createHTMLDocument(\"\").createElement(\"div\");return e.appendChild(t),e.innerHTML}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ed{constructor(){this._domParser=new DOMParser,this._domConverter=new Vr({blockFiller:wr}),this._htmlWriter=new td}toData(t){const e=this._domConverter.viewToDom(t,document);return this._htmlWriter.getHtml(e)}toView(t){const e=this._toDom(t);return this._domConverter.domToView(e)}_toDom(t){const e=this._domParser.parseFromString(t,\"text/html\"),n=e.createDocumentFragment(),i=e.body.childNodes;for(;i.length>0;)n.appendChild(i[0]);return n}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class nd{constructor(t){this.editor=t,this._components=new Map}*names(){for(const t of this._components.values())yield t.originalName}add(t,e){if(this.has(t))throw new g(\"componentfactory-item-exists: The item already exists in the component factory.\",{name:t});this._components.set(id(t),{callback:e,originalName:t})}create(t){if(!this.has(t))throw new g(\"componentfactory-item-missing: The required component is not registered in the factory.\",{name:t});return this._components.get(id(t)).callback(this.editor.locale)}has(t){return this._components.has(id(t))}}function id(t){return String(t).toLowerCase()}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class rd{constructor(){this.set(\"isFocused\",!1),this.focusedElement=null,this._elements=new Set,this._nextEventLoopTimeout=null}add(t){if(this._elements.has(t))throw new g(\"focusTracker-add-element-already-exist\");this.listenTo(t,\"focus\",()=>this._focus(t),{useCapture:!0}),this.listenTo(t,\"blur\",()=>this._blur(),{useCapture:!0}),this._elements.add(t)}remove(t){t===this.focusedElement&&this._blur(t),this._elements.has(t)&&(this.stopListening(t),this._elements.delete(t))}_focus(t){clearTimeout(this._nextEventLoopTimeout),this.focusedElement=t,this.isFocused=!0}_blur(){clearTimeout(this._nextEventLoopTimeout),this._nextEventLoopTimeout=setTimeout(()=>{this.focusedElement=null,this.isFocused=!1},0)}}R(rd,Lr),R(rd,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass sd{constructor(t,e){\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nvar n;this.editor=t,this.view=e,this.componentFactory=new nd(t),this.focusTracker=new rd,this._toolbarConfig=(n=t.config.get(\"toolbar\"),Array.isArray(n)?{items:n}:n?Object.assign({items:[]},n):{items:[]})}init(){const t=this.editor,e=this.view;e.render(),e.stickyPanel.bind(\"isActive\").to(this.focusTracker,\"isFocused\"),e.stickyPanel.limiterElement=e.element,this._toolbarConfig.viewportTopOffset&&(e.stickyPanel.viewportTopOffset=this._toolbarConfig.viewportTopOffset);const n=t.editing.view.document.getRoot();e.editable.bind(\"isReadOnly\").to(n),e.editable.bind(\"isFocused\").to(t.editing.view.document),e.editable.name=n.rootName,this.focusTracker.add(this.view.editableElement),this.view.toolbar.fillFromConfig(this._toolbarConfig.items,this.componentFactory),\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction({origin:t,originKeystrokeHandler:e,originFocusTracker:n,toolbar:i,beforeFocus:r,afterBlur:s}){n.add(i.element),e.set(\"Alt+F10\",(t,e)=>{n.isFocused&&!i.focusTracker.isFocused&&(r&&r(),i.focus(),e())}),i.keystrokes.set(\"Esc\",(e,n)=>{i.focusTracker.isFocused&&(t.focus(),s&&s(),n())})}({origin:t.editing.view,originFocusTracker:this.focusTracker,originKeystrokeHandler:t.keystrokes,toolbar:this.view.toolbar})}destroy(){this.view.destroy()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class od extends ji{constructor(t){super({idProperty:\"viewUid\"}),this.on(\"add\",(t,e,n)=>{e.isRendered||e.render(),e.element&&this._parentElement&&this._parentElement.insertBefore(e.element,this._parentElement.children[n])}),this.on(\"remove\",(t,e)=>{e.element&&this._parentElement&&e.element.remove()}),this.locale=t,this._parentElement=null}destroy(){this.map(t=>t.destroy())}setParent(t){this._parentElement=t}delegate(...t){if(!t.length||!t.every(t=>\"string\"==typeof t))throw new g(\"ui-viewcollection-delegate-wrong-events: All event names must be strings.\");return{to:e=>{for(const n of this)for(const i of t)n.delegate(i).to(e);this.on(\"add\",(n,i)=>{for(const n of t)i.delegate(n).to(e)}),this.on(\"remove\",(n,i)=>{for(const n of t)i.stopDelegating(n,e)})}}}}R(ji,xi);var ad=function(t,e){return Pn(t,!0,!0,e)};\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const ld=\"http://www.w3.org/1999/xhtml\";class cd{constructor(t){Object.assign(this,bd(wd(t))),this._isRendered=!1,this._revertData=null}render(){const t=this._renderNode({intoFragment:!0});return this._isRendered=!0,t}apply(t){return this._revertData={children:[],bindings:[],attributes:{}},this._renderNode({node:t,isApplying:!0,revertData:this._revertData}),t}revert(t){if(!this._revertData)throw new g(\"ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.\");this._revertTemplateFromNode(t,this._revertData)}*getViews(){yield*function*t(e){if(e.children)for(const n of e.children)xd(n)?yield n:Ad(n)&&(yield*t(n))}(this)}static bind(t,e){return{to:(n,i)=>new ud({eventNameOrFunction:n,attribute:n,observable:t,emitter:e,callback:i}),if:(n,i,r)=>new dd({observable:t,emitter:e,attribute:n,valueIfTrue:i,callback:r})}}static extend(t,e){t._isRendered&&Ds.warn(\"template-extend-render: Attempting to extend a template which has already been rendered.\"),function t(e,n){n.attributes&&(e.attributes||(e.attributes={}),yd(e.attributes,n.attributes));n.eventListeners&&(e.eventListeners||(e.eventListeners={}),yd(e.eventListeners,n.eventListeners));n.text&&e.text.push(...n.text);if(n.children&&n.children.length){if(e.children.length!=n.children.length)throw new g(\"ui-template-extend-children-mismatch: The number of children in extended definition does not match.\");let i=0;for(const r of n.children)t(e.children[i++],r)}}(t,bd(wd(e)))}_renderNode(t){let e;if(e=t.node?this.tag&&this.text:this.tag?this.text:!this.text)throw new g('ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.');return this.text?this._renderText(t):this._renderElement(t)}_renderElement(t){let e=t.node;return e||(e=t.node=document.createElementNS(this.ns||ld,this.tag)),this._renderAttributes(t),this._renderElementChildren(t),this._setUpListeners(t),e}_renderText(t){let e=t.node;return e?t.revertData.text=e.textContent:e=t.node=document.createTextNode(\"\"),fd(this.text)?this._bindToObservable({schema:this.text,updater:function(t){return{set(e){t.textContent=e},remove(){t.textContent=\"\"}}}(e),data:t}):e.textContent=this.text.join(\"\"),e}_renderAttributes(t){let e,n,i,r;if(!this.attributes)return;const s=t.node,o=t.revertData;for(e in this.attributes)if(i=s.getAttribute(e),n=this.attributes[e],o&&(o.attributes[e]=i),r=$(n[0])&&n[0].ns?n[0].ns:null,fd(n)){const a=r?n[0].value:n;o&&Td(e)&&a.unshift(i),this._bindToObservable({schema:a,updater:pd(s,e,r),data:t})}else\"style\"==e&&\"string\"!=typeof n[0]?this._renderStyleAttribute(n[0],t):(o&&i&&Td(e)&&n.unshift(i),kd(n=n.map(t=>t&&t.value||t).reduce((t,e)=>t.concat(e),[]).reduce(_d,\"\"))||s.setAttributeNS(r,e,n))}_renderStyleAttribute(t,e){const n=e.node;for(const i in t){const r=t[i];fd(r)?this._bindToObservable({schema:[r],updater:gd(n,i),data:e}):n.style[i]=r}}_renderElementChildren(t){const e=t.node,n=t.intoFragment?document.createDocumentFragment():e,i=t.isApplying;let r=0;for(const s of this.children)if(Cd(s)){if(!i){s.setParent(e);for(const t of s)n.appendChild(t.element)}}else if(xd(s))i||(s.isRendered||s.render(),n.appendChild(s.element));else if(Dr(s))n.appendChild(s);else if(i){const e={children:[],bindings:[],attributes:{}};t.revertData.children.push(e),s._renderNode({node:n.childNodes[r++],isApplying:!0,revertData:e})}else n.appendChild(s.render());t.intoFragment&&e.appendChild(n)}_setUpListeners(t){if(this.eventListeners)for(const e in this.eventListeners){const n=this.eventListeners[e].map(n=>{const[i,r]=e.split(\"@\");return n.activateDomEventListener(i,r,t)});t.revertData&&t.revertData.bindings.push(n)}}_bindToObservable({schema:t,updater:e,data:n}){const i=n.revertData;md(t,e,n);const r=t.filter(t=>!kd(t)).filter(t=>t.observable).map(i=>i.activateAttributeListener(t,e,n));i&&i.bindings.push(r)}_revertTemplateFromNode(t,e){for(const t of e.bindings)for(const e of t)e();if(e.text)t.textContent=e.text;else{for(const n in e.attributes){const i=e.attributes[n];null===i?t.removeAttribute(n):t.setAttribute(n,i)}for(let n=0;n<e.children.length;++n)this._revertTemplateFromNode(t.childNodes[n],e.children[n])}}}R(cd,A);class hd{constructor(t){Object.assign(this,t)}getValue(t){const e=this.observable[this.attribute];return this.callback?this.callback(e,t):e}activateAttributeListener(t,e,n){const i=()=>md(t,e,n);return this.emitter.listenTo(this.observable,\"change:\"+this.attribute,i),()=>{this.emitter.stopListening(this.observable,\"change:\"+this.attribute,i)}}}class ud extends hd{activateDomEventListener(t,e,n){const i=(t,n)=>{e&&!n.target.matches(e)||(\"function\"==typeof this.eventNameOrFunction?this.eventNameOrFunction(n):this.observable.fire(this.eventNameOrFunction,n))};return this.emitter.listenTo(n.node,t,i),()=>{this.emitter.stopListening(n.node,t,i)}}}class dd extends hd{getValue(t){return!kd(super.getValue(t))&&(this.valueIfTrue||!0)}}function fd(t){return!!t&&(t.value&&(t=t.value),Array.isArray(t)?t.some(fd):t instanceof hd)}function md(t,e,{node:n}){let i=function(t,e){return t.map(t=>t instanceof hd?t.getValue(e):t)}(t,n);kd(i=1==t.length&&t[0]instanceof dd?i[0]:i.reduce(_d,\"\"))?e.remove():e.set(i)}function pd(t,e,n){return{set(i){t.setAttributeNS(n,e,i)},remove(){t.removeAttributeNS(n,e)}}}function gd(t,e){return{set(n){t.style[e]=n},remove(){t.style[e]=null}}}function wd(t){return ad(t,t=>{if(t&&(t instanceof hd||Ad(t)||xd(t)||Cd(t)))return t})}function bd(t){if(\"string\"==typeof t?t=function(t){return{text:[t]}}(t):t.text&&function(t){Array.isArray(t.text)||(t.text=[t.text])}(t),t.on&&(t.eventListeners=function(t){for(const e in t)vd(t,e);return t}(t.on),delete t.on),!t.text){t.attributes&&function(t){for(const e in t)t[e].value&&(t[e].value=[].concat(t[e].value)),vd(t,e)}(t.attributes);const e=[];if(t.children)if(Cd(t.children))e.push(t.children);else for(const n of t.children)Ad(n)||xd(n)||Dr(n)?e.push(n):e.push(new cd(n));t.children=e}return t}function vd(t,e){Array.isArray(t[e])||(t[e]=[t[e]])}function _d(t,e){return kd(e)?t:kd(t)?e:`${t} ${e}`}function yd(t,e){for(const n in e)t[n]?t[n].push(...e[n]):t[n]=e[n]}function kd(t){return!t&&0!==t}function xd(t){return t instanceof Sd}function Ad(t){return t instanceof cd}function Cd(t){return t instanceof od}function Td(t){return\"class\"==t||\"style\"==t}n(55);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Sd{constructor(t){this.element=null,this.isRendered=!1,this.locale=t,this.t=t&&t.t,this._viewCollections=new ji,this._unboundChildren=this.createCollection(),this._viewCollections.on(\"add\",(e,n)=>{n.locale=t}),this.decorate(\"render\")}get bindTemplate(){return this._bindTemplate?this._bindTemplate:this._bindTemplate=cd.bind(this,this)}createCollection(){const t=new od;return this._viewCollections.add(t),t}registerChildren(t){Vn(t)||(t=[t]);for(const e of t)this._unboundChildren.add(e)}deregisterChildren(t){Vn(t)||(t=[t]);for(const e of t)this._unboundChildren.remove(e)}setTemplate(t){this.template=new cd(t)}extendTemplate(t){cd.extend(this.template,t)}render(){if(this.isRendered)throw new g(\"ui-view-render-already-rendered: This View has already been rendered.\");this.template&&(this.element=this.template.render(),this.registerChildren(this.template.getViews())),this.isRendered=!0}destroy(){this.stopListening(),this._viewCollections.map(t=>t.destroy())}}R(Sd,Lr),R(Sd,xi);n(54);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Pd extends Sd{constructor(t){super(t),this.body=this.createCollection()}render(){super.render(),this._renderBodyCollection()}destroy(){return this._bodyCollectionContainer.remove(),super.destroy()}_renderBodyCollection(){const t=this._bodyCollectionContainer=new cd({tag:\"div\",attributes:{class:[\"ck-body\",\"ck-rounded-corners\",\"ck-reset_all\"]},children:this.body}).render();document.body.appendChild(t)}}n(53);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ed extends Sd{constructor(t){super(t),this.set(\"text\"),this.set(\"for\");const e=this.bindTemplate;this.setTemplate({tag:\"label\",attributes:{class:[\"ck-label\"],for:e.to(\"for\")},children:[{text:e.to(\"text\")}]})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Od extends Pd{constructor(t){super(t);const e=_();this.top=this.createCollection(),this.main=this.createCollection(),this._voiceLabelView=this._createVoiceLabel(e),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-reset\",\"ck-editor\",\"ck-rounded-corners\"],role:\"application\",dir:\"ltr\",lang:t.language,\"aria-labelledby\":`ck-editor__aria-label_${e}`},children:[this._voiceLabelView,{tag:\"div\",attributes:{class:\"ck-editor__top ck-reset_all\",role:\"presentation\"},children:this.top},{tag:\"div\",attributes:{class:\"ck-editor__main\",role:\"presentation\"},children:this.main}]})}_createVoiceLabel(t){const e=this.t,n=new Ed;return n.text=e(\"Rich Text Editor\"),n.extendTemplate({attributes:{id:`ck-editor__aria-label_${t}`,class:\"ck-voice-label\"}}),n}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Rd extends Sd{constructor(t,e){super(t);const n=this.bindTemplate;e&&(this.element=this.editableElement=e),this.setTemplate({tag:\"div\",attributes:{class:[n.to(\"isFocused\",t=>t?\"ck-focused\":\"ck-blurred\"),\"ck\",\"ck-editor__editable\",\"ck-content\",\"ck-rounded-corners\"],contenteditable:n.to(\"isReadOnly\",t=>!t)}}),this.set(\"isReadOnly\",!1),this.set(\"isFocused\",!1),this.externalElement=e}render(){super.render(),this.externalElement?this.template.apply(this.element=this.externalElement):this.editableElement=this.element}destroy(){this.externalElement&&this.template.revert(this.externalElement),super.destroy()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Md extends Rd{constructor(t,e){super(t,e);const n=this.bindTemplate,i=this.t;this.set(\"name\",null);this.extendTemplate({attributes:{role:\"textbox\",\"aria-label\":n.to(\"name\",t=>i(\"Rich Text Editor, %0\",[t])),class:\"ck-editor__editable_inline\"}})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Fd(t){return e=>e+t}n(52);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Vd=Fd(\"px\");class Id extends Sd{constructor(t){super(t);const e=this.bindTemplate;this.set(\"isActive\",!1),this.set(\"isSticky\",!1),this.set(\"limiterElement\",null),this.set(\"limiterBottomOffset\",50),this.set(\"viewportTopOffset\",0),this.set(\"_marginLeft\",null),this.set(\"_isStickyToTheLimiter\",!1),this.set(\"_hasViewportTopOffset\",!1),this.content=this.createCollection(),this._contentPanelPlaceholder=new cd({tag:\"div\",attributes:{class:[\"ck-sticky-panel__placeholder\"],style:{display:e.to(\"isSticky\",t=>t?\"block\":\"none\"),height:e.to(\"isSticky\",t=>t?Vd(this._panelRect.height):null)}}}).render(),this._contentPanel=new cd({tag:\"div\",attributes:{class:[\"ck-sticky-panel__content\",e.if(\"isSticky\",\"ck-sticky-panel__content_sticky\"),e.if(\"_isStickyToTheLimiter\",\"ck-sticky-panel__content_sticky_bottom-limit\")],style:{width:e.to(\"isSticky\",t=>t?Vd(this._contentPanelPlaceholder.getBoundingClientRect().width):null),top:e.to(\"_hasViewportTopOffset\",t=>t?Vd(this.viewportTopOffset):null),bottom:e.to(\"_isStickyToTheLimiter\",t=>t?Vd(this.limiterBottomOffset):null),marginLeft:e.to(\"_marginLeft\")}},children:this.content}).render(),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-sticky-panel\"]},children:[this._contentPanelPlaceholder,this._contentPanel]})}render(){super.render(),this._checkIfShouldBeSticky(),this.listenTo(Rr.window,\"scroll\",()=>{this._checkIfShouldBeSticky()}),this.listenTo(this,\"change:isActive\",()=>{this._checkIfShouldBeSticky()})}_checkIfShouldBeSticky(){const t=this._panelRect=this._contentPanel.getBoundingClientRect();let e;this.limiterElement?(e=this._limiterRect=this.limiterElement.getBoundingClientRect(),this.isSticky=this.isActive&&e.top<this.viewportTopOffset&&this._panelRect.height+this.limiterBottomOffset<e.height):this.isSticky=!1,this.isSticky?(this._isStickyToTheLimiter=e.bottom<t.height+this.limiterBottomOffset+this.viewportTopOffset,this._hasViewportTopOffset=!this._isStickyToTheLimiter&&!!this.viewportTopOffset,this._marginLeft=this._isStickyToTheLimiter?null:Vd(-Rr.window.scrollX)):(this._isStickyToTheLimiter=!1,this._hasViewportTopOffset=!1,this._marginLeft=null)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Nd{constructor(t){if(Object.assign(this,t),t.actions&&t.keystrokeHandler)for(const e in t.actions){let n=t.actions[e];\"string\"==typeof n&&(n=[n]);for(const i of n)t.keystrokeHandler.set(i,(t,n)=>{this[e](),n()})}}get first(){return this.focusables.find(Dd)||null}get last(){return this.focusables.filter(Dd).slice(-1)[0]||null}get next(){return this._getFocusableItem(1)}get previous(){return this._getFocusableItem(-1)}get current(){let t=null;return null===this.focusTracker.focusedElement?null:(this.focusables.find((e,n)=>{const i=e.element===this.focusTracker.focusedElement;return i&&(t=n),i}),t)}focusFirst(){this._focus(this.first)}focusLast(){this._focus(this.last)}focusNext(){this._focus(this.next)}focusPrevious(){this._focus(this.previous)}_focus(t){t&&t.focus()}_getFocusableItem(t){const e=this.current,n=this.focusables.length;if(!n)return null;if(null===e)return this[1===t?\"first\":\"last\"];let i=(e+n+t)%n;do{const e=this.focusables.get(i);if(Dd(e))return e;i=(i+n+t)%n}while(i!==e);return null}}function Dd(t){return!(!t.focus||\"none\"==Rr.window.getComputedStyle(t.element).display)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Bd extends Sd{constructor(t){super(t),this.setTemplate({tag:\"span\",attributes:{class:[\"ck-toolbar__separator\"]}})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */n(51);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ld extends Sd{constructor(t){super(t);const e=this.bindTemplate;var n;this.items=this.createCollection(),this.focusTracker=new rd,this.keystrokes=new Yu,this.set(\"isVertical\",!1),this.set(\"className\"),this._focusCycler=new Nd({focusables:this.items,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:[\"arrowleft\",\"arrowup\"],focusNext:[\"arrowright\",\"arrowdown\"]}}),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-toolbar\",e.if(\"isVertical\",\"ck-toolbar_vertical\"),e.to(\"className\")]},children:this.items,on:{mousedown:(n=this,n.bindTemplate.to(t=>{t.target===n.element&&t.preventDefault()}))}})}render(){super.render();for(const t of this.items)this.focusTracker.add(t.element);this.items.on(\"add\",(t,e)=>{this.focusTracker.add(e.element)}),this.items.on(\"remove\",(t,e)=>{this.focusTracker.remove(e.element)}),this.keystrokes.listenTo(this.element)}focus(){this._focusCycler.focusFirst()}focusLast(){this._focusCycler.focusLast()}fillFromConfig(t,e){t.map(t=>{\"|\"==t?this.items.add(new Bd):e.has(t)?this.items.add(e.create(t)):Ds.warn(\"toolbarview-item-unavailable: The requested toolbar item is unavailable.\",{name:t})})}}n(50);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class jd extends Od{constructor(t){super(t),this.stickyPanel=new Id(t),this.toolbar=new Ld(t),this.editable=new Md(t)}render(){super.render(),this.stickyPanel.content.add(this.toolbar),this.top.add(this.stickyPanel),this.main.add(this.editable)}get editableElement(){return this.editable.element}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Ud{constructor(){this._replacedElements=[]}replace(t,e){this._replacedElements.push({element:t,newElement:e}),t.style.display=\"none\",e&&t.parentNode.insertBefore(e,t.nextSibling)}restore(){this._replacedElements.forEach(({element:t,newElement:e})=>{t.style.display=\"\",e&&e.remove()}),this._replacedElements=[]}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass zd extends Qu{constructor(t,e){super(e),this._elementReplacer=new Ud,this.element=t,this.data.processor=new ed,this.model.document.createRoot(),this.ui=new sd(this,new jd(this.locale)),function(t){if(!J(t.updateElement))throw new g(\"attachtoform-missing-elementapi-interface: ElementApi interface is required.\");const e=t.element;if(e&&\"textarea\"===e.tagName.toLowerCase()&&e.form){let n;const i=e.form,r=()=>t.updateElement();J(i.submit)&&(n=i.submit,i.submit=(()=>{r(),n.apply(i)})),i.addEventListener(\"submit\",r),t.on(\"destroy\",()=>{i.removeEventListener(\"submit\",r),n&&(i.submit=n)})}}(this)}destroy(){return this.updateElement(),this._elementReplacer.restore(),this.ui.destroy(),super.destroy()}static create(t,e){return new Promise(i=>{const r=new this(t,e);i(r.initPlugins().then(()=>r.ui.init()).then(()=>{r._elementReplacer.replace(t,r.ui.view.element),r.fire(\"uiReady\")}).then(()=>r.editing.view.attachDomRoot(r.ui.view.editableElement)).then(()=>r.data.init((n=t,n instanceof HTMLTextAreaElement?n.value:n.innerHTML))).then(()=>{r.fire(\"dataReady\"),r.fire(\"ready\")}).then(()=>r))});var n}}R(zd,Xu),R(zd,Zu);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass qd{constructor(t){this.editor=t}destroy(){this.stopListening()}}R(qd,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Wd{constructor(t){this.files=function(t){const e=t.files?Array.from(t.files):[],n=t.items?Array.from(t.items):[];if(e.length)return e;return n.filter(t=>\"file\"===t.kind).map(t=>t.getAsFile())}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(t),this._native=t}get types(){return this._native.types}getData(t){return this._native.getData(t)}setData(t,e){this._native.setData(t,e)}}class Hd extends Es{constructor(t){super(t);const e=this.document;function n(t,n){n.preventDefault();const i=n.dropRange?[n.dropRange]:Array.from(e.selection.getRanges());e.fire(\"clipboardInput\",{dataTransfer:n.dataTransfer,targetRanges:i})}this.domEventType=[\"paste\",\"copy\",\"cut\",\"drop\",\"dragover\"],this.listenTo(e,\"paste\",n,{priority:\"low\"}),this.listenTo(e,\"drop\",n,{priority:\"low\"})}onDomEvent(t){const e={dataTransfer:new Wd(t.clipboardData?t.clipboardData:t.dataTransfer)};\"drop\"==t.type&&(e.dropRange=function(t,e){const n=e.target.ownerDocument,i=e.clientX,r=e.clientY;let s;n.caretRangeFromPoint&&n.caretRangeFromPoint(i,r)?s=n.caretRangeFromPoint(i,r):e.rangeParent&&((s=n.createRange()).setStart(e.rangeParent,e.rangeOffset),s.collapse(!0));return s?t.domConverter.domRangeToView(s):t.document.selection.getFirstRange()}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(this.view,t)),this.fire(t.type,t,e)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst $d=[\"figcaption\",\"li\"];\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Kd extends qd{static get pluginName(){return\"Clipboard\"}init(){const t=this.editor,e=t.model.document,n=t.editing.view,i=n.document;var r;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function s(n,r){const s=r.dataTransfer;r.preventDefault();const o=t.data.toView(t.model.getSelectedContent(e.selection));i.fire(\"clipboardOutput\",{dataTransfer:s,content:o,method:n.name})}this._htmlDataProcessor=new ed,n.addObserver(Hd),this.listenTo(i,\"clipboardInput\",(e,i)=>{if(t.isReadOnly)return;const s=i.dataTransfer;let o=\"\";s.getData(\"text/html\")?o=s.getData(\"text/html\").replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g,(t,e)=>1==e.length?\" \":e):s.getData(\"text/plain\")&&((r=(r=s.getData(\"text/plain\")).replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\\n\\n/g,\"</p><p>\").replace(/\\n/g,\" \").replace(/^\\s/,\"&nbsp;\").replace(/\\s$/,\"&nbsp;\").replace(/\\s\\s/g,\" &nbsp;\")).indexOf(\"</p><p>\")>-1&&(r=`<p>${r}</p>`),o=r),o=this._htmlDataProcessor.toView(o),this.fire(\"inputTransformation\",{content:o}),n.scrollToTheSelection()},{priority:\"low\"}),this.listenTo(this,\"inputTransformation\",(t,n)=>{if(!n.content.isEmpty){const t=this.editor.data,i=this.editor.model,r=t.toModel(n.content,\"$clipboardHolder\");if(0==r.childCount)return;i.insertContent(r,e.selection)}},{priority:\"low\"}),this.listenTo(i,\"copy\",s,{priority:\"low\"}),this.listenTo(i,\"cut\",(e,n)=>{t.isReadOnly?n.preventDefault():s(e,n)},{priority:\"low\"}),this.listenTo(i,\"clipboardOutput\",(n,i)=>{i.content.isEmpty||(i.dataTransfer.setData(\"text/html\",this._htmlDataProcessor.toData(i.content)),i.dataTransfer.setData(\"text/plain\",function t(e){let n=\"\";if(e.is(\"text\")||e.is(\"textProxy\"))n=e.data;else if(e.is(\"img\")&&e.hasAttribute(\"alt\"))n=e.getAttribute(\"alt\");else{let i=null;for(const r of e.getChildren()){const e=t(r);i&&(i.is(\"containerElement\")||r.is(\"containerElement\"))&&($d.includes(i.name)||$d.includes(r.name)?n+=\"\\n\":n+=\"\\n\\n\"),n+=e,i=r}}return n}(i.content))),\"cut\"==i.method&&t.model.deleteContent(e.selection)},{priority:\"low\"})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Gd{constructor(t){function e(){this.isEnabled=!1}this.editor=t,this.set(\"value\",void 0),this.set(\"isEnabled\",!1),this.decorate(\"execute\"),this.listenTo(this.editor.model.document,\"change\",()=>{this.refresh()}),this.on(\"execute\",t=>{this.isEnabled||t.stop()},{priority:\"high\"}),this.listenTo(t,\"change:isReadOnly\",(t,n,i)=>{i?(this.on(\"change:isEnabled\",e,{priority:\"lowest\"}),this.isEnabled=!1):(this.off(\"change:isEnabled\",e),this.refresh())})}refresh(){this.isEnabled=!0}execute(){}destroy(){this.stopListening()}}R(Gd,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Yd extends Gd{execute(){const t=this.editor.model,e=t.document;t.change(n=>{!function(t,e,n,i){const r=n.isCollapsed,s=n.getFirstRange(),o=s.start.parent,a=s.end.parent;if(i.isLimit(o)||i.isLimit(a))return void(r||o!=a||t.deleteContent(n));if(r)Jd(e,n,s.start);else{const i=!(s.start.isAtStart&&s.end.isAtEnd),r=o==a;t.deleteContent(n,{leaveUnmerged:i}),i&&(r?Jd(e,n,n.focus):e.setSelection(a,0))}}(this.editor.model,n,e.selection,t.schema),this.fire(\"afterExecute\",{writer:n})})}}function Jd(t,e,n){const i=n.parent,r=new i.constructor(i.name,i.getAttributes());n.isAtEnd?t.insert(r,n.parent,\"after\"):n.isAtStart?t.insert(r,n.parent,\"before\"):t.split(n),t.setSelection(n.parent.nextSibling,0)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Qd extends zr{constructor(t){super(t);const e=this.document;e.on(\"keydown\",(t,n)=>{if(this.isEnabled&&n.keyCode==Qi.enter){let i;e.once(\"enter\",t=>i=t,{priority:\"highest\"}),e.fire(\"enter\",new Ps(e,n.domEvent)),i&&i.stop.called&&t.stop()}})}observe(){}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Xd extends qd{static get pluginName(){return\"Enter\"}init(){const t=this.editor,e=t.editing.view,n=e.document;e.addObserver(Qd),t.commands.add(\"enter\",new Yd(t)),this.listenTo(n,\"enter\",(n,i)=>{t.execute(\"enter\"),i.preventDefault(),e.scrollToTheSelection()},{priority:\"low\"})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Zd{constructor(t,e=20){this.model=t,this.size=0,this.limit=e,this.isLocked=!1,this._changeCallback=((t,e)=>{\"transparent\"!=e.type&&e!==this._batch&&this._reset(!0)}),this._selectionChangeCallback=(()=>{this._reset()}),this.model.document.on(\"change\",this._changeCallback),this.model.document.selection.on(\"change:range\",this._selectionChangeCallback),this.model.document.selection.on(\"change:attribute\",this._selectionChangeCallback)}get batch(){return this._batch||(this._batch=new gu),this._batch}input(t){this.size+=t,this.size>=this.limit&&this._reset(!0)}lock(){this.isLocked=!0}unlock(){this.isLocked=!1}destroy(){this.model.document.off(\"change\",this._changeCallback),this.model.document.selection.off(\"change:range\",this._selectionChangeCallback),this.model.document.selection.off(\"change:attribute\",this._selectionChangeCallback)}_reset(t){this.isLocked&&!t||(this._batch=null,this.size=0)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class tf extends Gd{constructor(t,e){super(t),this._buffer=new Zd(t.model,e)}get buffer(){return this._buffer}destroy(){super.destroy(),this._buffer.destroy()}execute(t={}){const e=this.editor.model,n=e.document,i=t.text||\"\",r=i.length,s=t.range||n.selection.getFirstRange(),o=t.resultRange;e.enqueueChange(this._buffer.batch,t=>{const e=s.isCollapsed;this._buffer.lock(),e||t.remove(s),i&&t.insertText(i,n.selection.getAttributes(),s.start),o?t.setSelection(o):e&&t.setSelection(s.start.getShiftedBy(r)),this._buffer.unlock(),this._buffer.input(r)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ef extends qd{static get pluginName(){return\"Input\"}init(){const t=this.editor,e=t.editing.view,n=new tf(t,t.config.get(\"typing.undoStep\")||20);t.commands.add(\"input\",n),this.listenTo(e.document,\"keydown\",(t,e)=>{this._handleKeydown(e,n)},{priority:\"lowest\"}),this.listenTo(e.document,\"mutations\",(t,e,n)=>{this._handleMutations(e,n)})}_handleKeydown(t,e){const n=this.editor.model,i=n.document,r=e.buffer;e.isEnabled&&(function(t){if(t.ctrlKey)return!0;return rf.includes(t.keyCode)}(t)||i.selection.isCollapsed||(r.lock(),n.enqueueChange(r.batch,()=>{this.editor.model.deleteContent(i.selection)}),r.unlock()))}_handleMutations(t,e){new nf(this.editor).handle(t,e)}}class nf{constructor(t){this.editor=t,this.editing=this.editor.editing}handle(t,e){if(function(t){if(0==t.length)return!1;for(const e of t)if(\"children\"===e.type&&!of(e))return!0;return!1}(t))this._handleContainerChildrenMutations(t,e);else for(const n of t)this._handleTextMutation(n,e),this._handleTextNodeInsertion(n)}_handleContainerChildrenMutations(t,e){const n=function(t){const e=t.map(t=>t.node).reduce((t,e)=>t.getCommonAncestor(e,{includeSelf:!0}));if(!e)return;return e.getAncestors({includeSelf:!0,parentFirst:!0}).find(t=>t.is(\"containerElement\")||t.is(\"rootElement\"))}(t);if(!n)return;const i=this.editor.editing.view.domConverter.mapViewToDom(n),r=new Vr,s=this.editor.data.toModel(r.domToView(i)).getChild(0),o=this.editor.editing.mapper.toModelElement(n);if(!o)return;const a=Array.from(s.getChildren()),l=Array.from(o.getChildren());if(!af(a)||!af(l))return;const c=a.map(t=>t.data).join(\"\").replace(/\\u00A0/g,\" \"),h=l.map(t=>t.data).join(\"\");if(h===c)return;const u=Tr(h,c),{firstChangeAt:d,insertions:f,deletions:m}=lf(u);let p=null;e&&(p=this.editing.mapper.toModelRange(e.getFirstRange()));const g=c.substr(d,f),w=go.createFromParentsAndOffsets(o,d,o,d+m);this.editor.execute(\"input\",{text:g,range:w,resultRange:p})}_handleTextMutation(t,e){if(\"text\"!=t.type)return;const n=t.newText.replace(/\\u00A0/g,\" \"),i=Tr(t.oldText.replace(/\\u00A0/g,\" \"),n),{firstChangeAt:r,insertions:s,deletions:o}=lf(i);let a=null;e&&(a=this.editing.mapper.toModelRange(e.getFirstRange()));const l=new Ii(t.node,r),c=this.editing.mapper.toModelPosition(l),h=go.createFromPositionAndShift(c,o),u=n.substr(r,s);this.editor.execute(\"input\",{text:u,range:h,resultRange:a})}_handleTextNodeInsertion(t){if(\"children\"!=t.type)return;const e=of(t),n=new Ii(t.node,e.index),i=this.editing.mapper.toModelPosition(n),r=e.values[0].data;this.editor.execute(\"input\",{text:r.replace(/\\u00A0/g,\" \"),range:new go(i)})}}const rf=[Xi(\"arrowUp\"),Xi(\"arrowRight\"),Xi(\"arrowDown\"),Xi(\"arrowLeft\"),9,16,17,18,20,27,33,34,35,36,229];for(let t=112;t<=135;t++)rf.push(t);function sf(t,e){return t instanceof Rn&&e instanceof Rn?t.data===e.data:t===e}function of(t){if(t.newChildren.length-t.oldChildren.length!=1)return;const e=function(t,e){const n=[];let i,r=0;return t.forEach(t=>{\"equal\"==t?(s(),r++):\"insert\"==t?(o(\"insert\")?i.values.push(e[r]):(s(),i={type:\"insert\",index:r,values:[e[r]]}),r++):o(\"delete\")?i.howMany++:(s(),i={type:\"delete\",index:r,howMany:1})}),s(),n;function s(){i&&(n.push(i),i=null)}function o(t){return i&&i.type==t}}(Tr(t.oldChildren,t.newChildren,sf),t.newChildren);if(e.length>1)return;const n=e[0];return n.values[0]instanceof Rn?n:void 0}function af(t){return t.every(t=>t.is(\"text\"))}function lf(t){let e=null,n=null;for(let i=0;i<t.length;i++){\"equal\"!=t[i]&&(e=null===e?i:e,n=i)}let i=0,r=0;for(let s=e;s<=n;s++)\"insert\"!=t[s]&&i++,\"delete\"!=t[s]&&r++;return{insertions:r,deletions:i,firstChangeAt:e}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class cf extends Gd{constructor(t,e){super(t),this.direction=e,this._buffer=new Zd(t.model,t.config.get(\"typing.undoStep\"))}execute(t={}){const e=this.editor.model,n=e.document;e.enqueueChange(this._buffer.batch,i=>{this._buffer.lock();const r=new ko(n.selection),s=r.isCollapsed;if(r.isCollapsed&&e.modifySelection(r,{direction:this.direction,unit:t.unit}),this._shouldEntireContentBeReplacedWithParagraph(t.sequence||1))return void this._replaceEntireContentWithParagraph(i);if(r.isCollapsed)return;let o=0;r.getFirstRange().getMinimalFlatRanges().forEach(t=>{o+=Bi(t.getWalker({singleCharacters:!0,ignoreElementEnd:!0,shallow:!0}))}),e.deleteContent(r,{doNotResetEntireContent:s}),this._buffer.input(o),i.setSelection(r),this._buffer.unlock()})}_shouldEntireContentBeReplacedWithParagraph(t){if(t>1)return!1;const e=this.editor.model,n=e.document.selection,i=e.schema.getLimitElement(n);if(!(n.isCollapsed&&n.containsEntireContent(i)))return!1;if(!e.schema.checkChild(i,\"paragraph\"))return!1;const r=i.getChild(0);return!r||\"paragraph\"!==r.name}_replaceEntireContentWithParagraph(t){const e=this.editor.model,n=e.document.selection,i=e.schema.getLimitElement(n),r=new ho(\"paragraph\");t.remove(go.createIn(i)),t.insert(r,i),t.setSelection(r,0)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class hf extends zr{constructor(t){super(t);const e=t.document;let n=0;e.on(\"keyup\",(t,e)=>{e.keyCode!=Qi.delete&&e.keyCode!=Qi.backspace||(n=0)}),e.on(\"keydown\",(t,i)=>{const r={};if(i.keyCode==Qi.delete)r.direction=\"forward\",r.unit=\"character\";else{if(i.keyCode!=Qi.backspace)return;r.direction=\"backward\",r.unit=\"codePoint\"}const s=Gi.isMac?i.altKey:i.ctrlKey;let o;r.unit=s?\"word\":r.unit,r.sequence=++n,e.once(\"delete\",t=>o=t,{priority:\"highest\"}),e.fire(\"delete\",new Ps(e,i.domEvent,r)),o&&o.stop.called&&t.stop()})}observe(){}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class uf extends qd{static get pluginName(){return\"Delete\"}init(){const t=this.editor,e=t.editing.view,n=e.document;e.addObserver(hf),t.commands.add(\"forwardDelete\",new cf(t,\"forward\")),t.commands.add(\"delete\",new cf(t,\"backward\")),this.listenTo(n,\"delete\",(n,i)=>{t.execute(\"forward\"==i.direction?\"forwardDelete\":\"delete\",{unit:i.unit,sequence:i.sequence}),i.preventDefault(),e.scrollToTheSelection()})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class df extends qd{static get requires(){return[ef,uf]}static get pluginName(){return\"Typing\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ff extends Gd{constructor(t){super(t),this._stack=[],this._createdBatches=new WeakSet,this.refresh()}refresh(){this.isEnabled=this._stack.length>0}addBatch(t){const e=this.editor.model.document.selection,n={ranges:e.hasOwnRange?Array.from(e.getRanges()):[],isBackward:e.isBackward};this._stack.push({batch:t,selection:n}),this.refresh()}clearStack(){this._stack=[],this.refresh()}_restoreSelection(t,e,n){const i=this.editor.model,r=i.document,s=[];for(const e of t){const t=mf(e,n).find(t=>t.start.root!=r.graveyard);t&&s.push(t)}s.length&&i.change(t=>{t.setSelection(s,{backward:e})})}_undo(t){const e=this.editor.model,n=e.document,i=new gu;this._createdBatches.add(i);const r=t.deltas.slice();r.reverse();for(const t of r)if(t.operations.some(t=>t.isDocumentOperation)){const r=t.baseVersion+t.operations.length,s=Array.from(n.history.getDeltas(r)),o=e.transformDeltas([t.getReversed()],s,!0).deltasA;for(const r of o){r.baseVersion=n.version,i.addDelta(r);for(const t of r.operations)e.applyOperation(t);n.history.setDeltaAsUndone(t,r)}}return i}}function mf(t,e){const n=function(t,e){for(const n of e)for(const e of n.operations)for(let n=0;n<t.length;n++){let i;switch(e.type){case\"insert\":i=t[n]._getTransformedByInsertion(e.position,e.nodes.maxOffset,!0);break;case\"move\":case\"remove\":case\"reinsert\":i=t[n]._getTransformedByMove(e.sourcePosition,e.targetPosition,e.howMany,!0)}i&&(t.splice(n,1,...i),n=n+i.length-1)}return t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */([t],e);n.sort((t,e)=>t.start.isBefore(e.start)?-1:1);for(let t=1;t<n.length;t++){const e=n[t-1],i=n[t];e.end.isTouching(i.start)&&(e.end=i.end,n.splice(t,1),t--)}return n}class pf extends ff{execute(t=null){const e=t?this._stack.findIndex(e=>e.batch==t):this._stack.length-1,n=this._stack.splice(e,1)[0];this.editor.model.enqueueChange(()=>{const t=this._undo(n.batch),e=this.editor.model.document.history.getDeltas(n.batch.baseVersion);this._restoreSelection(n.selection.ranges,n.selection.isBackward,e),this.fire(\"revert\",n.batch,t)}),this.refresh()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class gf extends ff{execute(){const t=this._stack.pop();this.editor.model.enqueueChange(()=>{const e=t.batch.deltas[t.batch.deltas.length-1],n=e.baseVersion+e.operations.length,i=this.editor.model.document.history.getDeltas(n);this._restoreSelection(t.selection.ranges,t.selection.isBackward,i),this._undo(t.batch)}),this.refresh()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class wf extends qd{constructor(t){super(t),this._batchRegistry=new WeakSet}init(){const t=this.editor;this._undoCommand=new pf(t),this._redoCommand=new gf(t),t.commands.add(\"undo\",this._undoCommand),t.commands.add(\"redo\",this._redoCommand),this.listenTo(t.model,\"applyOperation\",(t,e)=>{const n=e[0];if(!n.isDocumentOperation)return;const i=n.delta.batch;this._batchRegistry.has(i)||\"transparent\"==i.type||(this._redoCommand._createdBatches.has(i)?this._undoCommand.addBatch(i):this._undoCommand._createdBatches.has(i)||(this._undoCommand.addBatch(i),this._redoCommand.clearStack()),this._batchRegistry.add(i))},{priority:\"highest\"}),this.listenTo(this._undoCommand,\"revert\",(t,e,n)=>{this._redoCommand.addBatch(n)}),t.keystrokes.set(\"CTRL+Z\",\"undo\"),t.keystrokes.set(\"CTRL+Y\",\"redo\"),t.keystrokes.set(\"CTRL+SHIFT+Z\",\"redo\")}}n(49);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class bf extends Sd{constructor(){super();const t=this.bindTemplate;this.set(\"content\",\"\"),this.set(\"viewBox\",\"0 0 20 20\"),this.set(\"fillColor\",\"\"),this.setTemplate({tag:\"svg\",ns:\"http://www.w3.org/2000/svg\",attributes:{class:\"ck-icon\",viewBox:t.to(\"viewBox\")}})}render(){super.render(),this._updateXMLContent(),this._colorFillPaths(),this.on(\"change:content\",()=>{this._updateXMLContent(),this._colorFillPaths()}),this.on(\"change:fillColor\",()=>{this._colorFillPaths()})}_updateXMLContent(){if(this.content){const t=(new DOMParser).parseFromString(this.content.trim(),\"image/svg+xml\").querySelector(\"svg\"),e=t.getAttribute(\"viewBox\");for(e&&(this.viewBox=e),this.element.innerHTML=\"\";t.childNodes.length>0;)this.element.appendChild(t.childNodes[0])}}_colorFillPaths(){this.fillColor&&this.element.querySelectorAll(\".ck-icon__fill\").forEach(t=>{t.style.fill=this.fillColor})}}n(48);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class vf extends Sd{constructor(t){super(t),this.set(\"text\",\"\"),this.set(\"position\",\"s\");const e=this.bindTemplate;this.setTemplate({tag:\"span\",attributes:{class:[\"ck-tooltip\",e.to(\"position\",t=>\"ck-tooltip_\"+t),e.if(\"text\",\"ck-hidden\",t=>!t.trim())]},children:[{tag:\"span\",attributes:{class:[\"ck-tooltip__text\"]},children:[{text:e.to(\"text\")}]}]})}}n(47);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class _f extends Sd{constructor(t){super(t);const e=this.bindTemplate;this.set(\"icon\"),this.set(\"isEnabled\",!0),this.set(\"isOn\",!1),this.set(\"isVisible\",!0),this.set(\"keystroke\"),this.set(\"label\"),this.set(\"tabindex\",-1),this.set(\"tooltip\"),this.set(\"tooltipPosition\",\"s\"),this.set(\"type\",\"button\"),this.set(\"withText\",!1),this.children=this.createCollection(),this.tooltipView=this._createTooltipView(),this.labelView=this._createLabelView(),this.iconView=new bf,this.iconView.extendTemplate({attributes:{class:\"ck-button__icon\"}}),this.bind(\"_tooltipString\").to(this,\"tooltip\",this,\"label\",this,\"keystroke\",this._getTooltipString.bind(this)),this.setTemplate({tag:\"button\",attributes:{class:[\"ck-button\",e.to(\"isEnabled\",t=>t?\"ck-enabled\":\"ck-disabled\"),e.if(\"isVisible\",\"ck-hidden\",t=>!t),e.to(\"isOn\",t=>t?\"ck-on\":\"ck-off\"),e.if(\"withText\",\"ck-button_with-text\")],type:e.to(\"type\",t=>t||\"button\"),tabindex:e.to(\"tabindex\")},children:this.children,on:{mousedown:e.to(t=>{t.preventDefault()}),click:e.to(t=>{this.isEnabled?this.fire(\"execute\"):t.preventDefault()})}})}render(){super.render(),this.icon&&(this.iconView.bind(\"content\").to(this,\"icon\"),this.children.add(this.iconView)),this.children.add(this.tooltipView),this.children.add(this.labelView)}focus(){this.element.focus()}_createTooltipView(){const t=new vf;return t.bind(\"text\").to(this,\"_tooltipString\"),t.bind(\"position\").to(this,\"tooltipPosition\"),t}_createLabelView(){const t=new Sd;return t.setTemplate({tag:\"span\",attributes:{class:[\"ck-button__label\"]},children:[{text:this.bindTemplate.to(\"label\")}]}),t}_getTooltipString(t,e,n){return t?\"string\"==typeof t?t:(n&&(n=function(t){return Gi.isMac?tr(t).map(t=>Ji[t.toLowerCase()]||t).reduce((t,e)=>t.slice(-1)in Yi?t+e:t+\"+\"+e):t}(n)),t instanceof Function?t(e,n):`${e}${n?` (${n})`:\"\"}`):\"\"}}var yf=n(25),kf=n.n(yf),xf=n(24),Af=n.n(xf);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Cf extends qd{init(){const t=this.editor.t;this._addButton(\"undo\",t(\"Undo\"),\"CTRL+Z\",kf.a),this._addButton(\"redo\",t(\"Redo\"),\"CTRL+Y\",Af.a)}_addButton(t,e,n,i){const r=this.editor;r.ui.componentFactory.add(t,s=>{const o=r.commands.get(t),a=new _f(s);return a.set({label:e,icon:i,keystroke:n,tooltip:!0}),a.bind(\"isEnabled\").to(o,\"isEnabled\"),this.listenTo(a,\"execute\",()=>r.execute(t)),a})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Tf extends qd{static get requires(){return[wf,Cf]}static get pluginName(){return\"Undo\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Sf{constructor(){const t=new window.FileReader;this._reader=t,this.set(\"loaded\",0),t.onprogress=(t=>{this.loaded=t.loaded})}get error(){return this._reader.error}read(t){const e=this._reader;return this.total=t.size,new Promise((n,i)=>{e.onload=(()=>{n(e.result)}),e.onerror=(()=>{i(\"error\")}),e.onabort=(()=>{i(\"aborted\")}),this._reader.readAsDataURL(t)})}abort(){this._reader.abort()}}R(Sf,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Pf extends qd{static get pluginName(){return\"FileRepository\"}init(){this.loaders=new ji,this.set(\"uploaded\",0),this.set(\"uploadTotal\",null),this.bind(\"uploadedPercent\").to(this,\"uploaded\",this,\"uploadTotal\",(t,e)=>e?t/e*100:0)}getLoader(t){for(const e of this.loaders)if(e.file==t)return e;return null}createLoader(t){if(!this.createUploadAdapter)return Ds.error(\"filerepository-no-upload-adapter: Upload adapter is not defined.\"),null;const e=new Ef(t);return e._adapter=this.createUploadAdapter(e),this.loaders.add(e),e.on(\"change:uploaded\",()=>{let t=0;for(const e of this.loaders)t+=e.uploaded;this.uploaded=t}),e.on(\"change:uploadTotal\",()=>{let t=0;for(const e of this.loaders)e.uploadTotal&&(t+=e.uploadTotal);this.uploadTotal=t}),e}destroyLoader(t){const e=t instanceof Ef?t:this.getLoader(t);e._destroy(),this.loaders.remove(e)}}R(Pf,xi);class Ef{constructor(t,e){this.id=_(),this.file=t,this._adapter=e,this._reader=new Sf,this.set(\"status\",\"idle\"),this.set(\"uploaded\",0),this.set(\"uploadTotal\",null),this.bind(\"uploadedPercent\").to(this,\"uploaded\",this,\"uploadTotal\",(t,e)=>e?t/e*100:0),this.set(\"uploadResponse\",null)}read(){if(\"idle\"!=this.status)throw new g(\"filerepository-read-wrong-status: You cannot call read if the status is different than idle.\");return this.status=\"reading\",this._reader.read(this.file).then(t=>(this.status=\"idle\",t)).catch(t=>{if(\"aborted\"===t)throw this.status=\"aborted\",\"aborted\";throw this.status=\"error\",this._reader.error})}upload(){if(\"idle\"!=this.status)throw new g(\"filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.\");return this.status=\"uploading\",this._adapter.upload().then(t=>(this.uploadResponse=t,this.status=\"idle\",t)).catch(t=>{if(\"aborted\"===this.status)throw\"aborted\";throw this.status=\"error\",t})}abort(){const t=this.status;this.status=\"aborted\",\"reading\"==t&&this._reader.abort(),\"uploading\"==t&&this._adapter.abort&&this._adapter.abort(),this._destroy()}_destroy(){this._reader=void 0,this._adapter=void 0,this.data=void 0,this.uploadResponse=void 0,this.file=void 0}}R(Ef,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst Of=\"ckCsrfToken\",Rf=40,Mf=\"abcdefghijklmnopqrstuvwxyz0123456789\";function Ff(){let t=function(t){t=t.toLowerCase();const e=document.cookie.split(\";\");for(const n of e){const e=n.split(\"=\"),i=decodeURIComponent(e[0].trim().toLowerCase());if(i===t)return decodeURIComponent(e[1])}return null}(Of);var e,n;return t&&t.length==Rf||(t=function(t){let e=\"\";const n=new Uint8Array(t);window.crypto.getRandomValues(n);for(let t=0;t<n.length;t++){const i=Mf.charAt(n[t]%Mf.length);e+=Math.random()>.5?i.toUpperCase():i}return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(Rf),e=Of,n=t,document.cookie=encodeURIComponent(e)+\"=\"+encodeURIComponent(n)+\";path=/\"),t}class Vf{constructor(t,e,n){this.loader=t,this.url=e,this.t=n}upload(){return new Promise((t,e)=>{this._initRequest(),this._initListeners(t,e),this._sendRequest()})}abort(){this.xhr&&this.xhr.abort()}_initRequest(){const t=this.xhr=new XMLHttpRequest;t.open(\"POST\",this.url,!0),t.responseType=\"json\"}_initListeners(t,e){const n=this.xhr,i=this.loader,r=(0,this.t)(\"Cannot upload file:\")+` ${i.file.name}.`;n.addEventListener(\"error\",()=>e(r)),n.addEventListener(\"abort\",()=>e()),n.addEventListener(\"load\",()=>{const i=n.response;if(!i||!i.uploaded)return e(i&&i.error&&i.error.message?i.error.message:r);t({default:i.url})}),n.upload&&n.upload.addEventListener(\"progress\",t=>{t.lengthComputable&&(i.uploadTotal=t.total,i.uploaded=t.loaded)})}_sendRequest(){const t=new FormData;t.append(\"upload\",this.loader.file),t.append(\"ckCsrfToken\",Ff()),this.xhr.send(t)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class If{constructor(t,e,n){let i;if(\"function\"==typeof n)i=n;else{const e=n;i=(()=>{t.execute(e)})}t.model.document.on(\"change\",()=>{const n=Array.from(t.model.document.differ.getChanges()),r=n[0];if(1!=n.length||\"insert\"!==r.type||\"$text\"!=r.name||1!=r.length)return;const s=r.position.textNode||r.position.nodeAfter;if(!s.parent.is(\"paragraph\"))return;const o=e.exec(s.data);o&&t.model.enqueueChange(t=>{const e=go.createFromParentsAndOffsets(s.parent,0,s.parent,o[0].length);t.remove(e),i({match:o})})})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Nf{constructor(t,e,n){let i,r,s,o;var a;e instanceof RegExp?i=e:s=e,\"string\"==typeof n?r=n:o=n,s=s||(t=>{let e;const n=[],r=[];for(;null!==(e=i.exec(t))&&!(e&&e.length<4);){let{index:t,1:i,2:s,3:o}=e;const a=i+s+o,l=[t+=e[0].length-a.length,t+i.length],c=[t+i.length+s.length,t+i.length+s.length+o.length];n.push(l),n.push(c),r.push([t+i.length,t+i.length+s.length])}return{remove:n,format:r}}),o=o||((t,e)=>{for(const n of e)t.setAttribute(r,!0,n);t.removeSelectionAttribute(r)}),t.model.document.on(\"change\",()=>{const e=t.model.document.selection;if(!e.isCollapsed)return;const n=Array.from(t.model.document.differ.getChanges()),i=n[0];if(1!=n.length||\"insert\"!==i.type||\"$text\"!=i.name||1!=i.length)return;const l=e.focus.parent,c=(a=l,Array.from(a.getChildren()).reduce((t,e)=>t+e.data,\"\")).slice(0,e.focus.offset),h=s(c),u=Df(l,h.format),d=Df(l,h.remove);u.length&&d.length&&t.model.enqueueChange(e=>{const n=t.model.schema.getValidRanges(u,r);o(e,n);for(const t of d.reverse())e.remove(t)})})}}function Df(t,e){return e.filter(t=>void 0!==t[0]&&void 0!==t[1]).map(e=>go.createFromParentsAndOffsets(t,e[0],t,e[1]))}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Bf extends Gd{constructor(t,e){super(t),this.attributeKey=e}refresh(){const t=this.editor.model,e=t.document;this.value=e.selection.hasAttribute(this.attributeKey),this.isEnabled=t.schema.checkAttributeInSelection(e.selection,this.attributeKey)}execute(t={}){const e=this.editor.model,n=e.document.selection,i=void 0===t.forceValue?!this.value:t.forceValue;e.change(t=>{if(n.isCollapsed)i?t.setSelectionAttribute(this.attributeKey,!0):t.removeSelectionAttribute(this.attributeKey);else{const r=e.schema.getValidRanges(n.getRanges(),this.attributeKey);for(const e of r)i?t.setAttribute(this.attributeKey,i,e):t.removeAttribute(this.attributeKey,e)}})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Lf=\"bold\";class jf extends qd{init(){const t=this.editor;t.model.schema.extend(\"$text\",{allowAttributes:Lf}),t.conversion.attributeToElement({model:Lf,view:\"strong\",upcastAlso:[\"b\",{style:{\"font-weight\":\"bold\"}}]}),t.commands.add(Lf,new Bf(t,Lf)),t.keystrokes.set(\"CTRL+B\",Lf)}}var Uf=n(23),zf=n.n(Uf);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst qf=\"bold\";class Wf extends qd{init(){const t=this.editor,e=t.t;t.ui.componentFactory.add(qf,n=>{const i=t.commands.get(qf),r=new _f(n);return r.set({label:e(\"Bold\"),icon:zf.a,keystroke:\"CTRL+B\",tooltip:!0}),r.bind(\"isOn\",\"isEnabled\").to(i,\"value\",\"isEnabled\"),this.listenTo(r,\"execute\",()=>t.execute(qf)),r})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst Hf=\"italic\";class $f extends qd{init(){const t=this.editor;t.model.schema.extend(\"$text\",{allowAttributes:Hf}),t.conversion.attributeToElement({model:Hf,view:\"i\",upcastAlso:[\"em\",{style:{\"font-style\":\"italic\"}}]}),t.commands.add(Hf,new Bf(t,Hf)),t.keystrokes.set(\"CTRL+I\",Hf)}}var Kf=n(22),Gf=n.n(Kf);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst Yf=\"italic\";class Jf extends qd{init(){const t=this.editor,e=t.t;t.ui.componentFactory.add(Yf,n=>{const i=t.commands.get(Yf),r=new _f(n);return r.set({label:e(\"Italic\"),icon:Gf.a,keystroke:\"CTRL+I\",tooltip:!0}),r.bind(\"isOn\",\"isEnabled\").to(i,\"value\",\"isEnabled\"),this.listenTo(r,\"execute\",()=>t.execute(Yf)),r})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction Qf(t){const e=t.next();return e.done?null:e.value}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Xf extends Gd{refresh(){this.value=this._getValue(),this.isEnabled=this._checkEnabled()}execute(){const t=this.editor.model,e=t.document,n=t.schema,i=Array.from(e.selection.getSelectedBlocks());t.change(t=>{if(this.value)this._removeQuote(t,i.filter(Zf));else{const e=i.filter(t=>Zf(t)||em(n,t));this._applyQuote(t,e)}})}_getValue(){const t=Qf(this.editor.model.document.selection.getSelectedBlocks());return!(!t||!Zf(t))}_checkEnabled(){if(this.value)return!0;const t=this.editor.model.document.selection,e=this.editor.model.schema,n=Qf(t.getSelectedBlocks());return!!n&&em(e,n)}_removeQuote(t,e){tm(e).reverse().forEach(e=>{if(e.start.isAtStart&&e.end.isAtEnd)return void t.unwrap(e.start.parent);if(e.start.isAtStart){const n=po.createBefore(e.start.parent);return void t.move(e,n)}e.end.isAtEnd||t.split(e.end);const n=po.createAfter(e.end.parent);t.move(e,n)})}_applyQuote(t,e){const n=[];tm(e).reverse().forEach(e=>{let i=Zf(e.start);i||(i=new ho(\"blockQuote\"),t.wrap(e,i)),n.push(i)}),n.reverse().reduce((e,n)=>e.nextSibling==n?(t.merge(po.createAfter(e)),e):n)}}function Zf(t){return\"blockQuote\"==t.parent.name?t.parent:null}function tm(t){let e,n=0;const i=[];for(;n<t.length;){const r=t[n],s=t[n+1];e||(e=po.createBefore(r)),s&&r.nextSibling==s||(i.push(new go(e,po.createAfter(r))),e=null),n++}return i}function em(t,e){const n=t.checkChild(e.parent,\"blockQuote\"),i=t.checkChild([\"$root\",\"blockQuote\"],e);return n&&i}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class nm extends qd{init(){const t=this.editor,e=t.model.schema;t.commands.add(\"blockQuote\",new Xf(t)),e.register(\"blockQuote\",{allowWhere:\"$block\",allowContentOf:\"$root\"}),e.addChildCheck((t,e)=>{if(t.endsWith(\"blockQuote\")&&\"blockQuote\"==e.name)return!1}),t.conversion.elementToElement({model:\"blockQuote\",view:\"blockquote\"})}afterInit(){const t=this.editor.commands.get(\"blockQuote\");this.listenTo(this.editor.editing.view.document,\"enter\",(e,n)=>{const i=this.editor.model.document,r=i.selection.getLastPosition().parent;i.selection.isCollapsed&&r.isEmpty&&t.value&&(this.editor.execute(\"blockQuote\"),this.editor.editing.view.scrollToTheSelection(),n.preventDefault(),e.stop())})}}var im=n(21),rm=n.n(im);n(46);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass sm extends qd{init(){const t=this.editor,e=t.t;t.ui.componentFactory.add(\"blockQuote\",n=>{const i=t.commands.get(\"blockQuote\"),r=new _f(n);return r.set({label:e(\"Block quote\"),icon:rm.a,tooltip:!0}),r.bind(\"isOn\",\"isEnabled\").to(i,\"value\",\"isEnabled\"),this.listenTo(r,\"execute\",()=>t.execute(\"blockQuote\")),r})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst om=/^data:(\\S*?);base64,/;class am{constructor(t,e,n){if(!t)throw new Error(\"File must be provided\");if(!e)throw new Error(\"Token must be provided\");if(!n)throw new Error(\"Api address must be provided\");this.file=function(t){if(\"string\"!=typeof t)return!1;const e=t.match(om);return!(!e||!e.length)}(t)?function(t,e=512){try{const n=t.match(om)[1],i=atob(t.replace(om,\"\")),r=[];for(let t=0;t<i.length;t+=e){const n=i.slice(t,t+e),s=new Array(n.length);for(let t=0;t<n.length;t++)s[t]=n.charCodeAt(t);r.push(new Uint8Array(s))}return new Blob(r,{type:n})}catch(t){throw new Error(\"Problem with decoding Base64 image data.\")}}(t):t,this._token=e,this._apiAddress=n}onProgress(t){return this.on(\"progress\",(e,n)=>t(n)),this}onError(t){return this.once(\"error\",(e,n)=>t(n)),this}abort(){this.xhr.abort()}send(){return this._prepareRequest(),this._attachXHRListeners(),this._sendRequest()}_prepareRequest(){const t=new XMLHttpRequest;t.open(\"POST\",this._apiAddress),t.setRequestHeader(\"Authorization\",this._token.value),t.responseType=\"json\",this.xhr=t}_attachXHRListeners(){const t=this,e=this.xhr;function n(e){return()=>t.fire(\"error\",e)}e.addEventListener(\"error\",n(\"Network Error\")),e.addEventListener(\"abort\",n(\"Abort\")),e.upload&&e.upload.addEventListener(\"progress\",t=>{t.lengthComputable&&this.fire(\"progress\",{total:t.total,uploaded:t.loaded})}),e.addEventListener(\"load\",()=>{const t=e.status,n=e.response;if(t<200||t>299)return this.fire(\"error\",n.message||n.error)})}_sendRequest(){const t=new FormData,e=this.xhr;return t.append(\"file\",this.file),new Promise((n,i)=>{e.addEventListener(\"load\",()=>{const t=e.status,r=e.response;return t<200||t>299?i(r.message||r.error):n(r)}),e.addEventListener(\"error\",()=>i(\"Network Error\")),e.addEventListener(\"abort\",()=>i(\"Abort\")),e.send(t)})}}R(am,A);var lm=am;\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst cm={refreshInterval:36e5,autoRefresh:!0};class hm{constructor(t,e=cm){if(!t)throw new Error(\"`tokenUrl` must be provided\");this.set(\"value\",e.initValue),this._tokenUrl=t,this._options=Object.assign({},cm,e)}init(){return new Promise((t,e)=>{this._options.autoRefresh&&this._startRefreshing(),this.value?t(this):this._refreshToken().then(t).catch(e)})}_refreshToken(){return new Promise((t,e)=>{const n=new XMLHttpRequest;n.open(\"GET\",this._tokenUrl),n.addEventListener(\"load\",()=>{const i=n.status,r=n.response;return i<200||i>299?e(\"Cannot download new token!\"):(this.set(\"value\",r),t(this))}),n.addEventListener(\"error\",()=>e(\"Network Error\")),n.addEventListener(\"abort\",()=>e(\"Abort\")),n.send()})}_startRefreshing(){this._refreshInterval=setInterval(this._refreshToken.bind(this),this._options.refreshInterval)}_stopRefreshing(){clearInterval(this._refreshInterval)}static create(t,e=cm){return new hm(t,e).init()}}R(hm,xi);var um=hm;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class dm extends qd{init(){const t=this.editor.config.get(\"cloudServices\")||{};for(const e in t)this[e]=t[e];if(this.tokenUrl)return this.token=new dm.Token(this.tokenUrl),this.token.init();this.token=null}}dm.Token=um;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass fm extends qd{static get requires(){return[Pf,dm]}init(){const t=this.editor,e=t.plugins.get(dm),n=e.token,i=e.uploadUrl;n&&(this._uploadGateway=new fm._UploadGateway(n,i),t.plugins.get(Pf).createUploadAdapter=(t=>new mm(this._uploadGateway,t)))}}class mm{constructor(t,e){this.uploadGateway=t,this.loader=e}upload(){return this.fileUploader=this.uploadGateway.upload(this.loader.file),this.fileUploader.on(\"progress\",(t,e)=>{this.loader.uploadTotal=e.total,this.loader.uploaded=e.uploaded}),this.fileUploader.send()}abort(){this.fileUploader.abort()}}function pm(t){return n=>{n.on(`attribute:${t}:image`,e)};function e(t,e,n){if(!n.consumable.consume(e.item,t.name))return;const i=n.writer,r=n.mapper.toViewElement(e.item).getChild(0);null!==e.attributeNewValue?i.setAttribute(e.attributeKey,e.attributeNewValue,r):i.removeAttribute(e.attributeKey,r)}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */fm._UploadGateway=class{constructor(t,e){if(!t)throw new Error(\"Token must be provided\");if(!e)throw new Error(\"Api address must be provided\");this._token=t,this._apiAddress=e}upload(t){return new lm(t,this._token,this._apiAddress)}};class gm{constructor(){this._stack=[]}add(t,e){const n=this._stack,i=n[0];this._insertDescriptor(t);const r=n[0];i===r||wm(i,r)||this.fire(\"change:top\",{oldDescriptor:i,newDescriptor:r,writer:e})}remove(t,e){const n=this._stack,i=n[0];this._removeDescriptor(t);const r=n[0];i===r||wm(i,r)||this.fire(\"change:top\",{oldDescriptor:i,newDescriptor:r,writer:e})}_insertDescriptor(t){const e=this._stack,n=e.findIndex(e=>e.id===t.id);if(wm(t,e[n]))return;n>-1&&e.splice(n,1);let i=0;for(;e[i]&&bm(e[i],t);)i++;e.splice(i,0,t)}_removeDescriptor(t){const e=this._stack,n=e.findIndex(e=>e.id===t);n>-1&&e.splice(n,1)}}function wm(t,e){return t&&e&&t.priority==e.priority&&vm(t.class)==vm(e.class)}function bm(t,e){return t.priority>e.priority||!(t.priority<e.priority)&&vm(t.class)>vm(e.class)}function vm(t){return Array.isArray(t)?t.sort().join(\",\"):t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */R(gm,A);const _m=Symbol(\"isWidget\"),ym=Symbol(\"label\"),km=\"ck-widget\",xm=\"ck-widget_selected\";function Am(t){return!!t.getCustomProperty(_m)}function Cm(t,e,n={}){return e.setAttribute(\"contenteditable\",\"false\",t),e.addClass(km,t),e.setCustomProperty(_m,!0,t),t.getFillerOffset=Sm,n.label&&function(t,e,n){n.setCustomProperty(ym,e,t)}(t,n.label,e),function(t,e,n,i){const r=new gm;r.on(\"change:top\",(e,r)=>{r.oldDescriptor&&i(t,r.oldDescriptor,r.writer),r.newDescriptor&&n(t,r.newDescriptor,r.writer)}),e.setCustomProperty(\"addHighlight\",(t,e,n)=>r.add(e,n),t),e.setCustomProperty(\"removeHighlight\",(t,e,n)=>r.remove(e,n),t)}(t,e,(t,e,n)=>n.addClass(i(e.class),t),(t,e,n)=>n.removeClass(i(e.class),t)),t;function i(t){return Array.isArray(t)?t:[t]}}function Tm(t){const e=t.getCustomProperty(ym);return e?\"function\"==typeof e?e():e:\"\"}function Sm(){return null}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Pm=Symbol(\"isImage\");function Em(t){const e=t.getSelectedElement();return!(!e||!function(t){return!!t.getCustomProperty(Pm)&&Am(t)}(e))}function Om(t){return t instanceof ho&&\"image\"==t.name}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Rm extends qd{init(){const t=this.editor,e=t.model.schema,n=t.t,i=t.conversion;var r,s,o;e.register(\"image\",{isObject:!0,isBlock:!0,allowWhere:\"$block\",allowAttributes:[\"alt\",\"src\",\"srcset\"]}),i.for(\"dataDowncast\").add(Ro({model:\"image\",view:(t,e)=>Mm(e)})),i.for(\"editingDowncast\").add(Ro({model:\"image\",view:(t,e)=>(r=Mm(e),s=e,o=n(\"image widget\"),s.setCustomProperty(Pm,!0,r),Cm(r,s,{label:function(){const t=r.getChild(0).getAttribute(\"alt\");return t?`${t} ${o}`:o}}))})),i.for(\"downcast\").add(pm(\"src\")).add(pm(\"alt\")).add(function(){return e=>{e.on(\"attribute:srcset:image\",t)};function t(t,e,n){if(!n.consumable.consume(e.item,t.name))return;const i=n.writer,r=n.mapper.toViewElement(e.item).getChild(0);if(null===e.attributeNewValue){const t=e.attributeOldValue;t.data&&(i.removeAttribute(\"srcset\",r),i.removeAttribute(\"sizes\",r),t.width&&i.removeAttribute(\"width\",r))}else{const t=e.attributeNewValue;t.data&&(i.setAttribute(\"srcset\",t.data,r),i.setAttribute(\"sizes\",\"100vw\",r),t.width&&i.setAttribute(\"width\",t.width,r))}}}()),i.for(\"upcast\").add(ha({view:{name:\"img\",attribute:{src:!0}},model:(t,e)=>e.createElement(\"image\",{src:t.getAttribute(\"src\")})})).add(da({view:{name:\"img\",key:\"alt\"},model:\"alt\"})).add(da({view:{name:\"img\",key:\"srcset\"},model:{key:\"srcset\",value:t=>{const e={data:t.getAttribute(\"srcset\")};return t.hasAttribute(\"width\")&&(e.width=t.getAttribute(\"width\")),e}}})).add(\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction(){return e=>{e.on(\"element:figure\",t)};function t(t,e,n){if(!n.consumable.test(e.viewItem,{name:!0,class:\"image\"}))return;const i=Array.from(e.viewItem.getChildren()).find(t=>t.is(\"img\"));if(!i||!i.hasAttribute(\"src\")||!n.consumable.test(i,{name:!0}))return;const r=n.convertItem(i,e.modelCursor),s=Qf(r.modelRange.getItems());s&&(n.convertChildren(e.viewItem,po.createAt(s)),e.modelRange=r.modelRange,e.modelCursor=r.modelCursor)}}())}}function Mm(t){const e=t.createEmptyElement(\"img\"),n=t.createContainerElement(\"figure\",{class:\"image\"});return t.insert(Ii.createAt(n),e),n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Fm extends Es{constructor(t){super(t),this.domEventType=\"mousedown\"}onDomEvent(t){this.fire(t.type,t)}}n(45);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Vm=Zi(\"Ctrl+A\");class Im extends qd{static get pluginName(){return\"Widget\"}init(){const t=this.editor.editing.view,e=t.document;this._previouslySelected=new Set,this.editor.editing.downcastDispatcher.on(\"selection\",(t,e,n)=>{this._clearPreviouslySelectedWidgets(n.writer);const i=n.writer,r=i.document.selection,s=r.getSelectedElement();for(const t of r.getRanges())for(const e of t){const t=e.item;t.is(\"element\")&&Am(t)&&(i.addClass(xm,t),this._previouslySelected.add(t),t==s&&i.setSelection(r.getRanges(),{fake:!0,label:Tm(s)}))}},{priority:\"low\"}),t.addObserver(Fm),this.listenTo(e,\"mousedown\",(...t)=>this._onMousedown(...t)),this.listenTo(e,\"keydown\",(...t)=>this._onKeydown(...t),{priority:\"high\"}),this.listenTo(e,\"delete\",(t,e)=>{this._handleDelete(\"forward\"==e.direction)&&(e.preventDefault(),t.stop())},{priority:\"high\"})}_onMousedown(t,e){const n=this.editor,i=n.editing.view,r=i.document;let s=e.target;if(function(t){for(;t;){if(t instanceof Oi&&!(t instanceof Mi))return!0;t=t.parent}return!1}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(s))return;if(!Am(s)&&!(s=s.findAncestor(Am)))return;e.preventDefault(),r.isFocused||i.focus();const o=n.editing.mapper.toModelElement(s);n.model.change(()=>{this._setSelectionOverElement(o)})}_onKeydown(t,e){const n=e.keyCode,i=n==Qi.delete||n==Qi.arrowdown||n==Qi.arrowright;let r=!1;!function(t){return t==Qi.arrowright||t==Qi.arrowleft||t==Qi.arrowup||t==Qi.arrowdown}(n)?function(t){return Xi(t)==Vm}(e)&&(r=this._selectAllNestedEditableContent()||this._selectAllContent()):r=this._handleArrowKeys(i),r&&(e.preventDefault(),t.stop())}_handleDelete(t){if(this.editor.isReadOnly)return;const e=this.editor.model.document.selection;if(!e.isCollapsed)return;const n=this._getObjectElementNextToSelection(t);return n?(this.editor.model.change(t=>{let i=e.anchor.parent;for(;i.isEmpty;){const e=i;i=e.parent,t.remove(e)}this._setSelectionOverElement(n)}),!0):void 0}_handleArrowKeys(t){const e=this.editor.model,n=e.schema,i=e.document.selection,r=i.getSelectedElement();if(r&&n.isObject(r)){const r=t?i.getLastPosition():i.getFirstPosition(),s=n.getNearestSelectionRange(r,t?\"forward\":\"backward\");return s&&e.change(t=>{t.setSelection(s)}),!0}if(!i.isCollapsed)return;const s=this._getObjectElementNextToSelection(t);return s instanceof ho&&n.isObject(s)?(e.change(()=>{this._setSelectionOverElement(s)}),!0):void 0}_selectAllNestedEditableContent(){const t=this.editor.model,e=t.document.selection,n=t.schema.getLimitElement(e);return e.getFirstRange().root!=n&&(t.change(t=>{t.setSelection(go.createIn(n))}),!0)}_selectAllContent(){const t=this.editor.model,e=this.editor.editing,n=e.view.document.selection.getSelectedElement();if(n&&Am(n)){const i=e.mapper.toModelElement(n.parent);return t.change(t=>{t.setSelection(go.createIn(i))}),!0}return!1}_setSelectionOverElement(t){this.editor.model.change(e=>{e.setSelection(go.createOn(t))})}_getObjectElementNextToSelection(t){const e=this.editor.model,n=e.schema,i=e.document.selection,r=new ko(i);e.modifySelection(r,{direction:t?\"forward\":\"backward\"});const s=t?r.focus.nodeBefore:r.focus.nodeAfter;return s instanceof ho&&n.isObject(s)?s:null}_clearPreviouslySelectedWidgets(t){for(const e of this._previouslySelected)t.removeClass(xm,e);this._previouslySelected.clear()}}class Nm extends Gd{refresh(){const t=this.editor.model.document.selection.getSelectedElement();this.isEnabled=Om(t),Om(t)&&t.hasAttribute(\"alt\")?this.value=t.getAttribute(\"alt\"):this.value=!1}execute(t){const e=this.editor.model,n=e.document.selection.getSelectedElement();e.change(e=>{e.setAttribute(\"alt\",t.newValue,n)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Dm extends qd{init(){this.editor.commands.add(\"imageTextAlternative\",new Nm(this.editor))}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Bm({emitter:t,activator:e,callback:n,contextElements:i}){t.listenTo(document,\"mousedown\",(t,{target:r})=>{if(e()){for(const t of i)if(t.contains(r))return;n()}})}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Lm extends Sd{constructor(t,e){super(t);const n=`ck-input-${_()}`;this.set(\"label\"),this.set(\"value\"),this.set(\"isReadOnly\",!1),this.labelView=this._createLabelView(n),this.inputView=this._createInputView(e,n);const i=this.bindTemplate;this.setTemplate({tag:\"div\",attributes:{class:[\"ck-labeled-input\",i.if(\"isReadOnly\",\"ck-disabled\")]},children:[this.labelView,this.inputView]})}_createLabelView(t){const e=new Ed(this.locale);return e.for=t,e.bind(\"text\").to(this,\"label\"),e}_createInputView(t,e){const n=new t(this.locale);return n.id=e,n.bind(\"value\").to(this),n.bind(\"isReadOnly\").to(this),n}select(){this.inputView.select()}focus(){this.inputView.focus()}}n(44);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class jm extends Sd{constructor(t){super(t),this.set(\"value\"),this.set(\"id\"),this.set(\"placeholder\"),this.set(\"isReadOnly\",!1);const e=this.bindTemplate;this.setTemplate({tag:\"input\",attributes:{type:\"text\",class:[\"ck-input\",\"ck-input-text\"],id:e.to(\"id\"),placeholder:e.to(\"placeholder\"),readonly:e.to(\"isReadOnly\")}})}render(){super.render();const t=t=>{this.element.value=t||0===t?t:\"\"};t(this.value),this.on(\"change:value\",(e,n,i)=>{t(i)})}select(){this.element.select()}focus(){this.element.focus()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Um({view:t}){t.listenTo(t.element,\"submit\",(e,n)=>{n.preventDefault(),t.fire(\"submit\")},{useCapture:!0})}var zm=n(3),qm=n.n(zm),Wm=n(2),Hm=n.n(Wm);n(43);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass $m extends Sd{constructor(t){super(t);const e=this.locale.t;this.focusTracker=new rd,this.keystrokes=new Yu,this.labeledInput=this._createLabeledInputView(),this.saveButtonView=this._createButton(e(\"Save\"),qm.a),this.saveButtonView.type=\"submit\",this.cancelButtonView=this._createButton(e(\"Cancel\"),Hm.a,\"cancel\"),this._focusables=new od,this._focusCycler=new Nd({focusables:this._focusables,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:\"shift + tab\",focusNext:\"tab\"}}),this.saveButtonView.extendTemplate({attributes:{class:[\"ck-button-action\"]}}),this.setTemplate({tag:\"form\",attributes:{class:[\"ck-text-alternative-form\"],tabindex:\"-1\"},children:[this.labeledInput,this.saveButtonView,this.cancelButtonView]})}render(){super.render(),this.keystrokes.listenTo(this.element),Um({view:this}),[this.labeledInput,this.saveButtonView,this.cancelButtonView].forEach(t=>{this._focusables.add(t),this.focusTracker.add(t.element)})}_createButton(t,e,n){const i=new _f(this.locale);return i.set({label:t,icon:e,tooltip:!0}),n&&i.delegate(\"execute\").to(this,n),i}_createLabeledInputView(){const t=this.locale.t,e=new Lm(this.locale,jm);return e.label=t(\"Text alternative\"),e.inputView.placeholder=t(\"Text alternative\"),e}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction Km({element:t,target:e,positions:n,limiter:i,fitInViewport:r}){J(e)&&(e=e()),J(i)&&(i=i());const s=function(t){for(;t&&\"html\"!=t.tagName.toLowerCase();){if(\"static\"!=Rr.window.getComputedStyle(t).position)return t;t=t.parentElement}return null}(t.parentElement),o=new Ws(t),a=new Ws(e);let l,c;if(i||r){const t=i&&new Ws(i).getVisible(),e=r&&new Ws(Rr.window);[c,l]=function(t,e,n,i,r){let s,o,a=0,l=0;const c=n.getArea();return t.some(t=>{const[h,u]=Gm(t,e,n);let d,f;if(i)if(r){const t=i.getIntersection(r);d=t?t.getIntersectionArea(u):0}else d=i.getIntersectionArea(u);function m(){l=f,a=d,s=u,o=h}return r&&(f=r.getIntersectionArea(u)),r&&!i?f>l&&m():!r&&i?d>a&&m():f>l&&d>=a?m():f>=l&&d>a&&m(),d===c}),s?[o,s]:null}(n,a,o,t,e)||Gm(n[0],a,o)}else[c,l]=Gm(n[0],a,o);let{left:h,top:u}=Ym(l);if(s){const t=Ym(new Ws(s)),e=qs(s);h-=t.left,u-=t.top,h+=s.scrollLeft,u+=s.scrollTop,h-=e.left,u-=e.top}return{left:h,top:u,name:c}}function Gm(t,e,n){const{left:i,top:r,name:s}=t(e,n);return[s,n.clone().moveTo(i,r)]}function Ym({left:t,top:e}){const{scrollX:n,scrollY:i}=Rr.window;return{left:t+n,top:e+i}}n(42);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Jm=Fd(\"px\"),Qm=Rr.document.body;class Xm extends Sd{constructor(t){super(t);const e=this.bindTemplate;this.set(\"top\",0),this.set(\"left\",0),this.set(\"position\",\"arrow_nw\"),this.set(\"isVisible\",!1),this.set(\"withArrow\",!0),this.set(\"className\"),this.content=this.createCollection(),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-balloon-panel\",e.to(\"position\",t=>`ck-balloon-panel_${t}`),e.if(\"isVisible\",\"ck-balloon-panel_visible\"),e.if(\"withArrow\",\"ck-balloon-panel_with-arrow\"),e.to(\"className\")],style:{top:e.to(\"top\",Jm),left:e.to(\"left\",Jm)}},children:this.content})}show(){this.isVisible=!0}hide(){this.isVisible=!1}attachTo(t){this.show();const e=Xm.defaultPositions,n=Object.assign({},{element:this.element,positions:[e.southArrowNorth,e.southArrowNorthWest,e.southArrowNorthEast,e.northArrowSouth,e.northArrowSouthWest,e.northArrowSouthEast],limiter:Qm,fitInViewport:!0},t),{top:i,left:r,name:s}=Km(n);Object.assign(this,{top:i,left:r,position:s})}pin(t){this.unpin(),this._pinWhenIsVisibleCallback=(()=>{this.isVisible?this._startPinning(t):this._stopPinning()}),this._startPinning(t),this.listenTo(this,\"change:isVisible\",this._pinWhenIsVisibleCallback)}unpin(){this._pinWhenIsVisibleCallback&&(this._stopPinning(),this.stopListening(this,\"change:isVisible\",this._pinWhenIsVisibleCallback),this._pinWhenIsVisibleCallback=null,this.hide())}_startPinning(t){this.attachTo(t);const e=Zm(t.target),n=t.limiter?Zm(t.limiter):Qm;this.listenTo(Rr.document,\"scroll\",(i,r)=>{const s=r.target,o=e&&s.contains(e),a=n&&s.contains(n);!o&&!a&&e&&n||this.attachTo(t)},{useCapture:!0}),this.listenTo(Rr.window,\"resize\",()=>{this.attachTo(t)})}_stopPinning(){this.stopListening(Rr.document,\"scroll\"),this.stopListening(Rr.window,\"resize\")}}function Zm(t){return zs(t)?t:Us(t)?t.commonAncestorContainer:\"function\"==typeof t?Zm(t()):null}function tp(t,e){return t.top-e.height-Xm.arrowVerticalOffset}function ep(t){return t.bottom+Xm.arrowVerticalOffset}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */Xm.arrowHorizontalOffset=25,Xm.arrowVerticalOffset=10,Xm.defaultPositions={northArrowSouth:(t,e)=>({top:tp(t,e),left:t.left+t.width/2-e.width/2,name:\"arrow_s\"}),northArrowSouthEast:(t,e)=>({top:tp(t,e),left:t.left+t.width/2-e.width+Xm.arrowHorizontalOffset,name:\"arrow_se\"}),northArrowSouthWest:(t,e)=>({top:tp(t,e),left:t.left+t.width/2-Xm.arrowHorizontalOffset,name:\"arrow_sw\"}),northWestArrowSouth:(t,e)=>({top:tp(t,e),left:t.left-e.width/2,name:\"arrow_s\"}),northWestArrowSouthWest:(t,e)=>({top:tp(t,e),left:t.left-Xm.arrowHorizontalOffset,name:\"arrow_sw\"}),northWestArrowSouthEast:(t,e)=>({top:tp(t,e),left:t.left-e.width+Xm.arrowHorizontalOffset,name:\"arrow_se\"}),northEastArrowSouth:(t,e)=>({top:tp(t,e),left:t.right-e.width/2,name:\"arrow_s\"}),northEastArrowSouthEast:(t,e)=>({top:tp(t,e),left:t.right-e.width+Xm.arrowHorizontalOffset,name:\"arrow_se\"}),northEastArrowSouthWest:(t,e)=>({top:tp(t,e),left:t.right-Xm.arrowHorizontalOffset,name:\"arrow_sw\"}),southArrowNorth:(t,e)=>({top:ep(t),left:t.left+t.width/2-e.width/2,name:\"arrow_n\"}),southArrowNorthEast:(t,e)=>({top:ep(t),left:t.left+t.width/2-e.width+Xm.arrowHorizontalOffset,name:\"arrow_ne\"}),southArrowNorthWest:(t,e)=>({top:ep(t),left:t.left+t.width/2-Xm.arrowHorizontalOffset,name:\"arrow_nw\"}),southWestArrowNorth:(t,e)=>({top:ep(t),left:t.left-e.width/2,name:\"arrow_n\"}),southWestArrowNorthWest:(t,e)=>({top:ep(t),left:t.left-Xm.arrowHorizontalOffset,name:\"arrow_nw\"}),southWestArrowNorthEast:(t,e)=>({top:ep(t),left:t.left-e.width+Xm.arrowHorizontalOffset,name:\"arrow_ne\"}),southEastArrowNorth:(t,e)=>({top:ep(t),left:t.right-e.width/2,name:\"arrow_n\"}),southEastArrowNorthEast:(t,e)=>({top:ep(t),left:t.right-e.width+Xm.arrowHorizontalOffset,name:\"arrow_ne\"}),southEastArrowNorthWest:(t,e)=>({top:ep(t),left:t.right-Xm.arrowHorizontalOffset,name:\"arrow_nw\"})};class np extends qd{static get pluginName(){return\"ContextualBalloon\"}init(){this.view=new Xm,this.positionLimiter=(()=>{const t=this.editor.editing.view,e=t.document.selection.editableElement;return e?t.domConverter.mapViewToDom(e.root):null}),this._stack=new Map,this.editor.ui.view.body.add(this.view),this.editor.ui.focusTracker.add(this.view.element)}get visibleView(){const t=this._stack.get(this.view.content.get(0));return t?t.view:null}hasView(t){return this._stack.has(t)}add(t){if(this.hasView(t.view))throw new g(\"contextualballoon-add-view-exist: Cannot add configuration of the same view twice.\");this.visibleView&&this.view.content.remove(this.visibleView),this._stack.set(t.view,t),this._show(t)}remove(t){if(!this.hasView(t))throw new g(\"contextualballoon-remove-view-not-exist: Cannot remove configuration of not existing view.\");if(this.visibleView===t){this.view.content.remove(t),this._stack.delete(t);const e=Array.from(this._stack.values()).pop();e?this._show(e):this.view.hide()}else this._stack.delete(t)}updatePosition(t){t&&(this._stack.get(this.visibleView).position=t),this.view.pin(this._getBalloonPosition())}_show({view:t,balloonClassName:e=\"\"}){this.view.className=e,this.view.content.add(t),this.view.pin(this._getBalloonPosition())}_getBalloonPosition(){let t=Qf(this._stack.values()).position;return t&&!t.limiter&&(t=Object.assign({},t,{limiter:this.positionLimiter})),t}}var ip=n(20),rp=n.n(ip);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction sp(t){const e=t.plugins.get(\"ContextualBalloon\");if(Em(t.editing.view.document.selection)){const n=op(t);e.updatePosition(n)}}function op(t){const e=t.editing.view,n=Xm.defaultPositions;return{target:e.domConverter.viewToDom(e.document.selection.getSelectedElement()),positions:[n.northArrowSouth,n.northArrowSouthWest,n.northArrowSouthEast,n.southArrowNorth,n.southArrowNorthWest,n.southArrowNorthEast]}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class ap extends qd{static get requires(){return[np]}init(){this._createButton(),this._createForm()}_createButton(){const t=this.editor,e=t.t;t.ui.componentFactory.add(\"imageTextAlternative\",n=>{const i=t.commands.get(\"imageTextAlternative\"),r=new _f(n);return r.set({label:e(\"Change image text alternative\"),icon:rp.a,tooltip:!0}),r.bind(\"isEnabled\").to(i,\"isEnabled\"),this.listenTo(r,\"execute\",()=>this._showForm()),r})}_createForm(){const t=this.editor,e=t.editing.view,n=e.document;this._balloon=this.editor.plugins.get(\"ContextualBalloon\"),this._form=new $m(t.locale),this._form.render(),this.listenTo(this._form,\"submit\",()=>{t.execute(\"imageTextAlternative\",{newValue:this._form.labeledInput.inputView.element.value}),this._hideForm(!0)}),this.listenTo(this._form,\"cancel\",()=>{this._hideForm(!0)}),this._form.keystrokes.set(\"Esc\",(t,e)=>{this._hideForm(!0),e()}),this.listenTo(e,\"render\",()=>{Em(n.selection)?this._isVisible&&sp(t):this._hideForm(!0)}),Bm({emitter:this._form,activator:()=>this._isVisible,contextElements:[this._form.element],callback:()=>this._hideForm()})}_showForm(){if(this._isVisible)return;const t=this.editor,e=t.commands.get(\"imageTextAlternative\"),n=this._form.labeledInput;this._balloon.hasView(this._form)||this._balloon.add({view:this._form,position:op(t)}),n.value=n.inputView.element.value=e.value||\"\",this._form.labeledInput.select()}_hideForm(t){this._isVisible&&(this._balloon.remove(this._form),t&&this.editor.editing.view.focus())}get _isVisible(){return this._balloon.visibleView==this._form}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class lp extends qd{static get requires(){return[Dm,ap]}static get pluginName(){return\"ImageTextAlternative\"}}n(41);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class cp extends qd{static get requires(){return[Rm,Im,lp]}static get pluginName(){return\"Image\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class hp extends Sd{constructor(t){super(t),this.buttonView=new _f(t),this._fileInputView=new up(t),this._fileInputView.bind(\"acceptedType\").to(this),this._fileInputView.bind(\"allowMultipleFiles\").to(this),this._fileInputView.delegate(\"done\").to(this),this.setTemplate({tag:\"span\",attributes:{class:\"ck-file-dialog-button\"},children:[this.buttonView,this._fileInputView]}),this.buttonView.on(\"execute\",()=>{this._fileInputView.open()})}focus(){this.buttonView.focus()}}class up extends Sd{constructor(t){super(t),this.set(\"acceptedType\"),this.set(\"allowMultipleFiles\",!1);const e=this.bindTemplate;this.setTemplate({tag:\"input\",attributes:{class:[\"ck-hidden\"],type:\"file\",tabindex:\"-1\",accept:e.to(\"acceptedType\"),multiple:e.to(\"allowMultipleFiles\")},on:{change:e.to(()=>{this.element&&this.element.files&&this.element.files.length&&this.fire(\"done\",this.element.files),this.element.value=\"\"})}})}open(){this.element.click()}}var dp=n(19),fp=n.n(dp);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction mp(t){return/^image\\/(jpeg|png|gif|bmp)$/.test(t.type)}function pp(t){const e=t.getSelectedElement();if(e)return po.createAfter(e);const n=t.getSelectedBlocks().next().value;if(n){if(n.isEmpty)return po.createAt(n);const e=po.createAfter(n);return t.focus.isTouching(e)?e:po.createBefore(n)}return t.focus}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class gp extends qd{init(){const t=this.editor,e=t.t;t.ui.componentFactory.add(\"imageUpload\",n=>{const i=new hp(n),r=t.commands.get(\"imageUpload\");return i.set({acceptedType:\"image/*\",allowMultipleFiles:!0}),i.buttonView.set({label:e(\"Insert image\"),icon:fp.a,tooltip:!0}),i.buttonView.bind(\"isEnabled\").to(r),i.on(\"done\",(e,n)=>{for(const e of Array.from(n)){const n=pp(t.model.document.selection);mp(e)&&t.execute(\"imageUpload\",{file:e,insertAt:n})}}),i})}}var wp=n(18),bp=n.n(wp);n(40);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass vp extends qd{constructor(t){super(t),this.placeholder=\"data:image/svg+xml;utf8,\"+encodeURIComponent(bp.a)}init(){this.editor.editing.downcastDispatcher.on(\"attribute:uploadStatus:image\",(...t)=>this.uploadStatusChange(...t))}uploadStatusChange(t,e,n){const i=this.editor,r=e.item,s=r.getAttribute(\"uploadId\");if(!n.consumable.consume(e.item,t.name)||!s)return;const o=i.plugins.get(Pf),a=this.placeholder,l=e.attributeNewValue,c=i.editing.mapper.toViewElement(r),h=n.writer;if(\"reading\"==l){h.addClass([\"ck-appear\",\"ck-infinite-progress\",\"ck-image-upload-placeholder\"],c);const t=c.getChild(0);return void h.setAttribute(\"src\",a,t)}if(\"uploading\"==l){const t=o.loaders.get(s);if(t){const e=function(t){const e=t.createUIElement(\"div\",{class:\"ck-progress-bar\"});return t.setCustomProperty(_p,!0,e),e}(h);h.removeClass([\"ck-infinite-progress\",\"ck-image-upload-placeholder\"],c),h.insert(Ii.createAt(c,\"end\"),e),t.on(\"change:uploadedPercent\",(t,n,r)=>{i.editing.view.change(t=>{t.setStyle(\"width\",r+\"%\",e)})})}return}const u=function(t){for(const e of t.getChildren())if(e.getCustomProperty(_p))return e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(c);u?h.remove(Ni.createOn(u)):h.removeClass(\"ck-infinite-progress\",c),h.removeClass([\"ck-appear\",\"ck-image-upload-placeholder\"],c)}}const _p=Symbol(\"progress-bar\");class yp extends Gd{execute(t){const e=this.editor,n=e.model.document,i=t.file,r=e.plugins.get(Pf);e.model.change(s=>{const o=r.createLoader(i);if(!o)return;const a=new ho(\"image\",{uploadId:o.id});let l;l=t.insertAt?new ko([new go(t.insertAt)]):n.selection,e.model.insertContent(a,l),a.parent&&s.setSelection(go.createOn(a))})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class kp extends qd{static get pluginName(){return\"Notification\"}init(){this.on(\"show:warning\",(t,e)=>{window.alert(e.message)},{priority:\"lowest\"})}showSuccess(t,e={}){this._showNotification({message:t,type:\"success\",namespace:e.namespace,title:e.title})}showInfo(t,e={}){this._showNotification({message:t,type:\"info\",namespace:e.namespace,title:e.title})}showWarning(t,e={}){this._showNotification({message:t,type:\"warning\",namespace:e.namespace,title:e.title})}_showNotification(t){const e=`show:${t.type}`+(t.namespace?`:${t.namespace}`:\"\");this.fire(e,{message:t.message,type:t.type,title:t.title||\"\"})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class xp extends qd{static get requires(){return[Pf,kp]}init(){const t=this.editor,e=t.model.document,n=t.model.schema,i=t.plugins.get(Pf);var r;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */n.extend(\"image\",{allowAttributes:[\"uploadId\",\"uploadStatus\"]}),t.commands.add(\"imageUpload\",new yp(t)),t.editing.view.document.on(\"clipboardInput\",(n,i)=>{if(r=i.dataTransfer,Array.from(r.types).includes(\"text/html\")&&\"\"!==r.getData(\"text/html\"))return;let s=new ko(i.targetRanges.map(e=>t.editing.mapper.toModelRange(e)));for(const r of i.dataTransfer.files){const i=pp(s);mp(r)&&(t.execute(\"imageUpload\",{file:r,insertAt:i}),n.stop()),s=e.selection}}),t.editing.view.document.on(\"dragover\",(t,e)=>{e.preventDefault()}),e.on(\"change\",()=>{const t=e.differ.getChanges({includeChangesInGraveyard:!0});for(const e of t)if(\"insert\"==e.type&&\"image\"==e.name){const t=e.position.nodeAfter,n=\"$graveyard\"==e.position.root.rootName,r=t.getAttribute(\"uploadId\");if(!r)continue;const s=i.loaders.get(r);if(!s)continue;n?s.abort():\"idle\"==s.status&&this._load(s,t)}})}_load(t,e){const n=this.editor,i=n.model,r=n.locale.t,s=n.plugins.get(Pf),o=n.plugins.get(kp);function a(){i.enqueueChange(\"transparent\",t=>{t.removeAttribute(\"uploadId\",e),t.removeAttribute(\"uploadStatus\",e)}),s.destroyLoader(t)}i.enqueueChange(\"transparent\",t=>{t.setAttribute(\"uploadStatus\",\"reading\",e)}),t.read().then(r=>{const s=n.editing.mapper.toViewElement(e).getChild(0),o=t.upload();return n.editing.view.change(t=>{t.setAttribute(\"src\",r,s)}),i.enqueueChange(\"transparent\",t=>{t.setAttribute(\"uploadStatus\",\"uploading\",e)}),o}).then(t=>{i.enqueueChange(\"transparent\",n=>{n.setAttributes({uploadStatus:\"complete\",src:t.default},e);let i=0;const r=Object.keys(t).filter(t=>{const e=parseInt(t,10);if(!isNaN(e))return i=Math.max(i,e),!0}).map(e=>`${t[e]} ${e}w`).join(\", \");\"\"!=r&&n.setAttribute(\"srcset\",{data:r,width:i},e)}),a()}).catch(n=>{\"error\"==t.status&&o.showWarning(n,{title:r(\"Upload failed\"),namespace:\"upload\"}),a(),i.enqueueChange(\"transparent\",t=>{t.remove(e)})})}}class Ap extends qd{static get pluginName(){return\"ImageUpload\"}static get requires(){return[xp,gp,vp]}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Cp extends Gd{refresh(){const t=this.editor.model,e=Qf(t.document.selection.getSelectedBlocks());this.value=!!e&&e.is(\"paragraph\"),this.isEnabled=!!e&&Tp(e,t.schema)}execute(t={}){const e=this.editor.model,n=e.document;e.change(i=>{const r=(t.selection||n.selection).getSelectedBlocks();for(const t of r)!t.is(\"paragraph\")&&Tp(t,e.schema)&&i.rename(t,\"paragraph\")})}}function Tp(t,e){return e.checkChild(t.parent,\"paragraph\")&&!e.isObject(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Sp extends qd{static get pluginName(){return\"Paragraph\"}init(){const t=this.editor,e=t.model,n=t.data;t.commands.add(\"paragraph\",new Cp(t)),e.schema.register(\"paragraph\",{inheritAllFrom:\"$block\"}),t.conversion.elementToElement({model:\"paragraph\",view:\"p\"}),n.upcastDispatcher.on(\"element\",(t,e,n)=>{if(n.consumable.test(e.viewItem,{name:e.viewItem.name}))if(Sp.paragraphLikeElements.has(e.viewItem.name)){if(e.viewItem.isEmpty)return;const t=n.writer.createElement(\"paragraph\"),i=n.splitToAllowedParent(t,e.modelCursor);if(!i)return;n.writer.insert(t,i.position);const{modelRange:r}=n.convertChildren(e.viewItem,po.createAt(t));e.modelRange=new go(po.createBefore(t),r.end),e.modelCursor=e.modelRange.end}else Ep(e.viewItem,e.modelCursor,n.schema)&&(e=Object.assign(e,Pp(e.viewItem,e.modelCursor,n)))},{priority:\"low\"}),n.upcastDispatcher.on(\"text\",(t,e,n)=>{e.modelRange||Ep(e.viewItem,e.modelCursor,n.schema)&&(e=Object.assign(e,Pp(e.viewItem,e.modelCursor,n)))},{priority:\"lowest\"}),e.document.registerPostFixer(t=>this._autoparagraphEmptyRoots(t)),t.on(\"dataReady\",()=>{e.enqueueChange(\"transparent\",t=>this._autoparagraphEmptyRoots(t))},{priority:\"lowest\"})}_autoparagraphEmptyRoots(t){const e=this.editor.model;for(const n of e.document.getRootNames()){const i=e.document.getRoot(n);if(i.isEmpty&&\"$graveyard\"!=i.rootName&&e.schema.checkChild(i,\"paragraph\"))return t.insertElement(\"paragraph\",i),!0}}}function Pp(t,e,n){const i=n.writer.createElement(\"paragraph\");return n.writer.insert(i,e),n.convertItem(t,po.createAt(i))}function Ep(t,e,n){const i=new Xo(e);return!!n.checkChild(i,\"paragraph\")&&!!n.checkChild(i.push(\"paragraph\"),t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */Sp.paragraphLikeElements=new Set([\"blockquote\",\"dd\",\"div\",\"dt\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"li\",\"p\",\"td\"]);class Op extends Gd{constructor(t,e){super(t),this.modelElements=e}refresh(){const t=Qf(this.editor.model.document.selection.getSelectedBlocks());this.value=!!t&&this.modelElements.includes(t.name)&&t.name,this.isEnabled=!!t&&this.modelElements.some(e=>Rp(t,e,this.editor.model.schema))}execute(t={}){const e=this.editor.model,n=e.document,i=t.value;this.modelElements.includes(i)&&e.change(t=>{const r=Array.from(n.selection.getSelectedBlocks()).filter(t=>Rp(t,i,e.schema));for(const e of r)e.is(i)||t.rename(e,i)})}}function Rp(t,e,n){return n.checkChild(t.parent,e)&&!n.isObject(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Mp=\"paragraph\";class Fp extends qd{constructor(t){super(t),t.config.define(\"heading\",{options:[{model:\"paragraph\",title:\"Paragraph\",class:\"ck-heading_paragraph\"},{model:\"heading1\",view:\"h2\",title:\"Heading 1\",class:\"ck-heading_heading1\"},{model:\"heading2\",view:\"h3\",title:\"Heading 2\",class:\"ck-heading_heading2\"},{model:\"heading3\",view:\"h4\",title:\"Heading 3\",class:\"ck-heading_heading3\"}]})}static get requires(){return[Sp]}init(){const t=this.editor,e=t.config.get(\"heading.options\"),n=[];for(const i of e)i.model!==Mp&&(t.model.schema.register(i.model,{inheritAllFrom:\"$block\"}),t.conversion.elementToElement(i),n.push(i.model));t.commands.add(\"heading\",new Op(t,n))}afterInit(){const t=this.editor,e=t.commands.get(\"enter\"),n=t.config.get(\"heading.options\");e&&this.listenTo(e,\"afterExecute\",(e,i)=>{const r=t.model.document.selection.getFirstPosition().parent;n.some(t=>r.is(t.model))&&!r.is(Mp)&&0===r.childCount&&i.writer.rename(r,Mp)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Vp{constructor(t,e){e&&bi(this,e),t&&this.set(t)}}R(Vp,xi);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Ip extends Sd{constructor(t){super(t);const e=this.bindTemplate;this.set(\"isVisible\",!1),this.children=this.createCollection(),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-reset\",\"ck-dropdown__panel\",e.if(\"isVisible\",\"ck-dropdown__panel-visible\")]},children:this.children,on:{selectstart:e.to(t=>t.preventDefault())}})}focus(){this.children.length&&this.children.first.focus()}focusLast(){if(this.children.length){const t=this.children.last;\"function\"==typeof t.focusLast?t.focusLast():t.focus()}}}n(39);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Np extends Sd{constructor(t,e,n){super(t);const i=this.bindTemplate;this.buttonView=e,this.panelView=n,this.set(\"isOpen\",!1),this.set(\"isEnabled\",!0),this.focusTracker=new rd,this.keystrokes=new Yu,this.setTemplate({tag:\"div\",attributes:{class:[\"ck-dropdown\",i.to(\"isEnabled\",t=>t?\"\":\"ck-disabled\")]},children:[e,n]}),e.extendTemplate({attributes:{class:[\"ck-dropdown__button\"]}})}render(){super.render(),this.listenTo(this.buttonView,\"open\",()=>{this.isOpen=!this.isOpen}),this.panelView.bind(\"isVisible\").to(this,\"isOpen\"),this.keystrokes.listenTo(this.element),this.focusTracker.add(this.element);const t=(t,e)=>{this.isOpen&&(this.buttonView.focus(),this.isOpen=!1,e())};this.keystrokes.set(\"arrowdown\",(t,e)=>{this.buttonView.isEnabled&&!this.isOpen&&(this.isOpen=!0,e())}),this.keystrokes.set(\"arrowright\",(t,e)=>{this.isOpen&&e()}),this.keystrokes.set(\"arrowleft\",t),this.keystrokes.set(\"esc\",t)}focus(){this.buttonView.focus()}}var Dp=n(17),Bp=n.n(Dp);\n/**\n * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Lp extends _f{constructor(t){super(t),this.arrowView=this._createArrowView(),this.delegate(\"execute\").to(this,\"open\")}render(){super.render(),this.children.add(this.arrowView)}_createArrowView(){const t=new bf;return t.content=Bp.a,t.extendTemplate({attributes:{class:\"ck-dropdown__arrow\"}}),t}}n(38);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class jp extends Sd{constructor(){super(),this.items=this.createCollection(),this.focusTracker=new rd,this.keystrokes=new Yu,this._focusCycler=new Nd({focusables:this.items,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:\"arrowup\",focusNext:\"arrowdown\"}}),this.setTemplate({tag:\"ul\",attributes:{class:[\"ck-reset\",\"ck-list\"]},children:this.items})}render(){super.render();for(const t of this.items)this.focusTracker.add(t.element);this.items.on(\"add\",(t,e)=>{this.focusTracker.add(e.element)}),this.items.on(\"remove\",(t,e)=>{this.focusTracker.remove(e.element)}),this.keystrokes.listenTo(this.element)}focus(){this._focusCycler.focusFirst()}focusLast(){this._focusCycler.focusLast()}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Up extends Sd{constructor(){super(),this.set(\"tabindex\",-1),this.keystrokes=new Yu;const t=this.bindTemplate;this.setTemplate({tag:\"li\",attributes:{class:[\"ck-list__item\",t.to(\"class\"),t.if(\"isActive\",\"ck-list__item_active\")],style:t.to(\"style\"),tabindex:t.to(\"tabindex\")},children:[{text:t.to(\"label\")}],on:{click:t.to(\"execute\")}})}render(){super.render();const t=(t,e)=>{this.fire(\"execute\"),e()};this.keystrokes.listenTo(this.element),this.keystrokes.set(\"Enter\",t),this.keystrokes.set(\"Space\",t)}focus(){this.element.focus()}}n(37),n(36);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction zp(t,e=Lp){const n=new e(t),i=new Ip(t),r=new Np(t,n,i);return n.bind(\"isEnabled\").to(r),n instanceof Lp?n.bind(\"isOn\").to(r,\"isOpen\"):n.arrowView.bind(\"isOn\").to(r,\"isOpen\"),function(t){(function(t){t.on(\"render\",()=>{Bm({emitter:t,activator:()=>t.isOpen,callback:()=>{t.isOpen=!1},contextElements:[t.element]})})})(t),function(t){t.on(\"execute\",()=>{t.isOpen=!1})}(t),function(t){t.keystrokes.set(\"arrowdown\",(e,n)=>{t.isOpen&&(t.panelView.focus(),n())}),t.keystrokes.set(\"arrowup\",(e,n)=>{t.isOpen&&(t.panelView.focusLast(),n())})}(t)}(r),r}function qp(t,e){const n=t.locale,i=t.listView=new jp(n);i.items.bindTo(e).using(t=>{const e=new Up(n);return e.bind(...Object.keys(t)).to(t),e}),t.panelView.children.add(i),i.items.delegate(\"execute\").to(t)}n(8);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Wp extends qd{init(){const t=this.editor,e=t.t,n=this._getLocalizedOptions(),i=e(\"Choose heading\"),r=e(\"Heading\");t.ui.componentFactory.add(\"heading\",e=>{const s={},o=new ji,a=t.commands.get(\"heading\"),l=t.commands.get(\"paragraph\"),c=[a];for(const t of n){const e=new Vp({label:t.title,class:t.class});\"paragraph\"===t.model?(e.bind(\"isActive\").to(l,\"value\"),e.set(\"commandName\",\"paragraph\"),c.push(l)):(e.bind(\"isActive\").to(a,\"value\",e=>e===t.model),e.set({commandName:\"heading\",commandValue:t.model})),o.add(e),s[t.model]=t.title}const h=zp(e);return qp(h,o),h.buttonView.set({isOn:!1,withText:!0,tooltip:r}),h.extendTemplate({attributes:{class:[\"ck-heading-dropdown\"]}}),h.bind(\"isEnabled\").toMany(c,\"isEnabled\",(...t)=>t.some(t=>t)),h.buttonView.bind(\"label\").to(a,\"value\",l,\"value\",(t,e)=>{const n=t||e&&\"paragraph\";return s[n]?s[n]:i}),this.listenTo(h,\"execute\",e=>{t.execute(e.source.commandName,e.source.commandValue?{value:e.source.commandValue}:void 0),t.editing.view.focus()}),h})}_getLocalizedOptions(){const t=this.editor,e=t.t,n={Paragraph:e(\"Paragraph\"),\"Heading 1\":e(\"Heading 1\"),\"Heading 2\":e(\"Heading 2\"),\"Heading 3\":e(\"Heading 3\")};return t.config.get(\"heading.options\").map(t=>{const e=n[t.title];return e&&e!=t.title&&(t=Object.assign({},t,{title:e})),t})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */n(35);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Hp=new WeakMap;function $p(t,e,n,i){const r=t.document;Hp.has(r)||(Hp.set(r,new Map),r.registerPostFixer(t=>(function(t,e){const n=Hp.get(t);let i=!1;for(const[t,r]of n)Kp(e,t,r)&&(i=!0);return i})(r,t))),Hp.get(r).set(e,{placeholderText:n,checkFunction:i}),t.render()}function Kp(t,e,n){const i=e.document,r=n.placeholderText;let s=!1;if(!i)return!1;e.getAttribute(\"data-placeholder\")!==r&&(t.setAttribute(\"data-placeholder\",r,e),s=!0);const o=i.selection.anchor,a=n.checkFunction;if(a&&!a())return e.hasClass(\"ck-placeholder\")&&(t.removeClass(\"ck-placeholder\",e),s=!0),s;const l=!Array.from(e.getChildren()).some(t=>!t.is(\"uiElement\"));return!i.isFocused&&l?(e.hasClass(\"ck-placeholder\")||(t.addClass(\"ck-placeholder\",e),s=!0),s):(l&&o&&o.parent!==e?e.hasClass(\"ck-placeholder\")||(t.addClass(\"ck-placeholder\",e),s=!0):e.hasClass(\"ck-placeholder\")&&(t.removeClass(\"ck-placeholder\",e),s=!0),s)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const Gp=Symbol(\"imageCaption\");function Yp(t){for(const e of t.getChildren())if(e instanceof ho&&\"caption\"==e.name)return e;return null}function Jp(t){const e=t.parent;return\"figcaption\"==t.name&&e&&\"figure\"==e.name&&e.hasClass(\"image\")?{name:!0}:null}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Qp extends qd{init(){const t=this.editor,e=t.editing.view,n=t.model.schema,i=t.data,r=t.editing,s=t.t;n.register(\"caption\",{allowIn:\"image\",allowContentOf:\"$block\",isLimit:!0}),t.model.document.registerPostFixer(t=>this._insertMissingModelCaptionElement(t)),t.conversion.for(\"upcast\").add(ha({view:Jp,model:\"caption\"}));i.downcastDispatcher.on(\"insert:caption\",Xp(t=>t.createContainerElement(\"figcaption\"),!1));const o=function(t,e){return n=>{const i=n.createEditableElement(\"figcaption\");return n.setCustomProperty(Gp,!0,i),$p(t,i,e),i=i,(n=n).addClass(\"ck-editable\",i),n.setAttribute(\"contenteditable\",i.isReadOnly?\"false\":\"true\",i),i.on(\"change:isReadOnly\",(t,e,r)=>{n.setAttribute(\"contenteditable\",r?\"false\":\"true\",i)}),i.on(\"change:isFocused\",(t,e,r)=>{r?n.addClass(\"ck-editable_focused\",i):n.removeClass(\"ck-editable_focused\",i)}),i};var n,i}(e,s(\"Enter image caption\"));r.downcastDispatcher.on(\"insert:caption\",Xp(o)),r.downcastDispatcher.on(\"insert\",this._fixCaptionVisibility(t=>t.item),{priority:\"high\"}),r.downcastDispatcher.on(\"remove\",this._fixCaptionVisibility(t=>t.position.parent),{priority:\"high\"}),e.document.registerPostFixer(t=>this._updateCaptionVisibility(t))}_updateCaptionVisibility(t){const e=this.editor.editing.mapper,n=this._lastSelectedCaption;let i;const r=this.editor.model.document.selection,s=r.getSelectedElement();if(s&&s.is(\"image\")){const t=Yp(s);i=e.toViewElement(t)}const o=Zp(r.getFirstPosition().parent);if(o&&(i=e.toViewElement(o)),i)return n?n===i?eg(i,t):(tg(n,t),this._lastSelectedCaption=i,eg(i,t)):(this._lastSelectedCaption=i,eg(i,t));if(n){const e=tg(n,t);return this._lastSelectedCaption=null,e}return!1}_fixCaptionVisibility(t){return(e,n,i)=>{const r=Zp(t(n)),s=this.editor.editing.mapper,o=i.writer;if(r){const t=s.toViewElement(r);t&&(r.childCount?o.removeClass(\"ck-hidden\",t):o.addClass(\"ck-hidden\",t))}}}_insertMissingModelCaptionElement(t){const e=this.editor.model.document.differ.getChanges();for(const n of e)if(\"insert\"==n.type&&\"image\"==n.name){const e=n.position.nodeAfter;if(!Yp(e))return t.appendElement(\"caption\",e),!0}}}function Xp(t,e=!0){return(n,i,r)=>{const s=i.item;if((s.childCount||e)&&Om(s.parent)){if(!r.consumable.consume(i.item,\"insert\"))return;const e=r.mapper.toViewElement(i.range.start.parent),n=t(r.writer),o=r.writer;s.childCount||o.addClass(\"ck-hidden\",n),function(t,e,n,i){const r=Ii.createAt(n,\"end\");i.writer.insert(r,t),i.mapper.bindElements(e,t)}(n,i.item,e,r)}}}function Zp(t){const e=t.getAncestors({includeSelf:!0}).find(t=>\"caption\"==t.name);return e&&e.parent&&\"image\"==e.parent.name?e:null}function tg(t,e){return!t.childCount&&!t.hasClass(\"ck-hidden\")&&(e.addClass(\"ck-hidden\",t),!0)}function eg(t,e){return!!t.hasClass(\"ck-hidden\")&&(e.removeClass(\"ck-hidden\",t),!0)}n(34);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass ng extends Gd{constructor(t,e){super(t),this._defaultStyle=!1,this.styles=e.reduce((t,e)=>(t[e.name]=e,e.isDefault&&(this._defaultStyle=e.name),t),{})}refresh(){const t=this.editor.model.document.selection.getSelectedElement();if(this.isEnabled=Om(t),t)if(t.hasAttribute(\"imageStyle\")){const e=t.getAttribute(\"imageStyle\");this.value=!!this.styles[e]&&e}else this.value=this._defaultStyle;else this.value=!1}execute(t={}){const e=t.value;if(!this.styles[e])return;const n=this.editor.model,i=n.document.selection.getSelectedElement();n.change(t=>{this.styles[e].isDefault?t.removeAttribute(\"imageStyle\",i):t.setAttribute(\"imageStyle\",e,i)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function ig(t,e){for(const n of e)if(n.name===t)return n}var rg=n(7),sg=n.n(rg),og=n(6),ag=n.n(og),lg=n(5),cg=n.n(lg),hg=n(4),ug=n.n(hg);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst dg={full:{name:\"full\",title:\"Full size image\",icon:sg.a,isDefault:!0},side:{name:\"side\",title:\"Side image\",icon:ug.a,className:\"image-style-side\"},alignLeft:{name:\"alignLeft\",title:\"Left aligned image\",icon:ag.a,className:\"image-style-align-left\"},alignCenter:{name:\"alignCenter\",title:\"Centered image\",icon:cg.a,className:\"image-style-align-center\"},alignRight:{name:\"alignRight\",title:\"Right aligned image\",icon:ug.a,className:\"image-style-align-right\"}},fg={full:sg.a,left:ag.a,right:ug.a,center:cg.a};function mg(t=[]){return t.map(pg).map(t=>Object.assign({},t))}function pg(t){if(\"string\"==typeof t){const e=t;dg[e]?t=Object.assign({},dg[e]):(Ds.warn(\"image-style-not-found: There is no such image style of given name.\",{name:e}),t={name:e})}else if(dg[t.name]){const e=dg[t.name],n=Object.assign({},t);for(const i in e)t.hasOwnProperty(i)||(n[i]=e[i]);t=n}return\"string\"==typeof t.icon&&fg[t.icon]&&(t.icon=fg[t.icon]),t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class gg extends qd{static get requires(){return[Rm]}static get pluginName(){return\"ImageStyleEditing\"}init(){const t=this.editor,e=t.model.schema,n=t.data,i=t.editing;t.config.define(\"image.styles\",[\"full\",\"side\"]);const r=mg(t.config.get(\"image.styles\"));e.extend(\"image\",{allowAttributes:\"imageStyle\"});const s=function(t){return(e,n,i)=>{if(!i.consumable.consume(n.item,e.name))return;const r=ig(n.attributeNewValue,t),s=ig(n.attributeOldValue,t),o=i.mapper.toViewElement(n.item),a=i.writer;s&&a.removeClass(s.className,o),r&&a.addClass(r.className,o)}}(r);i.downcastDispatcher.on(\"attribute:imageStyle:image\",s),n.downcastDispatcher.on(\"attribute:imageStyle:image\",s),n.upcastDispatcher.on(\"element:figure\",function(t){const e=t.filter(t=>!t.isDefault);return(t,n,i)=>{if(!n.modelRange)return;const r=n.viewItem,s=Qf(n.modelRange.getItems());if(i.schema.checkAttribute(s,\"imageStyle\"))for(const t of e)i.consumable.consume(r,{class:t.className})&&i.writer.setAttribute(\"imageStyle\",t.name,s)}}(r),{priority:\"low\"}),t.commands.add(\"imageStyle\",new ng(t,r))}}n(33);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class wg extends qd{get localizedDefaultStylesTitles(){const t=this.editor.t;return{\"Full size image\":t(\"Full size image\"),\"Side image\":t(\"Side image\"),\"Left aligned image\":t(\"Left aligned image\"),\"Centered image\":t(\"Centered image\"),\"Right aligned image\":t(\"Right aligned image\")}}init(){const t=function(t,e){for(const n of t)e[n.title]&&(n.title=e[n.title]);return t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(mg(this.editor.config.get(\"image.styles\")),this.localizedDefaultStylesTitles);for(const e of t)this._createButton(e)}_createButton(t){const e=this.editor,n=`imageStyle:${t.name}`;e.ui.componentFactory.add(n,n=>{const i=e.commands.get(\"imageStyle\"),r=new _f(n);return r.set({label:t.title,icon:t.icon,tooltip:!0}),r.bind(\"isEnabled\").to(i,\"isEnabled\"),r.bind(\"isOn\").to(i,\"value\",e=>e===t.name),this.listenTo(r,\"execute\",()=>e.execute(\"imageStyle\",{value:t.name})),r})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst bg=\"ck-toolbar-container\";\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction vg(t,e){return new go(_g(t,e,!0),_g(t,e,!1))}function _g(t,e,n){let i=t.textNode||(n?t.nodeBefore:t.nodeAfter),r=null;for(;i&&i.getAttribute(\"linkHref\")==e;)r=i,i=n?i.previousSibling:i.nextSibling;return r?po.createAt(r,n?\"before\":\"after\"):t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class yg extends Gd{refresh(){const t=this.editor.model,e=t.document;this.value=e.selection.getAttribute(\"linkHref\"),this.isEnabled=t.schema.checkAttributeInSelection(e.selection,\"linkHref\")}execute(t){const e=this.editor.model,n=e.document.selection;e.change(i=>{if(n.isCollapsed){const e=n.getFirstPosition();if(n.hasAttribute(\"linkHref\")){const e=vg(n.getFirstPosition(),n.getAttribute(\"linkHref\"));i.setAttribute(\"linkHref\",t,e),i.setSelection(e)}else if(\"\"!==t){const r=so(n.getAttributes());r.set(\"linkHref\",t);const s=i.createText(t,r);i.insert(s,e),i.setSelection(go.createOn(s))}}else{const r=e.schema.getValidRanges(n.getRanges(),\"linkHref\");for(const e of r)i.setAttribute(\"linkHref\",t,e)}})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class kg extends Gd{refresh(){this.isEnabled=this.editor.model.document.selection.hasAttribute(\"linkHref\")}execute(){const t=this.editor.model,e=t.document.selection;t.change(t=>{const n=e.isCollapsed?[vg(e.getFirstPosition(),e.getAttribute(\"linkHref\"))]:e.getRanges();for(const e of n)t.removeAttribute(\"linkHref\",e)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const xg=Symbol(\"linkElement\");function Ag(t,e){const n=e.createAttributeElement(\"a\",{href:t},5);return e.setCustomProperty(xg,!0,n),n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Cg(t,e,n){const i=!!t&&t.hasAttribute(n),r=!!e&&e.hasAttribute(n);return!(!i||!r||t.getAttributeKeys(n)===e.getAttribute(n))||(i&&!r||!i&&r)}n(32);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Tg extends qd{init(){const t=this.editor;t.model.schema.extend(\"$text\",{allowAttributes:\"linkHref\"}),t.conversion.for(\"downcast\").add(Mo({model:\"linkHref\",view:Ag})),t.conversion.for(\"upcast\").add(ua({view:{name:\"a\",attribute:{href:!0}},model:{key:\"linkHref\",value:t=>t.getAttribute(\"href\")}})),t.commands.add(\"link\",new yg(t)),t.commands.add(\"unlink\",new kg(t)),function(t,e,n,i){const r=e.document.selection;n.listenTo(t.document,\"keydown\",(t,s)=>{const o=s.keyCode==Qi.arrowright,a=s.keyCode==Qi.arrowleft;if(!o&&!a)return;if(!r.isCollapsed)return;if(s.shiftKey||s.altKey||s.ctrlKey)return;const l=r.getFirstPosition();if(o){if(r.isGravityOverridden)return;Cg(l.nodeAfter,l.nodeBefore,i)&&(s.preventDefault(),e.change(t=>t.overrideSelectionGravity()))}else{if(r.isGravityOverridden&&Cg(l.nodeBefore,l.nodeAfter,i))return s.preventDefault(),void e.change(t=>t.restoreSelectionGravity());const t=l.getShiftedBy(-1);if(!t.isBefore(l))return;Cg(t.nodeBefore,t.nodeAfter,i)&&e.change(t=>{let e=0;t.overrideSelectionGravity(!0),n.listenTo(r,\"change:range\",(n,i)=>{e++&&i.directChange&&(t.restoreSelectionGravity(),n.off())})})}})}(t.editing.view,t.model,this,\"linkHref\"),this._setupLinkHighlight()}_setupLinkHighlight(){const t=this.editor,e=this.editor.model,n=e.document,i={id:\"linkBoundaries\",class:\"ck-link_selected\",priority:1};t.conversion.for(\"editingDowncast\").add(Vo({model:\"linkBoundaries\",view:i})),n.registerPostFixer(t=>{const i=n.selection,r=e.markers.get(\"linkBoundaries\");if(i.hasAttribute(\"linkHref\")){const e=vg(i.getFirstPosition(),i.getAttribute(\"linkHref\"));if(!r||!r.getRange().isEqual(e))return t.setMarker(\"linkBoundaries\",e),!0}else if(r)return t.removeMarker(\"linkBoundaries\"),!0;return!1}),t.editing.downcastDispatcher.on(\"attribute:linkHref\",(t,e,n)=>{const r=e.item;if(!(r instanceof So||r instanceof ko)||!r.isCollapsed)return;const s=n.writer.document.selection,o=Lo(i);n.writer.wrap(s.getFirstRange(),o)})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Sg extends Es{constructor(t){super(t),this.domEventType=\"click\"}onDomEvent(t){this.fire(t.type,t)}}n(31);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Pg extends Sd{constructor(t){super(t);const e=t.t;this.focusTracker=new rd,this.keystrokes=new Yu,this.urlInputView=this._createUrlInput(),this.saveButtonView=this._createButton(e(\"Save\"),qm.a),this.saveButtonView.type=\"submit\",this.cancelButtonView=this._createButton(e(\"Cancel\"),Hm.a,\"cancel\"),this._focusables=new od,this._focusCycler=new Nd({focusables:this._focusables,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:\"shift + tab\",focusNext:\"tab\"}}),this.saveButtonView.extendTemplate({attributes:{class:[\"ck-button-action\"]}}),this.setTemplate({tag:\"form\",attributes:{class:[\"ck-link-form\"],tabindex:\"-1\"},children:[this.urlInputView,this.saveButtonView,this.cancelButtonView]})}render(){super.render(),Um({view:this}),[this.urlInputView,this.saveButtonView,this.cancelButtonView].forEach(t=>{this._focusables.add(t),this.focusTracker.add(t.element)}),this.keystrokes.listenTo(this.element)}focus(){this._focusCycler.focusFirst()}_createUrlInput(){const t=this.locale.t,e=new Lm(this.locale,jm);return e.label=t(\"Link URL\"),e.inputView.placeholder=\"https://example.com\",e}_createButton(t,e,n){const i=new _f(this.locale);return i.set({label:t,icon:e,tooltip:!0}),n&&i.delegate(\"execute\").to(this,n),i}}var Eg=n(16),Og=n.n(Eg),Rg=n(15),Mg=n.n(Rg);n(30);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Fg extends Sd{constructor(t){super(t);const e=t.t;this.focusTracker=new rd,this.keystrokes=new Yu,this.previewButtonView=this._createPreviewButton(),this.unlinkButtonView=this._createButton(e(\"Unlink\"),Og.a,\"unlink\"),this.editButtonView=this._createButton(e(\"Edit link\"),Mg.a,\"edit\"),this.set(\"href\"),this._focusables=new od,this._focusCycler=new Nd({focusables:this._focusables,focusTracker:this.focusTracker,keystrokeHandler:this.keystrokes,actions:{focusPrevious:\"shift + tab\",focusNext:\"tab\"}}),this.setTemplate({tag:\"div\",attributes:{class:[\"ck-link-actions\"],tabindex:\"-1\"},children:[this.previewButtonView,this.editButtonView,this.unlinkButtonView]})}render(){super.render(),[this.previewButtonView,this.editButtonView,this.unlinkButtonView].forEach(t=>{this._focusables.add(t),this.focusTracker.add(t.element)}),this.keystrokes.listenTo(this.element)}focus(){this._focusCycler.focusFirst()}_createButton(t,e,n){const i=new _f(this.locale);return i.set({label:t,icon:e,tooltip:!0}),i.delegate(\"execute\").to(this,n),i}_createPreviewButton(){const t=new _f(this.locale),e=this.bindTemplate,n=this.t;return t.set({withText:!0,tooltip:n(\"Open link in new tab\")}),t.extendTemplate({attributes:{class:[\"ck-link-actions__preview\"],href:e.to(\"href\"),target:\"_blank\"}}),t.bind(\"label\").to(this,\"href\",t=>t||n(\"This link has no URL\")),t.bind(\"isEnabled\").to(this,\"href\",t=>!!t),t.template.tag=\"a\",t.template.eventListeners={},t}}var Vg=n(14),Ig=n.n(Vg);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst Ng=\"Ctrl+K\";class Dg extends qd{static get requires(){return[np]}init(){const t=this.editor;t.editing.view.addObserver(Sg),this.actionsView=this._createActionsView(),this.formView=this._createFormView(),this._balloon=t.plugins.get(np),this._createToolbarLinkButton(),this._enableUserBalloonInteractions()}_createActionsView(){const t=this.editor,e=new Fg(t.locale),n=t.commands.get(\"link\"),i=t.commands.get(\"unlink\");return e.bind(\"href\").to(n,\"value\"),e.editButtonView.bind(\"isEnabled\").to(n),e.unlinkButtonView.bind(\"isEnabled\").to(i),this.listenTo(e,\"edit\",()=>{this._addFormView()}),this.listenTo(e,\"unlink\",()=>{t.execute(\"unlink\"),this._hideUI()}),e.keystrokes.set(\"Esc\",(t,e)=>{this._hideUI(),e()}),e}_createFormView(){const t=this.editor,e=new Pg(t.locale),n=t.commands.get(\"link\");return e.urlInputView.bind(\"value\").to(n,\"value\"),e.urlInputView.bind(\"isReadOnly\").to(n,\"isEnabled\",t=>!t),e.saveButtonView.bind(\"isEnabled\").to(n),this.listenTo(e,\"submit\",()=>{t.execute(\"link\",e.urlInputView.inputView.element.value),this._removeFormView()}),this.listenTo(e,\"cancel\",()=>{this._removeFormView()}),e.keystrokes.set(\"Esc\",(t,e)=>{this._removeFormView(),e()}),e}_createToolbarLinkButton(){const t=this.editor,e=t.commands.get(\"link\"),n=t.t;t.keystrokes.set(Ng,(t,n)=>{n(),e.isEnabled&&this._showUI()}),t.ui.componentFactory.add(\"link\",t=>{const i=new _f(t);return i.isEnabled=!0,i.label=n(\"Link\"),i.icon=Ig.a,i.keystroke=Ng,i.tooltip=!0,i.bind(\"isEnabled\").to(e,\"isEnabled\"),this.listenTo(i,\"execute\",()=>this._showUI()),i})}_enableUserBalloonInteractions(){const t=this.editor.editing.view.document;this.listenTo(t,\"click\",()=>{this._getSelectedLinkElement()&&this._showUI()}),this.editor.keystrokes.set(\"Tab\",(t,e)=>{this._areActionsVisible&&!this.actionsView.focusTracker.isFocused&&(this.actionsView.focus(),e())},{priority:\"high\"}),this.editor.keystrokes.set(\"Esc\",(t,e)=>{this._isUIVisible&&(this._hideUI(),e())}),Bm({emitter:this.formView,activator:()=>this._isUIVisible,contextElements:[this._balloon.view.element],callback:()=>this._hideUI()})}_addActionsView(){this._balloon.add({view:this.actionsView,position:this._getBalloonPositionData()})}_addFormView(){const t=this.editor.commands.get(\"link\");this._balloon.add({view:this.formView,position:this._getBalloonPositionData()}),this.formView.urlInputView.select(),this.formView.urlInputView.inputView.element.value=t.value||\"\"}_removeFormView(){this._isFormInPanel&&(this._balloon.remove(this.formView),this.editor.editing.view.focus())}_showUI(){this.editor.commands.get(\"link\").isEnabled&&!this._isUIInPanel&&(this._getSelectedLinkElement()?this._addActionsView():(this._addActionsView(),this._addFormView()),this._startUpdatingUIOnViewRender())}_hideUI(){if(!this._isUIInPanel)return;const t=this.editor.editing.view;this.stopListening(t,\"render\"),this._removeFormView(),this._balloon.remove(this.actionsView),t.focus()}_startUpdatingUIOnViewRender(){const t=this.editor.editing.view;let e=this._getSelectedLinkElement(),n=i();function i(){return t.document.selection.focus.getAncestors().reverse().find(t=>t.is(\"element\"))}this.listenTo(t,\"render\",()=>{const t=this._getSelectedLinkElement(),r=i();e&&!t||!e&&r!==n?this._hideUI():this._balloon.updatePosition(this._getBalloonPositionData()),e=t,n=r})}get _isFormInPanel(){return this._balloon.hasView(this.formView)}get _areActionsInPanel(){return this._balloon.hasView(this.actionsView)}get _areActionsVisible(){return this._balloon.visibleView===this.actionsView}get _isUIInPanel(){return this._isFormInPanel||this._areActionsInPanel}get _isUIVisible(){return this._balloon.visibleView==this.formView||this._areActionsVisible}_getBalloonPositionData(){const t=this.editor.editing.view,e=t.document,n=this._getSelectedLinkElement();return{target:n?t.domConverter.mapViewToDom(n):t.domConverter.viewRangeToDom(e.selection.getFirstRange())}}_getSelectedLinkElement(){const t=this.editor.editing.view.document.selection;if(t.isCollapsed)return Bg(t.getFirstPosition());{const e=t.getFirstRange().getTrimmed(),n=Bg(e.start),i=Bg(e.end);return n&&n==i&&Ni.createIn(n).getTrimmed().isEqual(e)?n:null}}}function Bg(t){return t.getAncestors().find(t=>(e=t,e.is(\"attributeElement\")&&!!e.getCustomProperty(xg)));var e}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Lg extends Gd{constructor(t,e){super(t),this.type=\"bulleted\"==e?\"bulleted\":\"numbered\"}refresh(){this.value=this._getValue(),this.isEnabled=this._checkEnabled()}execute(){const t=this.editor.model,e=t.document,n=Array.from(e.selection.getSelectedBlocks()).filter(e=>Ug(e,t.schema)),i=!0===this.value;t.change(t=>{if(i){let e=n[n.length-1].nextSibling,i=Number.POSITIVE_INFINITY,r=[];for(;e&&\"listItem\"==e.name&&0!==e.getAttribute(\"indent\");){const t=e.getAttribute(\"indent\");t<i&&(i=t);const n=t-i;r.push({element:e,indent:n}),e=e.nextSibling}r=r.reverse();for(const e of r)t.setAttribute(\"indent\",e.indent,e.element)}if(!i){let t=Number.POSITIVE_INFINITY;for(const e of n)e.is(\"listItem\")&&e.getAttribute(\"indent\")<t&&(t=e.getAttribute(\"indent\"));jg(n,!0,t=0===t?1:t),jg(n,!1,t)}for(const e of n.reverse())i&&\"listItem\"==e.name?t.rename(e,\"paragraph\"):i||\"listItem\"==e.name?i||\"listItem\"!=e.name||e.getAttribute(\"type\")==this.type||t.setAttribute(\"type\",this.type,e):(t.setAttributes({type:this.type,indent:0},e),t.rename(e,\"listItem\"))})}_getValue(){const t=Qf(this.editor.model.document.selection.getSelectedBlocks());return!!t&&t.is(\"listItem\")&&t.getAttribute(\"type\")==this.type}_checkEnabled(){if(this.value)return!0;const t=this.editor.model.document.selection,e=this.editor.model.schema,n=Qf(t.getSelectedBlocks());return!!n&&Ug(n,e)}}function jg(t,e,n){const i=e?t[0]:t[t.length-1];if(i.is(\"listItem\")){let r=i[e?\"previousSibling\":\"nextSibling\"],s=i.getAttribute(\"indent\");for(;r&&r.is(\"listItem\")&&r.getAttribute(\"indent\")>=n;)s>r.getAttribute(\"indent\")&&(s=r.getAttribute(\"indent\")),r.getAttribute(\"indent\")==s&&t[e?\"unshift\":\"push\"](r),r=r[e?\"previousSibling\":\"nextSibling\"]}}function Ug(t,e){return e.checkChild(t.parent,\"listItem\")&&!e.isObject(t)}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class zg extends Gd{constructor(t,e){super(t),this._indentBy=\"forward\"==e?1:-1}refresh(){this.isEnabled=this._checkEnabled()}execute(){const t=this.editor.model,e=t.document;let n=Array.from(e.selection.getSelectedBlocks());t.change(t=>{const e=n[n.length-1];let i=e.nextSibling;for(;i&&\"listItem\"==i.name&&i.getAttribute(\"indent\")>e.getAttribute(\"indent\");)n.push(i),i=i.nextSibling;this._indentBy<0&&(n=n.reverse());for(const e of n){const n=e.getAttribute(\"indent\")+this._indentBy;n<0?t.rename(e,\"paragraph\"):t.setAttribute(\"indent\",n,e)}})}_checkEnabled(){const t=Qf(this.editor.model.document.selection.getSelectedBlocks());if(!t||!t.is(\"listItem\"))return!1;if(this._indentBy>0){const e=t.getAttribute(\"indent\"),n=t.getAttribute(\"type\");let i=t.previousSibling;for(;i&&i.is(\"listItem\")&&i.getAttribute(\"indent\")>=e;){if(i.getAttribute(\"indent\")==e)return i.getAttribute(\"type\")==n;i=i.previousSibling}return!1}return!0}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function qg(){const t=!this.isEmpty&&(\"ul\"==this.getChild(0).name||\"ol\"==this.getChild(0).name);return this.isEmpty||t?0:null}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Wg(t,e,n){const i=n.consumable;if(!i.test(e.item,\"insert\")||!i.test(e.item,\"attribute:type\")||!i.test(e.item,\"attribute:indent\"))return;i.consume(e.item,\"insert\"),i.consume(e.item,\"attribute:type\"),i.consume(e.item,\"attribute:indent\");const r=e.item;rw(r,function(t,e){const n=e.mapper,i=e.writer,r=\"numbered\"==t.getAttribute(\"type\")?\"ol\":\"ul\",s=function(t){const e=t.createContainerElement(\"li\");return e.getFillerOffset=qg,e}(i),o=i.createContainerElement(r,null);return i.insert(Ii.createAt(o),s),n.bindElements(t,s),s}(r,n),n)}function Hg(t,e,n){const i=n.mapper.toViewPosition(e.position).getLastMatchingPosition(t=>!t.item.is(\"li\")).nodeAfter,r=n.writer;r.breakContainer(Ii.createBefore(i)),r.breakContainer(Ii.createAfter(i));const s=i.parent,o=s.previousSibling,a=Ni.createOn(s),l=r.remove(a);o&&o.nextSibling&&iw(r,o,o.nextSibling),sw(n.mapper.toModelElement(i).getAttribute(\"indent\")+1,e.position,a.start,i,n);for(const t of Ni.createIn(l).getItems())n.mapper.unbindViewElement(t);t.stop()}function $g(t,e,n){if(!n.consumable.consume(e.item,\"attribute:type\"))return;const i=n.mapper.toViewElement(e.item),r=n.writer;r.breakContainer(Ii.createBefore(i)),r.breakContainer(Ii.createAfter(i));let s=i.parent;const o=\"numbered\"==e.attributeNewValue?\"ol\":\"ul\";iw(r,s=r.rename(s,o),s.nextSibling),iw(r,s.previousSibling,s);for(const t of e.item.getChildren())n.consumable.consume(t,\"insert\")}function Kg(t,e,n){if(!n.consumable.consume(e.item,\"attribute:indent\"))return;const i=n.mapper.toViewElement(e.item),r=n.writer;r.breakContainer(Ii.createBefore(i)),r.breakContainer(Ii.createAfter(i));const s=i.parent,o=s.previousSibling,a=Ni.createOn(s);r.remove(a),o&&o.nextSibling&&iw(r,o,o.nextSibling),sw(e.attributeOldValue+1,e.range.start,a.start,i,n),rw(e.item,i,n);for(const t of e.item.getChildren())n.consumable.consume(t,\"insert\")}function Gg(t,e,n){if(\"listItem\"!=e.item.name){let t=n.mapper.toViewPosition(e.range.start);const i=n.writer,r=[];for(;(\"ul\"==t.parent.name||\"ol\"==t.parent.name)&&\"li\"==(t=i.breakContainer(t)).parent.name;){const e=t,n=Ii.createAt(t.parent,\"end\");if(!e.isEqual(n)){const t=i.remove(new Ni(e,n));r.push(t)}t=Ii.createAfter(t.parent)}if(r.length>0){for(let e=0;e<r.length;e++){const n=t.nodeBefore;if(t=i.insert(t,r[e]).end,e>0){const e=iw(i,n,n.nextSibling);e&&e.parent==n&&t.offset--}}iw(i,t.nodeBefore,t.nodeAfter)}}}function Yg(t,e,n){const i=n.mapper.toViewPosition(e.position),r=i.nodeBefore,s=i.nodeAfter;iw(n.writer,r,s)}function Jg(t,e,n){if(n.consumable.consume(e.viewItem,{name:!0})){const t=n.writer,i=this.conversionApi.store,r=t.createElement(\"listItem\");i.indent=i.indent||0,t.setAttribute(\"indent\",i.indent,r);const s=e.viewItem.parent&&\"ol\"==e.viewItem.parent.name?\"numbered\":\"bulleted\";t.setAttribute(\"type\",s,r),i.indent++;const o=n.splitToAllowedParent(r,e.modelCursor);if(!o)return;t.insert(r,o.position);let a=po.createAfter(r);for(const t of e.viewItem.getChildren())\"ul\"==t.name||\"ol\"==t.name?a=n.convertItem(t,a).modelCursor:n.convertItem(t,po.createAt(r,\"end\"));i.indent--,e.modelRange=new go(e.modelCursor,a),o.cursorParent?e.modelCursor=po.createAt(o.cursorParent):e.modelCursor=e.modelRange.end}}function Qg(t,e,n){if(n.consumable.test(e.viewItem,{name:!0})){const t=Array.from(e.viewItem.getChildren());for(const e of t)e.is(\"li\")||e._remove()}}function Xg(t,e,n){if(n.consumable.test(e.viewItem,{name:!0})){if(0===e.viewItem.childCount)return;const t=[...e.viewItem.getChildren()];let i=!1,r=!0;for(const e of t)!i||e.is(\"ul\")||e.is(\"ol\")||e._remove(),e.is(\"text\")?(r&&n.writer.setTextData(e.data.replace(/^\\s+/,\"\"),e),(!e.nextSibling||e.nextSibling.is(\"ul\")||e.nextSibling.is(\"ol\"))&&n.writer.setTextData(e.data.replace(/\\s+$/,\"\"),e)):(e.is(\"ul\")||e.is(\"ol\"))&&(i=!0),r=!1}}function Zg(t,e){if(e.isPhantom)return;const n=e.modelPosition.nodeBefore;if(n&&n.is(\"listItem\")){const t=e.mapper.toViewElement(n),i=t.getAncestors().find(t=>t.is(\"ul\")||t.is(\"ol\")),r=new Fi({startPosition:Ii.createAt(t,0)});for(const t of r){if(\"elementStart\"==t.type&&t.item.is(\"li\")){e.viewPosition=t.previousPosition;break}if(\"elementEnd\"==t.type&&t.item==i){e.viewPosition=t.nextPosition;break}}}}function tw(t,e){const n=e.viewPosition,i=n.parent,r=e.mapper;if(\"ul\"==i.name||\"ol\"==i.name){if(n.isAtEnd){const t=r.toModelElement(n.nodeBefore),i=r.getModelLength(n.nodeBefore);e.modelPosition=po.createBefore(t).getShiftedBy(i)}else{const t=r.toModelElement(n.nodeAfter);e.modelPosition=po.createBefore(t)}t.stop()}else if(\"li\"==i.name&&n.nodeBefore&&(\"ul\"==n.nodeBefore.name||\"ol\"==n.nodeBefore.name)){const s=r.toModelElement(i);let o=1,a=n.nodeBefore;for(;a&&(a.is(\"ul\")||a.is(\"ol\"));)o+=r.getModelLength(a),a=a.previousSibling;e.modelPosition=po.createBefore(s).getShiftedBy(o),t.stop()}}function ew(t,[e,n]){let i=e.is(\"documentFragment\")?e.getChild(0):e;if(i&&i.is(\"listItem\")){const t=n.getFirstPosition();let e=null;if(t.parent.is(\"listItem\")?e=t.parent:t.nodeBefore&&t.nodeBefore.is(\"listItem\")&&(e=t.nodeBefore),e){const t=e.getAttribute(\"indent\");if(t>0)for(;i&&i.is(\"listItem\");)i._setAttribute(\"indent\",i.getAttribute(\"indent\")+t),i=i.nextSibling}}}function nw(t,e){const n=!!e.sameIndent,i=!!e.smallerIndent,r=t instanceof ho?t.getAttribute(\"indent\"):e.indent;let s=t instanceof ho?t.previousSibling:t.nodeBefore;for(;s&&\"listItem\"==s.name;){const t=s.getAttribute(\"indent\");if(n&&r==t||i&&r>t)return s;s=s.previousSibling}return null}function iw(t,e,n){return e&&n&&(\"ul\"==e.name||\"ol\"==e.name)&&e.name==n.name?t.mergeContainers(Ii.createAfter(e)):null}function rw(t,e,n){const i=e.parent,r=n.mapper,s=n.writer;let o=r.toViewPosition(po.createBefore(t));const a=nw(t,{sameIndent:!0,smallerIndent:!0}),l=t.previousSibling;if(a&&a.getAttribute(\"indent\")==t.getAttribute(\"indent\")){const t=r.toViewElement(a);o=s.breakContainer(Ii.createAfter(t))}else o=l&&\"listItem\"==l.name?r.toViewPosition(po.createAt(l,\"end\")):r.toViewPosition(po.createBefore(t));if(o=ow(o),s.insert(o,i),l&&\"listItem\"==l.name){const t=r.toViewElement(l),n=new Fi({boundaries:new Ni(Ii.createAt(t,0),o),ignoreElementEnd:!0});for(const t of n)if(t.item.is(\"li\")){const i=s.breakContainer(Ii.createBefore(t.item)),r=t.item.parent,o=Ii.createAt(e,\"end\");iw(s,o.nodeBefore,o.nodeAfter),s.move(Ni.createOn(r),o),n.position=i}}else{const n=i.nextSibling;if(n&&(n.is(\"ul\")||n.is(\"ol\"))){let i=null;for(const e of n.getChildren()){const n=r.toModelElement(e);if(!(n&&n.getAttribute(\"indent\")>t.getAttribute(\"indent\")))break;i=e}i&&(s.breakContainer(Ii.createAfter(i)),s.move(Ni.createOn(i.parent),Ii.createAt(e,\"end\")))}}iw(s,i,i.nextSibling),iw(s,i.previousSibling,i)}function sw(t,e,n,i,r){const s=nw(e,{sameIndent:!0,smallerIndent:!0,indent:t}),o=r.mapper,a=r.writer,l=s?s.getAttribute(\"indent\"):null;let c;if(s)if(l==t){const t=o.toViewElement(s).parent;c=Ii.createAfter(t)}else{const t=po.createAt(s,\"end\");c=o.toViewPosition(t)}else c=n;c=ow(c);for(const t of[...i.getChildren()])(t.is(\"ul\")||t.is(\"ol\"))&&(c=a.move(Ni.createOn(t),c).end,iw(a,t,t.nextSibling),iw(a,t.previousSibling,t))}function ow(t){return t.getLastMatchingPosition(t=>t.item.is(\"uiElement\"))}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class aw extends qd{static get requires(){return[Sp]}init(){const t=this.editor;t.model.schema.register(\"listItem\",{inheritAllFrom:\"$block\",allowAttributes:[\"type\",\"indent\"]});const e=t.data,n=t.editing;t.model.document.registerPostFixer(e=>(function(t,e){const n=t.document.differ.getChanges(),i=new Map;let r=!1;for(const t of n)if(\"insert\"==t.type&&\"listItem\"==t.name)s(t.position);else if(\"insert\"==t.type&&\"listItem\"!=t.name){if(\"$text\"!=t.name){const n=t.position.nodeAfter;n.hasAttribute(\"indent\")&&(e.removeAttribute(\"indent\",n),r=!0),n.hasAttribute(\"type\")&&(e.removeAttribute(\"type\",n),r=!0)}s(t.position.getShiftedBy(t.length))}else\"remove\"==t.type&&\"listItem\"==t.name?s(t.position):\"attribute\"==t.type&&\"indent\"==t.attributeKey?s(t.range.start):\"attribute\"==t.type&&\"type\"==t.attributeKey&&s(t.range.start);for(const t of i.values())o(t),a(t);return r;function s(t){const e=t.nodeBefore;if(e&&e.is(\"listItem\")){let n=e;if(i.has(n))return;for(;n.previousSibling&&n.previousSibling.is(\"listItem\");)if(n=n.previousSibling,i.has(n))return;i.set(t.nodeBefore,n)}else{const e=t.nodeAfter;e&&e.is(\"listItem\")&&i.set(e,e)}}function o(t){let n=0,i=null;for(;t&&t.is(\"listItem\");){const s=t.getAttribute(\"indent\");if(s>n){let o;null===i?(i=s-n,o=n):(i>s&&(i=s),o=s-i),e.setAttribute(\"indent\",o,t),r=!0}else i=null,n=t.getAttribute(\"indent\")+1;t=t.nextSibling}}function a(t){let n=[],i=null;for(;t&&t.is(\"listItem\");){const s=t.getAttribute(\"indent\");if(i&&i.getAttribute(\"indent\")>s&&(n=n.slice(0,s+1)),0!=s)if(n[s]){const i=n[s];t.getAttribute(\"type\")!=i&&(e.setAttribute(\"type\",i,t),r=!0)}else n[s]=t.getAttribute(\"type\");i=t,t=t.nextSibling}}})(t.model,e)),n.mapper.registerViewToModelLength(\"li\",lw),e.mapper.registerViewToModelLength(\"li\",lw),n.mapper.on(\"modelToViewPosition\",Zg),n.mapper.on(\"viewToModelPosition\",tw),e.mapper.on(\"modelToViewPosition\",Zg),n.downcastDispatcher.on(\"insert\",Gg,{priority:\"high\"}),n.downcastDispatcher.on(\"insert:listItem\",Wg),e.downcastDispatcher.on(\"insert\",Gg,{priority:\"high\"}),e.downcastDispatcher.on(\"insert:listItem\",Wg),n.downcastDispatcher.on(\"attribute:type:listItem\",$g),e.downcastDispatcher.on(\"attribute:type:listItem\",$g),n.downcastDispatcher.on(\"attribute:indent:listItem\",Kg),e.downcastDispatcher.on(\"attribute:indent:listItem\",Kg),n.downcastDispatcher.on(\"remove:listItem\",Hg),n.downcastDispatcher.on(\"remove\",Yg,{priority:\"low\"}),e.downcastDispatcher.on(\"remove:listItem\",Hg),e.downcastDispatcher.on(\"remove\",Yg,{priority:\"low\"}),e.upcastDispatcher.on(\"element:ul\",Qg,{priority:\"high\"}),e.upcastDispatcher.on(\"element:ol\",Qg,{priority:\"high\"}),e.upcastDispatcher.on(\"element:li\",Xg,{priority:\"high\"}),e.upcastDispatcher.on(\"element:li\",Jg),t.model.on(\"insertContent\",ew,{priority:\"high\"}),t.commands.add(\"numberedList\",new Lg(t,\"numbered\")),t.commands.add(\"bulletedList\",new Lg(t,\"bulleted\")),t.commands.add(\"indentList\",new zg(t,\"forward\")),t.commands.add(\"outdentList\",new zg(t,\"backward\"));const i=this.editor.editing.view.document;this.listenTo(i,\"enter\",(t,e)=>{const n=this.editor.model.document,i=n.selection.getLastPosition().parent;n.selection.isCollapsed&&\"listItem\"==i.name&&i.isEmpty&&(this.editor.execute(\"outdentList\"),e.preventDefault(),t.stop())}),this.listenTo(i,\"delete\",(t,e)=>{if(\"backward\"!==e.direction)return;const n=this.editor.model.document.selection;if(!n.isCollapsed)return;const i=n.getFirstPosition();if(!i.isAtStart)return;const r=i.parent;\"listItem\"===r.name&&(r.previousSibling&&\"listItem\"===r.previousSibling.name||(this.editor.execute(\"outdentList\"),e.preventDefault(),t.stop()))},{priority:\"high\"});const r=t=>(e,n)=>{this.editor.commands.get(t).isEnabled&&(this.editor.execute(t),n())};this.editor.keystrokes.set(\"Tab\",r(\"indentList\")),this.editor.keystrokes.set(\"Shift+Tab\",r(\"outdentList\"))}}function lw(t){let e=1;for(const n of t.getChildren())if(\"ul\"==n.name||\"ol\"==n.name)for(const t of n.getChildren())e+=lw(t);return e}var cw=n(13),hw=n.n(cw),uw=n(12),dw=n.n(uw);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass fw extends qd{init(){const t=this.editor.t;this._addButton(\"numberedList\",t(\"Numbered List\"),hw.a),this._addButton(\"bulletedList\",t(\"Bulleted List\"),dw.a)}_addButton(t,e,n){const i=this.editor;i.ui.componentFactory.add(t,r=>{const s=i.commands.get(t),o=new _f(r);return o.set({label:e,icon:n,tooltip:!0}),o.bind(\"isOn\",\"isEnabled\").to(s,\"value\",\"isEnabled\"),this.listenTo(o,\"execute\",()=>i.execute(t)),o})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass mw extends Gd{constructor(t,e){super(t),this.attributeKey=e}refresh(){const t=this.editor.model,e=t.document;this.value=e.selection.getAttribute(this.attributeKey),this.isEnabled=t.schema.checkAttributeInSelection(e.selection,this.attributeKey)}execute(t={}){const e=this.editor.model,n=e.document.selection,i=t.value;e.change(t=>{if(n.isCollapsed)i?t.setSelectionAttribute(this.attributeKey,i):t.removeSelectionAttribute(this.attributeKey);else{const r=e.schema.getValidRanges(n.getRanges(),this.attributeKey);for(const e of r)i?t.setAttribute(this.attributeKey,i,e):t.removeAttribute(this.attributeKey,e)}})}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class pw extends mw{constructor(t){super(t,\"fontFamily\")}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function gw(t){return t.map(ww).filter(t=>!!t)}function ww(t){return\"object\"==typeof t?t:\"default\"===t?{title:\"Default\",model:void 0}:\"string\"==typeof t?function(t){const e=t.replace(/\"|'/g,\"\").split(\",\"),n=e[0],i=e.map(bw).join(\", \");return{title:n,model:n,view:{name:\"span\",style:{\"font-family\":i}}}}(t):void 0}function bw(t){return(t=t.trim()).indexOf(\" \")>0&&(t=`'${t}'`),t}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function vw(t,e){const n={model:{key:t,values:[]},view:{},upcastAlso:{}};for(const t of e)n.model.values.push(t.model),n.view[t.model]=t.view,t.upcastAlso&&(n.upcastAlso[t.model]=t.upcastAlso);return n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */const _w=\"fontFamily\";class yw extends qd{constructor(t){super(t),t.config.define(_w,{options:[\"default\",\"Arial, Helvetica, sans-serif\",\"Courier New, Courier, monospace\",\"Georgia, serif\",\"Lucida Sans Unicode, Lucida Grande, sans-serif\",\"Tahoma, Geneva, sans-serif\",\"Times New Roman, Times, serif\",\"Trebuchet MS, Helvetica, sans-serif\",\"Verdana, Geneva, sans-serif\"]})}init(){const t=this.editor;t.model.schema.extend(\"$text\",{allowAttributes:_w});const e=gw(t.config.get(\"fontFamily.options\")).filter(t=>t.model),n=vw(_w,e);t.conversion.attributeToElement(n),t.commands.add(_w,new pw(t))}}var kw=n(11),xw=n.n(kw);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Aw extends qd{init(){const t=this.editor,e=t.t,n=this._getLocalizedOptions(),i=t.commands.get(\"fontFamily\");t.ui.componentFactory.add(\"fontFamily\",r=>{const s=zp(r);return qp(s,function(t,e){const n=new ji;for(const i of t){const t=new Vp({commandName:\"fontFamily\",commandParam:i.model,label:i.title});t.bind(\"isActive\").to(e,\"value\",t=>t===i.model),i.view&&i.view.style&&t.set(\"style\",`font-family: ${i.view.style[\"font-family\"]}`),n.add(t)}return n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(n,i)),s.buttonView.set({label:e(\"Font Family\"),icon:xw.a,tooltip:!0}),s.extendTemplate({attributes:{class:\"ck-font-family-dropdown\"}}),s.bind(\"isEnabled\").to(i),this.listenTo(s,\"execute\",e=>{t.execute(e.source.commandName,{value:e.source.commandParam}),t.editing.view.focus()}),s})}_getLocalizedOptions(){const t=this.editor,e=t.t;return gw(t.config.get(\"fontFamily.options\")).map(t=>(\"Default\"===t.title&&(t.title=e(\"Default\")),t))}}class Cw extends qd{static get requires(){return[yw,Aw]}static get pluginName(){return\"FontFamily\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */class Tw extends mw{constructor(t){super(t,\"fontSize\")}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */function Sw(t){return t.map(Ew).filter(t=>!!t)}const Pw={tiny:{title:\"Tiny\",model:\"tiny\",view:{name:\"span\",class:\"text-tiny\"}},small:{title:\"Small\",model:\"small\",view:{name:\"span\",class:\"text-small\"}},big:{title:\"Big\",model:\"big\",view:{name:\"span\",class:\"text-big\"}},huge:{title:\"Huge\",model:\"huge\",view:{name:\"span\",class:\"text-huge\"}}};function Ew(t){if(\"object\"==typeof t)return t;if(Pw[t])return Pw[t];if(\"default\"===t)return{model:void 0,title:\"Default\"};const e=parseFloat(t);var n;\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */return isNaN(e)?void 0:(n=e,{title:String(n),model:n,view:{name:\"span\",style:{\"font-size\":`${n}px`}}})}const Ow=\"fontSize\";class Rw extends qd{constructor(t){super(t),t.config.define(Ow,{options:[\"tiny\",\"small\",\"default\",\"big\",\"huge\"]});const e=Sw(this.editor.config.get(\"fontSize.options\")).filter(t=>t.model),n=vw(Ow,e);t.conversion.attributeToElement(n),t.commands.add(Ow,new Tw(t))}init(){this.editor.model.schema.extend(\"$text\",{allowAttributes:Ow})}}var Mw=n(10),Fw=n.n(Mw);n(29);\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Vw extends qd{init(){const t=this.editor,e=t.t,n=this._getLocalizedOptions(),i=t.commands.get(\"fontSize\");t.ui.componentFactory.add(\"fontSize\",r=>{const s=zp(r);return qp(s,function(t,e){const n=new ji;for(const i of t){const t=new Vp({commandName:\"fontSize\",commandParam:i.model,label:i.title,class:\"ck-fontsize-option\"});i.view&&i.view.style&&t.set(\"style\",`font-size:${i.view.style[\"font-size\"]}`),i.view&&i.view.class&&t.set(\"class\",`${t.class} ${i.view.class}`),t.bind(\"isActive\").to(e,\"value\",t=>t===i.model),n.add(t)}return n}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */(n,i)),s.buttonView.set({label:e(\"Font Size\"),icon:Fw.a,tooltip:!0}),s.extendTemplate({attributes:{class:[\"ck-font-size-dropdown\"]}}),s.bind(\"isEnabled\").to(i),this.listenTo(s,\"execute\",e=>{t.execute(e.source.commandName,{value:e.source.commandParam}),t.editing.view.focus()}),s})}_getLocalizedOptions(){const t=this.editor,e=t.t,n={Default:e(\"Default\"),Tiny:e(\"Tiny\"),Small:e(\"Small\"),Big:e(\"Big\"),Huge:e(\"Huge\")};return Sw(t.config.get(\"fontSize.options\")).map(t=>{const e=n[t.title];return e&&e!=t.title&&(t=Object.assign({},t,{title:e})),t})}}class Iw extends qd{static get requires(){return[Rw,Vw]}static get pluginName(){return\"FontSize\"}}\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */n.d(e,\"default\",function(){return Nw});\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass Nw extends zd{}Nw.build={plugins:[class extends qd{static get requires(){return[Kd,Xd,df,Tf]}static get pluginName(){return\"Essentials\"}},class extends qd{static get requires(){return[Pf]}static get pluginName(){return\"CKFinderUploadAdapter\"}init(){const t=this.editor.config.get(\"ckfinder.uploadUrl\");t&&(this.editor.plugins.get(Pf).createUploadAdapter=(e=>new Vf(e,t,this.editor.t)))}},class extends qd{static get pluginName(){return\"Autoformat\"}afterInit(){this._addListAutoformats(),this._addBasicStylesAutoformats(),this._addHeadingAutoformats(),this._addBlockQuoteAutoformats()}_addListAutoformats(){const t=this.editor.commands;t.get(\"bulletedList\")&&new If(this.editor,/^[*-]\\s$/,\"bulletedList\"),t.get(\"numberedList\")&&new If(this.editor,/^\\d+[.|)]\\s$/,\"numberedList\")}_addBasicStylesAutoformats(){const t=this.editor.commands;t.get(\"bold\")&&(new Nf(this.editor,/(\\*\\*)([^*]+)(\\*\\*)$/g,\"bold\"),new Nf(this.editor,/(__)([^_]+)(__)$/g,\"bold\")),t.get(\"italic\")&&(new Nf(this.editor,/(?:^|[^*])(\\*)([^*_]+)(\\*)$/g,\"italic\"),new Nf(this.editor,/(?:^|[^_])(_)([^_]+)(_)$/g,\"italic\")),t.get(\"code\")&&new Nf(this.editor,/(`)([^`]+)(`)$/g,\"code\")}_addHeadingAutoformats(){const t=this.editor.commands.get(\"heading\");t&&t.modelElements.filter(t=>t.match(/^heading[1-6]$/)).forEach(t=>{const e=t[7],n=new RegExp(`^(#{${e}})\\\\s$`);new If(this.editor,n,()=>{this.editor.execute(\"heading\",{value:t})})})}_addBlockQuoteAutoformats(){this.editor.commands.get(\"blockQuote\")&&new If(this.editor,/^>\\s$/,\"blockQuote\")}},class extends qd{static get requires(){return[jf,Wf]}static get pluginName(){return\"Bold\"}},class extends qd{static get requires(){return[$f,Jf]}static get pluginName(){return\"Italic\"}},class extends qd{static get requires(){return[nm,sm]}static get pluginName(){return\"BlockQuote\"}},class extends qd{static get requires(){return[fm,cp,Ap]}static get pluginName(){return\"EasyImage\"}},class extends qd{static get requires(){return[Fp,Wp]}static get pluginName(){return\"Heading\"}},cp,class extends qd{static get requires(){return[Qp]}static get pluginName(){return\"ImageCaption\"}},class extends qd{static get requires(){return[gg,wg]}static get pluginName(){return\"ImageStyle\"}},class extends qd{static get requires(){return[np]}static get pluginName(){return\"ImageToolbar\"}init(){const t=this.editor,e=t.plugins.get(\"BalloonToolbar\");e&&this.listenTo(e,\"show\",e=>{Em(t.editing.view.document.selection)&&e.stop()},{priority:\"high\"})}afterInit(){const t=this.editor,e=t.config.get(\"image.toolbar\");e&&e.length&&(this._balloon=this.editor.plugins.get(\"ContextualBalloon\"),this._toolbar=new Ld,this._toolbar.fillFromConfig(e,t.ui.componentFactory),this.listenTo(t.editing.view,\"render\",()=>{this._checkIsVisible()}),this.listenTo(t.ui.focusTracker,\"change:isFocused\",()=>{this._checkIsVisible()},{priority:\"low\"}))}_checkIsVisible(){const t=this.editor;t.ui.focusTracker.isFocused&&Em(t.editing.view.document.selection)?this._showToolbar():this._hideToolbar()}_showToolbar(){const t=this.editor;this._isVisible?sp(t):this._balloon.hasView(this._toolbar)||this._balloon.add({view:this._toolbar,position:op(t),balloonClassName:bg})}_hideToolbar(){this._isVisible&&this._balloon.remove(this._toolbar)}get _isVisible(){return this._balloon.visibleView==this._toolbar}},Ap,class extends qd{static get requires(){return[Tg,Dg]}static get pluginName(){return\"Link\"}},class extends qd{static get requires(){return[aw,fw]}static get pluginName(){return\"List\"}},Sp,Ap,class extends qd{static get requires(){return[Cw,Iw]}static get pluginName(){return\"Font\"}}],config:{toolbar:{items:[\"fontSize\",\"fontFamily\",\"heading\",\"|\",\"bold\",\"italic\",\"link\",\"bulletedList\",\"numberedList\",\"imageUpload\",\"blockQuote\",\"undo\",\"redo\"]},image:{toolbar:[\"imageStyle:full\",\"imageStyle:side\",\"|\",\"imageTextAlternative\"]},language:\"en\"}}},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .text-tiny {\\n| \\tfont-size: .7em;\\n| }\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-link-actions {\\n| \\t& .ck-link-actions__preview {\\n| \\t\\tdisplay: inline-block;\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-link-form {\\n| \\t& .ck-labeled-input {\\n| \\t\\tdisplay: inline-block;\")},function(t,e){},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| :root {\\n| \\t--ck-image-style-spacing: 1.5em;\\n| }\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-content .image > figcaption {\\n| \\tcolor: hsl(0, 0%, 20%);\\n| \\tbackground-color: hsl(0, 0%, 97%);\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-placeholder::before {\\n| \\tcontent: attr( data-placeholder );\\n| \")},function(t,e){},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-toolbar-dropdown {\\n| \\t& .ck-toolbar {\\n| \\t\\tflex-wrap: nowrap;\")},function(t,e){throw new Error(\"Module parse failed: Unexpected character '@' (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| @import \\\"../../mixins/_unselectable.css\\\";\\n| \\n| .ck-list {\")},function(t,e){throw new Error(\"Module parse failed: Unexpected character '@' (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| @import \\\"../tooltip/mixins/_tooltip.css\\\";\\n| \\n| .ck-dropdown {\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (7:0)\\nYou may need an appropriate loader to handle this file type.\\n| \\n| /* Infinite progress bar default width. */\\n| :root {\\n| \\t--ck-image-upload-progress-line-width: 30px;\\n| }\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-content .image {\\n| \\tclear: both;\\n| \\ttext-align: center;\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-balloon-panel {\\n| \\tdisplay: none;\\n| \\tposition: absolute;\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-text-alternative-form {\\n| \\t& .ck-labeled-input {\\n| \\t\\tdisplay: inline-block;\")},function(t,e){},function(t,e){},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-content blockquote {\\n| \\t/* See #12 */\\n| \\toverflow: hidden;\")},function(t,e){throw new Error('Module parse failed: Unexpected character \\'@\\' (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| @import \"../../mixins/_unselectable.css\";\\n| @import \"../tooltip/mixins/_tooltip.css\";\\n| ')},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-tooltip,\\n| .ck-tooltip__text::after {\\n| \\tposition: absolute;\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:12)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| svg.ck-icon {\\n| \\tvertical-align: middle;\\n| }\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-editor {\\n| \\t/* All the elements within `.ck-editor` are positioned relatively to it.\\n| \\t If any element needs to be positioned with respect to the <body>, etc.,\")},function(t,e){throw new Error(\"Module parse failed: Unexpected character '@' (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| @import \\\"../../mixins/_unselectable.css\\\";\\n| \\n| .ck-toolbar {\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-editor {\\n| \\t& .ck-sticky-panel {\\n| \\t\\t& .ck-sticky-panel__content_sticky {\")},function(t,e){throw new Error(\"Module parse failed: Unexpected token (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| .ck-label {\\n| \\tdisplay: block;\\n| }\")},function(t,e){},function(t,e){throw new Error('Module parse failed: Unexpected character \\'@\\' (6:0)\\nYou may need an appropriate loader to handle this file type.\\n|  */\\n| \\n| @import \"./_hidden.css\";\\n| @import \"./_reset.css\";\\n| @import \"./_zindex.css\";')},function(t,e){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(t){\"object\"==typeof window&&(n=window)}t.exports=n}]).default});","extractedComments":[]}