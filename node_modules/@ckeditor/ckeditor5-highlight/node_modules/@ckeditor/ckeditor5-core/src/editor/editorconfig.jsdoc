/**
 * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */

/**
 * @module core/editor/editorconfig
 */

/**
 * CKEditor configuration options.
 *
 * The object defining editor configuration can be passed when initializing the editor:
 *
 *		EditorClass
 *			.create( {
 * 				toolbar: [ 'bold', 'italic' ],
 *				image: {
 *					styles: [
 *						...
 *					]
 *				}
 * 			} )
 *			.then( ... )
 *			.catch( ... );
 *
 * Check the {@glink builds/guides/integration/configuration Configuration guide} for more information
 * about setting configuration options.
 *
 * @interface EditorConfig
 */

/**
 * The list of plugins to load.
 *
 * If you use an {@glink builds/guides/overview editor build} you can define the list of plugins to load
 * using names of plugins which are available:
 *
 *		const config = {
 *			plugins: [ 'Bold', 'Italic', 'Typing', 'Enter', ... ]
 *		};
 *
 * You can check the list of plugins available in a build using this snippet:
 *
 *		ClassicEditor.build.plugins.map( plugin => plugin.pluginName );
 *
 * If you use an editor creator directly (imported from a package like `@ckeditor/ckeditor5-editor-classic`) or you
 * want to load additional plugins which were not included in a build you use, then you need to specify
 * the plugins using their constructors:
 *
 *		// A preset of plugins is a plugin as well.
 *		import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';
 *		// The bold plugin.
 *		import Bold from '@ckeditor/ckeditor5-editor-basic-styles/src/bold';
 *
 *		const config = {
 *			plugins: [ Essentials, Bold ]
 *		};
 *
 * @member {Array.<String|Function>} module:core/editor/editorconfig~EditorConfig#plugins
 */

/**
 * The list of plugins which should not be loaded despite being available in an {@glink builds/guides/overview editor build}.
 *
 *		const config = {
 *			removePlugins: [ 'Bold', 'Italic' ]
 *		};
 *
 * **Note:** Be careful when removing plugins using `config.removePlugins` from CKEditor builds.
 * If removed plugins were providing toolbar buttons, the default toolbar configuration included in a build
 * will become invalid. In such case you need to provide the updated
 * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar configuration}.
 *
 * @member {Array.<String>} module:core/editor/editorconfig~EditorConfig#removePlugins
 */

/**
 * Editor toolbar configuration.
 *
 * Simple format (specifies only toolbar items):
 *
 *		const config = {
 *			toolbar: [ 'bold', 'italic', '|', 'undo', 'redo' ]
 *		};
 *
 * Extended format:
 *
 *		const config = {
 *			toolbar: {
 *				items: [ 'bold', 'italic', '|', 'undo', 'redo' ],
 *
 *				viewportTopOffset: 30
 *			}
 *		};
 *
 * Options which can be set using the extended format:
 *
 * * **`toolbar.items`** – Array of toolbar items names. The components (buttons, dropdowns, etc.) which can be used
 * as toolbar items are defined in `editor.ui.componentFactory` and can be listed using the following snippet:
 *
 *		Array.from( editor.ui.componentFactory.names() );
 *
 *	You can also use `'|'` to create a separator between groups of items:
 *
 *		toolbar: [ 'bold', 'italic', '|', 'undo', 'redo' ]
 *
 * * **`toolbar.viewportTopOffset`** – The offset (in pixels) from the top of the viewport used when positioning a sticky toolbar.
 * Useful when a page with which the editor is being integrated has some other sticky or fixed elements
 * (e.g. the top menu). Thanks to setting the toolbar offset the toolbar won't be positioned underneath or above the page's UI.
 *
 * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#toolbar
 */

/**
 * Editor UI's language.
 *
 * The language code is defined in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) standard.
 * CKEditor 5 currently supports around 20 languages and the number is growing.
 *
 * Note: You don't have to specify this option if your build is optimized for one language or if it's the default language
 * (English is the default language for CDN builds).
 *
 * Simple usage:
 *
 *		ClassicEditor
 *			.create( document.querySelector( '#editor' ), {
 *				language: 'de'
 *			} )
 *			.then( editor => {
 *				console.log( editor );
 *			} )
 *			.catch( error => {
 *				console.error( error );
 *			} );
 *
 * After this step you need to attach the corresponding translation file. Translation files are available at CDN for predefined builds:
 *		`<script src="https://cdn.ckeditor.com/ckeditor5/[version.number]/[distribution]/lang/[lang].js"></script>`
 *
 * But you can add them manually by coping from the `node_modules/@ckeditor/ckeditor5-build-[name]/build/lang/[lang].js'`.
 *
 * Check the {@glink features/ui-language UI language guide} for more information about the localization options and translation process.
 *
 * @member {String} module:core/editor/editorconfig~EditorConfig#language
 */
